{
  "url": "https://handbook.gitlab.com/handbook/marketing/blog/release-posts",
  "title": "GitLab Release Posts | The GitLab Handbook",
  "headings": [
    "GitLab Release Posts",
    "Introduction",
    "Quick Links",
    "Schedule",
    "Participants",
    "Volunteering for the Release post",
    "Release Post Manager Responsibilities",
    "PM Contributors",
    "PMM Reviewers",
    "PMM Lead",
    "TW Lead",
    "TW Reviewers",
    "Product Design Reviewers",
    "Engineering Managers",
    "Technical Advisors",
    "Getting help during the Release Post Assembly",
    "Getting help during the Release Post Deployment",
    "Incident Response",
    "Managing ongoing technical support tasks",
    "Monthly release blog post sections",
    "Major releases",
    "Adding content",
    "Technical aspects",
    "Patch and Security release posts",
    "Creating an MR for What’s New entries",
    "Related"
  ],
  "text": "GitLab Release Posts | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nJustin Farris\nSandra Gittlen\nBill Staples\nOn This Page\nIntroduction\nQuick Links\nSchedule\nMonday, 3 weeks before release\nMonday through Thursday, 3 weeks before release\nThursday, 1 week before release\nMonday of release week\nMonday through Tuesday of release week\nThursday, release day\nParticipants\nVolunteering for the Release post\nRelease Post Manager\nRelease Post Manager Shadow\nTechnical Advisor considerations\nRelease Post Manager Responsibilities\nCritical path tasks\nOther key tasks\nHow to get started\nCommunication\nContent reviews\nWhat RPM should look for when reviewing content blocks\nTips for reviews\nRelease post intro content\nPM Contributors\nContribution instructions\nKey dates\nRelease Post Item Instructions\nOption 1: automated MR creation\nOption 2: manual MR creation\nContent\nPrimary vs. secondary\nExperimental Features\nReviews\nRecommendations for optional PM Director/Group Manager and PMM Reviews\nMerging Content Block MRs\nReviewing, editing and updating merged content blocks\nAdding, editing, or removing merged content blocks during release week\nRequesting a late addition during release week\nProcess for removing merged content blocks\nAdding, editing, or removing merged content blocks after the release date\nAccountability\nPMs checklist\nNotes for PMs\nVacations\nReplies\nDocumentation\nPMM Reviewers\nMessaging review\nPMM Lead\nTW Lead\nStructural check\nMaking changes\nFrontmatter\nVersioned documentation release\nTW Reviewers\nUpdate the deprecations doc\nProduct Design Reviewers\nEngineering Managers\nTechnical Advisors\nGetting help during the Release Post Assembly\nRelease Post Manager\nTechnical Advisor\nAutomation\nGetting help during the Release Post Deployment\nRelease Post Manager\nTechnical Advisor\nIncident Response\nResponse and Resolution SLOs\nThe Role of the Technical Advisor\nOwnership, Positive Control, and Intent\nTimeline\nManaging ongoing technical support tasks\nTracking\nHandoff\nMonthly release blog post sections\nNotable Contributor\nFeatures\nTop feature\nPrimary features\nSecondary features\nContent blocks\nDescription\nFeature priority\nFeature name\nFeature Availability\nDocumentation\nIllustration (images, videos)\nFeature reporter\nStage\nCategories\nRelated issue, epic, merge request, or webpage\nFeature description\nCover image license\nImportant notes on upgrading\nUI improvements, performance improvements, and bug fixes\nOmnibus improvements\nExtras\nDeprecations, removals, and breaking changes\nMilestone due dates\nWalkthrough video\nDeprecations and other planned breaking change announcements\nAnnouncing an End of Support period\nEditing an announcement entry\nUpgrades\nMajor releases\nCommunicating breaking changes\nAdding content\nIllustrations\nImages\nVideos\nTechnical aspects\nGetting started\nFeature order\nRelease post branch creation Rake task\nRelease post item generator\nRelease post item linting\nDeprecation rake task troubleshooting\nResolve merge conflicts in deprecations.md\nRelease post merge request template\nAdding deprecations and removals index to\nwww-gitlab-com\nPatch and Security release posts\nCreating an MR for What’s New entries\nRelated\nPages\nTemplates\nThe Handbook\nMarketing\nBlog Handbook\nGitLab Release Posts\nGitLab Release Posts\nGuidelines to create and update release posts\nIntroduction\nRelease posts are\nblog posts\nthat announce changes to the GitLab application. This includes our regular cadence of monthly releases which happen\nevery month\n, and patch/security releases whenever necessary.\nRelease posts follow a process outlined here, and the templates that are used to create them also highlight what needs to be done, by whom, and when those items are due.\nQuick Links\nFrequently used templates\nHelpful reference pages\nRelease post scheduling\nSchedule\nAt a high level, the Release post schedule is:\nMonday, 3 weeks before release\nRelease Post Manager manually trigger the following\nscheduled pipelines in the www-gitlab-com project\n:\nRelease Post Process Kickoff Tasks\nThese invoke the\nbin/rake release_post:start\nrake task. (\npipeline configuration\n;\nrake task\n)\nThis task creates the branches, MRs, and issues necessary to run the Release Post process\nThe MRs and issues will be assigned to the Release Post Manager using the content in\nrelease_post_managers.yml\nAfter the\nRelease Post Process Kickoff Tasks\npipeline completes, and the release post branch is created with associated merge request, manually trigger the following\nscheduled pipelines in the www-gitlab-com project\n:\nAdd deprecations and removals to current release post branch\nMonday through Thursday, 3 weeks before release\nPMs\ncontribute MRs for their\ncontent blocks\nFeatures and Upgrades\nare contributed as release post item MRs targeting the release post branch\nPrimary items are added to\nfeatures.yml\nRecurring content blocks for Omnibus, GitLab Runner, and Mattermost are added by the area owner\nNon-standard product announcements, uncategorized items, and other announcements can be announced using the\nextras\ncontent type\nEMs and PMs\nannounce\ndeprecations and removals\nThursday, 1 week before release\nCode cutoff\nEMs and PMs\nmake sure items that are feature flagged are\nenabled by default\nto ensure inclusion into the self-managed release.\nDeprecation and removal MRs are assigned to TWs for final review and merge.\nTW Reviewers\nfinish review of Features, Deprecations, Removals, Upgrades, and Extras\nPMMs, Product Design Managers, Product Designers, and PM Leaders\ndo optional reviews of release post item MRs\nEMs\n:\nMerge feature release post item MRs if the underlying code was merged by the Thursday, 1 week before release\nMerge feature release post item MRs if manually verified to be in the release\nMRs can be manually verified using the\n/chatops run release check <MR URL> <RELEASE>\nchatops command\nTW Reviewers\nmerge deprecation and removal MRs\nNote:\nMRs added after the Thursday, 1 week before release should target the\nrelease-x-y\nbranch, not\nmaster\nMonday of release week\nAt\n4 pm UTC (11 am ET / 8 am PT)\n, another\nrelease post automation\ntask (\nscheduled pipeline\n;\nrake task\n) performs content assembly\nRelease Post Manager\npicks features to highlight and creates the introduction content\nMonday through Tuesday of release week\nContributor Success\nadds the\nNotable Contributor\nRelease Post Manager and Technical Writer\nperform final reviews\nChanges after\n4 pm UTC (11 am ET / 8 am PT)\non the Monday of release week will be done via the\nrelease-X-Y\nbranch and are subject to approval by the Release Post Manager.\nThe TW Lead verifies the deprecations and removals links in the release post\nRPM create a\nWhat’s New\nMR\nNote:\nThe Monday through Tuesday of release week can fall on vacations or holidays. PMs should designate who to respond to time-sensitive inquiries should they be unreachable. Release Post Managers are empowered to make decisions and\ndisplay bias for action\nif they haven’t received a response by EOD on the Tuesday of release week.\nThursday, release day\nRelease team\npublishes the latest package\nAfter the package is\nreleased\n, the\nRelease Post Manager\npublishes the release post to the  master branch\nThe\nGitLab.org Releases page\nwill also populate the changelog via an\nautomated process\nwhen release posts are published (\npipeline task\n)\nNote:\nDetails for all of these steps are described in the\nMonthly release\npost\nMR template\nand the\nMonthly release\npost item\nMR template\n.\nParticipants\nRelease Post Manager\nPM contributors\nPMM reviewers\nPMM lead\nTW lead\nProduct Design reviewers\nTW reviewers\nTechnical advisors\nEngineering Managers\nVolunteering for the Release post\nEach month, a Product Manager, Technical Writer, and an Engineering Department Technical Advisor volunteer to manage the release post, as listed in the\nRelease Post Scheduling page\n. Product Marketing Managers also sign up, but mostly as shadows for awareness for their related marketing activities. The Product Manager volunteer will lead the release post as the Release Post Manager and is listed as the Author of the release post when the post is published. To update the\nrelease post scheduling list\n, all volunteers need to edit the data file below:\nData YAML file\n: gathers the Release Post Managers for every release (9.0 onwards). Be sure to update the “Managers” section below the “Versions” if this is your first release.\nIt’s highly recommended that all volunteers shadow the release post prior to the one they run. Volunteers can update the previously mentioned data YAML file to indicate both when they shadow and when they help run the release post.\nRelease Post Managers will need\nMaintainer\naccess privileges for the\nhttps://gitlab.com/gitlab-com/www-gitlab-com/\nproject. If you need access, model your request after\nthis confidential issue\n.\nRelease Post Manager\nProduct Managers of any level (IC or managers) can volunteer for any release that doesn’t have someone assigned yet. While we encourage IC product managers to take advantage of this opportunity to demonstrate their leadership skills, we also value that managers will bring their experience to the role.\nBefore committing to the date of your choice, please be sure you can perform the critical path Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month as defined in the\nmonthly MR template\n. If you cannot perform any of the Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month, please sign up for a release post that better aligns with your availability.\nTo assign yourself as Release Post Manager or Release Post Manager’s shadow, simply add your name on the\nRelease Post Scheduling page\nby submitting an MR to update the\n/data/release_post_managers.yml\nfile. Otherwise, PMs will be assigned using a fair scheduling principle leveraging this\ntracking doc\n:\nMembers that never managed a release post before\nMembers that have the longest interval since they managed their last release post\nAfter joining the company, there is a grace period of a few months where the new Product Manager\nwill get up to speed with the process, then they will be scheduled to manage a release post.\nAdding members to the list is a shared task, and everyone can contribute by following the\nprinciple described above. Scheduled people are pinged in the merge request to make them aware.\nThey don’t need to confirm or approve, since they can always update the list if they are not\navailable for the given release post.\n⚠️ Important\nIf you’re scheduled for a given month and you can’t make it because you’re on\nvacation, overloaded, or for any other reason, that is okay,\nas long as you swap the\nRelease Post Manager role\nwith someone else\nbefore\ncreating the merge request and starting the\nwhole process. If you take it, you’re responsible for the entire process and must be\navailable to carry it out until the end.\nRelease Post Manager Shadow\nEach month, a Product Manager also acts as a shadow to support the Release Post Manager tasks if needed, act as back up on decisions in absence of the Release Post Manager and prepare to run the next release post. By shadowing the month prior to leading the effort, Product Managers are prepared and aware of any shifts in processes or optimizations needed since the last time they participated.\nShadows should remain engaged with the release process by:\nFollowing the activity in the slack channels\nAttending the weekly standups\nAssisting the Release Post Manager with content reviews and any other tasks they ask for help on\nIn order to properly onboard the shadow, the Release Post Manager should:\nSet up an initial coffee chat with your shadow the week after the previous release ships to get to know each other and clarify any initial questions from the shadow\nPoint the shadow to this page\nInclude the shadow in the initial release post MR creation\nInclude the shadow on all meetings and as much as possible on activities like reviews or other opportunities where you can work synchronously together\nRemember: The goal of the shadow is to get them engaged and aware of the process so they can run one on their own. Include the shadow as much as possible so they can learn and be prepared!\nTechnical Advisor considerations\nWe recommend that technical advisors volunteer for at least 2 or 3 release posts in a row to allow proper time for orientation with the process and the ongoing technical backlog.\nTechnical advisors are expected to:\nSolve problems with Git branch conflicts and Ruby installations.\nBe able to technically contribute to\nwww-gitlab-com\nsource code.\nResolve some of the\nbacklog issues\n.\nThe responsibilities of a technical advisor can be seen in more detail in\nTechnical advisors\n.\nRelease Post Manager Responsibilities\nCritical path tasks\nCompleting all the tasks assigned to the Release Post Manager in the Release Post MR template\nReminder: If you cannot perform any of the Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month as defined in the\nmonthly MR template\n, it is recommended you sign up for another release post. In the case that schedule/circumstances changes after you’d already signed up for the release post, please start a thread in #product in slack and tag\n@[name of PLT member who is reviewing this month]\n. The name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\nIdentify the top feature to highlight on the release post page and collecting feedback from the VP of Product\nCreating the What’s New MR and working with the VP of Product to identify what to include in\nWhat’s New\nSending out reminders about upcoming due dates\nMerging the release post MR on the\nrelease date\nand ensuring the release post page goes live\nCollecting feedback in the release post retrospective issue during the release post not just for your own challenges, but other team members challenges as they pop on Slack and other places\nDoing a sync retro with the Technical Writer, the Technical Advisor and the Release Post Manager Shadow sometime between the day after the\nrelease date\nand one week after the\nrelease date\n, to identify and collaboratively complete actions to improve the process and update the handbook/MRs\nMaking sure all the action of the retrospective issue are completed and the issue closed before the next\nrelease post automation task runs on the Monday, 3 weeks before relea\nOther key tasks\nRunning a weekly sync or async standup with the release post team (sync standup required for major releases)\nReviewing and supporting overall content quality and accuracy of all content published in the release post\nIncluding the Release Post Manager Shadow as much as possible on activities so they learn prior to their rotation\nAdding the\ncover image\nthat is (jpg, png) is\nsmaller than 300KB\nMonitoring the Slack Release Post channel to help answer questions and troubleshoot hurdles\nPinging the PMs and others as needed in Slack or MRs to help resolve feedback\nMaking sure the release post is\nready to merge two days before the\nrelease date\nCommunicate\ndirectly with product managers using\n#product\non Slack as needed to field questions that come up from viewers of the release post blog once it is live on the\nrelease date\nIf you need additional support in engaging with the community, the Developer Advocacy team (\n#dev-advocacy-team\non Slack) is available to support on\nrelease days\nMaking sure the auto sorting of secondary features by title (alpha) and stage generally looks good or is revised if need be\nContent Reviews\nWorking with PMs and others as needed to make sure any external blogs they reference in their content blogs go live before the release post blog gets published on the\nrelease date\nMaking sure the TW Lead is aware if release post items are added or removed after the Monday of release week\nInforming the social team that the release post has been published and it’s time to schedule social media posts\nSupporting on tasks specific to\nmajor releases\nif collaborators reach out\nHow to get started\nMake sure you have\nMaintainer\naccess to project\nhttps://gitlab.com/gitlab-com/www-gitlab-com/\n. If you need access, model your request after\nthis confidential issue\n.\nAn automated task will\ncreate the branches, MRs, and issues necessary to run the Release Post process, including making the appropriate assignments and mentions based on the\nRelease Post Manager schedule\n.\nIf you have not been assigned to a Release Post X.Y MR by the end of the day on the Monday, 3 weeks before relea:\nWork with your Technical Advisor to run\nbundle exec rake release_post:start\nto kickoff the X-Y Release Post, or\nFollow these steps to\nmanually create the release post branch and required directories/files\nCommunication\nThe Release Post Manager, the Technical Advisor, the Technical Writer, and PMM Lead will need to communicate about topics that are related to the release post but not relevant to the broader team, these chats should occur in Slack\n#X-Y-release-post-prep\nchannel in Slack, to minimize distractions and unnecessary notifications for the broader team in Slack #release-post.\nThe Release Post Manager posts in Slack channels most frequently with reminders. As such, if the Release Post Manager is seeking guidance on how to phrase certain posts, it’s recommended to scroll to the approximate date that post would have been made by the previous Release Post Manager in the relevant Slack channel. However, here are some best practices and an example:\nMake a clear, descriptive statement of what’s being shared and why\nIf you need someone to take an action, say so explicitly and tag that person\nIf the action requested is time sensitive, give a clear due date\nIf there are known issues they need to be aware of, list them out\nAlways cc your release post team for big announcements so everyone is in the loop\nWhen communicating in either Slack\n#release-post\nor\n#X-Y-release-post-prep\n, organize your announcements and requests via unique discussions threads to make it easier to track conversations. For example, avoid combining various reminders just because they fall on the same date when they address different topics. As a general rule, if there’s is a unique task list item for the reminder in the MR template, that reminder should get its own separate post whether it is in Slack or the MR itself. Also, review GitLab’s\neffective slack communication\nguidance.\nSample post to executive stakeholders for review is below.\nThe name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\n@[name of PLT member who is reviewing this month] The 13.6 Release Post has been generated and can be reviewed at\n`https://release-13-6.about.gitlab-review.app/releases/2020/11/22/gitlab-13-6-released/index.html`\nPlease share your feedback by\n<\ntime\ndatetime\n=\n\"18:00\"\n>\n6 pm UTC (1 pm ET / 10 am PT)\n</\ntime\n>\non Friday November 20 (tomorrow). Thank you for your review!\nCurrently there are no known issues/adjustments to the content but I know of one deprecation that needs to be added and will happen with my first wave of edits.\nHere's the 13.6 release post MR:\n`https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/66652`\ncc\n@TW\nLead\n@tech\n-advisor\n@PMM\nOther samples for posts include reminders and notices on any items that the Release Post Manager is taking:\n🎺 Hi team! Announcing a \"last call\" that no further contributions to the bugs, performance improvements, and usability improvements MRs will be taken after the Thursday, 1 week before release. Please get them in 🏃‍♂️ cc @[name of PLT member who is reviewing this month]\nHey team, reminder that there are currently XX Open and Ready MRs targeting XX.X milestone (link to open MRs). Please take a moment to ask your EMs to merge or to move out the items that won't make milestone.\nHi all, I will be completing the final merge for the release post in the next 45 minutes-1 hour! I will be coordinating any activities with team members to resolve any problems that come up. cc\n@Tech\nAdvisor\n@TW\nLead\nThe Developer Advocacy Team will reach out to the Release Post Manager in Slack #release-post following their\nRelease days process\nwhen they need help responding to inquiries about content in the release post blog. These needs will primarily arise within the first week of going live with the blog. However, as the Author for a specific release post, you may get pinged to help coordinate a response some weeks later as issues arise. You will usually just need to find the best DRI to handle the issue, often the PM of the release post item in question.\nSometimes, external PR and Marketing firms reporting on the release or managing media relations may ping the RPM directly with questions, since the RPM is the “author” of the release post. If this happens, the Release Post Manager should figure out who in Marketing can take over this communication.\nContent reviews\nThe due dates for various reviews across all participants can be found on the\nrelease post MR template\nand the\nrelease post item MR template\n. PM contributors are encouraged to cease attempts to add new content blocks after the content merge deadline on the Thursday, 1 week before release, and especially after final content assembly happens on the Monday of release week at\n3 pm UTC (11 am ET / 8 am PT)\n. Exceptions can be made for highly impactful features, but it is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release.\nKeeping an eye on the various content reviews (TW, PMM, and Director) for the individual release post items (content block MRs) is the responsibility of PM contributor. However, it is recommended that the Release Post Manager keep an eye on how many items are not yet marked with the Ready label on the Thursday, 3 weeks before release of the month or not yet merged on the Thursday, 1 week before release, and check in with PMs in Slack Release Post channel to support and clear hurdles if needed. A really easy way to do this is to keep your eyes on the\nPreview page\nand copy-edit and link check items as new items appear. It’s also important to do this because this page is LIVE to users and should be error free.\nThe review and any needed adjustment to the ordering of secondary features due to stakeholder feedback is the responsibility of the Release Post Manager. Secondary features, removals, and upgrade notes are all sorted alphabetically by title, grouped by stage. To affect the sort order of the secondary features, a change to the content block’s\ntitle\nis required. The Release Post Manager should work with the product managers of the content blocks to make these changes, to ensure accuracy and alignment.\nAfter the Review App for the release post has been generated, the Release Post Manager solicits additional feedback from the\nproduct leaders\nvia Slack in the #release-post channel.\nIt is the Release Post Manager’s responsibility to make sure all content is completed by the Tuesday of release week, ensuring a one day buffer is left for final error fixes and small improvements.\nNOTE:\nTo the extent possible, we strive to use\nGitLab’s Community Code Review Guidelines\nwhen performing Release Post content review.\nWhat RPM should look for when reviewing content blocks\nIt is recommended for the Release Post Manager to review all content for quality, including the marketing intro. But when reviewing content blocks in each release post item MRs, the RPM should look for the following:\nAre the why (problem) and the what (solution) clearly stated? See\nwriting about features\nas a guideline for what feature descriptions should contain.\nDo the filenames follow the recommended file-naming convention? See\nimportant note on naming files\nunder\nInstructions\nfor PM contributors.\nTips for reviews\nUtilize the\nAvailable now on GitLab\npage to easily scan release post items that have been merged.\nSearch the\nAvailable now on GitLab\nand preview pages for characters like\n[\n,\n]\n,\n(\n, and\n)\nto find malformed links.\nCopy/paste the content of those pages into a tool like Grammarly to find less obvious typos like duplicate words.\nRelease post intro content\nThe introduction content of the release post (found in\nYYYY-MM-DD-gitlab-X-Y-released.html.md\n)  is templated to be standard across all release posts, and should not be modified without approval from\n@justinfarris\n. This file is linked at the top of the release post MR for reference and ease of editing. The Release Post Manager will make sure all primary items are approved and a top feature is designated and ask the VP of Product for feedback.\nPM Contributors\nProduct Managers are responsible for\nraising MRs for their content blocks\nand ensuring they are reviewed by necessary contributors by the due date. These are mostly added by the Product Managers, each filling up the sections they are\naccountable for\n, but anyone can contribute, including community contributors. Content blocks should also be added for any epics or notable community contributions that were delivered.\nContribution instructions\nIn parallel with feature development, a merge request should be prepared by the PM with the required content.\nDo not wait\nfor the feature to be merged before drafting the release post item, it is recommended PMs write Release Post Item MRs as they prepare for the milestone Kickoff.\nImportant\nThe\nInstructions\nbelow apply up to the Monday of release week\n7:59 am UTC (2:59 am ET / Thursday, 1 week before release 11:59 pm PT)\n. After content assembly on the Monday of release week, anyone who wants to include a change in the upcoming release post must coordinate with the Release Post Manager and follow detailed instructions in the\nMerging content blocks after the Monday of release week\nsection for special handling of late additions.\nKey dates\nDuring kickoff preparation, or when planning for the upcoming milestone: consider creating the release posts early to enable the team to\nwork backwards\nThursday, three weeks before the release - Drafted\n: ready for review by Product Marketing, Tech Writer, and PM Group Manager or PM Director\nMonday through Thursday the week before the release - Reviewed\n: reviewed by all required stakeholders, content revised as needed and ready to be merged\nThursday, 1 week before release - Merged\n: release post item MR merged by the Engineering Manager if feature has been merged\nMonday of release week - Final content assembly\n: and release post blog content lock in preparation for final reviews/editing\nImportant\nIf a feature being announced involves references to external business partners, you’ll need to start MR draft approvals earlier. One such example would be\nCloud Seed\n. These types of announcements require extra reviews with GitLab leadership, business partners and Legal team. In these cases, please reach out to\n@justinfarris\nto start MR reviews at least one milestone ahead of the milestone in which you want to make the release post announcement.\nRelease Post Item Instructions\nOption 1: automated MR creation\nThe\nrelease post item generator\nautomates the creation of release post items using issues and epics. Draft your release post content under the\nRelease notes\nsection of the\nfeature issue template\nand then follow the\nrelease post item generator\ninstructions.\nNote:\nThe generator will not create an MR for a confidential issue. To add a release post item for work relating to a confidential issue, follow the steps below to create an MR manually and remove any confidential information or links.\nOption 2: manual MR creation\nCreate a new branch from\nmaster\nof the\nwww-gitlab-com repository\nfor each feature (primary, secondary, removal).\nDeprecations are handled differently\nOpen a merge request targeted at the\nmaster\nbranch\nUse the\nRelease Post Item template\nContent should be one YAML file added to\ndata/release_posts/unreleased/\non the\nmaster\nbranch\nSee\ndata/release_posts/unreleased/samples/\nfor format and sample content\nNote that the structure needs to be preserved, like\nfeatures:\nthen\nprimary:\n, then the feature content\nImages should be placed in\n/source/images/unreleased/\nUpdate the\ndata/features.yml\n(if applicable) to include your feature and commit the changes as part of the same merge request\nComplete the PM checklist included in the\nRelease Post Item MR template\n, which includes but not limited to these tasks:\nAssign the MR to the relevant Tech Writer for review\nAssign the MR to the relevant Product Marketing Manager, and/or Director if additional review is needed\nOnce all content is reviewed and complete, add the\nReady\nlabel and assign MR to the appropriate Engineering Manager (EM) to merge when the feature is deployed and enabled.\nImportant note on naming files\n: PMs should create file names that are descriptive and have reasonable overlap with the title of the content block itself. This makes it easier to related content blocks to yml file by different participants in the review process. Either underscores\n_\nor hyphens\n-\ncan be used as long as the correct prefix is used (\nstagename\n,\nremoval\n, or\nupgrade\n) as listed below.\nFeature file names:\nstagename-featurename.yml\n(for example,\ncreate-group-wikis.yml\n).\nDo not:\nDesignate primary vs. secondary as that can change.\nUse category or group name.\nInclude the reporter’s name.\nRemoval file names:\nremoval-something-else-descriptive.yml\nUpgrade file names:\nupgrade-another-description.yml\nSome troubleshooting hints:\nUse\ngit merge\n, don’t use\ngit rebase\n.\nRebase is a powerful tool that makes for a clean commit history, but due to the volume of commits by the number of collaborators on the\nwww-gitlab-com\nrepo, it will typically have a lot of conflicts you’ll have to manually work through. Since your content MRs should only contain changes relevant to your own content block and a single addition to\nfeatures.yml\n, merge conflicts should be minimal, and typically nonexistent. If you start a rebase and run in to issues, you can always back out with\ngit rebase --abort\n.\nRemember to close your quotes, check your filenames, and indent properly.\nMany vague pipeline errors are caused by common coding gotchas. Make sure your quotes are closed, the file you’re referencing uses\nexactly\nthe same filename you listed, and you have the right indentation set on each line.\nContent\nWe want to help people understand new features to increase adoption their adoption. In general, release posts should succinctly state the problem to solve, the solution, and how customers benefit from the solution. Be sure to reference your Direction items and Release features. All items which appear\nin our\nUpcoming Releases page\nshould be included in the relevant release post.\nWhen writing your content blocks, be sure to reference\nWriting about features\nto ensure your release post item writeups align with how GitLab communicates. For example, we avoid formal phrases such as “we are pleased to announce” and generally speak directly to our users by saying “you can now do x” rather than “the user can now do x”. Checking out the links to these guidelines will help you align our tone/voice as you write, ensuring a smoother and more speedy review process for your release post items.\nPM contributors are encouraged to use discretion if wanting to add new content blocks after the final merge deadline of the Thursday, 1 week before release, and especially after final content assembly happens at 8 AM PST (3 PM UTC). But if highly impactful features are released that can not wait till the next blog post, PMs should reach out and coordinate with the Release Post Manager. It is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release.\nPrimary vs. secondary\nWhen creating your content for a Release Post item you’ll need to determine if it’s a\nprimary\nor\nsecondary\nfeature. Do this in collaboration with your PMM counterpart and reference this guidance if you’re unsure:\nA feature should be\nprimary\nif the feature:\nMatures a category (post release you’d update the\ncategory maturity\nfor the category your feature lives within)\nIs\nnew\n, or a significant improvement - it adds key functionality that did not exist previously or significantly changes existing functionality\nHas high demand from customers or the wider community (measured by discussion or upvotes on an epic/issue)\nFeature ties into a current Marketing narrative or campaign\nAll\nprimary\nfeatures should have a corresponding entry in\nfeatures.yml\nas well as a photo or video in the release post item block.\nBeta features may be included as primary, or secondary items, but must clearly reflect the\nBeta\nstatus.\nExperimental features are not to be included as primary or secondary items to the release posts.\nExperimental Features\nTo include an experimental feature in the release post, use the\nexperiment template\n, when creating a release post item in the\nunreleased\ndirectory. Experiment features are displayed in their own section of the release post.\nReviews\nPM Director/Group Manager, PMM, and Product Design reviews are highly recommended, but the Tech Writer review is the only one required for inclusion in the Release Post. Tech Writer review is required even when late additions are made to the release post after the Monday of release week. The Tech Writing review should be focused on looking for typos, grammar errors, and helping with style. PMs are responsible for coordinating any significant content/tech changes. Communicating priority about which release post items are most important for review will help Product Section leads, PMMs, and Tech Writers review the right items by the Thursday, 3 weeks before release, to ensure the proper labels are applied to the MR and assign reviewers to the MR when it is ready for them to review (ex:\nTech Writing\n,\nDirection\n,\nDeliverable\n, etc).\nNote: For consistency, use the\nReviewers for Merge Requests\n] feature in GitLab when assigning PM Director/Group Manager, PMM, TW, and Product Design team members for content reviews.\nRecommendations for optional PM Director/Group Manager and PMM Reviews\nAs PMM reviews are not required, but recommended - and Product Leader and Product Design reviews are optional - PMs should consider a few things when determining which content blocks to request a review for:\nDoes the feature contribute to a Group or Stage’s overall Direction?\nDoes the feature contribute to increasing a Category’s maturity?\nDoes the feature increase our ability to compete in the market?\nDoes the feature have considerable customer demand?\nDoes the feature represent a significant UX improvement?\nIf the answer to any of these is “yes”, it is recommended that you coordinate with your Director, PMM, and Product Design counterpart to review the content block by the Thursday, 1 week before release. As the PM it is your responsibility to communicate what MRs need a review from the TWs, PMMs, Product Designers, and Directors as well as the MRs relative priority if you have multiple content block MRs that need reviews.\nMerging Content Block MRs\nEngineering Managers are the DRIs for merging these MRs when the feature is merged into the codebase itself. This allows all of the relevant parties (Product Managers, PMMs, Product Designers, Section Leads, Technical Writers) to have enough time to review the content without having to scramble or hold up engineering from releasing a feature.\nTo enable Engineering Managers to merge their feature blocks as soon as an issue has closed, please ensure all scheduled items you want to include in the release post have content blocks MRs created for them and have the\nReady\nlabel applied when content contribution and reviews are completed.\nReviewing, editing and updating merged content blocks\nAfter content block MRs are merged, they can be viewed on the\nPreview page\nand should be updated/edited via MRs to master up until the\nfinal merge deadline of the Thursday, 1 week before release\n. Starting on the Monday of release week, content block MRs should be viewed in the Review app of the release post branch after\nfinal content assembly\n, and updated/edited on the release post branch by coordinating with the Release Post Manager. From the\nrelease date\nforward you should view the content blocks\non the blog\n. It’s important to check this page after the content block MR is merged because this page is LIVE to users and should be error free.\nAdding, editing, or removing merged content blocks during release week\nAfter the content assembly starts on the Monday of\nrelease week\nand before the end of Tuesday of release week, adding any new or removing any merged release post items\nmust be coordinated with the Release Post Manager\n.\nThis is necessary to allow them to assess the impact on the release post and coordinate any necessary adjustments with the release post team (Tech Writer, PM, etc.). Failure to do so might result in your changes not being picked into the release post.\nBefore pinging the Release Post Manager, ask yourself if your content absolutely needs to be part of the current release post. At end-of-day on the Tuesday of release week, no late content blocks will be accepted.\nRequesting a late addition during release week\nPing the Release Post Manager (RPM) in\n#release-post\nto request adding a new late addition for the\nrelease post\n, and wait for the RPM to give confirmation to proceed. New late additions are release post items that were created after content assembly has already run. The Release Post Manager will do their best to accommodate the request, but it is not guaranteed.\nIf the RPM approves the late addition, then PM and RPM will proceed by:\nPM edits the release post item MR and updates the target branch to be on the release post\nrelease-X-Y\nbranch.\nPM\nrebases\nthe release post item MR on top of\nrelease-X-Y\nbranch.\nPM moves the RPI yml file and images from\n/data/release_posts/unreleased\nto\n/data/release_posts/x_y/\n.\nPM moves any images from\n/source/images/unreleased\nto\n/source/images/x_y/\nPM Ensure that the\nimage_url\nfield in the release post yml file points to the image file under\n/source/images/x_y/\n.\nPM requests a review of the release post item MR from the Release Post Manager and release post tech advisor. Quick action:\n/assign_reviewer RP-manager\nPM notifies release post team in the\n#X-Y-release-post\nSlack channel that the late addition has been requested with a link to the MR.\nThe MR can be approved and merged by the Release Post Manager.\nIf the feature is primary and you had not previously added it to\nfeatures.yml\n, you will need to create a second MR, branched from\nmaster\nto add the feature to\nfeatures.yml\n. (\nfeatures.yml\nshould be merged to\nmaster\n, not the release post branch).\nProcess for removing merged content blocks\nPing the Release Post Manager in Slack\n#release-post\nto notify them you need to remove an item already merged onto\nthe release X-Y\nbranch.\nEither the Release Post Manager or the PM, with approval from the Release Post Manager, will remove YAML and image files from the\nrelease X-Y\nbranch.\nThe PM will remove the feature from\nfeatures.yml\non master.\nAdding, editing, or removing merged content blocks after the release date\nYou can make changes to the\nrelease post\nafter it’s live to make edits to feature content blocks.\nTo edit a content block:\nAt the bottom of the release post you wish to edit, select “Edit this page”.\nFind and edit the relevant\n.yml\nfile in the correct subdirectory. For example, to add or edit the example Widgets feature to the 14.6 release post, create or edit the\ndata/release_posts/14_6/widgets_example.yml\nin an MR against\nmaster\n.\nTo remove the feature block, remove the file in your MR. Or to announce it in the next release post, move the file to the\ndata/release_posts/unreleased\nfolder.\nFor review and approval, assign the current cycle’s\nRelease Post Manager\na Reviewer.\nTo edit a deprecation, follow\nEditing a deprecation announcement entry\n.\nAccountability\nYou are responsible for the content you add to the blog post\n. Therefore,\nmake sure that:\nAll new features in this release are in the release post.\nAll the entries are correct, especially with regard to links to the documentation or feature pages (when available).\nFeature tier availability: all contain the\ncorrect entry\n.\nAll primary features are accompanied by their images.\nAll new and/or primary features are added to\ndata/features.yml\nwith a screenshot accompanying the feature (if the feature is visible in the UI)\n.\nAll images are optimized according to the\nimage guidelines\nand\nsmaller than 150KB.\nKeep in mind the\nfeatures.yml\nis the SSOT for displaying features across\nabout.gitlab.com\n.\nAll features should have a clear value driver.\nAs noted in the\nRelease Post Item template\n:\nMake it clear if a feature is\nnew\n, or is an improvement to an existing feature.\nMake sure your content is reasonably aligned with guidance in\nWriting about features\n.\nEnsure that titles use sentence case with feature and product names in capital case.\nWrite the description of every feature as you do to regular blog posts. Please write according to\nthe\nMarkdown guide\n.\n⚠️ Important\nMake sure to merge\nmaster\ninto the release post branch\nbefore\npushing changes\nto any existing file to avoid merge conflicts. Do not rebase,\ndo\ngit pull origin master\nthen\n:wq\n.\nPMs checklist\nOnce the PMs have included everything they’re accountable for, they should\ncheck their item\nin the release post MR description:\nBy checking your item, you will make it clear to the Release Post Manager that you have done your part in time (during the general contributions stage) and you’re waiting for review. If you don’t check it, it’s implicit that you didn’t finish your part in time, despite that’s the case or not.\nOnce all content is reviewed and complete, add the\nReady\nlabel and assign this issue to the Engineering Manager (EM). The EM is responsible for merging as soon as the implementing issue is deployed to GitLab.com, after which this content will appear on the GitLab.com Release page and can be included in the next release post. All release post items must be merged on or before the Thursday, 1 week before release. If a feature is not ready by the Thursday, 1 week before release deadline, the EM should push the release post item to the next milestone.\nNotes for PMs\nVacations\nIf you are on vacation before/during the release, fill all your items and create placeholders in the release post Yaml file for all the items you cannot add for whatever reason. To complete them, and to follow up with all the content you are responsible for, assign someone to take over for you and notify the Release Post Manager.\nReplies\nPlease respond to comments in the MR thread as soon as possible. We have a non-negotiable due date for release posts.\nDocumentation\nPlease add the\ndocumentation_link\nat the same time you add a content block to the release post. When you leave it to add it later, you will probably forget it, the reviewer will ping you later on during the review stage, and you will have little time to write, get your MR reviewed, approved, merged, and available in\nthe documentation\n.\nPMM Reviewers\nMessaging review\nEach PM is responsible for pinging their PMM counterpart when they need a review on the messaging for a Release Post Item MR or changes to\nfeatures.yml\n.\nLeave comments for the PMs on the items file in the MR. Make sure to comment in the diff on the line that you are referring to so that the PM has the context and comments can be resolved appropriately.\nSee\nwriting about features\nas a guideline for what feature descriptions show have.\nReview the messaging for these features look for these 5 elements:\nproblem/solution\n: Does this describe the user pain points (problem) as well as how the new feature removes the paint points (solves the problem)?\nshort/pithy\n: Is this communicated clearly with the fewest words possible?\ntone clarify\n: Is the language and sentence structure clear and grammatically correct? Is the text in the present tense, and is “you” used instead of “user.”\ntechnical clarity\n: Does the description of the feature make sense for various audiences, including folks who are not deeply familiar with GitLab?\nvalue driver\n: Does the feature help our users Increase Operational Effectiveness, Deliver Better Products Faster, or Reduce Security and Compliance Risk?\nTo understand the feature better look at the issue and MR for the feature, they are linked in the YAML. Sometimes the issue description will include the value prop. Read the comments in the issue and MR for the feature, often users and customers will chime in with why they want a feature and what pain the lack of the feature is causing.\nThe release post and\nfeatures.yml\ncan have the same or very similar content - e.g. same screen shot.\nThe tone of the release post is more about introducing the feature “we’re happy to ship XYZ…”\nThe tone of\nfeatures.yml\nshould be\nevergreen\nto appear on our website in various places.\nPMM Lead\nPMM lead is responsible for creating a release post highlight blurb for consumption by field and PR.\nThe tasks are included in the\nrelease post MR template\nand in the\nmonthly release post intro document\n.\nOn or before the third thursday of the month:\nCreate\nnew Product marketing\nissue with PMM-Release-Post template.\nCreate release highlights - 3-4 themes with description. Use this document to document your highlights\nUpdate the issue with the highlights\nUpdate highspot\nAdd the actual release post blog as a new piece of content in Highspot (Customer Outreach spot) (e.g.,\nrelease post\n)\nAdd this new release post on highspot to the\nGitLab Releases spot overview page\nin the GitLab Release Post section\nCreate a new pitch template for this release in Highspot (Company Pitch Templates spot) (e.g.,\npitch template\n)\nAdd this new pitch template to the\nGitLab Releases spot overview page\nin the Release Pitch Templates section\nFlag to comms to share in #sales\nShare with the PR and Field enablement team and tag release post manager.\nTW Lead\nNote\nTechnical writers review the individual release post items according\nto the\nstage/group they are assigned to\n.\nEach month, one of the technical writers is also responsible for the structural\ncheck of the final release post merge request. This section is about the latter.\nThe TW Lead is responsible for a final review of:\nRelease post top feature\nFor any identified issues, inform the\nTW reviewer\nto resolve as appropriate.\nRelease post primary features\nFor any identified issues, inform the\nTW reviewer\nto resolve as appropriate.\nFrontmatter check\nVerifying the deprecations and removals sections in the release post link to GitLab the corresponding pages in GitLab Docs.\nWhile individual TW reviewers and product managers have ultimate responsibility for the style and language of their release post items, including\ndeprecations, removals, breaking changes\n, and\nUpgrades\n, TW leads still have an overall responsibility to notify the Release Post Manager, the product managers and TW reviewers if style and language don’t seem reasonably consistent (things are obviously out of sync with known guidelines). But it is not the responsibility of the TW leads to\nfix\nstyle and language inconsistencies. However, TW leads\ndo\nhave the responsibility and ownership to make sure that all links in the release post point to relevant content and be fixed, if issues are found.\nConsideration: When communicating with your release post team, use the release post prep channel and organize discussions into threads to make it easier to track conversations. Also, review GitLab’s\neffective slack communication\nguidance.\nStructural check\nA technical writer, once assigned to the release post merge request, will check the syntax and the content structure.\nThe\nStructural check\nchecklist in the main release post merge request description\nwill guide them through the structural check.\nGiven that the technical writing review occurs in release post items'\nmerge requests, the purpose of the structural check is:\nReview the overall post for consistency. For example, if there’s an entry in a previous release post that deprecates an item called\nauth-server\nfor this date, raise questions if there’s also an entry that removes an item referred to as\nauth_server\n.\nMake sure the post renders well.\nThe content as a whole clearly describes the new features and feature improvements.\nCheck all the links work and are in place.\nCheck all content for syntax errors, typos and grammar mistakes, remove extra whitespace.\nVerify that the images look harmonic when scrolling through the page (for example, suppose that most of the images were screenshots taken of a large portion of the screen and one of them is super zoomed. This one should be ideally replaced with another that looks more like the rest of the images).\nThis should happen in the release post item review, but if there’s time, double-check documentation links and product tiers.\nMake sure the current release’s deprecations and removals also show up in the\ndeprecations doc\n.\nPay special attention to the release post Markdown file, which adds the introduction.\nReview the introduction briefly, but do not change the writing style nor the messaging;\nthese are owned by PMMs, so leave it to them to avoid unnecessary back-and-forths.\nMake sure feature descriptions make sense, anchors work fine, all internal links have\nthe relative path.\nNote\nThe introduction or other parts of the release post written may include links to external\nblog posts. These links may be broken until the Wednesday, day before release, but should still be flagged by the TW Lead\nduring the structural check so the Release Post Manager doesn’t miss coordinating\nwith authors of these external blogs to ensure they’re live before the release post blog goes live\non the\nrelease date\n.\nThe Release Post is considered a special blog post instance, so should adhere to the Marketing\neditorial team’s\nstyle guide\n.\nMaking changes\nUntil 8:00 am Pacific Time on the Monday of release week, the TW Lead should be able to make changes\ndirectly to the release post. After that time, anyone who wants to include a\nchange in the upcoming release may need to submit it in a separate MR, with a\ntarget of the\nrelease-X-Y\nbranch. For more information, see\nDevelop on a feature branch\n.\nFrontmatter\nIn its\nfrontmatter\n:\nLook for each entry as shown on the code block below.\nRemove any remaining HTML comments and unused blocks to clean up the file.\nCheck the\ntitle\nlength. The title should be short and deliver an easy-to-understand message Ensure the title fits nicely with the blog post’s title graphic. A general guideline for title length is about 60 to 70 characters.\n---\nrelease_number\n:\n\"X.Y\"\ntitle\n:\n\"GitLab X.Y Released with Feature A and Feature B\"\nauthor\n:\n\"Name Surname\"\nauthor_gitlab\n:\ngitlab.com-username\ncategories\n:\nreleases\nimage_title\n:\n'/images/X_Y/X_Y-cover-image.ext'\ndescription\n:\n\"GitLab X.Y Released with XXX, YYY, ZZZ, KKK, and much more!\"\ntwitter_image\n:\n'/images/X_Y/X_Y-cover-image.ext'\n# required - copy URL from image title section above\nlayout\n:\nrelease\nfeatured\n:\nyes\n# header_layout_dark: true #uncomment if the cover image is dark\n# release_number_dark: true #uncomment if you want a dark release number\n# release_number_image: \"/images/X_Y/X_Y-release-number-image.svg\" # uncomment if you want a svg image to replace the release number that normally overlays the background image\n---\nLayout:\nThe last two entries of the post’s frontmatter give the option for a\ndifferent layout. If you want to use a dark cover image, you’ll need\nto uncomment\nheader_layout_dark: true\n.\nIf you want only the release number to be dark, uncomment\nrelease_number_dark: true\n.\nThese two variables work independently; you can assign either of them\nor both of them to the same post.\nVersioned documentation release\nWhen a new GitLab version is released\nevery month\n, the Technical Writer who completed the release post structural check for the previous milestone sets up the release of the published documentation for that version.\nFor instructions, see the GitLab docs\nmonthly release process\n.\nTW Reviewers\nNote\nTW reviewers should not be confused with the\nTW lead\n.\nEach person in the Technical Writing team is responsible for the review\nof each individual release post item and deprecation item that falls under their\nrespective stage/group\n.\nWhen the PM creates a release post item merge request, or\ncreates a deprecation announcement\n, they should assign it to the TW\nof their group for review (required). The process for TW reviews is described in the:\nRelease post item template\nDeprecation\nMR template\nUpdate the deprecations doc\nThe\ndeprecations\ndoc is generated with .yml files in\ngitlab/data/deprecations\n.\nThe html pages are not generated automatically. The TW assigned as the reviewer of the deprecation item must run a Rake task to compile the documents. They can also run a separate task to check that the docs are up to date.\nWhile the author of the deprecations MR is responsible for creating the content, they are not responsible for updating the doc.\nUpdating the docs:\nFrom the command line, navigate to your local clone of the\ngitlab-org/gitlab\nproject, and check out the MR’s branch.\nCompile the deprecation documentation\n.\nCommit the updated doc and push the changes.\nSet the MR to merge when the pipeline succeeds (or merge if the pipeline is already complete).\nDeprecation MRs must be merged by the Thursday, 1 week before release. If merged later, they might miss the code cutoff and won’t be included in the self-managed release’s docs.\nIf an entry needs to be edited,\nthe update process\nis similar.\nIf you run into problems running the Rake task, check\nthe troubleshooting steps\n.\nProduct Design Reviewers\nNote\nProduct Designers\nDRIs\nreview the individual release post items according to the\nstage/group each designer is assigned to\n.\nEach PM is responsible for pinging their Product Design counterpart when they need a review on the content or visuals within a release post.\nProduct Designers should collaborate on release post items and review:\nJTBD\n: Ensure that the messaging encapsulates how the item supports a user’s\nJob to be Done\n.\nMVC messaging\n: Articulate any design vision or future iterations if applicable. This is especially important when considering items that are\nunder construction\n, or contribute toward a Category’s maturity.\nArtifacts\n: Validate that UI elements (screenshots, GIFs) included in the post are up to date and reflect all design changes. Ensure that no mocks are used.\nEngineering Managers\nThe responsibilities of the Engineering Manager are documented in the\nEngineering Handbook\n.\nTechnical Advisors\nEach month, the Release Post Manager may need help with technical hurdles during the release post process. In order to provide the release post, which is a time-sensitive and highly visible asset for customers and users, with adequate technical advisement and support, we are piloting a partnership with the GitLab development team to leverage the\nDev Escalation process\nvia the Slack\n#dev-escalation\nchannel as an extension. This ensures that at all times, if something breaks that the release post team can not resolve themselves, they have access to technical experts for resolution. It is recommended that technical advisors review the documented\ntechnical aspects\nof the release post for reference, and the\nescalation process\n.\nPlease note that unlike other monthly volunteers of the release post, the technical advisor is not expected to follow the release post process at all times. The Release Post Manager will reach out to the technical advisor on call via Slack in the\n#dev-escalation\nchannel and then cross-post to the\n#release-post\nchannel for transparency that issues are being worked on. It is then expected that the technical advisor will respond to the Release Post Manager or release post DRI as soon as possible, including evenings/weekends, as the release post asks are often time sensitive,\nespecially between the Monday of release week and the\nrelease date\nof the month\n. The technical advisor is responsible for determining if further dev escalation should proceed.\nThe good news is that the release post technical hurdles are often reasonably easy to troubleshoot for technical experts, which is why we’re excited about this partnership!\nBelow are the types of problems the Release Post Managers may need help with.\nTriaging various\nautomations\nand\ntechnical aspects\nof the release post\nTriaging pipeline errors and suggest changes or provide a fix to related merge requests\nResolving merge conflicts with the release post\nIdentifying when to engage with other technical teams to resolve upstream problems\nGetting help during the Release Post Assembly\nRelease Post Manager\nShould you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in\n#dev-escalation\nchannel and cross-post in\n#release-post\nchannel to ask for help, and make others aware that there may be a delay in assembly.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution.\nTechnical Advisor\nWhat we have seen with previous challenges during the Release Post Assembly stage is some difficulty is encountered by the Release Post Manager because of a problem with their local development environment (Ruby setup, permissions, gems, etc.) or git conflicts. You should be familiar with git, Ruby, and the command line. There are a few resources that you can use to diagnose and resolve the issue at hand:\nReview the output of the assembly script including git status\nConsider running ./bin/doctor and review the output\nReference the\nlist of previous problems\nFollowing your best judgement with the resolution of the incident, record the diagnosis and the steps taken to resolve so that we can improve the release post process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nAutomation\nWe have introduced\nscheduled pipeline jobs\nthat you should familiarize yourself with:\nA task will run on the Monday, 3 weeks before relea of the month that creates the monthly release post, MRs, and Issues to kickoff the Release Post (\npipeline configuration\n;\nrake task\n)\nAt\n4 pm UTC (11 am ET / 8 am PT)\n, a task will run that performs content assembly (\nscheduled pipeline\n;\nrake task\n)\nGetting help during the Release Post Deployment\nRelease Post Manager\nShould you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in\n#dev-escalation\nchannel and cross-post in\n#release-post\nchannel to ask for help, and make others aware that there may be a delay in release post deployment.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution.\nTechnical Advisor\nThe Release Post Deployment is a critical and time-sensitive operation. Please respond thoughtfully and quickly.\nFollowing your best judgement with the following:\nFor minor incidents that can be recovered from your intervention alone or in concert with the Release Post Manager, do so while recording your diagnosis and the steps taken to resolve the incident so that we can improve the process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nFor major incidents that require immediate assistance from an SRE, developer on call, or other team members with increased access rights, create an issue and follow the\ndev escalation procedure\n. Record the diagnosis and the steps taken to resolve so that we can improve the process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nIncident Response\nRelease post content assembly on the Monday of release week and release post deployment on the\nrelease date\nare time sensitive with multiple dependencies across various departments. GitLab team members often voluntarily go out of their way to assist with blockers found during these two time-sensitive procedures, but it can be confusing as to who is doing what to resolve an active blocking incident. Some procedural detail to our response efforts is shown below.\nResponse and Resolution SLOs\nDue to the time-sensitive nature of both key Release Post actions, assembly and deployment, the initial response time must be very quick, within 15 minutes. Incident resolution should also be as quick, within 60 minutes or less, if possible.\nThe Role of the Technical Advisor\nThe introduction of the technical advisor role is meant to be a coordinating role responding to blockers that occur along the way. They may work alone or in tandem with other volunteers to resolve the blocker as they see fit. They are also responsible for clearing the blocker, assembly of others, delegating response tasks including engaging in dev escalation.\nOwnership, Positive Control, and Intent\nThere should only be one owner of an incident at any given time. There must be clear understanding of who has control of actions to investigate and remedy the incident. Use positive exchange of control, that is pass control to another person who will now be in charge. The extreme example is from aviation where pilots exchange control in a manner like the following where you might hear “your airplane” to pass control followed by “my airplane” from the second pilot to accept control followed by the acknowledgement and release of control from the initiating pilot with “your airplane.” This avoids multiple people working at cross purposes from each other. Pilots operating an airplane is an extreme example, but it shows how to use clear language in your efforts to resolve the incident as to who is doing what. Only one person should be have control at a time. Similarly, the person taking action should declare their intent, “I’m going to merge master into the 13.8 release post branch and resolve any conflicts.”\nTimeline\nRelease Post Manager is blocked. Their initial attempts to get unblocked fails.\nRelease Post Manager joins\n#dev-escalation\n; mentions the Technical Advisor for this release detailing the nature of the blocker and its severity.\nTechnical Advisor acknowledges that they have seen the message and responds.\nTechnical Advisor creates a dedicated public Slack channel for communication around the incident like\nrelease-post-13.8-deploy-failure\n. That channel is then shared with\n#release-post\nfor others to follow along.\nBegin a Zoom call. Post the invitation to the Zoom room in the newly created Slack channel.\nTechnical Advisor assumes control from the Release Post Manager.\nInvestigation begins. Be as visible as possible, share your screen. Consider recording the Zoom session.\nAction taken.\nBlocker is resolved.\nClose Zoom.\nCollect screenshots, recordings, terminal history, comments in Slack, or other evidence on the issue.\nOpen a new issue to document the incident, deposit history, and add suggestions for corrective action or prevention. Link issue to the current release post retrospective.\nSee also:\nGoogle SRE Ch. 14\nManaging ongoing technical support tasks\nAnyone can contribute to technical issues that support the Release Post Process with the burden being mostly on the current volunteer tech advisor. The following outlines how to manage active and upcoming issues.\nTracking\nUse the\n~Release Post::Tech Advisor\nlabels for issues that require changes to the tools that facilitate the delivery of a release post. Create issues for lower priority challenges that arise during the milestone or as an artifact of decisions made during a retrospective. Creating an issue for immediate incident response isn’t required since the delivery of the release post requires quick resolution and synchronous communication.\nThis board\norganizes these labeled issues into a familiar software development workflow. When working on an issue, assign yourself and strive to keep the issue up-to-date with the proper workflow label and weekly async updates. Technical Advisors are welcome to make recommendations and apply milestones to the issues.\nHandoff\nIt’s unlikely that one technical advisor will serve in back-to-back milestones. Therefore, clearly communicating with the incoming technical advisor about the state of issues as part of release post retrospective and kickoff is a good idea. To do so:\ncreate a transition issue\nrecommend actions, prioritization, and milestones changes for any issues you are actively working\nunassign them from yourself and change the workflow label if you don’t plan on working on so it’s clear they need to be picked up\nafter your final rotation on the release post, reach out to the next tech advisor for a coffee chat to provide them with helpful information about any issues or bugs that are a priority for their upcoming cycle\nShould you prefer to continue to contribute to an issue under active development after your volunteer rotation, that’s great. In that situation, make it clear through assignments and issue updates that you will be the DRI.\nMonthly release blog post sections\nNotable Contributor\nFeatures\nTop feature\nPrimary features\nSecondary features (#secondary-features)\nIllustrations\n(screenshots, GIFs, or videos)\naccompanying their respective features\nUI improvements, performance improvements and bug fixes\nOmnibus improvements\n(added as a secondary feature)\nImportant notes on upgrading\n(optional)\nDeprecations and removals\nNotable Contributor\nThe Contributor Success team owns the process for nominating, selecting and adding the GitLab Notable Contributor (formerly MVP) for the release post. See the Contributor Success\nGitLab Notable Contributor Selection Process\n.\nThe Release Post Manager no longer has any Notable Contributor related tasks.\nFeatures\nThe most relevant features of the release are included in the post by\nproduct managers\n. Classify the feature according to its relevance and to where you want to place it in the blog post:\nTop feature\nThe top feature of the release is mentioned right after the Notable Contributor section, prior to other primary features. An image or video and documentation links are required. The\nTW lead\nwill pay close attention to the content of this item, as it is the “headline” feature for the release and it’s especially important to get it right.\nThe Release Post Manager will select a\ntop\nfeature. The following can be used as a guideline on which feature to select:\nA\ntop\nfeature should:\nHave great user impact.\nAlign to the current FY product investment themes.\nCover all deployment types (.com, SM, and Dedicated).\nA\ntop\nfeature can be:\nOnly for paid tiers (premium or ultimate only).\nBeta, but not\nexperimental\n.\nThe Release Post Manager will select a\ntop\nfeature and ask for feedback from the assigned VP of Product in #release-post together with reviewing the\nprimary\nfeatures. The Release Post Manager should incorparating feedback on any\ntop\nor\nprimary\nfeatures.\nTo specify the top feature, change\nprimary\nto\ntop\nin the selected feature’s release post item\n.yml\nfile:\nfeatures\n:\ntop\n:\nPrimary features\nFeatures with higher impact, displayed in rows after the top feature, with an image next to its text. An image accompanying the description is required. A\nvideo\ncan also be added to replace the image.\nAll release post\nprimary features\nshould be reviewed by the\nTW reviewer\n.\nTo identify the primary features, look for\nprimary\ndirectly beneath\nfeatures\nin the RP\n.yml\nfile:\nfeatures\n:\nprimary\n:\nSecondary features\nOther relevant improvements in GitLab that follow after top and primary features. Images or videos aren’t required, but are recommended. All release post Secondary features should be reviewed by the\nTW reviewer\n.\nIf the secondary feature is promoted to a primary feature, the PM or EM will be asked to supply an image on\nshort notice\n.\nTo identify the secondary features, look for\nsecondary\ndirectly beneath\nfeatures\nin the RP\n.yml\nfile:\nfeatures\n:\nsecondary\n:\nContent blocks\nNote:\n“Feature blocks” are now known as content blocks, as there are many that are not just features. For example, we include upgrade warnings, Omnibus installer improvements, and performance enhancements.\nUse content blocks to add features or other content to the YAML data file. The layout will be applied automatically by Middleman’s\ntemplating system\n.\nContent blocks in the YAML data file contain the following entries, as exemplified below:\nfeatures\n:\nprimary\n:\n-\nname\n:\n\"Do great things with this feature\"\navailable_in\n:\n[\ncore, premium, ultimate]\ndocumentation_link\n:\n'https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html#multi-project-pipelines#multi-project-pipeline-visualization-premium'\nimage_url\n:\n'/images/topics/multi-project_pipelines.png'\nreporter\n:\nbikebilly\nstage\n:\nsecure\ncategories\n:\n-\n\"Application Security Testing\"\n-\n\"SAST\"\nissue_url\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/1234'\ndescription\n:\n|\nUse present tense, and speak about \"you\" instead of \"the user.\"\nDescribe how the new functionality is beneficial. Use phrases that start with, \"In previous versions of GitLab, you couldn't... Now you can...\"\n[Add another link](#link) if needed.\nDescription\nContent of the\ndescription\nshould adhere to the Marketing editorial team’s\nstyle guide\n.\nDo not include UI navigation instructions in the feature’s description. These instructions should be\ncontained in the relevant documentation.\nFeature priority\nThe second line of the content block should indicate whether the feature is a top, primary, or secondary feature. For primary features, use the\nprimary\nkey as shown in the\nsample content block above\n. For secondary features, replace the\nprimary\nkey with the word\nsecondary\nand for the top feature replace\nprimary\nwith\ntop\n.\nFeature name\nname\n: feature name, capitalized\nUse a short and strong name for all feature names.\nFeature Availability\nUse the following pattern to apply the correct badge to the feature (Free, Premium, Ultimate) and to specify any add-ons (Duo Pro, Duo Enterprise).\nSubscription tier\nFor the subscription tier where the feature is available, use\navailable_in\nwith:\nFor GitLab Free,\n[core, premium, ultimate]\nFor GitLab Premium,\n[premium, ultimate]\nFor GitLab Ultimate,\n[ultimate]\nImportant note\n: The GitLab Free tier is listed as\ncore\nin the data file. This is intentional and the page templates will apply the proper tier name on the frontend.\nOffering (GitLab.com or self-managed)\nFor features available on both self-managed and GitLab.com:\nUse\ngitlab_com: true\n, or do not include\ngitlab_com\nin the yaml file.\nFor features available on self-managed only:\nUse\ngitlab_com: false\n. For example:\navailable_in\n:\n[\npremium, ultimate]\ngitlab_com\n:\nfalse\nThis setting greys out the orange badges on the GitLab SaaS row.\nFor features available on GitLab.com only, use\navailable_in:\nwith:\nFor GitLab.com Free,\n[free, silver, gold]\nFor GitLab.com Silver,\n[silver, gold]\nFor GitLab.com Gold,\n[gold]\nYou can also mix the GitLab.com badges with the self-managed badges. However, for this to work, the\ngitlab_com\nvariable must be set to\nfalse\n:\navailable_in\n:\nFor availability in all tiers on GitLab.com and only Premium and Ultimate tiers on self-managed, use\n[free, silver, gold, premium, ultimate]\nand set\ngitlab_com: false\nFor availability in the Silver and Gold tiers on GitLab.com and all tiers on self-managed, use\n[core, premium, ultimate, silver, gold]\nand set\ngitlab_com: false\nFor availability in the Gold tier on GitLab.com and only Premium and Ultimate tiers on self-managed, use\n[premium, ultimate, gold]\nand set\ngitlab_com: false\nAdd-ons\nTo specify a subscription add-on, enter text in the\nadd_ons: [ ]\nfield.\nEach entry adds a badge. For Duo Pro and Duo Enterprise, specify both. For example:\nadd_ons\n:\n[\n\"Duo Pro\"\n,\n\"Duo Enterprise\"\n]\nIf only Duo Pro applies, use\nadd_ons: [\"Duo Pro\"]\n.\nFeatures behind flags\nFrom time to time a feature may be developed behind a feature flag and made\navailable slowly\nto larger audiences. If this is the case, do not include the item in the release post unless you are deliberately seeking beta testers. This may result in a feature issue being closed in a milestone earlier than it is announced.\nIf you are deliberately seeking beta tests, include the release post as well as instructions on how to enable the feature and provide feedback.\nDocumentation\nProvide a link to the\nupdated\ndocumentation for the feature. It is a required field.\nIt can be, in this priority order:\nA\nfeature documentation\nlink, when available\nA\nfeature-related documentation\nlink, when a dedicated doc is not available\nImportant\nAlways link to the EE documentation, even if the feature is available in CE.\nNote:\ndocumentation_text\nwas deprecated by\n!13283\nfor GitLab 11.2.\nImportant\nEvery feature mentioned on the release post must link to an\nup-to-date document shipped in time, before the feature freeze.\n“Docs or it didn’t happen!”\nIllustration (images, videos)\nimage_url\n: link to the image which illustrates that feature.\nRequired for top and primary features, optional for secondary features.\nimage_noshadow: true\n: if an image (\nimage_url\n) already has shadow\nthe entry\nimage_noshadow\nwill remove the shadow applied with CSS by default. Optional.\nvideo\n: when present, overrides the image and displays the linked video instead. See the\nVideos\nsection for more information.\nCheck the section\nAdding Content\n>\nIllustrations\nfor more information.\nFeature reporter\nreporter\n: GitLab handle of the user adding the content block to\nthe release post (not the feature author).\nThis should be the PM responsible for the feature, so in the review\nphase anyone knows who they have to ping in order to get clarifications.\nIt is a required field.\nStage\nstage\n: the\nstage\nthe feature belongs to (lowercase):\nmanage\nplan\ncreate\nverify\npackage\nrelease\nconfigure\nmonitor\nsecure\nsoftware_supply_chain_security\nsystems\nThe stages display as an icon next to the product tiers’ badges linking\nto the stage webpage using a regex:\nhttps://about.gitlab.com/stages-devops-lifecycle/<stage>/\n. We can\nalso override it with a\ncustom stage URL\n.\nAlthough\nstage\nis a required field, if a feature doesn’t\nbelong to any of the stages at all, you can delete the\nstage\nline and it won’t output anything.\nBesides displaying the icon, with\nstage\nset, PMs can easily\nfind anything that is related to their area, even if reported by\nother users.\nNote\nteam\nwas\ndeprecated\nin December 2018 for GitLab 11.6 in favor of\nstage\n, with a follow-up iteration\nintroducing their\nrespective icons\n.\nCustom stage URL\nFor stages outside of the DevOps lifecycle, such as\nGrowth, which don’t have the same path as the other stages\n(\n/stages-devops-lifecycle/<stage>\n), it is necessary to add\nthe\nstage_url\nto the content block to override the default path:\n# Growth\nstage\n:\ngrowth\nstage_url\n:\n'/handbook/product/growth/'\nCategories\ncategory\n(array): Any category(ies) the feature belongs to. These are usually attached\nto the feature’s issue as labels. A list of categories can be found in\n/data/categories.yml\n.\nMake sure to add the category\nname\nexactly as typed on the data file.\nRelated issue, epic, merge request, or webpage\nissue_url\n: link to the issue(s) on GitLab.com where the feature is discussed\nand developed. Using this link the reviewer can check the status of the specific\nfeature for consistency and additional references. Avoid linking to a confidential\nissue so the wider community can get context about the change.\nIt is a required field, but can be replaced with\nmr_url\n,\nissueboard_url\n, or\nepic_url\n.\nAlways wrap links in single quotes (\n'https://example.com'\n). Multiple links are allowed.\nissueboard_url\n: link to the issue board related to the feature. Not required, but available.\nmr_url\n: link to the MR that introduced the feature. Not required, but available.\nepic_url\n: link to the epic related to the feature. Not required, but available.\nwebpage_url\n: link to the marketing webpage for a given feature. Not required, but available.\nFeature description\ndescription: |\n: add the feature’s description in this entry.\nMake sure your cursor is in the line below the pipeline symbol\n|\nintended once.\nAll\ndescription\nfields fully support\nMarkdown\n, the only thing you need to be worried about is respecting the indentation.\nCover image license\nIf a cover image from a 3rd party is used, according to our\nBlog handbook\n, it’s necessary to provide the source of the cover image. Fill in the entry below to display this info at the very end of the\n...release.html.md\nblog post:\ncover_img\n:\nimage_url\n:\n'#link_to_original_image'\nlicence\n:\nCC0\n# which licence the image is available with\nlicence_url\n:\n'#link_to_licence'\nIf the image is\ngenerated by GitLab\n, copyright info is not required and can be removed from the\n.html.md\nfile after setting\nrebrand_cover_img\nto\ntrue\n.\nImportant notes on upgrading\nTo be added by the Distribution Product Manager.\nNote\nThe “upgrade barometer” section was\ndeprecated\non GitLab 11.8 and replaced with a section\ncalled “Important notes on upgrading to GitLab X.Y”.\nUpgrade warnings should be added to the release post\nonly to describe important upgrade notes\n, such as:\nMigrations, post migrations, background migrations\nDowntime\nSpecial cases\nIf there’s no relevant info to a given release, do not add this section\nto the post.\nUI improvements, performance improvements, and bug fixes\nThe release post will link directly to closed issues or merge requests for the relevant milestone filtered by the following labels:\nBug fixes:\ntype::bug\nworkflow::complete\nworkflow::verification\nworkflow::production\nPerformance improvements:\nbug::performance\nworkflow::complete\nworkflow::verification\nworkflow::production\nUI improvements:\nUI polish\nBeautifying our UI\nUX Paper Cuts\nworkflow::verification\nand\nworkflow::production\nare being included while we adopt the\naddition of the\nworkflow::complete\nlabel\n.\nworkflow::complete\nis the desired label to indicate an issue is considered by users to be delivered.\nOmnibus improvements\nTo be added by the Distribution Product Manager.\nThis section should contain any relevant updates for packaged software, new features, and new commands relating to the administration of self-managed GitLab instances deployed using the Omnibus package e.g. (\ngitlab-backup\n).\nExtras\nTo be added by Product Managers and merged by Engineering Managers.\nIf you have an announcement that doesn’t quite fit the other content types, you can use the\nextras\ncontent block. If you think your announcement does fit this type, ping the Release Post Manager and\n@justin\nin\n#release-post\nfor guidance.\nAn example is provided in the\n/data/release_posts/unreleased/samples/extras.yml\nfile.\n---\nextras\n:\n-\ntitle\n:\n\"Example title\"\ndescription\n:\n|\n# supports markdown\nDescription\nMultiple blocks:\nextras\n:\n-\ntitle\n:\n\"Example title one\"\ndescription\n:\n|\n# supports markdown\nDescription one\n-\ntitle\n:\n\"Example title two\"\ndescription\n:\n|\n# supports markdown\nDescription two\nApply the following labels to the MR:\nrelease post item\nrelease post\nrelease post item::extras\nFor review, select the\ntechnical writer\nassigned to the stage.\nWhen the MR is approved, add the\nReady\nlabel before merging.\nDeprecations, removals, and breaking changes\nDeprecation, removal, and breaking change announcements appear\nin GitLab Docs\nand in the release post of the announcement’s corresponding milestone.\nBefore making an announcement, review the\nbreaking changes, deprecations and removals guidance\nto ensure you:\nAre minimizing disruption for our customers.\nAre providing the required advance notice for workflow changes.\nHave\ndetermined if the change is a breaking change\n.\nMilestone due dates\nThursday, 3 weeks before release: Announcement MR has been created\nThursday, 1 week before release: MR has been assigned to a technical writer\nThursday, 1 week before release: MR has been merged\nWalkthrough video\nThis video will walk you through the process of making an announcement:\nDeprecations and other planned breaking change announcements\nTo be added by Product Managers or Engineering Managers and merged by Technical Writers at least 3 milestones ahead of the planned removal date.\nFor example, if the intended removal milestone is\n17.0\n, given the following release schedule:\n16.9, 16.10, 16.11, 17.0\n, then\n16.9\nis the third milestone preceding intended removal, and the last milestone for deprecation announcements.\nCreate a separate MR for each announcement.\nDo not edit the\nfeatures.yml\nfile until the feature has been removed from the product, or the breaking change has been implemented.\nIf you want to bundle multiple announcements in one MR, for example if it’s a group of dependent deprecations that will happen on the same date as “all or none,” reach out and first discuss this with the Release Post Manager.\nCreating the announcement\nCreate a new branch in the\ngitlab-org/gitlab\nproject.\nCopy the\ntemplate file\nand save it in the\ndata/deprecations\nfolder.\nName the file\nXX-YY-feature-name.yml\n, where\nXX-YY\nis the milestone of the initial announcement. For example,\n14-7-pseudonymizer-deprecation.yml\n.\nCreate a merge request using the\nDeprecations\nMR template for the change description.\nThe title must clearly explain the deprecation or planned change. For example:\n“The\nconfidential\nfield for a\nNote\nis deprecated.”\n“The maximum number of characters in a job name will be limited to 250.”\n“Access tokens with no expiration date will be changed to have an expiration of one year.”\n“The\nomniauth_crowd\ngem is deprecated.”\nThe description must:\nBe clear and concise.\nGive a brief explanation of the details or reasons for the change.\nThe description must also explain what the user must do as a result of the change. In other words, the entry\nmust\nbe\nactionable\nby users or admins. For example:\n“Use the\ninternal\nkeyword instead of\nconfidential\n.”\n“Reduce the number of characters in all job names to be 250 characters or less.”\n“Give an expiration date to any access tokens that have no expiration date.”\n“Stop using the\nomniauth_crowd\ngem. It will be removed and will not be replaced.”\nAvoid announcements like “Feature A is deprecated and will be removed. Wait until the replacement feature is released, and switch to it at that time.”\nIf the entry is not actionable, delay the deprecation or change announcement until there is an action available for users to address the change.\nAssign reviewers as recommended in the template.\nSet the\nbreaking_change\nvalue to\ntrue\nand add the\n~\"breaking change\"\nlabel to the MR. If the deprecation or planned change will not cause a breaking change (rare, but possible), use\nfalse\nand do not add the label.\nAssign the MR to the technical writer\nassigned to the stage\n.\nReviewing and merging the announcement\nThe TW Reviewer reviews the content, adds a commit that\nupdates the deprecations doc\n, and merges the MR by the Thursday, 1 week before release. After merging, the announcement will be visible on the\ndeprecations documentation page\nwithin an hour.\nIf the MR is at risk of missing the cut off date, open a duplicate MR and set the target branch to\nX-Y-stable-ee\nwhere\nX-Y\naligns with the version released\nX.Y\n. If you have trouble, ask for help in\n#mr-buddies\nor refer to the\nfull process for backporting an MR\n.\nAnnouncing an End of Support period\nThe\ndeprecation template\nprovides an option to end support for a feature prior to its removal. This option should only be used in special circumstances and is not recommended for general use. Most features should be deprecated and then removed.\nAn End of Support milestone must be at least 3 milestones\nafter\nthe deprecation announcement. For example, if the deprecation announcement is made in\n15.1\n, the End of Support milestone must be in\n15.4\nat the earliest. There is no requirement for the gap between the End of Support milestone and the Removal milestone.\nIf an End of Support milestone is announced, it will be displayed under the title of the deprecation announcement on the\nDeprecations page\n. End of Support milestones are not currently displayed in the release post.\nWhen to define an End of Support period\nIf there is a long period of time between the deprecation and the planned removal.\nIf supporting the feature during an extended deprecation period would affect engineering velocity (bloat, dependency management, etc.).\nCommunicating End of Support\nIf you decide to declare an End of Support period:\nCheck for any\nSupport Stable Counterpart\n(also listed on the\nproduct categories page\n) for your development group and tag them in the MR that adds a value to the\nend_of_support_milestone\n.\nIf your group does not have a Support Stable Counterpart, look for a stage or section Support Counterpart. If none, please post in the\n#support_leadership\nSlack channel with a link to the readiness issue (next line).\nPlease also open a Support Readiness issue\nfollowing the Support communications guidance\n.\nEditing an announcement entry\nThis process is very similar to creating an announcement entry, with the difference being that the YAML file already exists.\nTo edit an existing entry:\nCreate a new branch in the\ngitlab-org/gitlab\nproject.\nFind and edit the\n.yml\nfile in the\ndata/deprecations\ndirectory.\nCreate a merge request for the change, and use the\nDeprecations\nMR template for your change.\nAssign reviewers as recommended in the template.\nAssign the MR to the technical writer\nassigned to the stage\n. (By the Thursday, 1 week before release if revising an entry for the upcoming release)\nThe TW Reviewer reviews the content, adds a commit that\nupdates the docs\n, and merges the MR. (By the Thursday, 1 week before release)\nUpgrades\nTo be added by Product Managers or Engineering Managers and merged by Engineering Managers.\nDescribe any considerations administrators should have when upgrading to this version. These could be warnings about potential data loss, recommendations for maintenance beforehand, and other similar concerns.\nConsiderations for future upgrades should be noted in the\ndeprecations\nsections.\nOne notable example was in %12.10,\nwe required administrators to migrate from Postgres 10 to Postgres 11\n.\nUpgrade items go in the same directory as regular release post items. See the\nupgrade template\nto create an upgrade notice. Create one .yml file in the\n/data/release_posts/unreleased/\nfolder, using the following content block for each notice:\nupgrades\n:\n-\nreporter\n:\nbikebilly\n# item author username\ndescription\n:\n|\n# example (supports markdown)\nLorem ipsum dolor sit amet, consectetur adipisicing elit.\nVeritatis, quisquam.\nApply the following labels to the MR:\nrelease post\nrelease post item\nrelease post item::upgrades\nFor review, select the\ntechnical writer\nassigned to the stage.\nWhen the MR is approved, add the\nReady\nlabel before merging.\nMajor releases\nMajor releases happen once a year and start a new versioning cycle: 14.0 - 14.10 –> 15.0 and so on.  Contribution to and management of content for major releases follows the same schedule as\nmonthly releases\n. But for major releases, the Release Post Manager can expect some extra coordination and communication from the Social, PR, and Marketing teams, due to extra activities and needs for a major release. Additionally, during a major release, the Release Post Manager may need to support PM volunteers managing communication of removals that are breaking changes.\nCommunicating breaking changes\nProduct Operations will lead the communication of breaking changes for major releases as part of the release post. It is important the breaking changes be flagged for SaaS users prior to the rollout of the updates in the major version, so they are prepared and their workflow is not unexpectedly disrupted. Beginning as early as 3 milestones ahead of the major release, Product operations will start communictions/coordination for announcements and a\nbreaking changes blog\n. Starting as early as 2 milestones ahead of the major release, Product Operations we will use the\nbroadcast message feature\nto communicate upcoming breaking changes with SaaS users.\nProduct Operations initiates breaking changes communications when they’re assigned an\nautomated GitLab issue\n, with a task list and timeline. These communications rampup three minor releases before the major release. For example: if the major 15.0 release is planned for May 22, the communications rampup with the automated issue being generated  during release 14.8.\nAdding content\nFor entries that support Markdown, use regular\nMarkdown Kramdown\n, as we use for all blog posts and webpages on about.GitLab.com.\nIllustrations\nImages\nEach image should be compressed with\nImageOptim\n,\nTinyPNG\n, or similar tool. You can also try\nautomation tools like Hazel or Automator\nEach image should not surpass 150KB (300KB for cover\nimage), GIFs included\npngbot\nwill compress PNG images added in\nmerge request by converting each PNG to PNG 8 (8 bit, 256 colors) using\npngquant\nbefore losslessly compressing with\nzopflipng\n.\nApplication screenshots\n:\nMake sure that the application screenshot captures the feature to make it\nimmediately recognizable.\nInclude\nonly\nthe necessary UI context to allow the reader to identify where this\nfeature is available. Minimize empty space in a screenshot. You may need to make\nyour browser window smaller before taking the screenshot, to bring UI elements\ncloser together.\nCrop screenshots so that they are wide, not square, so that when they fill\nthe column width and do not take up large amounts of vertical space.\nAvoid resizing images. Ideally include the screenshot at native High DPI\n(Retina Display) resolution so that it is sharp when viewed on these displays\nReduce the number of colors in your screenshot using a quantizer like\nImageAlpha\n,\npngquant\n, or\nTinyPNG\n. Try reducing the number of colors to\nfewer than 256 colors (default) to increase savings. Small savings add up\nover many images.\nFinally compress your image using a lossless compression tool like\nImageOptim\n, or\nzopflipng\nto reduce the file size even\nfurther, saving an additional 5-20%.\nIn most instances it should be possible to reduce a PNG screenshot well\nbelow 100KB. Small savings on each image accumulate quickly and reduce the\npage load time significantly.\nScreenshots throughout the post should be harmonic and consistent in terms\nof their size and quality.\nAnimated GIFs\n:\nIf a GIF isn’t necessary, replace it with a static image (.png, .jpg)\nIf an animation is necessary but the GIF > 300KB, use a video instead\nCover image\n:\nCover images for 16.x releases have been created by the marketing team and can be found\nhere\nFor cover images after 16.x,\nraise a similar request\n.\nThis image should be eye-catching, inspiring and avoid images of people. The image should be landscape orientation, roughly 1920 x 1080, and no larger than 300 KB.\nTo test the image and see how it fits (without waiting for a build or running the handbook locally):\nNavigate to a previous release post\nUsing the web inspector find the element\n<div class=\"cover\" style=\"background-image: url();\">\nInside\nurl()\n, replace the string with the URL of the image (the actual URL of the image, you may need to right-click the image and select “copy image address”)\nHit the\nEnter\nkey and you should see the image render inside of your web browser\nImage shadow\n:\nwhen you add images though the text,\nmake sure all images have the class shadow applied:\n![image alt text](#img-url){:.shadow}\nIf the original image already has shadow applied, don’t use\n{:.shadow}\n.\nIf you’re inserting the image in the YAML file via\nimage_url\nentry, add the\nimage_noshadow: true\nentry\nright after\nimage_url\n.\nVideos\nYou can add videos to release post content blocks in two ways:\nBy using the\nvideo:\nentry in the content block\nBy including the video in the\ndescription:\nof the content block\nIn either case, the video must first be uploaded to\nGitLab’s Unfiltered YouTube channel\n.\nUploading videos to GitLab Unfiltered YouTube channel\nWhen adding videos to content blocks, it is important to ensure that the correct video URL is used and that the video’s visibility settings are set to “Public”. Follow the steps below to properly prepare a video for inclusion in a content block.\nUpload the video to\nGitLab’s Unfiltered YouTube channel\nMake sure that the visibility settings are set to “Public”.\nCopy the video URL and add /embed/ to it.\nReplace\nyoutube.com\nwith\nyoutube-nocookie.com\n. This is the URL you will use in the content block.\nFor example:\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ\nbecomes\nhttps://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\nReview the auto-generated captions for your video, and clean them up for accuracy. Machine-generated captions often mangle technical terms.\nAdding videos to content blocks\nIn the content block, use the entry\nvideo:\nfollowed by the video’s URL\nvideo: https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\nIf both a video and an image are present, the video will override the image and only the video will be displayed\nAdding videos to descriptions\nWhen adding videos to a content block description, it is important to use the correct markup to ensure that the video is displayed correctly.\nTo add a video to a description, wrap the video in a\nelement and add the class\nvideo_container\n. This assures that the video is displayed responsively. For example:\n-\nname\n:\n\"Awesome Feature\"\n...\ndescription\n:\n|\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Quae, provident.\n<!-- Leave a blank line above and below the code below. Do not change the code block in any ways, except for the video URL. Leave the indentation as-is and do not remove the space prior to </iframe>. -->\n<figure class=\"video_container\">\n<iframe src=\"https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen=\"true\"> </iframe>\n</figure>\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Quae, provident.\nTechnical aspects\nThe release post is created from many small data files, that are rendered into the final form using templates and helpers.\nThe content files need to be created every release with the content unique to that release, as described by the section\ngetting started\n.\nGetting started\nThe template and helper files are used to render the blog post from the many content files, and do not need to be changed in most releases.\nTemplates:\nLayout (Haml) file\n:\ncreates a layout for the final HTML file, and requires the include file below.\nInclude (Haml) file\n:\nbuilds the content of the post applying custom styles. Its markup includes semantic SEO improvements.\nHelpers:\nHelper (Ruby) file\n: when the release post is being rendered, the helper combines all the release post items into a variable that is used by the include (Haml) file. The output of the helper is consistent with single data file process used until GitLab 12.8.\nContent:\nData (YAML) files\n: each contain the content for one feature, improvement, or deprecation. Data files are added to the\nunreleased\nor\ndata/deprecations\ndirectories, and then moved to a\nrelease\ndirectory. The purpose of the helper (Ruby) is to combine these files when rendering the release post.\nBlog post (Markdown) file\n: the blog post file holds the introduction of the blog post and frontmatter (\ntemplate\n,\nexample\n).\nTo learn more how the template system works, read through an overview on\nModern Static Site Generators\n.\nTo run the project locally:\nIn the terminal, go to the\nwww-gitlab-com\nproject. Depending where you cloned it:\ncd\n/path/to/www-gitlab-com\nInstall dependencies:\nbundle install\nyarn\nRun Middleman\n.\nSee the release post locally, using\nhttps://127.0.0.1:4567/\ninstead of\nhttps://about.gitlab.com/\n. For example,\nhttps://127.0.0.1:4567/releases/2021/09/22/gitlab-14-3-released/\n.\nFeature order\nImportant note: Feature order should not be changed without approval from the Release Post Manager.\nPrimary feature content blocks are sorted alphabetically by file name so if necessary, the ordering can be affected by adding a 2-digit numerical prefix to the file name of each individual content block. For example,\n01_filename.yml\n,\n02_another_file.yml\n, etc.\nSecondary features are first grouped by stage and within each stage sorted alphabetically by title. Features with no specified stage are grouped last. In release 13.10 and prior, bug fixes, performance improvements, and usability sections were also part of this automated sort order. Starting with release 13.11, bugs, performance improvement, and usability sections were changed from secondary features to tertiary features, so they now will automatically come after the secondary features and prior to the Deprecations Removals and Upgrades sections.\nSometimes, the height of the secondary features content will be much longer in the left or right column, resulting in white space. In that case, you can force a block of content from the left to the right or vice versa by adding a\nforce_left: true\nor\nforce_right: true\nto an entry’s yml file. (\nSee this MR as an example.\n)\nRelease post branch creation Rake task\nThe release post branch and most of the related directories, files, issues, and MRs are automatically created when\nrelease:start\nRake task\nautomatically runs on the Monday, 3 weeks before release.\nIf the script fails to run or there are pipeline issues, you can run\nbundle exec rake release:start\nyourself to make the following things happen:\nYou are asked for the GitLab version (for example, 13.10), and the release\npost date in ISO format (for example 2021-03-22). The script then reads those\ntwo values and uses them in the templates that are mentioned in the next steps.\nIf one of them is missing, the script stops and exits.\nThe branch name is set to\nrelease-X-Y\n, which is based on the version you\nprovided above.\nThe script checks if the release branch already exists. If it does, it\nstops and exits. You’ll need to delete your local branch (\ngit branch -D release-X-Y\n)\nif you want to re-run the script.\nGit stashes your current changes, if any, checks out\nmaster\n, and pulls from\norigin\n(this should be the default remote pointing to the\ngitlab-com/www-gitlab-com\nrepo,\nyou can check with\ngit remote -v\n).\nThe script then creates the new release branch.\nThe\nintro\nis created by using the template under\ndoc/templates/blog/monthly_release_blog_template.html.md\n. It replaces the\nstub X.Y values with the version you provided in the first step and adds the author name and handle.\nThe data directory for the release is created under\ndata/release_posts/X_Y/\n.\nIf it exists, the script stops and exits. You’ll need to delete this directory\nif you want to re-run the script.\nThe\nNotable Contributor (MVP) template\nis used to create the Notable Contributor (MVP) file (\ndata/release_posts/X_Y/mvp.yml\n).\nThe retro issue is generated and assigned using the\nRelease-Post-Retrospective template\nThe script performs a find and replace to update the following values in all of the MRs and Issues above using content from\ndata/release_post_managers.yml\n:\n@release_post_manager\n:\nmanager\n@tw_lead\n:\nstructural_check\n@tech_advisor\n:\ntechnical_advisor\n@pmm_lead\n:\nmessaging\nThe script performs a find and replace to update occurrences of\nX-Y\n,\nX_Y\n,\nYYYY\n,\nMM\n,\nDD\n,\n_MILESTONE_\nwith the appropriate values based on the current date and milestone.\nRelease post item generator\nThe\nrelease post item generator\nautomates the creation of release post items using issues and epics. Issues and epics are the source of truth for what problems are being solved and how, and should have a clear description, and be well labeled. The script uses this information to pre-fill release post item MRs:\nIssue/Epic element\nRelease Post Item Attribute (yml) or MR element\nIssue Title\ntitle:\nLabel\ndevops::\nstage:\nLabel\ngroup::\nassigns group product manager as reporter, and tags\nrelevant team members in the MR\nlabel\ncategory:\ncategories:\nLabel\nrelease post item::\n(\nprimary\n/\nsecondary\n)\ncontent block type\nprimary:\nor\nsecondary:\nLabel tier (e.g.\nGitLab Core\nGitLab Premium\nGitLab Ultimate\n)\navailable_in:\nIssue web url (i.e.\n/gitlab-org/gitlab/-/issues/####\n)\nissue_url:\nIssue description under\n### Release notes\ndescription:\nwill contain all text except for the\ndocumentation_link\nand\nimage_url\ndocumentation_link:\nis the first URL in the\n### Release notes\nsection containing\nhttps://docs.gitlab.com*\nimage_url:\nis the first image added to the\n### Release notes\nsection. (e.g.\nImage: ![name](/path/)\n)\nImportant note:\nGitLab Free tier is referenced as\ncore\nin the data file. This is intentional and the page templates will apply the proper tier name on the frontend.\nTo ensure the generator script runs correctly follow the process below:\nMake sure the issue is open.\nMake sure the issue is not confidential. If you need to link to a confidential issue you will need to manually create the Release Post Item Merge Request as the\nrelease post item generator\ndoes not currently create MRs from confidential issues.\nUpdate your issue or epic with content in\n### Release notes\n(including a docs link and image, although those can always be added/updated in the MR later) specifically having it contain both a\nDescription:\nthen a\nDocumentation:\n.\nMake sure there is only plain text in the content beneath\n### Release notes\n. If there is any additional formatting, the script will fail.\nMake sure\ndevops::\n,\ngroup::\n,\ncategory:\nand tier (e.g.\nGitLab Core\n) labels are applied\nApply one of the\nrelease post item::\nscoped labels. This will make the generator script pick up your issue next time it runs (once per hour)\nOnce the script runs a draft MR in the\n/gitlab-com/www-gitlab-com\nproject will be opened and assigned to the group PM. You can continue editing and reviewing that MR from there.\nIf you’d like to check to see when the last pipeline ran (and if it picked up your issue), you can inspect the scheduled pipeline\nhere\n.\nYou can also watch\nthis overview video\ndemonstrating how to use the\nrelease post item generator\n.\n*Note: If you find problems with the\nrelease post item generator\n, questions should be posted in Slack #release-post or add feedback to the release post retrospective issue, tagging the release post\ntechnical advisor\n.\nThe generator script can also be run on your computer.\nClone the\nwww-gitlab-com\nproject, and install dependencies using\nbundle install\nRun the script, providing your GitLab private access token, and the issue URL:\nPRIVATE_TOKEN\n=\n<token> bin/release-post-item --no-local <issue_url>\nRefer to\nbin/release-post-item --help\nfor complete documentation.\nRelease post item linting\nThe\nrelease post item linter\nvalidates all items being merged to the\ndata/release_posts/unreleased\ndirectory meet minimal\nstandards. Specifically, it checks:\nYAML can be parsed\nConformity to\nschema\nEach file contains exactly one item (e.g. feature or deprecation)\nContent blocks have valid fields\nDeprecations have valid fields\nThe\nstage\nfiled maps to a valid stage key in\ndata/stages.yml\nThe\ncategories\nlist only contains valid category names from\ndata/categories.yml\nIt does not check if:\ntop\nand\nprimary\nitems have an image or video\nissue_url\nis supplied, since there are other alternatives\nThe schema is implemented using\nRx\n.\nDeprecation rake task troubleshooting\nIf you have trouble running the rake task, you can check the following troubleshooting steps:\nVerify that your Ruby version matches the\ngitlab-org/gitlab\nproject’s Ruby version\n. You can check with\nruby -v\n. See more about\nsetting up a Ruby environment\n(MacOS only). You can also validate your setup by running\n./bin/doctor\nfrom the terminal.\nUpdate your gems by running\nbundle install\n.\nYour bundler version could be out of date, so you can try running\ngem install bundler:2.1.4\n.\nResolve merge conflicts in deprecations.md\nIf you rebase the branch of a deprecations or removals MR, there might be multiple merge conflicts in the\ndeprecations.md\nfile. Do not resolve individual\nmerge conflicts from your IDE. Instead, use the removals rake task to update the file and resolve the merge conflicts.\nTo resolve merge conflicts:\nIn the branch you checked out in the\ngitlab-org/gitlab\nproject, run the deprecations Rake task:\n# For deprecations\nbin/rake gitlab:docs:compile_deprecations\nStage your changes:\ngit add .\nContinue the rebase:\ngit rebase --continue\nIf you get merge conflicts after you continue the rebase, it’s possible that\ndeprecations.md\nis still out of date with\nthe latest changes in the\nyml\n. If this occurs, complete the steps again until you clear the merge conflict.\nRelease post merge request template\nThe\nrelease post MR template\nis our checklist for every release. Let’s keep it up-to-date! :)\nAdding deprecations and removals index to\nwww-gitlab-com\nIn order to display a list of deprecations and removals in the Release Post, an index must be generated from the\ngitlab\nproject and added to\ndata/release_posts/xx_y\nin the\nwww-gitlab-com\nproject.\nOpen a terminal in the\ngitlab\nproject\nRun\nbin/rake gitlab:docs:write_deprecations\nEnter the relevant milestone when prompted\nManually copy and paste the generated files into the corresponding\n/data/release_posts/xx_y\nin the\nwww-gitlab-com\nproject\nAdd\ndeprecations:\nto the first line of the deprecations index\nChange all instances of\nname:\nto\nfeature_name:\nin both files\nPatch and Security release posts\nThe Delivery team is responsible for creating release posts for\npatch\nand\nsecurity releases\n.\nRelease posts should live in\nsites/uncategorized/source/releases/posts\n. For patch and security releases,\nplease make sure to specify them in the title, add the correct\ncategory\n:\nPatch releases:\ntitle: \"GitLab Patch Release: x.y.z and x.y.z\"\ncategories: releases\nSecurity releases:\ntitle: \"GitLab Security Release: x.y.z and x.y.z\"\ncategories: releases\nCreating an MR for What’s New entries\nVideo walkthrough of the process\n“What’s new” can be seen by clicking on the\n?\nicon in the navigation menu of GitLab and choosing “What’s new.”\nThe What’s New MR will be initiated by the Release Post Manager on the Tuesday of release week, finalized on the Wednesday of release week, and typically get merged by a\nmaintainer\n2 to 4 hours AFTER the release post is live on the\nrelease date\n. The exact timing of the merge depends on the availability of a\nmaintainer\nto merge it**\nOn the Tuesday of release week, the Release Post Manager creates the What’s New MR.\nThe RPM will pull all of the final/approved primary items in the release post to feature in  “What’s New”\nThe selected items can but do not have to align with the primary features of the release post. If the RPM feels comfortable making a unique selection, they may do so.\nIt is recommended to strive for a balance of features available to both free and paid users. If we only include Ultimate features, non-Ultimate users may stop engaging.\nThe Release Post Manager will create a new MR in the\ngitlab.com/gitlab-org/gitlab\nproject\nUse this\ntemplate\nto create a new file in the\ngitlab/data/whats_new\ndirectory.\nTitle the file as\nYYYYMMDD0001_XX_YY.yml\n- for example, the 13.4 entry is titled\n202009300001_13_04.yml\n.\nUsing the content that is in the release post items, duplicate the content for What’s New.\nSometimes it is necessary to trim down the description. Keep in mind that these should be short, and generally a single paragraph.\nSaaS-only features need to use\n[free, premium, ultimate]\nin the What’s New MR instead of\n[free, silver, gold]\nor\ncore\nas is used in the release post items. We will streamline this discrepancy in the future, but for now, the RPM should update the values as necessary when creating the What’s New MR.\nStage names are case-sensitive, so be sure that the stages are capitalized in order for the pipeline to pass.\nImages are not required, but encouraged when possible.\nFor videos, you will need to provide an image. For YouTube videos, you can use the image URL, which can be found by inserting the youtube unique ID into this format:\nhttps://img.youtube.com/vi/[insert-youtube-video-id-here]/hqdefault.jpg\n. For cases where a video thumbnail doesn’t look great, consider using a generic image from\nthe\nsource/images/growth\ndirectory\n.\nImages will end up at a URL like\nhttps://about.gitlab.com/images/X_Y/XXXXXXX.XXX\nMake sure you provide a full URL for the YAML entry. Ex:\nhttps://about.gitlab.com/images/13_7/reviewers_sidebar.png\n.\nIf an image is not available, you can use a generic image (ex:\nhttps://about.gitlab.com/images/ci/gitlab-ci-cd-logo_2x.png\n) or omit the image_url.\nBefore committing the MR,\ncheck the YAML with a validator\n.\nAdd the ~“documentation” label.\nApply the affiliated release\nmilestone\n(it’s ok if it says “expired”) and labels\nwhats new\nand\nrelease post\n.\nOn the Tuesday of release week, when the MR is ready for review, assign\n@[name of PLT member who is reviewing this month]\nas reviewer and\n@mention\nthem in the MR to complete their review by the Wednesday of release week. The name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\nAfter the release post is live and you have verified the images load locally in GDK by pulling down the What’s New branch, have the MR reviewed following our standard\ncode review process\nand have it merged by a\nmaintainer\n. It is recommended to communicate directly to the maintainer that the MR is time sensitive to avoid unnecessary delays.\nOpen a duplicate MR and set the target branch to\nX-Y-stable-ee\nwhere\nX-Y\naligns with the version released\nX.Y\n. Assign it to the same maintainer that merged the previous MR. This second MR ensures that any additional releases to version\nX.Y\ninclude this “What’s New” update. If you have trouble, ask for help in\n#mr-buddies\nor refer to the\nfull process for backporting an MR\n.\nIMPORTANT: The MR should not be merged until after the release post is live on the\nrelease date\nor the images will not display.\nAfter the release post is live, but before merging, the branch should be checked out and the content checked in GDK to make sure that all images are displaying, links are accurate, and that the What’s New items are part of the final release post. Only once those are confirmed should the MR be merged. Typically this means the What’s New content will be live on the day or two after the\nrelease date\n, depending on maintainer reviews.\nRelated\nPages\nGitLab the product\nGeneral guidance on deprecations, remvoals and breaking changes\nRelease Post volunteer schedule\nSecurity and monthly releases\nFeatures per release\nGitLab CE and GitLab EE changelog\nRelease managers\nTemplates\nMonthly release post MR template\nRelease post item MR template\nDeprecation issue template\nDeprecation MR template\nRelease Post retrospective issue template\nYML content block samples\nPatch release template\nSecurity release template\nManual Release Post Kickoff\nGuidelines to for manually kicking off the Release Post\nRelease Post Scheduling\nA list of managers and other assignees for scheduled GitLab release posts.\nLast modified July 15, 2025:\nRemoves instruction to link to EE version of docs (\neb338fcf\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "52751a08e942895d.html"
}