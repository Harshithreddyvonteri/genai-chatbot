{
  "url": "https://handbook.gitlab.com/docs/development",
  "title": "Handbook Development | The GitLab Handbook",
  "headings": [
    "Handbook Development",
    "Support",
    "Edit the handbook in your browser",
    "Architecture Overview",
    "Run the handbook locally for edits",
    "Linting content",
    "Docsy GitLab Theme Development",
    "Dependencies",
    "Redirects",
    "CI/CD Pipelines",
    "Triage bot"
  ],
  "text": "Handbook Development | The GitLab Handbook\nContributing Guidelines\nHandbook Development\nHandbook Maintenance\nRunning the Handbook in Docker\nRunning the Handbook Locally\nHandbook frontmatter\nHandbook Markdown Guide\nHandbook Search\nPartials\nShortcodes\nView page source\nEdit this page\nMaintainers\nOn This Page\nSupport\nEdit the handbook in your browser\nArchitecture Overview\nTemplates and Partials\nAccess tokens\nHandbook monitoring\nRun the handbook locally for edits\nRequirements\nClone the handbook Git repository\nSet up the repository\nRunning Hugo\nParameters for Hugo\nBuild static files\nPermissions\nLinting content\nHandbook lint\nHugo lint\nmarkdownlint\nVale\nDocsy GitLab Theme Development\nLocal Development\nTesting changes\nReleases\nDependencies\nUpdating dependencies\nGoogle Docsy\nRedirects\nCI/CD Pipelines\nHandbook & Internal Handbook\nbuild\nstage\ndeploy\nstage\nnotify\nstage\n$BUILD_AND_TEST_ONLY\nmode\n$GITLAB_TOKEN\nGitLab Pages Deployment\nDocsy GitLab\ntest\nstage\nbuild\nstage\nrelease\nstage\nwww-gitlab-com\nDanger review and reviewer roulette\nCode quality report MR commenter\nCI/CD maintenance tasks\nTriage bot\nContributing Guidelines\nHandbook Development\nHandbook Development\nDevelopment environment and processes for maintaining the handbook\nThe handbook site uses\nHugo\nfor static page generation\nfrom Markdown.\nThe handbook uses a base theme called\nDocsy\n. A custom theme override\nis located in the\nDocsy GitLab Theme\nproject and automatically included in the handbook setup.\nSupport\nFor help and support with the development environment, please reach out in the public\n#handbook\nSlack channel.\nIf you encounter a problem or bug, please open an issue or MR in the respective handbook projects.\nEdit the handbook in your browser\nFollow the\nediting the handbook\ndocumentation.\nArchitecture Overview\nThe Markdown files get parsed by Hugo, and converted into static HTML files, including all assets (JS, CSS, images, etc.).\nThe static files are uploaded to GitLab Pages.\nflowchart TD\nA(docsy) --> B\nB(docsy-gitlab) --> H\nB(docsy-gitlab) --> I\nC(www-gitlab-com) --> H\nC(www-gitlab-com) --> I\nD(handbook) --> H\nE(handbook-internal) --> I\nH{build} --> |Deploy| F\nI{build} --> |Deploy| G\nF[handbook.gitlab.com]\nG[internal.gitlab.com]\nThere are four internal projects and one external project used in the process of building and deploying the internal and external handbooks.\nDocsy\nis the base theme used for both handbook sites.\nDocsy GitLab\nis an extension to the base Docsy theme with GitLab specific customizations and features. Docsy GitLab is included in both handbook sites.\nwww-gitlab-com\nis the source repository of data files used by both handbook sites.\nhandbook\nis the public handbook site.\ninternal-handbook\nis the internal handbook site.\nTemplates and Partials\nReview the Hugo development documentation to learn more.\nhttps://gohugo.io/templates/introduction/\nhttps://gohugo.io/functions/partials/\nThere are some\npartials specific to GitLab\n.\nAccess tokens\nTo minimize maintenance, a small number of group and project access tokens are used.\nThis overview is not meant to be a comprehensive list. Search in this and other development documentation pages for details on the individual access tokens.\nGITLAB_TOKEN\n, currently called\nDocsy GitLab Release\n. Used for various things, primarily:\ndocsy-theme\nrelease\njob\nnotify\nhandbook jobs\nTRIAGE_BOT\n, currently called\nTriage bot\n. Used for various maintenance tasks, primarily:\nTriage\nCI jobs in\nmaintenance-tasks\nProject access tokens are sometimes created for project specific tasks, such as\nDANGER_GITLAB_API_TOKEN\n.\nA “zap”\n(internal) (use shared 1Password sign in) has been configured with a group level webhook to notify the\n#handbook-escalation\nchannel. Due to its reliability, you may want to consider creating an issue, or some other reminder.\nHandbook monitoring\nThe\nhandbook monitor project\nruns a pipeline every 10 minutes (see pipeline schedule) to check if the handbook is “up” using\nhurl\n.\nThere is another scheduled monthly pipeline that will rebuild the image used in CI. This job will only run if there’s an environment variable\nREBUILD\nset to\nTRUE\nto avoid rebuilding the image with every scheduled CI job.\nIf the job fails, the pipeline will post to the\n#handbook-escalation\nSlack channel.\nNotices are also posted in that channel when pipelines fail on the\nmain\nbranch of the handbook projects.\nNote: Internal handbook is not monitored in this way as there is a blocking issue. See\ninternal-handbook#90\n.\nSimilarly, the request for\nintegrating the handbook to infra’s monitoring\nis pending. See\ndocsy#14\nfor more information.\nRun the handbook locally for edits\nSupported methods:\nDocker or compatible runtime (all software preinstalled in a container image)\nLocal installation (experienced users, more software dependencies, can break)\nRequirements\nCommand line:\ngit\n,\nwget\n(for syncing data). Additional requirements for local installation, see below.\nDocker or compatible runtime (for running the Hugo environment in a container)\nOn\nmacOS\n: Docker Desktop, Rancher Desktop, etc.\nOn\nLinux\n: Docker engine, Podman, etc.\nClone the handbook Git repository\nCloning the repository allows you to manually edit the handbook locally. If you prefer to use the Web IDE, please continue reading the\nediting the handbook\ndocumentation.\nWe recommend using git to clone the repository and then editing the handbook with a text editor such\nas\nVisual Studio Code\n,\nTypora\n,\nNova\nor\nSublime\nto name a few.\nClone the repository:\nPublic handbook\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/handbook.git\nInternal handbook\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/internal-handbook.git\nDocsy GitLab theme\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/docsy-gitlab.git\nSet up the repository\nAfter cloning the repository, sync the required data files from the\ndata file location (currently the\nwww-gitlab-com\nrepository).  Without this\nstep, the handbook cannot be run locally.\nOpen a terminal, navigate into the cloned handbook repository path, and run the\nsync-data.sh\nscript.\nExample for the public handbook:\ncd\nhandbook\n./scripts/sync-data.sh\nRunning Hugo\nHugo needs to be run to generate the static files from the handbook markdown content.\nWhen installing Hugo, review the CI file of the relevant handbook repository for the version of Hugo in use. The latest version may or may not work.\nThere are two ways to run Hugo:\nRunning the Handbook in Docker\nRunning the Handbook Locally\nParameters for Hugo\nThe handbook is huge, and by default, the\nhugo server\ncommand loads everything to memory.\nThe following options for the\nhugo\ncommand can be helpful for debugging or otherwise running locally:\n--environment=production\n: generate a production build (asset minification, checksums, etc)\nNote:\nhugo v0.x.x+extended\nversion must be installed, use\nhugo version\nto check\nNote:\nnpm i\nmust be run as a prerequisite to install\npostcss\nand\nautoprefixer\ndependencies\n--renderToDisk\n: slower but requires less memory to run. Useful if you have less than 16GB allocated to docker machine\n--verbose\n: enables verbose logging output\n--templateMetrics\nand\n--templateMetricsHints\n: prints metrics related to how frequently templates are invoked and how much time is being spent evaluating them\n--printMemoryUsage\n: periodically prints memory usage while the site is building\nBuild static files\nTo render the entire site to disk (and inspect the output in\n${PWD}/public\n),\npurge the generated files first, and then run Hugo.\nmake clean\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\nhugomods/hugo:exts hugo\n# or\nhugo\nPermissions\nFor some pages to render you may need a\npersonal access token\n.\nGenerate one and export it as an environment variable prior to running\nhugo\ncommands:\nexport\nHUGOxPARAMSxGITLAB_API_KEY\n=\n\"<token>\"\nhugo ...\nIf you need to make changes to the underlying theme you’ll need to make changes in the\nGitlab-Docsy\nmodule\n.\nLinting content\nTo enforce rules and guidelines, we use:\nCustom Handbook lint\nHugo lint\nmarkdownlint\nVale\nOnce an error is encountered, the relevant job fails and a comment is added to the merge request with a list of errors, with guidance for the suggested fix.\nWarnings and suggestions are not reported in the comment, but are in the code quality report.\nCurrently, all configuration and script files exist in each repository. See\nconfiguration file sync issue\n.\nHandbook lint\nThe custom handbook lint script (\nhandbook version\n) is used to verify a number of the guidelines we have, including:\nMedia files\nImage location for new images.\nImage size for images in the MR.\nVideo location for new videos.\nCodeowners\nFolder or file exists.\nA controlled document is listed in the\n[Controlled documents]\nsection, and vice versa.\nA required approval includes the specified groups, such as\ne-group\n.\nWarns if a listed user is not in the\nteam.yml\n.\nNote: If a user exists, but the job says they’re not a team member, check the relevant\ndata/team-member.yml\nfile to see if the GitLab username matches.\nHugo lint\nWe use\nHugo lint\nto check for the validity of internal links. It supports relative linking to the markdown file, and the production path.\nEach job also outputs the top 30 incorrect links to assist in fixing them.\nSee the ReadMe for more information about how Hugo lint works.\nmarkdownlint\nRefer to the\nmarkdown guide\nfor style guide information, and guidance on rules.\nWe use\nmarkdownlint-cli2\nin our pipelines with a slightly customized set of rules.\nBefore pushing any changes, you can run\nmarkdownlint-cli2\nand fix any suggested changes to avoid pipeline failures.\nTo run\nmarkdownlint-cli2\nusing Docker, run:\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\ndavidanson/markdownlint-cli2 content/**/*.md\nIf you have\nmarkdownlint-cli2\ninstalled locally\n, you can run the command in the relevant repository.\nThis method is recommended when editing the config file (look for the\nmarkdownlint\nfile), and testing the changes. To have markdownlint automatically fix some errors,\nadd the fix option:\nmarkdownlint-cli2 --fix\n\"content/**/*.md\"\nRules are configured to be close to the\nGitLab documentation markdownlint\n, without some of the stricter styling rules.\nThe relevant rules are also noted in the\nmarkdown guide\n.\nVale\nWe use\nVale\nto verify some of the rules in the\nHandbook Markdown Guide\n.\nVale errors will fail the pipeline and are included in the MR comment.\nWarnings are included in the job log, code quality, and MR diff.\nTo run Vale using Docker, run:\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\njdkato/vale content\nIf you have vale installed locally, you can test the changes. To limit the results, add the\nminAlertLevel\noption, such as:\nvale --no-wrap --minAlertLevel error --glob\n=\n'{content,assets,layouts}/**/*.md'\n.\nRules are configured to be close to the\nGitLab documentation vale rules\n.\nWhen the\ngitlab_base\nrules are exactly the same, they are included in the\ngitlab_base\nfolder in the content sites repositories.\nWhen the rules differ, they are stored in the\nhandbook\nfolder.\nDocsy GitLab Theme Development\nDocsy\nis used as a base for the internal and public handbooks. Modifications\nand extensions have been added on top to ensure efficient handbook usage.\nAll Hugo partials and shortcodes should be added to this repository, instead\nof duplicating them locally into the handbook projects.\nThe\nDocsy GitLab theme\nis integrated into the public/internal handbook repositories using a Go module in\ngo.mod\n.\nLocal Development\nTo develop on the Docsy GitLab theme locally build the handbook (or internal-handbook) project with the updated local copy of the docsy-gitlab theme following the steps below:\nAdd the following line to the bottom of the\ngo.mod\nfile in the handbook project:\nreplace\ngitlab\n.\ncom\n/\ngitlab\n-\ncom\n/\ncontent\n-\nsites\n/\ndocsy\n-\ngitlab\n=>\n/\nYOUR\n/\nLOCAL\n/\nPATH\n/\nTO\n/\ndocsy\n-\ngitlab\nRun the Hugo server:\nhugo server\nLoad the site locally:\nopen http://localhost:1313/\nAny changes made to files in local\ndocsy-gitlab\nproject will be rendered in the local instance.\nTesting changes\nWhen making changes that may have a user impact (not content only changes):\nTest the changes\nlocally\nfirst by performing the upgrades to\ngitlab-docsy\n,\nhandbook\n, and\ninternal-handbook\nand running the builds locally. Manual testing locally will make it easy to spot any major issues.\nIf there are no concerns, create a MR in the Docsy project with the changes, and have a maintainer review. Ensure that only the relevant changes you’re testing are in the MR.\nNote: At the moment, there is no review app for the\ndocsy\nproject. When relevant, include local testing notes in the MR.\nWith the new version of the theme available, create new MRs in\nhandbook\nand\ninternal-handbook\nwith the changes and upgrade to the theme if needed. Use review apps for both MRs to test the dependency changes in a production-like environment.\nApply the changes to the internal handbook first, and ensure changes are okay.\nNext, apply the changes to the public handbook.\nIf there are any issues, revert the changes to the handbook projects.\nReleases\nChanges made to\ndocsy-gitlab\nwill be made available to the\nhandbook\nand\ninternal-handbook\nafter the version is bumped and deployed to each project. This includes all theme updates with partials, shortcodes, and any changes to\n/docs\n. Much of this process has been automated, but a few manual steps are still required. To release a\ndocsy-gitlab\nchange follow these steps:\nAfter the merge request is merged, a pipeline on the\nmain\nbrach will kick off. After the pipeline succeeds, the\nrelease\njob can be triggered manually. For example:\nhttps://gitlab.com/gitlab-com/content-sites/docsy-gitlab/-/pipelines/1304430830\nThe release job will do three things:\nCreate a release in the\ndocsy-gitlab\nproject. Example:\nhttps://gitlab.com/gitlab-com/content-sites/docsy-gitlab/-/releases/v0.3.25\nCreate a merge request to\nhandbook\n. Example:\nhttps://gitlab.com/gitlab-com/content-sites/handbook/-/merge_requests/6086\nCreate a merge request to\ninternal-handbook\n. Example:\nhttps://gitlab.com/gitlab-com/content-sites/internal-handbook/-/merge_requests/4771\nAssign a\nhandbook backend maintainer\nor codeowner to each MR for review.\nOnce the merge request to\nhandbook\nand\ninternal-handbook\nhave been merged, the theme changes will be deployed to the sites.\nFor more information on the release process, see the\nrelease script\n.\nDependencies\nUpdating dependencies\nNote: Before updating dependencies, review the\ngo.mod\nfile in the target\nproject for additional notes and requirements.\nAlways update dependencies individually to isolate potential bugs and regressions. Never pull\nlatest\nbut pin the dependencies to a specific released version.\nhugo mod get server.com/project-name@version\nGoogle Docsy\nhugo mod get github.com/google/docsy@v0.9.1\nDo not bump Docsy versions without testing them extensively in MR review apps.\nRedirects\nYou can add redirects to the\nlayouts/index.redirects\nfile in the relevant repository.\nRefer to the\nGitLab Pages redirect documentation\nfor how these are formatted.\nPlease add your redirect in chronological order with a removal date of:\n3 months for within a single handbook, from one relative path to another relative path,\n3-6 months when linking from one handbook to another (such as linking from\nhandbook.gitlab.com\nto\ninternal.gitlab.com\n), or\n3-12 months for external links, meaning not part of the\nhandbook.gitlab.com\nor\ninternal.gitlab.com\ndomains.\nCI/CD Pipelines\nHandbook & Internal Handbook\nThe CI/CD pipelines for the\nhandbook\nand\ninternal-handbook\nprojects are roughly the same, and should remain that way.\nbuild\nstage\nThe\nbuild\nstage performs a few linter and security jobs (\nhandbooklint\n,\nhugolint\n,\nmarkdownlint\n, and\nsecret_detection\n), and a\nbuild\njob which builds the whole site and saves it as CI artifacts.\ndeploy\nstage\nThe\ndeploy\nstage uses the artifacts generated in the\nbuild\nstage to deploy the production site for changes to the\nmain\nbranch or review apps which can be deployed for MRs.\nnotify\nstage\nThe\nnotify\nstage has two jobs that are triggered on specific events:\npost_comment_on_failure\nposts a comment to the MR when the\nmarkdownlint\nor\nhandbooklint\njobs fail.\nnotify_slack_on_build_failures\npost a message to the #handbook-escalation Slack channel when there is a build failure on the\nmain\nbranch. This type of failure would indicate a broken CI pipeline.\n$BUILD_AND_TEST_ONLY\nmode\nThe pipelines can be triggered to run in\n$BUILD_AND_TEST_ONLY\nmode which means they will run all the test and build jobs, but none of the deploy or notify jobs. A pipeline can be triggered in\n$BUILD_AND_TEST_ONLY\nmode by setting the\n$BUILD_AND_TEST_ONLY\nCI variable to\ntrue\n. This is used primarily by the downstream pipelines triggered from the\nwww-gitlab-com\nproject.\n$GITLAB_TOKEN\nTools or scripts that need to interact with the repositories to perform handbook tasks should use the\nGITLAB_TOKEN\nCI variable. This is\ngroup level access token\ncalled\nDocsy GitLab Release\nwith a\ndeveloper\nrole and has\napi\nand\nwrite_repository\nscopes. This token will expire after a year and will need to be refreshed. Follow the steps below to refresh the token:\nCreate a new developer group level access token in <https://gitlab.com/groups/gitlab-com/content-sites/-/settings/access_tokens with api> and\nwrite_repository\nscopes. Give it the name\nGITLAB_TOKEN_YYYY_MM_DD\n(replace the\nYYYY_MM_DD\nportion with the current date).\nUpdate the value of GITLAB_TOKEN in\ndocsy-gitlab\n,\nhandbook\n, and\ninternal-handbook\nwith the new token value.\nCreate a new release of the Docsy GitLab Theme and ensure the pipeline works correctly.\nDelete the old token.\nSee above for more on\ngeneral management of access tokens\n.\nGitLab Pages Deployment\nThe deploy and review apps are configured in the\npages\njob in the\n.gitlab-ci.yml\nconfiguration file.\nReview app deploys can be run for merge requests by running the manual\npages\njob, or by adding the\n~\"deploy-review-app-always\"\nlabel to the MR.\nProduction deploys are only run from the\nmain\nbranch.\nConditional CI variables are used to configure the environment for review apps using\nGitLab Pages Multiple Deployments\n.\nvariables\n:\nPAGES_PREFIX\n:\n'mr$CI_MERGE_REQUEST_IID'\nENVIRONMENT\n:\n'mr$CI_MERGE_REQUEST_IID'\nHUGO_BASEURL\n:\n\"${CI_PAGES_URL}/${PAGES_PREFIX}\"\nThe\nroute map\nis configured in the\n.gitlab/route-map.yml\n.\nDocsy GitLab\nThe CI/CD pipeline for\ndocsy-gitlab\nis responsible for building, testing, and releasing the Docsy GitLab theme used by both\nhandbook\nand\ninternal-handbook\n.\ntest\nstage\nThe\ntest\nstage performs the\nmarkdownlint\n, and\nsecret_detection\njobs.\nbuild\nstage\nThe\nbuild\nstage performs runs the\nhugo\ncommand to ensure the theme builds successfully.\nrelease\nstage\nThe\nrelease\nstage performs one manual job to create a new release of the theme and merge requests to both\nhandbook\nand\ninternal-handbook\n. See the\nReleases\nsection for more details.\nwww-gitlab-com\nThe CI/CD pipeline for\nwww-gitlab-com\nis responsible for triggering downstream builds of both\nhandbook\nand\ninternal-handbook\nin\n$BUILD_AND_TEST_ONLY\nmode. This ensures that any changes to dependent data files in\nwww-gitlab-com\nwill build successfully for both\nhandbook\nand\ninternal-handbook\n.\nDanger review and reviewer roulette\nRight now the handbook projects doesn’t use the\nReviewer Roulette\nfeature of the\ndanger-review\nCI/CD component\n. See\nissue\n.\nWe use the\narchitecture\nplugin to provide guidance on how to review MRs that contain changes to\narchitecture evolution design documents\n.\nIn order to make Danger post message to MRs we need to setup a project token (\napi\nscope with\nDeveloper\nrole) and\na CI/CD variable called\nDANGER_GITLAB_API_TOKEN\nto contain this project token (\nMasked\nbut not\nProtected\n).\nSee above for more on\ngeneral management of access tokens\n.\nFor more details, follow the\nDanger documentation\nand inspect the\nMR adding the reviewer roulette to the public handbook\n.\nCode quality report MR commenter\nThe CI/CD linting jobs generate code quality report artifacts for MR widget integration. If there are errors detected,\na custom CI/CD job posts a Markdown table summary as MR comment, linking to helpful handbook editing resources.\nThe\nparse-codequality-report.sh\nscript in the\nhandbook\nand\ninternal-handbook\ngenerates the code quality report posted in the MR. Changes to these reports need to be applied to both projects.\nThe code quality report relies on the\nGITLAB_TOKEN\nto perform the reporting actions on any MRs.\nCI/CD maintenance tasks\nSee\nmaintenance tasks\n.\nTriage bot\nThe\ntriage-bot\nproject is meant to help triage issues in the handbook, internal-handbook, and docsy-theme projects.\nIt has two main goals:\nEnsure issues are triaged.\nClose stale issues and merge requests.\nPlease see the\n.triage-policies.yml\nfor rules.\nYou can find more about how to create policies in the\nGitLab triage gem project readme\n.\nThe triage bot is scheduled to run 3 times a week. See the project’s pipeline schedule for details.\nTriage uses the\nTRIAGE_BOT\naccess token to perform tasks. This must have the Developer role to take actions on merge requests.\nSee above for more on\ngeneral management of access tokens\n.\nHandbook Maintenance\nDocumentation on how to carry out maintenance tasks.\nRunning the Handbook in Docker\nInstructions for running the Handbook projects in Docker\nRunning the Handbook Locally\nInstructions for running the Handbook projects locally\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "320f62e430c80d1e.html"
}