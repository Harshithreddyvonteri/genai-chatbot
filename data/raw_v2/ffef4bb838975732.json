{
  "url": "https://handbook.gitlab.com/handbook/product/product-principles",
  "title": "Product Principles | The GitLab Handbook",
  "headings": [
    "Product Principles",
    "Our Product Principles",
    "How we follow our Principles"
  ],
  "text": "Product Principles | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nDavid DeSanto\nOn This Page\nOur Product Principles\nHow we follow our Principles\nEnabling Collaboration\nBringing Ideas to Reality\nThe Minimal Valuable Change (MVC)\nIteration\nIteration speed and product excellence\nSubtractive thinking\nSaaS First\nFeedback issues\nCelebrate and Learn from Failures\nAvoid “Not Invented Here” Syndrome\nConvention over Configuration\nInspiration\nConfiguration Principles\nAlways Allow for Deploying to Production\nDesign for self-managed for feature parity between deployments\nPrincipled adherence to the established knowledge architecture\nTake pains to avoid instance-level features\nDeciding whether to add configuration\nEvery feature is owned by a group\nUser Experience\nBe Ambitious\nHow this impacts Planning\nDiscoverability without being annoying\nProduct Qualified Leads (PQLs)\nA PQL can be further broken down into two types, usage and hand-raise\nClarifiying out what a PQL is not\nThe future vision of PQLs within the GitLab product\nDrive Product Usage\nSingle Feature usage: AARRR framework\nMulti-feature usage: Adoption Journey\nFlow One\nData-driven work\nNo artificial limits in Core\nAvoid enforced workflows but allow enterprise flexibility\nPrefer small primitives\nComponent Principles\nStart with enabling Developers\nBuild for production use, not demo use\nIntegrate other applications thoughtfully\nAvoid plugins and commercial marketplaces\nProduct and feature naming guidelines\nGive products and features descriptive, not distinctive, names\nUse prepositions when referring to third-party products and services in names\nNext Generation\nModern first\nDeveloper first\nCloud-native first\nPrioritize current adopters\nCustomer Support on all features\nThe Handbook\nProduct Handbook\nProduct Principles\nProduct Principles\nThese are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab.\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nOur Product Principles\nThese are core principles that we believe will deliver world-class products through customer-centric innovation. Our goal is to build a practice that fosters these principles with the customers’ voice at the core. Everything we do is for our customers, and we are only successful when they succeed in delivering secure software faster to their customers and internal users.\nWe are customer zero, therefore we use our own product:\nEverything you put into the product should be a feature you or our Engineering team would use as part of our daily work. If the answer is no, then challenge your “why”, as there might be a better solution that will have a bigger impact for our customers.\nWe are not our only customer:\nMeet with customers as much as possible as everything we do is for them. It is tempting to assume that we understand our customers through our own usage and dogfooding, but that only gets you so far and we can be wrong. Validate assumptions through strategic user research, customer interviews, and feedback sessions.\nWe are design-led:\nIt does not matter what customer pain points you work with Engineering to resolve if what is provided to customers is hard (or almost impossible) to use. User experience is our top priority as we have a very technical product, however it should be easy enough for someone new to DevSecOps to get started quickly. This includes everything from onboarding to shipping secure software leveraging GitLab.\nWe value quality over velocity:\nDelivering incomplete features and capabilities to ensure your team achieves a defined velocity is not acceptable. Everything we ship to customers must be user validated, bug free, not introduce security vulnerabilities, be able to achieve GitLab.com scale, include documentation, and be available on all customer deployment choices simultaneously. Accruing additional technical debt in favor of velocity is also not acceptable as this leads to future quality issues around availability, scalability, reliability, and security.\nWe value data over intuition and anecdotes:\nEverything we build must have success metrics we can track to ensure we are providing value to our customers. We measure outcomes, not launches, and this is only possible with experimentation and proper instrumentation. All features must be instrumented so success metrics can be tracked and adjustments to plans can be made through product usage.\nWe fail fast and iterate with intention:\nDefine a hypothesis on how to address a customer use case or pain point and validate (or invalidate) it quickly through problem validation. Take the outcome of the problem validation cycle and build an iteration strategy to deliver it with a focus on usability and quality. Revalidate your hypothesis through solution validation with each iteration so you can adjust plans as needed. Problem and solution validation ensures the customer voice is key in making decisions.\nWe believe in product-led growth over unguided experiences:\nOur product should be GitLab’s best Sales team member, and its own biggest champion. Enable feature discovery moments to let customers know there is more value based on their usage, actions taken, or configuration choices. The more customers adopt our product’s capabilities, the more return on investment they experience, which builds more internal GitLab champions.\nWe like to win…and we only win as a team:\nWe win when our customers are able to successfully ship secure software faster with GitLab. This requires us to hold ourselves to the highest levels of execution and collaboration within Product across our Product Management, UX Research, Product Design, and Technical Writing teams. While teamwork within Product is necessary, it is also not sufficient. We require that same standard of execution and collaboration with our cross-functional team members across R&D and GTM. Together, as a global GitLab team, we can drive Results for Customers.\nHow we follow our Principles\nEnabling Collaboration\nFrom development teams to marketing organizations, everyone needs to collaborate\non digital content. Content should be open to suggestions by a wide number of\npotential contributors. Open contribution can be achieved by using a mergeable\nfile format and distributed version control. The\nmission of GitLab\nis to\nallow everyone to collaborate on all digital content\nso people can\ncooperate effectively and achieve better results, faster.\nBringing Ideas to Reality\nIdeas flow through many stages before they are realized. An idea originates in a\nchat discussion, an issue is created, it is planned in a sprint, coded in an\nIDE, committed to version control, tested by CI, code reviewed, deployed,\nmonitored, and documented. Stitching together all these stages of the DevOps\nlifecycle can be done in many different ways. You can have a marketplace of\nproprietary apps from different suppliers or use a suite of products developed\nin isolation.\nAs a single-application for the entire DevOps lifecycle, GitLab strives to enable you to bring ideas to production rapidly. We will do so AND avoid demonstrating our capabilities with toy app demos and simple trivial examples. That’s because we understand that\nbuilding a prototype is easy, but building a production line is hard\n.\nThe Minimal Valuable Change (MVC)\nMinimal Valuable Change (MVC) is the GitLab path to delivering the smallest measurable improvement for our users, customers, and the wider community.\nOur approach requires four pillars:\nRelentless customer focus and commitment to understanding their workflows, using research and validation\nMeasurable outcomes that use established metrics for success in tracking adoption, usage, or other business outcomes.\nProduct functionality that adheres to GA criteria listed in\nthe levels of support\nFuture vision to expand the MVC beyond the initial release\nWhen considering how to scope a feature for a release, remember that it is not ok to ship an “incomplete” feature to customers (see the\ndefinition of done\n). Consider the use of Pajamas components for UI in your MVCs. When introducing a new component or pattern not found within Pajamas, it is the responsibility of that team to follow our\ncomponent lifecycle guidelines\nto\ndetermine whether it should be added\nand, if so, contribute the addition/update back to Pajamas.\nMVC means reducing the scope so we can ship quickly. It doesn’t mean shipping something that hurts the usability of GitLab. First impressions are important. A feature that does not offer enough value or hinders the user experience may have a negative effect that discourages users from trying that feature again in the future. If there are obvious gaps in your MVC or you can anticipate follow-up requests, consider whether your feature is complete enough to be released to users. If you are unsure whether your feature is complete enough to be an MVC (or if you know your feature is not complete enough to be an MVC and you want to gather additional feedback), you can use approaches such as dogfooding,\nbeta programs\n, feature flags, and/or user research to help build confidence in your decision. In terms of talking about your feature, it’s ok to add a release post item that announces your incomplete feature (making clear that it is an early iteration, and points to the direction for the feature) and follow up in a later release post with a new item when you’ve completed more of the functionality. As long as you call it cookie dough, not a cookie, it manages user expectations.\nExamples:\nShip a feature through the API and not the UI -\nSee this release post\nas a great example of this approach was used to build a GraphQL endpoint for deleting attachment from a project.\nExposing a minimal set of functionality  -\nSee this release post\nwhere a basic read-only page displaying queued jobs was added and more capabilities were added in subsequent releases.\nThere are scenarios when an MVC approach is not advised. These include:\nWhen changing core parts of the experience - An example of a core experience is\ncomments\n. When building this out for work items, we waited to release the new feature to end users until we reached parity with comments in Issues and MRs.\nIteration\nAn MVC approach is a byproduct of our spirit of iteration. That means we\nbreak problems down\nas\nsmall as possible\n, and focus on\nreduced cycle time\n. Thinking iteratively is not always intuitive, and breaking certain topics or projects down can be challenging. Here’s a helpful\nvideo\nfrom our CEO with guidance on how to think more iteratively.\nHere is a\ngreat video\nthat illustrates how to build MVCs using Iteration. It shows Lego climbing obstacles. The first design fails. The second one can climb a book and so on. It also illustrates how modularity and good interfaces help with iteration as things get complex.\nIteration speed and product excellence\nTo ensure that our efforts consistently deliver value to our users, each iteration must adhere to the following guidelines:\nDefine Expected Impact: Clearly articulate the expected measurable positive impact of the iteration on users, ensuring alignment with our overall product direction and guided by a vision that has been informed by user research.\nEstablish Metrics for Success: Identify specific metrics that will be used to evaluate the success of the iteration before declaring the feature GA or an iteration shippable. These should be concrete, measurable indicators that directly relate to the intended outcomes of the iteration.\nThese metrics should define a measurable quality bar as part of the initial scoping as that allows the cross-functional team to understand what the success/quality criteria are before beginning to build, while also allowing these metrics to be measured during the entire development and post-release lifecycle. As part of defining the quality bar a test plan should be defined and agreed that it can measure against these measures for success. Quality targets include:\nNo S1 or blocking S2 defects/bug that prevents the customer from using the feature\nNot impacting or severely degrading the stability of the GitLab instance\nSuccess of an initiative is not measured by the deployment of a change or the completion of an iteration. True success is determined by whether the iteration achieved its predefined objectives, as evidenced by tangible business and product metrics.\nExample:\nEffort: Reduce latency in Service A.\nIteration A: Implement regional upgrades in key locations.\nSuccess Metrics: Evaluate the iteration’s success by measuring increased usage and user satisfaction with Service A. Relevant metrics might include service usage rates, user adoption levels, repeat usage statistics, and revenue increases following the upgrade.\nWe celebrate achievements when we can clearly see that an iteration or launch has resulted in tangible value for our users.\nSubtractive thinking\nHumans tend to\nfavor solutions that add features than solutions that remove them, even when removing features is more efficient\n- great PMs recognize this bias and utilize subtractive thinking to create great user experiences. Customers will tell us when we’re missing something they need, but they’re unlikely to explicitly tell us when we’re overwhelming them with unwanted features. However, we do have evidence that this challenge is already a consideration for us, as reflected consistently in our\nSystem Usability Scale verbatims\n. Here is\nan episode on the Hidden Brain podcast\nthat explores this bias further.\nSaaS First\nOur customers choose SaaS because it reduces their operating costs, helps them adopt the latest capabilities without performing upgrades, and provides them peace of mind of high availability. This principle implies the following:\nDesign features so that they can be released without downtime.\nRelease features in SaaS before self-managed or alongside it.\nThis principle does not mean SaaS only. For more information on parity between SaaS and self-managed, see our\nparity principle\n.\nFeedback issues\nAn MVC approach allows for maximum feedback while iterating. To help gather that feedback, Product Managers are encouraged to create feedback issues (\nexample\n) to consolidate suggestions and experiences from users. Consider mentioning the feedback issue in any release post items and related implementation issue(s) for awareness.\nFeedback issues allow GitLab team members and the wider GitLab community to offer thoughts and suggestions for future iteration.\nFeedback issues are particularly encouraged for major new customer-facing features.\nThese issues can be closed at the end of the milestone following the milestone when they were introduced.\nCelebrate and Learn from Failures\nIt’s important that team members know they are encouraged by E-group to continue moving fast as GitLab grows and gets bigger as a company. This involves moving quickly even in the face of risk and complexity. In alignment with our\ntransparency value\n, we’d like to celebrate examples of failures or mistakes that were made while moving fast, where we ultimately learned from it and moved on.\nThe following failures provided by the product team are celebrated as opportunities to gain insight, share learnings and move on with additional knowledge:\nWe initially believed we should create a lift and shift translator for Jenkins, but learned from users and technical experts that it wasn’t technically feasible and it would be better to invest in more detailed documentation and guidance.\nWith Auto DevOps, we discovered the desire for composability and the need to iterate on your DevOps platform makes a one-pipeline fits all capability miss the mark for tackling that user pain.\nWe integrated with some monitoring and observability tools as MVCs (Jaeger) that were just too MVC to give us data points on their success.\nWe relied upon “MVC” not including on by default and usable by default - resulting in lots of MVCs that we thought would garner us new information, but did not.\nWe spent time delivering a marketplace offering, and had very little traction. We learned marketplace offerings alone are not a vehicle for adoption, and we need a sales alignment with the marketplace vendor to achieve success.\nWe had duplication of effort between Quality and Distribution. We didn’t recognize / resolve this for too long. We have learned to better integrate Quality into the planning process.\nData telemetry in general has been one of our failures. We didn’t invest in telemetry seriously or early enough, and we attempted to accelerate via a 3rd party, but didn’t do a good enough job talking to our community on the best ways to roll that out.\nWe failed to capture significant users with APM.\nInternal Deck for Reference\nHistorically, designers had been instructed to not spend time on problem validation, but we had a PM who realized in order for her group to be successful, she needed her design counterpart to be deeply involved in validation work.\nWe learned that GitLab’s original Serverless strategy was dependent on immature technology and not necessarily aligned with the market winner Lambda. This resulted in GitLab stopping investment in Serverless.\nWe recognized a big gap in security concerns with GitLab managed clusters, which was prohibiting this feature from being adopted by customers. Once we learned from this ‘failure’ we introduced the Kubernetes agent instead.\nIf you have a failure that can serve as a learning opportunity, please make an MR to this page\nAvoid “Not Invented Here” Syndrome\nJust because something is\nnot invented here\ndoesn’t mean it doesn’t have a perfect home within our solution. GitLab is an\nOpen Core product and is part of the broader ecosystem of Open Source tools in\nthe market. Every day there are new innovative open source tools out there that solve\nreal-world customer problems; we should not be afraid of embedding these tools\ninto our own products in order to solve those same problems for our customers\ntoo. Leveraging existing technology allows us to get to market much more quickly,\nto contribute to Open Source (and help strengthen Open Source as a whole), and\nallows us to focus our own people on making GitLab itself better. Building\nprofessional relationships with these tool creators also is a positive for GitLab\nsince they may have important user perspectives around your categories.\nWe have achieved many successes following this approach:\nCode Quality\nin CI/CD pipelines by embedding\nCodeClimate\nFeature Flags\nby using the\nUnleash\nclient library\nMobile publishing\nby writing about how to utilize\nFastLane\nwith GitLab\nThere are also many more examples throughout the company where this has been successful.\nAs a product manager you should be monitoring the world of Open Source as it\nrelates to your area to see where new innovative tools are being developed, and\nnot be afraid of integrating those. One thing to keep in mind, integrating could\nbe anything from a blog post describing how the tool works together with GitLab\nall the way up to bundling it inside of our own installation, and this can\nevolve iteratively.\nConvention over Configuration\nWe understand that a natural inclination when using application development tools is to create an array of buttons to press and knobs to turn. We believe, however, that adding options to an application does not necessarily improve the user’s experience of that application. The best way to serve our users is to create an application that reduces complexity while still offering the features they need.\nInspiration\nWe admire other “convention over configuration” tools—like\nRuby on Rails\n(the doctrine of which perfectly describes the\nvalue of integrated systems\n),\nEmber\n, and\nHeroku\n—and we strive to offer the same advantages for continuous delivery of software.\nFurthermore, Ruby on Rails has significantly and positively influenced the Ruby community, uplifting the tool and making it more powerful and useful than ever before. We want GitLab to be to Kubernetes what Rails is to Ruby.\nYou should prefer well-considered choices based on current best practices. Avoid unnecessary configuration. Avoid configuration to support fragile workflows.\nConfiguration Principles\nWhen considering adding new configuration, we follow the following principles:\nEnsure a great experience by default\n- GitLab should work perfectly right out of the box for most users. While it should be resisted, sometimes configuration is inevitable or preferable. Your configuration must not make that\nexperience worse\nand should always\nget out of the way of the user\n.\nGitLab.com values should be the default\n- the settings used on GitLab.com should be the defaults for self-managed. Not only does this provide a consistent experience for users, but we get the highest fidelity feedback via GitLab.com. If we find that the GitLab.com setting is wrong, it is usually wrong for self-managed too. If you believe you have a strong case for using custom (non-default) settings for GitLab.com, please document the justification in alignment with your Product Section Lead. Any custom (non-default) settings for GitLab.com need to be\ntracked here\n.\nEncourage favorable behaviors by limiting configuration\n- Convention also implies that we’re encouraging our customers to do things\nin a certain way. A very concrete example of this is the ability to disable pipelines. We believe that our integrated solution will give a superior user experience and we’re motivated to encourage this behavior. For this reason, adding a configuration to allow disabling this permanently (be that in a template or instance-wide), is something that should be avoided.\nDesign for users not intermediaries\n- GitLab should avoid falling into the\nBlackboard trap\nof building a product that administrators of GitLab love because it is configurable, but developers and other users of GitLab hate because it is overly complex and confusing.\nWorking by Default\n- From the perspective of someone using GitLab, the feature does not exist until it works by default. This means, with few exceptions, features should simply work on GitLab.com and self-managed installations of GitLab without setup, toggling feature flags, modifying GitLab Omnibus (\ngitlab.rb\n) or Charts configurations, or installing extra components. This is more difficult than “enabled by default,” which implies that features may be available by default but then require additional effort to set up. Working by default is worth the extra thoughtfulness and effort, because it enables an extremely important outcome: It allows customers to easily adopt our entire platform and experience the benefits of a single app for the entire DevOps lifecycle. In order to be properly working by default a feature needs two things:\nEnabled-by-default\n- it must not require modifying GitLab Omnibus (\ngitlab.rb\n) or Charts configurations, installing extra components on the host machine, or be behind a feature flag. When features are not enabled-by-default most people will never benefit from it because admin access to the GitLab application or the host machine will be needed. Feature flags should be consistently ON for both GitLab.com and self-managed users whenever possible.\nEnabled-by-default can be rolled out incrementally. A feature can sometimes be activated within days via a feature flag on\nGitLab.com\n. Other times a feature can take months to prove that it has the performance and visibility enterprises need.\nSetup-by-default\n- it should not require the setup before the feature can be used. We should ensure every feature has sensible defaults, and automatically migrate existing users/groups/projects to have the new features setup by default, while ensuring that the security and infrastructure costs would not be substantially affected. It is important to remember that most people are not likely to take the extra effort to setup a new feature, nor will they be aware that the feature has been added. The vocal proponents of issues who a Product Manager might interact with would likely be inclined to take the extra effort to setup a feature, but most people will not.\nAvoid Limits\n- Limits should be in place to\nprotect the system\nbut not to “slowly try out” a feature. By limiting the usefulness of a feature right from the start the only thing you are achieving is limiting its adoption and usefulness. If you are going to default to OFF or limited, you must have a good, documented reason for this.\nAvoid configuration completely when possible\n- Requests for configuration can be a proxy for trying to support a fragile workflow. Rather than enabling bad habits and incurring product debt, effort should be spent helping customers adopt best practices.\nConfiguration builds up over time\n- Every configuration option in GitLab multiplies its complexity, which means the application is harder to use, harder to develop, and less friendly to users.\nConfiguration is hard to remove\n- Removing a configuration after it shipped and in use is much more work than not introducing it in the first place. This is because you change the behavior for customers that selected the less popular option.\nConfiguration is an expensive testing mechanism\n- It’s a natural reaction to propose a big change to be configurable, as you worry it’ll negatively affect certain users. However, by making a feature configurable, you’ve now created\ntwo problems\nto maintain going forward. Adding a configuration is a\none way door\nthat should be avoided if possible. As a result, consider using feature flags instead of configuration.\nAlways Allow for Deploying to Production\nSometimes fast deployments are needed to fix a service or application outage that can cost a business money and reputation, we understand time is of the essence in these situations. That’s why we believe giving the team control over this is important in crucial moments of the development lifecycle. Controls that prevent changes from reaching Production are okay as safeguards, but they should be able to be quickly removed or disabled if necessary. When controls are changed in this way, logs or records should be created to support post-mortem analysis and allow for understanding why the control needed to be removed or disabled.\nDesign for self-managed for feature parity between deployments\nWe want to provide the same capabilities to end users regardless of the method they choose to use GitLab (GitLab SaaS, Dedicated or Self-managed). All GitLab SaaS environments leverage the same installation method available to self-managed users, with a different licensing structure. By designing and implementing features for self-managed, we achieve maximum parity between the various installations.\nA few examples:\nDesign features to avoid downtime since it’s not acceptable for SaaS nor self-managed users.\nIt is ok to release functionality to SaaS first, as long as the solution is applicable for self-managed too.\nWhile a feature can be enabled first on SaaS via a\nfeature flag\nor setting, the underlying implementation must also exist, although disabled, on self-managed.\nIn line with our\nSaaS-first\nprinciple, some features may be released on SaaS to gain operational experience and apply learnings prior to recommending and supporting customers using it. Features would be present on self-managed codebase but are disabled until General Availability.\nFor functionality where implementation may be especially challenging without cloud services, for example with AI, self-managed functionality may be dependent on an underlying SaaS service. This allows us to provide end users the same capabilities regardless of deployment type, and not overly constrain our feature set or impose significant operational complexities on each deployment. Product managers need to be aware that this may impact the adoption of these features, as not all customers may be willing or able to leverage underlying SaaS services, such as air-gapped deployments.\nPrincipled adherence to the established knowledge architecture\nException to this product principle requires CEO approval. Work with VP, Product Management to add your request to the Product Scale agenda describing the situation and request for exception to gain CEO approval.\nOur\nsimplicity\nand\nSaaS/Self-Managed Parity\nprinciples require that we adhere to our established knowledge architecture. Our established architecture is\nOrganization\n,\nGroup\nand\nProject\n.\nWhen we need to add capabilities that an admin needs to apply across the entire organization, then we provide them at the organization level.\nWhen we need to add capabilities that need to apply across all projects in a group, but not applicable to all groups in an organization, then we provide them at a group level.\nWhen we need to add capabilities that need to apply across a specific project, but not all projects in a group, then we provide them at a project level.\nFor capabilities our users want applied to a set of groups, it is tempting to create another aggregation concept for a “set of groups”. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all groups at the organization level or for each group in the set individually.\nFor capabilities our users want applied to a set of projects, it is tempting to create another aggregation concept for a “set of projects”. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all projects at the group level or for each project in the set individually.\nNote: This implies that we will take pains to avoid instance-level features as we expect to move all capabilities from instance to organization over time.\nTake pains to avoid instance-level features\nAfter making a tier decision on a new feature, we should strive to maximize the number of users who can use it.\nAs part of this objective, we should avoid building instance-level features when possible. Building at the instance level (in the\nadmin area\n) leads to\na separation between GitLab.com and self-managed\nand limits\nyour audience to self-managed customers only:\nHistorically (and even net-new proposed features) we’ve often started with an “instance-wide” mindset which then means we need to iterate and adjust features to work at a group-level. This often delays functionality for our SaaS customers and makes GitLab.COM feel like a second-class citizen.\nThere are factors that may justify an instance-level feature, like\nengineering efficiency\nand\nhigh infrastructure cost\n, but we should always have a clear view on how we might bring the feature to GitLab.com and clearly document why we started with the instance-level in the issue.\nDeciding whether to add configuration\nFor a GitLab instance in\ngitlab.yml\nProduct Managers at GitLab are frequently confronted with the choice of whether to add new configurations or not. These can frequently be times where an outside perspective is important. That’s why we’ve created the option to request a\nNew Config Review\n.\nHere’s an example of how to consider whether to add new configuration. Let’s say you are proposing we add a checkbox or two radio boxes in a feature dialog box. Think carefully about what users really want. Most of the time, you’ll find you really only need one solution, so remove the other option. When two possible choices really are necessary, the best or most common one should be the default, and the other one\nshould be available. If the non-default choices are significantly less common, then consider taking them out of the main workflow for making decisions, by putting them behind an Advanced configuration tab, for example.\nAvoiding configurations is not always possible. When we have no choice,\nthe secondary priority is to configure something in the GitLab\ninterface.\nA configuration should only appear in a file (\ngitlab.rb\nor\ngitlab.yml\n) as a last resort.\ngitlab.yml\nis the configuration file used by the Rails application. This is where the domain is configured. Other configurations should be moved to the UI as much as possible and no new configurations should be added here.\ngitlab.rb\nis the configuration file for Omnibus-GitLab. It acts not only as\nan abstraction of the configuration of\ngitlab.yml\nfor GitLab-Rails, but also\nas the source for\nall configurations\nfor services included and managed within\nthe Omnibus-GitLab. Newly introduced services probably need to be configured\nhere.\nWhen you have to add a new configuration, make sure that the features and services are on by default. Only add a configuration line to either of these configuration files if the feature or service cannot be fully disabled from the admin UI.\nFor a GitLab CI configuration in\n.gitlab-ci.yml\nIf the decision to add a configuration follows the\nprinciples above\n, add it to the repository-specific CI configuration options and be sure to default it to the option that results in the best user experience. We are much more liberal with additions to CI configurations than Instance configurations.\nEvery feature is owned by a group\nFeatures should be owned by one group, including the respective DRIs of that group. Make sure that the documentation metadata and the\nfeatures.yml\nfor your team are kept up to date to make it easier for other teams to find the correct owner.\nThis principle is important because unowned product features are unsupervised, and continue to accrue technical debt over time. This increases the risk of performance and maintenance issues, which tend to only get resolved once the situation has become critical. In addition, by having clear DRIs for our entire surface area, teams are able to advocate for investment and/or removal of features. If you encounter a feature that does not seem to be owned or documented, work with the team that originally introduced the functionality to decide on ownership. If the feature is large and needs to be broken down, document which elements are owned by which team. If you cannot decide who should own the feature, escalate the decision to the lowest common reporting line between the involved teams. If there are features that no group wants to own, or features that a group no longer wants to own, that feature should be considered for deprecation and removal.\nUser Experience\nA highly usable interface with cohesive workflows and comprehensive documentation is a must to stay ahead of our best-in-class competitors. Work closely with the individuals in\nUX\nto achieve our user experience goals. The UX team has a high level of expertise in Product Design, Technical Writing, and UX Research. They can help decipher or decide how to simplify or avoid complexity. While our Product Designers\nreview user interface changes in merge requests\n, they are not limited to just the UI. Anything that impacts the user journey is relevant to them.\nKeep in mind these general user experience principles.\nStrive for simplicity:\nUsing GitLab should be easy. Users should think about the applications they are building and the teams they are collaborating with, not how to make our app work. Here’s a great read on\n“Don’t make users think!”\nDepth over breadth:\nA world-class experience requires deep, powerful, useful features. To remain balanced, we must also identify capabilities that can be deprecated so we are adding depth while encouraging\nsubtractive thinking\n.\nBetter than before:\nOur\nMVC principle\npushes back against the notion that something must be better than nothing. Instead, we assess if the user experience is better than before by considering its value. Work with a Product Designer to evaluate tradeoffs and minimize\ndeferred UX\n.\nTimeless design:\nThe user experience should be relevant both today and years from now, so each release should encapsulate the best experience possible. Ask yourself, “How would we build something if we knew this was the last time a team could touch it?”\nAdditionally, you can familiarize yourself with the\nUX team mission\nand\nGitLab’s Pajamas design system principles\n.\nBe Ambitious\nMany crazy, over-ambitious ideas sound like they are impossible just\nbecause no one else is doing them.\nSince we have amazing engineers and a culture of shipping minimal\nvaluable changes, we are able to accomplish many more “impossible” things than other organizations.\nThat’s why we’re shipping merge conflict resolution, why we shipped built-in CI\nbefore anyone else, why we built a better static pages solution, and why\nwe’re able to compete.\nHow this impacts Planning\nHere at GitLab, we are an\nambitious\ncompany and this means we\naim for big things with every release. The reality of taking chances and\nplanning aspirationally means that we won’t always be able to deliver everything\nthat we wanted to try in every release, and similar to our\nOKRs\n,\nwe believe this is a good thing. We don’t want to shy away from challenging\nourselves and always want to keep a sense of urgency, and aiming for more helps\nus do that. Also see\nthe importance of velocity\nWe arrived at our preference for ambitious planning after measuring our velocity and finding that our velocity was unchanged whether we scheduled ambitiously or scheduled for providing slack.\nDiscoverability without being annoying\nDiscovering new features can enhance the experience and unlock significant value for users. And the more users see and try our features, the faster we can get feedback to improve them.\nHowever, excessive feature discovery efforts can become irritating for users. This erodes trust and reduces engagement with other UI elements in the future. Even worse, they might leave GitLab due to this deteriorating experience. Context plays a significant role in how users engage with new functionality. By presenting features in a way that resonates with a user’s current situation and needs you increase the liklihood of them using this new functionality.\nWork with your product designer to improve the discoverability of your features. The Pajamas Design System has best practices and examples to support\nfeature discoverability\n. We can also design new patterns. The Growth team can also help you with this, as they think about things like onboarding new users and promoting feature use within the app while supporting, not annoying, the user.\nProduct Qualified Leads (PQLs)\nAs the GitLab userbase and team members who work on GitLab continue to grow we need to support both our users and team members by helping to connect users who may be interested in speaking with a member of the sales team to that particular person. We can call this a Product Qualified Lead or a PQL.\nA PQL can be further broken down into two types, usage and hand-raise\nUsage: A usage-based PQL is a user or a team (group or instance) that adopted the product to the level that we had data to support that they are statistically more likely to upgrade to a subscription compared to our remaining userbase. When this level of product adoption is achieved by the user or team an alert is triggered for the sales team to follow up with the user and/or team. The level of usage that triggers a usage-based PQL is something that will be determined and agreed upon between Product, Marketing, and Sales as the goal is to generate quality leads for the sales team. When the usage-based definition is agreed upon it will be added here.\nHand-Raise: A hand-raise PQL is a user who requests to speak to sales from within the product. Our goal is to introduce these hand-raise moments throughout the product at feature discovery moments, or moments where a user is learning more about a paid feature or tier of GitLab that they may find valuable. These moments should be contextually relevant to their usage and non-obtrusive\nsee Discoverability Without Being Annoying\n. A hand-raise moment in the product should be accompanied by either a trial CTA or a touchless upgrade CTA or both. We want to always provide options to our users as we want them to decide the path that best suits their needs.\nClarifiying out what a PQL is not\nA PQL is not a user that has only signed up for the product, they have not achieved a qualified status.\nA PQL is not a trial, a trial is a separate user adoption path. It’s important to note that a user could start a trial and then become a PQL or vice versa.\nThe future vision of PQLs within the GitLab product\nOur goal is to develop a world-class PQL system whereby we monitor product usage to understand and constantly iterate on what constitutes a usage-based PQL and provide a unified intelligent interface in the product where users can submit a hand-raise, start a trial or upgrade touchlessly.\nBy monitoring product usage, usage PQL volume, SAO rate, and ASP we will be able to work in partnership with marketing and sales to ensure we’re sending high quality leads to the sales team.\nIn the product experience, we will develop an intelligent module for feature discovery moments whereby we help recommend what we believe should be the preferred option for the user whether it’s a hand-raise, trial or touchless upgrade by updating the default CTA based on their usage of the product along with demographic and firmographic data. This experience will be present on both SaaS and self-managed instances for air-gapped instances the CTAs will provide the user with external URLs to visit to complete the associated step. This experience should be able to be deployed by any stage to further their paid adoption rate.\nDrive Product Usage\nUsers can only experience GitLab’s value when they actively use the product features. Therefore the Product team’s mission isn’t only shipping features and building products, but also driving usage and delivering value.\nThere are two frameworks we use to think about driving GitLab’s product usage: we use the AARRR framework to think about how to drive a single feature’s usage, and use the Customer Adoption Journey to think about cross-adoption of product features. These two frameworks are also interconnected with each other.\nSingle Feature usage: AARRR framework\nAARRR stands for\nAcquisition\n,\nActivation\n,\nRetention\n,\nRevenue\n, and\nReferral\nwhich is often referred to as\n“Pirate Metrics”\n. These five words represent the customer journey and the various means a product manager may apply Product Performance Indicators to drive a desired behavior in the funnel.\nWhile the AARRR framework is commonly used to drive overall active users, it is also a great way for PMs to think about how to drive feature usage.\nAcquisition measures user actions that show awareness of the feature\nActivation illustrates a user has begun to apply the feature\nRetention is the continued use of the feature over time\nRevenue captures the monetary value acquired from feature usage\nReferral focuses on measuring behaviors that drive users to encourage others to consume the feature\nclassDiagram\nAcquistion --|> Activation\nAcquistion : Are users aware of the product or feature set?\nAcquistion: Measurement (Insert Metric)\nActivation --|> Retention\nActivation : Are users applying the feature?\nActivation: Measurement (Insert Metric)\nRetention --|> Revenue\nRetention : Are users applying the feature over time?\nRetention: Measurement (Insert Metric)\nRevenue --|> Referral\nRevenue : Are users paying for the features?\nRevenue: Measurement (Insert Metric)\nReferral --|> Acquistion\nReferral : Are users encouraging others to use the feature?\nReferral: Measurement (Insert Metric)\nAdd AARRR funnels for your stage or group’s Product Performance Indicators directly with mermaid markdown. It’s easy if you use this\nlive editor\n.\nProduct managers can use these various states to prioritize features that drive a desired action. This could mean focusing on the Activation metric to drive awareness and generate more\ntop of funnel\nleads. As an example, in the\nRelease stage\nthe Release Management group tracks actions on the Release Page in GitLab. Users that view a Release Page have been\nacquired\nand those that create a release on a Release Page are\nactivated\nusers. The Product Manager can choose to target features that drive users to view the Release Page more, resulting in a greater interest in the number of users that become activated and create their own Releases.\nMulti-feature usage: Adoption Journey\nGitLab is a complete DevOps platform. Our customers get the most value out of the GitLab product when they use multiple features together. Below is the most common path our customers follow to adopt GitLab’s product stages.\nAs PMs, in addition to driving usage of individual features, we should also proactively think about how to design product and user experiences to help users adopt more stages and features, therefore benefiting more from using GitLab.\ngraph TD;\nid1(Create - 99%) --> id2(Plan - 91%)\nid3(Verify - 84%) --> id4(Secure - 36%)\nid1 --> id5(Manage - 35%)\nid1 ==> |Golden Journey|id3(Verify - 86%)\nid3 ==> |Golden Journey|id6(Release - 54%)\nid3 --> id7(Package - 7%)\nid6 --> id9(Monitor - 8%)\nid6 --> id10(Configure - 2%)\nid6 --> id11(Software Supply Chain Security - 28%)\nThe percentage here is defined as % of monthly active paid ultimate-tier self-managed instances that adopted that stage. The data is captured directly in the Golden Journey Paths chart (which has been deprecated).\nThe Golden Journey: The bolded path is the “Golden Journey” where we observe as the most common stages adopted by paid customers and serve as foundation to adopt other stages: it starts from Create, then goes to Verify and Release. If the Golden Journey is complete, all stages of GitLab are available for use. Our biggest opportunity is to improve Verify to Release adoption rate.\nNote: There are numerous potential variants to this adoption journey, but it’s important to keep this representation simple and consistent. Please check with David DeSanto first before making any changes to the adoption journey image.\nFlow One\nShipping only MVCs can result in a large set of loosely connected pieces that\ndon’t necessarily combine into a single, great user experience.\nAn obvious solution to this would be to plan out the future in detail,\ncreating a long-term detailed plan. However, this is unwanted as it can restrict\nyour flexibility and ability to respond to changing needs or feedback.\nFlow One offers an alternative. You draw out a workflow consisting of\nMVCs (that can be shipped individually). The workflow should only cover a\nspecific, narrow use-case, and nothing more.\nThis means you:\navoid creating an inflexible, long-term plan\ncan more easily construct a full feature/ capability, which is more easily marketed\ncan provide context to each individual change (“we need this as part of X”)\ncan continue to ship MVCs\nwork concurrently on several items, none of which are blocking\nFlow One should cover the first iteration of a particular workflow.\nAfter this, individual MVCs can be introduced to expand the use-cases\nor loosen the assumptions (e.g. from a feature that can only be used\nif you’re using feature branches, to one that works for other git strategies).\nData-driven work\nUsing data to learn from our users is important. Our users are spread across GitLab.com\nand self-managed instances, so we have to focus our efforts on learning and\nproviding benefit to both when we decide to collect more data, or build and use\nadditional analytics tools. If we do this, we can help make the rest of the\ncompany successful as well. This means that we should:\nBuild and use tools that work for both GitLab.com and self-managed.\nStart from a question, and build / collect what we need to answer that question. This avoids wasting time with data we don’t need.\nUse and improve existing tools we have inside of GitLab before leaning towards off-the-shelf products.\nOur customers, sales team and customer success teams all benefit greatly from similar insights into their usage as the product team does. Make things that help all of these people.\nNo artificial limits in Core\nPer\nGitLab Stewardship\n, we will not introduce\nartificial\nlimits in Core. Artificial means\narbitrarily setting a small number (such as: 1) as a limit on a given GitLab object category,\nthat would incur\nno additional\neffort or cost had we chosen a larger number. The additional\neffort includes product, design, and engineering effort to create the feature in the first place,\nand to maintain it over time.\nFor example, GitLab Core has the\nissue board feature\nin every project.\nIn GitLab EE, each project supports\nmultiple boards\n.\nThis\ndoes not\nmean that Core has an artificial limit of one board per project, because there is additional effort\nto manage multiple boards such as supporting the navigation interface, and all the associated engineering work.\nThis principle does not apply to our SaaS offering as limits are occasionally introduced to limit our hosting costs and protect other users from potential abuse. As an example we have\nshared runner\nminute quotas and implement\nrate limiting\n.\nAvoid enforced workflows but allow enterprise flexibility\nWe’re discussing enforced workflows\nin this issue\n.\nEnforced workflows should be avoided in GitLab. For example, there are three issue\nstates (\nOpen\n,\nIn Progress\n(as of 10.2), and\nClosed\n), and any issue should be\nallowed to transition from one state to any other state\nwithout workflow restrictions. (Roles and permissions is a separate concern.)\nEnforced workflows restrict GitLab to a smaller number of use cases, thus reducing the value of GitLab.\nEnforced workflows require overhead to maintain in the product. Each new feature\nmust account for any existing enforced workflows.\nWe should trust our users to use GitLab responsibly, giving them freedom, instead\nof imposing enforced workflows that we think made sense at the time of design and implementation.\nA comment on Hacker News\nperfectly details what can go wrong when enforcing workflows:\n“The down side for the true end-users, those who actually use the software day-to-day,\nis that most business processes are awful. If your experience is the hellish existence\nthat I see strolled about on threads where JIRA comes up …:\nYour admin(s) set it up once and hasn’t bothered to iterate on those workflows.\nThe business mapped their autonomy stripping processes onto JIRA intentionally.\nI’d guess that most of your work experience is similar. Process stifled nonsense.”\nBut that comment also specifies the advantage:\n“JIRA’s most powerful feature is that it affords for mapping businesses processes onto software.\nThis is incredibly compelling to enterprise customers. Software that enforces workflows, procedures\nand requirements can be an incredible lever and JIRA’s price point makes build vs buy decisions an absolute no-brainer.”\nWe should ensure that GitLab makes it easy to help with enterprise workflows:\nWhen starting a branch with an issue (number) we link it to the branch.\nWhen merging an MR you automatically close the issue(s) it fixes.\nIn GitLab CI you can define your deployment stage progression (staging, pre-production, production) including manual approval.\nWe run quality and security tools automatically and provide dashboards to check status instead of making it a step in the process.\nWe limit the impact of mistakes with incremental rollout and automatic rollback.\nWhen considering a customer need for enforcement or limitations:\nDeeply understand and document the underlying customer problem. It’s our responsibility to understand the need we are solving for before we even consider imposing controls.\nSolve for individual use cases first. Trying to solve a specific problem with a non-specific solution is risky and not\niterative\n. Instead, start with a single use case and build a specific, non-enforced solution in GitLab.\nConsider the smallest group of users first. Don’t reach for instance-wide controls, but instead iterate from the smallest segment possible (e.g. a sub-set of projects).\nProvide simple workarounds and overrides. Consider extreme scenarios like recovering from a SEV-1 incident; there should always be a simple, fast escape hatch.\nAs an example, customers requested instance-wide enforcement through required CI jobs. Doing this would have been a mistake. Instead:\nWe understood their problem more deeply, and realized we could build capabilities to perform these checks in existing primitives (like\nexternal rules\nin MR approvals).\nWe limited the scope of the problem, and avoided any limitations at the instance-level. Instead, we planned to keep the impact as small as possible by requiring customers to scope this feature to only projects with a particular\ncompliance framework\n.\nWe intentionally planned for workarounds. A developer should be able to override these limitations inside merge requests, such as with\ntwo-person approvals\n. They should also be able to create subgroups that aren’t subject to these controls.\nWhile workflow enforcement should be avoided in most cases, there are organizations that rely on enforced workflows for a variety of reasons. These organizations have problems adapting existing workflows as they move to GitLab and as a result, we should consider allowing some enforcement at the group level in order to balance team efficiency and organizational policy. Page 79 of [Accelerate](https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339) outlines \"teams that reported no approval process or used peer review achieved higher software delivery performance.\" As we implement features to allow organizations to enforce workflows, we should do so at the group level and default them off. GitLab should be a product teams use to accelerate product development, but flexible enough to solve for requirements of all sizes of organizations.\nPrefer small primitives\nSmall primitives are building blocks in GitLab. They are an abstraction\nnot\nat\nthe technical level, but truly at the product level. Small primitives can be combined,\nbuilt-upon further, and otherwise leveraged to create new functionality in GitLab.\nFor example, the label lists in\nissue boards\nuse the smaller primitive of\nlabels\n.\nThey are especially powerful because they usually take less effort\nand\nprovide\nhigher leverage than you would get from a more “complete” but standalone feature.\nThink of how simple Unix command line utilities can be chained together to do\nreally complicated things, much easier (and certainly more flexibly) than you\ncould have done with a dedicated tool.\nWhen iterating on GitLab, strongly consider using small primitives instead\nof creating new abstractions, especially when considering MVC features\nthat will provide the foundations for further improvements. To do this\nyou can start with easy to apply concepts that meet the needs of intermediate\nto advanced users; from here document the usage clearly and be sure to think about\ndiscoverability. The UX can very often be refactored or enhanced later when there’s\na demonstrated need for refinement, onboarding for less sophisticated users, or\nother new abstractions needed that were identified through real-world usage.\nComponent Principles\nIn GitLab the product, it is sometimes the case that optional software or infrastructure is required to enable new capabilities. Some examples include:\nInfrastructure in the form of Runners are required to enable use of GitLab CI/CD\nInfrastructure and software in the form of Elasticsearch is required to enable Advanced Search\nSoftware in the form of the Kubernetes Agent is required to enable GitOps pull-based workflows\nThe following are best practices we consider when building such components.\nStart with enabling Developers\nAs we learned with GitLab CI/CD, the ability for developers to quickly attach needed Runners to enable their own use of GitLab CI/CD allowed for rapid adoption of GitLab CI/CD within an organization. When considering the workflow to enable additional capabilities, start with enabling developers first. A guiding principle should be\nlow-friction\ndeveloper enablement, which will positively impact adoption.\nBuild for production use, not demo use\nAs we learned from the certificate-based Kubernetes Integration, building starting experiences that support demoing a getting-started process doesn’t necessarily translate into real usage. For example, the certificate-based integration lacked strong security primitives and the ability to manage the integration on an ongoing basis. As a result, we should build capabilities that target real-world production use first, even as part of MVCs.\nIntegrate other applications thoughtfully\nGitLab’s vision is to be the best single application for every part of the DevOps toolchain. However, some customers use tools other than our included features, and we respect those decisions. With this in mind, it’s sometimes valuable to integrate with 3rd-party services and products to help\nbridge the gaps\nin their toolchain. While a single application is the best approach, multiple applications that work well together is better than ones that don’t.\nWith this in mind, below are some product guidelines to consider:\nDon’t clone everything\nDon’t feel like we need to\nclone every feature\nof an integrated product. Ultimately, this approach costs us the most possible resources, while creating an experience that will always be sub-par compared to the native one offered by the other application. We should focus our efforts on places where we can deliver value by helping bridge the gap between the two applications.\nHere are some potential (completely theoretical) examples, highlighting the difference between cloning vs. bridging:\nIn an event log, surface only recent activity and link to a full log on the other system, instead of trying to display all records inside of GitLab.\nIn an issue/ticket, offer only the most used functionality, like commenting or status changes, instead of trying to replicate all possible actions.\nPrevent broken workflows for free\nBased on the quote above:\n“While a single application is the best approach, multiple applications that work well together is better than ones that don’t.”\nFeatures and UX that might break a customers workflow should be offered freely. In particular, we should offer features that help customers avoid productivity antipatterns like allowing multiple sources of truth (multiple wikis) or duplicating work (not showing work activity on an issue).\nCharge for adding value to an interaction\nBy having such an incredible breadth, GitLab has\nthe opportunity to add value to external features that they could never otherwise have\n, if not integrated with GitLab. For example, our excellent\nTo Dos\nfeature puts actionable work at the fingertips of developers, and it’s a feature somewhat unique to GitLab. Many other tools make it harder to identify work that needs immediate action, so by integrating those tools with this part of GitLab,\nwe can make them even more powerful than they’d be alone.\nConsider the right buyer for pricing\nWhile we typically think about who is\nusing the functionality\nas an indicator of our buyer, this may not be appropriate for your integration.\nWhen an integration is driven by an organizational requirement (such as having all teams in the company use Jira),\nBuyer Based Tiering\nlikely indicates that the integration is for\nmultiple team\n(Premium) or\nstrategic organizational\n(Ultimate) use.\nWhen an integration is\nextending GitLab capabilities\n, the buyer is more likely to be the end-user, similar to how we’d think about pricing other GitLab functionality.\nLow level of shame still applies here\nWhen we start to integrate with another product, it’s almost like opening a whole new Category of work. With this in mind, a friendly reminder that\nlow level of shame\napplies, just like it would anywhere else. The integration may not be very valuable\ntoday\n, but it’s just a starting place, and we should use our first iteration to validate what belongs in the next one.\nTrack the maturity of the integration\nLike any other category of work, we should track the maturity of the integration somewhere that’s visible. Consider adding your integration to the Ecosystem Integrations direction page, which contains a table that tracks our high-priority integrations and their maturity levels.\nRespect security and permissions\nExternal applications may have security and permissions concerns that we don’t have in our application. We should take careful consideration of these, since ignoring them could be potentially disastrous for our users. For example, if we ask a user for an administrative token with full access and then display content in our UI based on those privileges, we could potentially display sensitive data that shouldn’t leave that application.\nNavigation\nIntegrations should be as discoverable as any native GitLab feature, if they’re enabled. In cases where the two features are mutually exclusive, we should allow the user to hide our native functionality to prevent confusion. For example, having two project management tools is a (generally)\nbad\nidea. Collaborators may end up filing issues in the wrong tool, slowing down their velocity and worsening their overall experience. Reducing velocity is antithetical to the value GitLab provides.\nWhen features\naren’t\nmutually exclusive (there’s nothing wrong with using\nmultiple\nsecurity scanning services, for example), we should group navigation to those integrations near our own.\nUse empty states for feature discovery\nConsider adding an\nempty state\nthat highlights the availability of this integration. If someone is not using the GitLab feature\nand also not\nintegrating their tool of choice, that’s the worst possible experience. We should respect the choices of our users, and if they’ve decided to use a 3rd-party tool that we integrate with, we shouldn’t hide that option in a dark corner.\nThis is also a great opportunity to educate the user on what GitLab can offer relative to other products. It’s the best of both worlds: promoting our own features while helping them improve their current experience, regardless of choice.\nUse our own design language\nJust because we’re leveraging\nfunctionality\nfrom a 3rd-party service doesn’t mean we should allow that service’s UI to dictate what ours looks like. GitLab has its own\ndesign language\n, and by keeping it cohesive across the application, we create a significantly better experience for our users.\nBe transparent about the data source\nWhen data is populated from an external source, make it clear that it comes from elsewhere. This prevents confusion, reduces cognitive load, and ensures that users are well informed about the choices they’re making when interacting with the application.\nAvoid plugins and commercial marketplaces\nNote\n- We intend to provide a place where everyone can contribute, such as\ncode snippets\n,\nproject templates\nand CI components in the\nCI/CD Catalog\n. Marketplaces are traditionally transaction based, where users are purchasing solutions. GitLab CI/CD components on the other hand, will offer an in product experience for consuming components for YAML configuration from a library of\nGitLab maintained components\n.\nClosed source software vendors commonly depend on plugins and commercial marketplaces because:\nThese allow third parties the ability to add functionality without needing access to the underlying codebase.\nThird parties can charge for the plugins, which gives them an incentive to build them.\nBecause GitLab is an\nopen core product\n, third parties can add functionality directly to GitLab. Adding directly to the GitLab codebase (as opposed to building a plugin)\nmay\nmean more work for them and will limit the ways in which they can charge for that functionality.\nHowever, for\nusers of GitLab\n, this has significant advantages:\nThey are more likely to use this functionality, because it’s distributed to all users by default.\nThe functionality always works out of the box,\nrequiring no additional software\n.\nUsers don’t have to search for what plugins are available, or test multiple options to see which one works the best.\nInstallations can’t have varying combinations of plugins, making it easier to use and support the product.\nAdministrators never have to avoid an upgrade for fear that it might break an important plugin since all code is tested together.\nAnd for\ndevelopers of GitLab\nincluding the third parties, this has significant advantages as well:\nTheir work isn’t limited in functionality, because they’re changing the code of the product itself.\nTheir code will be tested along with the rest of the product as things change refactoring is easier, reducing the likelihood that it suffers from\nsoftware atrophy\nbecause something is hard to change.\nCommunity effort is not wasted on developing multiple plugins that all ultimately do the same thing and compete with each other for usage.\nDevelopers don’t have to sacrifice\nvelocity in favor of predictability\n, since they don’t have to worry about breaking the plugin API.\nOverall, we believe that this approach creates the best possible experience for both the users of and the contributors to GitLab, and to that end we encourage people to\ncontribute functionality to GitLab directly\n.\nIf adding code directly to GitLab isn’t an option, we encourage third-parties to integrate through our\nAPIs\n.\nNote: GitLab does support\nplugins that respond to system hooks\n, which tie directly to application events and are primarily used for administrative purposes such as auditing, logging, and other administrative tasks.\nProduct and feature naming guidelines\nGive products and features descriptive, not distinctive, names\nGitLab is a DevOps Platform, not a collection of DevOps point solutions; the naming of GitLab products and features should reflect this. Adopting descriptive names brings other advantages:\nIt’s\nefficient\n. Descriptive names are generally not eligible for trademark registration, avoiding the time, effort, and expense of clearing, filing, and maintaining trademark registrations.\nIt’s\ninclusive\n. Descriptive names are most accessible to a global audience because they can be directly translated into other languages, reducing the risk of loss of meaning inherent in translating abstract, metaphorical, or colloquial names.\nAs an\nexample\n,\nCI/CD Components Library\nis a descriptive name while\nCI/CD ATOM\nis a distinctive name.\nExceptions to this principle are considered in limited circumstances - if a product or feature is a differentiator in the market, adopting a descriptive name risks it getting lost in the\nsea of same\n. Here, a distinctive name may be justified. To discuss an exception, reach out to\n#marketing\nin Slack.\nUse prepositions when referring to third-party products and services in names\nWhen naming a GitLab extension, plugin, app, or integration for a third-party product or service (a “tool”), either include the third-party service name with a preposition like\nfor\n, or don’t include it at all. A preposition is important as it indicates that the third party isn’t officially affiliated with the tool. For example, our\nintegration with Jira Cloud\nis called\nGitLab.com for Jira Cloud\n.\nProvided we use the tool’s full name in marketing materials and technical documentation, as exceptions to this general principle we can: (1) refer to the tool solely by the third-party service name in places where we list GitLab’s tools in product; and (2) refer to the tool solely as “GitLab” in the third-party product’s app directory. For example, we refer to the GitLab for Slack app as “Slack” in our lists of GitLab integrations, and as “GitLab” in the\nSlack App Directory\n.\nFor more guidance on the feature naming process, see\nnaming features\n.\nNext Generation\nWhile our\nbig, hairy, audacious goal\nspans all development processes, personas, and use-cases, there are primary targets in each one of these venues.\nWhen considering prioritization we should first aim to provide complete\nmaturity\nfor developers building cloud native applications in a modern way prior to moving to other development methodologies, personas, and application types.\nModern first\nWhen developing features to compete with existing competitors, make sure to\nsolve problems for modern development teams first, and\nthen\nsee what’s missing\nfor legacy teams. e.g. For project management, make great project management\ncapabilities for teams doing conversational development, lean, or even agile\ndevelopment before doing Scaled Agile Framework (SAFe) or waterfall.\nIt’s important that modern first does not mean non-modern never. It means that\nwe should first learn how teams are using the feature in a modern way, and then\nsee what’s missing. The modern way provides the path forward, and then we can add\ncustomizability or the path to modern for teams who are not quite there yet.\nDeveloper first\nOur strategy includes going after a lot of new personas, going from developers to\noperations, security, product managers, designers, etc. But when developing\nfeatures in these new areas, it’s important to remember to start with the\ndeveloper. If we can make security great for developers and\nthen\ngreat for\nsecurity professionals, we’ll be much more successful.\nCloud-native first\nDevelopment teams deploy to tons of different platforms, from bare metal to\ncloud VMs to cloud-native Kubernetes clusters. We build features for\ncloud-native first, and\nthen\nsupport the rest. This allows us to focus on\nwhere development is going, and deliver solutions that every company aspires to\nuse eventually, even if they’re not ready to today.\nPrioritize current adopters\nBy focusing on next-generation development flows, personas, and use cases - we build features and experiences where our initial users are in the relatively small population of early adopters. While we might build experiences to support them today, we presume there will always be a much larger population of future users of these experiences. Therefore, we optimize GitLab to support the larger number of current and future adopters of next-generation principles - those who are beginning to operate in the workflow (modern), team setup (developer first), or application architectures (cloud native) we support. We focus our investment in the most modern workflows that will best support those current adopters. This will come at the cost of sustained investment in initial workflows for early adopters. When doing so we will ensure we clearly communicate with our users what the preferred path is.\nFor example - We first provided the ability to attach Kubernetes Clusters via the Certificate method. After realizing this wasn’t optimal for production use cases we added the GitLab Agent for Kubernetes method of cluster attachment. As soon as we were certain that the certificate method was no longer the preferred method we communicated via our docs and in the product that the Agent was the preferred path for current adopters. This should not mean an immediate\ndeprecation\n, but a clear signal that the legacy method will become deprecated once the alternative approach is able to substitute it.\nCustomer Support on all features\nWe provide customer support to paying customers on all features that are in the tier of their paid license as well as any lower tiers.\nThis means a feature in Core, should get customer support in all paid tiers.\nFor example, when there is a feature that is available in the lowest paid tier, but only has customer support in higher tiers,\nthe feature should be removed from that lowest paid tier.\nIn accordance with our\nstewardship policy\nwe can never remove features from Core into paid tiers,\nbut we can build additional features around it which are available to paying customers only.\nLast modified July 4, 2025:\nMove division specific includes to folder (\na74a8182\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "ffef4bb838975732.html"
}