{
  "url": "https://handbook.gitlab.com/handbook/engineering/workflow",
  "title": "Engineering Workflow | The GitLab Handbook",
  "headings": [
    "Engineering Workflow",
    "GitLab Flow",
    "Reverting a merge request",
    "Brokenmaster",
    "Security Issues",
    "Regressions",
    "Basics",
    "Updating Workflow Labels Throughout Development",
    "Working in Teams",
    "Convention over Configuration",
    "Choosing Something to Work On",
    "Triaging and Reviewing Code from the rest of the Community",
    "Working with GitLab.com",
    "Scheduling Issues",
    "Product Development Timeline",
    "Kickoff",
    "Milestone Cleanup",
    "Use Group Labels and Group Milestones",
    "Technical debt",
    "Deferred UX",
    "UI polish",
    "Monitor Merge Request Trends",
    "Security is everyone’s responsibility",
    "Rapid Engineering Response",
    "Performance Refinement",
    "Infradev"
  ],
  "text": "Engineering Workflow | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nTim Zallmann\nJerome Ng\nSam Goldstein\nDarva Satcher\nMichelle Gill\nOn This Page\nGitLab Flow\nReverting a merge request\nBroken\nmaster\nWhat is a broken\nmaster\n?\nBroken\nmaster\nservice level objectives\nBroken\nmaster\nescalation\nEscalation on weekends and holidays\nTriage broken master\nDefinitions\nAttribution\nTriage DRI Responsibilities\nPro-tips for Triage DRI\nResolution of broken master\nResponsibilities of the resolution DRI\nResponsibilities of authors and maintainers\nMerging during broken master\nCriteria for merging during broken master\nHow to request a merge during a broken\nmaster\nInstructions for the maintainer\nBroken\nmaster\nmirrors\nBroken JiHu validation pipelines\nSecurity Issues\nRegressions\nUse of the ~regression label on MRs\nBasics\nUpdating Workflow Labels Throughout Development\nWorking in Teams\nConvention over Configuration\nChoosing Something to Work On\nTriaging and Reviewing Code from the rest of the Community\nWorking with GitLab.com\nPerformance Data\nError Reporting\nScheduling Issues\nRequesting Something to be Scheduled\nProduct Development Timeline\nKickoff\nMilestone Cleanup\nMilestone cleanup schedule\nUse Group Labels and Group Milestones\nTechnical debt\nDeferred UX\nUI polish\nExamples of UI polish\nWhat is not UI polish\nMonitor Merge Request Trends\nSecurity is everyone’s responsibility\nRapid Engineering Response\nScope\nProcess\nPerformance Refinement\nScope\nProcess\nInfradev\nScope\nRoles and Responsibilities\nInfrastructure\nDevelopment\nProduct Management\nTriage Process\nA Guide to Creating Effective Infradev Issues\nThe Handbook\nEngineering\nEngineering Workflow\nEngineering Workflow\nThis document explains the workflow for anyone working with issues in GitLab Inc.\nThis document explains the workflow for anyone working with issues in GitLab Inc.\nFor the workflow that applies to the wider community see the\ncontributing guide\n.\nGitLab Flow\nProducts at GitLab are built using the\nGitLab Flow\n.\nWe have\nspecific rules around code review\n.\nReverting a merge request\nIn line with our values of\nshort toes\n,\nmaking two-way-door decisions\nand\nbias for action\n, anyone can\npropose to revert a merge request. When deciding whether an MR should be reverted,\nthe following should be true:\nSomething broke and there is no acceptable work around. Examples of this include:\nA feature broke and is categorized as\n~severity::1\nor\n~severity::2\n.\nSee severity labels\nMaster broken\nThere are failing migrations\nThere are no dependencies on the change. For example, a database\nmigration has not been run on production.\nReverting merge requests that add non-functional changes and don’t remove any existing capabilities\nshould be avoided in order to prevent designing by committee.\nThe intent of a revert is never to place blame on the original author. Additionally, it is helpful\nto inform the original author so they can participate as a DRI on any necessary follow up actions.\nThe\npipeline::expedited\nlabel, and\nmaster:broken\nor\nmaster:foss-broken\nlabel must be set on merge requests that fix\nmaster\nto skip some non-essential jobs in order to speed up the MR pipelines.\nBroken\nmaster\nIf you notice that pipelines for the\nmaster\nbranch of\nGitLab\nor\nGitLab FOSS\nare failing, returning the build to a passing state takes priority over everything else development related, since everything we do while tests are broken may:\nbreak existing functionality\nintroduce new bugs and security issues\nimpede productivity for all of engineering and our release processes\nWhat is a broken\nmaster\n?\nA broken master is an event where a pipeline in\nmaster\nis failing.\nThe cost to fix test failures increases exponentially as time passes due to\nmerged results pipelines\nused. Auto-deploys, as well as monthly releases and security releases, depend on\ngitlab-org/gitlab\nmaster being green for tagging and\nmerging of backports\n.\nOur aim should be to keep\nmaster\nfree from failures, not to fix\nmaster\nonly after it breaks.\nAny question or suggestion is welcome in the\n#g_development_analytics\nchannel who owns the broken\nmaster\nautomation proceess.\nBroken\nmaster\nservice level objectives\nThere are two phases for fixing a broken\nmaster\nincident which have a target SLO to clarify the urgency. The resolution phase is dependent on the completion of the triage phase.\nPhase\nService level objective\nDRI\nTriage\n4 hours from the 2nd occurrence of a broken\nmaster\nincident creation until assignment\ngroup labeled on the incident\nResolution\n4 hours from assignment to DRI until incident is resolved\nMerge request author or team of merge request author or dev on-call engineer\nNote: Recurring incidents are negatively impacting master pipeline stability and development velocity. Any untriaged, recurring incident will be automatically escalated to\n#dev-escalation\nfollowing this timeline:\ntimeline\ntitle Pipeline incident escalation\nsection Pipeline failure incident #1\nnot recurring in 24 hours and no human activity : Auto closed\nany human update on incident #1\n: labels incident #1 with escalation skipped\n: does not trigger any group ping or escalation\nsame job failures recurring in incident #2\n: closes incident #2 as duplicate of incident #1\n: labels incident #1 with escalation needed\n: pings attributed group channel after 10 minutes of inactivity\n: 2nd ping to group channel after 30 minutes of inactivity\n: pings stage channel in after 3 hours 40 minutes of inactivity\n: escalates to dev-escalation after 4 hours of inactivity\n: labels incident #1 is escalated\nIf an incident becomes a blocker for MRs and deployments before being auto-escalated, the team member being impacted should refer to the\nbroken\nmaster\nescalation\nsteps to request help from the current\nengineer on-call\nas early as needed.\nAdditional details about the phases are listed below.\nBroken\nmaster\nescalation\nRecurring broken\nmaster\nincidents are automatically escalated to\n#dev-escalation\nunless it is triaged within 4 hours.\nIf a broken\nmaster\nis blocking your team before auto-escalation (such as creating a security release) then you should:\nSee if there is a non-resolved\nbroken\nmaster\nincident\nwith a DRI assigned and check discussions there.\nCheck discussions on the failure notification in the triage DRI’s group Slack channel to see if anyone is investigating the incident you are looking at. See\nTriage broken master\nfor information on who the triage DRI is.\nIf there is not a clear DRI or action to resolve, use the\ndev escalation\nprocess to solicit help in the broken\nmaster\nincident.\nEscalation on weekends and holidays\nMaster broken incidents must be manually escalated to\n#dev-escalation\non\nweekends and holidays\nif necessary. Without a manual escalation, the service level objective can extend to the next working day; that is, triage DRI is expected to triage the incident on the next working day. Regardless of when the label was applied, we always consider an incident to be in an\nescalated\nstate as long as it has the ~“escalation::escalated” label, until the incident is resolved.\nTriage broken master\nDefinitions\nFlaky test: A test that fails, then succeeds when the CI job running the test is retried.\nBroken master:\nA test that fails even when the CI job running the test is retried.\nA failing test that can be reproduced locally on the\nmaster\nbranch.\nAttribution\nIf a failed test can be traced to a group through its\nfeature_category\nmetadata, the broken\nmaster\nincident associated with that test will be automatically labeled with this group as the triage DRI through\nthis line of code\n. In addition, Slack notifications will be posted to the group’s Slack channel to notify them about ongoing incidents. The triage DRI is responsible for monitoring, identifying, and communicating the incident.\nA notification will be sent to the attributed group’s Slack channel and\n#master-broken\n.\nTriage DRI Responsibilities\nMonitor\nPipeline failures are sent to the triage DRI’s group channel, if one is identified, and will be reviewed by its group members. The failures will also be sent to\n#master-broken\nfor extra communication. If an incident is announced in a DRI group’s Slack channel, the channel member should acknowledge it and assume the triage DRI responsibilities.\nIf the incident is a duplicate of an existing incident, use the following quick actions to close the duplicate incident:\n/assign me\n/duplicate\n#<original_issue_id>\n/copy_metadata\n#<original_issue_id>\nIf the incident is not a duplicate, and needs some investigation:\nAssign the incident to yourself:\n/assign me\nChange the incident status to\nAcknowledged\n(in the right-side menu).\nIn Slack, the\n:ack:\nemoji reaction should be applied by the triage DRI to signal the linked incident status has been changed to\nAcknowledged\nand the incident is actively being triaged.\nIdentification\nReview non-resolved\nbroken\nmaster\nincidents\nfor the same failure. If the broken\nmaster\nis related to a test failure,\nsearch the spec file in the issue search\nto see if there’s a known\nfailure::flaky-test\nissue.\nIf this incident is\ndue to non-flaky reasons\n, communicate in\n#development\n,\n#backend\n, and\n#frontend\nusing the Slack Workflow.\nAnnounce that\nmaster\nis fixed by enter\n/broadcast master fixed\nin the chat bar of the\n#master-broken\nchannel to invoke this workflow, and then click\nContinue the broadcast\n.\nCreate a revert MR directly\nto save some time in case we need to revert down the line.\nIf you are reverting an MR that performs a database migration, you need to follow the\nDeployment blockers process\nto prevent the migration from proceeding to deploy and running on staging and production.\nIf the migration is executed in any environments, communicate to the release managers in\n#releases\nchannel and discuss whether it’s appropriate to create another migration to roll back the first migration or turn the migration into a no-op by following\nDisabling a data migration steps\n.\nIf you identified that\nmaster\nfails\nfor a flaky reason\n, and it cannot be reliably reproduced (i.e. running the failing spec locally or retrying the failing job):\nQuarantine\nthe failing test to restore pipeline stability within 30 minutes if the flakiness is continuously causing master pipeline incidents.\nAlternatively, if the failure does not seem disruptive, and you have a fix that you are confident with, submit the fix MR with the ~“master:broken” label to ensure your pipeline is expedited.\nIf a flaky test issue already exists, add a comment in it with a link to the failed broken master incident and/or failed job. We have automation in place to create test failure issues automatically. The issue is named after the spec path, which can be a search keyword.\nIf a flaky test issue doesn’t exist, create an issue from the\nNew issue\nbutton in top-right of the failing job page (that will automatically add a link to the job in the issue), and apply the\nBroken Master - Flaky\ndescription template.\nAdd the appropriate labels to the main incident:\n# Add those labels\n/label ~\n\"master-broken::flaky-test\"\n/label ~\n\"failure::flaky-test\"\n# Pick one of those labels\n/label ~\n\"flaky-test::dataset-specific\"\n/label ~\n\"flaky-test::datetime-sensitive\"\n/label ~\n\"flaky-test::state leak\"\n/label ~\n\"flaky-test::random input\"\n/label ~\n\"flaky-test::transient bug\"\n/label ~\n\"flaky-test::unreliable dom selector\"\n/label ~\n\"flaky-test::unstable infrastructure\"\n/label ~\n\"flaky-test::too-many-sql-queries\"\nClose the incident\nAdd the stacktrace of the error to the incident (if it is not already posted by gitlab-bot), as well as Capybara screenshots if available in the job artifacts.\nTo find the screenshot: download the job artifact, and copy the screenshot in\nartifacts/tmp/capybara\nto the incident if one is available.\nIdentify the merge request that introduced the failures. There are a few possible approaches to try:\nCheck the commit in the failed job, and find the associated MR, if any (it’s not as simple most of the times though).\nLook at the project activity\n, and search for keywords in the recent merged events.\nLook at the recent commits on master\nand search for keywords you might see in the failing job/specs (e.g. if you see a\ngeo\nspec file is failing, specifically the\nshard\nspec, search for those keywords in the commit history).\nYou can\nfilter with the\nMerge branch\ntext\nto only see merge commits.\nLook at the spec file history or blame views, by clicking respectively the\nHistory\nor\nBlame\nbutton at the top of a file in the file explorer, e.g. at\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/backup.rb\n.\nIf you identified a merge request, assign the incident to its author if they are available at the moment. If they are not available, assign to the maintainer that approved/merged the MR. If none are available, mention the team Engineering Manager and seek assistance in the\n#development\nSlack channel.\nYou can find the team somebody is in and who’s the manager for that team by searching in\nhttps://handbook.gitlab.com/handbook/product/categories/\n.\nIf no merge request was identified, ask for assistance in the\n#development\nSlack channel.\nPlease set the appropriate\n~master-broken:*\nlabel from the list below:\n/label ~\n\"master-broken::caching\"\n/label ~\n\"master-broken::ci-config\"\n/label ~\n\"master-broken::dependency-upgrade\"\n/label ~\n\"master-broken::external-dependency-unavailable\"\n/label ~\n\"master-broken::flaky-test\"\n/label ~\n\"master-broken::fork-repo-test-gap\"\n/label ~\n\"master-broken::pipeline-skipped-before-merge\"\n/label ~\n\"master-broken::test-selection-gap\"\n/label ~\n\"master-broken::need-merge-train\"\n/label ~\n\"master-broken::gitaly\"\n/label ~\n\"master-broken::state leak\"\n/label ~\n\"master-broken::infrastructure\"\n/label ~\n\"master-broken::infrastructure::failed-to-pull-image\"\n/label ~\n\"master-broken::infrastructure::frunner-disk-full\"\n/label ~\n\"master-broken::infrastructure::gitlab-com-overloaded\"\n/label ~\n\"master-broken::job-timeout\"\n/label ~\n\"master-broken::multi-version-db-upgrade\"\n/label ~\n\"master-broken::missing-test-coverage\"\n/label ~\n\"master-broken::undetermined\"\n(Optional) Pre-resolution\nIf the triage DRI believes that there’s an easy resolution by either:\nReverting a particular merge request.\nMaking a quick fix (for example, one line or a few similar simple changes in a few lines).\nThe triage DRI can create a merge request, assign to any available maintainer, and ping the resolution DRI with a\n@username FYI\nmessage.\nAdditionally, a message can be posted in\n#backend_maintainers\nor\n#frontend_maintainers\nto get a maintainer take a look at the fix ASAP.\nIf the failures occur only in\ntest-on-gdk\njobs, it’s possible to stop those jobs from being added to new pipelines while the cause is being fixed. See the\nrunbook\nfor details.\nPro-tips for Triage DRI\nFor an initial assessment of what might have contributed to the failure, we can try the experimental AI-assisted\nroot cause analysis\nfeature following\nthis documentation\n.\nTo confirm flakiness, you can use the\n@gitlab-bot retry_job <job_id>\nor the\n@gitlab-bot retry_pipeline <pipeline_id>\ncommand to retry the failed job(s), even if you are not a project maintainer.\nNote\n, The\nretry_job\ncommand can fail for the following reasons:\nRetrying the same job twice with the\nretry_job\ncommand will result in a failure message because each failed job can only be retried once.\nIf there is no response to either of the\nretry\ncommands, you are likely invoking them in non-supported projects. If you’d like to request for the commands to be added to your project, please\nmake an issue\nand inform\n#g_development_anallytics\n. You are encouraged to self-serve the MR following\nthis example\nand submit it for review for maximum efficiency.\nResolution of broken master\nThe merge request author of the change that broke\nmaster\nis the resolution DRI.\nIn the event the merge request author is not available, the team of the merge request author will assume the resolution DRI responsibilities.\nIf a DRI has not acknowledged or signaled working on a fix, any developer can take assume the resolution DRI responsibilities by assigning themselves to the incident.\nResponsibilities of the resolution DRI\nPrioritize resolving recurring broken\nmaster\nincidents over new bug/feature work. Resolution options include:\nDefault\n: Revert the merge request which caused the broken\nmaster\n. If a revert is performed,\ncreate an issue to reinstate the merge request and assign it to the author\nof the reverted merge request.\nReverts can go straight to maintainer review and require 1 maintainer approval.\nThe maintainer can request additional review/approvals if the revert is not trivial.\nThe\npipeline::expedited\nlabel, and\nmaster:broken\nor\nmaster:foss-broken\nlabel must be set on merge requests that fix\nmaster\nto skip some non-essential jobs in order to speed up the MR pipelines.\nQuarantine\nthe failing test if you can confirm that it is flaky (e.g. it wasn’t touched recently and passed after retrying the failed job).\nAdd the\nquarantined test\nlabel to the\nfailure::flaky-test\nissue you previously created during the identification phase.\nCreate a new merge request to fix the failure if revert is not possible or would introduce additional risk. This should be treated as a\npriority::1\nseverity::1\nissue.\nTo ensure efficient review of the fix, the merge request should only contain the minimum change needed to fix the failure. Additional refactor or improvement to the code should be done as a follow-up.\nThe resolution DRI must address all failures in the pipeline. Be mindful that the initial opened issue for the incident will only announce the jobs that failed so far. But after you fix those jobs, other subsequent jobs could fail on the same pipeline that you’re triaging. The triage DRI is responsible for this whole pipeline, and not only for the initial failed jobs.\nApply the\nPick into auto-deploy\nlabel (along with the needed\nseverity::1\nand\npriority::1\n) to make sure deployments are unblocked.\nIf the broken\nmaster\nincident affects any stable branches (e.g.\nhttps://gitlab.com/gitlab-org/gitlab/-/merge_requests/25274\n) or is caused by a flaky failure,\nopen new merge requests\ndirectly against the active stable branches\nand ping the current release manager in the merge requests to avoid\ndelays in releases / security releases.\nSee\nHow to fix a broken stable branch guide\nfor more details.\nCommunicate in\n#master-broken\nwhen the fix was merged\nOnce the incident is resolved, select the\nBroadcast Master Fixed\nworkflow in the\n#master-broken\nchannel, and click\nContinue the broadcast\nto communicate it.\nWhen\nmaster\nbuild was failing and the underlying problem was quarantined /\nreverted / temporary workaround created but the root cause still needs to be\ndiscovered, the investigation should continue directly in the incident.\nCreate an\nissue\nfor the\nDevelopment Analytics group\ndescribing how the broken\nmaster\nincident could have been prevented in the Merge Request pipeline.\nWhen resolution steps are completed and all of the required fixes are merged, close the incident.\nResponsibilities of authors and maintainers\nOnce the resolution DRI announces that\nmaster\nis fixed:\nMaintainers should start a new merged results pipeline (for canonical MRs)\nand enable “Auto-merge”.\nThere’s no need to rebase once\nmaster\nhas been fixed since we use\nmerged results pipelines\n.\n(For forks only) Authors should rebase their open merge requests (since\nmerged results pipelines\nisn’t supported in these cases).\nMerging during broken master\nMerge requests\ncan not be merged\nto\nmaster\nuntil the incident status is changed to\nResolved\n.\nThis is because we need to try hard to avoid introducing\nnew\nfailures,\nsince it’s easy to lose confidence if it stays red for a long time.\nIn the rare case where a merge request is\nurgent\nand must be merged\nimmediately\n, team members can follow the process below to have a merge\nrequest merged during a broken\nmaster\n.\nCriteria for merging during broken master\nMerging while\nmaster\nis broken can only be done for:\nMerge requests that need to be deployed to GitLab.com to alleviate an ongoing production incident.\nMerge requests that fix broken\nmaster\nissues (we can have multiple broken\nmaster\nissues ongoing).\nHow to request a merge during a broken\nmaster\nFirst, ensure the latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to\ngitlab-org/gitlab\nusing\nmerged results pipelines\n).\nNext, make a request on Slack:\nPost to either the\n#frontend_maintainers\nor\n#backend_maintainers\nSlack\nchannels (whichever one is more relevant).\nIn your post outline\nwhy\nthe merge request is\nurgent\n.\nMake it clear that this would be a merge during a broken\nmaster\n, optionally add a link to this\npage in your request.\nInstructions for the maintainer\nA maintainer who sees a request to merge during a broken\nmaster\nmust follow this process.\nNote, if any part of the process below disqualifies a merge request from being merged\nduring a broken\nmaster\nthen the maintainer must inform the requestor as to\nwhy\nin the\nmerge request (and optionally in the Slack thread of the request).\nFirst, assess the request:\nAdd the\n:eyes:\nemoji to the Slack post so other maintainers know it is being assessed.\nWe do not want multiple maintainers to work on fulfilling the request.\nAssess whether the merge request\nis urgent or not\n. If in doubt, ask the requestor for more\ndetails in the merge request about why it is urgent.\nNext, ensure that all the following conditions are met:\nThe latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to\ngitlab-org/gitlab\nusing\nmerged results pipelines\n).\nAll of the latest pipeline failures also happen on\nmaster\n.\nThere is a corresponding non-resolved\nbroken\nmaster\nincidents\n.\nSee the “Triage DRI Responsibilities” steps above for more details.\nNext, add a comment to the merge request mentioning that the merge request will be merged\nduring a broken\nmaster\n, and link to the broken\nmaster\nincident. For example:\nMerge request will be merged while\n`master`\nis broken.\nFailure in\n<\nJOB_URL\n>\nhappens in\n`master`\nand is being worked on in\n<\nINCIDENT_URL\n>\n.\nNext, merge the merge request:\nIf the “Merge” button is enabled (this is unlikely), then click it.\nOtherwise, you must:\nUnset the\n“Pipelines must succeed” setting\nfor the\ngitlab-org/gitlab\nproject\n.\nClick the “Merge” button.\nIf the merge train is enabled, a warning will be displayed stating the code changes won’t be validated by the merge train. Considering the criticality of the merge request it is acceptable to dismiss the warning.\nSet the “Pipelines must succeed” setting to be on again.\nBroken\nmaster\nmirrors\n#master-broken-mirrors\nwas created to remove duplicative notifications from the\n#master-broken\nchannel which provides a space for\nRelease Managers\nand the\nDeveloper Experience teams\nto monitor failures for the following projects:\nhttps://gitlab.com/gitlab-org/security/gitlab\nhttps://dev.gitlab.org/gitlab/gitlab-ee\nThe\n#master-broken-mirrors\nchannel is to be used to identify unique failures for those projects and flaky failures are not expected to be retried/reacted to in the same way as\n#master-broken\n.\nBroken JiHu validation pipelines\nWe run JiHu validation pipelines in some of the merge requests, and it can be\nbroken at times. When this happens, check\nWhat to do when the validation pipeline failed\nfor more details.\nSecurity Issues\nSecurity issues are managed and prioritized by the security team. If you are assigned to work on a security issue in a milestone,\nyou need to follow the\nSecurity Release process\n.\nIf you find a security issue in GitLab, create a\nconfidential issue\nmentioning the relevant security and engineering managers, and post about it in\n#security\n.\nIf you accidentally push security commits to\ngitlab-org/gitlab\n, we recommend that you:\nDelete the relevant branch ASAP\nInform a release manager in\n#releases\n. It may be possible to execute a garbage collection (via the Housekeeping task in the repository settings) to remove the commits.\nFor more information on how the entire process works for security releases, see the\ndocumentation on security releases\n.\nRegressions\nA\n~regression\nimplies that a previously\nverified working functionality\nno longer works.\nRegressions are a subset of bugs. The\n~regression\nlabel is used to imply that the defect caused the functionality to regress.\nThe label tells us that something worked before and it needs extra attention from Engineering and Product Managers to schedule/reschedule.\nThe regression label does not apply to bugs for new features for which functionality was\nnever verified as working\n.\nThese, by definition, are not regressions.\nA regression should always have the\n~regression:xx.x\nlabel on it to designate when it was introduced. If it’s unclear when it was introduced, the latest released version should be added.\nRegressions should be considered high priority issues that should be solved as soon as possible, especially if they have severe impact on users. When identified in time, for example in a SaaS deployment, fixing them within the same milestone avoids their being included with that release.\nUse of the ~regression label on MRs\nFor better efficiency, it’s common for a regression to be fixed in an MR without an issue being created, either through reversion of the original MR or a code change. Regardless of whether there is an issue or not, the MR should also have the\n~regression\nand\n~regression:xx.x\nlabels. This allows for trends to be accurately measured.\nBasics\nStart working on an issue you’re assigned to. If you’re not assigned to any issue, find the issue with the highest priority and relevant label you can work on, and assign it to yourself.\nYou can use this query, which sorts by priority for the started milestones\n, and filter by the label for your team.\nIf you need to schedule something or prioritize it, apply the appropriate labels (see\nScheduling issues\n).\nIf you are working on an issue that touches on areas outside of your expertise, be sure to mention someone in the other group(s) as soon as you start working on it. This allows others to give you early feedback, which should save you time in the long run.\nIf you are working on an issue that requires access to specific features, systems, or groups, open an\naccess request\nto obtain access on staging and production for testing your changes after they are merged.\nWhen you start working on an issue:\nAdd the\nworkflow::in dev\nlabel to the issue.\nCreate a merge request (MR) by clicking on the\nCreate merge request\nbutton in the issue. This creates a MR with the labels, milestone and title of the issue. It also relates the just created MR to the issue.\nAssign the MR to yourself.\nWork on the MR until it is ready, it meets GitLab’s\ndefinition of done\n, and the pipeline succeeds.\nEdit the description and click on the\nRemove the Draft: prefix from the title\nbutton.\nAssign it to the suggested reviewer(s) from\nReviewer Roulette\n. If there are reviewers for multiple categories, for example: frontend, backend and database, assign all of them. Alternatively, assign someone who specifically needs to review. When assigning, also @mention them in the comments, requesting a review.\n(Optionally) Unassign yourself from the MR. Some may find leaving the MR assigned to themselves easier to track the MRs they are responsible for by using the built in MR button/notification icon in the GitLab navigation bar.\nChange the workflow label of the issue to\nworkflow::in review\n. If multiple people are working on the issue or multiple workflow labels might apply, consider breaking the issue up. Otherwise, default to the workflow label farthest away from completion.\nPotentially, a reviewer offers feedback and assigns back to the author.\nThe author addresses the feedback and this goes back and forth until all reviewers approve the MR.\nAfter approving, the reviewer in each category unassigns themselves and assigns the suggested maintainer in their category.\nMaintainer reviews take place with any back and forth as necessary and attempts to resolve any open threads.\nThe last maintainer to approve the MR, follows the\nMerging a merge request\nguidelines.\n(Optionally) Change the workflow label of the issue to\nworkflow::verification\n, to indicate all the development work for the issue has been done and it is waiting to be deployed and verified. We will use this label in cases where the work was requested to be verified by product OR we determined we need to perform this verification in production.\nWhen the change has been verified, change the workflow label to\nworkflow::complete\nand close the issue.\nYou are responsible for the issues assigned to you. This means it has to ship with the milestone it’s associated with. If you are not able to do this, you have to communicate it early to your manager and other stakeholders (e.g. the product manager, other engineers working on dependent issues). In teams, the team is responsible for this (see\nWorking in Teams\n). If you are uncertain, err on the side of overcommunication. It’s always better to communicate doubts than to wait.\nYou (and your team, if applicable) are responsible for:\nEnsuring that your changes\napply cleanly to GitLab Enterprise Edition\n.\nThe testing of a new feature or fix, especially right after it has been merged and packaged.\nCreating any\nrelevant feature or API documentation\nShipping secure code, (see\nSecurity is everyone’s responsibility\n).\nOnce a release candidate has been deployed to the staging environment, please verify that your changes work as intended. We have seen issues where bugs did not appear in development but showed in production (e.g. due to CE-EE merge issues).\nBe sure to read general guidelines about\nissues\nand\nmerge requests\n.\nUpdating Workflow Labels Throughout Development\nTeam members use labels to track issues throughout development. This gives visibility to other developers, product managers, and designers, so that they can adjust their plans during a monthly iteration. An issue should follow these stages:\nworkflow::in dev\n: A developer indicates they are developing an issue by applying the\nin dev\nlabel.\nworkflow::in review\n: A developer indicates the issue is in code review and UX review by replacing the\nin dev\nlabel with the\nin review\nlabel.\nworkflow::verification\n: A developer indicates that all the development work for the issue has been done and is waiting to be deployed, then verified.\nworkflow::complete\n: A developer indicates the issue has been verified and everything is working by adding the\nworkflow::complete\nlabel and closing the issue.\nWorkflow labels are described in our\nDevelopment Documentation\nand\nProduct Development Flow\n.\nWorking in Teams\nFor larger issues or issues that contain many different moving parts, you’ll be likely working in a team. This team will typically consist of a\nbackend engineer\n, a\nfrontend engineer\n, a\nProduct Designer\nand a\nproduct manager\n.\nTeams have a shared responsibility to ship the issue in the planned release.\nIf the team suspects that they might not be able to ship something in time, the team should escalate / inform others as soon as possible. A good start is informing your manager.\nIt’s generally preferable to ship a smaller iteration of an issue, than ship something a release later.\nConsider starting a Slack channel for a new team, but remember to write all relevant information in the related issue(s). You don’t want to have to read up on two threads, rather than only one, and Slack channels are not open to the greater GitLab community.\nIf an issue entails frontend and backend work, consider separating the frontend and backend code into separate MRs and merge them independently under\nfeature flags\n. This will ensure frontend/backend engineers can work and deliver independently.\nIt’s important to note that even though the code is merged behind a feature flag, it should still be production ready and continue to hold our\ndefinition of done\n.\nA separate MR containing the integration, documentation (if applicable) and removal of the feature flags should be completed in parallel with the backend and frontend MRs, but should only be merged when both the frontend and backend MRs are on the master branch.\nIn the spirit of\ncollaboration\nand\nefficiency\n, members of teams should feel free to discuss issues directly with one another while\nbeing respectful of others’ time\n.\nConvention over Configuration\nAvoid adding configuration values in the application settings or in\ngitlab.yml\n. Only add configuration if it is absolutely necessary. If you\nfind yourself adding parameters to tune specific features, stop and consider\nhow this can be avoided. Are the values really necessary? Could constants be\nused that work across the board? Could values be determined automatically?\nSee\nConvention over Configuration\nfor more discussion.\nChoosing Something to Work On\nStart working on things with the highest priority in the current milestone. The priority of items are defined under labels in the repository, but you are able to sort by priority.\nAfter sorting by priority, choose something that you’re able to tackle and falls under your responsibility. That means that if you’re a frontend developer, you work on something with the label\nfrontend\n.\nTo filter very precisely, you could filter all issues for:\nMilestone: Started\nAssignee: None (issue is unassigned)\nLabel: Your label of choice. For instance\nCI/CD\n,\nDiscussion\n,\nQuality\n,\nfrontend\n, or\nPlatform\nSort by priority\nUse this link to quickly set the above parameters\n. You’ll still need to filter by the label for your own team.\nIf you’re in doubt about what to work on, ask your lead. They will be able to tell you.\nTriaging and Reviewing Code from the rest of the Community\nIt’s every\ndevelopers’ responsibilities\nto triage and review code contributed by the rest of the community, and work with them to get it ready for production.\nMerge requests from the rest of the community should be labeled with the\nCommunity contribution\nlabel.\nWhen evaluating a merge request from the community, please ensure that a relevant PM is aware of the pending MR by mentioning them.\nThis should be to be part of your daily routine. For instance, every morning you could triage new merge requests from the rest of the community that are not yet labeled\nCommunity contribution\nand either review them or ask a relevant person to review it.\nMake sure to follow our\nCode Review Guidelines\n.\nWorking with GitLab.com\nGitLab.com is a very large instance of GitLab Enterprise Edition. It runs release candidates for new releases, and sees a lot of issues because of the amount of traffic it gets. There are several internal tools available for developers at GitLab to get data about what’s happening in the production system:\nPerformance Data\nThere is extensive\nmonitoring\npublicly available for GitLab.com. For more on this and related tools, see the\nmonitoring handbook\n.\nError Reporting\nSentry\nis our error reporting tool\nlog.gprd.gitlab.net\nhas production logs\nprometheus.gitlab.com\nhas alerts for the\nproduction team\nScheduling Issues\nGitLab Inc has to be selective in working on particular issues. We have a limited capacity to work on new things. Therefore, we have to schedule issues carefully.\nProduct Managers are responsible for scheduling all issues in their respective\nproduct areas\n, including features, bugs, and tech debt. Product managers alone determine the\nprioritization\n, but others are encouraged to influence the PMs decisions. The UX Lead and Engineering Leads are responsible for allocating people making sure things are done on time. Product Managers are\nnot\nresponsible for these activities, they are not project managers.\nDirection issues are the big, prioritized new features for each release. They are limited to a small number per release so that we have plenty of capacity to work on other important issues, bug fixes, etc.\nIf you want to schedule an issue with the\nSeeking community contributions\nlabel, please remove the label first.\nAny scheduled issue should have a team label assigned, and at least one type label.\nRequesting Something to be Scheduled\nTo request scheduling an issue, ask the\nresponsible product manager\nWe have many more requests for great features than we have capacity to work on.\nThere is a good chance we’ll not be able to work on something.\nMake sure the appropriate labels (such as\ncustomer\n) are applied so every issue is given the priority it deserves.\nProduct Development Timeline\nTeams (Product, UX, Development, Quality) continually work on issues according to their respective workflows.\nThere is no specified process whereby a particular person should be working on a set of issues in a given time period.\nHowever, there are specific deadlines that should inform team workflows and prioritization.\nWith the monthly\nrelease date\nbeing the third Thursday of the release month, the\ncode cut-off\nis the Friday prior.\nThe\nnext milestone begins\nthe Saturday after code cut-off.\nAll other important dates for a milestone are relative to the release date:\nMonday, 19 days before the milestone begins\n:\nDraft of the issues that will be included in the next release (released next month).\nStart capacity and technical discussions with engineering/UX.\nAssess error budgets to determine feature/reliability balance.\nDevelopment engineering manager provides product manager with prioritization input for\n~type::maintenance\nissues per\ncross-functional prioritization\nQuality\nprovides product manager with prioritization input for\n~type::bug\nissues per\ncross-functional prioritization\nMonday, 12 days before the milestone begins\n:\nProduct manager, taking into consideration prioritization input from development EM, Quality, and UX to create a plan of issues for the upcoming milestone.\nRelease scope is finalized. In-scope issues marked with milestone\n%x.y\n; label\n~deliverable\napplied.\nKickoff document is updated with relevant items to be included.\nMonday, 5 days before the milestone begins\n:\nRelease scope is finalized. In-scope issues marked with milestone\n%x.y\n; label\n~deliverable\napplied.\nKickoff document is updated with relevant items to be included.\nMonday immediately after the milestone begins\n:\nKick off!\n📣\nCompany Kickoff\ncall live streamed.\nDevelopment on milestone begins.\nMonday, 9 days after the milestone begins\n:\nThe development lead for each stage/section coordinates a stage/section level review with the quad\ncross-functional dashboard review process\n. After the stages/section level reviews are complete, the VP of Development coordinates a summary review with the CTO, VP of Product, VP of UX, and VP of Quality.\nWednesday, 11 days after the milestone begins\n:\nGitLab Bot opens\nGroup Retrospective\nissue for the current milestone.\nFriday, the day the milestone ends\n:\nIssues for milestone completed, with docs, and have been merged into master.\nFeature flags should be flipped from default off to default on after verification to be in the release. See\nfeature flags\n.\nMerging by the milestone code cut-off (Friday)\ndoes not guarantee\nthat the feature will be in the release. See\nrelease timelines\n.\nIndividual\nrelease post entries\nmerged for all relevant issues.\nBy end of the day, milestone\n%x.y\nis expired.\nOn or around Wednesday, the day before the release date\n:\nGroup Retrospective issues\nare updated with shipped and missed deliverables and team-members are tagged in the discussion.\nWednesday, the day before the release date\n:\nMilestone Cleanup\nruns on the schedule at\nMilestone cleanup schedule\n.\nThird Thursday of the release month\n:\nRelease Day!\n🚀\nRelease shipped to production.\nRelease post published.\nFriday immediately after release day\n:\nThe patch release process for the milestone starts. This includes regular and security patch releases.\nAll of the milestone’s unfinished issues and merge requests are automatically moved to the next milestone, with the exception of\n~security\nissues.\nOn or around the Wednesday immediately following the release day\n:\nProduct plans\nare updated to reflect previous and current releases, including category epics and direction pages.\nOn or around the second Monday following the release day\n:\nNon-critical security patches are\nreleased\n.\nRefer to\nrelease post content reviews\nfor additional deadlines.\nNote that deployments to GitLab.com are more frequent than monthly major/minor releases.\nSee\nauto deploy transition\nguidance for details.\nKickoff\nAt the beginning of each release, we have a kickoff meeting, publicly livestreamed to YouTube. In the call, the Product Development team (PMs, Product Designers, and Engineers) communicate with the rest of the organization which issues are in scope for the upcoming release. The call is structured by\nproduct area\nwith each PM leading their part of the call.\nThe\nProduct Kickoff page\nis updated each month, which follows the content on the livestream.\nMilestone Cleanup\nEngineering Managers are responsible for capacity planning and scheduling for their respective teams with guidance from their counterpart Product Managers.\nTo ensure hygiene across Engineering, we run scheduled pipelines to move\nunfinished work (open issues and merge requests) with the expired milestone to\nthe next milestone, and label\n~\"missed:x.y\"\nfor the expired milestone.\nAdditionally, label\n~\"missed-deliverable\"\nwhenever\n~\"Deliverable\"\nis\npresented.\nThis is currently implemented as part of our\nautomated triage operations\n. Additionally, issues with the\n~Deliverable\nlabel which have a milestone beyond current +1, will have the\n~Deliverable\nlabel removed.\nWe keep the milestone open for 3 months after it’s expired, based on the\nrelease and maintenance policy\n.\nThe milestone cleanup is currently applied to the\nfollowing groups and projects\n:\nGitLab\n,\nschedule\nGitLab Runner\n,\nschedule\nGitLab Gitaly\n,\nschedule\nGitLab charts\n,\nschedule\nGitLab QA\n,\nschedule\nOmnibus GitLab\n,\nschedule\n(only moving milestone for now, not labelling)\nMilestones closure is in the remit of\nthe Delivery team\n. At any point in time a release might need to be created for an active milestone,and once that is no longer the case, the Delivery team closes the milestone.\nMilestone cleanup schedule\nThe milestone cleanup will happen on the milestone due date.\nThese actions will be applied to open issues:\nOpen issues and merge requests will be moved to the next milestone, and\nlabeled with\n~\"missed:x.y\"\n.\n~\"missed-deliverable\"\nwill also be added whenever\n~\"Deliverable\"\nis presented.\nMilestones are closed when the Delivery team no longer needs to create a backport release for a specific milestone.\nUse Group Labels and Group Milestones\nWhen working in GitLab (and in particular, the GitLab.org group), use group labels and group milestones as much as you can. It is easier to plan issues and merge requests at the group level, and exposes ideas across projects more naturally. If you have a project label, you can promote it to a group milestone. This will merge all project labels with the same name into the one group label. The same is true for promoting group milestones.\nTechnical debt\nWe definitely don’t want our technical debt to grow faster than our code base. To prevent this from happening we should consider not only the impact of the technical debt but also consider the impacts spreading like a contagion. How big and how fast is this problem going to be over time? Is it likely a bad piece of code will be copy-pasted for a future feature? In the end, the amount of resources available is always less than amount of technical debt to address.\nTo help with prioritization and decision-making process here, we recommend thinking about contagion as an interest rate of the technical debt. There is\na great comment\nfrom the internet about it:\nYou wouldn’t pay off your $50k student loan before first paying off your $5k credit card and it’s because of the high interest rate. The best debt to pay off first is one that has the highest loan payment to recurring payment reduction ratio, i.e. the one that reduces your overall debt payments the most, and that is usually the loan with the highest interest rate.\nTechnical debt is prioritized like\nother technical decisions\nin\nproduct groups\nby\nproduct management\n.\nFor technical debt which might span, or fall in gaps between groups they should be brought up for a\nglobally optimized\nprioritization in\nretrospectives\nor directly with the appropriate member of the\nProduct Leadership team\n. Additional avenues for addressing technical debt outside of product groups are\nRapid Action issues\nand\nworking groups\n.\nDeferred UX\nSometimes there is an intentional decision to deviate from the agreed-upon\nMVC\n, which sacrifices the user experience. When this occurs, the Product Designer creates a follow-up issue and labels it\nDeferred UX\nto address the UX gap in subsequent releases.\nFor the same reasons as technical debt, we don’t want Deferred UX to grow faster than our code base.\nThese issues are prioritized like\nother technical decisions\nin\nproduct groups\nby\nproduct management\n.\nAs with\ntechnical debt\n, Deferred UX should be brought up for\nglobally optimized\nprioritization in\nretrospectives\nor directly with the appropriate member of the\nProduct Leadership team\n.\nUI polish\nUI polish issues are visual improvements to the existing user interface, touching mainly aesthetic aspects of the UI that are guided by\nPajamas\nfoundations. UI polish issues generally capture improvements related to color, typography, iconography, and spacing. We apply the\nUI polish\nlabel to these issues. UI polish issues don’t introduce functionality or behavior changes to a feature.\nExamples of UI polish\nAesthetic improvements\n(\nexample\n): removing unnecessary borders from a UI, updating the background color of an element, fixing the font size of a heading element.\nMisalignment of text, buttons, etc\n(\nexample\n): although because many times something isn’t broken, these improvements are considered UI polish. These could also be considered a bug.\nIncorrect spacing between UI elements\n(\nexample\n): when two interface elements are using inconsistent spacing values, such as 10px instead of 8px. It could also be considered technical debt. Note that if two interface elements have zero space between them, its an obvious bug.\nVisual inconsistencies across different product areas\n(\nexample\n): visual inconsistencies could occur when we have a series of buttons on a particular view. For example, when 3/4 of them have been migrated to use the Pajamas component, and 1/4 of them are still using a deprecated button, resulting in a visual inconsistency. This is considered a UI polish.\nWhat is not UI polish\nFunctional inconsistency related to the experience\n: for example, using a manual action to add an assignee automatically shows the assignee in the sidebar but using a manual action to add a weight to an issue does not automatically show the weight in the sidebar. This is not currently considered UI polish. It would be considered a UX issue.\nImproving visibility of system status\n: status indicator improvements are experience improvements and are not classified as UI polish.\nEven when updating something that is purely visual, such as a status icon, to improve the meaning the user has of what they are viewing, we are trying to improve the experience of that user.\nMonitor Merge Request Trends\nOpen merge requests sometimes become idle (not updated by a human in more than a month). Once a month, engineering managers will receive an\nMerge requests requiring attention triage issue\nthat includes all (non-WIP/Draft) MRs for their group and use it to determine if any action should be taken (such as nudging the author/reviewer/maintainer). This assists in getting merge requests merged in a reasonable amount of time which we track with the\nOpen MR Review Time (OMRT)\nand\nOpen MR Age (OMA)\nperformance indicators.\nOpen merge requests may also have other properties that indicate that the engineering manager should research them and potentially take action to improve efficiency. One key property is the number of threads, which, when high, may indicate a need to update the plan for the MR or that a synchronous discussion should be considered. Another property is the number of pipelines, which, when high, may indicate a need to revisit the plan for the MR. These metrics are not yet included in an automatically created a triage issue.\nSecurity is everyone’s responsibility\nSecurity\nis our top priority. Our Security Team is raising the bar on security every day to protect users’ data and make GitLab a safe place for everyone to contribute. There are many lines of code, and Security Teams need to scale. That means shifting security left in the\nSoftware Development LifeCycle (SDLC)\n. Each team has an\nApplication Security Stable Counterpart\nwho can help you, and you can find more secure development help in the\n#sec-appsec\nSlack channel.\nBeing able to start the security review process earlier in the software development lifecycle means we will catch vulnerabilities earlier, and mitigate identified vulnerabilities before the code is merged. You should know when and how to proactively\nseek an Application Security Review\n. You should also be familiar with our\nSecure Coding Guidelines\n.\nWe are fixing the obvious security issues before every merge, and therefore, scaling the security review process. Our workflow includes a check and validation by the reviewers of every merge request, thereby enabling developers to act on identified vulnerabilities before merging. As part of that process, developers are also encouraged to reach out to the Security Team to discuss the issue at that stage, rather than later on, when mitigating vulnerabilities becomes more expensive. After all, security is everyone’s job. See also our\nSecurity Paradigm\n.\nRapid Engineering Response\nFrom time to time, there are occasions that engineering team must act quickly in response to urgent issues. This section describes how the engineering team handles certain kinds of such issues.\nScope\nNot everything is urgent. See below for a non-exclusive list of things that are in-scope and not in-scope. As always, use your experience and judgment, and communicate with others.\nIn Scope\nLast-minute release blocking bug or security patch before an imminent release.\nHigh severity (severity::1/priority::1) security issues. Refer to\nsecurity severity and priority\n.\nHighest priority and severity customer issues based on the\npriority and severity definitions\n.\nNot In Scope\nAn operational issue of GitLab.com or a self managed customer environment. This falls under the\non-call\nprocess.\nSelf developed and maintained tools that are not officially supported products by GitLab.\nFeature request by a specific customer.\nProcess\nPerson requesting Rapid Engineering Response creates an issue supplying all known information and applies\npriority and severity\n(or\nsecurity severity and priority\n) to the best of their ability.\nPerson requesting Rapid Engineering Response raises the issue to their own manager and the\nsubject matter domain\nengineering manager (or the delegation if OOO).\nIn case a specific group cannot be determined, raise the issue to the Director of Engineering (or the delegation if OOO) of the\nsection\n.\nIn case a specific section cannot be determined, raise the issue to the Sr. Director of Development (or the delegation if OOO).\nThe engineering sponsor (subject matter Manager, Director, and/or Sr. Director) invokes all stakeholders of the subject matter as a rapid response task force to determine the best route of resolution:\nEngineering manager(s)\nProduct Management\nQE\nUX\nDocs\nSecurity\nSupport\nDistribution engineering manager\nDelivery engineering manager (Release Management)\nAdjust\npriority and severity\nor\nsecurity severity and priority\nif necessary, and work collaboratively on the determined resolution.\nPerformance Refinement\nA bi-weekly performance refinement session is held by the Development and QE teams jointly to raise awareness and foster wider collaboration about high-impact performance issues.\nA high impact issue has a direct measurable impact on GitLab.com\nservice levels or error budgets\n.\nScope\nThe\nPerformance Refinement issue board\nis reviewed in this refinement exercise.\nProcess\nTo participate in the bi-weekly refinement, ask your engineering director to forward the invite of the\nPerformance Refinement\nmeeting which is at 15:00 UTC every other Thursday. Here is the\nmeeting agenda\n.\nTo nominate issues to the board:\nAssign\na performance severity\non the issue to help asses the priority assignment for the refinement session.\nEnsure that the issue clearly explains the problem, the (potential) impact on GitLab.com’s availability, and ideally, clearly defines a proposed solution to the problem.\nUse the label\nbug::performance\n.\nFor the issues under the\nOpen\ncolumn:\nAn engineering manager will be assigned if either the\nMilestone\nor the label\nworkflow::ready for development\nis missing.\nEngineering manager brings assigned issue(s) to the Product Manager for prioritization and planning.\nEngineering manager unassigns themselves once the issue is planned for an iteration, i.e. associated with a\nMilestone\nand the label\nworkflow::ready for development\n.\nTo highlight high-impact issues which need additional discussion, please add an agenda item.\nIf a guest attendee would be helpful for collaboration, please forward the invite. For example, a CSM or Support Engineer may have information that would be helpful for an upcoming topic.\nInfradev\nThe infradev process is established to identify issues requiring priority attention in support of SaaS availability and reliability. These escalations are intended to primarily be asyncronous as timely triage and attention is required. In addition to primary management through the Issues, any gaps, concerns, or critical triage is handled in the\nSaaS Availability weekly standup\n.\nScope\nThe\ninfradev issue board\nis the primary focus of this process.\nRoles and Responsibilities\nInfrastructure\nNominate issues by adding\nInfradev\nlabel.\nAssess\nSeverity\nand\nPriority\nand apply the corresponding label as appropriate.\nProvide\nas much information as possible\nto assist development engineering troubleshooting.\nDevelopment\nDevelopment directors are responsible for\ntriaging Infradev issues\nregularly by following the\ntriage process\nbelow.\nDevelopment managers are encouraged to\ntriage issues\nregularly as well.\nDevelopment managers collaborate with their counterpart Product Managers to refine, schedule, and resolve Infradev issues.\nUsually, issues are nominated as Infradev issues by SREs or Managers in the Infrastructure Department. Development engineers/managers are not expected to nominate Infradev issues.\nHowever, when it’s necessary to spin off new issues from an existing Infradev issue, development engineers and managers may also apply\nInfradev\nlabel to the new issues.\nWhen development engineers and managers split off new Infradev issues, they must have a\nSeverity\nand\nPriority\nlabels to the new issues.  The labels should correspond to the importance of the follow-on work.\nProduct Management\nProduct Managers perform holistic prioritization of both product roadmap and Infradev issues as one unified backlog.\nProduct Managers collaborate with their counterpart Development Managers to refine, schedule, and resolve Infradev issues.\nTriage Process\n(To be completed primarily by Development Engineering Management)\nIssues are nominated to the board through the inclusion of the label\ninfradev\nand will appear on the\ninfradev board\n.\nReview issues in the Open column. Look for issues within your Stage/Group/Category, but also for those which lack a clear assignment or where the assignment may need correction.\nReview the\nseverity\non the issue to validate appropriate prioritization.\nEnsure that the issue clearly explains the problem, the (potential) impact on GitLab.com’s availability, and ideally, clearly defines a proposed solution to the problem.\nAssign a Development Manager and a Product Manager to any issue where the\nMilestone\nor the label\nworkflow::ready for development\nis missing.\nDevelopment Manager and Product Manager collaborate on the assigned issue(s) for prioritization and planning.\nDevelopment Manager and Product Manager unassign themselves once the issue is planned for an iteration, i.e. associated with a\nMilestone\nand the label\nworkflow::ready for development\n.\nAll Issues should be prioritized into the appropriate workflow stage. It is the intent to maintain no Open (un-triaged) items.\nIssues with\n~infradev ~severity::1 ~priority::1 ~production request\nlabels applied require immediate resolution.\n~infradev\nissues requiring a ~“breaking change” should not exist.  If a current\n~infradev\nissue requires a breaking change then it should split into two issues.  The first issue should be the immediate\n~infradev\nwork that can be done under current SLOs.  The second issue should be  ~“breaking change” work that needs to be completed at the next major release in accordance with\ndeprecation guidance\n. Agreement from development DRI as well as the infrastructure DRI should be documented on the issue.\nInfradev issues are also shown in the monthly\nError Budget Report\n.\nA Guide to Creating Effective Infradev Issues\nTriage of infradev Issues is desired to occur asynchronously. These points below with endure that your infradev issues gain maximum traction.\nUse the\nInfraDev issue template\nto create the issue on the gitlab-org/gitlab issue tracker.\nClearly state the scope of the problem, and how it affects GitLab SaaS Platforms\n. Examples could include:\nReliability issues: the problem could cause a widespread outage or degradation on GitLab.com.\nexample\nSaturation issues: the problem could leave to increased saturation, latency issues due to resource over-utilization.\nexample\nService-level degradation: the problem is causing our service-level monitoring to degrade, impacting the overall SLA of GitLab.com and potentially leaving to SLA violations.\nexample\nUnnecessary alerts: the problem does not have a major impact on users, but is leading to extraneous alerts, impacting the ability of SREs to effectively triage incidents due to alerting noise.\nexample\nProblems which extend the time to diagnosis of incidents: for example, issues which degrade the observability of GitLab.com, swallow user-impacting errors or logs, etc. These could lead to incidents taking much longer to clear, and impacting availability.\nexample\nDeficiencies in our public APIs which lead to customers compensating by generating substantially more traffic to get the required results.\nexample\nQuantify the effect of the problem\nto help ensure that correct prioritization occurs.\nInclude costs to availability. The\nIncident Budget Explorer\ndashboard can help here.\nInclude the number of times alerts have fired owing to the problem, how much time was spent dealing with the problem, and how many people were involved.\nInclude screenshots of visualization from Grafana or Kibana.\nAlways include a permalink to the source of the screenshot so that others can investigate further\n.\nProvide a clear, unambiguous, self-contained solution to the problem\n. Do not add the\ninfradev\nlabel to architectural problems, vague solutions, or requests to investigate an unknown root-cause.\nEnsure scope is limited\n. Each issue should be able to be owned by a single stage group team and should not need to be broken down further. Single task solutions are best.\nEnsure a realistic severity is applied\n: review the\navailability severity label guidelines\nand ensure that applied severity matches. Always ensure all issues have a severity, even if you are unsure.\nIf possible, include ownership labels\nfor more effective triage. The\nproduct categories\ncan help determine the appropriate stage group to assign the issue to.\nCross-reference links to Production Incidents, PagerDuty Alerts, Slack Alerts and Slack Discussions\n. To help ensure that the team performing the triage have all the available data.\nBy adding “Related” links on the infradev issue, the\nInfradev Status Report\nwill display a count of the number of production incidents related to each infradev issue, for easier and clearer prioritization.\nEnsure that the issue title is accurate, brief and clear\n. Change the title over time if you need to keep it accurate.\nBy adding an infradev label to an issue, you are assuming responsibility and becoming the sponsor/champion of the issue\n.\nProvide a method for validating that the original issue still exists\nSometimes infradev issues will resolve on their own, or are resolved as a side-effect of an unrelated change.\nIn the infradev issue description, provide a clear way of checking whether the problem still exists.\nHaving a way of checking validity can save on a great deal of back-and-forth discussion between Infradev Triage participants including Engineering Managers, Directors and Product Managers and make space for other non-resolved issues to get scheduled sooner.\nIdeally, provide a link to a Grafana query or an ELK query and clear instructions on how to interpret the results to determine whether the problem is still occurring.\nCheck the “Verfication” section in this issue as an example of this\n.\nAlternatively, provide clear instructions on how to recreate or validate the problem.\nIf an issue has been resolved, use the following process:\nReassign the issue back to the author, or an appropriate owner, requesting that they confirm the resolution, and close the issue  if they concur. If not, they should follow up with a note and unassign themselves.\nCode Review Guidelines\nCode reviews are mandatory for every merge request, you should get familiar with and follow our Code Review Guidelines.\nCode Review Values\nGitLab team members' code review values\nIteration\nIn order to provide changes in an iterative and incremental manner, we should always seek to create …\nRelated Engineering Workflows\nAt GitLab we have a number of engineering processes that we use on a daily basis.\nRelease/Feature Determination Workflow\nThis document explains the workflow for determining if a feature will be included in a milestone …\nLast modified July 7, 2025:\nExpand infradev process to reference all SaaS platforms rather than just GitLab.com (\n09694d48\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "3ec42d7e019b351c.html"
}