{
  "url": "https://handbook.gitlab.com/handbook/communication",
  "title": "GitLab Communication | The GitLab Handbook",
  "headings": [
    "GitLab Communication",
    "Effective & Responsible Communication Guidelines",
    "Communicating Potentially GitLab Sensitive Topics",
    "Determining Which Communication Forum To Use",
    "Internal communication",
    "Meetings",
    "Presentations",
    "Writing style guidelines",
    "Email",
    "Slack",
    "Types of documents",
    "Google Calendar",
    "External communication",
    "Effective communication competency"
  ],
  "text": "GitLab Communication | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nDevin Rogozinski\nOn This Page\nEffective & Responsible Communication Guidelines\nEveryone is a moderator\nAsynchronous communication\nCommunicate directly\nCommunicating Potentially GitLab Sensitive Topics\nConfidentiality levels\nExamples of Potentially GitLab Sensitive Topics\nWhat are the risks?\nDetermining Which Communication Forum To Use\nOrganization code names\nInternal communication\nTop tips and best practices\nInternal Communication Channel Guidance\nStructure content instead of using FAQs\nRestructuring the content\nFAQs are discouraged elsewhere as well\nMultimodal communication\nAsking “is this known”\nNumbering is for reference, not as a signal\nCross link\nAcknowledgement Receipts (ACK)\nSay thanks\nValues emoji\nIndicating availability\nInformal communication\nNot sure where to go?\nStart with a Merge Request\nScaling Merge Requests through “Manager Mention MRs” (formerly Consolidated MRs)\nIssues\nHow to make a company wide announcement\nPosting in #company-fyi\nPosting in #whats-happening-at-gitlab\nMeetings\nCommon meeting problems\nEveryone is responsible for notes\nEngaging EBAs in note-taking\nSmart note taking in meetings\nFew meetings with presentations\nFramework for meetings with presentations\nMeeting introduction guidelines\nScheduling meetings\nCross-regional Working Hours Recommendations\nMulti-session meeting naming\nVideo calls\nYou are the manager of your attention\nDo not ask meeting attendees to pay attention\nFirst post is a badge of honor\nDo not do a countdown before ending a call\nHybrid calls are annoying\nTypes of meetings\nAsk Me Anything meetings\nFireside Chats\nWalk and Talk calls\nRelease retrospectives and kickoffs\nDeep Dives\nDaily Sync Escalation Process\nPresentations\nVideo and presentation tips with Lorraine Lee\nWriting style guidelines\nCommunicating dates and time\nVisuals\nUbiquitous language\nMECEFU terms\nSimple language\nInefficient things shouldn’t sound positive\nUsing additional languages\nAvoid using Git in Project Names\nEmail\nSlack\nGeneral guidelines\nAvoid direct messages\nDo not use group direct messages\nUse public channels\nBe respectful of others’ time\nQuestions\nWhen would GitLab use Corporate Export?\nAre my direct messages and private channel conversations completely private?\nEmergency chat\nSlack is down\nZoom is down\nSlack and Zoom are down\nTypes of documents\nGoogle Docs\nPageless is the GitLab preferred format\nLink sharing\nGood practices & helpful tips\nHow to deprecate a Google Doc\nHandbook page\nProduct documentation\nGitLab repositories\nREADMEs\nGoogle Calendar\nGoogle Calendar Appointment Scheduling\nExternal communication\nCommunicating with media and industry analysts\nPaid external speaking requests\nSocial media\nPosting or streaming to YouTube\nGuidelines for vendor meetings\nUser communication guidelines\nCompany phone number\nEffective communication competency\nThe Handbook\nGitLab Communication\nGitLab Communication\nWe’re an all-remote company that allows people to work from almost anywhere in the world. It’s important for us to practice clear communication in ways that help us stay connected and work more efficiently.\nWe’re an\nall-remote\ncompany that allows people to work from\nalmost anywhere in the world\n. We hire great people regardless of where they live, but with GitLab team members across\nmore than 60 countries\n, it’s important for us to practice clear communication in ways that help us stay connected and work more efficiently.\nTo accomplish this, we use\nasynchronous communication\nas a starting point\nand stay as open and transparent as we can by communicating through public issues,\nmerge requests\n, and\nSlack channels\n.\nWe also place an emphasis on ensuring that conclusions of offline conversations are written down.\nWhen we go\nback and forth three times,\nwe jump on a\nsynchronous video call\n.\nWe communicate respectfully and professionally at all times.\nEffective & Responsible Communication Guidelines\nAssume\nPositive Intent\n.\nAlways begin with a position of positivity and grace.\nKindness Matters.\nYou are looking at a screen, but you are really talking to a person. If you wouldn’t say it to a person’s face, do not send it to them in a text message.\nExpress Your Thoughts Responsibly and Inclusively.\nWe live in different locations and often have very different perspectives. We want to know your thoughts, opinions, and feelings on things. We also ask you to consider the guidelines around communicating potentially sensitive topics.\nOwn It.\nIf you say it or type it, own it. If it hurts the company or an individual, even unintentionally, we encourage you to look at things from other points of view and apologize easily.\nBe a Role Model of our\nValues\n.\nFeedback is Essential.\nIt is difficult to know what is appropriate in every one of our team members 60+ countries. We encourage team members to give feedback and receive feedback in a considerate way.\nDo not underestimate a 1:1.\nAsynchronous communication (e.g., via text) is helpful and necessary. In some cases (e.g., to clarify misunderstandings) it can be much more effective to jump on a Zoom video call.\nAlways Adhere to our\nAnti-Harassment Policy\nand\nGitLab Code of Business Conduct and Ethics\n.\nEveryone should be comfortable in their work environment.\nFocus on what we can directly influence.\nThere are many factors we can’t directly influence and we should avoid spending time discussing those things. For example, we don’t talk about our\nmarket capitalization\nbecause aspects of this are out of our control. Instead, we should focus on how we can work together to achieve company objectives and grow\nannual recurring revenue\n.\nCommit to\nactive and effective listening\n.\nEmbracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about\nmastering the use of the written word in an all-remote setting\n.\nEveryone is a moderator\nIf you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format.\nIf there is an issue to raise regarding someone’s communication or conduct, team members should follow the process for\nraising communication concerns\nby sharing their concern with their manager or, if preferred, email Team Member Relations (\nteammemberrelations@gitlab.com\n) directly.\nAsynchronous communication\nIn an\nall-remote setting\n, where team members are empowered to live and work where they’re most fulfilled, mastering asynchronous workflows is vital to avoiding\ndysfunction\nand enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward\nwithout\nthe need for additional stakeholders to be available at the same time your communique is sent.\nTo learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit\nGitLab’s guide to embracing asynchronous communication\n.\nCommunicate directly\nWhen working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary.\nEscalate to management if you are not getting the support you need. Remember that everyone is a\nmanager of one\nand they might have to complete their own assignments and inform the reporting lines.\nCommunicating Potentially GitLab Sensitive Topics\n(This guidance supplements and overlaps with\nGitLab’s SAFE Framework\n, the guidance on the use of\nthe internal handbook\n, and the additional guidance on this page. We ask our team members to consider the factors below in their communication. )\nAs GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication.\nWords have impact long after they are written, and even when you’re communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our\nGuidelines for communicating effectively and responsibly through text\n.\nConfidentiality levels\nAt GitLab, we are\npublic by default\n, but some information is classified as internal or limited access. Please see the\nconfidentiality levels\nhandbook page for details on this.\nExamples of Potentially GitLab Sensitive Topics\nTeam member data (individual performance, start dates, departures)\nViolations, or potential violations, of policies and/or local rules and regulations\nCustomer or partner information (logos, trademarks, spend)\nMaterial nonpublic information\nThe above examples overlap with the\nGitLab’s SAFE Framework\nexamples. We recommend you to further review that page for more information and context.\nWhat are the risks?\nLegal risk:\nThese are the risks that arise from regulations and laws that govern GitLab or the market in which it operates. This includes, but is not limited to, content that would compromise a GitLab team member, customer, or user’s personal data and/or privacy.\nMorale risk:\nRaising GitLab sensitive topics that may be misinterpreted without the opportunity to ask clarifying questions can create risk to team culture and/or morale.\nPR risk:\nRemember that anything you document could ultimately be shared/viewed externally. Consider that a discussion in a public MR or issue is a demonstration of our\nvalues\nto those outside of GitLab who are looking to learn more about how we collaborate.\nWe encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting.\nDetermining Which Communication Forum To Use\nThe table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage.\nCommunication Forum\nWhen To Utilize\nUse\nthe internal Handbook\naligned with the guidelines\nWhen you want to document information for team members that is\ninternal-only\n, including\nnot public\nand not\nlimited access\nExternal MR/issue (not confidential)\nFor discussion and collaboration when there is no risk suspected or identified (directly or later) and it doesn’t fall into\nnot public\ncategory\nInternal MR/ confidential issue\nFor discussion and collaboration when there is no risk suspected or identified but adhering to things that are\ninternal-only\n,\nnot public\n, SAFE Framework/General Communication Guidelines\nYour Manager, DRI and/or Legal\nFor discussion and collaboration when in doubt about potential risk and you want to review if there’s a potential risk\nDRI\nFor discussion and collaboration when there’s a risk suspected or identified, communicate directly with the DRI verbally via Zoom. Examples include issues where Limited Access applies or it covers a change to People Process/policy.\nPeople Group (your People Business Partner or Team Member Relations)\nFor discussion and collaboration when there’s a risk suspected or identified, a policy violation, and/or it’s a private matter\nGitLab’s Whistleblower policy\nFor flagging a situation that is a violation as set out in the policy\nWhen in doubt, you can reach out to your People Business Partner and/or your leadership team  directly.\nOrganization code names\nPlease see our\nProject names section\n.\nInternal communication\nInternal communication is any work related communication at a company.\nInternal Communication includes team member conversations, wider team discussions, or internal announcements to the company or targeted outreach to select internal audiences.\nAt GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue.\nSince we believe that all team members must be\nManagers of One\n, most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others.\nIn those cases, the DRIs may want to engage the\nInternal Communications function\n.\nTop tips and best practices\nAll written communication happens in English, even when sent one on one, because sometimes you need to forward an email or chat.\nUse\nasynchronous communication\nwhen possible: merge requests (preferred) or issues. Announcements happen on the appropriate Slack channels and people should be able to do their work without getting interrupted by chat.\nDiscussion in issues or Merge Requests is preferred over everything else. If you need a response urgently, you can Slack someone with a link to your comment on an issue or merge request, asking them to respond there, however be aware that they still may not see it straight away. See\nSlack\nfor more.\nIf you choose to email instead of chat it is OK to send an\ninternal\nemail that contains only a short message, similar as you would use in chat.\nYou are not expected to be available all the time. There is no expectation to respond to messages outside of your planned working hours.\nSometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. See the\nguidelines on video chats\nfor more detail.\nIt is OK to ask as many questions as you have. Please ask them so many people can answer them and so others can benefit from seeing the answer. Use issues or public chat channels (like\n#questions\n) instead of direct messages or one-on-one emails. If you have researched in the handbook and could not find the answer or need clarity, include the handbook link you were reviewing and state “while looking in the handbook I could not find x,y,z”.\nIf you send a handbook link to someone as an answer to a question, consider adding some context, especially if they are new to GitLab. It’s great that we often have the answer documented, but it’s not always easy to find if you are a new team member.\nIf the answer to a question isn’t documented, please immediately make a merge request to add it to the handbook in a place you have looked for it. It is great for the person who answered the question to see you leading by example to ensure that question only needs to be answered once. A merge request is the best way to say thanks for help.\nIf you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it.\nAll company data should be\nshareable\nby default. Do not use a local text file, but rather leave comments on an issue.\nWhen someone asks something, give back a deadline or that you did it. Answers like: ‘will do’, ‘OK’, ‘it is on my todo list’ are not helpful. If it is small it’s better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when you’ll do it, by returning that information the other person might decide to solve it in another way if it takes too long.\nIt is OK to bring an issue to someone’s attention with a CC (“cc @user”), but CCs alone are not enough if specific action is needed from someone. The mentioned user may read the issue and take no further action. If you need something, please explicitly communicate your need along with @ mentioning who you need it from.\nAvoid creating private groups for internal discussions:\nIt’s disturbing (all users in the group get notified for each message).\nIt’s not searchable.\nIt’s not shareable: there is no way to add people in the group (and this often leads to multiple groups creation).\nThey don’t have a subject, so everyone has to remember the topic of each private group based on the participants, or open the group again to read the content.\nHistory is lost when leaving the group or\nafter 90 days\n.\nIt is perfectly fine to create a channel, even for a single customer meeting. These channels should be named “a_\n-internal” to indicate their “internal” nature (not shared with customers).\nUse\nlow-context communications\nby being explicit in your communications. We are a remote-only company, located all over the world. Provide as much context as possible to avoid confusion. Relatedly, we use\nubiquitous language\nfor communication efficiency.\nWhen discussing concepts, be careful not to lean too much into hypotheticals. There is a tipping point in which it decreases value and no longer becomes constructive at helping everyone come into a unified decision.\nConsult our\ntips for better writing\n.\nInternal Communication Channel Guidance\nWhat/When\nThe GitLab Handbook\nThe Loop\nSlack\nEmail/Newsletters\nMeetings\nPrimary Purpose\nTransparency around GitLab procedures, documenting information handbook-first\nConnect team members with news, information, and stories\nReal-time collaboration and quick communications\nFormal communications, select company updates, and consolidated updates to targeted audiences\nSynchronous discussions and collaboration\nBest For\n1.) Sharing processes and/or procedures valuable to customers, community, or candidates 2.) Creating external transparency (core values, mission, and vision) 3.) Documenting workflows and standardized processes\n1.) Finding/sharing company information, announcements, and events 2.) Learning/sharing programs and initiatives 3.) Accessing personalized and relevant content 4.) Team member storytelling, connection, and engagement 5.) Team showcases and wins\n1.) Immediate discussions 2.) Quick questions 3.) Team coordination 4.) Time-sensitive, informal updates 5.) Instantaneous feedback/communication 6.) Channel-specific discussions\n1.) Critical and/or formal announcements 2.) Newsletters with targeted updates 3.) External communications (customers, vendors, etc.) 4.) Items requiring official email notification 5.) Informing targeted audiences 6.) Select leadership communications\n1.) Complex discussions  2.) Decision-making sessions 3.) Relationship building 4.) Project kickoffs/reviews 5.) Interactive sessions 6.) Ideation and/or problem solving 7.) Engaging and visual presentations 8.) Resolving conflicts\nNot For\n1.) Time-sensitive updates 2.) Internal communication 4.) Team-specific news 5.) Daily operational matters\n1.) Technical documentation 2.) Small audience communication 3.) Highly confidential information. Note: Private Sites is an option for safeguarding access\n1.) Detailed documentation 2.) Complex content sharing 3.) Evergreen or long-term Information sharing\n1.) Collaborative discussions 2.) Questions requiring quick responses 3.) Urgent issues requiring immediate attention\n1.) Simple updates 2.) Information sharing only 3.) Documentation of processes 4.) That which could be handled asynchronously\nKey Features / Benefits\n1.) Version control 2.) Public accessibility 3.) Single source of truth for processes\n1.) Customization and personalization 2.) Newsletter, feed, employee generated content 3.) AI powered search and content governance 4.) Fosters Communication, connection, and culture\n1.) Collaboration and connection 2.) Integrations 3.) Real-time communication 4.) Productivity and efficiency 5.) Supports projects, teams, and transparency\n1.) Improved awareness 2.) Streamlined communication 3.) Personalized content delivery\n1.) Face-to-face interaction 2.)Screen and presentation sharing 3.) Breakout rooms 4.) Recording capability\nStructure content instead of using FAQs\nWe want to\navoid unstructured content\nwhich includes FAQs (Frequently Asked Questions), especially for internal communication.\nFAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which aren’t questions.\nStructured content around GitLab, the product, should be in\nGitLab Docs\nand structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information.\nRestructuring the content\nAs an example, let’s say your FAQ would have a question like:\nQ: I’m not seeing widget X, what should I do?\nA: If you’re not seeing widget X, you can verify if it’s enabled or not by going to User Profile -> Settings and ensure the checkbox is enabled under Enable widget X\nYou can reframe it to:\nHow to enable widget X\nYou can enable widget X by going to User Profile -> Settings and ticking the checkbox next to Enable widget X then clicking on the Save button\nFAQs are discouraged elsewhere as well\nContent guidelines across the industry support avoiding FAQs:\nhttps://www.plainlanguage.gov/guidelines/web/avoid-faqs/\nhttps://digital.gov/2015/04/27/are-faqs-still-relevant/\nhttps://guides.18f.gov/content-guide/our-approach/structure-the-content/\nhttps://gds.blog.gov.uk/2013/07/25/faqs-why-we-dont-have-them/\nhttps://thegood.com/insights/faq-pages/\nhttps://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi/\nMultimodal communication\nEmploy multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information.\nWhen doing this, create and link to a\nsingle source of truth\n: ideally the\nhandbook\n, otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth.\nWhen referring to email that recipients should have received, reference the sender and subject of the email so it’s easy to find. For example, “You should have received an email from Jane Smith with the subject ‘Training Seminar Details’”.\nAsking “is this known”\nIf something is behaving strangely on\nhttps://gitlab.com\n, it might be a bug. It could also mean that something was changed intentionally.\nPlease search if the issue has already\nbeen reported\n. If it has not been reported, and you are sure it is a bug, please\nfile an issue\n.\nIf you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel\n#is-this-known\n.\nIf you know which stage of the DevOps lifecycle is affected, it is also okay to ask in #s_{stage}, for example\n#s_manage\n.\nWhen you ask:\nMake sure that no-one has experienced this issue before, by checking the channel for previous messages.\nDescribe the behavior you are experiencing, this makes it searchable and easier to understand.\nDifferent people might look for different things in the same screenshots.\nAsking in a single channel helps discoverability, duplicated efforts and reduces noise in other channels.\nPlease refrain from asking in general purpose channels like\n#frontend\n,\n#backend\n,\n#development\nor\n#questions\n.\nNumbering is for reference, not as a signal\nWhen taking notes in an agenda, in the handbook, or in other documents, keep items numbered so we can refer to Item 3 or 4a.\nThe number is not a signal of the importance or rank of the subject unless explicitly stated to be such.\nIt is just for ease of reference.\nCross link\nLinking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the\nLive Doc Meeting\nsection of the All Remote Guide links to the\nLive Docs Meetings page\n. The\nLive Docs Meetings page\nlinks back to the\nLive Doc Meeting\nsection of the All Remote Guide.\nAcknowledgement Receipts (ACK)\nInformal ACKs\nIn informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following:\nSlack emoji reaction of\n:ack:\nor an\nACK\nresponse => Acknowledged, or message received\nEyes 👀 => I’ll check this out | seen | working on it\nThumbs up 👍 => good idea\nWhite checkmark ✅ => task is complete or done\nHeart ❤ ️= expression of gratitude or appreciation\ncc @mentions => if someone needs to see a message\nFormal ACKs\nIn order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process.\nTo prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one.\nAs a guideline, we’d expect no more than one per quarter to be sent out. Too many ACKs lose power.\nTo initiate an ACK process:\nClone the form from the\nACK template\nand fill it out.\nLink to MRs and Handbook pages instead of duplicating your content in the form.\nWhy handbook first?\nAsk People Ops to pull a report from Workday with the column headers First Name, Last Name, Job Title, Department, Manager, and Work Email. Double check it and turn the emails into a comma-delimited string with an excel formula like this:\n=TEXTJOIN(\", \", true, Sheet1!E2:E432)\nSend the form and expect to get 50% of the responses in the first 24 hours. To get the rest:\nPost in common Slack channels.\nAdd to staff meeting agendas.\nSuggest to team managers to post to their team Slack channels, ask for explicit\n:ack:\nand pin to the channel until everyone responds.\nLastly, reach out 1-on-1 to stragglers while being respectful of vacation time.\nSay thanks\nAs we continue to build on\ninclusion\n, recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of\nDIB\n.\nThank people that did a great job in our\n#thanks\nSlack channel. Almost\neveryone in the company is active in this channel\nso please don’t be shy.\nConsider other channels where recognition can be acknowledged: team meetings, issues, company calls, 1-1 meetings, etc.\nIf someone is a team member just\n@\n-mention them, if multiple people were working on something try\n@\n-mentioning each person.\nWhen announcing a completed project, list the key contributors.\nPlease be as timely as possible with your recognition.\nIf possible please include a link with your thanks that points to the subject matter that you are giving thanks for, for example a link to a merge request.\nPlease do not mention working outside of working hours, we want to minimize the pressure to do so.\nPlease do not celebrate GitLab contribution graphs that include working for uninterrupted weeklong cycles, as this does not foster healthy\nwork/life harmony\nfor all team members. While GitLab team members are free to time-shift and work weekends in place of weekdays, we discourage celebrating the absence of time away from work.\nDo not thank the CEO or other executives for something that the company paid for, thank GitLab instead.\nTo thank someone who is not a team member, you can\nnominate them for community swag\n.\nUnderstand that everyone doesn’t need or want recognition. Once this is advised, please respect when they don’t.\nValues emoji\nAdd Values emoji reactions to thank you messages in the\n#thanks\nslack channel\nor feel free to use them in GitLab.com, other slack channels and\nsocial media, when you see alignment to our values:\nGitLab’s values\n.\nEmoji\nCustom values emoji\nMeaning\n:handshake:\n:collaboration-value:\nCollaboration\n:chart_with_upwards_trend:\n:results-value:\nResults for Customers\n:stopwatch:\n:efficiency-value:\nEfficiency\n:globe_with_meridians:\n:diversity-value:\nDiversity Inclusion and Belonging\n:footprints:\n:iteration-value:\nIteration\n:eye:\n:transparency-value:\nTransparency\nAs a second iteration, we have\nadded these custom emoji to GitLab\nto enable tanuki values reactions in issues, epics, and MRs within the\ngitlab-com\nand\ngitlab-org\ngroups.\nAs a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings!\nIndicating availability\nIndicate your availability by updating your own calendar using Google’s\n“out of office”\nfeature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select.\nPut your planned away time including holidays, vacation, travel time, and other leave in your own calendar. Please see\nCommunicating your time off\nfor more.\nSet your working hours in your Google Calendar settings.\nUtilize Time Off by Deel to keep other GitLab team members aware of your\nplanned time away\nwithin Slack.\nInformal communication\nInformal communication\nis made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure.\nIn other words, it’s what happens when we get to know each other and talk about anything other than work.\nInformal communication is a\nvital part of GitLab culture\n, and we’ve listed\n20+ ways to engage\n.\nNot sure where to go?\nIf there is something that you want to discuss, but you do not feel that it is\na reasonable option to discuss with either your manager or CEO, then you can reach\nout to any of the other\nC-level GitLab team members\n.\nStart with a Merge Request\nWhen possible, it’s best practice to start a discussion with a\nMerge Request (MR)\ninstead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on.\nAlways\nopen\nan MR for things you are suggesting and/or proposing. Whether something is not working right or we are iterating on a new internal process, it is worth opening a merge request with the minimal valuable change instead of opening an issue encouraging open feedback on the problem without proposing any specific change directly. Remember, an MR also invites discussion, but it’s specific to the proposed change which facilitates focused decision.\nNever ask someone to create an issue when they can default to the merge request.\nStarting with a Merge Request is part of\nHandbook First\nand helps ensure the handbook is up-to-date when a decision is made. It is also how we make it possible for\nEveryone to Contribute\n. This is true, not just for updating the handbook but for updating all things.\nMerge Requests, by default, are\nnon-confidential\n. However, for\nthings that are not public by default\nplease open a confidential issue with suggestions to specific changes that you are proposing. The ability to create\nConfidential Merge Requests\nis also available. When possible, consider not including sensitive information so the wider community can contribute.\nNot every solution will solve the problem at hand. Keep discussions focused by\ndefining the problem first\nand\nexplaining your rationale\nbehind the\nMinimal Valuable Change (MVC)\nproposed in the MR.\nBe proactive and consistent with communication on discussions that have external stakeholders such as customers. It’s important to keep communication flowing to keep everyone up to date. MRs can appear stale if there aren’t recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that MRs are closed in a timely manner through approving or rejecting the open requests.\nHave a\nbias for action\nand\ndo not aim for consensus\n. Every MR is a\nproposal\n, if an MRs author isn’t responsive take ownership of it and complete it. Some improvement is better than none.\nCross link\nissues or other MRs with related conversations. E.g. if there’s a Zendesk ticket that caused you to create a GitLab.com MR, make sure to document the MR link in the Zendesk ticket and vice versa. And when approving or rejecting the MR, include reason or response from Zendesk. Put the link at the top of each MR’s description with a short mention of the relationship (Report, Dependency, etc.) and use one as the central one and ideally close the alternate if duplicate.\nWhen providing links to specific lines of code relevant to the MR,\nalways use a permalink\n(a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see\nLink to specific lines of code\n.\nIf submitting a change for a feature,\nupdate the description with the final conclusions\n(Why an MR was rejected or why it was approved). This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on.\nSubmit the\nsmallest\nviable and valuable thing\n. When proposing a change, submit the smallest reasonable commit, put suggestions for other enhancements in separate issues/MRs and link them. An MR can start off as only a\nproblem description and TODO comments\n. If you’re new to GitLab and are writing documentation or instructions, submit your first merge request for at most 20 lines.\nDo not leave MRs open for a long time. MRs should be\nactionable\n– stakeholders should have a clear understanding of what changed and what they are ultimately approving or rejecting.\nMake a conscious effort to\nprioritize\nyour work. The priority of items depends on multiple factors: Is someone waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? This is detailed in\nEngineering Work flow\n.\nWhen submitting a MVC,\nask for feedback\nfrom your peers. For example, if you’re a designer and you propose a design, ping a fellow designer to review your work. If they suggest changes, you get the opportunity to improve your design and propose an alternative MR. This promotes collaboration and advances everyone’s skills.\nRespond to comments within a\nthreaded discussion\n. If there isn’t a discussion thread yet, you can use the\nReply to comment\nbutton from the comments to create one. This will prevent comments from containing many interweaved discussions with responses that are hard to follow.\nIf your comment or answer contains separate topics, write separate comments for each, so others can address topics independently using the\nReply to comment\nbutton.\nIf you have received any feedback or questions on your MR, try to acknowledge comments as\nthat’s how we ensure we create an environment of belonging for all team members\n. Merging your MR as-is without giving an answer or any response makes the commenters feel their opinions are unheard. If you are the\nDirectly Responsible Individual\n(DRI) who does not have to make a fast decision, you can choose not to change your MR, but you should acknowledge the comments or feedback, consider if they warrant a change to your MR, and\nsay why, not just what\n.\nIf there are many comments, you can choose to summarize key feedback areas and share your response at a high level. We appreciate that\nif you force a DRI to explain too much, you’ll create incentives to ship projects under the radar. The fear of falling into a perpetual loop of explaining can derail a DRI, and cause people to defer rather than working with a bias for action\n. This is something we want to avoid.\nWhen fast decisions are needed,\nwe’ll have to accept that people listened to us but don’t owe us an explanation to have fast decisions based on everyone’s input\n. The goals are to be transparent and collaborative–not to lose efficiency. Not everyone will agree, but we expect all people to\ndisagree, commit, and disagree\n.\nFor GitLab, the product merge request guidelines are in the\nContribution guide\nand code review guidelines for reviewers and maintainers are described in our\nCode Review Guidelines\n.\nEven when something is not done, share it internally so people can comment early and prevent rework.\nCreate a\nDraft\nmerge request to prevent an accidental early merge. Only use Draft when merging it would\nmake things worse\n, which should rarely be the case when contributing to the handbook. Most merge requests that are in progress don’t make things worse. In this case, do not use Draft; if someone merges it earlier than you expected just create a new merge request for additional items. Never ask someone to do a final review or merge something that still has Draft status. At that point you should be convinced it is good enough to go out.\nIf any follow-up actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto-closing the issue.\nIf a project requires multiple approvals to accept your MR, feel free to assign multiple reviewers concurrently. This way the earliest available reviewer can start right away rather than being blocked by the preceding reviewer.\nIf the MR involved gets a lot of comments, you can turn it into a\nManager Mention MR\n.\nConsider recording a concise video or audio file outlining the merge request and uploading it to the GitLab\nUnfiltered channel\non YouTube. This will make content more accessible, prevent future confusion, allow for multitasking (e.g. cooking dinner and listening to the video), and increase participation for folks who digest audio information better than visual.\nScaling Merge Requests through “Manager Mention MRs” (formerly Consolidated MRs)\nSome merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as “Manager Mention MRs” by clearly designating them as such at the beginning of the MR description with the following code block:\n### Manager Mention MR\nThis MR is a [Manager Mention MR](/handbook/communication/#scaling-merge-requests-through-manager-mention-mrs-formerly-consolidated-mrs). Contributors should tag their manager when adding a comment. If managers are tagged they should either respond to the question or summarize and tag their manager.\nAdditionally, add the\n~\"Manager Mention MR\"\nlabel to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation.\nWe tried Manager Mention MR’s for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. We’re starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days’ notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members.\nFor all managers:\nIt is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label\n~\"Manager Mention MR\"\nto be notified when MRs transition to this designation.\nWhat not to do:\nNot communicate to team members about company-wide changes. Ignoring team member questions, whether that’s in a 1:1 or Manager Mention MR.\nWhat to do:\nIf one of your team members has a suggestion, solution or sees an issue, see if talking through the communication will answer any of their questions. Team members are also allowed to bring forward their ideas in the Manager Mention MR addressed to you, we want everyone to contribute. As a manager, you will be expected to communicate changes to your teams and also be present to answer any team member questions, whether that’s in a 1:1 or Manager Mention MR. As a manager, it is part of your role to understand and own change management for your team and properly triage the process and expectations. Consider a synchronous call with the team member for further context, make a suggestion, link to additional context, delete any unnecessary comments from their team, or escalate to the author of the MR. Ensure that the comments of your reports you interact with were made after the Manager Mention label was added.\nFor team members:\nCheck if the MR you are about to comment on has the\n~\"Manager Mention MR\"\nlabel. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question.\nWhat not to do:\nLeaving a comment and CC’ing your manager at the end of your post, but not addressing your manager directly.\nWhat to do:\nAddress your manager directly at the beginning of your message as your comments should be addressed to your manager. If you have a suggestion, solution or see an issue with a big change, you can also bring it up directly to your manager. The MR is not a poll. Give suggestions on how to improve and try to find data that helps support your argument or change in the MR.\nMRs should not start out as a Manager Mention MR as we prefer\ncommunication to be direct\n. They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments.\nWhen an MR is changed to be\nManager Mention\n, the person making this change should add a comment stating this so that everyone tracking the MR can be informed.\nIssues\nIssues are valuable when there isn’t a specific code change that is being proposed, such as:\nCrafting a research proposal to validate a problem or solution\nIdeating on designs in order to solve a particular problem\nBreaking down implementation tasks in order to deliver a solution iteratively\nTracking progress of particular tasks, especially when an issue board is needed\nWhen utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed.\nBelow are a few things to remember when creating issues:\nWhen\nclosing\nan issue leave a comment explaining why you are closing the issue and what the MVC outcome was of the discussion (if it was implemented or not).\nWe keep our\npromises\nand do not make external promises without internal agreement.\nBe proactive and consistent with communication on discussions that have external stakeholders such as customers. It’s important to keep communication flowing to keep everyone up to date. Issues can appear stale if there aren’t recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that issues are closed in a timely manner. One way of doing this is having the current assignee set a due date for when they will provide another update. This can be days or weeks ahead depending on the situation, prioritization, and available capacity that we may have.\nPro Tip:\nWhen creating a Merge Request you can add\ncloses: #[insert issue number here]\nand when the Merge Request is merged, the issue will automatically close. You can see an example of this\nhere\n.\nNote:\nAutomatic issue closing\nis disabled on some projects.\nIf a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if they’d like to elaborate on their idea in an issue to help define the first MVC via a subsequent MR.\nCross link\nissues or MRs with related conversations. Another example is to add “Report: \" lines to the issue description with links to relevant issues and feature requests. When done, add a comment to relevant issues (and close them if you are responsible for reporting back, or reassign if you are not). This prevents internal confusion and us failing to report back to the reporters.\nWhen cross-linking issues or MRs, include a preview of the content you are linking, to facilitate\nlow-context communication\n:\nGood:\nthis would cause performance issue similar to #123456\n. The reader has full information on first read and can refer to the link for more.\nAvoid:\nthis would cause issue similar to #123456\n. The reader needs to click the link and find the relevant information among other discussion threads, before switching back to the original discussion.\nWhen providing links to specific lines of code relevant to the issue,\nalways use a permalink\n(a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see\nLink to specific lines of code\n.\nPrioritize your work on issues in the current\nmilestone\n.\nUse the public issue trackers on GitLab.com for everything since\nwe work out in the open\n. Issue trackers that can be found on the relevant page in the handbook and in the projects under\nthe gitlab-com group\n.\nAssign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step,\nre-assign\nthe issue to that person.\nEnsure the issue\ntitle\nstates what the desired outcome should be. For instance, for bugs make sure the issue states the desired result, not the current behavior.\nRegularly update\nthe issue description with the latest information and its current status, especially when important decisions were made during the discussion. The issue description should be the\nsingle source of truth\n.\nIf you want someone to review an issue, do not assign them to it. Instead, @-mention them in an issue comment. Being assigned to an issue is a signal that the assignee should or intends to work on it. So you should not assign someone to an issue and misrepresent this with a false signal.\nIf you’d like to inform someone about an issue or assign a task to them, do so via an issue comment, not only by adding them to the description. The to-do item generated when you mention someone in an issue description provides little context for the action you’re requesting. But using a comment to explicitly inform someone of the action you’d like them to take ensures that when they read the associated to-do item they won’t need to read the entire issue to gather the context they need to complete the work.\nDo not close an issue until it is\ndone\n. It’s okay to explicitly ask if everyone is on board and in agreement on how to move forward, whether to iterate, close the open issue, or create a subsequent MR to implement a MVC.\nOnce a feature is\ndone\n, update the description to add a link to the corresponding documentation. When using a Search Engine, issues often appear before documentation pages, which makes it harder to find the relevant information about the feature.\nWrite issues so that they exclude private information. This way, the issue can be public. Only use confidential issues, if the issue must contain\nnon-public information\n.\nNote:\nConfidential issues are\naccessible to all members of the project with Reporter access and above\n. You may consider using a Google Doc for items that require a stricter level of confidentiality.\nIf the content within a public issue transitions to become what is deemed confidential\nnon-public information\n, the issue may be made confidential.\nIf the content of a public issue draws comments that are deemed in violation of our\ncode of conduct\nthe issue may be locked and may\nundergo moderation\n.\nHow to make a company wide announcement\nConsider the subject and the audience.\nQuestions you might want to ask yourself: Is this relevant to all team members globally?\nIs this something important, urgent and high priority? Is there a better place for this communication, such as a more informal Slack channel?\nKeep it simple, brief and summarize what is important. Cover the 5 W’s. What, Why, Who, When, Where (you can also add How, if required as a call to action). The majority of information should still be in the Handbook which you include links to.\nCommon company wide announcements include (but are not limited to): organization changes, policy iterations, requests to participate in a company survey, unveiling the next GitLab Contribute location, codebase migrations, process improvement and security/safety announcements.\nRemember Handbook First.\nWhen you announce anything, include links to the respective Handbook pages for more information. Consider adding link to an Issue if the information is not public yet.\nOptional AMA.\nIf desired and appropriate, offer a company wide Zoom call to host an AMA (Ask Me Anything). Oftentimes, questions can be managed within the Discussion tab of a GitLab Issue or Merge Request. For broad announcements, such as registration opening for GitLab Contribute, an AMA may be better suited for a large volume of inquiries. To schedule a company wide call, please make a request in the\n#people-connect\nSlack channel, and include a Google Doc in the invite for questions.\nRemember we are a global company with significant time-zone differences. Unless there is a reason to do otherwise, ensure any time-sensitive calls to action or announcements are made when the whole company has enough time to action. Consider different timezones, non-linear work days, and PTO. Announcements should be made ideally 72 hours (at minimum 24 hours) in advance of a due date. This is to prevent APAC/EMEA team members missing important announcements posted outside their normal working hours.\nSometimes a late announcement is better than none at all, and acknowledging those who will miss it might be a kind gesture, such as “Apologies to our APAC/EMEA friends for the late notice”.\nPosting in #company-fyi\nOur company-wide announcements channel is\n#company-fyi\n.\nIt is an\nannouncement only\nchannel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in\n#company-fyi\nshould not be duplicated in\n#whats-happening-at-gitlab\n. Be mindful of the\nattention economy\n.\nIn order to post or have a message posted in\n#company-fyi\n, please reach out to\nthe internal communications team\nor your function’s executive who can approve the message and post it.\nExamples of what\nshould not\ngo in\n#company-fyi\n(as per new group guidelines):\nCompetition prize winner announcements\nOrg change or new team member announcements (unless they are E-group)\nPromotion of an optional non-company-wide internal event\nAnnouncement that directly impacts less than 75% of team members\nActions required from team members is not critical or timely\nThe above should all go in the new #whats-happening-at-GitLab channel\n(formerly the\n#company-announcement\nchannel).\ngraph TB\neverybody{{\"Do you want to reach the entire company?\"}}\nimportant{{\"How important is it?\"}}\npermission{{\"Do you have permission<br>\nto post in #company-fyi?\"}}\nurgent{{\"Is it urgent?\"}}\nreconsider{{\"Are you sure you can't reach the people you need by posting in topic channels?\"}}\nchannel-important>\"Post in #company-fyi\"]\nchannel-important-ask>\"Ask your function's executive<br>\nto post in #company-fyi\"]\nchannel-general>\"Post in #whats-happening-at-gitlab\"]\nchannel-topic>\"Post in the most topical channel\"]\nrepost([\"Repost in the 1-2 most appropriate channel(s) based on your topic/audience\"])\nno-repost([\"Do not repost\"])\nclassDef question fill: #ECECFF\nclass everybody,important,permission,urgent,reconsider question;\nclassDef action fill: #a2f2a9\nclass channel-important,channel-important-ask,channel-general,channel-topic,repost,no-repost action;\nclassDef repost fill: #f2d3a2\nclass repost,no-repost repost;\neverybody -- Yes --> important\neverybody -- No  --> channel-topic\nimportant -- need-to-know --> permission\nimportant -- good-to-know --> reconsider\npermission -- Yes --> channel-important\npermission -- No  --> urgent\nreconsider -- Yes --> channel-general\nreconsider -- No --> channel-topic\nurgent -- No  --> channel-important-ask\nurgent -- Yes --> channel-general\nchannel-topic --> repost\nchannel-general --> repost\nchannel-important --> no-repost\nchannel-important-ask --> no-repost\nPosting in #whats-happening-at-gitlab\nDue to the volume of posts in the Slack channel, we recommend that you do not use #whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to:\nAnything involving GitLab team member policy, such as changes in benefits, laws, review cycles, etc.\nUrgent matters that can’t wait for #company-fyi but still need to be communicated to everyone such as service outages or last minute event changes\nMeetings\nCommon meeting problems\nMeetings are incredibly expensive since they require synchronous time.\nThe most common meeting problems can all be addressed by following the above guidelines around scheduling meetings.\nSome of the most common meetings problems are outlined below:\nProblem\nSolution\nPresent instead of Q&A\nPre-record presentations on YouTube, so meetings are only Q&A\nMeetings set up for or default to brainstorming\nPeople should default to making thoughtful proposals async and building upon them in meetings, if needed\nNo agenda with edit rights for everyone\nEnsure that every meeting has an agenda and is available for everyone to edit\nPeople are late to meetings or don’t have time to use the restroom between meetings\nUse Speedy Meetings to give people breathing space before their next meeting\nEveryone is responsible for notes\nIf folks are involved in a meeting and have capacity to do so, they should take notes using GitLab’s\nLive Doc Meetings principles\n. This is important, because:\nMeetings at GitLab should have notes (for a single source of truth and to enable async participation among other reasons)\nIn the absence of this joint commitment to note-taking, this is the type of work that is likely to fall disproportionately to\nunderrepresented groups\n. This is not in line with our\ndiversity, inclusion, and belonging value\n.\nIt may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in.\nWhile meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded.\nEngaging EBAs in note-taking\nGitLab Executive Business Administrators\nsometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes.\nCan the folks already in this meeting cover note taking responsibilities, or is there a reason to engage an EBA in this capacity?\nCan other folks be identified ahead of time or at the start of the meeting to ensure adequate coverage?\nHow does this stack against the EBAs other priorities? You can check directly with the EBA or their manager.\nSmart note taking in meetings\nNote taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion.\nConsider the following best practice when taking notes in meetings:\nIf at the start of the meeting, it does not look like all team members will contribute to note-taking, identify a set of note-takers who will be responsible for this activity within the meeting\nUtilize Zoom’s AI Companion to create and/or share a meeting summary. Meeting Summary with Zoom AI Companion uses AI technology, which may include third-party models, and allows meeting hosts to initiate an AI-generated summary of their meeting. When the host enables this feature in a meeting, participants may automatically receive a summary after the meeting ends, if the host chose to share it with them.\nNote-taking can be a lot for a single person to stay on top of–especially when there is a fast moving conversation with many speakers. Team members should still feel empowered to contribute by helping with notes as needed, even if there is someone assigned.\nAnother good reference is the CEO Shadow\nhandbook page tips section\n, specifically\nIt's helpful if shadow one takes notes as the first speaker is talking, then shadow two starts when the next speaker continues the conversation. Shadow one can pick up note taking again when the next speaker contributes. By alternating this way, the shadows are better able to keep up with all the participants in the conversation.\nThis advice can be used in general meetings as well.\nAsk others to scribe answers in real-time to allow the person who asked the question to focus on the answer. Touch up the answer when the conversation has moved on to something less relevant.\nIt can be hard to keep up with the dialog and capture quality notes when there’s fast back and forth conversation. Lead by example and write when you’re not talking, expect others will write when you’re talking.\nFocus on noting speakers and their key points over capturing all words said. Extensive note-taking should not happen at the expense of correct note-taking.\nWrite down your questions\nin the agenda before vocalizing. Always ask people to vocalize their questions to provide the most detailed context and for audio-only playbacks.\nUse discretion in taking notes if sensitive topics are being discussed. For example, do not takes notes on\nnot-public information\nif the agenda may be available to an audience who should not be privy to this information.\nIf someone requests folks to stop taking notes, stop for the duration of the discussion unless there is verbal confirmation that note-taking should resume. Ask for the confirmation before typing before you resume note-taking.\nAt the end of the meeting, clearly capture key takeaways, next steps, and\nDRIs\n.\nIf you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the\n#safe\nSlack channel\nFew meetings with presentations\nPresenting\nduring meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content\nasynchronously\n. Remember it is not required to have a presentation or have a pre-recorded presentation.\nIn the video below, GitLab co-founder, Sid Sijbrandij, explains why there are no presentations in most meetings.\nPre-recorded presentations enable:\nAllows time for Q&A, which enables attendees to have their questions answered without running out of time.\nReinforces GitLab’s\nBias Towards Asynchronous Communication\nbecause it allows a distributed team to consume the presentation asynchronously.\nStrengthens\nself-service and self-learning\nby maximizing the meeting time’s efficiency to ensure that team members have their voices heard during the Q&A.\nStandardizes the approach to meetings across the organization.\nIncludes transcripts that can boost content value, help team members focus, and increase accessibility.\nFlexibility in viewing using rewind and playback speed adjustments.\nEncourages and enables greater participation from\nneurodiverse team members\nwho might take added time to process and reflect before asking questions.\nAllows for selective watching of presentation material for a certain period.\nThere are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following:\nA presentation, with optional attendance and mandatory recording. This will allow clarifying questions to be asked and answered efficiently and enables team members to watch async.\nInclude an async Q&A doc for team members who did not attend the presentation.\nEnsure the async Q&A doc is linked in the YouTube description.\nBest Practices for Pre-Recorded Presentations\nUse Zoom to create a pre-recorded video presentation.\nPost the recording to the GitLab\nUnfiltered YouTube channel\nand attach it to the meeting agenda.\nAt least 24 hours in advance of the meeting, announce in Slack Channels that the meeting has a pre-recorded video, and all attendees are advised to watch beforehand.\nFramework for meetings with presentations\nWhile most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example,\nGitLab Assembly\nor the\nFunctional Leaders Meeting\n.\nGitLab has the following meeting framework for determining which meetings should have presentations:\nPresentation Approach\nTypes of meetings with few participants\nTypes of meetings with many participants\nNo presentations (async prep)\nMost meetings\nAMA\nPresentations\nThese meetings should not happen\nAssembly\nand other large team meetings\nMeeting introduction guidelines\nIntroductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines:\nAgree ahead of time to do introductions so everyone is prepared for it.\nCreate a list of people with their roles in a shared agenda and use that for the introduction sequence.\nEach person should introduce themselves so that everyone can see that person on Zoom.\nThe person introducing themselves hands it over to the next person in the agenda.\nMake sure you’re never screen sharing when people are introducing themselves.\nScheduling meetings\nEvery scheduled meeting should either have a Google Presentation (for example for functional updates that don’t require participation) or a Google Doc (for most meetings) linked. If it is a Google Doc it should have an\nagenda\n, including any preparation materials (can be a presentation). For a step-by-step guide on GitLab meeting best practices, visit our\nLive Doc Meetings page\n.\nNo agenda is required for\ncoffee chats\n. Note that only meetings that are primarily social in nature should be labeled as a coffee chat in the calendar invite.\nA suggested format for 1:1 agendas can be found on the\n1:1 leadership page\n.\nFor team members working in AMER timezones who regularly collaborate with EMEA team members:\nIf all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the\nPST morning block\n.\nThe PST morning block should be reserved for\ncross-regional collaboration\nwith team members whose timezones make it harder for them to meet later in the day.\nFor team members working in AMER timezones who regularly collaborate with APAC team members:\nIf all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the\nPST afternoon block\n.\nThe PST afternoon block should be reserved for\ncross-regional collaboration\nwith team members whose timezones make it harder for them to meet earlier in the day.\nDue to the number of timezones covered in APAC, the\nPST afternoon block\nwill only overlap with the Eastern most APAC countries\nIf you want to ask GitLab team members if they are available for an event please send a calendar invite with Google Calendar using your Google GitLab account to their Google GitLab account. When you add a GitLab team member as a “Guest” in Google Calendar, you can click the See Guest Availability button to check availability and find a time on their calendar. These calendar invites will automatically show up on all parties calendars even when the email is not opened. It is an easier way to ensure everyone has visibility to the meeting and member’s status. Please respond quickly to invites so people can make necessary plans.\nIf you want to check if a team member is available for an outside meeting, create a calendar appointment and invite the team member only after they respond yes. Then invite outside people.\nWhen scheduling a call with multiple people, invite them using a Google Calendar that is your own, or one specific to the people joining, so the calendar item doesn’t unnecessarily appear on other people’s calendars.\nIf you want to move a meeting just move the calendar appointment instead of reaching out via other channels. Note the change at the top of the description.\nPlease click ‘Guests can modify event’ so people can update the time in the calendar instead of having to reach out via other channels. You can configure this to be checked by default under\nEvent Settings\n.)\nWhen scheduling a meeting we value people’s time and prefer the “speedy meetings”\nsetting in our Google Calendar\n. This gives us meetings of, for example, 25 or 50 minutes leaving some time to:\nWrite notes and reflect\nRespond to urgent messages\nTake a\nbio break\nStretch your legs\nGrab a snack\nWhen scheduling a meeting, please try to have it start at :00 (hour) or :30 (mid-hour) to leave common start times available for other meetings on your attendees’ calendars. Meetings should be for the time needed, so if you need 15 minutes just book that.\nWhen creating a calendar event that will be used company wide,\nplease place it on the GitLab Team Meetings Calendar\n. That way the event is easily located by all individuals.\nWhen you need to cancel a meeting, make sure to delete/decline the meeting and choose the option\nDelete & update guests\nto make sure everyone knows you can’t attend and don’t wait for you.\nIf you want to schedule a meeting with a person not on the team please use\nCalendly\n. Use Google Calendar directly if scheduling with a GitLab team member.\nMaterials Review\nare scheduled as all day not busy events as a reminder three days before the scheduled call.\nWhen scheduling recurring meetings, consider using\n(UTC+00:00) Coordinated Universal Time\nas the meeting time zone,\nso that the meeting time does not change for others when your local time zone changes.\nCross-regional Working Hours Recommendations\nIf you’re scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours.\nThe suggested times are organized by the regions that you’re trying to accommodate.\nEach suggested window is shown in the local time zone.\nFor example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time.\nNote: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year.\nEMEA/AMER\nTimezone\nStart\nEnd\nLondon/Lisbon\n04:00 PM\n06:00 PM\nParis/Rome\n05:00 PM\n07:00 PM\nIstanbul/Tel Aviv\n06:00 PM\n08:00 PM\nAbu Dhabi\n07:00 PM\n09:00 PM\nMumbai\n08:30 PM\n09:30 PM\nPacific Time\n08:00 AM\n10:00 AM\nEastern Time\n11:00 AM\n01:00 PM\nAPAC/AMER\nTimezone\nStart\nEnd\nSydney\n09:00 AM\n11:00 AM\nTokyo\n08:00 AM\n10:00 AM\nHong Kong\n07:00 AM\n09:00 AM\nHo Chi Minh\n07:00 AM\n08:00 AM\nPacific Time\n04:00 PM\n06:00 PM\nEastern Time\n07:00 PM\n09:00 PM\nEMEA/APAC\nTimezone\nStart\nEnd\nLisbon/Dublin\n08:00 AM\n10:00 AM\nParis/Rome\n09:00 AM\n11:00 AM\nIstanbul/Tel Aviv\n10:00 AM\n12:00 PM\nMumbai\n12:30 PM\n02:30 PM\nHo Chi Minh\n02:00 PM\n04:00 PM\nHong Kong\n03:00 PM\n05:00 PM\nSydney\n05:00 PM\n07:00 PM\nMulti-session meeting naming\nWhen scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members),\nname them after the topic, appended with a session number based on the order they show up in the calendar.\nTeam members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours.\nAvoid:\nTerms like\nfriendly\nor\nearly\n/\nlate\n, as these terms are overly subjective.\nAn early meeting for one team member might seem late for someone in a different time zone.\nOr a west coast AMER meeting might seem “APAC friendly”, but not to someone in western APAC who is still asleep when the meeting starts.\nUsing\nAMER\n,\nEMEA\n,\nAPAC\n, or\nonly\nunless the meeting is specifically targeting members of that time zone.\nThese terms give the impression that only team members from those timezones are welcome, when people from any timezone with any working style are welcome.\nFor example:\nScheduled time\nPreferred\nAvoid\n07:00:00 UTC\n“All members meeting - Session 1”\n“All members meeting - EMEA/AMER”\n15:00:00 UTC\n“All members meeting - Session 2”\n“All members meeting - AMER/APAC friendly”\n23:00:00 UTC\n“All members meeting - Session 3”\n“All members meeting - APAC/EMEA only”\nVideo calls\nUse video calls if you find yourself going back and forth in an issue/via email\nor over chat. Guideline: if you have gone\nback and forth 3 times\n, it’s time\nfor a video call.\nSometimes it’s better to\nnot\nhave a video call. Consider these tradeoffs:\nIt is difficult (or impossible) to multi-task in a video call.\nIt may be more efficient to have an async conversation in an issue, depending on the topic.\nA video call is limited in time: A conversation in an issue can start or stop at any time, whenever there’s interest. It is async.\nA video call is limited in people: You can invite anybody into an async conversation at any time in an issue. You don’t have to know who the relevant parties are ahead of time. Everyone can contribute at any time. A video call is limited to invited attendees (and those who have accepted).\nYou can easily “promote” an async conversation from an issue to a video call, as needed. The reverse is harder. So there is lower risk to start with an async conversation.\nFor a newcomer to the conversation, it’s easier and more efficient to parse an issue, than read a video transcript or watch it.\nConversations in issues are easily searchable. Video calls are not.\nTry to have your video on at all times because it’s much more engaging for participants.\nDo not worry if you\ncan’t pay attention at the meeting\nbecause you’re doing something else, you are the manager of your attention. The flip-side of being the manager of your own attention is that others should not hesitate to request your attention when it is needed.\nDuring internal calls, it’s okay to eat on video if you’re hungry or the call is during your lunch time (please turn your mic off). To maintain professionalism, if you are presenting or facilitating a customer call please try to avoid eating. If eating during a customer call is unavoidable, please turn off your video and mute your mic.\nYou should ensure that you are properly dressed for all video calls. Properly dressed means that you are wearing clothing that covers the top and bottom parts of your body. We do not have a strict dress code policy, but want to make sure that all participants on video calls feel comfortable. If you cannot be properly dressed for the entirety of the call, you should not join, but watch the recording at a later time.\nHaving pets, children, significant others, friends, and family visible during video chats is encouraged. If they are human, ask them to wave at your remote team member to say\n“Hi in your native language”\n.\nDo not feel forced to have your video on, use your best judgement.\nAdditional points for video calls with customers or partners:\nResults come first. Your appearance, location and background is less important than making customers successful so don’t wait for the perfect time / place when you can engage a customer right away.\nCommunicating that GitLab is an enterprise grade product and service provider is supported by the way you present yourself. Most of the time, if you would not wear something or present yourself in a certain way at a customer’s office, candidate interview, or partner meeting in person then it’s probably not the right choice on a video call with them either.\nGreen screens are a great background solution. It’s great to work in your garage or basement! Just get a green screen behind you and put up a professional background image to present well externally and still use the rest of the room how you want!\nWe prefer\nZoom\n.\nGoogle Calendar also has a\nZoom plugin\nwhere you can easily add a Zoom link for a video call to the invite.\nFor meetings that are scheduled with Zoom:\nAfter reviewing our\nZoom\nhandbook page, if you have additional questions, please contact IT in the\n#it_help\nSlack channel.\nNote that if you select to record meetings to the cloud (setting within Zoom), you must include the text\n[REC]\nin the meeting title if you want them to be automatically placed in the\nGitLab Videos Recorded\nfolder in Google Drive on an hourly basis via a\nscheduled pipeline\n.\nYou can find these videos in Google Drive by looking under\nShared drives\nand\nGitLab Videos Recorded\n. If you do not have access to this drive, contact\nIT Ops\n.\nThe\nscript for syncing the files is here\n.\nNote also that after a meeting ends, Zoom may take some time to process the recording before it is actually available. The sync to Google Drive happens on the hour mark, so if the recording is not available, it may take another hour to be transferred.\nConsider using a utility to easily mute/unmute yourself, see\nShush\nin the tools section.\nHybrid calls are annoying\n.\nAlways be sure to advise participants to mute their mics if there is unnecessary background noise to ensure the speaker is able to be heard by all attendees.\nWe start on time and do not wait for people. People are expected to join no later than the scheduled minute of the meeting (before :01 if it is scheduled for :00). The question ‘is everyone here’ is not needed.\nIt feels rude in video calls to interrupt people.\nThis is a situation where we have to do something counter intuitive to make all-remote meetings work.\nIn GitLab, everyone is encouraged to interrupt the speaker in a video call to ask a question or offer context.\nWe want everyone to contribute instead of a monologue.\nInterrupting can be done by clicking “Raise Hand” in Zoom, by physically raising your hand on video, or by interrupting verbally.\nAs a speaker, allow yourself to be interrupted.\nAs a listener, advocate (verbally if necessary) for those who have raised their hand.\nJust like in-person meetings be cognizant of when, who, and how you interrupt, we don’t want\nmanterrupting\n.\nWe end on the scheduled time. It might feel rude to end a meeting, but you’re actually allowing all attendees to be on time for their next meeting.\nDo not use the chat of products like Zoom to communicate during the call, use the linked document instead. Zoom Chat has been configured for a 30 day retention. This allows everyone to contribute additional questions, answers, and links in the relevant place. It also makes it easier for people in conflicting timezones to contribute questions before the call and makes it easier to review questions and answers after the call, which can be before watching the recording.\nYou do not need to remind other people to vocalize their questions. Just say their name and a keyword of the question, e.g. ‘Jay about credit-cards’.\nEvery comment is document worthy, even small support comments such as\n+1\nor\nVery Cool!\n.\nWe encourage the recording and\nsharing of everything to our YouTube Unfiltered channel\n.\nIt is unusual to smoke in an open office or video conference, vaping is associated with this. For this reason we ask that you don’t vape during calls, and if you absolutely have to, kindly switch your camera off.\nSpeak up when you notice something is not working. If you notice someone’s microphone, web cam or latency is causing issues for them it is good to speak up. On a video call it can be harder for the speaker to notice that they aren’t being understood compared to a face to face conversation. As such you will be doing them a favour by speaking up early to let them know that they are having a problem. Also see\nHear nothing say something\nfor further explanation.\nYou are the manager of your attention\nYou are the manager of your attention, and you decide when you do or don’t pay attention in a meeting.\nYou will always have more work than time in your life.\nIf you get invited to a meeting you don’t think you should go to, you should decline the meeting.\nIt is better to cancel than to show up and not pay attention.\nOn the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call.\nIf you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call.\nIf you get asked a question when you’re not paying attention, it is an okay use of time to repeat a question every now and then.\nIf training is required for one’s role, team members should plan to give the training full attention–especially if engagement in discussions or breakout rooms is required. If training is ’nice to learn’ or ‘optional’ for team members, multi-tasking can be done at the team members discretion.\nWe don’t use the first 15 minutes of a meeting to read the materials like they\ndo at Amazon\n. You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials.\nMeetings start on time at GitLab.\nDo not use your camera to signal you’re not paying attention;\ncameras should always be on\n.\nDo not ask meeting attendees to pay attention\nThere are too few hours in a week, so we expect each team member to\nmanage their attention\n. If you’re hosting a meeting, don’t tell people to give you their attention or stop multi-tasking. Respect each team member’s agency over their time. Instead of demanding attention, earn participants’ attention by organizing and facilitating meetings so they are compelling to attendees.\nFirst post is a badge of honor\nYou should take pride in being the first person to add a question to a\nmeeting agenda, however unlike\nthe First post\nmeme we do want the first post to be\nmore than just “First!”. The meeting DRI will be happy to see there is a\nquestion ready before to kick off the meeting. The Meeting DRI should remember\nto thank the person for asking the first question.\nDo not do a countdown before ending a call\nNever do a countdown or say something like. “I’ll give it x seconds”, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call.\nHybrid calls are annoying\nIn calls that have remote participants everyone should use their own equipment (camera, headset, screen).\nWhen multiple people share equipment the following\nproblems arise for remote participants\n:\nCan’t hear the sharing people well\nBackground noise since the microphone of the sharing people is on all the time\nCan’t clearly see facial expressions since each face takes up only a small part of the screen\nCan’t easily see who is talking since the screen shows multiple people\nHard getting a word in since their delay is longer than for the sharing people\nThe\npeople sharing equipment also have problems\nbecause they don’t have their own equipment:\nCan’t easily screen share something themselves\nTrouble seeing details in screen sharing since the screen is further away from them\nCan’t scroll through a slide deck at their own pace\nSharing people can’t easily participate (view or type) in a shared document with the agenda and meeting notes.\nThe disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people.\nThe disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience.\nThe extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy.\nTheoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms:\nIt is annoying to first hear someone talk in the room and then hear it over audio with a delay.\nIt is hard to consistently mute yourself when not talking to prevent someone else’s voice coming through your microphone as well.\nTypes of meetings\nAsk Me Anything meetings\nAsk Me Anything meetings\ncan be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change.\nFormat: AMAs use the whole meeting time for questions from attendees, answered by the host.\nFireside Chats\nFireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting.\nFormat: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees.\nWalk and Talk calls\nA Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a\ncoffee chat\nand a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If it’s a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with\nincreased focus and creativity\n. A Walk and Talk can also help prevent\nZoom fatigue\n.\nThe team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members’ schedules. We’ve created a Slack channel #walk-and-talk-meetings where, if you’d like, you can share pictures from your walking meetings.\nRelease retrospectives and kickoffs\nAfter GitLab releases a new version\nevery month\n, we have a\n30-minute call a few days later reflecting on what could have been\nbetter:\nWhat went well this month?\nWhat went wrong this month?\nWhat could we have done better?\nWe spend the first part of the retrospective meeting reviewing the action\nitems from the previous month.\nOn the 8th of each month (or the next business day), we have a kickoff meeting\nfor the version that will be released in the following month. The product team and other leads will have already had\ndiscussions on what should be prioritized for that release. The purpose of this kickoff is\nto get everyone on the same page and to invite comments.\nBoth the retrospectives and kickoffs are\nlive streamed to our GitLab Unfiltered YouTube channel\nand posted to our\nUnfiltered YouTube channel\n.\nDeep Dives\nAs GitLab continues to grow, sharing knowledge across the community becomes even more important.\nThe\nDeep Dives page\ndescribes initiatives we are trying to encourage.\nThis aligns with how we work since everything at GitLab is\npublic by default\n.\nDaily Sync Escalation Process\nGitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the\ninternal handbook\n.\nPresentations\nAll presentations are made in Google Slides using\nour templates\n.\nPlease allow anyone at GitLab to edit the presentation (preferred) or at least comment on the presentation.\nIf the content can be public use File > Publish to the web > Publish to get a URL and paste that in the speaker notes of the first slide (commonly the title slide).\nThe title of every slide should be the message you want the audience to take away, not the subject matter. So use ‘Our revenue more than doubled’ instead of ‘Revenue growth’.\nSlide titles should not be more than one line. Be concise in highlighting the key point that you want to make.\nDo not add a period at the end of a title.\nDuring introductions, make sure that nobody is presenting. We remember people better and have more empathy when we clearly see peoples faces and expressions.\nAt the end of the presentation, when you go to Q&A, stop presenting in Zoom. This way the other people can see the person who is speaking much better.\nAll presentations at GitLab should be based on screenshots of the handbook, issues, merge requests, review apps, and data from GitLab Insights and Sisense charts. In most cases it shouldn’t be needed to make content uniquely for the presentation. If you need something that doesn’t exist yet add it to the place it belongs and then copy it into the presentation. This way we can have a\nSingle Source of Truth\nfor everything we do. By using screenshots you indicate to people you did the right thing and they can find the canonical source in the appropriate place. Having to find information by digging through old presentations doesn’t scale. Consider linking the screenshot to the original source.\nDo not use cumulative graphs internally. For example total ARR, total user, total contributors, or total Merge Requests. Instead use IACV per dollar spend, users added per month, contributions per month, or\nMR rate\n. Cumulative graphs can\nhide trends\nand are\nfar more likely to be misinterpreted\n. The only acceptable use of cumulative graphs is for external presentations where they are expected by the audience and commonly used.\nWhen your presentation includes graphs or other data, make sure your graphs have clear titles and dimensions. Make sure your data has significant figures and labels. For example, use ‘January: 1.95M projects’ instead of ‘January: 1.95M’. Keep in mind that your audience may not have the full context, especially if they are reading the presentation asynchronously.\nWhen giving a presentation, your commentary should not be a regurgitation of the words in the slide. The audience can read the slide for themselves; your commentary should focus on the most important takeaways.\nVideo and presentation tips with Lorraine Lee\nOn 2022-01-20, the L&D team hosted\nLorraine Lee\nfor a live speaker series on video and presentation techniques in an all-remote workspace.\nKey points addressed in the training include:\nIncrease your confidence on video\nusing lighting, visuals, and curating your environment\nKeep your audience engaged\nwith movement, power words, and the think/do/feel matrix\nStay connected with your audience\nby smiling, making eye contact, and framing yourself in video\nInsert energy\nby standing up, projecting, and using hand gestures\nWatch the replay below:\nWriting style guidelines\nAs you’re creating external or business content for GitLab, please refer to the\nGitLab Content Style Guide\n. For technical content, you can reference\nthis word list\n.\nThis list offers additional guidance for written communication at GitLab:\nDo not use rich text, it makes it hard to copy/paste. Use\nMarkdown\nto format text that is stored in a Git repository. In Google Docs, use “Normal text” using the style/heading/formatting dropdown and paste without formatting.\nRead our\nMarkdown Style Guide\nfor more information when using Markdown.\nDo not use ALL CAPS because it\nfeels like shouting\n. However, there is the\n#all-caps\nSlack channel\nfor your good-natured shouting needs.\nWe use Unix style (\nlf\n) line endings, not Windows style (\ncrlf\n), please ensure\n*.md text eol=lf\nis set in the repository’s\n.gitattributes\nand run\ngit config --global core.autocrlf input\non your client.\nWhen specifying measurements, please include both Metric and Imperial equivalents.\nWhen mentioning currency amounts that team members may need to convert to their local currency (e.g. benefits, expenses, or bonuses), link those amounts to our\nExchange Rates\nsection (e.g.\n500 USD\n).\nMonetary amounts shouldn’t have one digit, so prefer $19.90 to $19.9.\nGitLab is an internationally diverse company. US-based team members should not refer to team members outside the US as “international”. Instead, use “non-US”. Please also avoid the use of “offshore/overseas” to refer to non-American continents.\nIf you have multiple points in a comment or email, please number them. Numbered lists are easier to reference during a discussion over bulleted lists.\nWhen you reference an issue, merge request, comment, commit, page, doc, etc. and you have the URL available, please include it.\nIn making URLs, always prefer hyphens to underscores, and always use lowercase.\nThe community includes users, contributors, core team members, customers, people working for GitLab Inc., and friends of GitLab. If you want to refer to “people not working for GitLab Inc.”, just say that, and don’t use the word “community”. If you want to refer to people working for GitLab Inc., you can also use “the GitLab Inc. team”, but don’t use “GitLab Inc. employees”.\nWhen we refer to the GitLab community (excluding GitLab team members), please say “wider community” instead of “community”.\nAll people working for GitLab (the company) are the\nGitLab team\n. We also have the\nCore team\nthat consists of volunteers.\nPlease always refer to GitLab Inc. people as GitLab team members, not employees.\nUse\ninclusive and gender-neutral language\nin all writing.\nAlways write “GitLab” with “G” and “L” capitalized, even when writing “GitLab.com”, except within URLs. When “gitlab.com” is part of a URL, it should be lowercase.\nDo not use a hyphen when writing the term “open source” except where doing so eliminates ambiguity or clumsiness.\nIf an email needs a response, write the answer at the top of it.\nUse the future version of words, just like we don’t write internet with a capital letter anymore. We write frontend and webhook without a hyphen or space.\nOur homepage is\nhttps://about.gitlab.com/\n(with the\nabout.\nand with\nhttps\n).\nIf you use headers, properly format them (\n##\nin Markdown, “Heading 2” in Google Docs); start at the second header level because header level 1 is for titles. Do not end headers with a colon. Do not use emoji in headers as these cause links to have strange characters.\nDo not use acronyms when you can avoid them. Acronyms have the effect of excluding people from the conversation if they are not familiar with a particular term. Example: instead of\nMR\n, write\nmerge request (MR)\n.\nIf acronyms are used, expand them at least once in the conversation or document and define them in the document using\nKramdown abbreviation syntax\n. Alternatively, link to the definition.\nIf you don’t know the meaning of an acronym, ask. It’s always ok to\nspeak up\n.\nCommunicating dates and time\nFor external content, refer to the guidance in the\nGitLab Content Style Guide\n.\nFor internal content, use ISO dates:\nyyyy-mm-dd\nFor months, use\nyyyy-mm\n, so 2018-01 for January.\nRefer to a year with CY18 (never with 2018) and a quarter with CY18-Q1 to prevent confusion with fiscal years and quarters. If the year is obvious from the context it is OK to use Dec 4, but not 12/4.\nGitLab operates on a\nFiscal Year\noffset from the calendar year. When referring to a fiscal year or quarter, please use the following abbreviations:\n“FY20” is the preferred format and means: Fiscal Year 2020, the period running from February 1, 2019 through January 31, 2020\n“Q1” = the first quarter of the current Fiscal Year, so on Feb 1, 2020, “Q1” is the period from Feb. 1, 2020 through April 30, 2020. Note that Epics in GitLab follow Calendar Years and Quarters.\nWhen referring to a quarter in a future or past year, combine the two above: “FY21-Q1”\nWhen financial data is presented, include a note to indicate fiscal year (e.g. “Fiscal Year ending January, 31 ‘YYYY”)\nFor time formatting guidelines, refer to the\nGitLab Content Style Guide\n.\nPlease remember that not everyone is working in the same timezone; what may be morning for you is evening for someone else. Try to say 3 hours ago or 4 hours from now, or use a timestamp, including a timezone reference.\nDon’t use “EOD” or “end of day” (“COB” or “close of business”, “EOB” or “end of business”), unless you are okay with a deliverable being due at the end of\nanywhere on earth\n. Team members communicate across timezones, where “end of day” does not specify the exact date and time. When you want something due at a specific time,\ncommunicate the date and time\nby when the request should be done, for example:\nPlease review before 2023-06-10 5PM PT\n.\nVisuals\nMany times an explanation can be aided by a visual.\nWhenever presenting a diagram, we should still allow everyone to contribute.\nWhere possible, take advantage of the handbook’s support for\nMermaid\n. If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the\nMermaid Live Editor\ncan be a helpful tool.\nWhere taking advantage of Mermaid isn’t possible, link to the original in our Google Drive so that the diagram can be edited by anyone.\nUbiquitous language\nAt GitLab we use\nubiquitous language\nto increase communication efficiency.\nThis is defined in\nDomain-driven design\nas: “A language structured around the domain model and used by all team members to connect all the activities of the team with the software.”\nWe use it for activities in GitLab, even ones not implemented in software.\nBy having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to\nparts of our organization\nas a function, department, or group depending on exactly what is meant.\nMake sure that domains don’t overlap, for example\norganization size\nand\ndeal size\ndon’t reuse words to prevent overlap.\nIf a term is ambiguous don’t use it, for example our hiring team uses the terms\nroles\nand\nvacancies\n, but avoid the ambiguous word\njob\n.\nMake sure that projects and working groups have clear and direct names. Prefer “CI Spend Reduction Working Group” to “Project Raven Working Group”.\nMake sure that people can infer as much as possible from the word, for example our\nsubscription options\nallow you to know if someone is using self-managed or GitLab.com.\nMake sure terms don’t overlap without clearly defining how and why, for example see our\ntier definitions\n.\nKeep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often.\nMECEFU terms\nMECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language.\nYou pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his\nkung fu\nor soccer fu skills.\nWe want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency:\nMutually Exclusive: nothing is referenced by more than one term\nCollectively Exhaustive: everything is covered by one of the terms\nFew words: the longer terms are the more likely it is people will not use all of them and cause confusion, therefore consider two words as the upper limit for a single term. Avoid acronyms because they are hard to remember (we’re open to a few words to replace MECEFU as an acronym :)\nUbiquitous language:\ndefined above\nAn example of a MECEFU term is our\nsales segmentation\n:\nMutually Exclusive: There is no overlap between the numbers and there is a single dimension.\nCollectively Exhaustive: Everything for 0 to infinite employees is covered.\nFew words: Mid-market is a natural combination and SMB is abbreviated.\nUbiquitous language: We’re not using the word ‘Enterprise’ which already can refer to our Enterprise Edition distribution.\nOne nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar.\nSimple language\nSimple Language is meant to encourage everyone at GitLab to simplify the language we use.\nWe should always use the most clear, straightforward, and meaningful words possible in every conversation.\nAvoid using “fluff” words, jargon, or “corporate-speak” phrases that don’t add value.\nWhen you\ndon’t\nuse Simple Language, you:\nConfuse people and create a barrier for participants of your conversation.\nCause others to not speak up in a meeting because they don’t understand what you’re saying.\nAre not inclusive of those whose first language is not English.\nDo not add value with your words.\nWhen you\ndo\nuse Simple Language, you:\nGet work done more efficiently.\nBuild credibility with your audience (your team, coworker, customer, etc.).\nKeep people’s attention while you’re speaking.\nCome across more confident and knowledgeable.\nHere’s an example:\nOriginal sentence\nWe’re now launching an optimization of our approach leveraging key learnings from the project’s postmortem.\nA Simple Language sentence\nWe’re creating a new plan based on what we learned from this project.\nSimple Language is important both when we’re speaking to other team members and when we’re representing GitLab to people outside the company.\nBe sure to use Simple Language in written communications as well.\nOur handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective.\nCorporate marketing maintains guidelines on\nGitLab’s tone of voice\n.\nInstead of…\nTry…\nGetting buy-in/Getting alignment\nAsking for feedback since DRIs make decisions\nSynergy\nEffective Collaboration\nGet all your ducks in a row\nBe organized\nDo not let the grass grow too long\nWork quickly\nLeverage\nUse more explicit phrasing- debt, etc.\nSend it over the wall\nShare it with a customer\nBoil the ocean\nWaste time\nPunt\nMake less of a priority\nHelicopter view/100 foot view\nA broad view of the business\nTurtles all the way down\nCascade through the organization\nWhen someone has spare/extra cycles\nWhen someone is available\nInefficient things shouldn’t sound positive\nFor example, do not suggest that you’re “working in real-time” when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving.\nDo not use a cool term such as “tiger team” when the\nexisting term of “working group”\nis more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isn’t to use flowery language.\nThe last example is when we used ‘Prioritizing for Global Optimization’ for what we renamed to headcount reset. When we\nrenamed it\nwe saw a good reduction in the use of this disruptive practice of moving people around.\nUsing additional languages\nUsing American English as our standard language supports our values such as efficiency, results, and transparency.\nCareful use of another person’s language can be a celebration of diversity and build an atmosphere of inclusion.\nThe guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind:\nUse of an additional language is optional.\nStick to the few simple phrases in the table below.\nAlways include the language used and a translation to English.\nTeam members can choose to indicate the languages they speak in their Slack profile.\nWhen in doubt, use American English.\nHere’s an example:\nHey @nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo Māori: great work / well done!)\nありがとうございます (Japanese: thank you very much) for the review @cynthia!\nLanguage\nHello\nThank you\nGreat work / well done\nCroatian\nHvala\nJapanese\nありがとうございます\nTe Reo Māori\nKia ora\nNgā mihi\nKa mau te wehi!\nAvoid using Git in Project Names\nAvoid using\nGit\nin the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become\nThe DevOps Platform\n.\nEmail\nWe have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines:\nSend one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items).\nAlways reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done.\nIf you’re sending an email to a large group of people (or a distribution list), put those recipients in BCC (rather than in the “To” field) so that a reply all won’t ping hundreds of people.\nIf you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYC (for your consideration). If you forward an external request with FYC it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not, the terms comes from\nmovie promotion to voters\n.\nEmail forwarding rules are specified in the shared\nEmail, Slack, and GitLab Groups and Aliases\nGoogle Doc accessible only to people in the company. If you want to be added or removed from an internal alias, change a rule, or add a forwarding email alias, please\nsuggest an edit\nin the doc and\nsubmit a new access request\n.\nOnly Google Workspace domain admins are allowed to provision Google Groups and email distributions.\nEmails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek.\nIf an email is or has become\nurgent\nfeel free to ping people via chat referencing the subject of the email.\nIf you or your team needs to send an email to a group of team members, not grouped in a current\nGoogle email group\n, and specifically related to personally identifiable information (location, state, country, etc.) please contact a Total Rewards Analyst at total-rewards@gitlab who can create an email list from Workday data, with approval.\nWhere appropriate, consider using professional salutations including Hi or Hello and avoid colloquial expressions such as Hey, Oh, or Sup. Sometimes only the person’s name is suitable. The level of formality should often mirror the formality from previous messages when communicating with internal team members as well as external persons.\nTry to always use a person’s name when starting or responding to a message, especially if there are multiple persons cc’d, so that the addressee knows you are addressing them.\nMake sure all relevant letters and words that need capitalization are capitalized, such as the start of sentences or the word “I”.\nProofread your messages so that sentences are punctuated correctly, typos are fixed, and grammar is corrected. Consider using the really helpful\nGrammarly\ntool - this tool is great for both native English speakers and for those who use English as an additional language.\nAll messages and replies are signed with a professional send-off (ex. Best regards), your name, and your signature block.\nSlack\nSlack is used for:\nInternal-only communication and announcements impacting all team members\nLinking a GitLab Issue or Merge Request (confidential if necessary) where discussion can take place is encouraged when sharing announcements on Slack\nConsider creating a\nManager Mention MR\n, so that we can collaborate with Efficiency and Transparency across threads\nCompany newsletters and team updates\nAsynchronous team standups, questions, and quick collaboration\nInformal communication\nUse a\nbias for action\nto quickly move conversations that require collaboration and action out of Slack and into an issue.\nOnly 90 days of Slack activity will be retained, so Slack should specifically NOT be used for:\nObtaining approvals\nDocumenting decisions\nStoring official company records or documents\nSharing personal or sensitive information regarding any individuals\nInternal Slack messages between team members are still considered professional communication. Please do not use or add emoji’s to Slack that are of a political, religious or of a sexual nature. You can refer to the\nReligion and politics at work\nsection of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your\nPeople Business Partner\n.\nThere is a lot of information pertaining to Slack, as it is a critical part of GitLab’s communication. See the\nSlack tools and tips page\n.\nGeneral guidelines\nEveryone can contribute, and while opinions are important to provide perspective, we value\nproposals\nand\niteration\n. If the subject is of value to the wider community, consider commenting on an existing issue or opening a new\nmerge request\ninstead.\nUse the\n:white_check_mark:\nemoji or similar to indicate an inquiry has been answered. Anyone can add the emoji. If you’re not sure, then feel free to leave it up to the person who asked. An emoji indicator is particularly helpful in channels where lots of questions are posted, such as\n#questions\n, and\n#git-help\n.\nIn general, you can think of emoji reactions as equivalent to body-language responses we use in real-life conversations, such as nodding your head as encouragement when a verbal (or in Slack, written) response might be too much. However, please be aware that use and understanding of emoji, like body-language, is not universal. Others may not communicate via those means the same way that you do, particularly those who are Autistic or otherwise neurodivergent. If in doubt, you can use text to clarify.\nIn both public and private channels,\nthreads\nare valuable for keeping conversations together. If you want to respond to a question or comment in a channel, please start a thread instead of responding below them in the channel. This helps to keep the discussion in one place where it is easy to follow, and reduces noise as each message in a thread does not result in an unread message for everyone in the channel.\nUnless you’re in an active chat, don’t break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use\nthreads\nif you want to provide extra info to the question/comment you posted.\nIf you are having a hard time keeping up with messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to\nPreferences > Notifications > When I'm not active on desktop...\nand “send me email notifications.”\nIf you agree in a message to start a video call (typically by asking “Call?”) the person that didn’t leave the last comment starts the call. So either respond to the “Call?” request with a video link or say “Yes” and let the other person start it. Do not say “Yes” and start a call 5 seconds later since it is likely you’ll both be creating a video call link at the same time.\nAs an admin of the Slack workspace, if given the option to\n“Disable future attachments from this website”\nwhen removing an attachment from a message\nthis will block the link/domain from\nunfurling\nin the entire Slack workspace\n. Be careful and deliberate when choosing this option as it will impact every user in the workspace.\nWhen referencing a Slack thread in a GitLab.com issue, don’t\nonly\nlink to the thread. Not only will people outside of the GitLab organization be unable to access the content, but the link will expire after the Slack retention period expires. Instead:\nReview the contents\nfor confidentiality of users, customers, or any other sensitive information before posting.\nCopy and paste the relevant parts of the thread into the issue using blockquote formatting.\nLink to the Slack thread and include\n(internal)\nafter the link. For example:\nhttps://gitlab.slack.com/archives/C0AR2KW4B/p1555347101079800\n(internal)\nPost a link to the issue note in the Slack thread to let others know that discussion has moved to the issue.\nWhen selecting your Slack display name, please do not have your name in all capital letters as this is often\nassociated as shouting\nin written communications.\nAvoid direct messages\nNote:\nWe don’t use the term\nprivate message\n, because these\ndirect messages\nare not inherently\nprivate\nlike a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as\ndirect messages themselves\n.\nWhen using Slack for work-related purposes, please avoid direct messages.\nDirect messages discourage collaboration\n. You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed.\nIf someone sends you a work-related direct message, it is okay to let them know you’d like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like:\nIn the direct message:\nThanks for reaching out, that's a great question/idea I think the rest of the team could benefit from. I'm going to move this to #public-channel based on [our desire to avoid direct messages](/handbook/communication/#avoid-direct-messages)\nIn the appropriate public channel:\n@Person asked \"question\" in a DM, pulling that out here if anyone else has input.\nAnswer the question in a thread on that channel message, allowing others to benefit.\nIf you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like:\nPlease consider posting in a public channel before direct messaging\nWhy direct message me when you can post in a public channel?\nIf you must send a work-related direct message, don’t start a conversation with “Hi” or “Hey” as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., “I’m having trouble understanding issue #x, can we talk about it quickly?”.\nDo not use group direct messages\nUse private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you can’t add people to the conversation. This is a hindrance to collaboration and transparency.\nConsider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use.\nAs we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820.\nAs a result, there is a natural tendency for people to prefer private channels of communication.\nThe intentions are good, as people are looking to reduce noise for others, but this can lead to the same problems as described elsewhere on this page, notably:\nCommunication is siloed.\nAs we grow, people may be reaching out to the wrong person.\nIf you have a question, other people might have it too.\nSlack is our primary source of chat communication and is where many personal interactions happen.\nWe want to continue to encourage folks to build personal relationships with one another which will often happen over DMs.\nUse public channels\nIf you use Slack and plan to message 3 or more people, we recommend a channel for customer/issue/project/problem/partnership.\nLearn about\ncommon channels and channel-naming conventions\n.\nIf something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without\n@\n-mentioning the team.\nIt’s not rude to leave a channel. When you’ve had your questions answered or are no longer interested, feel free to leave the channel so it won’t distract you anymore.\nThe usage of ChatBots for integrations can sometimes depend upon the name of the channel. You should consult the channel about such integrations before changing the name of commonly used/popular channels to avoid inadvertently breaking integrations.\nBe respectful of others’ time\nStart by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. It’s about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration.\nThe following tips provide ways to work respectfully with others given this context, though is not an exhaustive list:\nIf you’re only referring to someone, but don’t actually need their attention, and want to spare them from getting notified, spell out their name normally without\n@\nmentioning them.\nYou also do not need to\n@\nmention someone if they are part of a Slack thread unless you need their attention (for them to review, respond, etc.), since Slack has a dedicated view for threads.\nSlack messages should be considered asynchronous communication, and you should not expect an instantaneous response; you have no idea what the other person is doing.\nDo not feel obligated to respond to Slack messages when you are not working.\nFeel free to send a colleague a link to these guidelines if the communication in Slack should be done\nasynchronously\n.\nPlease avoid using @here or @channel unless this is about something urgent and important.\nIn chat, try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions, you make it harder to respond to personal mentions promptly since people get pinged too frequently. Additionally, if you are planning to\n@mention\na specific team (\nSlack User Group\n), consider the size of the group you are mentioning (\nsee group membership\n) and the impact of pinging all of these people for the particular situation. If something is urgent and important:\nUse\n@here\nto notify all currently\nactive\nmembers in the room. Please only use\n@here\nif the message is important\nand\nurgent.\nUse\n@channel\nto notify\nALL\nmembers in the room, irrespective of away status. Please only use\n@channel\nif the message is important\nand\nurgent.\nIf you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message.\nQuestions\nIf you have a question that you can’t find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the\ndesignated slack channel\nto ensure your question is addressed.\nIf your question doesn’t relate to any of the existing topics:\nAsk it in the\n#questions\nSlack channel\nOnce you receive an answer, document it in the handbook and post the MR link in your question thread\n✔️ once you’ve been helped\nWhen would GitLab use Corporate Export?\nThe times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slack’s policy, which can be found\nhere\n.\nExamples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in\nSlack’s documentation\n.\nAre my direct messages and private channel conversations completely private?\nNo. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its\nEmployee Privacy Policy\n, including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims.\nPlease keep\nGitLab values\nin mind when communicating directly with other team members.\nIf you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call.\nFor additional questions, please address in the\nissue\n.\nEmergency chat\nSlack is down\nTo use the “Slack Down!” group chat on Zoom:\nIn the Zoom desktop app go to the\nTeam Chat\ntab\nClick\n+\nClick\nJoin a Channel\nSearch\nSlack down!\nClick\nJoin\nOnce service is restored, go back to Slack.\nZoom is down\nTo use Slack Huddle:\nNavigate to the appropriate Slack channel or direct message.\nUse\n/huddle\nto trigger a huddle, which supports both audio and video calls.\nYou may need to give permissions if it’s the first time you are using Slack calls.\nOnce service is restored, go back to Zoom.\nSlack and Zoom are down\nJoin the\nSlack Down!\nroom on Hangouts Chat.\nOnce service is restored, go back to Slack and Zoom.\nTypes of documents\nGoogle Docs\nNever use a Google Doc / Presentations for something non-confidential that has to end up on the website or the\nhandbook\n. Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook.\nGoogle Docs can be useful when rapidly\niterating\n/commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that won’t be referred to beyond 2-3 weeks, it can remain in a Google Doc or\npresentation\n.\nPageless is the GitLab preferred format\nGoogle Docs\nPageless format\nis the preferred format for company documents that won’t be printed. If you set your\ndefault to Pageless\nthen this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See\nGood practices and helpful tips\nfor help navigating the pageless format.\nLink sharing\nIf you\ndo\nneed a Google Doc, create one with your company Google Workspace (formerly G Suite)\naccount and set the visibility, access controls and searchable flag according to the following guidelines.\nThe recommended defaults when sharing a document for GitLab internal purposes is setting visibility to\nGitLab\n, access to\nEditor\nand searchable\nCan find in search results\nto ensure everyone can contribute!\nNote:\nTo our knowledge, it is not possible to set the default to\nCan Edit\nand you have to change the permissions from\nView\nmanually. We hope that Google adds this capability in the future.\nVisibility Setting\nUse Cases\nAnyone with the link\nAvoid this setting. Instead, choose\nGitLab\n, then explicitly share the document with desired external individuals. Only use this if you want the document to be public but not indexed by Google.\nGitLab (Recommended Default)\nThis is the recommended default as it allows anyone within GitLab to easily discover documents via searching for their name within Drive.\nRestricted\nWhen the document contains highly sensitive or private information such as 1:1s with direct reports\nSearchable Setting\nEffect\n————–\n———\nCan find in search results.\nmakes the file available to anyone with a PeppGitLaberdine Google account and discoverable within GitLab Google Drive’s search feature.\nMust have link to access\nmakes the file available to anyone with a GitLab Google account who has the link.\nAccess Setting\nUse Cases\n————–\n———\nEditor\nAnyone that can view the document can edit it. This is the recommended setting when\nOn - GitLab\nis enabled for the document\nCommenter\nAnyone that can view the document can add a comment but cannot edit the document. This is ideal if you want to provide visibility but retain more fine-grained control of document editing.\nViewer\nIndividuals with access to the document will only be able to view it.\nReference Google’s\ndocumentation\non Link Sharing to learn more.\nGood practices & helpful tips\nIf you have content in a Google Doc that is later moved to the website or handbook,\ndeprecate the Google Doc\n.\nWhen referring to a Google Doc or folder on the Google Drive in the handbook, refrain from directly linking it. Instead, indicate the name of the doc. If you link the URL people from outside the organization can request access, creating workload and the potential for mistakes. (In the past, linking a Google Doc has led to inadvertently opening the sharing settings beyond what was intended.) This also helps prevent spam from people outside GitLab requesting access to a doc when clicking its link. To save people time you can also\nlink to the search results page\nwhich allows people to quickly get to the doc without anyone being able to request access. If there are multiple documents showing up in the search, you may filter your\nsearch link by adding the owner.\nIf you are having trouble finding a shared Google Doc, make sure you\nSearch <your domain>\nin Google Drive.\nIn our handbook, if you find yourself wondering whether it is better to provide a public link to a Google Doc vs. writing out the content on the website, use the following guideline: Is this document frequently adapted / customized? If yes, then provide a link, making sure that the document can be\ncommented on\nby\nanyone\nwith the link. For instance, this is how we share our employment\ncontracts\n. If the document is rarely customized, then provide the content directly on the site and deprecate the Google Doc.\nIf you want to quickly find where a team member’s cursor is in a Google Doc, click their icon at the top of the document and the app will jump you to the current location. This works in Sheets and Presentations as well.\nYou can set the notifications on a Google Doc so you only get emailed when someone tags you directly instead of getting emails for every comment. Click on “notifications” and select “Only yours”. By the way, when you create the doc, it defaults to All, but when you are just shared with it, it defaults to Only yours. There is\nno global default\n.\nYou can find a template of the\nGitLab letterhead\non the shared Google Drive. Please be sure to make a copy of the document to your Google Drive before customizing the template for your use.\nIf you want to have the Google Doc be readable to the public, do not change the sharing settings from ‘Editable by Everyone at GitLab’,\npublish the document\ninstead.\nIn all cases, the sharing settings (who a document is shared with, if it is visible to the whole company, etc.) on a Google Doc should be the single source of truth for the confidentiality of the document.\nAvoid using your initials when adding content to Google Docs or referring to someone else. Use your full name, as Google Docs\nSmart Compose\nwill auto-complete names for you, and display information about the GitLab team member on hover. It makes documents more readable and consumable, especially for people outside your team/department.\nWhen there is a synchronous discussion about an issue or MR captured in a Google Doc, be sure to summarize the discussion into the issue or MR and link to the agenda item where it was discussed with a\nbookmark\n. If the notes are\nlimited access\nor no notes were taken, please say so. This will ensure that interested GitLab Team Members can see both the summary and context of the discussion.\nIn the\npageless format\nyou can use COMMAND+OPTION+SHIFT+J or\nView–>Hide Comments\nto quickly hide comments that reduce document width.\nWhen using Google Docs, paste full URLs rather than linking text.\nChips\nare the one acceptable alternative when linking to another Google document. Advantages for using URLs rather than hyperlinks include:\nGreater visibility when it is a long URL and specific. Links are important but easy to miss otherwise (short and only a different color and/or underlined).\nAbility to see what the content is without hovering over (which isn’t quick on mobile).\nMakes it easier to paste the content as formatting free text (not rich text), which we prefer and is sometimes the only option.\nHow to deprecate a Google Doc\nAdd ‘Deprecated: ’ to the start of the title.\nRemove the content you moved.\nAdd a link to the new location at the beginning of the doc/first slide/first tab.\nAdd a link to the merge request or commit that moved it (if applicable).\nHandbook page\nPages like this are part of the\nhandbook\n. The GitLab handbook is the central repository for how we run the company.\nProduct documentation\nGitLab Docs\n-\ndocs.gitlab.com\nis where you can find documentation on GitLab, the product.\nGitLab repositories\nrepository\n/\nrepositories\nare where files are kept under\nsource code management\n. In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc.\nREADMEs\nREADME\n-\nREADME.md\nfiles are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for\nuser profiles\nas personal READMEs.\nGoogle Calendar\nWe recommend you set your Google Calendar access permissions to ‘Make available for GitLab - See all event details’. Consider marking the following appointments as ‘Private’:\nPersonal appointments\nConfidential & sensitive meetings with third-parties outside of GitLab\n1-1 performance or evaluation meetings\nMeetings on organizational changes\nThere are several benefits and reasons to sharing your calendar with everyone at GitLab:\nTransparency is one of our values and sharing what you work on is in line with our message of “be open about as many things as possible”.\nDue to our timezone differences, there are small windows of time when our availabilities overlap. If other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member. This speaks to our value to be more efficient.\nIf you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. “Check Google Analytics”), consider marking yourself “Free” for those events so that coworkers know they may schedule a meeting during that time if they can’t find another convenient time.\nGoogle Calendar Appointment Scheduling\nThis feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability.\nThis allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools.\nA member of our Customer Success team created a\ndemo video of how to use this feature\n.\nExternal communication\nKey practices to consider during any meeting are listed below.\nVideo Calls - If this is your first time meeting a customer/prospect/partner/etc., turn on your camera when you login to Zoom. This will help to make the customer/prospect feel more comfortable as they are certain your undivided attention is geared towards them.\n“No agenda, no attenda” - Always have an\nagenda prepped and ready to go\n, with the exception of\ncoffee chats\n. Share this with your audience. Make sure that everything on the agenda is accurate and ask if there’s anything missing that needs to be addressed during this call or for the future. When there is no agenda, it translates to you not caring. When sharing agendas with customers and partners it should be called “GitLab + Name Shared Collaboration & Agenda”, not “External Agenda” as that implies there is something the parties are not seeing.\n70/30 Rule - Ask open ended questions that leave the audience talking 70% of the time, while you are talking 30% of the time. Please note that this varies based on the type of meeting that you are conducting. Be conscious of what questions need to be asked and to capture those items.\nTake Notes - Effective note-taking is a valuable skill that will help you retain and recall any important details. Be the person who remembers all the details of your audience’s needs.\nAdapt to Audience Tone - Before going into the business portion of your meeting, evaluate first the tone of the audience. Adapt your tone accordingly in order to appeal to various types of personalities.\nMid-call - Half-way through the meeting, check in with your audience. Ask them what their thoughts are on the progression of this meeting and if what you’re presenting is on the right track. This helps both you and the audience by re-aligning expectations and making sure the meeting is going the right direction.\nPre-Close Summary - 10 Minutes (1-hour meetings) or 5 minutes (30 minute meetings) prior to ending the call, ask the audience to build out an agenda for the next step or meeting. This helps to secure next steps and to ensure there are no balls dropped.\nPost Meeting Action - Immediately write down notes and next steps and input into the proper directory (Google Drive, Salesforce, etc.).\nTwo Block Rule - For in person meetings with external parties you should wait until you’re more than two blocks from the meeting before discussing the results of the meeting. Nobody wants to hear themselves being discussed in the bathroom.\nCommunicating with media and industry analysts\nGitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services.\nFor more, please visit the\nCorporate Communications handbook section\n.\nPaid external speaking requests\nGitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third party’s questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to\n#external-comms\nSocial media\nPlease see our\nteam member social media policy\n.\nPosting or streaming to YouTube\nSee the\nYouTube page\nfor options and instructions for posting recordings and live streaming to our YouTube channels.\nGuidelines for vendor meetings\nWe request external vendor meetings to use our video conferencing tool so we can quickly join the call and record the session if we need to. Confirm with vendor that they agree we can record the call. The DRI for the vendor meeting will generate the zoom link and share with the vendor.\nDecide ahead of the meeting who should be invited, i.e. those likely to get the most out of it.\nAhead of the meeting, we should agree internal agenda items/requirements/priorities and provide to the external provider.\nIn order to make the best use of time, we wish to avoid team introductions on the call, particularly where there are a number of us attending. We can include a list of attendees with the agenda and give it to the vendor before or after the meeting. Introductions can be helpful in some external calls. In those meetings, use\nthese guidelines\n.\nWhen a question or issue is raised on the agenda, if the person who raised it is present they will verbalize it live on the call; or if they are not present, then someone will raise it for them. This is a common GitLab practice.\nWhere possible, we request that the vendor provides their slides / presentation materials and any other related information after the meeting.\nDo not demo your tool live, create a pre-recorded walk-through of the tool and make it available to GitLab before the meeting so we can ask questions if needed.\nBe cognizant of using inclusive language.\nWe respectfully request that everyone is mindful of the time available, to help manage the call objectives effectively.\nUser communication guidelines\nKeep conversations positive, friendly, real, and productive while adding value.\nIf you make a mistake, admit it. Be upfront and be quick with your correction. If you’re posting to a blog, you may choose to modify an earlier post. Just make it clear that you have done so.\nThere can be a fine line between healthy debate and incendiary reaction. Try to frame what you write to invite differing points of view without inflaming others. You don’t need to respond to every criticism or barb. Be careful and considerate.\nAssume positive intent\nand explicitly state the strongest plausible interpretation of what someone says before you respond, not a weaker one that’s easier to criticize.\nRapoport’s Rules\nalso implores you to list points of agreement and mention anything you learned.\nAnswer questions, thank people even if it’s just a few words. Make it a two way conversation.\nAppreciate suggestions and feedback.\nDo not make promises that you can’t keep.\nDo not offer\nplatitudes\n. Be direct and respectful. For\nexample\n- we don’t need to suggest that our actions are because we “heard feedback” when they are really done for other reasons.\nGuide users who ask for help or give a suggestion and share links.\nImproving Open Development for Everyone\n,\nTypes of requests\n.\nWhen facing negative comments, respond patiently and treat every user as an individual, people with the strongest opinions can turn into\nthe strongest supporters\n.\nBy default, discussions in issues and MRs are public and could include participation of wider community members. It is important to make the wider community members feel welcome participating in discussions and sharing their view. Wider community members also submit\nMRs to help improve our website/handbook\nand this is often their first contribution to GitLab. We want to make sure that we are responsive to their contributions and thank them for helping improve GitLab.\nAdhere to the\nCode of Conduct\nin all communication. Similarly, expect users to adhere to the same code when communicating with the GitLab team and the rest of the GitLab community. No one should accept being mistreated.\nCompany phone number\nIf you need to provide the details of GitLab’s contact information you can take the\naddress from the visiting page\nfor reference; or the\nmailing address\nof the office in the Netherlands if that is more applicable.\nIf a phone number is required, leave this field empty by default. If that is not possible, then use\nthe general number (+1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email.\nEffective communication competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nIn an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab:\nUses\nasynchronous\ncommunication as the starting point and stays as open and transparent as we can by\ncommunicating via text\nthrough public issues, merge requests, and Slack channels (over DMs).\nPlaces an emphasis on ensuring that conclusions of offline conversations are written down ensuring a\nsingle source of truth\n.\nProduces video\nwhen necessary.\nIf you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources:\nCommunicating effectively and responsibly through text\nEmbracing asynchronous communication\nSkills and behavior of applying effective communication as a Team Member\n:\nEffectively practices communication via text.\nUses asynchronous communication when possible:\nmerge requests\n(preferred) or\nissues\n.\nDirects all communication to the appropriate channels (Slack, GitLab, email).\nRecognises when synchronous communication is the more appropriate option.\nDirects all decisions and discussions to the Handbook as a single source of truth.\nRecords videos to communicate information when that is the most efficient and effective way to consume the content.\nEmploys multimodal communication to broadcast important decisions.\nPractices low context communication and provides as much background as possible when communicating via text to avoid confusion.\nSkills and behavior of applying effective communication as a People Manager\n:\nImplements working asynchronously across teams, departments or across the company. Drives communication where possible to asynchronous channels.\nHolds team members accountable for effectively communicating via text.\nFosters an environment across teams, departments or divisions where asynchronous communication is the starting point.\nGuides team members on when producing video is appropriate. Implements interactive communication tools across their team, department or the company depending on level.\nDrives and funnels conversations to the right channels across teams, divisions and the company.\nAlly Resources\nWhat is an ally? A diversity, inclusion and belonging “ally” is someone who is willing …\nAsk Me Anything\nLearn and ask questions at GitLab's Ask Me Anything (AMA) meetings\nConfidentiality levels\nAt GitLab, we are public by default, but some information is classified as internal or limited access. This page provides details on confidentiality levels.\nDeep Dives\nThe goal of a Deep Dive session is to share knowledge about a particular topic, with the assumption that recipients already have some basic understanding or aptitude for the given subject.\nGitLab Communication — Zoom\nZoom-specific communication guides GitLab uses Zoom as the primary video collaboration platform for …\nGitLab Communication Chat\nIntroduction At GitLab, Slack is critical to our communication with each other. While it enables …\nGitLab Video Playbook\nGitLab Video Playbook The purpose of this playbook is to help those who are looking to create video …\nPower of the Pause\nPower of the Pause There are times in everyone’s life when you can feel overwhelmed, anxious, …\nTop Misused Terms - GitLab Communication\nList of Top Misused Terms Below are terms people frequently use when they should use another term. …\nLast modified July 9, 2025:\nUpdate file _index.md (\n2a31acb0\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "265f384951302cf5.html"
}