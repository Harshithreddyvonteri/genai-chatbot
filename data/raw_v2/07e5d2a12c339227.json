{
  "url": "https://about.gitlab.com/direction",
  "title": "GitLab Direction\n|\nGitLab",
  "headings": [
    "GitLab Direction",
    "On this page",
    "3-year strategy",
    "Situation",
    "Strategic challenges",
    "Product Strategy",
    "Fiscal year product investment themes",
    "FY26",
    "FY25",
    "DevSecOps stages",
    "Personas",
    "Mitigating low-end disruption",
    "Maturity",
    "Scope",
    "Quarterly Objectives and Key Results (OKRs)",
    "How we plan releases",
    "Previous releases",
    "Upcoming releases",
    "ML/AI at GitLab",
    "Cross-Stage efforts"
  ],
  "text": "GitLab Direction\n|\nGitLab\nGitLab Direction\nMaintained by\n:\nDavid DeSanto\n@david\nContribute to this page\nEdit this page\nYou are here:\nGitLab Direction\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nOn this page\n3-year strategy\nSituation\nStrategic challenges\nProduct Strategy\nFiscal year product investment themes\nFY26\nKey Principles Driving Themes\nR&D Investment Themes\nWin with DevSecOps platform completeness\nDifferentiate with AI across the SDLC\nLead with SDLC insights and reporting\nElevate customer-centricity to customer obsession\nFY25\nKey Principles Driving Themes\nR&D Investment Themes\nEnable AI/ML Efficiencies Across DevSecOps\nDrive Use Case Adoption to Fully Realize Value\nDifferentiate on DevSecOps Platform\nStrengthen Our SaaS Deployments & Capabilities\nDevSecOps stages\nYour contributions\nPersonas\nMitigating low-end disruption\nMaturity\nScope\nQuarterly Objectives and Key Results (OKRs)\nHow we plan releases\nPrevious releases\nUpcoming releases\nML/AI at GitLab\nCross-Stage efforts\nFootnotes\n3-year strategy\nSituation\nGitLab competes in a large market space, with a\nCSM\nestimated at ~$18B in 2024. GitLab has recently surpassed the $150M ARR milestone, with unusually high revenue growth and retention rates. GitLab is uniquely positioned in the market with a vision to offer a single application for the entire DevSecOps lifecycle. GitLab competes across numerous market segments and aims to deliver value in\n80+ market categories\n. GitLabâs product vision is uniquely ambitious, as we were the first DevSecOps player to take a\nsingle application approach\n. From idea to production, GitLab helps teams improve cycle time from weeks to minutes, reduce development process costs, and enable a faster time to market while increasing developer productivity. With software âeating the world,â this is widely viewed as a mission-critical value proposition for customers. We also have a number of\ntailwinds\nin the form of cloud adoption, Kubernetes adoption, and DevSecOps tool consolidation, which are helping fuel our rapid growth. Finally, GitLab has an open source community and distribution model, which has exposed the value of GitLab to millions of developers and has sped up the maturation of our product through\nmore than 200 monthly improvements\nto the GitLab codebase from our users.\nStrategic challenges\nTension between Breadth and Depth:\nOur ambitious single-application product vision means we need to build out feature function value across a very large surface area. With so much to deliver in a single application, it is a big UX challenge to keep the experience simple, consistent, and seamless between DevSecOps phases. Our challenge is to drive the right balance between breadth and depth by retaining a\nseed then nurture\napproach in new product areas while simultaneously improving existing product areas that generate usage and revenue. Shifting more focus to product depth will allow us to win and retain sophisticated enterprise customers.\nGitLab.com and Self-Managed:\nAnother challenge we face is the balance between our self-managed and GitLab.com offerings. GitLab's early paying customers were more interested in self-managed, and the majority of our customers use this offering today. As a result, we focused heavily on delivering a great self-managed customer experience. However, as the market shifts toward cloud adoption, we are seeing an increasing demand for our GitLab.com offering. We now need to rapidly meet the same enterprise-grade security, reliability, and performance expectations our paying customers have come to expect from self-managed in our SaaS (.com offering).\nWide Customer Profile:\nWe also serve a wide range of customers, from individual contributor developers to large enterprises, across all vertical markets. This range of deployment options and customer sizes makes our business complex and makes it hard to optimize the customer experience for all customer sizes. Over the past few years, we have prioritized enabling our direct sales channel, but in the process have not focused enough on great customer experiences around self-service purchase workflows, onboarding, and cross-stage adoption.\nCompetition:\nFinally, we have formidable competition from much larger companies, including Microsoft, Atlassian, and Synopsys to name a few. Microsoft is starting to mimic our single application positioning, and while behind us in the journey, have substantial resources to dedicate to competing with GitLab.\nProduct Strategy\nFocus on increasing Stages per Organization\n(SpO)\n:\nThere is a strong correlation between the number of stages customers use and their propensity to upgrade to a paid package. In fact,\nadding a stage triples conversion!\nEach product group should be laser-focused on driving adoption and regular usage of their respective stages, as it should lead to higher\nNet ARR\n, reduced churn, and higher customer satisfaction. As outlined in this\nuser journey\n, the most important additional stages for customers to adopt are Create to Verify and Verify to Release, as each of these adoption steps open up three additional stages to users.\nHarness the unique power of a single application:\nGitLabâs primary point of differentiation is our single application approach. As we continue to drive value in any given stage or category, our first instinct should be to connect that feature or product experience to other parts of the GitLab product. These\ncross-stage connections\nwill drive differentiated customer value and will be impossible for point product competitors to imitate. Recognizing this opportunity, we have grown our R&D organization significantly over the past two years, and plan to invest an outsized amount on R&D for the next 2-3 years to extend our lead in executing against the single application product vision.\nIncrease wider-community contributions:\nTo achieve this ambitious vision more quickly, we will leverage our powerful open source community. Each stage should have a clear strategy for tiering the value of the stage. When stages are early in maturity, we will bias toward including as much functionality in our Core open source version as possible, to drive more rapid adoption and greater community contributions, which will help us mature new stages faster. Once stage adoption is achieved, we can then layer on additional value in paid tiers to encourage upgrades.\nMake our core journey categories complete:\nWe want to ensure the core product usage experience is great, which will lead to more paying customers and improved customer retention. We intend to maintain our market-leading depth in stages with complete categories, which currently are Verify (Continuous Integration) and Create (Source Code Management and Code Review). Beyond that, we will endeavor to rapidly mature our offering to complete in Plan (3rd most used stage), Release (4th most used stage), and Secure (important element of our Ultimate tier).\nGitLab-hosted first:\nMost customers don't want to run GitLab themselves (self-managed), so we should build out the offerings where we do it for them (GitLab-hosted). GitLab-hosted includes our SaaS (GitLab.com), any single-tenant offerings, and other GitLab hosted services that self-managed installations can use. Our customer and revenue growth rate for our SaaS offering is faster than our self-managed offering. To meet growing customer demand, our SaaS offering needs to have enterprise-grade security, availability, and performance. We must also ensure\nfeature parity between self-managed and SaaS\nand that customers have an easy migration path from self-managed to SaaS. Going forward, all new features should be available on SaaS when they are available on self-managed, if not before. We will also begin offering GitLab-hosted services to self-managed customers to provide additional value that may not be feasible to deliver in a self-managed environment, e.g. automated cloud backups. Finally, we expect to offer different GitLab-hosted deployment options for single tenant customers and specific geographic regions to meet the regulatory, security, and data residency requirements of various customer segments.\nFiscal year product investment themes\nEvery year at GitLab, we choose some specific areas of emphasis to help guide the teams on the areas of our product that we want to accentuate. This section is used to highlight that emphasis. It is not a comprehensive list of everything we plan to do this year. Direction for each stage and category can be found at the respective\ndirection pages\n. We are not asking the teams to deviate from their core mission.\nMany teams will see themselves contributing to these areas of emphasis directly. The other teams will continue to execute on their mission - that is also important.\nThe themes are to help facilitate cross-team collaboration when invariably teams working on the 1-year themes may need to collaborate with others. Our guidance is: if any team approaches you to prioritize something that is thematic for this year, consider that as a higher priority than you would normally - as it is in service of the broader product-wide goal that we, as a company, have deemed important to accomplish this year.\nSee\nProduct Investment\n(\ninternal handbook page\n) for how we allocate our R&D investment across our\nproduct hierarchy\n.\nFY26\nKey Principles Driving Themes\nUsability: Users are telling us that we need to better meet their expectations and make the experience more intuitive.\nDepth: We need to stop doing some of the things we are doing today. Customers are asking us to improve core functionality through usability improvements and remove half-completed features.\nData Quality: Without more visibility, we cannot make as many data-driven decisions. And neither can our customers. We need to complete our data unification effort to make this easier.\nDeployment Parity: All three deployments (GitLab.com, GitLab Dedicated, Self-Managed) will have feature parity (with the exception of âadmin areaâ topics on .com and Dedicated).\nR&D Investment Themes\nFor FY26, the four key R&D investment themes we are focused on are:\nWin with DevSecOps platform completeness\nDifferentiate with AI across the Software Development Life Cycle (SDLC)\nLead with SDLC insights and reporting\nElevate customer-centricity to customer obsession\nWin with DevSecOps platform completeness\nWe will focus primarily on core DevSecOps platform capabilities across SCM, CI, CD, security, compliance, and enterprise agile planning with the goal to achieve a leadership position or extend our existing leadership position. We will drive Premium and Ultimate value by helping propel free-to-paid conversion through product-led growth / feature discovery moments.\nDifferentiate with AI across the SDLC\nWe will introduce new as well as improve existing GitLab Duo AI capabilities within our core DevSecOps platform capabilities. We will also bring ModelOps features to general availability, including a focus on enabling customers to work with native data science workloads within GitLab.\nLead with SDLC insights and reporting\nWe will focus on deepening the types, and quality of metrics, as well as pulling metrics from third party integrations, with the goal of making GitLab the central component to understanding SDLC insights. We will also provide reporting of feature usage enabling customers to understand what features and capabilities are being used by their teams as well as what usage is connected to Premium and Ultimate tiers, or are features and capabilities included in add-ons.\nElevate customer-centricity to customer obsession\nWe will focus on addressing use case adoption issues as well as improving user experience within onboarding to improve our customer's time-to-value for core DevSecOps platform capabilities. We will improve customer experience improve ease-of-use for SMB/commercial customers with license management and self-service workflows. Based upon and informed by the pricing research completed in FY25, we will also implement an updated pricing strategy.\nFY25\nKey Principles Driving Themes\nDepth over Breadth: For the past several years we have focused on breadth over depth. This has allowed us to show our direction as a company and define the DevOps Platform market. In FY24, we pivoted to depth over breadth as product depth allows us to win and retain sophisticated enterprise customers. We will continue our focus on depth throughout FY25.\nDrive Adoption of Ultimate: Due to the increasing demands for security and compliance in software development, GitLab Ultimate continues to gain popularity with our customers. We will focus on increasing the value of Ultimate by not only improving security and compliance functionality but also adding value from other key areas within our platform like Plan, Verify, and Data Science.\nDifferentiate: Our primary point of differentiation is our\nsingle application\napproach: all aspects of our\nDevSecOps platform\nwork seamlessly together, right out of the box, and can be tailored to the specific needs of each organization.\nR&D Investment Themes\nFor FY25, the four key R&D investment themes we are focused on are:\nEnable AI/ML Efficiencies Across DevSecOps\nDrive Use Case Adoption to Fully Realize Value\nDifferentiate on DevSecOps Platform\nStrengthen Our SaaS Deployments & Capabilities\nEnable AI/ML Efficiencies Across DevSecOps\nAI as part of software development has continued to mature and has become the number one topic in our customer discussions. To meet our customersâ needs and the evolving market landscape, we will take a three pronged approach to AI (GitLab Duo, ModelOps, AI agents) as part of our DevSecOps platform providing us differentiation in the market.\nDrive Use Case Adoption to Fully Realize Value\nCI and CD are critical to the success of Premium, while security and governance drives value in Ultimate. We will increase our focus on adoption of these areas - ensuring that customers realize the value of the capabilities they have paid for. This will continue to reduce churn, drive free-to-paid conversion, and increase up-tiering from Premium to Ultimate.\nDifferentiate on DevSecOps Platform\nToolchain consolidation continues to come up with customers as well as in our annual DevSecOps survey. We will capitalize on our position as the enterprise DevSecOps platform by continuing to expand our planning capabilities, continuing to mature our metrics and reporting, and bring new SCM capabilities to general availability.\nStrengthen Our SaaS Deployments & Capabilities\nGitLab.com and GitLab Dedicated continue to grow in popularity as more organizations need to undergo digital transformations however do not want the overhead of self-hosting their DevSecOps platform. We expect this trend to continue in FY25 and will invest in our SaaS deployments to ensure they meet our customersâ expectations.\nDevSecOps stages\nDevSecOps is a broad space with a lot of complexity. To manage this within GitLab,\nwe break down the\nDevSecOps lifecycle\ninto a few different\nsections\n, each with its own direction page you can review.\nDev Section Direction\n- Includes the\nPlan\nand\nCreate\nstages\nCI Section Direction\n- Includes the\nVerify\nand\nPackage\nstages\nCD Section Direction\n- Includes the\nDeploy\nstage, which includes the\nEnvironments\ngroup\nSec Section Direction\n- Includes the\nSoftware Supply Chain Security Direction\nand the\nApplication Security Testing\n,\nSoftware Supply Chain Security\n, and\nSecurity Risk Management\nstages\nData Science Section Direction\n- Includes the\nModelOps\nand\nAI-powered\nstages\nAnalytics Section Direction\n- Includes the\nMonitor\nstage, which includes the\nAnalytics Instrumentation\nand\nPlatform Insights\ngroups\nGrowth Section Direction\n- Includes the\nGrowth\nstage, which includes the\nAcquisition\nand\nActivation\ngroups\nFulfillment Section Direction\n- Includes the\nFulfillment\nstage, which includes the\nProvision\n,\nUtilization\n,\nFulfillment Platform\n,\nSubscription Management\n, and\nSeat Management\ngroups\nCore Platform Section Direction\n- Includes the\nFoundations\nstage, which includes the\nPersonal Productivity\n,\nDesign System\n, and\nUX Paper Cuts\ngroups\nInfrastructure Platforms Section Direction\n- Includes the\nGitLab Delivery\n,\nProduction Engineering\n,\nData Access\n,\nTenant Scale\n,\nGitLab Dedicated\n, and\nDeveloper Experience\nstages\nYour contributions\nIn addition to addressing the\nDevSecOps lifecycle\ninternally through the above sections,\ncontributions from the community\nalso help increase our rate of innovation, which\nhelps mature\nthe stages of our\nDevSecOps platform\n. These community contributions are an important part our\ncompany mission\nand\nstrategy\n.\nOur issue tracker\ncontains requests made for features and changes to GitLab. Contributing is the best way to\nget a feature you want included as we continually merge code to be released in the next version. Please see our\nContribute to GitLab page\nfor more details such as guides to get started contributing, areas looking for contributions, and contribution\nacceptance criteria.\nPersonas\nPersonas\nare the people we design for. Developers, security professionals, and operations professionals are currently the primary personas we focus on, and we tailor our user experience to their needs. We want GitLab to be the main interface for people in these roles, so they can show up at work, start their day, and load up GitLab. And thatâs already happening.\nBut there are a lot of other roles involved with the development and delivery of software. That is the ultimate GitLab goal - where everyone involved with software development and delivery uses a single application so they are on the same page with the rest of their team. We are rapidly expanding our user experience for\nDesigners\n,\nCompliance Managers\n,\nProduct Managers\n, and\nRelease Managers\n. Weâll also be expanding to the business side, with Executive visibility and reporting. While weâre still calling it DevSecOps, weâre really expanding the definition of DevSecOps and delivering it all as a single application.\nMitigating low-end disruption\nGitLab is not immune to disruption. In some ways, it is a sign of success that GitLab is now at a scale where we have to think about low-end disruption. Arguably, a few years ago, GitLab was a low-end disruptor.\nClayton Christensen defines\nlow-end-disruption\nas follows:\nLow-end disruption refers to businesses that come in at the bottom of the market and serve customers in a way that is \"good enough.\" These are generally the lower profit markets for the incumbent and thus, when these new businesses enter, the incumbents move further \"upstream.\" In other words, they put their focus on where the greater profit margins are.\nOur perspective is that low-end disruption is an additional and critical sensing mechanism. This is especially true for the DevSecOps market. We look at the following attributes to figure out if a low-end disruption has anything close to potential product-market resonance. This list is an adaptation of the\nProduct Zeitgeist Fit\n.\nBuilder Enthusiasm\n: Are the most talented, hardest working, or most-in-demand people - the engineers, the developers - so intrigued by the approach that they are working on it, excited by it, and trying to make it a thing? If that is the case, then there is a good chance that they will eventually make it happen, moving beyond the fringes to the mainstream. Number of stars, forks, and contributions in the repo are some metrics to look for here.\nDespite Test\n: When people are using a product despite the fact that itâs not the best thing out there, or, in some cases, that itâs straight-up terrible, itâs a great sign. It shows that the product has a line into something emotional, not solely functional. Wanted, not just needed. In the early days, these products can often feel misunderstood or controversial. At first blush, the conceit may even raise a few eyebrows. But to the people who have been working on those products, theyâre so clearly elegant, if temporarily imperfect, solutions to big and important problems that they seem almost obvious once they recognize it. Google Trends and posts on Hacker News are some things to monitor here.\nT-shirt Test\n: If people with no connection to the company are wearing their t-shirts or putting their stickers on their laptops or wearing their socks, that desire to associate with the idea indicates as much a movement as a product.\nA reason low-end disruptors are able to enter the market is that the feature-absorption by users is lower than the feature-velocity of the established vendor. To address this we are focused on a\nworking-by-default configuration principle\n.\nMaturity\nAs we add new categories and stages to GitLab, some areas of the product will be deeper and more mature than others. We publish a\nlist of the categories, what we think their maturity levels are, and our plans to improve on our\ncategories page\n.\nWe strive to be the best product in the market and to be complete. As the market, customer needs, competitive landscape, and technology change, we should expect our maturities to also change, including changing to a lower maturity rating. By embracing a\nfocus on improvement\nand\nlow level of shame\n, we encourage moving a maturity down. This is a strong indicator that we are realists about our product with an eye on achieving the best results for our customers.\nScope\nWe try to prevent maintaining functionality that is language or platform\nspecific, because they slow down our ability to get results. Examples of how we\nhandle it instead are:\nWe don't make native mobile clients. Instead, we make sure our mobile web pages are great.\nWe don't make native clients for desktop operating systems. We make our web application greatâfor example, GitLab was the first to have merge conflict resolution in our web application. People can also use\nTower\nor other clients.\nFor language translations, we\nrely on the wider community\n.\nFor code navigation, we're hesitant to introduce navigation improvements that only work for a subset of languages.\nFor building and testing with\nAuto DevOps\n, we use Heroku Buildpacks.\nOutside our scope are Kubernetes and everything it depends on:\nNetwork\n(fabric)\nFlannel\n, Openflow, VMware NSX, Cisco ACI\nProxy\n(layer 7)\nEnvoy\n,\nnginx\n,\nHAProxy\n,\ntraefik\nIngress\n(north/south)\nContour\n,\nAmbassador\n,\nService mesh\n(east/west)\nIstio\n,\nLinkerd\nContainer Scheduler\nwe mainly focus on Kubernetes, other container schedulers are: CloudFoundry, OpenStack, OpenShift, Mesos DCOS, Docker Swarm, Atlas/Terraform,\nNomad\n,\nDeis\n,\nConvox\n,\nFlynn\n,\nTutum\n,\nGiantSwarm\n,\nRancher\nPackage manager\nHelm\n,\nksonnet\nOperating System\nUbuntu, CentOS,\nRHEL\n,\nCoreOS\n,\nAlpine Linux\nDuring a presentation of Kubernetes, Brendan Burns talks about the four Ops layers\nat\nthe 2:00 mark\n:\nApplication Ops\nCluster Ops\nKernel/OS Ops\nHardware Ops\nGitLab helps you mainly with application ops. And where needed, we also allow you\nto monitor clusters and link them to application environments. But we intend to\nuse vanilla Kubernetes, instead of something specific to GitLab.\nAlso outside our scope are products that are not specific to developing,\nsecuring, or operating applications and digital products.\nIdentity management: Okta and Duo, you use this mainly with SaaS applications\nyou don't develop, secure, or operate.\nSaaS integration: Zapier and IFTTT\nEcommerce: Shopify\nIn scope are things that are not mainly for SaaS applications:\nNetwork security, since it overlaps with application security to some extent.\nSecurity information and event management (SIEM), since that measures\napplications and network.\nOffice productivity applications, since\n\"We believe that all digital products should be open to contributions, from legal documents to movie scripts and from websites to chip designs\"\nWe expect GitLab to continue to grow, and we have several ideas for\npossible future stages\nQuarterly Objectives and Key Results (OKRs)\nTo make sure our goals are clearly defined and aligned throughout the\norganization, we make use of OKRs (Objectives and Key Results). Our\nquarterly Objectives and Key Results\nare publicly viewable.\nHow we plan releases\nAt GitLab, we strive to be\nambitious\n,\nmaintain a strong sense of urgency, and set aspirational targets with every\nrelease. The direction items we highlight in our\nkickoff\nare a reflection of this ambitious planning. When it comes to execution, we aim\nfor\nvelocity over predictability\n.\nThis way, we optimize our planning time to focus on the top of the queue and\ndeliver things fast. We schedule 100% of what we can accomplish based on past\nDevelopment Department merge request rate\nand availability factors (vacation, contribute, etc.).\nSee our\nproduct handbook on how we prioritize\n.\nPrevious releases\nOn our\nreleases page\n, you can find an overview of the most\nimportant features of recent releases and links to the blog posts for each\nrelease.\nUpcoming releases\nGitLab releases a new version\nevery single month\n. You can find the\nmajor planned features for upcoming releases on our\nupcoming releases page\nor see the\nupcoming features for paid tiers\n.\nNote that we often move things around, do things that are not listed, and cancel\nthings that\nare\nlisted.\nML/AI at GitLab\nWith Gitlab 15.4, Suggested Reviewers was released as our first customer-facing ML/AI technology in production features. We have additional ambitions\nin the near future\nfor several types of problems. This is the focus of our new\nModelOps stage\n.\nCross-Stage efforts\nGitLab consistently strives to deliver a cohesive experience that enables workflows that span the DevSecOps loop. We have a number of existing capabilities and planned improvements that do just that:\nTBA\nFootnotes\nIDC, Worldwide DevOps Software Tools Forecast, 2020â2024, Doc # US45188520, July 2020\nEdit this page\nView source",
  "html_file": "07e5d2a12c339227.html"
}