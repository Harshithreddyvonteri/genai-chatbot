{
  "url": "https://handbook.gitlab.com/handbook/product/product-processes",
  "title": "Product Processes | The GitLab Handbook",
  "headings": [
    "Product Processes",
    "Our Product philosophy",
    "Communication",
    "How to work as a PM",
    "Life Support PM Expectations",
    "Analytics instrumentation guide",
    "Post Launch Instrumentation Guide",
    "Page load performance metrics"
  ],
  "text": "Product Processes | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nDavid DeSanto\nOn This Page\nOur Product philosophy\nProduct Development Flow\nThe Importance of Direction\nUnderstanding Milestones and Releases\nRelevant links\nCommunication\nProduct Org Communication Touchpoints\nSynchronous Product Org Communication Touch Points\nAsynchronous Product Org Communication Touch Points\nOther Communication Channels\nCommunicating with the Entire Product Management Function At Once\nInternal and external evangelization\nWriting to inspire action\nWriting about features\nRecording videos to showcase features\nUsing GIFs\nSpeed Run\nDemo\nWalk-through\nQA Release Candidates on staging and elsewhere\nFeature assurance\nDealing with security issues\nFoundational Requirements\nIntroducing application limits\nManaging data lifecycle and growth\nCross-stage features\nStages, Groups, and Categories\nHow to work as a PM\nPrioritization\nPrioritization Framework\nPrioritization sessions\nUsing the RICE Framework\nAsync RICE Exercise\nIssues important to customers\nCommunity Considerations\nSaaS-First Framework\nAvailability\nInfradev\nEnterprise Customer Needs\nSaaS Features\nWorking with Your Group\nFrom Prioritization to Execution\nReviewing Build Plans\nPrioritizing for Predictability\nPrivate tools and dashboards for monitoring and KPI tracking\nGlobal Prioritization\nPlanning and Direction\nManaging your Product Direction\nCommunicating dates\nPlanning is indispensable but adjust, iterate\nDelivery follows discovery\nMaturity Plans\nPlanning and OKRs\nPlanning Issue for Milestone\nManaging Upcoming Releases\nPlanning for Future Releases\nShifting commitment mid-iteration\nUtilizing our design system to work autonomously\nIteration Strategies\nWorkflow steps\nUser operations\nFunctional criteria\nException & error cases\nBreaking down the UI\nRefactors\nSeparate announcement from launch\nFour phase transition\nIterate to go faster\nRemote Design Sprint\nSpikes\nFeedback issues\nOther best practice considerations\nCommunity participation\nConferences\nStakeholder Management\nWhat is a Stakeholder?\nUpdated SSOT for stakeholder collaboration\nWorking with customers\nCustomer meetings\nSourcing customers\nCustomer Advisory Board meetings\nWorking with (customer) feature proposals\nCompetition channel\nReaching out to specific users or accounts based on GitLab usage\nAssessing opportunities\nOpportunity canvas\nOpportunity canvas lite\nAnalyst engagement\nEngage with internal customers\nUSAT responder outreach\nOverall process\nInstructions for product leaders\nInstructions for Product Managers and Product Designers\nProcess for reaching out to users\nAfter the call\nCost profile and user experience\nTools to understand operational costs\nLinks to learn more about infrastructure cost management initiatives\nTools to understand end user experience\nLife Support PM Expectations\nBuild vs “Buy”\nEvaluating Open Source Software\nAnalytics instrumentation guide\nPost Launch Instrumentation Guide\nPage load performance metrics\nAdding additional pages to performance testing\nThe Handbook\nProduct Handbook\nProduct Processes\nProduct Processes\nAs a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value.\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nOur Product philosophy\nAs a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. The\nProduct Principles\nsection is where you can learn about our strategy and philosophy regarding product development, here we discuss the processes we use tactically.\nProduct Development Flow\nIntroducing changes requires a number of steps, with some overlap, that should be completed in order. GitLab follows a dual-track\nproduct development flow\nspanning product, engineering, UX, and quality. We\nuse GitLab to power product development flow\n. When changes are released, we follow the\nrelease post process\nto communicate externally about new capabilities.\nThis process should be both up front and on an on-going basis when building features.\nThe Importance of Direction\nDocumenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. We document our direction in direction pages. Read more about related processes under\nPlanning and Direction\n.\nUnderstanding Milestones and Releases\nInterpreting release dates\nclarifies how product teams use milestones and labels to indicate the likelihood of feature delivery within certain time frames.\nThe\nrelease definitions\nare maintained by the Engineering Team and we run the end of each Milestone on the\nrelease date\n.\nRelevant links\nEngineering release definitions\nFeature flag lifecycle\nProduct Launch process\nCommunication\nProduct Org Communication Touchpoints\nIn November 2024 we adjusted our communicated touch points based on feedback from our\nFY25-Q2 Engagement Survey\n, AMAs, skip levels, and 1:1s. The two key areas we are prioritizing:\nEmbedding more asynchronous touchpoints to reach team members across time zones\nImplementing additional opportunities to cascade information from E-Group and PLT\nSynchronous Product Org Communication Touch Points\nProduct All-Team Meeting: We have a quarterly synchronous meeting for the Product Org. As of Nov 2024, we are expanding on the existing content and structure to ensure key strategic updates from each PLT department head are effectively cascading through the organization regularly.\nProduct Key Review: We follow the company wide key-review format which covers key updates to the product division and is shared with cross-functional stakeholders.\nAsynchronous Product Org Communication Touch Points\nCPO Fortnightly Update: David posts a slack message in #product-private every two weeks. This is a way for him to share what is top of mind for E-group and across the product team.\nNew Hire Intros: New hires to the product org are encouraged to post their introduction in the #new-team-members slack channel. Once per month, a member of our Product Leadership Team will post a consolidated list of new hires and their intros into the #product-private slack channel.\nMonthly Showcase: On a 4-week cadence we have an async monthly showcase, facilitated in the #product-private channel, where people can share what they’re working on with the rest of the Product Org. This is a low-key competition with prizes to incentivize folks to contribute videos. Team members can add videos throughout the month, then the entire Product Org can vote on their favorite video via google form. At the end of the 4-week period, there will be a prize for the winner, announced in David’s fortnightly update. In the case of a tie in number of views, David will make the final call on who wins. We hope that this encourages team members to share their wins and exciting developments in their feature areas! Note: We’re doing this on a 4-week cadence (rather than calendar month) so that it aligns with David’s fortnightly updates, which are posted every other week. This should still be roughly aligned to the calendar month.\nOther Communication Channels\nProduct Function Issue Tracker\n- please use\nconfidential issues for topics that should only be visible to team members at GitLab.\nProduct Function GitLab Group - @gl-product\nProduct Management GitLab Group - @gl-product-pm\n[\nChat channel - #product-private\n]. This is a private slack channel for members of the product-org; new team members are automatically added to this channel as part of onboarding.\nChat channel - #product\n. All GitLab internal team members can use the\n#product\nchannel for any product-related questions but you’ll also find more direct assistance in the various\nProduct Group\nchannels.\nCommunicating with the Entire Product Management Function At Once\nWhen communicating change or a request for action to the entire product function, utilize the following levels and corresponding activities.\nLevel\nDescription\nActivities\nOne\nSuggestion for review from interested PMs and FYI\nPost MR/issue in\n#product\nTwo\nRequest for action from all PMs\nPost in\n#product\nand mention\n@gl-product-pm\nin MR/issue with specific action instructions.\nThree\nConfirmation of understanding\nPost in\n#product\nand mention\n@gl-product-pm\n; checkbox for each\n@gl-product-pm\nmember in an MR/issue description to confirm; assign MR/issue to all\n@gl-product-pm\nmembers\nInternal and external evangelization\nBefore shipping a new or updated feature, you are responsible for championing\nit, both internally and externally. When something is released, the\nfollowing teams need to be aware of it as they will all need to do something\nabout it:\nMarketing: depending on the importance of the feature, we need the help of\nmarketing to promote this feature on our different communication channels.\nSales: sales needs to know what’s new or changed in the product so they can\nhave better arguments to convince new or existing customers during their sales\nprocess.\nSupport: as they are in constant contact with our users and customers,\nsupport should know exactly how our products work.\nYou can promote your work in several ways:\nstart with documenting what will be released and share this documentation with\nthe different teams\nschedule meetings, if you think it’s important, with the teams listed above.\nWhen referencing issues in written communication using just the issue number\n#123456\nand a link is not\nlow-context communication\n. Instead use the title of the issue and the link or the issue number and description of the problem that issue will solve:\nGood:\nWe will next be working on [Detect and display code coverage reports on MR](https://gitlab.com/gitlab-org/gitlab/-/issues/21549)\n. OR\nWe will next be working on [gitlab#21549](https://gitlab.com/gitlab-org/gitlab/-/issues/21549) which will help developers view code coverage reports directly in GitLab instead of losing context by looking in another tool while reviewing an MR\n.\nAvoid:\nWe will next be working on #21549.\n.\nIn order to support\nfindability\nand to clearly\narticulate when we change our minds\nespecially when it comes to product direction, category changes, shifts in investment themes, or priorities for engineering, Product Managers must evangelize these changes in multi-modal communication channels to ensure our users and customers aware.\nSome\ninternal\nmethods for communication include:\nSharing the updates various product-based Slack channels such as:\n#product\n,\n#s_\n,\n#g_\n, or\n#f_\nSlack channels\nCross-posting changes in direction or categories into #customer-success and if they impact\nuse cases\ntag\n@cs-leadership\nfor awareness\nRecording a quick video and sharing with Customer Success that discusses direction updates. Use sync meetings\nas needed\nto facilitate efficient communication.\nCollaborate with the Field Communications team\nto determine if a larger internal communications plan/approach is necessary for the Field (Sales, Customer Success, Channel & Alliances) team.\nAggregating and sharing highlights of monthly direction page updates at the Section-level across the organization\nExternal\nchannels for consideration linking direction pages to:\nTwitter, LinkedIn, or other social accounts\nSharing outreach emails via account teams\nRecording walkthroughs on Unfiltered and promoting on social accounts\nWriting a blog about the changes, if they are significant or disruptive\nWriting to inspire action\nAs a PM, it is important to remember a\nbias towards action\n(and other value actions like\nsense of urgency\n,\nmake a proposal\n,\nboring solutions\n,\nwrite things down\n,\ndon’t wait\n, and\nmake two way doors decisions\nwhich enables PMs to drive an async discussion to being action oriented. Every time you write a comment or create an issue ask yourself: Will this allow us to take an action and move us forward?\nWriting about features\nAs PMs we need to constantly write about the features and upgrades we ship: in a blog post,\ninternally to promote something, and in emails sent to customers. There are some\nguidelines that one should take into account when writing about features,\nthe most important being a clear communication of the problem we’re solving for users.\nWhen writing about a feature, make sure to cover\nthese messaging guidelines\nwhich help produce clear internal and external\nmessaging. Please also keep in mind that we should avoid using acronyms that others my not recognize, such as “MVC” for Minimal Valuable Change. For more guidance you can visit our\nwriting style guidelines\n.\nLet’s highlight the messaging guidelines mentioned above with a concrete example, Preventing Secrets in your repositories,\nthat\nwe shipped in 8.12\n.\nStart with the context. Explain what the current situation is without the\nfeature. Describe the pain points and connect back to our\nValue Drivers\n(in this case\nReduce Security and Compliance Risk\n).\nIt’s a bad idea to commit secrets (such as keys and certificates) to your\nrepositories: they’ll be cloned to the machines of anyone that has access to the\nrepository. If just a single one is insecure, the information will be\ncompromised. Unfortunately, it can happen quite easily. You write\ngit commit -am 'quickfix' && git push\nand suddenly you’ve committed files that\nwere meant to stay local!\nExplain what we’ve shipped to fix this problem.\nGitLab now has a new push rule that will prevent commits with secrets from entering the repository.\nDescribe how to use the feature in simple terms.\nJust check the checkbox in the repository settings, under push rules and\nGitLab will prevent common unsafe files such as .pem and .key from being committed.\nPoint to the documentation and any other relevant links (previous posts, etc).\nHere are some additional examples of well written release blog posts for inspiration:\nIssue Board Work In Progress Limits\nParent-Child Pipelines\nDrag-and-drop Design badges\nRender charts in GitLab issues using a Grafana URL\nRecording videos to showcase features\nIn addition to the written medium, video is an important medium that caters to the different goals you are trying to accomplish and learning styles of your audience.\nDepending on the type of video you are recording, there are some guidelines to keep in mind.\nAs our documentation guidelines\nactively encourage\nlinking video content,\nplease consider following the\nDocumentation Style Guide section on language\n,\nand working with your technical writing team to include links to your speed runs, walk-throughs and demos at relevant locations in the product documentation.\nUsing GIFs\nAnimated GIFs are an awesome way of showing of features that need a little more than just an image, either for marketing purposes or explaining a feature in more detail. Checkout our guide to\nMaking Gifs\n!\nSpeed Run\nSpeed runs are informal videos meant to focus on a single workflow and the experience for performing that workflow. It should not require much planning and is typically short in duration (less than 5 min.). This video type is meant to inform and not necessarily to influence buyers.\nExamples:\nGitLab Unfiltered Speed Runs Playlist\nRemove docker images via CI/CD speed run\nDemo\nDemos are scripted recordings meant to influence buyers. Generally has higher production value and typically involves both a slide-style presentation and/or live screen-sharing. Duration varies depending on the topics being covered.\nExamples:\nGitLab for the Enterprise Demo\nWalk-through\nProduct walk-throughs are informal videos meant primarily for an internal audience as a recorded, visual form of product critique. Walk-throughs typically focus on the user experience across categories and workflows within a Product Manager’s\nproduct scope\n. There are particular benefits to walk-throughs which span\nproduct hierarchy\nboundaries (multi-category, multi-stage, multi-section) as they help highlight disjointed experiences across our single-application.\nWalk-throughs are typically longer in length as they cover more ground and often involve some “live” troubleshooting and are best performed with no planning. Use the\nProduct walk-through issue template\nwhen creating a walk-through.\nExamples:\nAuto DevOps setup and usage walk-through\nQA Release Candidates on staging and elsewhere\nAfter the feature freeze, it’s expected of each product manager to test their own features and perform quality assurance\nto the best of their ability and follow up where necessary.\nProduct managers can use the staging environment once the release managers have deployed a release candidate (RC) to staging.\nRelease managers should post in the\n#product\nchannel in Slack that a new release candidate is available. Product managers\ncan also use other environments as needed, such as GitLab provisioned on Kubernetes with GKE.\nFeature assurance\nBefore a new feature is shipped, the PM should test it out to make sure it\nsolves the original problem effectively. This is not about quality assurance\n(QA), as developers are responsible for the quality of their code. This is about\nfeature assurance (FA). FA is necessary because sometimes there are\nmisunderstandings between the original issue proposal and the final\nimplementation. Sometimes features don’t actually solve the intended problem,\neven though it seemed like it would, and sometimes solutions just don’t feel as\nuseful as intended when actually implemented.\nIf you can test out the feature during development, pulling down branches\nlocally (or with a review app!), that’s great. But sometimes it’s not feasible\nto test a feature until it’s bundled into a release candidate and deployed to\nGitLab.com. If so, make sure to test out features as soon as possible so any new\nissues can be addressed before final release. Also, take the FA cycle into\naccount when scheduling new milestone work.\nIf you are looking to test code that has not been merged to GitLab.com or is not yet\npart of an RC, you can pull the branch down locally and test it using the\nGitLab\nDevelopment Kit (GDK).\nDealing with security issues\nQuality Engineering Managers (QEM) are the DRIs for prioritizing bugs. These include security issues which are prioritized in conjunction with the security team. Product Managers must work with their QEM to set Milestones for issues marked with the\nbug::vulnerability\ntype label\nto guarantee they are shipped by their due date, as defined in the\nSecurity Team process\n.\nWhile Product Managers are the DRIs for\nmilestone planning\n, they must respect the prioritization order for bugs and maintenance issues as determined by their QEM and EM, respectively. As such they should deeply understand the implications and risks of security-related issues and balance those when prioritizing a milestone work. Addressing a serious security issue by its due date may require temporarily adjusting the desired work type ratio for one or more milestones. Priority labels and Due Date designations for security issues should never be modified by Product Managers as they are directly managed by the Security Team and used to track metrics and progress.\nFoundational Requirements\nWhen thinking about new features, we must not only think about the functional requirements of a feature (defining what the feature will do), but also to think about foundational requirements (defining how the feature works). At the highest level, foundational requirements define items such as performance, scalability, compatibility, maintainability and usability characteristics of a feature. It is important to have foundational requirements in place up front, as this is much easier than trying to add them later and change expectations, or break existing workflows. Our\ndefinition of done\ncontains specific areas of consideration that are required for the acceptance of new contributions.\nFor an in depth review of foundational requirements (often referred to as non-functional requirements), see\nthis resource\n.\nTo deliver features, we must have both functional and foundational requirements defined.\nIntroducing application limits\nTo enhance availability and performance of GitLab, configurable limits should be put in place for features which utilize storage, or scale in a manner which could impact performance. For example, we\nlimit the number of webhooks per project\n, and we allow admins to set\nrate limits on raw endpoints\n. These limits ensure more consistent performance, reduce the likelihood of outages, and offer admins tools to limit abuse or enforce specific standards. While these limits can be configurable, sensible default limits should be defined for our GitLab SaaS and GitLab dedicated offerings.\nThere is a guide about\ndeveloping application limits\nin the GitLab Docs.\nWhen implementing application limits\nSee\nRate Limiting::Managing Limits\n.\nManaging data lifecycle and growth\nAs we continue to scale our product, we need to consider the amount of data being stored for new features. Data storage is not an infinite resource, so we should think carefully about what data needs persistent storage to provide the desired user experience. We also need to consider the cost implications around data storage. Everything we store impacts our bottom line, and we should therefore be careful to ensure we are only storing necessary data for well thought out time-frames. We are working on\ndefining a sustainable data retention policy\n, and will iterate on this section as more general guidelines are developed.\nData storage comes in three main forms for GitLab – object storage, database storage, and Git repository storage. While we have dedicated teams devoted to ensuring we can scale these storages appropriately, it is in our best interest to only store what is required for a feature to perform as intended. Additionally, there are situations where storage should be subject to data retention policies.\nConsiderations around data storage\nWhen evaluating feature data storage, the following data storage topics should be considered.\nWhat quantity data needs to be stored?\n- What amount of data will need to be stored for the feature to function as intended. Is this level of data storage bounded, or is there a potential for unbounded growth? Unbounded growth should be avoided if possible.\nHow long should data be retained?\n- We should consider carefully the need to store data indefinitely. For many features, removing certain data after a specified time period won’t impact the functionality of the feature. In these instances, we should put retention policies in place. These retention polices should have a sane default value which is considered best practice for operating the feature long term.\nNote: it is easier to iterate toward longer data retention time frames, but far harder to reduce retention time frames. Consider starting out with a conservative time frame.\nHow often will this data be accessed?\n- Much like the quantity of data stored can lead to scalability issues, so can the increased load on the data stores when the data is accessed frequently. There are ways to ease the burden on our infrastructure by properly forming queries, caching often used data, or carefully considering how repository data is accessed. If there are questions, consider reaching out to the\nDatabase Group\nor the\nGit Group\nfor assistance.\nA good example where we’ve successfully evaluated data storage is our CI/CD Artifacts. We’ve set some sane default values for both\nmaximum artifact size\nand for\ndefault artifacts expiration\n, while making these both configurable for administrative users.\nCross-stage features\nSee\nthis page\nfor details on working across stages at GitLab.\nStages, Groups, and Categories\nStages, groups, and categories\nserve as a common framework for organizing and communicating the scope of GitLab.\nHow to work as a PM\nIf you follow the principles and workflow above, you won’t be writing long, detailed\nspecs for a part of the product for next year. So how should you be\nspending your time?\nInvest the majority of your time (say 70%) in deeply understanding the problem.\nThen spend 10% of your time writing the spec\nfor the first iteration only\nand\nhandling comments, and use the remaining 20% to work on promoting it.\nA problem you understand well should always have a (seemingly) simple or obvious\nsolution. Reduce it to its simplest form (see above) and only ship that.\nPrioritization\nSee the\nCross-Functional Prioritization page\nfor more information.\nPrioritization Framework\nPriority\nDescription\nIssue label(s)\n1*\nSecurity\nbug::vulnerability\n2*\nData Loss\ndata loss\n3*\nResilience, Reliability,\nAvailability\n,\nand Performance\navailability\n,\ninfradev\n,\nCorrective Action\n,\nbug::performance\n4\nOKR’s\n5\nUsability\nUsability benchmark\n,\nSUS::Impacting\n,\nDeferred UX\n6\nInstrumentation\ninstrumentation\n7\nxMAU / ARR Drivers\ndirection\n8\nAll other items not covered above\n*indicates forced prioritization items with SLAs/SLOs\nForced Prioritization\nAny of the items with a “*” are considered issues driven by the attached\nSLO or SLA\nand are expected to be delivered within our stated policy. There are two items that fall into Forced Prioritization:\nSecurity Issues labeled with\nbug::vulnerability\nmust be delivered according to the stated\nSLO\nIssues supporting our product’s scale which include\nbug::availability\nwith\nspecific SLOs\nas well as\ninfradev\n,\nCorrective Action\n,\nci-decomposition::phase*\nthat follow the stated\ntype::bug\nSLO\nAny issues outside of these labels are to be prioritized using\ncross-functional prioritization\n. Auto-scheduling issues based on automation or triage policies are not forced prioritization. These issues can be renegotiated for milestone delivery and reassigned by the DRI.\nEngineering Allocation\nWhile we have moved to the\ncross-functional prioritization process\nto empower teams to determine the optimal balance of all types of issues, we will keep Engineering Allocations as a way to allow teams to quickly shift to a critical priority, designating the EM as the DRI to drive the effort.\nEngineering is the DRI for mid/long term team efficiency, performance, security (incident response and anti-abuse capabilities), availability, and scalability. The expertise to proactively identify and iterate on these is squarely in the Engineering team. Whereas Product can support in performance issues as identified from customers. In some ways these efforts can be viewed as risk-mitigation or revenue protection. They also have the characteristic of being larger than one group at the stage level. Development would like to conduct an experiment to focus on initiatives that should help the organization scale appropriately in the long term.  We are treating these as a percent investment of time associated with a stage or category. The percent of investment time can be viewed as a prioritization budget outside normal Product/Development assignments.\nEngineering Allocation is also used in short-term situations in conjunction and in support of maintaining acceptable Error Budgets for GitLab.com and our\nGitLab-hosted first\ntheme.\nUnless it is listed in this table, the Engineering Allocation for a stage/group is 0% and we are following normal\nprioritization\n. Refer to this\npage\nfor Engineering Allocation charting efforts. Some stage/groups may be allocated at a high percentage or 100%, typically indicating a situation where all available effort is to be focused on Reliability related (top 5 priorities from\nprioritization table\n) work.\nDuring an Engineering Allocation, the EM is responsible for recognizing the problem, creating a satisfactory goal with clear success criteria, developing a plan, executing on a plan and reporting status.  It is recommended that the EM collaborate with PMs in all phases of this effort as we want PMs to feel ownership for these challenges.  This could include considering adding more/less allocation, setting the goals to be more aspirational, reviewing metrics/results, etc.   We welcome strong partnerships in this area because we are one team even when allocations are need to resolving issues critical to our business.\nDuring periods of Engineering Allocation, the PM remains the interface between the group and the fields teams & customers. This is important because:\nIt allows Engineering to remain focused on the work at hand\nIt maintains continuity for the field teams - they should not have to figure out different patterns of communication for the customer\nIt keeps PMs fully informed about the product’s readiness\nGroup/Stage\nDescription of Goal\nJustification\nMaximum % of headcount budget\nPeople\nSupporting information\nEMs / DRI\nPMs\nBroadcasting and communication of Engineering Allocation direction\nEach allocation has a\ndirection page\nmaintained by the Engineering Manager. The Engineering Manager will provide regular updates to the direction page. Steps to add a direction page are:\nOpen an MR to the\ndirection content\nAdd a directory under the correct stage named for the title Engineering Allocation\nAdd a file for the page named\nindex.html.md\nin the newly created directory\nTo see an example for an Engineering Allocation Direction page, see\nContinuous Integration Scaling\n. Once the Engineering Allocation is complete, delete the direction page.\nHow to get a effort added to Engineering Allocation\nOne of the most frequent questions we get as part of this experiment is “How does a problem get put on the Engineering Allocation list?”.  The short answer is someone makes a suggestion and we add it.  Much like everyone can contribute, we would like the feedback loop for improvement and long terms goals to be robust.  So everyone should feel the empowerment to suggest an item at any time.\nTo help with getting items that on the list for consideration, we will be performing a survey periodically.  The survey will consist of the following questions:\nIf you were given a % of engineering development per release to work on something, what would it be?\nHow would you justify it?  Have you tried leveraging\ncross-functional prioritization process\nbefore considering an engineering allocation?\nWe will keep the list of questions short to solicit the most input.  The survey will go out to members of the Development, Quality, Security.  After we get the results, we will consider items for potential adding as an Engineering Allocation.\nClosing out Engineering Allocation items\nOnce the item’s success criteria are achieved, the Engineering Manager should consult with counterparts to review whether the improvements are sustainable. Where appropriate, we should consider adding monitoring and alerting to any areas of concern that will allow us to make proactive prioritizations in future should the need arise. The Engineering Manager should close all related epics/issues, reset the allocation in the above table to the floor level, and inform the Product Manager when the allocated capacity will be available to return their focus to product prioritizations.\nWhen reseting a groups Engineering Allocation in the table above, the goal should be set as\nfloor %\n, the goal should be\nempower every SWEs from raising reliability and security issues\n, percentage of headcount allocated should be\n10%\n, and\nN/A\nin place of a link to the Epic.\nAll engineering allocation closures should be reviewed and approved by the\nVP of Development\n.\nFeature Change Locks\nA Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The\nteam\ninvolved should be determined by the author, their line manager, and that manager’s other direct reports.\nIf the incident meets the above criteria, then the manager of the team is responsible for:\nForm the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone.\nPlan and execute the FCL.\nInform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL.\nProvides updates at the\nSaaS Availability Weekly Standup\n.\nIf the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development.\nDirect reports involved in an active\nborrow\nshould be included if they were involved in the authorship or review of the change.\nThe purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture.\nTimeline\nRough guidance on timeline is provided here to set expectations and urgency for an FCL.  We want to balance moving urgently with doing thoughtful important work to improve reliability.  Note that as times shift we can adjust accordingly.   The DRI of an FCL should pull in the timeline where possible.\nThe following bulleted list provides a suggested timeline starting from incident to completion of the FCL.  “Business day x” in this case refers to the x business day after the incident.\nDay 0: Incident:\nBusiness day 1:  relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required.\nBusiness day 2:  confirmation that an FCL is required for this incident and start planning.\nBusiness days 3-4:  planning time\nBusiness days 5-9 (1 week):  complete planned work\nBusiness days 10-11:  closing ceremony, retrospective and report back to standup\nActivities\nDuring the FCL, the team(s) exclusive focus is around\nreliability work\n, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must:\nCreate a public slack channel called\n#fcl-incident-[number]\n, with members\nThe Team’s Manager\nThe Author and their teammates\nThe Product Manager, the stage’s Product leader, and the section’s Product leader\nAll reviewer(s)\nAll maintainers(s)\nInfrastructure Stable counterpart\nThe chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc)\nCreate an\nFCL issue\nin the\nFCL Project\nwith the information below in the description:\nName the issue:\n[Group Name] FCL for Incident ####\nLinks to the incident, original change, and slack channel\nFCL Timeline\nList of work items\nComplete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved.  The Incident Review must include completing all fields in the Incident Review section of the incident issue (see\nincident issue template\n).  The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed.\nSee that not only all procedures were followed but also how improvements to procedures could have prevented it\nA work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic.\nDaily - add an update comment in your FCL issue or epic using the template:\nExec-level summary\nTarget End Date\nHighlights/lowlights\nAdd an agenda item in the\nSaaS Availability weekly standup\nand summarize status each week that the FCL remains open.\nHold a synchronous\nclosing ceremony\nupon completing the FCL to review the retrospectives and celebrate the learnings.\nAll FCL stakeholders and participants shall attend or participate async.  Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited.\nAgenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability.\nOutcome includes\nhandbook\nand\nGitLab Docs\nupdates where applicable.\nScope of work during FCL\nAfter the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to:\nAddress immediate corrective actions to prevent incident reoccurrence in the short term\nIntroduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted)\nIntroduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks)\nEnsure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage)\nImprove development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews)\nCreate issues with general process improvements or asks for other teams\nExamples of this work include, but are not limited to:\nFixing items from the Incident Review which are identified as causal or contributing to the incident.\nImproving observability\nImproving unit test coverage\nAdding integration tests\nImproving service level monitoring\nImproving symmetry of pre-production environments\nImproving the\nGitLab Performance Tool\nAdding mock data to tests or environments\nMaking process improvements\nPopulating their backlog with further reliability work\nSecurity work\nImprove communication and workflows with other teams or counterparts\nAny work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don’t affect the end of the FCL.\nA stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director.\nPlease also note the corresponding\nEngineering handbook section\nabout the relative importance and prioritization of availability, security, and feature velocity. To ensure we’re providing an appropriate focus on security, data loss, and availability, PMs should consider:\ntracking the appropriate labels for each prioritization category\n: Use a standing item to discuss these issues with an engineering manager and ensure you understand the impact of related issues in your area before planning a release.\noptimizing for quality once a merge request is ready for review\n: This means ensuring that Engineering has sufficient time to meet our\ndefinition of done\n- including a\nhigh-quality code review\n- without cutting corners to get something into production.\nPrioritization sessions\nTo help PMs plan, stage group stable counterparts can participate in prioritization sessions. They serve mainly as an\ninternal sensing mechanism\nfor PMs to make more informed prioritization decisions for different planning horizons. Usually, teams focus on the\nproduct releases\nhorizon, but can also focus on the\nFY themes\nor\nstrategy\nhorizons. This group exercise also boosts team morale, improves communication and empathy, and broadens individual’s perspectives. Besides, it can be a more informal and joyful way of connecting the team and discussing work.\nThe output of these sessions is a\npriority matrix\nthat shows the relative priority of a set of items based on two weighted criteria. Generally, the criteria are\nimportance\nand\nfeasibility\n, each one visualized as an axis of the matrix. You can change the criteria depending on the planning horizon or goals. To better understand how the sessions work, see an example\nmural\nand\nsession recording\n.\nAlways consider\nasynchronous sessions\nfirst, in an effort to be more inclusive and respectful of others time. That said, if possible, synchronous sessions can be ideal, as they allow limiting the time spent and make great use of the activities’ momentum for a more efficient discussion and voting.\nUse our\nMural template for prioritization sessions\n, built for product releases but adaptable for other planning horizons or criteria.\nProcess template\nAdapt this process as needed, and consider changing it to an asynchronous mode of communication. For example, participants can review the items async, add questions as\ncomments in Mural\n, and vote using\ndot voting\nor in\nvoting sessions\nheld on different days for each criterion.\nBefore:\nThe facilitator creates a mural from our\ntemplate for prioritization sessions\n, with the stage group and milestone in its name.\nThe facilitator invites the stage group counterparts for a 50-minute call, scheduled sometime before the team finalizes the release scope (see the\nproduct development timeline\n). Includes the URL of the mural and planning issue in the event description.\nThe facilitator shares the preparation work with the participants, preferably in the group’s planning issue (see the template after this list and an\nexample\n.\nParticipants do the preparation work (see the template after this list).\nDuring (see an\nexample session recording\n):\nThe facilitator starts\nrecording the call\n.\nPresent\n: For each participant, the facilitator\nsets the timer\nfor 10 minutes (adapt per the no. of participants). A participant then presents their issues, preferably using the\nRICE framework\n. Only after the participant presents all issues should other attendees ask questions. Once in a while, the facilitator announces how much time remains. When the timer goes off, repeat this for another participant.\nVote\n: After all participants have presented, the facilitator\nruns two voting sessions\n: first for\nimportance\n, and then for\nfeasibility\n. Each participant has 5 votes (adapt per the no. of issues). The facilitator sets the timer for 2 minutes, repeating for each voting session.\nVisualize\n:\nReview your voting session results\nand everyone helps place the stickies on the matrix, depending on their number of votes for each criterion.\nIf there’s still time, discuss the most-voted issues as a group.\nAfter:\nThe facilitator\nuploads the recording to GitLab Unfiltered\n, sets its visibility (see\nSAFE framework\n), adds to relevant playlists, and includes the URL of the mural and planning issue in the description.\nThe facilitator shares the recording URL and voting results in the planning issue, preferably with a screenshot of the matrix and links to the highest voted issues (see an\nexample\n.\nPreparation work template\n## :map: Prioritization session\n`@-mention participants`\nfor our [\nprioritization session\n](\n/handbook/product/product-processes/#prioritization-sessions\n), here's the [\n**Mural**\n](\nURL\n) for us to add the issues we want to see in\n**MILESTONE**\n. I scheduled our 50-minute session for\n**DATE**\n.\n1.\nAdd your issues to the Mural before the call. Let's try to limit to\n**5 issues per person**\n, so it's easier to vote on them and keep things focused. You can find instructions on how to add them in the \"Outline\" panel on the right side of the Mural UI.\n1.\nTry not to add Security or Availability issues. This is also noted in the [\nproduct processes page\n](\n/handbook/product/product-processes/#prioritization\n), as those issues have forced prioritization with SLAs/SLOs.\n1.\nIf you can, mark issues that appeared in previous sessions by changing their sticky color to\n**orange**\n.\nThanks and see you soon :bow:\nUsing the RICE Framework\nRICE\nis a useful framework for prioritization that can help you stack rank your issues. The RICE framework is a great tool for prioritizing many issues that seem to be of equal value at first glance. In order to drive clarity and alignment in the prioritization of work across the entire DevOps platform, and to help prioritize items that may compete for resources from different teams, we have set a standard for the RICE factors so all prioritization decisions based on RICE are using the same metric.\nReach\nHow many customers will benefit in the first quarter after launch? Data sources to estimate this might include qualitative customer interviews, customer requests through\nSupport/CS/Sales\n, upvotes on issues, surveys, etc.\nHigher reach means a higher RICE score:\n10.0 = Impacts the vast majority (~80% or greater) of our users, prospects, or customers\n6.0 = Impacts a large percentage (~50% to ~80%) of the above\n3.0 = Significant reach (~25% to ~50%)\n1.5 = Small reach (~5% to ~25%)\n0.5 = Minimal reach (Less than ~5%)\nImpact\nHow much will this impact customers and GitLab? Impact could take the form of increased revenue, decreased risk, and/or decreased cost (for both customers and GitLab). This makes it possible to compare revenue generating opportunities vs. non-revenue generating opportunities. Potential for future impact should also be taken into account as well as the impact to the GitLab brand (for example unlocking free-to-paid conversion opportunities).\nHigher impact means a higher RICE score:\nMassive = 3x\nHigh = 2x\nMedium = 1x\nLow = 0.5x\nMinimal = 0.25x\nConfidence\nHow well do we understand the customer problem? How well do we understand the solution and implementation details? Higher confidence means a higher RICE score.\nHigh = 100%\nMedium = 80%\nLow = 50%\nEffort\nHow many person months do we estimate this will take to build? Lower effort means a higher RICE score.\nCalculating RICE Score\nThese four factors can then be used to calculate a RICE score via the formula:\n(Reach x Impact x Confidence) / Effort = RICE\nHere is an example RICE calculation you can use to help prioritize work in your area. Feel free to embed this at the Epic level to provide context for why you did or did not prioritize.\nRICE Factor\nEstimated Value\nReach\n10.0\nImpact\n.5\nConfidence\n80%\nEffort\n2 month\n——\n——\nScore\n(10.0 x .5 x .80) / 2 =\n2.0\nOther important considerations:\nIs this in support of a company or team\nOKR\n?\nDoes it bring our\nvision\ncloser to reality?\nDoes it help make our community safer through\nmoderation tools\n?\nDoes it meaningfully improve the user experience of an important workflow?\nIs it something we need ourselves?\nIs it particularly\nimportant to customers\n?\nThe technical complexity is acceptable. We want to preserve our ability to make\nchanges quickly in the future so we try to avoid complex code, complex data structures, and optional settings.\nIt is orthogonal to other features (prevents overlap with current and future features).\nThe requirements are clear.\nIt can be achieved within the scheduled milestone. Larger issues should be split up, so that individual steps can be achieved within a single milestone.\nRefer to\nresearch participant gratuities\nsection to understand\nif your study qualifies for incentive distribution\n.\nWe schedule a prioritized issue by assigning it a milestone; for more on this see\nPlanning a Future Release.\nAsync RICE Exercise\nConducting a RICE prioritization exercise with your cross-functional counterparts is a powerful way to make the process more inclusive and improve the quality of your rankings. Consider making this an async-first process to accommodate team members across different timezones. For an example of how to do this async-first, see\nthis issue that the Geo team used to collaborate on a RICE prioritization exercise.\nThis\nblank async RICE template\nis also available for you to copy for your own async prioritization exercise.\nIssues important to customers\nFor prioritizing most issues, we should utilize the RICE framework noted\nabove\n, which will capture an aggregate of customer demand. You can also augment RICE scores with the\nCustomer Issues Prioritization Framework Dashboards\n:\nCustomer Requested Issues (Product)\nfor product managers\nCustomer Requested Issues (CSM)\nfor  Sales, CS and CSM\nThese dashboards provide several inputs for calculating RICE and aggregate all customer requested issues and epics into a single dashboard. These dashboards are not meant as a replacement or sole input for\nTop ARR Drivers for Sales/CS\n. Further requirements such as the\nintegration of themes\nneed to be implemented before this framework can be used to fully inform or replace tools such as the\nTop ARR tracker\n.\nIn some cases however, we may become aware of a feature which is particularly important to deliver on by a certain date. Examples of this could include an issue necessary to embark on a new GitLab rollout, a feature needed by a partner to launch an integration, or a method to import data from a service which is being discontinued. In these instances, the responsible PM can apply the\ncustomer\nor\ncustomer+\nlabel along with a\ndue date\nand initial\nmilestone\n. This set of labels can serve to indicate externally that the issue is particularly important, as well as a reminder for internal teams of its importance.\nIt is important to note that the\ncustomer\nand/or\ncustomer+\nlabel does not constitute a promise for the issue to be delivered in any given milestone or time frame.\nCommunity Considerations\nGitLab is open-source, encouraging and promoting a large ecosystem of contributors is critical to our success. When making prioritization decisions,\nit’s important to heavily weight activities which will encourage a stronger community of contributors. Some of those activities are:\nThe creation of small primitives that can be utilized and iterated on by community members\nThe building of integration points which can entice independent third parties to contribute an integration\nThe addition of tools or features which make the contribution experience easier\nProduct managers are not responsible for prioritizing contributions outside of their group. These contributions should be\nreviewed and merged swiftly\nallowing everyone\nto contribute, including non-product teams at GitLab.\nSaaS-First Framework\nThe\nSaaS-First product investment theme\nwill put us in a better position to support our customer base who is expected to accelerate adoption of SaaS products in the coming years. Features will also end up more secure, resilient, performant, and scalable for our self-managed customers if initially built to the expectations of SaaS. Therefore, it is important for PMs to understand and prioritize needs related to the SaaS business. When prioritizing SaaS related issues, we follow the same\nguidelines above\n. Within those guidelines there are a few areas that are especially important for PMs to focus on to ensure the success of our SaaS users.\nAvailability\nDowntime of GitLab.com has a material impact on our customers. From a 2014 report\nGartner estimates\nthat downtime costs companies on average “$5,600 per minute, which extrapolates to well over $300K per hour.” Furthermore, SaaS downtime can severely disrupt the productivity of GitLab Inc since we rely heavily on GitLab.com to run our business. Finally, downtime can also lead to customer churn and damage to our reputation. Thus, it is crucial as a company we collectively work towards consistently maintaining our\n99.95% SLA on GitLab.com\n. There are a few things that PMs can do in partnership with their engineering team to help ensure overall Availability for GitLab.com.\nMake sure each new feature that gets built has full end-to-end test coverage.\nBefore rolling out a new service to support a major new feature launch, ensure that your team has gone through the\nreadiness review process\n. The effort and timing for a readiness review will vary depending on the complexity of the feature. It is recommended to start this process as early as practical when a significant number of the questions can be answered but not too late to further develop the feature based on learnings from the review.\nEnsure there are\napplication limits\nfor your product areas enabled on GitLab.com to reduce\nabuse vectors\n.\nInfradev\nThe\ninfradev process\nis used to triage issues requiring priority attention in support of SaaS availability and reliability. As part of the broader effort to responsibly manage tech debt across the company, PMs should partner with their EMs to identify and\nincorporate\ninfradev labeled issues of\nall severities\n. Note, issues labeled with a severity must be mitigated and resolved within\nspecific time frames\nto meet the SLO. As EMs are the DRIs for prioritizing infradev work, PMs should familiarize themselves with the\ninfradev process\nand\nBoard\n.\nOther resources PMs can consult to identify and prioritize Infradev issues include:\nError Budgets\nand\nassociated dashboards\nThe weekly triage report emailed to PMs\nnow includes infradev items\nto prevent missing SLOs.\nLargest Contentful Paint\nmetrics to monitor application performance.\nWhile not required, PMs are encouraged to listen in on\nIncident Management\ncalls for incidents related to their product areas to 1) build empathy with the SRE team by gaining insight into how they handle incidents 2) gain a better sense of the impact of the incident to their customer base, and 3) identify improvements to their product areas, whether technical or feature-related, that could have prevented the incident. PMs are not expected to be in the decision-making path on actions taken to resolve the incident. They are there to listen and learn rather than attempting to decide/influence the course of resolution. After incidents involving their product area, PMs are also encouraged to engage in the\nIncident Review\n, including attendance at the\nSync Incident Review\ncall if their incident is scheduled. PMs can periodically review incidents via the\nProduction Incident Board\nEnterprise Customer Needs\nEnterprise customers interested in adopting SaaS may have common hard requirements to be able to use the product. For example, large enterprises may need certain security related features, such as Audit Logs, available before their security team will agree to the use of GitLab.com. This can also be about more than just features; it may include how and where we apply features so they can administrate their GitLab instance at enterprise-scale. For instance, permission management and shared configurations are best implemented top-down first instead of Project-up to meet the requirements of large organizations who may have 100s or 1000s of projects and only a small handful of people to perform these system-wide administrative tasks. In order to encourage more Enterprise adoption of GitLab.com, prioritize these common “hard-blockers” to adoption over “nice to have” features. PMs can use customer interviews to hone in on which issues are hard blockers to adopting SaaS vs more “nice to have” features that can be delivered later.\nTo track hard adoption blockers, use the ~“GitLab.com Enterprise Readiness” label within the\nGitLab-Org\nand\nGitLab-com\ngroups.\nSaaS Features\nThere are a few special considerations when it comes to delivering features for SaaS. In order to achieve\nparity between SaaS and Self-managed installations\nPMs should prioritize efforts to eliminate existing feature gaps that exist\nacross the two installations\n. Additionally, new features should ship for SaaS and self-managed at the same time. Features should be implemented at the group level first, before being implemented at the instance level, so that they will work across\nboth self-managed and SaaS\n. Finally, in order for new features to be adequately monitored, they should include\nappropriate logging and observability\n, which makes troubleshooting much easier.\nWorking with Your Group\nAs a product manager, you will be assigned as the\nstable counterpart\nto a single\ngroup\n. At GitLab we abide by\nunique, and extremely beneficial guidelines when interacting with our groups. These include:\nProduct managers are the\nDRIs\nfor overall work prioritization but work collaboratively with their EM, UX, and QEM stable counterparts to ensure the right priorities from each\nwork type\nare considered as each has a different DRI. Product Managers are responsible for communicating overall priority.\nProduct Managers provide the what and when for feature work. Engineering (UX, Backend, Frontend, Quality) provide the how. This process is documented as part of our monthly\nproduct\n,\nengineering\nand\nUX\ncadence. We\ndefine stable counterparts for each of these functions\nwithin a group.\nAs an all-remote company, our crispness when it comes to responsibilities throughout the Product Delivery process was born out of necessity, but it pays untold dividends. Some of the benefits include:\nWe avoid the ambiguity in handoffs between teams\nWe avoid the confusion of many responsible individuals\nWe avoid the slowness of consensus driven decision making\nWe avoid the disruption of frequent context switching\nWe gain the rigidity to be consistent\nWe gain the freedom to iterate quickly\nFrom Prioritization to Execution\nAs described above, prioritization is a multi-faceted problem. In order to\ntranslate the priorities of any given group into action by our engineering\nteams, we need to be able to translate this multi-faceted problem into a flat\nlist of priorities for at least the next release cycle. Product Managers are\nresponsible for taking all these prioritization considerations\nand creating a\nclear, sequenced list of next priorities. This list should be represented as an\nissue board\nso that each team has a clear interface for making decisions about work. From\nthis list, Product Designers, Engineering Managers and Product Managers can work together to\ndetermine what items will be selected for work in the immediate future.\nThis does not mean that items will be addressed in strict order - Product Designers, EMs and PMs\nneed to be cognizant of dependencies, available skill sets, and the\nrock/pebbles/sand\nproblem of time management to make the best decisions about selecting work.\nReviewing Build Plans\nTogether with your Engineering Manager, you will have an important role in ensuring that the Build Plans defined for issues are created with iteration in mind. Iteration is highly valuable for the following reasons:\nIt can result in discovering ways to parallelize effort, resulting in less team WIP and increase throughput\nIt can result in shipping something of value during an iteration rather then delaying everything\nIt can re-risk unknown unknowns by bringing them to light sooner in the development process\nPrioritizing for Predictability\nAs a company we emphasize\nvelocity over predictability\n. As a product manager this means\nyou focus on prioritizing, not scheduling issues. Your engineering\nstable counterparts\nare\nresponsible for velocity and delivery. However, there are instances when there is desire for predictability, including:\nSecurity\n, Bugs and Infra priorities with SLOs\nCustomer Commitments\nInfrastructure projects with IACV driver impact or those that result in significant cost savings for gitlab.com\nInfrastructure projects with customer commitment or heavily upvoted should be given a priority indicative of other customer commitments\nVision or Direction items for a launch\nAs the DRI for\nmilestone prioritization\n, it is the Product Manager’s job to prioritize for predictability when it is needed. You should do so by ensuring you prioritize a deliverable, and its dependencies, so that it can reasonably be expected to be delivered by any committed dates. If there is time pressure to hit a date, the PM should also explore de-scoping the issue to meet the deadline, rather than pressuring engineering to move abnormally fast or cut corners.\nPrivate tools and dashboards for monitoring and KPI tracking\nThese information sources may be useful to help you prioritize.\nFeature usage\nEE usage\n: dev.gitlab.org account\nGrafana\n: Google gitlab.com account\nKibana\n: dev.gitlab.org account\nS3stat\n: GitLab 1Password account\nSentry\n: dev.gitlab.org account\nGlobal Prioritization\nIndividual product managers must consider, and advocate for\nglobal optimizations\nwithin the teams they are assigned to. If your assigned team requires expertise\n(remember\neveryone can\ncontribute)\noutside the team you should make all reasonable efforts to proceed forward\nwithout the hard dependency while advocating within the product management team\nfor increased prioritization of your now soft dependencies.\nExecution of a Global prioritization can take many forms.  This is worked with both Product and Engineering Leadership engaged.  Either party can activate a proposal in this area.  The options available and when to use them are the following:\nRapid action\n- use when reassignment isn’t necessary, the epic can have several issues assigned to multiple teams\nBorrow\n- use when a temporary assignment (less than 6 months) to a team is required to help resolve an issue/epic\nScope Reassignment\n- use when scope that will take longer than 6 months to deliver is a high priority and the team member reporting structure does not need to change to accomplish the effort.\nRealignment\n- use when a permanent assignment to a team is required to resolve ongoing challenges. This has the highest impact to team members and should be considered if other options cannot achieve the desired goal. We strive to hire team members in the groups that will need them most.\nWe have found the following methods less successful in ensuring completion of work that warrants global prioritization:\nWorking Groups\n- This method involves convening a group of individuals who maintain full-time responsibility to other\nProduct Groups\nand completing work as part of the working group structure. This method isn’t preferred for completing product improvements, instead it can be utilized to scope work, or determine plans for future product delivery.\nFan Out Prioritization - This method of prioritization involves communicating a global prioritization to a number of\nProduct Groups\nin an effort to ensure each individual product group’s PM prioritizes the work in the time frame you’d prefer.  This method requires significant coordination costs and puts delivery at risk due to the lack of central prioritization responsibility. In most cases it is preferred to execute a scope reassignment, borrow or realignment to complete the improvements.\nPlanning and Direction\nAs a PM, you must plan for the near term milestones (more detailed) as well as for the long\nterm strategy (more broad), and everything in between.\nWhile monthly milestone planning is done in GitLab, longer horizon planning (1-3 years) is done in direction pages.\nThis will enable you to efficiently communicate both internally and externally\nhow the team is planning to deliver on the\nproduct vision\n.\nManaging your Product Direction\nDocumenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. This is especially important to the members of your Product Group. Establishing a direction for stakeholders (including team members) to participate in, and contribute to ensures there is a concrete connection to “Why” we are iterating and how it furthers\nGitLab’s mission\n. Here are some of those connections:\nImproving Product Performance Indicators - Usage represents market capture (whether paying or not), and the start of our dual fly-wheel. For existing customers that market capture in new capabilities also represents increased retention and because of the benefits of a single application - user satisfaction.\nImproving Competitiveness against\nalternative DevOps tools\n- Leads to increased Stages Per user, and sales as they add to our “Increase Operational Efficiency”\nAs a Product Manager you can highlight these connections in:\nDirection Content and Overview Videos\nWeekly Meetings\nIndividual Issue Descriptions\nPlanning Issues\nKickoff Videos\nCustomer Discovery Interview Summaries\nCommunicating this connection requires a multi-channel approach. We should strive to\nshare\nand communication about the connection to our Direction warrants consistent reinforcement.\nSection and Stage Direction\nSection leaders are responsible for maintaining Direction pages that lay out the strategy and plan for their respective section and stages. The direction pages should include topics outlined in this\ntemplate\n.\nCategory Direction\nA category strategy is required which should outline various information about\nthe category including overall strategy, status, what’s next, and the competitive landscape.\nThe category strategy should be documented in a handbook page, which allows for version control\nof the category strategy as well as the ability to embed video assets.\nOne of the most important pieces of information to include in the category strategy is a tangible next step or MVC\nand a clear description of focus and out-of-focus/maintenance areas.\nYour category strategies should contain short paragraphs with lots of references to specific epics and issues.\nReferencing topics, instead of features is encouraged as it’s more stable over time.\nWe use this\ncategory strategy template\nas the outline for creating the handbook pages. If additional headings are needed you are empowered\nto create and populate them in your category strategy. You must keep these categories in sync with\ncategories.yml\nand for\nnew categories.\nCategory direction should be reviewed on a regular basis (at least monthly) by the responsible product\nmanager. To indicate the last time a category direction page was reviewed, please ensure pages\ninclude\nContent Last Reviewed: yyyy-mm-dd\nat the top of the category content. Update this date with every\nreview, even if other content on the direction page has not changed.\nYou should link to your category strategy from your stage strategy page.\nFor categories that have already shipped, and that have a marketing\nproduct page,\ncategories.yml\nshould link to the product page.\nInside of the\ncategories.yml\nfile there are dates assigned for either achieved or anticipated maturity achievement. These should be kept inline with communicated dates for achievement and updated as required.\nIf the category has developed a\nUX Roadmap\nwe recommend the product designer to create a merge request to incorporate UX Roadmap themes into the category direction page roadmap. Assign the MR to the PM for review and merge.\nNavigating cross-stage or cross-section direction pages\nIn some cases there may be direction pages that span multiple stages or sections. A direction page that summarizes the collective vision as well as all the contributors of that direction is critical to maintain transparency and adequate assignment of ownership.\nThere are several examples of these types of direction pages today:\nSoftware Supply Chain Security Direction\nAutoDevOps Direction\nMonorepo Product Direction\nVersioned Dependencies Direction\nCustomizable Dashboards Direction\nThe steps for creating and managing a cross-section or stage direction are:\nCreate a direction page merge request adding the direction page to the\nGitLab direction directory\nSelect the category change template in the merge request\nFollow the process for\ncategory changes\nAdd\nCODEOWNERS\nby adding an entry with the direction page link and the page DRI GitLab Handle.\nOnce approved,\n@\nall relevant product managers on the addition\nOnce the direction page has been added, there needs to be an assigned DRI for maintaining monthly updates for the page. It is the DRIs responsibility to ensure the shared direction page is regularly reviewed and is up to date. This requires cross-section / cross-stage collaboration from the DRI.\nWhat makes a Product Direction issue?\nYou should use the\n~direction\nlabel together with category and section labels to mark epics and issues that fall into the given direction.\nProduct Direction items (i.e., with the label) should be direction-level items that move the strategy forward meaningfully. This is up to the PM to set the bar for, but there should be a clear step forward with real user value.\nIt’s important to note here that your plan\nis not\nsimply a list of new features and innovation.\nThose are included for sure, but so are issues related to all of your\nsensing mechanisms\n.\nA category upgrade from minimal to viable or delivery of a top customer issue (for example) can contribute to your plan just as much as a brilliant new innovative feature can. It’s up to PMs to balance this through a coherent longer-term strategy.\nConversely, in a broad sense anything could move the plan forward in a general way.\nFinally, issues are the substance of your plan. Ensure you are applying the label to both revelant epics\nand\nits issues.\nCommunicating dates\nAs product managers, a core job is to set the correct expectations. We do this typically through discussing our direction and assigning issues to milestones. When you need to communicate specific dates, it’s recommended doing it with limited visibility internally or directly to the customers. When you need to communicate specific dates use\ncalendar year (CY) dates\n. Fiscal year (FY) does not translate well outside the company.\nAccordingly, the direction pages are expected to refer to specific issues only for the next 3-4 months. Everything beyond that should discuss the topic, not specific issues.\nPlanning is indispensable but adjust, iterate\nCreating a thoughtful direction for your section, stage, or category is a useful thought exercise that can help focus efforts, aid in prioritization, and get large groups of people on the same page. But beware of simply executing your long term plan. Our industry is incredibly dynamic, and we learn new things every day that can and should cause us to re-think our long term plans.\nDelivery follows discovery\nWe should ship what brings value to our customers, not what is easy to ship. Stay focused on creating value each and every milestone, and be quick to adjust your longer term direction as you learn more.\nWhen working on a larger theme, you should start with validating the end state knowing that it will change as you start shipping features and you learn more from actual usage.\nOnce the final vision is validated, you should work with your designer and engineering counterparts to break it down to the smallest possible iterations in order to ship value quickly.\nYou might still prefer to validate the first “milestone” before getting into delivery.\nIt’s totally fine to never ship the initial vision and refine the vision after every iteration. A feature not built is much more valuable than a feature that is built but never used.\nMaturity Plans\nFor each category, we recommend tracking the improvements required to advance to the next level of\nmaturity\n. You are welcome to track maturity plans either with\n~maturity::...\nlabels or maturity issues.\nMaturity plans are highly encouraged - but not required - for non-marketing categories.\nPlanning and OKRs\nProduct groups may choose to have\nOKRs\n.\nTo use them effectively, you should have plans for the next three months in terms of driving specific product metrics through discovery and delivery actions.\nYou should discuss the product metrics with your manager, your design and engineering counterparts and the actions to reach the results with your design and engineering counterparts.\nPlanning Issue for Milestone\nFor each milestone, the planning quads come together to scope and plan work for the group for the upcoming milestone. Planning begins asynchronously with the creation of the planning issue. The planning issue is the SSOT for communication and all resources that are needed to plan a successful milestone. There are many ways to achieve to plan a milestone that should be curated based on the needs of the team. Below are a few examples of planning issues from groups acorss R&D to aid you in creating one that works best for your team.\nVerify::Pipeline Execution\nVerify::Testing\nMonitor::Respond\nCreate::Code Review\nCreate::Editor\nData Stores::Database\nAs you adapt your own issue, it is recommended you apply the label\nplanning issue\nto aid in tracking and to incorporate our\nProduct Principles\ninto the process.\nManaging Upcoming Releases\nRefer to the\nProduct Development Timeline\nfor details on how Product works with UX and Engineering to schedule and work on\nissues in upcoming releases.\nPlanning for Future Releases\nThere are two non-exclusionary ways to plan and communicate work for future releases\nPlanning with boards\nAs a Product Manager you can maintain prioritization of your groups issues using\na fully prioritized issue board where the ordering of the issues reflects their priority.\nPlanning with milestones\nProduct Managers can assign milestones to issues to indicate when an issue is likely\nto be scheduled and worked on.\nStill, whether an issue can be delivered within a milestone is the decision of the engineering team.\nAs we consider more distant milestones, the certainty of\nthe scope of their assigned issues and their implementation timelines is increasingly\nvague. In particular, issues may be moved to another project, disassembled, or merged\nwith other issues over time as they bounce between different milestones.\nThe milestone of an issue can be changed at any moment. The current assigned milestone\nreflects the current planning, so if the plan changes, the milestone should be updated\nas soon as possible to reflect the changed plan. We make sure to do this ahead\nof starting work on a release. Capacity is discussed between the PMs and the\nengineering managers.\nThere are helper labels to signals these plans like\n~next::1-3 releases\nand its variants.\nSpecial milestones\nIn addition, we have two special milestones:\nBacklog\nand\nAwaiting further demand\n.\nProduct Managers assign these issues to milestones that they have reviewed and\nmake sense, but do not fit within the upcoming release milestones due to either\na lack of comparative urgency or because we have not yet seen enough user\ndemand to prioritize the item yet. The best way to demonstrate urgency on\neither of these items is to vote on them and, if possible, add comments\nexplaining your use case and why this is important to you.\nRecommendation for when to change ‘Awaiting further demand’:\nAlways focus on the overall value of the feature.\nDo you have a good understanding of the user problem?\nDo you have a good understanding of the impacted user base?\nWas the proposed solution validated?\nIssues with the ‘Awaiting further demand’ label often mean poorly understood requests that require more information from our users and the market.\nOften public feedback only comes from a small percentage of people using or evaluating a feature or product.\nYou should always consider reaching out directly to our users to learn more about their use cases.\nRecommendation when changing a previously planned issue to\nBacklog\n:\nWhen moving\na previously planned issue to\nBacklog\n, especially one planned for within the next release or two,\nconsider the message that this may be sending to parties that were interested in this feature.\nIn some cases, they may have been depending or planning upon the issue to be delivered around\nthe assigned milestone, and with the change to\nBacklog\nthat is now unlikely to occur. In these instances,\nit is best to concisely explain the rationale behind the change in a comment, so\nthe community can understand and potentially respond with additional justification or\ncontext. It is also encouraged to move the issue to the\nBacklog\nas soon as it is clear that it will not be scheduled in the near future. This will help with understanding the change, as it will not seem like a last minute change.\nCommunicating clearly changing priorities might encourage the community to contribute the issue to GitLab.\nAgain, the milestone of an issue can be changed at any moment, including for both\nof these special milestones.\nShifting commitment mid-iteration\nFrom time to time, there may be circumstances that change the ability for a team\nto ship the features/issues they committed to at the beginning of the iteration.\nThese steps also apply when an issue is broken into multiple issues.\nWhen this happens, as a PM you must coordinate with your EM counterpart that\nthe impacted issues and their milestones\nare updated to reflect the new reality (for example, remove\ndeliverable\ntag, update\nmilestone\n, etc.). Additionally, notify your manager of the shift.\nUtilizing our design system to work autonomously\nOur\ndesign system\nprovides the means to work\nautonomously, without always needing UX insight, feedback and design. When problems can\nbe solved using an already documented paradigm, you don’t need to wait for UX\napproval to bring an issue to a reasonable state within a first iteration.\nIf lingering questions remain, subsequent iterations can address any shortcomings\nthe feature might have.\nAlways consider that with a dedicated product designer, it’s much faster and cheaper to iterate on a design than to re-implement it.\nAt the same time, not everything needs a design, and the design system is here to support your engineers and you in those cases.\nIteration Strategies\nIteration is a core value of GitLab, and product management has a central role to play in it. Iteration should be apparent as we deliver new features in MVCs, but it has implications for discovery too. As solution validation can move much faster than delivery, we should aim to validate features before building them. At this point, the feature validated is likely way bigger than an MVC if we would build it. We should pay special attention as product managers to still aim at iterative delivery after a bigger feature-set got validated, as delivered features provide the final validation. For example, once a direction is validated, we can start the delivery by documentation. As product managers we should aim to iterate as part of solution validation, and while delivering already validated solutions too.\nHere are several strategies for breaking features down into tiny changes that can be developed and released iteratively. This process will also help you critically evaluate if every facet of the design is actually necessary.\nWorkflow steps\nAs part of design and discovery, you likely created a minimal user journey that contains sequential steps a user is going to take to “use” the feature you are building. Each of these should be separated. You can further by asking yourself these questions:\nCan/is it desirable to perform this action via the UI or can we use a non-UI approach as a start (for example, CLI, API or .csv download of data)? This is a great starting point before adding UI components that achieve the same thing.\nWill there be different UI paths to perform the same task? Identify which are the most useful and which are the easiest to implement. Weight both factors when determining which to start with, and build from there.\nUser operations\nView, Create, Update, Remove and Delete are actions users take while interacting with software. These actions naturally provide lines along which you can split functionality into smaller features. By doing this, you prioritize the most important actions first. For example, users will likely need to be able to visually consume information before they can create, update, remove, or delete.\nFunctional criteria\nOften, the criteria for features are built on is implicit. It can help to use a test-driven development mindset where you write the tests and the outcomes you need from the software before building the software. Writing these tests can uncover the different criteria you need the development team to meet when building the new feature. Once you’ve outlined these tests, you may be able to use them to continue to break down the feature into smaller parts for each test. Here are a few examples:\nWhat is the default behavior when there is no data (empty/null state)?\nAre there automatic actions or events that occur as part of your feature? Write them down, and identify those that can be done manually by the user before adding automation.\nWill users of different roles have unique experiences? Can you prioritize and build one of these experiences first? (for example: guest, user, developer, maintainer).\nDo users want to be able to customize their view of information? Define all of the customizations you want to offer, and build them one at a time (for example, toggle on/off, filter, sort, search).\nException & error cases\nSoftware often fails and can fail in different ways depending upon how it is architected. It is always best to provide the user with as much information as possible as to why something did not behave as expected. Creating and building different states to handle all possible errors and exceptions can easily be broken down into individual issues. Start by creating a generic error state to display when anything goes wrong, and then add on to handle different cases one by one. Remember to always make error messages\nuseful\n, and add additional error messages as you identify new error states.\nBreaking down the UI\nBreaking down a design into pieces that can be released iteratively is going to depend on what you are building. Here are a few helpful questions to guide that process:\nWhat components already exist that you can reuse to go faster?\nWhat constitutes “extra styling”? Is there a way to display the information you need to display plainly and then add details later?\nDo you have lots of interactions in the design that make the UX lovable? Can you pull those out into separate issues and add them iteratively? (e.g. hover states, drag & drop, toggles, options to show/hide info, collapse/expand, etc)\nRefactors\nContinuously improving the software we write is important. If we don’t proactively work through\ntechnical debt\nand\nDeferred UX\nas we progress, we will end up spending more time and moving slower in the long run. However, it is important to strike the right balance between technical debt, deferred UX, and iteratively developing features. Here are some questions to consider:\nWhat is the impact if we do not refactor this code right now?\nCan we refactor some of it? Is a full re-write necessary?\nWhy do we need to use that new technology? (You may need to ask WHY multiple times to get to the root of the problem)\nSeparate announcement from launch\nFor large projects, consider separating the announcement from the actual feature launch. By doing so, it can create more freedom to iterate during the customer rollout. For example, you could announce in advance to give customers ample notice, and then roll it out to new customers first, then to existing Free customers, then to existing paid customers. Or you could do the opposite, and roll it out to customers first, before announcing broadly, to ensure the user experience is great before making a marketing splash.\nWhen considering dates for a product announcement or launch that may impact our Field team, consider the\nblockout restrictions\nrecognized by the Field team to ensure there won’t be any major disruption to the business near quarter end.\nFour phase transition\nSometimes the objective is to cut over from one experience, or one system, to another. When doing so, consider having four transition phases rather than a hard cut over. The phases are: 1) Old experience. 2) Run the old experience and new experience side-by-side, with the old experience the default, and the new experience is gradually rolled out to a subset of users. 3) Run them side-by-side, with the new experience the default for the majority, but the old experience is still available as a fallback in case of problems. 4) Deprecate the old experience and offer only the new experience. This strategy enables teams to have more flexibility and demonstrate more iteration in the rollout, with reduced risk.\nIterate to go faster\nWhen something is important, it is natural to want to launch it all at once to get to the end game faster. However, big bang style launches tend to need everything perfect before they can happen, which takes longer. With iteration you get feedback about all the things that aren’t a problem and are done enough. It’s better to launch in small increments, with a tight feedback loop, so that the majority of users have a great experience. This tends to speed up the overall timeline, rather than slow it down.\nRemote Design Sprint\nA\nDesign Sprint\n, is a 5-day process used to answer critical business questions through design, prototyping and testing ideas with customers. This method allows us to\nreduce cycle time\nwhen coming up with a solution.\nAs an all-remote company we run\nRemote Design Sprints (RDS)\n. Check out our\nguidelines for running an RDS\nto determine if it’s the right approach for the problem at hand.\nSpikes\nIf you’re faced with a very large or complex problem, and it’s not clear how to most efficiently iterate towards the desired outcome, consider working with your engineers to build an experimental\nspike solution\n. This process is also sometimes referred to as a “technical evaluation.” When conducting a spike, the goal is write as little code within the shortest possible time frame to provide the level of information necessary the team needs to determine how to best proceed. At the end of the spike, code is usually discarded as the original goal was to learn, not build production-ready solutions. This process is particularly useful for major refactors and creating\narchitecture blueprints\n.\nFeedback issues\nWhen launching a feature that could be controversial or in which you want to get the audience’s feedback, it is recommended to create a feedback issue.\nTimeline:\nCreate the issue and include in the release post.\nIf announcing in Slack or doing dogfooding, include a link to the feedback issue\nLeave the issue open for at least 14 days after launch\nRespond and catalog the feedback into separate issues\nClose the issue once the time frame has passed and summarize the learnings from the feedback issue\nHere are some examples of feedback issues:\nWebIDE\nFonts\nmaster\n->\nmain\nFeedback issue considerations\nFeedback issues are intended to collect feedback from the wider community and users. In some cases, internal user will be posting on behalf of users and customers. As a result we need to consider the following:\nFeedback issues that are public cannot contain\nSAFE\ninformation\nA linked confidential issue for Field feedback can be used, if needed, to support the exchange of customer details and feedback\nLeverage\ninternal comments\nas needed if customer details are being shared\nOther best practice considerations\nConsider the following to improve iteration:\nSuccessfully iterating should mean you’re delivering value in the most efficient way possible. Sometimes, this can mean fixing an underlying technical issue prior to delivering a customer facing feature.\nWherever possible, consider reuse of components that already exist in the product. A great example of this was our approach to creating our Jira importer, which reused the Jira service integration. Reuse also aligns well with our efficiency value.\nAvoid technical dependencies across teams, if possible. This will increase the coordination cost of shipping and lead to a slow down in iteration. Break down silos if you notice them and consider implementing whatever you need yourself.\nConsider a quick POC that can be enabled for small portion of our user base, especially on GitLab.com. An example of this was search, where it was originally enabled just for a few groups to start, then slowly rolled out.\nGreat collaboration leads to great iteration. Amazing MVCs are rarely created simply by product managers, they often arise out of collaboration and discussion between product, engineering, design, quality, etc.\nKeep the initial problem statement front and center for the team. Tight problem statements enable the team to identify a tight, iterative solution.\nBring data to the table early to help the team triangulate on the smallest iteration that will have the largest impact in solving the identified problem.\nIf the project is multi-phase, consider iterative targets and guardrails to help the team focus on the next iterative milestone, rather than the final end state goal.\nIf your team needs to do repetitive work on behalf of customers, partners, or other GitLab teams, consider using a framework approach so that dependent teams can self-serve.\nCommunity participation\nEngaging directly with the community of users is an important part of a PM’s job. We\nencourage participation and active response alongside GitLab’s\nDeveloper Relations team\n.\nConferences\nA general list of conferences the company is participating in can be found on our\ncorporate marketing\nproject.\nThere are a few notable conferences that we would typically always send PMs to:\nKubeCon\nAtlassian Summit\nGitHub Universe\nDevOps Enterprise Summit\nGoogle Next\nAWS Reinvent\nVelocity\nIf you’re interested in attending, check out the issue in the corporate marketing\nsite and volunteer there, or reach out to your manager if you don’t see it listed\nyet.\nStakeholder Management\nWhat is a Stakeholder?\nA stakeholder, or stable counterpart, is someone that is outside of your direct team who meets one or more of the following:\nIs directly or indirectly impacted\nHas the ability to stop, delay, or cancel\nExamples of stakeholders include Leadership, Sales, Marketing, Customer Support, and Customer Success. You may have stakeholders in any area of GitLab depending on your focus area and the specific issue. Stakeholders are also present outside of GitLab, for example, when a feature is being developed for a specific customer or set of customers. If you’re not sure who the stakeholder is to collaborate with or keep informed, visit\nproduct sections, stages, groups, and categories\n.\nUpdated SSOT for stakeholder collaboration\nStakeholder collaboration and feedback is a critical competitive advantage here\nat GitLab. To ensure this is possible, and facilitate collaboration, you should\nmaintain an updated single source of truth (SSOT) of your stage direction, category\nstrategies, and plan, at all times. This equips anyone who wants to contribute to\nyour stage’s product direction with the latest information in order to effectively\ncollaborate. Some sections and teams use the\nscheduled Direction Update issue template\nto\nremind themselves of this task.\nActively and regularly reach out to stakeholders. Encourage them to view and collaborate\non these artifacts via these (non-exhaustive) opportunities:\nEngage with users in epics, issues, and merge requests on GitLab.com.\nMeet with customers directly.\nParticipate in the\nCAB\n.\nTalk with GitLab team-members using GitLab.\nTalk with other PMs and\nProduct leadership\nto align your stage’s product direction with the rest of GitLab.\nHere is some guidance for new PMs to ensure your stage direction, category strategies and plan\nare up-to-date and visible to critical stakeholders:\nSeek feedback from the\nCAB\nonce every six months.\nPresent your plan to your manager once a month.\nPresent the plan and stage/category strategies to your stable counterparts\nPresent your stage strategy and plan in a\ncustomer meeting\nonce every two weeks.\nPresent changes to your stage strategy, category strategies, and plan to your\nstage group weekly meeting once a month.\nWorking with customers\nCustomer meetings\nIt’s important to get direct feedback from our customers on things we’ve built, are building, or should be building. Some opportunities to do that will arise during\nsales support meetings\n. As a PM you should also have dedicated\ncustomer discovery meetings\nor\ncontinuous interviews\nwith customers and prospects to better understand their pain points. As a PM you should facilitate opportunities for your engineering group to hear directly from customers too. Try to schedule customer meetings at times that are friendly to your group, invite them, and send them the recording and notes.  If you’re looking for other ways to engage with customers here is a video on\nfinding, preparing for, and navigating Customer Calls as a Product Manager at GitLab\n.\nSales support meetings\nBefore the meeting\n, ensure the Sales lead on the account has provided you with sufficient\nbackground documentation to ensure a customer doesn’t have to repeat information they’ve already\nprovided to GitLab.\nDuring the meeting\n, spend most of your time listening and obtaining information.\nIt’s not your job to sell GitLab, but it should be obvious when it’s the time\nto give more information about our products.\nFor message consistency purposes, utilize the\nValue Drivers\nframework when posing questions and soliciting information.\nAfter the meeting:\nCreate an interview snapshot\nsummarizing the meeting in the\ngitlab-com/user-interviews\nproject.\nThis project is private so that detailed and unredacted feedback can be shared internally.\nLink the Google Doc where detailed notes were taken.\nCreate or update related issues to publicly document feedback.\nThe synthesis of feedback from multiple meetings should happen publicly in an epic or issue.\nCustomer discovery meetings\nCustomer discovery meetings aren’t UX Research. Target them to broad-based needs\nand plan tradeoff discussions, not specific feature review. There are\ntwo primary techniques for targeting those topics:\nTop Competitors\n- Identify the top 3 competitors in your categories and talk to\ncustomers using those competitor asking: What is missing to have you switch from\nX to us? We’re not aiming for feature parity with competitors, and we’re not\njust looking at the features competitors talk about, but we’re talking with\ncustomers about what they actually use, and ultimately what they\nneed\n.\nUser Need\n- Identify GitLab users from key customers of your group’s\ncategories and features. Solicit them for what they love about the features and\nask about their current pain points with both the features as well as the surrounding\nworkflows when using those components of GitLab?\nFollow the below guidance to prepare and conduct Customer Discovery Meetings:\nSet up a meeting:\nIdentify what you’re interested in learning and prepare appropriately\nYou can find information about how customers are using GitLab through Sales and version.gitlab.com. Sales and support should also be able to bring you into contact with customers\nThere is no formal internal process to schedule a customer meeting, however you can check\nthis template\nfor gathering questions from interested parties and for capturing the notes during the customer discovery meetings.\nDuring the meeting:\nSpend most of your time listening and documenting information\nListen for pain points, delightful moments and frustrations\nRead back and review what you’ve written down with the customer to ensure you’ve captured it correctly.\nAfter the meeting:\nDocument your findings. Create a folder (sharable only within GitLab) in\nGoogle Drive\nwith a structure as follows:\nCustomer Meetings\nCustomer Name A\n2020-04-01\nagenda (Google Doc)\nartifacts (folder for docs, images, etc.)\n2020-10-03\nCustomer Name B\nCompetitive Research\nVendors\nVendor A\nsummary (Google Doc, optional)\n2020-04-01\n2020-10-03\nVendor B\nProjects\nproduct-10132-code-scan-results (reference GitLab issue number)\nux-13840-selector-widget\nShare your findings with your fellow product managers and the sales and customer success account teams for the customer\nMake appropriate adjustments to category strategies, feature epics, and personas\nYou can find some additional guidance on conducting Customer Discovery Meetings from these resources:\nHow to Interview Your Customers\nEffective User Interviews\nSourcing customers\nPMs should also feel free to collect and evaluate customer feedback independently. Looking at\nexisting\nresearch can yield helpful\nthemes as well as potential customers to contact. You can use the following techniques to source customers directly:\nGitLab Solution Architects\nknow our customers the best, especially from a technical perspective.\nGitLab Issues\ncustomers will often comments on issues, especially when the problem described by the issue\nis a problem they are experiencing firsthand. The best strategy is to capture their feedback directly on the issue,\nhowever, there are times when this is not possible or simply doesn’t happen. You can find alternative contact info by clicking on the user’s handle to see their\nGitLab user page; this page often includes contact information such as Twitter or LinkedIn. Another option is to\ndirectly mention users in issues to engage async. In popular issues you can just leave a general comment that you’re looking for people to interview and many will often volunteer.\nCustomer Issues Prioritization Dashboards:\nThe\ncustomer issues prioritization framework\naggregates customer data with the issues and epics that they have requested. When\nviewing the dashboard\n, double click on the issue or epic of interest within the “priority score by noteable” table then scroll down to “QA Table - User request weighting by customer” to see the specific customers that are interested in the issue or epic.\nGitLab.com Broadcast Messages\nBroadcast Messaging is a great tool for acquiring customer feedback from within the product. You can leverage\nthis workflow\nto use broadcast messaging.\nGitLab Sales and Customer Success\nYou can ask for help in\nSlack customer success channel\nor join the Field Sales Team Call and the All CS Team Call to present a specific request via the Zoom call.\nCustomer Success Managers (CSM)\nIf a customer has a dedicated CSM, they may also have a regular meeting with a CSM. These meetings are a great opportunity to spend 15 minutes getting high-level feedback on an idea or problem. In Salesforce, CSMs are listed in the Customer Success section in the customer’s account information. CSMs are also very familiar with the feature requests submitted by their customers and can help identify customers that may be interested in the feature you are working on.\nZendesk\nis a great tool to find users who are actively making use of a feature and either came across a\nquestion or an issue. Users who’ve had recent challenges using the product really appreciate PMs taking the time to learn from\ntheir experience. This establishes that we are willing to listen to users, even if they are not having a great experience.\nThis is also a great opportunity to discuss the roadmap and provide context so that users understand what we are going to improve.\nThe best way to request a chat is through the support ticket; however, you can also click\non the user that initiated the interaction and their contact information will display on the left hand side panel.\nIf you don’t have a Zendesk account, see\nhow to request a light agent Zendesk account\n.\nYou can use\nZendesk’s trigger feature\nto receive email alerts when specific keywords relevant\nto your product area are mentioned in a support ticket. Additionally, it is possible to create a simple dashboard that lists all the currently active support tickets that match the trigger. Reach out\nin #support_escalations to receive some help in setting this up.\nSocial Media\ncan also be effective. If your personal account has a reasonable number of connections/followers, you can post your desire to connect with users on a specific question directly. When posting, remember to include the subject you want to discuss as well as how people can reach out. You can also reach out to the\n#social-media\nchannel to have your tweet retweeted by the @gitlab account.\nIf you want to reach a wider audience, consider asking a community advocate to re-post using the official GitLab account for the relevant platform.\nYou can reach advocates on the\n#community-advocates\nSlack channel.\nYou can also reach out to authors of articles related to tech your team is working on, via various publications such as\nMedium\n. A clear and brief email\nvia the publication website or LinkedIn is a good way to engage.\nYou’re able to request a\nLinkedIn Recruiter license\n. This\nUnfiltered video\nand\nslide deck\nprovide an overview on how to use LinkedIn Recruiter to source participants for your study.\nIf you’ve tried these tactics and are still having challenges getting the customer feedback you need, connect with your manager for support and\nthen consider leveraging the\nUX Research team\n.\nAdditionally, you can connect with Product Operations directly or by attending Product Operations Office Hours for troubleshooting support.\nNon-users\nare often more important than GitLab users. They can provide the necessary critical view to come up with\nideas that might turn them into GitLab users in the end. The best non-users are the ones who don’t even plan on switching\nto GitLab. You can reach these people at local meetups, conferences or online groups like, Hacker News. In every such case,\nyou should not try to interview the user on spot, instead organize a separate meeting where nobody will be distracted, and\nboth of you can arrive prepared.\nCustomer Advisory Board meetings\nOne specific, recurring opportunity to get direct feedback from highly engaged customers\nis the\nGitLab DevOps Customer Advisory Board\n.\nYou may be asked by the CAB to present your stage at these meetings. Here are\nsome guidelines when doing so:\nYou may be asked by the CAB to present your stage or a specific product offering at these meetings.  Here are some guidelines for presenting:\nProduct Focused Highlights: All presentation materials should be focused on products we plan to launch or evaluating products we have available to customers.\nEmphasize Dialogue over Monologue: Structure your presentation to encourage meaningful two-ways discussions.\nPrepare Targeted Questions: Develop 2-3 specific, through provoking questions to engage members in conversation. These questions should be focused on presentation, strategic decisions GitLab is currently grappling in your stage that you would like to gather customer feedback on, or a question related directly to customer workflows.\nConnect to Previous Feedback: Reference previous feedback you have received from advisory meetings in the past. This will help illustrate to CAB members the value of their time and that GitLab takes their recommendations into consideration.\nPrompt Follow Through: Document key insights and actions items during your session.\nBe Prepared: Be sure to prepare for the meeting ahead of time independently.\nPlease review\nGitLab Product Customer Advisory Board Page\nfor more details.\nWorking with (customer) feature proposals\nWhen someone requests a particular feature, it is the duty of the PM to investigate\nand understand the need for this change. This means you focus on what is the problem\nthat the proposed solution tries to solve. Doing this often allows you to find that:\nAn existing solution already exists within GitLab\nOr: a better or more elegant solution exists\nDo not take a feature request and just implement it.\nIt is your job to find the underlying use case and address that in an elegant way that is orthogonal to existing functionality.\nThis prevents us from building an overly complex application.\nTake this into consideration even when getting feedback or requests from colleagues.\nAs a PM you are ultimately responsible for the quality of the solutions you ship,\nmake sure they’re the (first iteration of the) best possible solution.\nCompetition channel\nWhen someone posts information in the\n#competition\nchannel that warrants\ncreating an issue and/or a change in\nfeatures.yml\n, follow this\nprocedure:\nCreate a thread on the item by posting\nI'm documenting this\nEither do the following yourself, or\nlink\nto this paragraph for the person picking this up to follow\nIf needed: create an issue\nAdd the item to the\nfeatures.yml\nIf GitLab does not have this feature yet, link to the issue you created\nFinish the thread with a link to the commit and issue\nReaching out to specific users or accounts based on GitLab usage\nYou may want to interview a specific account because they are exhibiting atypical usage patterns or behaviors. In this case,\nrequest Support to contact GitLab.com user(s) on your behalf\n.\nIf it is the weekend, and the contact request is urgent as a result of an action that might affect a users’ usage of GitLab,\npage the CMOC\nAssessing opportunities\nOpportunity canvas\nOne of the primary artifacts of the validation track is the Opportunity Canvas. The Opportunity Canvas introduces a lean product management philosophy to the validation track by quickly iterating on level of confidence, hypotheses, and lessons learned as the document evolves. At completion, it serves as a concise set of knowledge which can be transferred to the relevant issues and epics to aid in understanding user pain, business value, the constraints to a particular problem statement and rationale for prioritization. Just as valuable as a validated Opportunity Canvas is an invalidated one. The tool is also useful for quickly invalidating ideas. A quickly invalidated problem is often\nmore valuable\nthan a slowly validated one.\nPlease note that an opportunity canvas is not required for product functionality or problems that already have well-defined\njobs to be done (JTBD)\n. For situations where we already have a strong understanding of the problem and its solution, it is appropriate to skip the opportunity canvas and proceed directly to solution validation. It might be worth using the opportunity canvas template for existing features in the product to test assumptions and current thinking, although not required.\nReviews\nReviewing opportunity canvases with leadership provides you with an opportunity to get early feedback and alignment on your ideas. To schedule a review:\nContact the CProdO EBA to schedule a 25 minute meeting. Let the EBA know if you are scheduling a comparative or singular Opportunity Review\nThe VCProdO and VP of UX should be included as required attendees.\nThe Product Section Leader, Direct Manager, UX counterpart and Product Operations should be included as optional attendees.\nComplete the Opportunity Canvas(es) at least one business day before the meeting to give attendees an opportunity to review content.  The attendees will review the canvas(es) in advance and will add questions directly to the canvas document(s).\nWhen the Opportunity Canvas(es) is complete, inform the meeting participants by tagging them in a post in Slack #product. Include a direct link to the canvases.\nDuring the review, feel free to present anything you’d like. For comparative reviews it’s helpful to start with your proposal for which Opportunity to pursue first. For singular reviews it’s fine to go straight to Q&A since the attendees should have reviewed the canvas in advance.\nReferences\n:\nOpportunity Canvas Template\nCompleted Opportunity Canvas Reviews\nOpportunity Canvas YouTube Playlist\nExample Opportunity Canvas - Fine Grained Access Control (GoogleDoc)\nExample Opportunity Canvas - Error Tracking (Mural)\nOpportunity canvas lite\nOpportunity Canvases are a great assessment for ill-defined or poorly understood problems our customers are experiencing that may result in net new features. As noted previously, opportunity canvases are helpful for existing features, except they are tailored for new feature development which is where the\nProduct-Opportunity-Opportunity-Canvas-Lite\nissue template delivers. This template offers a lightweight approach to quickly identify the customer problem, business case, and feature plan in a convenient issue. The steps to use the template are outlined in the\nInstructions\nsection and for clarity, one would create this issue template for an existing feature they are interested in expanding. For example, this template would be great to use if you are evaluating the opportunity to add a third or fourth iteration to an MVC. This issue should leverage already available resources and be used to collate details to then surface to leadership for review. Once you fill out the template, you will assign to the parties identified in the issue and you can always post in the\n#product\nchannel for visibility.\nAnalyst engagement\nPart of being a product manager at GitLab is maintaining engagement with\nanalysts, culminating in various analyst reports that are applicable to your\nstage. In order to ensure that this is successful and our products are rated\ncorrectly in the analyst scorecards, we follow a few guidelines:\nSpend time checking in with the analysts for your area so they are familiar with our story and features earlier, and so we can get earlier feedback. This will ensure better alignment of the product and the way we talk about it will already be in place when review time comes. Remember, analysts maintain a deep understanding of the markets they cover, and your relationship will be better if it is bi-directional. Inquire with analysts when you have questions about market trends, growth rates, buyer behavior, competitors, or just want to bounce ideas off of an expert.\nMake paying attention to analyst requests a priority, bringing in whoever you need to ensure they are successful. If you have a clear benefit from having executives participate, ask. If you need more resources to ensure something is a success, get them. These reports are not a “nice to have”, ad-hoc activity, but an important part of ensuring your product areas are successful.\nWhen responding to the analyst request, challenge yourself to find a way to honestly say “yes” and paint the product in the best light possible. Often, at first glance if we think we don’t support a feature or capability, with a bit of reflection and thought you can adapt our existing features to solve the problem at hand. This goes much smoother if you follow the first point and spend ongoing time with your analyst partners.\nPerform retrospectives after the analyst report is finalized to ensure we’re learning from and sharing the results of how we can do better.\nIt’s important to be closely connected with your product marketing partner,\nsince they own the overall engagement. That said, product has a key role to play\nand should be in the driver’s seat for putting your stage’s best foot forward in\nthe responses/discussions.\nEngage with internal customers\nProduct managers should take advantage of the internal customers that their\nstage may have, and use them to better understand what they are really using,\nwhat they need and what they think is important to have in order to replace\nother products and use GitLab for all their flows.\nWe want to meet with our internal customers on a regular basis, setting up\nrecurring calls (e.g., every two weeks) and to invite them to share their\nfeedback.\nThis is a mutual collaboration, so we also want to keep them up to date with the\nnew features that we release, and help them to adopt all our own features.\nUSAT responder outreach\nEach quarter, we reach out to\nUser Satisfaction (USAT)\nsurvey responders who opted-in to speak with us. This is a fantastic opportunity to build bridges with end users and for Product Managers and Product Designers to get direct feedback for their specific product area. If a user has taken the time to share a verbatim with us and offered to have a conversation, they deserve to be followed up with - especially if that user is dissatisfied with GitLab.\nWhen we speak to users directly during this workflow, we must be mindful of\nProduct Legal guidance\nand the\nSAFE framework\n, just as we would be with any other documentation or communication within Product.\nOverall process\nUX Researcher DRI opens a Responder Outreach issue and notifies Product team members in the comments that the issue is ready.\nProduct team members go through the list of USAT responders who have agreed to a follow up conversation. Those team members either sign up for outreach or tag in Product Managers or Product Designers where appropriate.\nProduct team members then view the sheet and confirm who they want to talk with.\nProduct team members reach out to users and schedule interviews.\nProduct team members add notes and video recordings from the interviews to the\nUSAT\ncolumn in this\nDovetail project\n.\nProduct team members mark which users they interviewed, the link to the session recording, and include any additional notes about the session in the follow up users sheet.\nAs Product team members create or continue to work on issues related to USAT follow up interviews, they should the following label (\nUSAT::Responder Outreach\n) to help the UX Research team track the impact of those interviews.\nNote:\nGitLab Customer Success Managers can also follow the process above, so please be mindful to coordinate with them if they reach out or if they’ve already signed up to speak with a user. Users should never be contacted by more than one GitLab team member. Users should never be contacted more than twice if they do not respond to an outreach email.\nInstructions for product leaders\nLook at the\nUSAT Follow Up Users\nGoogle Sheet that will be shared with you in an issue. Identify any users you think a Product Manager or Product Designer from your group would be interested in speaking to. Assign the specific Product Manager or Product Designer to reach out to that user by putting their name in the appropriate column. This will also serve as a “hold” on the user and if others are interested they will need to coordinate with that team member.\nIf you think another Product Manager or Product Designer in your group or another group would be interested in speaking to the same user, consider notifying that team member for the sake of efficiency.\nIf you’re interested in having one of your Product Managers or Product Designers speak with a user that has already been “claimed” by another GitLab team member, have your Product Manager or Product Designer reach out to that team member so they can coordinate a joint conversation.\nWe need to be mindful of our users’ time and should limit this outreach to a single conversation rather than successive conversations.\nInstructions for Product Managers and Product Designers\nAnother GitLab team member may put your name next to users they felt were relevant for you to speak with.\nIf you are unable or unwilling to speak with the user, please either remove your name or find a replacement.\nIf you see other users that have not been assigned to another team member and you feel may be relevant to speak with, assign that user to yourself.\nIf you see other users that have been assigned to another team member, reach out to that team member and coordinate a joint conversation. It is very important you do not reach out to users that have been assigned to other team member as we want to be mindful of our users time and not risk negative sentiment due to over-communication. We are limiting these conversations to one per user for these reasons.\nProcess for reaching out to users\nCalendly is the best method for scheduling users.\nSet up your free Calendly account\nif you haven’t done so. Add details to the invite description describing yourself and the conversation purpose. Also add your personal Zoom link, either via connecting your Zoom account or pasting in your personal Zoom URL.\nYou’ll need to add three extra questions to the invite form in order to ask for consent to record, example below. Please use these questions as written in the example as they closely mirror the content that has been validated by the UX Research Team.\nDraft an email that you’ll send to users. Example copy is below. You can re-phrase things as you wish but make sure you still cover the same points as the example.\nBE ON TIME TO YOUR CALL\n. Better yet, be 2 minutes early. Be ready to coach people through getting Zoom to work properly. Make sure everyone on the call introduces themselves.\nIf people have agreed to recording, still ask them once again if it’s OK if you record before turning it on. Obviously, do not record people who did not give consent.\nSee our training materials on\nfacilitating user interviews\n.\nExample email copy\n:\nHello,\nMy name is X and I’m the Product Manager/Designer for X at GitLab. Thank you for giving us the opportunity to follow up on your response to our recent survey.\nI would be very interested in speaking further about some of the points you raised in your survey response. Would you be willing to do a 30 minute Zoom call to give us some more detailed feedback on your experience using GitLab? You’d be able to schedule the call at a time convenient to you.\nSchedule a time for the call using this link:\nhttps://calendly.com/yourname/30min\nThank you for your feedback and let me know if you have any questions.\nBest,\nYour name\nCopy for three extra questions in Calendly invite\n:\nTo make sure we correctly represent what you say in any followup issues or discussions, we would like to record this conversation. Please indicate if you give permission to record this conversation.\nYes, you may record our conversation.\nNo, you MAY NOT record our conversation.\nAt GitLab, we value transparency. We would love to share the recording of conversation publicly on GitLab. Please indicate whether you give your permission for the recording to be shared on GitLab.\nYes, you may share the recording publicly on GitLab.\nNo, you MAY NOT share the recording publicly on GitLab.\nI agree that by participating in this, and any future, research activities with GitLab, GitLab B.V. will retain all intellectual property rights in any suggestions, ideas, enhancement requests, feedback, or other recommendations I provide which are hereby assigned to GitLab B.V.\nYes\nNo\nAfter the call\nIf multiple GitLab employees are on the call, it can be beneficial to debrief immediately afterwards.\nCollect all notes that were taken and Zoom recording from the interview and add them to the\nUSAT\ncolumn in this\nDovetail project\n.\nIf you told the user you’d follow up on anything or promised to send them further information, make sure you do so, ideally within two business days.\nGo back to the spreadsheet and mark that you spoke to a user in the\nStatus\ncolumn and add a link to the recording in Dovetail.\nIf you create any epics/issues to address feedback gathered in the calls, add the label\nUSAT::Responder Outreach\nand link them to the corresponding USAT responder outreach issue from that quarter.\nNote: It’s important to tag your USAT related issues to help tracking/reporting such as the\nimprovement slides\nin Product Key Reviews.\nCost profile and user experience\nEvery Product Manager is responsible for the user experience and cost profile of their product area regardless of how the application is hosted (self-managed or gitlab.com). If a feature is unsustainable from a cost standpoint, that can erode the margins of our SaaS business while driving up the total cost of ownership for self-managed customers. If a feature is slow, it can impact the satisfaction of our users and potentially others on the platform.\nThere are a few questions a Product Manager should ask when thinking about their features:\nWhat are the costs associated with my product area? What is the impact on the margin for each tier of GitLab.com?\nConsider network, compute, and storage costs\nAre there tools in place to help GitLab, Inc and self-managed admins optimize the cost footprint for running GitLab (e.g. node rebalancing, transitioning objects to less costly storage classes, garbage collection capabilities)\nAre there features and default settings that help users stay within their\nCI and Storage limits\n?\nAre there configurable\napplication limits\nin place for admins to enhance the availability and performance of GitLab and reduce\nabuse vectors\n?\nWhat is the experience of users when interacting with these features on GitLab.com? Is it fast and enjoyable?\nThese items do not all need to be implemented in an MVC, though potential costs and application limits should be considered for deployment on GitLab.com.\nProduct Managers should also regularly assess the performance and cost of features and experiences that they are incrementally improving. While the MVC of the feature may be efficient, a few iterations may increase the cost profile.\nTools to understand operational costs\nThere are a few different tools PM’s can utilize to understand the operational costs of their features. Some of these are maintained by Infrastructure, based on the operational data of GitLab.com. Others tools, like service ping, can be utilized to better understand the costs of our self-managed users. Ultimately, each product group is responsible for ensuring they have the data needed to understand and optimize costs.\nUseful Dashboards to Visualize Infrastructure Costs:\nAccess to Billing Console\n(\nAccess Request\nrequired)\nService ping\nYour Engineering Manager, #infrafin on Slack, and the broader GitLab team\nLinks to learn more about infrastructure cost management initiatives\nInfrafin Board Workflow\nInfrafin Board by Group\nInfrafin Board by Savings Amount\nInfrafin Cost Management Handbook Page\nTools to understand end user experience\nSnowplow data\non GitLab.com\nQuarterly USAT and SUS surveys\nPage load performance\nLife Support PM Expectations\nWhen performing the role of Life Support PM only the following are expected:\nManagement of next three milestones\nAttend group meetings or async discussion channels\nProvide prioritization for upcoming milestones\nMVC definition for upcoming milestones\nIncrease fidelity of scheduled issues via group discussion\nEnsure features delivered by the group are represented in the release post\nSome discouraged responsibilities:\nLong-term MVC definition\nOne year plan\nCategory Strategy updates\nDirection page updates\nAnalyst engagements\nCAB presentations\nBuild vs “Buy”\nAs a Product Manager you may need to make a decision on whether GitLab should engineer a solution to a particular problem, or use off the shelf software to address the need.\nFirst, consider whether our users share a similar need and if it’s part of GitLab’s scope. If so, strongly consider\nbuilding as a feature in GitLab\n:\nEvaluate open source options\nto utilize.\nIf time to market is an issue, a\nglobal optimization issue\nmay also be opened to assist with prioritization.\nFor a potential acquisition, follow the\nacquisition process\n.\nIf the need is specific to GitLab, and will not be built into the product, consider a few guidelines:\nNecessity: Does this\nactually\nneed to be solved now? If not, consider proceeding without and gathering data to make an informed decision later.\nOpportunity cost: Is the need core to GitLab’s business? Would work on other features return more value to the company and our users?\nCost: How much are off the shelf solutions? How much is it to build, given the expertise in-house and opportunity cost?\nTime to market: Is there time to engineer the solution in-house?\nIf after evaluating these considerations buying a commercial solution is the best path forward:\nConsider\nwho owns the outcome\n, as the spend will be allocated to their department. Get their approval on the proposed plan.\nHave the owning party\nopen a finance issue\nusing the\nvendor_contracts\ntemplate, ensure the justification above is included in the request.\nEvaluating Open Source Software\nWhen considering open source software in build vs. “buy” decisions we utilize the following general criteria to decide whether to integrate a piece of software:\nCompatibility\n- Does the software utilize a\ncompatible open source license\n?\nViability\n- Is the software, in its current state, viable for the use case in question?\nVelocity\n- Is there a high rate of iteration with the software? Are new features or enhancements proposed and completed quickly? Are security patches applied regularly?\nCommunity\n- Is there a diverse community contributing to the software? Is the software governed by broader communities or by a singular corporate entity? Do maintainers regularly address feedback from the community?\nAnalytics instrumentation guide\nPlease see\nAnalytics Instrumentation Guide\nPost Launch Instrumentation Guide\nGoal:\nIncrease product instrumentation across our offerings to deliver greater product insights. There is a need to retroactively evaluate what features have been instrumented and need instrumentation from past feature launches. Post launch implementation will allow us to gather insights and allow better visibility into feature usage + adoption that may not currently be captured.\nTasks:\nIssue Request\nPM:\nFollowing the\nProduct Data Insights handbook\n, create an issue focused on instrumentation of products at a category level\nusing the Post-Launch Instrumentation template\n.\nAssign the issue to your Product Data Insights counterpart. Carolyn Braza (\n@cbraza\n) will automatically be added for visibility.\nAlignment\nPM/PDI: Once all stakeholders have been added to the issue, Product Data Insights team will set time with the PM counterpart to align on:\nGoals\nPriorities\nMilestones\nTPgM may assist in implementation of planning documentation.\nCategory Inventory & Instrumentation Mapping\nPM/PDI: Work together to outline a category inventory using\nthis spreadsheet template\n.\nCategory level implementation should be prioritized by most utilized features and the areas we believe have the largest impact on the business.\nFrom there, PM and Product Data Insights counterparts will utilize labels outlined here in step 3 for markers of implementation status.\nThe PM will lead mapping of instrumentation at a category level, in close partnership with the Product Data Insights counterpart.\nFor any metric or event that has been identified to contribute to a categories instrumentation the correct\nproduct_category\nshould be set in the definition file.\nAudit & Review\nPM/PDI: will audit implementation/review implementation to quality check and ensure accuracy async. TPgM may assist in QA.\nUpdate Categories yaml file\nPM: Update the categories.yml file with the applicable implementation status (see below) Utilizing the categories.yml file, the Product Data Insights team will create a Tableau dashboard to track implementation at a category level over time.\nComplete -  Instrumentation complete and satisfactory\nIncomplete - Some instrumentation, but not complete\nNone - No instrumentation - instrumentation needed\nNot needed - Instrumentation not needed\nAnalytics Instrumentation\nPM/PDI: Once category instrumentation audit has been completed. For categories marked as either red (needing implementation) or yellow (some instrumentation, not complete),\nPM/EM: will create an instrumentation issue with the label\nanalytics instrumentation\nand utilizing the\nusage data instrumentation template\n.\nPage load performance metrics\nIn order to better understand the perceived performance of GitLab, there is a synthetic page load performance testing framework available based on\nsitespeed.io\n.\nA\nGrafana dashboard\nis available for each stage, tracking the\nLargest Contentful Paint\nand first/last visual change times. These metrics together provide high-level insight into the experience our users have when interacting with these pages.\nAdding additional pages to performance testing\nThe Grafana dashboards are managed using\ngrafonnet\n, making it easy to add additional pages and charts.\nTesting a new set of pages requires just 2 steps:\nAdd the desired URL’s to the sitespeed\nunauthenticated\nor\nauthenticated\ntesting list. Add a new line with the URL, then a space, and an alias of the form\n[Group]_[Feature]_[Detail]\n. The alias needs to be one word, an example MR is\nhere\n. Note the authenticated user account does not have any special permissions, it is simply logged in.\nOpen the relevant stage’s\ngrafonnet dashboard file\n. Find the section corresponding to the desired group, and add an additional call to\nproductCommon.pageDetail\n. The call arguments are\nChart Title\n,\nAlias\nfrom above, and the tested\nURL\n. Ensure the JSON formatting is correct, the easiest way is to simply copy/paste from another line. A sample MR is available\nhere\n.\nAssign both MR’s to a maintainer. After they are merged, the stage’s Grafana dashboard will be automatically updated. A\nvideo walkthrough\nis available as well.\nAnalytics Instrumentation Guide\nAnalytics Instrumentation Overview At GitLab, we collect product usage data for the purpose of …\nContinuous Interviews\nThe purpose of continuous interviews and how to set them up\nCross Functional Prioritization\nOverview The Cross-Functional Prioritization framework exists to give everyone a voice within the …\nCustomer Issues Prioritization Framework\nContext The Customer Prioritization Framework was developed by the Issue Prioritization Framework …\nDogfooding for R&D\nDogfood everything The best way to understand how GitLab works is to use it for as much of your job …\nGitLab Early Access Program Direction\nAlignment & vision of the GitLab Early Access Program\nMaking GIFs\nAnimated GIFs are an awesome way of showing of features that need a little more than just an image, …\nNew Product Introduction (NPI) Process\nHow to launch a product or service at GitLab.\nProduct Customer Advisory Board\nThis is the process for quarterly customer advisory board meeting, specific to the Product / R&D Org. This process is revisited on an annual basis and aligns with the [broader company process focused on customer advocacy](/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/customer-advocacy/).\nProduct Management Tips and Tricks\nOverview This section of the handbook is a collection of product management processes that can …\nProduct Manager SAFE Guidance\nOverview This guide for GitLab Product Managers clarifies and expands on the Regulation FD Training. …\nProduct Milestones\nWhen planning, Product Managers plan to GitLab milestones. Here is the process for creating and …\nProduct Procedures\nOverview This section of the handbook is a collection of processes that a required to be followed …\nProduct Team Board Meeting Prep\nThis is the process for quarterly board meeting prep, specific to the Product / R&D Org. This process is revisited on a quarterly basis and aligns with the [broader company process](/handbook/board-meetings/#board-and-committee-composition). Feedback always welcome!\nSensing Mechanisms\nWhat are sensing mechanisms? Our ability to iterate quickly is a measure of our efficiency, but our …\nTiering Strategy & Guidance for Product Managers\nOn this page\nTiering strategy Free is targeted at individual contributor developers. It is a …\nUsing GitLab to plan work\nWe use GitLab to document product strategy and manage our backlog. A couple of concepts that are key …\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "7c34d42607a389f9.html"
}