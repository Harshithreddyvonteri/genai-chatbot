{
  "url": "https://about.gitlab.com/direction/core_platform",
  "title": "Product Section Direction - Core Platform\n|\nGitLab",
  "headings": [
    "Product Section Direction - Core Platform",
    "Core Platform section overview",
    "Challenges",
    "3-year strategy",
    "Themes",
    "One-year plan",
    "What we're not doing",
    "Pricing",
    "Group direction review",
    "Categories",
    "What's Next"
  ],
  "text": "Product Section Direction - Core Platform\n|\nGitLab\nProduct Section Direction - Core Platform\nMaintained by\n:\nG\nYou are here:\nGitLab Direction\nProduct Section Direction - Core Platform\nMaintained by\n:\nG\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nCore Platform section overview\nMission\nImpact on GitLab's addressable market\nSelf-managed\nSaaS\nResourcing and investment\nMetrics\nCompetitive space and position\nChallenges\n3-year strategy\nThemes\nSaaS First\nGitLab.com\nGitLab Dedicated\nGitLab is easy to deploy and operate\nCloud native is the future of GitLab deployments\nConsistently great user experience regardless of location or scale\nAchieve enterprise compliance needs\nReduce cycle time by providing tools to explore complexity\nOne-year plan\nDistribution\nGoals\nGeo\nDisaster Recovery\nGeo Replication\nGlobal Search\nCode Search\nCode Navigation\nCloud Connector\nDatabase\nTenant Scale\nInfrastructure\nProject Horse\nGit\nGitaly\nWhat we're not doing\nPricing\nFree\nPremium\nUltimate\nGroup direction review\nCategories\nSystems\nData Stores\nWhat's Next\n18.4 (2025-09-18)\nFootnotes\nLast reviewed: 2022-11-01\nCore Platform section overview\nThe Core Platform section is responsible for the features and tools our customers use to explore and operate GitLab at all scales. Core Platform supports customers from initial deployment of GitLab to ongoing operation, as well as cross-stage end user features.\nThe Core Platform section is made up of one eponymous non-DevOps stage, Core Platform, and eight groups:\nDistribution::Build\n- Packages, Containers, Dependencies\nDistribution::Deploy\n- Installation, upgrades, maintenance\nGeo\n- Disaster recovery and worldwide performance\nGlobal Search\n- Global search and ElasticSearch integration\nCloud Connector\n- Make it easy to build a feature across multiple types of deployment\nDatabase\n- Database architecture and best practices\nTenant Scale\n- Ensuring GitLab self-managed and SaaS deployments can scale for years to come\nGit\n- Build Git upstream and provide expertise on how to use Git effectively and efficiently\nGitaly\n- Providing fast access to repository data\nMission\nProvide\nusers\nwith a consistently great experience and achieve customer business requirements by making GitLab easy to deploy, operate, scale, and use.\nGitLab delivers value by enabling organizations to build better software, faster. The most important success metric for the Core Platform group is therefore the broader success of the user base of GitLab, rather than its administrators. We need to provide the software necessary to make it easy for an administrator to provide a delightful and productive GitLab experience to their users.\nWithin the single platform, users as well as contributors need a common set of cross-stage features and frameworks. End users need a set of common cross-stage features to make the broad array of features and content easily consumable. Contributors need a set of frameworks and developer tools to efficiently and safely contribute to GitLab's growing code base and data sets.\nImpact on GitLab's addressable market\nThere is no traditional addressable market for Core Platform due to its foundational, GitLab-specific nature. Every GitLab user is directly impacted, however, by the work Core Platform delivers.\nIn light of this, we think of Core Platform's addressable market as that of GitLab's larger addressable market. By working to ensure we can meet the operational, compliance, and usability requirements of GitLab's enterprise customers, we can capture increasingly larger percentages of GitLab's total addressable market opportunity.\nThere are two primary segments within the broader \"GitLab\" market: organizations that would like to operate their own GitLab instances (self-managed) and those who prefer to utilize a SaaS service (such as GitLab.com). SaaS revenue within the DevOps space is predicted to\novertake self-managed in 2022\n, with our key competitors already capitalizing on this shift. This is confirmed by\nanalysts reports (GitLab confidential)\nas well as\nothers in the DevOps space\n.\nSelf-managed\nToday, we are able to capture most of the self-managed segment with our mature\nlinux packages\nand more recently our\ncloud-native deployment options\nfor Kubernetes and OpenShift. A proof point is GitLab's\ntwo-thirds market share\nin the self-managed Git market. While this speaks to the competitiveness of GitLab's overall product, a critical enabling factor is the high-quality, flexible, and scalable software and operational tools.\nWhile we are able to meet the requirements of most organizations, there are some unmet needs:\nUnsupported deployment targets for the GitLab Server, such as\nLinux on Z\nand Power9\nDifficulty in deploying a topology to meet the most demanding\nservice level objectives\nEffort required to deploy and operate is higher than desired, typically resulting in the adoption of a SaaS service or lighter-weight solution\nSaaS\nToday, GitLab is underperforming compared to our peers in the SaaS segment. While GitLab's SaaS revenue is accelerating faster than self-managed, our revenue mix is heavily weighted towards self-managed. IDC predicts that the market for public cloud SaaS-based DevOps tools (currently 52% of the market in 2021) will continue to accelerate and account for\n$20.0B in revenue\n(or 61% of DevOps software tools market) by 2026.\n1\n(#footnotes) This represents both a significant growth opportunity if we can better serve this segment, or risk if we fail to execute.\nThere are a larger number of unmet needs on GitLab.com than self-managed, which primarily fall into two buckets:\nService level indicators, primarily\nperformance\nand\navailability\nProduct\nfeature gaps compared to self-managed\n, most importantly in the realm of\nauthentication and compliance\nFor GitLab's FY23,\nSaaS First\ncontinues to be a key theme, driving the closure of these gaps. From an Core Platform perspective, much of our work is on improving the performance, reliability, scalability, and efficiency of our SaaS services. The GitLab.com strategy is\navailable here\n, and a high level overview of GitLab Dedicated is\navailable here\n.\nResourcing and investment\nThe existing team members and open vacancies for the Core Platform section can be found in the links below:\nDevelopment\nUser Experience\nProduct Management\nMetrics\nAll Core Platform section metrics can be found on the\nCore Platform Performance Indicator (internal only)\npage.\nCompetitive space and position\nAs noted above, GitLab's competitive position is a tale of two cities. We are the leading self-managed Git solution but are third in SaaS. Our success in self-managed has driven the majority of the company's growth, however it is at risk of being disrupted by growing trends in the market. IDC forecasts that by 2026, 61% of the worldwide DevOps software tools market will be delivered as public cloud services.1(#footnotes) Our SaaS services represents both a large opportunity and risk depending on our execution.\nWe need to achieve what could be considered opposing goals: making GitLab efficient and easy to run at\nsmall scales\nand improving the scalability and reliability at internet-scale.\nChallenges\nDue to much of GitLab's code being written by other groups, Core Platform relies largely on influence by defining best practices, policies, and frameworks to achieve stability and performance goals\nRapidly increasing feature surface area, driving increased demand for compute resources and operational complexity\nBreadth of deployment targets (bare metal, VM, container, Kubernetes, cloud-specific, etc.) and configuration matrixes\nIncreasing scale of GitLab.com, we are pushing the limits of our software and dependencies\n3-year strategy\nIn three years we expect:\nSaaS to be the strongly preferred delivery mechanism for IT services\nDevOps platforms to be business-critical applications with very high SLA's required\nKubernetes adoption to continue to accelerate for IT services, including GitLab\nContinued improvement of open source Git projects like\ngitea\nand\ngogs\nDevOps platforms like GitLab to become deeply interwoven into organizational workflows and processes\nCompetition in the DevOps space to continue to consolidate and intensify, as more companies adopt modern tools\nSingle platforms becoming the preferred DevOps toolchain\nThe global regulatory framework for cloud to continue to fragment\nAs a result, in three years, GitLab will:\nGenerate more ARR on SaaS (such as GitLab.com) than self-managed\nDemonstrate market-leading service availability for both GitLab.com and self-managed\nSet the bar for IT apps delivered on Kubernetes\nEnable users to get started with self-managed GitLab in under 10 minutes at both 5 and 50,000 user scales\nAutomatically highlighting similar content within large organizations\nMake it quick and easy to find the desired content across the platform\nRefine SaaS services that meet the regulatory requirements of major markets throughout the world, like\nDedicated\nor\nFedRAMP (internal only)\nThemes\nSaaS First\nWoven throughout all of the below themes is a focus on improving our competitiveness in the\nSaaS\nsegment. As this is critical outcome for the company, it is worth highlighting individually our efforts to contribute.\nGitLab.com\nWe are improving the service levels and efficiency of GitLab.com, our multi-tenant SaaS service. A multi-tenant cloud service is the best solution for most customers, combining low cost of ownership and fast time to value. Core Platform is specifically focused on a few key outcomes:\nImproving the responsiveness of the platform, and providing data for other groups to further target their own performance efforts\nIncreasing the availability of the platform, achieving our 99.95% goal\nImproving the cost efficiency of the platform, from a cloud spend perspective as well as reducing the human maintenance burden\nGitLab Dedicated\nTo serve the large enterprise and highly regulated SaaS market, we have recently launched\nGitLab Dedicated\n, a single-tenant SaaS offering. Core Platform will be focusing on improving the efficiency of operating individual GitLab tenants, by improving underlying tools like the\nGitLab Environment Toolkit\n, and our\nOperator\n. By building in automation and self-healing capabilities, we can reduce the maintenance overhead required per instance, improving the efficiency and reliability of not just Dedicated but also self-managed deployments who also use these tools.\nGitLab is easy to deploy and operate\nDeploying and maintaining GitLab should be as frictionless as possible for organizations of all sizes. This is critical for GitLab at multiple points in the customer journey.\nGitLab starts as a personal or side project at many organizations, representing an important driver of initial adoption and awareness. Delighting future champions by providing a thoughtfully designed out-of-the-box experience that runs well on hardware they have lying around pays dividends in future growth.\nOnce a company is ready to adopt GitLab enterprise wide, it is similarly important to ensure the GitLab instance is set up for success with minimal effort. Consider our\n5,000-user reference architecture\nwhich recommends setting up at minimum 27 different instances, and that our\nGitLab configuration file is over 2,000 lines long\n. This is a significant upfront investment to ask a company to make, prior to seeing value returned. It can also be error prone given the complexity, with the only practical solution to ongoing management being\ninfrastructure as code\n, which requires further investment.\nDay 2 operations\nlike backups, scaling, and upgrades are equally important. GitLab is a\nbusiness critical application\n, so events like upgrades need to be routine and\nseamless\n. The easier we make it for our customers to upgrade, the faster our users will be able to leverage our new features and provide feedback. Currently it takes\nover 3 months\nafter release for a majority of our users to feel the impact of our work.\nBy reducing the deployment/operating costs and packaging best practices, we will see the following benefits:\nIncreased downloads and trials of GitLab\nShortened sales cycles as a result of quicker\ntime to value\nand lower\ntotal cost of ownership\nImproved typical end-user experience across all GitLab instances, with services more likely to be deployed optimally and on a recent version\nFurther penetrate the SaaS-leaning market segment with self-managed for those where GitLab.com does not currently meet their needs\nImproved customer deployment security, productivity, and satisfaction due to a higher population of users on recent versions\nTo support these goals, we are:\nStandardizing on a common automation framework for deploying and operating GitLab, the\nGitLab Environment Toolkit\n, which is available to customers and utilized by GitLab.\nShifting more of our focus to the\nGitLab Operator\n, which is able to continuously monitor a GitLab deployment and automatically take proactive and reactive action to optimally run a GitLab instance. Over the long term, we expect our Omnibus-based packages to be used only for single-node installs, with our Operator the primary installation path.\nStandardizing on a common orchestration framework to coordinate the provisioning and operations of all instances which GitLab operates, including GitLab.com. These tools will include the Operator, GitLab Environment Toolkit, and\nSwitchboard (internal only)\n.\nImproving our backup and restore functionality, through incremental and streaming backups, and the ability to\nrestore to a particular point in time across all stateful services\n.\nCloud native is the future of GitLab deployments\nWe are moving towards a cloud-native deployment of GitLab. Cloud-native will become the strongly recommended architecture for all deployments beyond small single-node instances.\nThe outcomes we hope to achieve with this effort are:\nMajority of customers on recent, supported, versions of GitLab delivering improved security and customer value\nSignificantly reduced operational burden and complexity (total cost of ownership)\nAbility to achieve shorter RPO and RTO times\nDeclarative operations, for example: backup frequency, upgrade frequency, and more\nProactive maintenance, for example: automatic provisioning of more repository space, self-healing a Gitaly Cluster deployment, and more\nWe plan to achieve this by delivering a few key projects:\nDeploying all GitLab-built components in Kubernetes. Kubernetes offers a standardized control plane to discover and operate the various aspects of a GitLab deployment. The GitLab operator provides a control plane which continuously analyzes the deployment and can take action when required. In order to achieve this:\nGitaly will need to be able to run in Kubernetes\n.\nThe GitLab Operator needs to\nmature to recommend production use for Day 1 operations\n.\nThe GitLab Operator needs to be expanded to automate Day 2 operations\nStreaming backups of all stateful data.\nGitaly Write-ahead Logging\nBackup integration with hyperscaler managed services, like SQL and object storage (to configure backup policies and trigger restorations)\nUnified, point in time restoration of data\nCommon backup interface\nAbility to trigger stateful restores at a specific timestamp (SQL, Gitaly, object storage)\nUpgrades based on a target release channel (e.g. N-1)\nAutomated upgrade support within the Operator with zero downtime (as possible depending on managed services in use)\nAutomatic recovery of failed upgrade\nProactive notifications of deprecations and removals that affect instance\nBy automating and standardizing more of the operations of Gitlab, we can help our customers (both SaaS and self-managed) operate highly reliable, secure, and up-to-date deployments. This will allow end users and customers to maximize the value and potential of the GitLab platform.\nConsistently great user experience regardless of location or scale\nAs customers roll out and adopt additional stages of GitLab to realize the benefits of a\nsingle application\n, the service availability and performance requirements increase as well. Additional departments within the business utilize the service on a daily basis to accomplish their jobs, such as design, security, and operations teams. People around the world collaborate together. Work that may have been done manually is now automated using CI/CD, including delivering the latest update or bug fix to their customer facing application/website. For these reasons, GitLab is increasingly being identified as a business-critical application with attendant requirements. It is therefore important for GitLab to be a consistently reliable, performant service for all users to fulfill its potential.\nBy providing market-leading reliability and performance, we will see the following benefits:\nEstablish the trust required for customers to adopt additional stages and consolidate on GitLab\nFurther penetrate the large enterprise by displacing incumbents with unsatisfactory stability/performance\nImprove our market share of the\nSaaS DevOps segment\nby improving the\nservice level of GitLab.com\nIncrease customer satisfaction by improving responsiveness and availability\nAchieve enterprise compliance needs\nOrganizations in regulated industries, the\npublic sector\n, and large enterprises often have a variety of standards and processes that they must adhere to.\nIn the public sector, there are standards like\nNIST 800-53\nand\nFedRAMP\n. For companies handling credit card transactions, there is\nPCI DSS\n. These are just two examples. While some of these standards are not directly aimed at services like GitLab, they have a broad reach, and the requirements generally cannot be waived, as the penalties for non-compliance can be severe. Many enterprises have also developed their own internally driven processes and policies that can be important to support, rather than requiring changes prior to the adoption of GitLab.\nFor published standards, it is important that GitLab offers the required features and configuration to enable our customers to be in compliance. This includes changes to our code base; for example, fully encrypting all traffic between GitLab nodes, selection of specific cryptographic modules, availability via our\nReference Architectures\n, and\ndisaster recovery\n, among others. Additionally, some standards like\nFedRAMP (internal only)\ncan also impact the operational and governance processes of GitLab.com, as well as where data can be stored and processed. The more that we can do to be compliant out of the box or provide documentation on recommended settings, the less work our customers will be required to do during evaluation and implementation.\nBy enabling our customers to meet their compliance requirements and reducing the required effort, we will see the following benefits:\nIncreased penetration of these segments: large enterprise, regulated industries, and the public sector\nShortened sales cycles by reducing the amount of evaluation and implementation work required to ensure they can remain compliant\nIncreased adoption of GitLab by organization whom prefer SaaS but have compliance requirements we cannot meet today\nReduce cycle time by providing tools to explore complexity\nAll parts of the software development process grow over time: the code base, its dependencies, data stores, the historical context, the organization, and more. This accretion leads to an increase in complexity, creating a drag on development velocity. At the outset of a project, changes can be quick to land as the code base and its impact is well understood. Fast forward 5 to 10 years and that same change will require significantly more effort, investigating where the change needs to happen across the code base, understanding why the code was written that way in the first place, determining the potential downstream impact, validating the performance, refreshing documentation, and more. GitLab, at 10 years old, is experiencing these challenges as well.\nAs a single platform, GitLab is uniquely positioned to minimize these effects by providing tools to better explore and manage complexity. We plan to achieve this by:\nProviding a robust global search function across all content within GitLab, and allowing exploration of related content. From an identified code snippet, one could learn the merge request which landed the changes, the issue which discussed the problem, the CVE which is being resolved, the CI pipeline which validated the changes, and ultimately the deployment job to production.\nTesting all database changes on production data, prior to production. Changes which impact databases, whether it is a complex migration, a schema change, or a perceived simple query, can require an extensive period of review. GitLab aims to make this self-service, by executing all queries and database changes on a thin clone of the production database, and presenting the performance and impact directly to the developer in the merge request as they commit changes.\nProviding guidance on which data store to use for a given change.\nExposing granular performance data for libraries and applications where this could be a challenge, like Ruby monoliths.\nOne-year plan\nOver the next 12 months, each group in the Core Platform section will play an integral part in this strategy.\nPlease see the\ncategories page\nfor a more detailed look at Core Platforms's plan by exploring\nDirection page\nlinks in areas of interest.\nDistribution\nIn FY23 (CY 2022), the Distribution team will focus on several main themes:\nImprove the upgrade rate of instances, by polishing the upgrade experience\nReduce the time it takes to deploy and operate GitLab, especially for large-scale deployments\nAchieve Loveable maturity of our Cloud Native installation\nComplete maturity of the GitLab Operator according to the\nOperator Framework capabilities\n.\nYou can learn more about Distribution group plans on the\nDistribution Direction page\n.\nGoals\nImprove the upgrade rate of instances\nFor single-node instances,\nautomatically upgrade based on user preferences\nFor mult-node Omnibus instances,\nmake it easy to perform zero downtime upgrades\nwith minimal risk\nFor cloud native, add support for\nautomated zero-downtime upgrades\nin the Operator\nReduce the time it takes to deploy and operate scaled GitLab\nAutomated deployments of reference architectures on AWS, GCP, and Azure\nAutomated zero downtime upgrades\nAutomated Geo promotions and demotions\nAchieve Loveable maturity of our Cloud Native installation\nAchieve feature parity between Omnibus and Chart based deployment options. New features are launched simultaneously on both Omnibus and Cloud Native\nClear and concise documentation for cloud-native installs so that configuration options are easily discoverable and users can more easily deploy in Kubernetes without relying on support from internal GitLab teams.\nTest the Helm chart and Operator install at different scales, develop reference architectures, and offer best in class solution for installing GitLab in a cloud environment.\nComplete maturity of the GitLab Operator\nOffer a Red Hat certified Operator\nMake it easy for our existing Charts users to migrate to the Operator\nCloud Native users utilize Operator for more frequent upgrades\nGeo\nYou can read the Geo group plan on the\nGeo Direction page\n.\nIn FY23, the Geo group is focused on delivering\nComplete maturity for Disaster Recovery\n. Disaster Recovery is a common, must-have, requirement for large enterprises, allowing them to feel comfortable that GitLab can remain available for their developers to be productive throughout a variety of disaster scenarios.\nIn FY23, Geo also plans to deliver\nComplete maturity for Geo Replication\n, another key feature for large enterprises with multiple offices, or the growing number of businesses embracing remote work. Geo-replication enables organizations to set up additional GitLab nodes throughout the world, enabling these users to work efficiently by reducing the latency and time it takes to perform common tasks like cloning or pulling container images.\nIn Q1 FY23, we will re-evaluate the priority of the backup and restore category and are going to assess\nall currently open issues\nto define the priorities further.\nDisaster Recovery\nVerification of blob data types\n.\nSimplify promoting a secondary\nSimplify demoting a secondary site\nWorking with Infrastructure to enable Geo on GitLab.com\n.\nGeo Replication\nGeo should be easy to setup\nPublish the metrics to a preconfigured Grafana dashboard\n.\nGeo sites for CI/CD\nGeo supports an advanced caching mode\nwith the following properties:\nEnable or disable replication by data type in the Geo Administrator UI\n.\nGlobal Search\nYou can read the Global Search group plan on the\nGlobal Search Direction page\n.\nFor FY23 - Global Search provides a search experience across the entire GitLab Instance.\nThe focus is on expanding the userâs needs to include new scopes as GitLab features.\nVulnerabilities search will include multiple ways for sort and filter allowing users to quickly map find Vulnerabilities across groups and projects.\nPipelines and Jobs Search will make it easier to find CI/CD components across multiple groups.\nSnippets Search will make it easier for users to share snippets across their organization.\nAlong with adding these additional scopes, we will be enhancing the Advanced Search experience to include additional ways to sort and filter results.\nAdding new content into its own search verticals puts pressure on the user to discover these sections and look at each one individually. To Improve this we will be adding an All results default view that will combine all scopes.\nCode Search\nCode Search will focus on addressing the needs of Big Code, Which includes several key areas of focus.\nFederated Search - Search that can include Self-managed and SaaS instances\n. Better would be the ability to source content from Non-GitLab Repos\nElasticsearch Integration for Core/Free\n- This would provide faster results and have a much smaller footprint if not including code.\nLocal Editor Functionality\nExact Match\nMore than one line of results per file.\nRegEx Syntax for Variable specified in code search\nCase Sensitivity\nCode Language Filtering\nRelevancy Improvements 2\n- This would be also include Sorting options.\nLSIF for Code Structure to be Specified in the Search.\nInfrastructure investment\n- 400% over 2 years. Scaling needs to be flexible.\nPlatform change- (This might be required to solve these problems. ) Like zoekt\nCode Navigation\nGrowing out of the early delivery of Code Intelligence, Code Navigation will bring more Local IDE style use cases to your Web IDE and across multiple Groups and Projects.\nDetails specific to this delivery are in Discovery currently.\nCloud Connector\nGitLab Cloud Connector is a way to access services common to multiple GitLab deployments, instances, and cells. GitLab customers can choose between the following deployment options:\nGitLab.comâs multi-tenant SaaS offering.\nDeploying their own self-managed GitLab instance.\nSigning up for GitLab Dedicated, our managed single-tenant solution.\nThe goal of GitLab Cloud Connector is to ensure that GitLab features can work equally across all three. This aligns with Core Platformâs mission of accelerating other product groups by reducing the friction of developing for multiple deployments.\nIn FY25, we will work to formalize the technical boundaries for Cloud Connector by integrating at least two different services: AI gateway and TanuKey. This experience will help us iterate towards a framework-like solution where new feature teams can self-service their own Cloud Connector integration.\nYou can learn more about Cloud Connector group plans on the\nCloud Connector Direction page\n.\nDatabase\nThe Database group is focused on improving the scalability, performance, and resilience of GitLab's database layer as well as instituting best practices across the wider development organization.\nYou can learn more about Database group plans on the\nDatabase Direction page\n.\nFor FY23, the group is working on the following key themes:\nEnsuring that the database continues to scale\nUpdate the\ndatabase tooling\nand our\nframework for executing background migrations\nto support multiple databases\nReduce tables sizes to < 100 GB per physical table\n(\nanalysis\n)\nImproving the efficiency and reliability of making database changes\nBatched Background Migrations - General Availability\nAutomated database testing using production clones: Advanced database testing features\nDatabase Schema Validation\nTenant Scale\nYou can read the Tenant Scale Group plan on the\nTenant Scale Direction page\n.\nThe Tenant Scale Group is concerned with delivering application changes that allow GitLab and GitLab.com to scale to millions of users and implement the strategies defined in the\nDatabase Scalability Working Group\n.\nIn FY23, we expect GitLab.com will transition to run on multiple databases that are decomposed by feature. We expect that at least two independent databases exist:\nmain\nand\nci\n. This will provide significant headroom and will allow the Tenant Scale group to transition towards validating proposals for scaling GitLab even further.\nDecomposition is only a first step to unlocking further scalability for GitLab. By the end of FY23, the Tenant Scale Group will have evaluated and implemented other scalability options for GitLab. There are several possible options that will have to be evaluated, including but not limited to sharding GitLab's database using existing PostgreSQL tooling, adopting\nVitess\n, moving towards a Cell-like architecture and utilizing different datastores that fit specific use cases.\nInfrastructure\nSee the 1 year\nGitLab.com infrastructure strategy\nProject Horse\nThe one year Project Horse direction page can be found\nin the internal handbook here\n.\nGit\nYou can read the Git group plan on the\nGit Direction Page\n.\nGitaly\nYou can read the Gitaly group plan on the\nGitaly Direction Page\n.\nIn FY23, the Gitaly group is focused on improving the performance and availability of the Gitaly product. We have completed a\nprioritization effort\nand have coordinated on our near term focus on improving data safety and improving stability for large repositories.\nMore detailed plans can be found by read the\nWhere we are headed\nsection of our direction page, linked above.\nWhat we're not doing\nChoosing to invest in these areas in 2021 means we will choose not to:\nInvest in marketplaces other than AWS.\nTo date we have not seen much customer traction via these deployment options, and providing a high quality experience can be a significant undertaking. If we learn how to make the AWS Marketplace successful, we can consider replicating the model elsewhere.\nFederated GitLab\nConnecting multiple GitLab instances together for a unified workflow is a frequent request, but is technically challenging and there are many different desired use cases.\nInvest further in improving our bespoke backup/recovery tools this year. Many of our larger customers already have established enterprise backup tools, or can use snapshots, and the current tool works for small instances. We are currently focused on improving our Disaster Recovery and Geo Replication features.\nPricing\nThe Core Platform pricing strategy's aim is to ensure that the widest possible audience can benefit from GitLab through our free tier, and that we can meet the unique needs of large organizations through our paid tiers.\nAt the free tier, we want to provide an open-core product for everyone. To achieve this GitLab needs to be incredibly easy to try and adopt, for a wide variety of deployment methods. Today we support SaaS with GitLab.com, and self-managed on all major cloud providers as well as on-prem. This model helps keep our\nopen core flywheel\nspinning, and is a key factor in our organic growth by being a go-to DevOps application with a low time and effort investment required to see value.\nAs adoption across an organization grows, additional business and scale requirements may need to be met, these are particularly common for large enterprise and regulated industries. We aim to meet these more complex operational needs with features in our paid tiers, so that these organizations can adopt GitLab at scale.\nFree\nFrom an operational standpoint, we believe GitLab should be easy to deploy and operate, and that all users should have a great user experience. To achieve this, we invest significantly in automating as much of the deployment and day 2 operations as we can, and embedding as many best practices into the product as possible. We want to set up administrators for success, so they can delight their users. We don't believe application performance, or ease of use, should be a paid-for feature. This helps to ensure that GitLab is easy to try, and that when deployed, provides a good user experience.\nFor the user-facing features that we build, we align with our overall\npricing strategy\n, focusing Free on individual developers. Presently this includes basic search, which provides a search experience across projects and groups.\nPremium\nOperationally, this tier is where the majority of paid features are located, as Director-level buyers are typically more concerned about meeting wider business, compliance, and scale requirements. We focus features that relate to meeting these needs, typically found in larger enterprises or regulated industries, in this tier. Examples include meeting business continuity needs with\ndisaster recovery\nand horizontally-scaled instances, as well as multi-region performance requirements with\ngeo-replication\n. The\nGitLab Environment Toolkit\nis also available at this tier, providing a great starting point for customers to develop their own deployment automation further.\nFor users,\nAdvanced Search\nprovides cross-project code search as well as\nadvanced search syntax\nto help users more effectively locate content within larger organizations.\nUltimate\nCurrently there are no Core Platform features in this tier. We would introduce new features in this tier that target highly specialized requirements typically seen at the executive level. For example companies who may operate multiple independent businesses, but still want to provide a unified experience across the organization through some type of\nfederation\n.\nGroup direction review\nThe Core Platform PM team reviews one of the groups direction every other week. Prior recordings and the upcoming schedule can be viewed\nhere\n.\nCategories\nSystems\nData Stores\nWhat's Next\n18.4 (2025-09-18)\nDirect Transfer General Availability\nFootnotes\nIDC, Worldwide DevOps Software Tools Forecast, 2022â2026, Doc # US48599322, July 2022\nEdit this page\nView source",
  "html_file": "894b039e4b4af5c4.html"
}