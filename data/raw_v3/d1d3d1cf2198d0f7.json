{
  "url": "https://about.gitlab.com/direction/package",
  "title": "Stage Direction - Package\n|\nGitLab",
  "headings": [
    "Stage Direction - Package",
    "Package - Enterprise artifact management in GitLab"
  ],
  "text": "Stage Direction - Package\n|\nGitLab\nStage Direction - Package\nMaintained by\n:\nTim Rizzi\n@trizzi\nContribute to this page\nEdit this page\nYou are here:\nGitLab Direction\nStage Direction - Package\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nPackage - Enterprise artifact management in GitLab\nOur mission and goal\nWhat is Package?\nOur differentiators\nWhat's next and why\n2025 priorities\n2026 roadmap\nWhat we aren't working on and why\nCategories\nContainer Registry\nPackage registry\nVirtual registries\nDependency firewall\nHelpful links\nCustomer needs\nNon-enterprise Organizations\nEnterprise organizations\nGitLab Package - Market Analysis\nCompetitive landscape\nKey market trends\nProduct comparison\nGitLab's unique value proposition\nRoadmap highlights\n2025\n2026\nTarget customer segments\nSmall to medium organizations\nEnterprise organizations\nMigration Path for JFrog and Nexus Users\nCustomer success stories\nPackage - Enterprise artifact management in GitLab\nOur mission and goal\nOur mission is to eliminate artifact management complexity by delivering enterprise-grade capabilities that are seamlessly integrated with your entire DevSecOps workflow.\nOur goal is to become our customers' single source of truth for artifact management by 2027, replacing fragmented toolchains with a unified platform that reduces costs, improves security, and accelerates development velocity.\nWhat is Package?\nThe Package stage is responsible for delivering a comprehensive artifact management solution that meets the needs of both small teams and enterprise organizations.\nArtifact management involves storing, versioning, and tracking binary files, libraries, and dependencies used in software development. It's critical for ensuring consistency, reproducibility, and efficient collaboration in development projects. Artifact management systems help manage the software artifacts' lifecycle, from creation to deployment, facilitating easy access, sharing among team members, and integration with build and deployment tools.\nOur differentiators\nWhile competitors like JFrog Artifactory claim to offer a \"system of record,\" GitLab Package goes beyond this by:\nDeep Integration with Development Workflows\n: Unlike standalone solutions, GitLab Package is natively integrated with your source code, CI/CD pipelines, and security scanning tools, creating a seamless experience.\nEnhanced Security and Compliance\n: GitLab's built-in security features work directly with your artifacts, providing vulnerability scanning, dependency analysis, and compliance checking without requiring separate products or integrations.\nReduced Context Switching\n: Teams can manage code, builds, tests, and artifacts all within a single platform, eliminating the need to switch between multiple tools.\nStreamlined Troubleshooting\n: Having artifacts alongside your source code makes troubleshooting issues significantly easier, with clear build provenance and traceability.\nCost and Maintenance Efficiency\n: Consolidate tools and reduce both licensing costs and maintenance overhead.\nNative Build Promotion and Complete Provenance\n: GitLab uses a git-native approach to build promotion through semantic versioning with commit identifiers (e.g.,\nmyapp-1.2.3-abc123f\n) and git tags for releases. This provides complete build provenance by linking artifacts directly to their source code, CI/CD pipelines, and deployment history within a single platform - enabling rapid troubleshooting and ensuring supply chain security compliance without separate tooling.\nWhat's next and why\n2025 priorities\nWe're expanding our enterprise capabilities to meet the needs of larger organizations:\nVirtual Registries for Maven and npm\n: We're introducing\nMaven virtual registries\nthat will configure an ordered list of upstream repositories and resolve packages from these sources, caching them at the top-level group. This feature will seamlessly pull packages from external remotes into your GitLab top-level group, simplifying Maven settings file configuration and increasing the reliability of your builds.\nContainer Registry Improvements\n: We're enhancing security with\nimmutable tags\nand expanding on our recently launched\nprotected tags\nto prevent accidental or malicious updates.\nArtifact Protection\n: We'll complete our rollout of\nprotected packages\nacross all supported formats, including\ngeneric packages\n.\n2026 roadmap\nExpanded Virtual Registry Support\n: Adding support for PyPI, NuGet, RPM, and Debian.\nDependency Firewall Implementation\n: Full rollout of features to prevent supply chain attacks.\nAdvanced Usage Analytics\n: Providing insights into dependency health and usage patterns.\nWhat we aren't working on and why\nNew Package Manager Formats\n: We're focusing on improving our existing formats (OCI-artifacts, npm, Maven, NuGet, PyPI, Terraform, and generic packages) rather than expanding to additional formats in the near term. This approach ensures we maintain our high standards for performance and reliability while delivering the enterprise features our customers need most.\nCategories\nContainer Registry\nThe GitLab container registry is a secure and private registry for OCI artifacts, such as Docker container images. Use GitLab CI/CD to create and publish branch/release specific images, manage them via the GitLab API, and discover them through the intuitive user interface.\nPackage registry\nOur package registry supports multiple formats including npm, Maven, NuGet, PyPI, Terraform, and generic packages. We provide project and group-level private package registries and are expanding capabilities to include virtual registries.\nVirtual registries\nVirtual registries provide a mechanism for storing and accessing external packages, enabling more reliable builds. They allow you to proxy and cache dependencies from external sources, reducing build times and improving supply chain reliability.\nThe virtual registry for container images currently allows you to proxy and cache images from DockerHub. In upcoming releases, we'll expand this feature to support multiple endpoints and additional package formats.\nDependency firewall\nMany projects depend on packages from unknown or unverified providers, introducing potential security vulnerabilities. The dependency firewall, leveraging our virtual registries, will give security and compliance teams more control and visibility over the packages being used.\nHelpful links\nMaturity plan\nIssue list\nOverall vision\nResearch issues\nCustomer needs\nAs the PM for the Package stage, I hear regularly from customers and prospects that would like to migrate off of JFrog's Artifactory. Their reasons for wanting to consolidate on GitLab are:\nConvenience (authentication, management, improved UX)\nCost\nBetter support and access to product teams\nThe needs of these customers can be predictably segmented by the size of their organization:\nNon-enterprise Organizations\nTypically they'd like to know if we support format\nx\nand if not when we will support it. If we support their requested format, these customers are often able to consolidate quickly.\nEnterprise organizations\nEnterprise organizations frequently express interest in consolidating on GitLab but are waiting for our Package product to mature. The key features they're waiting for include:\nVirtual registries for managing upstream repositories\nDependency firewall to prevent supply chain attacks\nImproved discoverability and visibility into dependency usage\nWe're addressing these needs directly in our 2025-2027 roadmap.\nGitLab Package - Market Analysis\nCompetitive landscape\nGitLab Package operates in a market dominated by established players like JFrog Artifactory and Sonatype Nexus, with cloud providers (AWS, Azure, Google) and other DevOps platforms (GitHub) offering varying levels of functionality.\nKey market trends\nConsolidation of DevOps Toolchains\n: Organizations are seeking to reduce tool sprawl by consolidating functionality into fewer platforms\nSupply Chain Security\n: Increasing focus on securing the software supply chain from vulnerabilities and attacks\nIntegration with CI/CD\n: Demand for artifact management that integrates seamlessly with build and deployment processes\nEnterprise Scalability\n: Need for solutions that can handle the volume and complexity of enterprise-level package management\nProduct comparison\nNote:\nThis comparison focuses on dedicated DevOps platforms and artifact management solutions. Cloud-native registries (AWS ECR/CodeArtifact, Azure ACR, Google Artifact Registry) serve different use cases and are typically chosen as part of broader cloud platform strategies rather than as standalone artifact management solutions.\nFeature\nGitLab Artifact Management\nJFrog Artifactory\nSonatype Nexus\nGitHub Packages\nContainer Registry\nÂ\nÂ\nÂ\nÂ\nContainer Registry\nâ\nAvailable\nâ\nAvailable\nâ\nAvailable\nâ\nPull-through Cache\nâ\nDocker Hub Only\nâ\nMultiple Sources\nâ\nMultiple Sources\nâ\nPackage Registry\nÂ\nÂ\nÂ\nÂ\nMaven\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nNuGet\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nnpm\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nPyPI\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nGeneric Packages\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nTerraform Modules\nâ\nGA\nâ\nAvailable\nâ\nAvailable\nâ\nVirtual Registry\nÂ\nÂ\nÂ\nÂ\nMaven Virtual Registry\nComing 2025\nâ\nAvailable\nâ\nAvailable\nâ\nnpm Virtual Registry\nComing 2025\nâ\nAvailable\nâ\nAvailable\nâ\nPyPI Virtual Registry\nComing 2026\nâ\nAvailable\nâ\nAvailable\nâ\nNuGet Virtual Registry\nComing 2026\nâ\nAvailable\nâ\nAvailable\nâ\nBuild Promotion\nÂ\nÂ\nÂ\nÂ\nBuild Promotion\nâ\nGit-native (tags + versioning)\nâ ï¸ Complex workflow system\nâ ï¸ Separate promotion process\nâ\nGit-native\nBuild Provenance\nâ\nNative end-to-end integration\nâ ï¸ Separate \"build info\" metadata system\nâ ï¸ Limited build traceability\nâ\nCode-to-package tracking\nSecurity & Integration\nÂ\nÂ\nÂ\nÂ\nCI/CD Integration\nâ\nNative\nâ ï¸ Plugin Required\nâ ï¸ Plugin Required\nâ\nNative\nSecurity Scanning\nâ\nBuilt-in\nâ ï¸ X-Ray\nâ\nBuilt-in\nâ\nBuilt-in\nAccess Control\nâ\nGranular\nâ\nGranular\nâ\nGranular\nâ\nDependency Firewall\nComing 2026\nâ\nAvailable\nâ\nAvailable\nâ\nUser Interface\nâ\nModern & Intuitive\nâ ï¸ Complex\nâ ï¸ Basic\nâ\nModern\nLegend:\nâ\nAvailable/Supported\nâ Not Available\nâ ï¸ Available with limitations or requires additional setup\nGitLab's unique value proposition\nSingle platform for the entire DevSecOps lifecycle\nUnlike standalone solutions, GitLab Package is part of an integrated platform that includes source code management, CI/CD, security scanning, and deployment. This integration reduces context switching, simplifies workflows, and provides a unified experience across the software development lifecycle.\nNative integration with GitLab CI/CD\nThe tight integration with GitLab CI/CD means that packages can be built, tested, and published as part of the same pipeline without additional configuration or plugins. This simplifies setup and reduces maintenance overhead.\nBuilt-in security scanning and compliance\nGitLab's integrated security features work directly with your artifacts, providing vulnerability scanning, dependency analysis, and compliance checking without requiring separate products or integrations.\nImproved troubleshooting and traceability\nHaving artifacts alongside your source code makes troubleshooting issues significantly easier, with clear build provenance and traceability from code to deployment.\nCost and maintenance efficiency\nBy consolidating tools, organizations can reduce both licensing costs and the overhead of maintaining multiple systems.\nRoadmap highlights\n2025\nMaven virtual registry\nnpm virtual registry\nImmutable container registry tags\nComplete package protection rollout\nDependency firewall Beta\n2026\nPyPI virtual registry\nNuGet virtual registry\nRPM and Debian package support\nFull dependency firewall implementation\nAdvanced usage analytics\nTarget customer segments\nSmall to medium organizations\nSeeking to simplify their toolchain\nLooking for cost-effective solutions\nValue the convenience of integrated platforms\nEnterprise organizations\nRequire advanced features like virtual registries\nNeed strong supply chain security\nValue centralized management and governance\nLooking to standardize artifact management across teams\nMigration Path for JFrog and Nexus Users\nFor organizations looking to migrate from JFrog Artifactory or Sonatype Nexus, GitLab offers a phased approach:\nAssessment: Analyze current package formats and usage patterns\nPilot: Start with a single team or project type\nMigration: Move packages and configure repositories\nAdoption: Roll out to additional teams and integrate with CI/CD\nOur professional services team can assist with migration planning and implementation to ensure a smooth transition.\nExpected Benefits:\nReduction in artifact management overhead\nElimination of context switching between tools\nSimplified authentication and access management\nReduced licensing and maintenance costs\nCustomer success stories\n\"By consolidating our DevOps toolchain on GitLab, including artifact management, we reduced our annual licensing costs by 35% and improved developer productivity by eliminating context switching.\" - Enterprise Customer\n\"The integration between GitLab's package registry and CI/CD pipelines simplified our deployment process and reduced the time spent troubleshooting dependency issues.\" - Mid-size SaaS Company\nEdit this page\nView source",
  "html_file": "d1d3d1cf2198d0f7.html"
}