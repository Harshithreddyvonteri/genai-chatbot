{
  "url": "https://handbook.gitlab.com/handbook/company/pricing",
  "title": "Pricing model | The GitLab Handbook",
  "headings": [
    "Pricing model",
    "Pricing Strategy",
    "Pricing Philosophy",
    "Pricing Methodology",
    "Departments and Decision Making",
    "Three Tiers",
    "Lower tiers have more relative value",
    "Consistent names",
    "Type of sell",
    "Hybrid sales model",
    "Combining features in plans",
    "Single plan for one customer",
    "True-up pricing",
    "Consumption pricing principles",
    "Price difference between self-managed and SaaS",
    "When is a dollar not a dollar?",
    "Annual pricing is prioritized over monthly pricing",
    "Why show monthly pricing on the website",
    "Only sell a suite",
    "Value creation",
    "Value capture",
    "Buyer-Based-Open-Core",
    "If a feature can be moved down do it quickly",
    "Default to move features down",
    "Changing tiers and pricing changes",
    "DevOps score is not maturity",
    "Location based pricing"
  ],
  "text": "Pricing model | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test — 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzciński's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lunøe's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication — Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact™ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nBill Staples\nStella Treas\nOn This Page\nPricing Strategy\nThe Value of Free users\nPricing Philosophy\nPricing Methodology\n1. Value Proposition\n2. Customer Collaboration\n3. Competitive Landscape\n4. Mutual Success\nDepartments and Decision Making\nThree Tiers\nBuyer Based Tiering Clarification\nExamples\nFeature - Kanban Boards\nFeature - Merge Requests\nFeature - Pipelines\nUsage can be more important than buyer-based tiering\nPrevent the ability to circumvent tiering\nPartner integration considerations\nThemes\nCurrent Theme List\nWhat happens when themes don’t match our Buyer Based Tiering Decisions?\nLower tiers have more relative value\nConsistent names\nType of sell\nHybrid sales model\nCombining features in plans\nSingle plan for one customer\nReporter User Permission Pricing\nTrue-up pricing\nConsumption pricing principles\nPrice difference between self-managed and SaaS\nWhen is a dollar not a dollar?\nAnnual pricing is prioritized over monthly pricing\nWhy show monthly pricing on the website\nOnly sell a suite\nValue creation\nValue capture\nBuyer-Based-Open-Core\nExample template for customer response\nBelow is a video of the CEO talking about monetizing open source with co-founders from Infracost.io\nIf a feature can be moved down do it quickly\nDefault to move features down\nChanging tiers and pricing changes\nDevOps score is not maturity\nLocation based pricing\nThe Handbook\nAbout GitLab\nPricing model\nPricing model\nMost GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives.\nGitLab’s pricing strategy is set by the CEO. Everyone can contribute, and the best way to communicate is on the #pricing Slack channel.\nContributions are part of the day-to-day jobs of the following people:\nPrincipal Pricing Manager (Sean Hall)\nSenior Pricing Manager (Sarah DeVries)\nVP, Product Management (Justin Farris)\nPricing Strategy\nMost of GitLab functionality is and will be available for free in our Free tier. Our paid\ntiers include features that are\nmore relevant for managers, directors, and executives\n.\nWe promise\nall major features in\nour scope\nare available in Free too. Instead of charging for specific parts of our scope\n(CI, Monitoring, etc.) we charge for smaller features that you are more likely\nto need if you use GitLab with a lot of users. There are a couple of reasons for\nthis:\nWe want to be a good\nsteward of our open source product\n.\nGiving a great free product is part of our go to market, it helps create new users and customers.\nHaving our scope available to all users increases adoption of our scope and helps people see the benefit of a\nsingle application\n.\nIncluding all major features in Free helps reduce merge conflicts between CE and EE\nBecause we have a great free product we can’t have one price. Setting it high\nwould make the difference from the free version too high. Setting it low would\nmake it hard to run a sustainable business. There is no middle ground that would\nwork out with one price.\nThat is why we have\nPremium and Ultimate tiers\n.\nThe price difference between them is half an order of magnitude (5x).\nWe will charge per user, per\napplication, or per instance. We do include free minutes with our subscriptions\nand trials to make it easier for users to get started. As we look towards more\ndeployment-related functionality on SaaS it’s tempting to offer compute and\ncharge a percent on top of, for example, Google Cloud Platform (GCP). We don’t\nwant to charge an ambiguous margin on top of another provider since this limits\nuser choice and is not transparent. So we will always let you BYOK (bring your\nown Kubernetes) and never lock you into our infrastructure to charge you an\nopaque premium on those costs.\nThe Value of Free users\nAs a commercial organization, we always want to grow the number of paying customers, therefore we are focused on increasing the free to paid conversion rate. However, GitLab offers a free product, and our free users bring tremendous value to the company beyond just the likelihood of converting to a paid customer one day.\nAwareness/Mindshare: A large free user base helps GitLab become known to the developer community and stay top of mind.\nProduct Familiarity/Training: Offering a free product invites anyone to try out GitLab without any barrier so many developers become familiar with GitLab. Through using the free product, many users are trained on how to use GitLab functionality which makes them more effective when using GitLab for their job.\nAdvocacy/Internal Champion: Happy loyal free users become advocates of GitLab, which brings more users and strengthens our brand. We often see users of GitLab for personal projects then become an internal champions to advocate their employers to buy GitLab. This personal use -> organizational use cross over and bottoms-up growth can’t happen without our free product.\nContributions/Community: Many free users are also active contributors to the product so they make GitLab better. They also help grow our community which becomes an even more valuable asset to all free and paid customers.\nThird party support/Platform: Free users increase our total user base, and a large user base makes 3rd party tools/APIs/integrations more likely to support GitLab, growing our ecosystem and enhancing our platform status.\nEnable product-led growth & Reduce Customer Acquisition Cost: our free product enables GitLab to acquire more users at a lower customer acquisition cost, as some of them will purchase via self-service funnel since they are already familiar with GitLab and won’t require a full sales cycle to be convinced to buy.\nUser habit/Retention lever: offering a free product allows users to develop a habit before they pay, therefore the paid customers are more likely to see higher ROI of GitLab. Additionally, even if the customer stays on the free plan, we are not losing the customer to a competitor.\nPricing Philosophy\nOur pricing philosophy is aligned with our\nGitLab Values\n.\nCollaboration\n: We want to keep the trust of our customers through a pricing approach that supports long-lasting customer relationships.\nResults\n: We aim to get a great ROI for our customers while maximizing IACV for GitLab over the long-term.\nEfficiency\n: Our pricing approach should be easy to understand, plan, and order.\nDiversity, Inclusion and Belonging\n: We build GitLab to be the best option for a wide variety of organizations, including educational institutions and organizations in different geographic regions.\nIteration\n: We want to encourage the full scope of GitLab to be adopted over time.\nTransparency\n: We are public and explicit about what our pricing is based on.\nPricing Methodology\nWe take a value-based pricing approach at GitLab. The core of the value-based pricing is to understand the value proposition that our innovations provide to our current and future customers for that offering. We aim to price our offerings to achieve continued growth and financial success for both the customer and GitLab.\n1. Value Proposition\nTo understand the value that we deliver to our customers, we focus on the benefits that our customers can receive to achieve their business goals. The value to our customers can include:\nDevelopment cost reduction\nRevenue gain due to decreased time to market\nImproved reliability and security\nGreater and more effective collaboration\nEmotional contribution of having delighted users\n2. Customer Collaboration\nDefining and quantifying the value being delivered does not happen in isolation. We regularly engage with customers to understand how our solutions help them. These engagements are important as they will provide insights on how our innovations are valued by the customers and how it impacts our customers’ willingness to pay. Willingness to pay is a crucial element when we decide on how to price and packaging our offerings.\n3. Competitive Landscape\nWe understand that customers have choices when they decide to make a purchase. Hence,  understanding the competitive landscape of our products is very critical. With respect to competition, we focus on the key differences between our value proposition and the competition’s value proposition. Our pricing aims to reflect the differential value that we provide. We aim to design the pricing structure that works best for our customers compared to our competitors inclusive of pricing metric.\n4. Mutual Success\nTo following our pricing philosophy, we aim to support long-lasting customer relationships. When we develop our pricing, the target is that both our customers and GitLab become successful together. For long term success, where we can run a sustainable business and meet our company’s financial goals, we do also consider cost to serve and margins as factors when pricing is determined. It is important to note that while costs and margins are factors in pricing, value provided to our customers is the foundational element.\nDepartments and Decision Making\nPricing affects Product, Marketing, and Sales.\nTherefore, general pricing decisions are made by the CEO.\nProduct makes most decisions on a day-to-day basis about what feature should go\nin what plan based on\nthe paid tiers\n.\nThe following table describes how large cross-functional pricing decisions should be made.  This decision making method differs from our normal\nRADCIE\nmethod due to the extremely cross-functional nature and business risk of large pricing decisions.\nResponsibility\nRole\nDescription\nResponsible\nGroup Manager, Pricing\nResponsible for analysis and recommendation\nAgree\nVP Monetization, Chief Product Officer, CRO\nShould ideally agree with the recommendation\nPerform\nPricing, Fulfillment, Sales Ops, Product Marketing, and Website teams\nExecutes the recommendation\nInput\nCMO, CFO\nShould be consulted and allowed to provide input prior to decision\nDecide\nCEO\nFinal decision maker\nTo ensure alignment across stakeholders, a monthly Pricing Steering Committee is held to align on upcoming monetization decisions, discuss historical insights/trends, and prioritize areas of opportunity.\nThree Tiers\nWe have three pricing tiers.\nHow we make decisions on a day-to-day basis is specified on our\nstewardship page\n.\nSelf-Managed/SaaS tier\nFree\nPremium\nUltimate\nPer user per month\n$0\n$29\n$99\nWho cares most about the feature\nIndividual Contributors\nDirectors\nExecutives\nMain competitor\nGitHub Team\nGitHub Enterprise\nVeracode, Checkmarx\nType of sell\nNo sell\nBenefit/solution\nTransformation\nBuyer Based Tiering Clarification\nWhen considering buyers as part of product tiering decisions we use the following guidance:\nFree is for a single developer, with the purchasing decision led by that same person\nPremium is for team(s) usage, with the purchasing decision led by one or more Directors\nUltimate is for strategic organizational usage, with the purchasing decision led by one or more Execs\nWhen the tiering of a feature is being evaluated, the\nstewardship promise\nwill override this guidance.\nExamples\nUnderstanding the distinction of our buyer-based model can be difficult. In it we focus not on the user of the feature, but on the buyer and in what cases a feature would be useful to that buyer even in cases where the buyer is not the user. When making these decisions we ask questions like:\nWho would drive the demand for this feature?\nAt what level of an organization does this feature add value?\nBelow we list product categories and the current and proposed features which reside in a given tier to highlight how the buyer-based model works in practice.\nFeature - Kanban Boards\nProject and Group Boards (Free)\n: The primary user and buyer for Issue Boards in general is Individual Contributors. While group boards likely span teams, there are also valid use cases for an individual to organize code in several projects and manage issues across those projects at the group level. The key differentiation is that an Individual Contributor will likely only ever need a single group level Issue Board; whereas Managers need several group level Issue Boards to facilitate their team’s workflows. (\nDocumentation\n)\nIssue Weight on Boards (Premium)\n: The users assigning issue weights are individual contributors but the value of that weight is for Directors of teams to ensure proper milestone planning. (Documentation\nwith respect to boards\n)\nMultiple Group Issue Boards (Premium)\n: Issue boards which span groups are valuable to and also utilized by groups of groups which aligns to Director level likely buyer. (\nRelated documentation\n)\nIssue Board Epic Swimlanes (Ultimate)\n: Everyday users of swimlanes might be individual contributors but their value is in the visualization of activity for company wide portfolio management by Executives. (\nRelated issue\n)\nFeature - Merge Requests\nMerge conflict resolution (Free)\n: Resolving merge conflicts is part of the daily workflow and valuable to Individual Contributors. (\nDocumentation\n)\nMerge approvals (Premium)\n: Requiring approvals on merge requests is only useful when there is a team working on a project and their Director (who isn’t likely to be the user of approvals) requires specific individuals to provide their approval. (\nDocumentation\n)\nMerge request reviews (Premium)\n: Merge request reviews enables the expedient review by multiple team members on merge requests. Typically large enough teams to value the reduced chatter accompanying MR reviews reside under Directors. (\nDocumentation\n)\nFeature - Pipelines\nBuilt in CI Pipelines (Free)\n: CI Pipelines are integral to GitLab and used primarily by Individual Contributors. (\nDocumentation\n)\nShow pipeline code coverage rate (Premium)\n: The ability to determine code coverage rate is particularly valuable to Directors. (\nDocumentation\n)\nPipeline dashboards (Premium)\n: Dashboards of pipelines across groups and projects are primarily used and valued by Directors. (\nDocumentation\n)\nDownloadable all pipeline logs (Ultimate)\n: Pipeline logs would be generated and even downloaded by individual contributors, but the value of collating these logs is provided to Executives responsible for ensuring compliance.\nUsage can be more important than buyer-based tiering\nWhile our\ntiers\nare based on who leads the purchasing decision there are occasions where driving increased usage takes precedence over the natural buyer-based tiering, always in favor of moving features to lower tiers. Here’s why:\nAs GitLab develops new categories that are likely to be in paid tiers, it is still reasonable (and in many cases advisable) to get the early MVC versions to land in the free or lower paid-tier to spur adoption, encourage contributions and gain feedback from the wider user base. Over time, the team can then add more features on top of the MVC functionality that will be placed in the paid-tiers. However, Product Managers should not move features down in violation of the buyer-based model unless there is a concrete high confidence plan to follow up with meaningful additions to the base feature that can be added to and monetized with the right paid tier\nOur dual flywheels work because of increased users.  Having capabilities in open-source - even for those oriented towards teams encourages more usage - increased users. Those users are essential to creating contributors, an improved product and future tiered features.\nWhen considering tiering, if the feature is geared to be used (not purchased) by individuals and the answer to the question of\nwho cares most about this feature?\nis\ntoday - very few people\nwe should consider open-sourcing it to get more usage and contributors. Regardless of the reasoning behind the down-tiering of a feature, the\nprocess\nshould still be followed.\nPrevent the ability to circumvent tiering\nIf a feature in the free tier (typically useful to ICs, but also to others) will open up the possibility to circumvent or abuse our tiering policy, we should exercise extreme caution and err on the side of maintaining the feature in a paid tier. An example of this is\nrepo pull mirroring\nthat is useful for ICs and can also be great for adoption (i.e. trying out GitLab.). However, it may also lead to larger instances in Free tier mirroring to smaller instances in paid tiers to make use of paid-tiered features. This goes against our pricing terms & conditions and therefore we chose to keep the feature in a paid tier instead of Free tier.\nPartner integration considerations\nWhen building integrations to partners it is possible to make exceptions to our buyer-based model when our tiers don’t align well with those of the partner, but only in favor of lower tiers. As an example - a partner who provides a team collaboration tool with a free tier might desire any GitLab integration to be present in our free tier despite it clearly being appropriate for single team usage. The go-to-market benefits of this partnership can outweigh the divergence from our buyer-based model.\nThemes\nWe’ve found that bundling our features within tiers into themes\nresulted in improved conversion performance on our pricing page\n. While it is how we present the value of our tiers, this themes-based representation serves as an additive filter for, and is not a replace of, our Buyer Based Tiering decision.\nThemes are then bundled into\ncustomer value drivers\n.\ngraph TD;\nFeatures-->Categories;\nCategories-->Groups;\nGroups-->Stages;\nStages-->Sections;\nFeatures-->Themes;\nThemes-->ValueDrivers(Value Drivers);\nCurrent Theme List\nThe following are our current set of capabilities:\nPremium\nFaster code reviews\nAdvanced CI/CD\nEnterprise agile planning\nRelease controls\nSelf-managed reliability\n10,000 compute minutes per month\nSupport\nUltimate\nAdvanced security testing\nSecurity risk mitigation\nCompliance\nPortfolio management\nValue stream management\nFree guest users\n50,000 compute minutes per month\nSupport\nWhat happens when themes don’t match our Buyer Based Tiering Decisions?\nBecause themes are filters for our Buyer Based tiers, there can occasionally be instances where a feature’s tier and its natural theme don’t match. In that case we should either:\nAdjust the feature’s tier to match\nAdjust the feature to a different theme to match\nAdjust the naming of the theme to better capture the distinction between tiers\nNote - it is OK for the features of a theme to be in the listed tier and any lower tier.\nLower tiers have more relative value\nOur lower tiers have:\nA lower price.\nA lower discount we give (price after discount is closer to list price both absolute and as a percentage).\nThe price charged for value generated is lower.\nMore value per dollar as a percentage (in absolute numbers higher tiers generate more net value)\nOur higher tier is still the best option for our customers:\nHigher tier adds much more absolute value. For example our top tier can add 2000% more value than our lower tier while still adding less relative value.\nThe Return On Investment (ROI) for higher tiers tends to be better than our lower tiers due to costs outside of the subscription. For example, when you switch to GitLab you will have a fixed cost in implementation and training. And if you use a lower tier you need to find a workaround for features you are missing out on, increasing cost and decreasing efficiency.\nThere are multiple reasons why our lower tiers have more relative value:\nThe lower tiers are older so they had more time to accumulate features.\nAny pricing model will have to be compatible with our open source tier. The open source tier should be the top alternative to our priced tiers. That tier has zero cost, zero discounting, a zero price charged for value generated, and infinite value per dollar. Our lowest tier should be the tier that is closest to that to make it possible for people to go from free to paid. As soon as they are paid we can help them to generate more value with GitLab, for example by using more stages. If they realize more value we can move them up in tiers.\nThe lower tiers (including open source) are a pipeline of future customers for the higher tiers.\nWe can easily increase revenue in the next 3 years by raising prices and/or making lower tiers less attractive (of course\nnever by moving features up\n). But we are optimizing the Net Present Value (\nNPV\n) of the company with a 10% a year discount rate. This means we have to look beyond 3 years.\nRaising prices on our lower tiers might cause more revenue in the short term, both directly and by compelling most organizations to move to higher tiers. But the minority of organizations that switch to a competition will cause them to be much harder for us to reach in the future and will allow competitors a flywheel effect of their own. This tradeoff has to be calculated explicitly when raising prices.\nThat our lower tiers are popular is not a pricing problem but a communication problem. Higher priced tiers have less value per dollar as a percentage but generate more net value in absolute terms. It is up to us to explain that value in the product, with marketing, and in our sales interactions.\nOpen core projects capture (ratio of value created vs. captured) less value than proprietary projects. Because the pricing tiers are low relative to the value created the difference between the tiers can be much higher than with proprietary software. If you capture 1% you can easily introduce a new tier at 5x, if you capture 50% even doubling your price will take away all benefit for the customer.\nWe see customers on Premium but not users on Free. If we focus only on the visible customers that are on Premium we miss the largest opportunity. Premium is priced too if the conversion from Premium to Ultimate is lower than organizations becoming customers after using free. Currently this is not the case because it is much harder reaching out to free users since they aren’t customers and we don’t have a point of contact to discuss the value of higher tiers.\nArguments in favor of raising the price of the lower tier (which we won’t necessarily do) are:\nOur sales effort don’t change much with the plan, making lower tiers relatively much more expensive to sell.\nOver time we keep adding features to the lower tiers due to our\nBuyer Based Open Core model\nso you would expect prices to rise.\nWhile the absolute value of higher tiers is better and that seems the most rational measure people also do look at relative value and we should make sure that the price to go to a higher tiers is perceived well.\nMany successful open source companies charge a relatively high price for their most affordable plan.\nThe future growth of GitLab is much more influenced by how many people are using the open source version than our lower tier, so having fewer paid users is a relatively small impact.\nThe future competition for GitLab is much more likely to come from an open source project than a proprietary only product competing only with our lowest tier.\nWe can reduce the relative attractiveness of the lowest tier by open sourcing features, although this too makes it harder to raise the price of that tier.\nLots of companies don’t want to forgo support, especially in their first year, and there is little price elasticity there.\nPlease note that all the above is not a plea to add more or fewer features to lower tiers, we should just follow our\nBuyer Based Open Core model\n.\nConsistent names\nWe use the same names for SaaS and Self-Managed tiers because:\nThe feature set for our SaaS and Self-Managed offerings is largely consistent and we want SaaS and Self-Managed tiers to be as similar as possible.\nConsistent naming is easy to understand and use for our customers.\nType of sell\nA feature sell means that people want to buy the extra features. This can be done self-serve.\nA benefit sell means that people buy the business outcomes that come with fully utilizing GitLab. You need case studies, metrics like\nDevOps Score\n, and a quarterly check-in with a Customer Success Manager from Customer Success to review the status of the adoption plan. A competitive process can include a bake-off to show people are 10x faster in starting new projects with GitLab.\nA transformation sell means that people want to transform as an organization. They want to reduce cycle time by 10x and want us to help them. We do workshops with transformation consultants and define a complete, shared project.\nHybrid sales model\nThere is a big price difference between the different tiers (0$, $29, $99 per user per month, a price difference of infinite, 5x). For GitLab Inc., the majority of revenue comes from large enterprises buying the top two tiers.\nMost companies in a similar situation would focus only on the highest tiers.\nBut we want to make a our hybrid model work for the following reasons:\nWe want to keep being a\ngood steward of the open source project\n.\nThe free tier is a scalable way to create future customers.\nA 5x higher price doesn’t mean there is 5x more value, just like the Premium tier doesn’t provide infinitely more value than the gratis Free tier.\nWhen deciding between tiers, organizations should look at the ratio between how much extra value they get divided by how much extra they pay.\nIf this ratio is comfortably above 1, it makes sense to move to a higher tier.\nThe value is in making people more effective, saving time on integrating tools, driving faster time to value, and retiring other tools.\nThis should more than pay for the increased price of a tier.\nAn analogy would be Apple’s iPhone: it is twice as expensive as an average Android phone, and while it doesn’t deliver twice as much value, the extra value is worth the extra cost.\nAs\nStripe documented\n: hybrid is hard, because “The most common result of attempting both models simultaneously is that only one of the models receives any traction, and (because these models weave themselves into all operations of the company) it typically strangles the other.”\nThis hybrid models is how we\nbridge the chasm\nbetween self-service and enterprise.\nCombining features in plans\nWe tried selling one feature at a time, but this was not feasible.\nAn improved version of that would be selling 7 main features, instead of 3 plans.\nExamples of main features would be: High Availability, Security, Service Desk, etc.\nThe advantages are:\nGradual upgrading to more expensive features.\nPay only for the features you use.\nAdd-ons are a common way of selling this.\nThe disadvantages are:\nIt is\nsuboptimal for both the buyer and GitLab Inc.\n.\nIt is hard for the buyer to estimate how much of each feature they will need.\nThe complexity can lengthen the sales process when buyers have to make separate tiering decisions for each group.\nFor users, it is unclear what features they can use.\nIt is not common in the industry, buyers don’t expect it, and it isn’t a boring solution (an operating principle under our\nefficiency value\n).\nThe true-up process becomes more complex.\nThe customer has to administer a process for how users can get more features.\nFeatures get less usage, and therefore the improvements are slower.\nIt is hard to do with a hybrid sales model, where there is a 25x difference between the lowest and highest paid plans.\nWe currently think the disadvantages outweigh the advantages.\nSingle plan for one customer\nThe advantages are:\nUsers can use more features from more stages uniformly. Taking advantage of the power the one DevOps application results in better ROI for the customer.\nBuyers do not have to estimate how much of each tier they will need.\nThere will not be confusion on what users can or can’t use.\nSimple pricing and true-up process.\nThere’s no increased product complexity to turn features on/off on a per user basis.\nSimpler administration: the customer will not have to administer a process to move users between tiers.\nThe disadvantages are:\nCustomers may be paying for feature they feel not enough users are using.\nMay lead to multiple instances with separate licenses for different groups.\nMore negotiation up front.\nIncreased renewal risks.\nWe believe having a single plan for one customer works because the advantages outweigh the disadvantages.\nFor the GitLab sales team and for GitLab customers, we suggest handling the objection by focusing on the\nvalue and business outcomes\nReporter User Permission Pricing\nAs our customers adopt GitLab as the single application for their entire DevOps lifecycle, we are hearing more and more non-developer use cases using GitLab for Agile project management. The main functionality that some non-developer roles need aligns fairly well with our\nreporter permission\naccess, including Managing Labels, Assigning Issues, and Creating and Editing Epics, etc. Those users don’t really need to use much other developer functionality.\nCurrently, we do not offer a different list price for users who only need the reporter permission because:\nThis pricing approach aligns with our\nBuyer Based Open Core model\n.\nThe list prices of our plans are blended prices with consideration for both developer and non-developer use cases.\nWe are\nselling a suite\nand taking care of specific non-developer use cases by making a discount conditional on not using part of the product.\nA simplified pricing and packaging (PnP) strategy serves customers in the optimal way per the industry best practice. More SKUs lead to a more complex PnP model as a company scales, which eventually causes huge confusion to customers.\nWe do not limit a license to the\nreporter permission\nin GitLab. Any reporter user can be updated to a regular developer user by using the same license.\nWe understand that our customers have non-developer use cases. Please\ncontact our sales team\nor connect with us via\nthis issue\nto discuss your specific use cases.\nTrue-up pricing\nWith true-up pricing, the license/sale is never blocking user growth.\nWe currently charge 100% for users added during the year, because some organizations gave an intentionally too-low estimate when we charged 50%. If we technically can count “user days,” we can make it fair for everyone. A pre-requisite of this would be customer adoption of\nCloud Licensing\n.\nFor customers on Cloud Licensing, we offer\nQuarterly Subscription Reconciliation\n.\nConsumption pricing principles\nThese are some principles we think are useful. These are not a promise not an entitlement. Our\npricing page\ncontains our current pricing which might deviate from the principles below.\nOur price is 5x the on-demand cost of the clouds, so we have 80% margin. This seems to be what’s common in our market (for example:\nGitHub\nand\nCircleCI\n), but we’re open to other companies fact checking us with list prices. Here’s\nour long-term cost model\nwhich shows how this enables us to get a 20% profit margin.\nThe user has the flexibility to bring their own resources whenever practical (for example, runners and clusters). This can be their on-premise equipment or from their own cloud contract.\nWe don’t want to compete with the major clouds because they are our partners. The only reasons we’d offer our own are because it needs to be in our infrastructure (repository storage) and it’s convenient for the end user (runners).\nWe reap the benefits of scale and sustained-use discounts. We use that to sponsor the resource use that isn’t priced. For example: Coordinating the runners, logging in, showing the interface, and sending emails.\nAs costs become more significant, we might start charging for it (E.g. bandwidth costs).\nWe can offer new services that make it easier to use GitLab, like for clusters that run Static Application Security Testing (SAST), Dynamic Application Security Testing (DAST), and other Auto DevOps features.\nThe consumption differences between the tiers should be proportional to the price difference between the tiers for the paid plans. The free tier should have an equal difference. Currently it is 5x between all the tiers.\nWe anticipate that not all of the consumption that is included in the accounts is used.\nWe simplify the pricing model for our customers whenever we can. For example, our pricing is one fee for storage, while the underlying repository might be on a Solid State Drive (SSD) or Hard Disk Drive (HDD).\nIn the future we can offer extra credits if users do something that generates value to the company. Similar to the Dropbox “get GBs for inviting a friend” offering. Examples: Using new stages, linking to a partner (AWS/GCP), and inviting new users.\nPrepay vs. postpay: We select prepayment since it solves non-payment problems like bitcoin miners. It’s also more predictable for users with fewer unexpected bills, so it makes budgeting easier. Postpay reduces the risk of infrastructure going down due to the lack of funds. In GitLab, most of the consumption is driven by people in the organization instead of their customers. This makes it more likely that we can get them to pay quickly when that is needed. We should think about emergency processes for enterprise customers that have long ordering cycles.\nManual vs. automatic ordering: We need both. We’ll start with manual ordering since that is simpler to make, we need it anyway, and it leads to fewer unexpected bills for customers. Automatic ordering will help customers prevent their developers being ineffective because they don’t have minutes. At some point, we might change the default from manual to automatic. If we do, we should communicate this well and always give customers the option to keep it manual.\nRecurring vs. non-recurring: We will make it recurring for anything that was manually ordered and non-recurring for anything that was automatically ordered. Recurring reduces work on the side of the customers. Non-recurring reduces the chance of customers paying for consumption they don’t use.\nRefundable vs. non-refundable: We’ll make it non-refundable for now, since refundable is complex to implement, has legal constraints, and makes revenue recognition harder. Refundable would be better for customers that have more consumption purchased than they need.\nSplit vs. combined pricing: Do you charge separately for storage and minutes, or do you buy a bunch of credits you can use for both? We select split pricing, because it makes it simpler to understand. The hyperclouds are also going this way with\nreserved instances\nand\nfree tiers\nare also for specific products.\nDollars vs. credits vs. native: Do we add x dollars to an account, add credits, or add compute minutes and storage GBs. We choose native since it is simplest to understand if you do split pricing. Not all minutes are the same (sizes, operating system) but we can use a multiplication factor for that. More than 95% of the minutes are of the 1x type, so native instead of credits makes it easier in most situations.\nPartial vs. full refill: We do a full refill since it is simpler to communicate, understand, bill, and administer. CircleCI does a partial refill for 25% of your normal credits.\nHow much free? We should probably do 5x less than the lowest tier since we have 5x between the paid tiers. GitHub followed our pricing so that isn’t a good source of comparison. CircleCI does 250 minutes on the free plan.\nAccumulative vs. non-cumulative:\nWe currently think the pros with the non-cumulative approach outweigh the pros with the cumulative approach.\nIt seems that per namespace is easier to communicate.\nCustomers don’t need to do calculations on the total minutes and storage they are getting when signing on contracts, renewals, adding users, etc. as long as they stay under the total it is a predictable bill.\nIt is simpler to implement, and we already have it.\nThe allotment with the plan is to get people started, not for serious consumption, that you can buy separately.\nIt looks like a bigger number of minutes and storage.\nThis gives the most to free users, for whom purchasing consumption is a big hurdle to try GitLab.\nWe need to make sure that a paid tier doesn’t benefit from free users quota.\nSome other vendors’ pricing metrics are like this as well.\nIt makes more logical sense.\nIt is more fair as customers will have more minutes and storage as they sign up more users.\nIt is aligned with our tier pricing metric.\nIt incentivizes more users per namespace of which we know it drives conversion.\nIt drives free users to more quickly buy consumption and convert them into customers.\nPer user vs. per namespace: Are the consumption limits provisioned per user or per namespace?\nIn the case of per namespace, the user gets more minutes and storage when they create another namespace. In the case of per user, the user receives fixed minutes and storage across all their contributions. We currently provision consumption limits per namespace. A user namespace also receives the group namespace’s quota.\nDoes storage pricing include other storage types: attachments, containers, etc.?\nThe single storage pricing covers registry (containers are part of it), repository, artifacts, and attachments, etc.\nPricing is not a substitute for scalability. For example, putting something in a higher tier if we are worried about its scalability is not what we do. We should rather start with Beta, limited access, or mailing lists etc.\nPrice difference between self-managed and SaaS\nArguments to charge more for SaaS:\nThe costs of SaaS are higher for GitLab.\nIt is more logical in revenue recognition.\nArguments to at least make them equal:\nSelf-managed pricing tends to be higher, in general.\nThere is more market demand for self-managed.\nNo incentive for sales to sell SaaS over self-managed.\nWe want to incentivize customers to move to SaaS with us because we have more data (better customer success outcomes) and we don’t have to rewin their business when they do move from self-managed to SaaS\nNot sure what is normal in the market. Adobe did a good job, but they moved from perpetual licensing to subscriptions, where it is hard to\ncompare the two prices\n.\nWhen is a dollar not a dollar?\nThis is the title of a\ngreat article\nof which we’ll apply the 8 points to GitLab below:\nCost vs. revenue: we can help both to reduce costs and increase revenue, make sure you align to what the priorities of the prospect are.\nPrinciple agent problem: for a VP of Engineering, you probably want to highlight our features that provide more visibility over features that save developers time.\nExisting expense vs. new expense: we can make use of existing budgets, be aware that multiple can apply (dev tools, security, operations, DevOps transformation).\nAbove vs. below discretionary spending limits: one more reason to have multiple pricing tiers.\nSelling services vs. customized products vs. off-the-shelf products: we’re selling a high-margin product and augment with services when needed to make the customer more successful.\nSelling to many stakeholders vs. one stakeholder: this is another reason for our multiple tiers—Premium is sold to the single stakeholder of development teams, Ultimate is sold to multiple stakeholders and will need the CIO to enforce the transformation.\nMonthly vs. upfront payments: that is why we prioritize yearly upfront, sometimes even multi-year upfront. Also, yearly is the standard for enterprises (Salesforce sells it like this) and helps reduce support costs that are an order of magnitude greater for SaaS (most likely to be monthly) vs. self-managed.\nSelling vs. upselling: this is why we have multiple tiers.\nAnnual pricing is prioritized over monthly pricing\nAnnual, up-front pricing is currently our only offering.\nAll internal systems should show only annual pricing to keep comparisons simple.\nWe do show monthly pricing externally.\nArguments supporting annual up-front pricing:\nOn\nslide 7 of the 2020 Go To Market (GTM) Survey of Redpoint\nit showed that Annual pricing was the majority from $5k up.\nIt helps to recover the costs of acquiring, onboarding, and supporting a customer.\nIt enables reinvestment to speed delivery of new product capabilities for customers.\nIt aids customer self-selection and commitment to drive to successful deployment and enough time to see successful outcomes with the product.\nIt can be offered at a discount relative to monthly pricing.\nWe offer a wide range of product tiers, including a free tier to appeal to many customer types and free trials of any tier.\nCosts are lower for sales, billing, and customer support.\nBetter customer experience due to ongoing product availability and less frequent administration and billing contact.\nIt is much easier to enforce license entitlement only once per year and yields lower product development cost.\nIt enables a more predictable business and more up-front investment in customer success to ensure great outcomes from use of the product.\nAnnual pricing lends to a more simple revenue recognition model where consumption is not relevant since revenue is recognized evenly over the course of the term. To get the equivalent with monthly pricing you need a ‘use it or lose it’ condition per month, while the industry standard is to allow carry-over into the next month.\nIt helps to reduce churn with SMB customers, as that has been a problem in the industry.\nArguments supporting also offering monthly pricing:\nMonthly billing gives customers another way to buy and thus reduces barriers to adoption of the product.\nMonthly pricing can align with billing of combined or dependent products/services that are already billed monthly. (ex: if bundled with another monthly service)\nWhy show monthly pricing on the website\nAlmost all SaaS products show monthly pricing on their pricing pages. GitLab shows\nmonthly pricing on our website\nand notes clearly that it is billed annually. This is also a standard practice followed by companies like\nSalesforce\n. We previously have tried showing annual pricing on the website, but repeatedly heard from customers that they were confused by it. They often thought our product was priced significantly higher than it actually was because they expected the pricing to be displayed in monthly units and read the annual price as though it were per month.\nOnly sell a suite\nMost companies evolve in the following way:\nSell one product\nSell multiple products\nSell multiple products and a suite of them\nOnly sell a suite\nAn example is Microsoft Office, where it is costly to buy components of Office365 separately, although higher tiers include more products.\nAt GitLab, we decided to skip the intermediate steps and immediately only offer a suite that includes all our products.\nHaving our complete scope included in our open source version is even part of our\nstewardship promises\n.\nSelling only a suite has risks, after the => is how we mitigate those at GitLab:\nLeave money on the table, if people want all products. => Offer an Ultimate tier that is great value, if you adopt everything of GitLab.\nDiscount because people don’t want all the products. => Make a discount conditional on not using part of the product.\nTiers are harder to define than if you would have separate products. => Hard to mitigate, we have to work extra hard on communicating the differences.\nNo revenue feedback from customer about what products they value more. => The product function focuses on usage data as our best proxy for value.\nCompanies evolve to selling only a suite for the following reasons, after the => is how this applies to GitLab:\nMakes it easier for organizations to adopt the other products. => This is essential; organizations have official solutions and GitLab grows with organic adoption from developers.\nShow customers the benefit of a\nsingle application\n. => This is essential, since people are skeptical (showing beats telling).\nMore usage of all the products. => This is essential for us, due to our seed then nurture product strategy.\nHarder to displace the suite, once it is in place. => This will help if competitors offer a service based on our open source code.\nWe’re going even further than selling a suite by integrating everything in a single application. We do that because of the advantages mentioned on our\nhandbook page about us being single application\n. A secondary effect is that the user doesn’t have to make a buying, or even an adoption, decision.\nCharging one price that incorporate all our stages is the\nperfect bundle\n.\nValue creation\nThere are two factors that determine how much value GitLab creates for an organization, in order of importance:\nScope: how many parts of GitLab you use, indicated by the DevOps score, how many components of GitLab are in use.\nSize: how many people work in an organization and use GitLab.\nWhen an organization is larger, the benefits of GitLab are larger because:\nCoordination takes up a greater amount of the work. 80% is coordination costs; it is much more valuable to reduce that than when it is 20%.\nHarder and more expensive to train people and enforce best practices.\nMore silos that benefit from innersourcing.\nMore cancellations, longer cycles, more time to win.\nHigher requirements for governance.\nValue capture\nSince GitLab is an open core project, we’ll always create much more value then we (are able to) capture. Based on the value created, the straightforward way to capture value would be to:\nScope: charge a higher price per user the more of GitLab you use.\nSize: Charge a higher price per seat the more users you have.\nThese straightforward ways are not possible for the following reasons:\nScope: charging more for adoption would hurt the adoption of GitLab for the whole lifecycle. In January 2018, version control is 10 times more popular than the next feature (CI). We need the features to spread organically, so people can create more value with GitLab. People are much more willing to pay when they are already using a part of the lifecycle.\nSize: many other software companies limit the maximum amount of users in certain\ntiers\n. For GitLab, we can’t do this because we\npromise the open source version won’t contain artificial restrictions\n. We can do it in our proprietary tiers, but this doesn’t seem symmetrical. It also feels unfair, if you have to pay more simply by being a bit larger than the limit.\nSo we’re left with charging for features.\nWe can’t charge for each feature separately, since that is unwieldy for the customer.\nSo we charge for tiers that contain a bundle of features.\nWe select features in the (more expensive) paid tiers that:\nScope: become more useful and valuable as your DevOps score increases\nSize: become more useful and valuable as your organizational size increases\nAdding features to a (more expensive) paid tier is not the only thing stopping users from adopting them, but it is a very important factor.\nTo simplify the above, we base our feature groupings on champion position (see below).\nBuyer-Based-Open-Core\nWe make feature tiering decisions based on:\n“Who cares most about the feature”\n.\nOur\nthree tiers\nare differentiated based on\nthe buyer persona\nor IC who buys GitLab, from individual contributor, to manager/director, to executive. Every person in the company\nis on the same tier\n, even if they don’t use all the features.\nThe feature is put in the plan based on what champion is most likely to\ncare\nabout it.\nBuyers make sense, since a higher-cost plan needs a higher-placed buyer.\nAlternatives that don’t work:\nPricing based on company size doesn’t work; some small companies need the features of the most expensive plan.\nScope and size\ndon’t work.\nPricing based on maturity is strange, because organizations at the beginning of their journey should pay the most, since in a greenfield you benefit the most quickly and extensively from GitLab.\nMore detail about this in Sid’s presentations about Buyer-Based-Open-Core at the\nOpen Source Leadership Summit in 2019\nand at\nHeavybit\n.\nAlso, see\nfork and commoditize\n(internal) in our list of concerns.\nExample template for customer response\nA customer asked why merge request approvals were not included in free:\nThanks for asking. We think that managers are more likely to care about merge requests approvals than individual contributors. That doesn’t mean that individual contributors don’t care about them. And it doesn’t mean that in all cases managers care more, just in most cases. For more information please see our Buyer Based Open Core model:\n#buyer-based-open-core\n.\nBelow is a video of the CEO talking about monetizing open source with co-founders from Infracost.io\nIf a feature can be moved down do it quickly\nWe should not hesitate to open source features. When we put a feature into too high of a tier we should move it quickly because not having it in all tiers limits who can use the feature and this hurts:\nGetting more users: having the product sell itself makes us much more efficient, for it to sell itself it has to get used, more open source features can increase the popularity of GitLab compared to rival offerings.\nGetting more\nstages per user\n(internal): if an open-source feature gets a user to adopt a new stage, the value one user gets from GitLab increases greatly because the\nsingle application\nbenefits grow exponentially when you adopt more stages.\nGetting more open source contributions to improve the feature: since the number of contributions grows with the number of users.\nIncrease demand for paid features on top of what you open source: When you move a feature down this increases the usage of the specific feature, for example our service desk functionality. When a feature is popular this creates more demand for paid features that we can add later like custom templates for service desks.\nIn most cases the following guidelines apply:\nPrioritize feature adoption in free prior to attempting to monetize it.\nIf other paid features will be within reach of more users by using this features we should probably open source it. An example is the support for multiple Kubernetes clusters that can drive adoption of adding Kubernetes clusters which allows people to use the paid feature of browser performance testing.\nIf no buyer cares about the feature, that means it isn’t the focus of any buyer, and we should open source it.\nWe should make sure that the basic features of a comparable offerings are open source. We should charge for the features that the comparable offerings charge extra for. We do need features to be open source to drive initial adoption.\nBelow is a video with the CEO discussing the philosophy of this with a Product Manager:\nDefault to move features down\nWhen in doubt, we will default to moving features to a lower tier,\nmoving it down quickly\nif\ndata shows that this is more appropriate. Not all tier changes will involve moving things to lower-priced plans and paid features may move into the higher tier, but\nopen source features should never move to paid tiers\n.\nOccasionally, a feature may unintentionally become available at a lower-tier due to a bug. This can include the free (open source) tier. When we fix the bug and return the feature to the correct tier, this is not the same as moving an open source feature to a paid tier. The definitive source for a given feature’s tier is\nour documentation\n.\nWe should focus on building new features that buyers want and making sure that the initial assessment of new features is never too low. While we reserve the\nability to move features up in tier, proving the necessity has a much higher bar since we are constraining the existing reach of a feature rather than expanding it.\nPlease also note that the CEO is in charge of pricing and tiers; this is delegated to product for the day-to-day work.\nWhile other parts of the GitLab organization are consulted, the CEO is the\ndirectly responsible individual\n.\nChanging tiers and pricing changes\nTo propose a change that impacts pricing or changes a feature’s tier (e.g. moving a feature from Premium to Free), please follow the process outlined in the\nFeature Tier or Pricing Change issue template\n.\nDevOps score is not maturity\nWhat is interesting is that GitLab creates more value as you adopt more of it.\nThis shouldn’t be confused with DevOps maturity.\nDevOps maturity is how advanced your practices are and how fast your DevOps lifecycle is, shown in\ncycle analytics\n.\nWith the best practices embedded in GitLab, you will mature faster than without it. GitLab enables a 200% faster DevOps lifecycle.\nBut DevOps maturity is mostly about organizational change. GitLab the product is just an enabler of it.\nEven if an organization uses everything of GitLab (high DevOps score), they can still have a slow process (slow lifecycle).\nWe know there is a correlation between a higher DevOps score and a faster lifecycle; but especially in organizations new to DevOps, it is a trend, not an absolute.\nLinking our tiers to maturity would mean we don’t ask any money from the large organizations that currently have a slow lifecycle but that are making it faster by adopting all of GitLab.\nThese large organizations with a slow lifecycle benefit the most from GitLab, since they can adopt it completely, because they are not held back by an existing toolchain.\nLocation based pricing\nAs suggested by\na user on X\n(X login required).\nThis is a good suggestion to consider given the GitLab approach to adapting to local markets throughout the business. GitLab will assess viability of the idea in our overall pricing strategy planning. It is difficult to do and our assessment of this will consider:\nThis is a complex issue and requires that all parties are better off if a change is made to account for geography. We fully admit that this would be hard to pull off successfully.\nIf there is a way this could be good for customers and for GitLab, we will not treat this separately. We will treat it as part of a unified pricing strategy\nIn a global and digital marketplace it is difficult to positively identify where a customer is geographically located either because we rely on that customer to self-identify or because it is a large organization with users in several geographical locations.\nWe may be able to solve with a simpler discounting policy\nAny overall reduction in cost per license must be more than made up by increased volume at the new pricing\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "a0b66eaf0bbccad9.html"
}