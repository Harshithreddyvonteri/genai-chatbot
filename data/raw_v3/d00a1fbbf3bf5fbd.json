{
  "url": "https://about.gitlab.com/direction/ci",
  "title": "CI Section Direction\n|\nGitLab",
  "headings": [
    "CI Section Direction",
    "What we do",
    "CI Section Mission",
    "CI Section Vision",
    "Why we do it",
    "How we do it"
  ],
  "text": "CI Section Direction\n|\nGitLab\nCI Section Direction\nMaintained by\n:\nMike Flouton\n@mflouton\nContribute to this page\nEdit this page\nYou are here:\nGitLab Direction\nCI Section Direction\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nWhat we do\nCI Section Mission\nCI Section Vision\n3-year strategy\nMarket predictions\nThemes\nWhy we do it\nMarket Landscape for Continuous Integration Tools\nGitLab CI Section Current Position\nContinuous Integration Adoption Path\nSWOT\nCore competencies for CI Section\nCompetitive Landscape\nCI Section Jobs To Be Done\nWho is it for?\nToday\nMedium Term (1-2 years)\nHow we do it\nCross-section efforts\nWhat we do\nThe CI section is responsible for many of the experiences in GitLab after a developer commits changes to a project (source code repository). The DRI for this page is\nJackie Porter\n, Director of Product and I welcome contributions - please open a merge request or send me an\nemail\n.\nCI Section Mission\nOur mission for the CI Section is to empower all users to easily contribute to the automated building, testing, and optimization of code for GitLab customers and the Open Source Community.\nCI Section Vision\nOur\nvision\nis that in the next five years, GitLab CI/CD is the brand synonymous with CI/CD and recognized as the industry standard.\nWe are going to accomplish this by making the process of configuring, managing, and tuning CI/CD pipelines as frictionless as possible.\nThe CI Section is comprised of two stages: Verify and Package. For a deeper view of the direction of each specific stage please visit the respective Direction Pages linked below:\nVerify\nPackage\n3-year strategy\nInherited from GitLab's company\nmission\n, the CI section aims to support universal contribution from everyone in the software build and packaging processes.\nTo accomplish this target, focusing on reducing complexity in the developer and platform operator workflow by prioritizing\nsimplicity\nin our design,\nbuilding with flexibility in mind for the\nenterprise workflow\n,\nand becoming an ecosystem for CI tools by\nthoughtfully integrating with other applications\nare the foundation for the strategy.\nIn addition to enabling developers with CI capabilities, we will also focus on supporting platform engineers with best-in-class tools for managing code, artifacts, and costs.\nOrganizations need a solution to effectively manage two sides of the software cost picture: developer cost and compute cost. There is a high demand for a single source to view and optimize builds and infrastructure\ninternal research\n.\nAs we look into the future of build and package, migration and use case support will be a core focus. Journeys away from current tools are challenging. Our goal is to give you tools that can help make it easy to consolidate on GitLab so that you can save money on licensing costs and improve user experience.\nWith a win/win scenario in mind, the three year outcomes we would want to support as a section are as follows:\nManage code, binaries and packages at scale with actionable analytics and dashboards to support platform team decision making\nEnable platform teams to share operational definitions (infrastructure, environments, deployment pipelines, monitoring configuration) with development teams, and for development teams to easily contribute improvements to their definition\nEfficiency and cost optimizations are surfaced for action by operators\nMeet compliance and supply chain security requirements by improving the traceability of artifacts throughout the build, test, deploy process\nBuild a system that supports the vendor ecosystem to meet enterprises where they are in their CI journey, helping teams onboard faster and more easily transition into GitLab's next-generation CI tools\nMarket predictions\nIn three years the CI market will:\nView CI a critical capability for bridging between Dev, Sec & Ops to create truly high-performing DevSecOps organizations\nView package management an integrated requirement for any CI/CD platform\nHave CI emerge as a critical lever for operational excellence in businesses\nDemand a higher standard of security for the software build process\nUse AI in development best-practices and infrastructure automation - a new domain we intend to lead\nThemes\nThe CI Section is contributing actively to our\nYearly Themes\n. In FY25, we plan to execute on:\nDrive Use Case Adoption by delivering features that will amplify our paid usage as well as security and governance feature sets. The capabilities we expect to deliver in FY25 fall into two areas:\nContinuous Integration:\nMerge Trains to Complete\n,\nExternal CI Jobs\n,\nCache Service\n,\nGitLab Events\n,\nGitHub Actions compatibility\n,\nGitLab Secrets Manager\n,\nCI/CD Catalog to GA\n,\nCI/CD Insights\n, and\nRunner Fleet Dashboard to GA\nSeamless migration from Artifactory:\nMaven Dependency Proxy\n,\nnpm Dependency Proxy\n,\nContainer Registry for Self-Managed GA\n, and\nPyPI Dependency Proxy\nStrengthen our SaaS Deployments to Drive SAM Growth by delivering\nCustom Hosted Runners\nas the flagship capability.\nRunner SaaS will also extend reach by offering\nhosted ARM compute\n,\nGA of macOS runners\n,\nlarge macOS M2 runners\n, and\nGA of Windows Runners\n.\nWhy we do it\nMarket Landscape for Continuous Integration Tools\nThe total addressable market (TAMkt) for DevOps tools delivering against the Verify stage is $3.4B in 2024 and is expected to grow to $3.9B by 2026 (13.95% CAGR) and the Package stage is $1.39B in 2024 with growth to $2B in 2026 (18.30% CAGR)\n(i)\n.\nThe Verify and Package Stages combined represents a significant portion of GitLab's expanding addressable market (23% of 2024 TAMkt).\nGitLab CI Section Current Position\nThe CI Section has continued to maintain a superior experience for individual and small teams of software and DevOps engineers with market share increasing each month as evidenced in our\nVerify product performance indicators (internal)\nand\nPackage Product performance indicators(internal)\n.\nDelivering on the enterprise use case is steadily increasing as evidenced in our\nVerify Paid user-product performance indicators (internal)\nand\nPackage Paid user product performance indicators (internal)\n.\nTo continue this growth, the CI Section needs to invest more in the scaling requirements for large organizations,\ndeliver on solutions for helping organizations build secure and compliant software, as well as prioritize the usability of our core CI and Packaging capabilities.\nContinuous Integration Adoption Path\nWithin the context of GitLab usage, there are three triggers for when CI/Packaging is an appropriate next step:\nPushing code\nCreating a merge request\nAutomating repetitive tasks\nThe entry point for adoption is often through the\n.gitlab-ci.yml\n, or\ndocumentation\nand public forums.\nSome prerequisites for adopting CI are as follows:\nGitLab account\nFamiliarity with git\nGitLab project\nEnabled shared runners on GitLab SaaS OR configured self-managed runners\nSWOT\nThe CI vision has some significant strengths, weaknesses, opportunties, and threats to becoming the leading platform for building, testing, and optimizing code:\nSTRENGTHS\nInternal resources to exploit\nWEAKNESSES\nInternal Concerns to mitigate\nOPPORTUNITIES\nExternal resources to exploit\nTHREATS\nExternal Concerns to mitigate\nWe are one of the core adoption paths for our users at GitLab\nDeveloper first approach for experiences\nMeaningful insights from use of the DevOps platform\nLack of usage data-informed product decisions\nIneffectively managed Technical debt/bugs\nOver indexing to Enterprise Product Management\nReduce friction between all functions of development in a single-platform\nEmpower developers to manage operations, quality, and security by baking those activities into GitLab\nEmbrace platform engineering by making it easy to manage CI practices at scale\nCompetition is a concern for leaders in markets\nGitHub\nCircle CI\nJFrog\nHashiCorp\nPublic cloud providers\nNew market entrants\nCore competencies for CI Section\nAs organizations migrate to a\ncloud-first strategy\n, the CI Section must work to adapt to changing needs in scale, performance, and usability. The Verify and Package Stages must simultaneously support the trend toward microservices architecture and infrastructure as code while balancing the needs of monorepos.\nIn response to the rise in supply chain attacks, there is an ever-increasing pace of government-issued\ndirectives\n, standards, and regulations focused on the security and integrity of the software supply chain. This means we must add features and capabilities that enable customers to efficiently meet the most stringent secure CI/CD and software chains of custody requirements. To adequately deliver on these expectations of the Enterprise market, the Verify and Package Stages must practice the following principles:\nsecurity on-by-default\n,\ndeveloper productivity\n, and\ncost effectiveness\n.\nIn FY25, we will achieve this by adding support for:\nContinuous vulnerability scanning for the container registry\nImproved UX for signed container registry images\nCompetitive Landscape\nOur top competitors for the CI Section are GitHub and Jfrog. Secondarily, there are emerging competitors we are watching carefully such as JetBrains and Harness.io. In the install base, more specific to Verify Stage, we have strong users of Jenkins/Cloudbees, and for Package stage there is some usage of Nexus for Artifact management.\nSee the Package competitor\npage\nCI Section Jobs To Be Done\nSome of the core JTBDs for our three year vision and strategies are as follows:\nOnce I have a stable development and operations organization, I want to author a CI pipeline so others in my team can leverage CI to increase the efficiency of their tasks.\nWhen implementing CI/CD practices across the organization, I want to ensure consistency and standardization of CI/CD workflows to ensure compliance and to ease and increase CI/CD adoption across my teams.\nWhen I build my project, I want to review upstream dependencies and test result data, so that I can stop and review dependencies and test failures before bugs get into production.\nWhen analysing configured CI tasks at a higher level for my organization, I want an overall understanding of the historical data about them, so I can identify trends and opportunities for improvements.\nWhen administering runners for a GitLab instance or group, I need to perform general administrative functions as quickly and efficiently as possible.\nWhen securing an end-to-end software supply chain I want to access immutable historical verisons of builds, artifacts, dependencies, so that I can fulfill legal or regulatory requirements.\nWho is it for?\nWe identify the\npersonas\nthe CI Section features are built for. In order to be transparent about personas we support today and personas we aim to support in the future we use the following categorization of personas listed in priority order.\nð©- Targeted with strong support\nð¨- Targeted but incomplete support\nâ¬ï¸- Not targeted but might find value\nToday\nTo capitalize on the\nopportunities\nlisted above, the Ops section has features that make it useful to the following personas today.\nð©\nSasha - Software Developer\nð©\nDevon - DevOps Engineer\nð¨\nAllison - Application Ops\nð¨\nIngrid - Infrastructure Operator\nð¨\nSimone - Software Engineer in Test\nâ¬ï¸\nDelaney - Development Team Lead\nMedium Term (1-2 years)\nAs we execute our\n3-year strategy\n, our medium term (1-2 year) goal is to provide a single application that enables collaboration between cloud native development and platform teams.\nð©\nSasha - Software Developer\nð©\nDevon - DevOps Engineer\nð©\nAllison - Application Ops\nð¨\nIngrid - Infrastructure Operator\nð¨\nSimone - Software Engineer in Test\nð¨\nDelaney - Development Team Lead\nHow we do it\nCross-section efforts\nThere are several key cross-functional investments that will further our competitive position, security posture, and customer experience. The efforts are outlined below:\nArea\nTeams\nTarget Investment Year\nCI Steps\nPipeline Authoring; Runner Core\nFY24\nCI/CD Migration Tooling\nPipeline Execution; Pipeline Authoring\nNot Yet Defined\nCI/CD Visibility\nPipeline Execution; Observability; Runner Fleet\nFY25\nObservability and AI Optimization\nPipeline Execution; Observability; Runner Fleet\nFY26\nCaching\nPipeline Authoring; Runner Core\nFY25\nCI job queueing\nPipeline Execution; Runner Core; Runner SaaS?\nFY26\nRunner priority - routing jobs to a specific runner\nPipeline Execution; Runner Core; Runner SaaS?\nFY25\nCI log rendering user experience\nPipeline Execution; Pipeline Authoring; Runner Core\nFY25\nEvents\nPipeline Execution; Package; Runner SaaS\nFY25\nRunner Next (re-architecture of Runner Core)\nRunner Core\nFY24-FY25\nGCP/GitLab Console Integration\nRunner Core; Package\nFY24-FY25\nEdit this page\nView source",
  "html_file": "d00a1fbbf3bf5fbd.html"
}