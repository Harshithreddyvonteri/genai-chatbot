{
  "url": "https://about.gitlab.com/direction/software_supply_chain_security",
  "title": "Product Stage Direction - Software Supply Chain Security\n|\nGitLab",
  "headings": [
    "Product Stage Direction - Software Supply Chain Security",
    "On this page",
    "Stage Overview",
    "3 Year Stage Themes",
    "3 Year Strategy",
    "1 Year Plan",
    "Key Performance Metrics",
    "Target Audience",
    "Pricing",
    "Categories"
  ],
  "text": "Product Stage Direction - Software Supply Chain Security\n|\nGitLab\nProduct Stage Direction - Software Supply Chain Security\nMaintained by\n:\nYou are here:\nGitLab Direction\nProduct Stage Direction - Software Supply Chain Security\nMaintained by\n:\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nOn this page\nStage Overview\nGroups\n3 Year Stage Themes\nTop-down security controls\nNo compromises with compliance\nCoordinate governance across GitLab\nEmphasize usability and convention over configuration\nSecure the software supply chain\n3 Year Strategy\n1 Year Plan\nWhat We're Not Doing\nKey Performance Metrics\nTarget Audience\nToday\nMedium Term (1-2 years)\nPricing\nFree\nPremium\nUltimate\nCategories\nSystem Access\nPermissions\nAudit Events\nCompliance Management\nDependency Management\nSoftware Supply Chain Security\nInsider Threat\nInstance Resiliency\nSecrets Management\nArtifact Security\nRelease Evidence\nUser Profile\nOrganization-wide security vulnerability, policy, compliance, and user management\nÂ\nÂ\nSection\nSec\nContent Last Reviewed\n2025-04-15\nContent Last Updated\n2025-04-15\nThe Software Supply Chain Security (SSCS) stage helps organizations to reduce their overall risk by applying appropriate management and governance oversight across the entire DevSecOps lifecycle. SSCS provides management tools to secure the GitLab platform itself by restricting access to authenticated users and ensuring they are provisioned with the least amount of required privileges. To help manage and monitor risk levels, the SSCS stage provides visibility into user permissions and activity; project dependencies; security findings; and adherence to compliance standards. This visibility is then coupled with enforcement capabilities to proactively prevent risks by automating compliance and securing the software supply chain.\nSoftware Supply Chain Security\nStage Overview\nThe Software Supply Chain Security (SSCS) stage provides the capabilities necessary to meet security and compliance requirements for organizations at any scale.\nGroups\nThe SSCS Stage is made up of four groups:\nAuthentication\n- Complete user lifecycle management and assurance that all points of authentication into GitLab are performed securely.\nAuthorization\n- Ensure that users have roles and permissions that balance security and ease of performing their job within GitLab.\nCompliance\n- Provide users with the tools and features necessary to achieve visibility of checks, violations and audit events across the DevSecOps lifecycle.\nPipeline Security\n- Protect access to secrets and provide verifiable evidence that artifacts were created securely.\n3 Year Stage Themes\nTop-down security controls\nSecurity teams need centralized management for their security and compliance workflows. Features such as user management, compliance labels, security policies, and the vulnerability and dependency lists need to allow for centralized management that applies across all of an organization's projects.\nNo compromises with compliance\nSSCS capabilities will ensure that compliance regulations are strictly followed in a way that they cannot be bypassed without the proper approvals. This includes providing the necessary tools to audit, monitor, and manage the compliance controls that are enforced.\nCoordinate governance across GitLab\nSSCS capabilities will serve as a connection point for a seamless workflow spanning across the DevSecOps lifecycle. By enabling collaboration between types of users, SSCS can help solidify the advantages GitLab has to offer as a single application. For example, these areas might include the following:\nFacilitating a continuous experience for scanning across repositories, registries, and production environments.\nCentralizing security and compliance controls across GitLab, including merge request approvals, anomalous user activity, and anomalous pipeline/job activity.\nLeveraging data about production environment configuration to reduce false positives in scanners.\nLeveraging data about vulnerabilities in development to inform and drive threat mitigation in production.\nEmphasize usability and convention over configuration\nSSCS capabilities will be\npre-configured with reasonable defaults\nout-of-the-box whenever possible. When not possible, they will be easy to configure either through code or through a guided UI workflow that is friendly to users without coding knowledge. Regardless of how the capabilities are configured, they will be stored as code for ease of management.\nFor example, GitLab's\nsecurity policy editor\nsupports editing policies in both a\nrule mode\nand in\nyaml mode\n.\nSecure the software supply chain\nSSCS capabilities allow organizations to lock down every aspect of their supply chain. This includes securely authenticating users into GitLab, hardening the GitLab platform itself, and verifying every step along the DevSecOps lifecycle as code is created, built, and deployed.\n3 Year Strategy\nBuilding on those themes, some specific capabilities that we envision developing over the next 3 years include the following:\nAnti-Abuse\nAdaptive user-based rate limiting based on a trust score.\nInsider threat policies to allow organizations to monitor and reduce risk.\nMonitoring and alert system for new URLs in a pipeline network.\nAuthentication\nCentralized management of users and tokens at scale, including visibility into access logs and automated notifications when credentials are required to be rotated.\nReduced friction from authentication flows across GitLab including support for new methods of authenticating.\nEnforcement of authentication policies to increase security while minimizing disruption to automated workflows.\nAuthorization\nExtended support for the Principle of Least Privilege to tokens in GitLab.\nImproved management tools for custom roles as well as support for additional custom permissions.\nMore robust logic before granting access to a resource - consider not only the role of the user, but also other attributes such as security policies, trust score, etc.\nCompliance\nAdded support to view how projects adhere to an expanded list of compliance and regulatory requirements.\nSupport for creating customized frameworks, with related requirements and checks to meet individual organizational needs.\nExpanded support for out-of-the-box configurations that can be used to quickly bring projects into compliance.\nPipeline Security\nSupport for a GitLab-native secrets manager.\nNew tools to support SLSA L3 and automate generation of SLSA L3 compliant attestations.\n1 Year Plan\nOver the next 12 months, the SSCS stage is focused on addressing critical needs for security and compliance teams. Some of the key initiatives include the following:\nCustom role improvements\n- additional permissions, better management (bulk role assignment), support for LDAP sync.\nCompliance standards adherence report\n- added support for requirements and checks as well as support for some customization.\nEnterprise token management\n- gitlab.com support for the Credential Inventory, additional tools for managing access logs and for rotating tokens\nGitLab Secrets Manager\n- a GitLab-native secrets manager that can be used to keep sensitive data secure.\nExpanded token security\n- More granular permissioning for tokens across GitLab.\nWhat We're Not Doing\nAlthough we will likely address many of these areas in the future (as described above in our\n3 year strategy\n), we are not planning to make progress on the following initiatives in the next 12 months:\nAttempting to build our own Security Information and Event Management (SIEM) system\nBuilding analytics or algorithms to auto-tune or auto-recommend policy improvements\nKey Performance Metrics\nThe following metrics are used to evaluate the success of the Govern stage:\nAnti-Abuse: Monthly active users are not relevant for this group. Instead success is measured in the observed abuse rate combined with the impact to paid conversion.\nAuthentication\nGroup Monthly Active Users\n: This is the total number of users in a paid SAML group.\nAuthorization\nGroup Monthly Active Users\n: The number of unique users who are assigned to a custom role.\nCompliance\nGroup Monthly Active Users\n: This is the total number of unique users viewing the Audit Events, Compliance Dashboard, or Credential Inventory pages in the last 28 days of the given month.\nPipeline Security: TBD\nNote: We do not yet have a single metric to track the success of the Govern stage as a whole. This is being tracked in\nthis issue\n.\nTarget Audience\nGitLab identifies who our DevSecOps application is built for utilizing the following categorization. We list our view of who we will support when in priority order.\nð©- Targeted with strong support\nð¨- Targeted but incomplete support\nâ¬ï¸- Not targeted but might find value\nToday\nTo capitalize on the opportunities listed above, the Govern Stage has features that make it useful to the following personas today.\nð© Developers / Development Teams\nð© Application Security Teams\nð¨ï¸ Compliance Specialists / Manager\nð¨ï¸ Legal Teams\nð¨ Infrastructure Security Teams\nMedium Term (1-2 years)\nAs we execute our\n3 year strategy\n, our medium term (1-2 year) goal is to provide a single DevSecOps application that enables SecOps to work collaboratively with DevOps and development to mitigate vulnerabilities in production environments.\nð© Developers / Development Teams\nð© Application Security Teams\nð© Compliance Specialists / Manager\nð© Legal Teams\nð¨ Infrastructure Security Teams\nPricing\nSSCS is focused on providing governance and compliance features that span across the DevSecOps lifecycle. SSCS's tiering strategy aligns with the GitLab approach of selecting the tier based on\nwho cares most about the feature\n. Because Executives generally care most about governance features, it is expected that most SSCS features will land in the Ultimate tier.\nFree\nThis tier is the primary way to increase broad adoption of the SSCS stage, as well as encouraging community contributions and improving security across the entire GitLab user base.\nAs a general rule of thumb, features will fall in the Free tier when they meet one or more of the following criteria:\nThe feature is highly useful for an individual with a few small projects rather than meeting the needs of an organization or enterprise that is operating at scale.\nThe feature is provided by an integration with an open source project rather than being natively developed by GitLab.\nPremium\nThis tier is not a significant part of SSCS's pricing strategy; however, a few features features that primarily appeal to Directors rather than Executives may fall into the Premium tier. One example of this is our audit event functionality that is available in this tier.\nUltimate\nThis tier is the primary focus for the SSCS stage as most SSCS features enable executives to ensure that their organization meets compliance requirements and maintains an acceptable security posture.\nAs a general rule of thumb, features will fall in the Ultimate tier when they meet one or more of the following criteria:\nThe feature is focused on enabling an organization or enterprise to operate at scale rather than an individual with a few small projects.\nThe feature is natively developed by GitLab rather than being provided by an open source project.\nCategories\nSystem Access\nSystem Access provides tools to authenticate through all points of GitLab (UI, CLI, API). These tools allow you to configure what an individual/process has access to once they authenticate, determined by their role. GitLab integrates with several OmniAuth providers, LDAP, SAML, and more.\nDocumentation\nâ¢\nDirection\nPermissions\nGitLab provides various permissions and roles in order to evaluate what access or rights an identity should have in an environment. Custom roles can also be created to allow an organization to create user roles with the precise privileges and permissions desired.\nDocumentation\nâ¢\nDirection\nAudit Events\nAudit Events track important actions within GitLab along with who performed the actions and the time in which they occurred. These events can be used in a security audit to assess risk, strengthen security measures, respond to incidents, and adhere to compliance. This category is at the \"viable\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nCompliance Management\nCompliance Management provides customers with the tools necessary to ensure and manage their compliance programs. Compliance Workflow Automation is provided to enforce custom pipelines to run on projects which have specific compliance needs. For compliance oversight, the Compliance Center provides a central location for compliance teams to manage their compliance standards adherence reporting, violations reporting, and compliance frameworks for their group. This category is at the \"viable\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nDependency Management\nDependency Management allows users to review project/group dependencies and key details about those dependencies, including their vulnerabilities, licenses, and packager. This category is at the \"viable\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nSoftware Supply Chain Security\nGitLab allows you to secure your software supply chain including push rules, code scanning, SBOM management, and enforcement of compliance policies. This category is at the \"viable\" level of maturity.\nPriority: high â¢\nLearn more\nâ¢\nDocumentation\nâ¢\nDirection\nInsider Threat\nInsider Threat identifies attacks and high risk behaviors by correlating different data sources and observing user behavioral patterns\nDirection\nInstance Resiliency\nInstance Resiliency provides tools to prevent malicious activity from occurring within GitLab Instances. These tools include external pipeline validation allowing you to use an external service to validate a pipeline before it is created.\nDocumentation\nâ¢\nDirection\nSecrets Management\nSecure and protect access to secrets, such as API keys and passwords, to ensure that sensitive data is protected throughout your development process. This category is at the \"viable\" level of maturity.\nDocumentation\nâ¢\nDirection\nArtifact Security\nArtifact Security focuses on the hardening of artifacts, to ensure the authenticity of artifacts.\nDocumentation\nâ¢\nDirection\nRelease Evidence\nRelease Evidence provides assurances and evidence collection that are necessary for you to trust the changes you're delivering. When a release is created, GitLab takes a snapshot of relevant release data as evidence that it occurred. This category is at the \"complete\" level of maturity.\nDocumentation\nâ¢\nDirection\nUser Profile\nManaging your user profile and configuring what will be visible to others.\nPriority: low â¢\nDocumentation\nâ¢\nDirection\nEdit this page\nView source",
  "html_file": "e41b9da6494eeb00.html"
}