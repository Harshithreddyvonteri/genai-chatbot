{
  "url": "https://about.gitlab.com/direction/application_security_testing",
  "title": "Product Stage Direction - Application Security Testing\n|\nGitLab",
  "headings": [
    "Product Stage Direction - Application Security Testing",
    "On this page",
    "Overview",
    "3-year strategy",
    "3-year themes",
    "1-year plan",
    "Pricing",
    "Categories"
  ],
  "text": "Product Stage Direction - Application Security Testing\n|\nGitLab\nProduct Stage Direction - Application Security Testing\nMaintained by\n:\nYou are here:\nGitLab Direction\nProduct Stage Direction - Application Security Testing\nMaintained by\n:\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nOn this page\nOverview\nGroups\n3-year strategy\n3-year themes\nScan everything, but don't get in the way\nMake better risk decisions with richer context\nTake action, not just inventory\n1-year plan\nPricing\nUltimate\nFree and Premium\nCategories\nSAST\nSecret Detection\nCode Quality\nDAST\nAPI Security\nFuzz Testing\nSoftware Composition Analysis\nContainer Scanning\nGitLab Advisory Database\nAttack Emulation\nSecurity scanning that AppSec teams trust, and developers love\nApplication Security Testing\nOverview\nThe Application Security Testing (AST) stage helps customers find vulnerabilities in applications before they reach production.\nWe focus on developing scanning capabilities to find these vulnerabilities, then we work closely with the\nSecurity Risk Management\nand\nSoftware Supply Chain Security\nstages to ensure that organizations can take action on the vulnerabilities our scanners detect.\nGitLab was named as a\nChallenger in the 2022 Magic Quadrant for Application Security Testing\n.\nGroups\nThe AST stage is made up of five groups:\nStatic Analysis\n: Assess applications and services for vulnerabilities and weaknesses by scanning source code.\nSecret Detection\n: Assess code to prevent leaked secrets, before and after commit.\nDynamic Analysis\n: Assess running applications and services for vulnerabilities and weaknesses by analyzing application behavior at runtime.\nComposition Analysis\n: Assess applications and services by analyzing your dependencies and containers for vulnerabilities and weaknesses. Confirm that only approved licenses are in use.\nVulnerability Research\n: Lead the ideation and evolution of GitLab's security capabilities via the application of innovative security research and emerging technologies. Curate high-quality detection rules across GitLab's suite of security analyzers.\n3-year strategy\nCustomer needs for Application Security Testing (AST) are evolving rapidly, driven by the increasing pace and complexity of modern software development and the growing sophistication of security threats.\nWe see at least two major themes in the AST market today:\nDeveloper-centricity:\nAnalyst firms like Gartner and Forrester highlight a \"seismic shift\" towards more\nintegrated, developer-centric solutions\nthat seamlessly fit into existing workflows.\nOrganizations are prioritizing tools that offer\nhigh accuracy\n,\nminimal friction\n, and\nactionable insights\nso developers can cut through the noise and focus on impactful changes.\nThere is a growing emphasis on\ncontinuous scanning\nacross the entire software development lifecycle (SDLC), enabling\nreal-time security feedback and remediation\nand aligning with the broader industry movement toward \"shifting security left\".\nPlatforms. The AST market has also continued a long-term trend toward a more bundled,\nplatform-oriented\nmodel, meaning that organizations can increasingly buy all of their key capabilities from a single vendor.\nIn the next 3 years, we expect the AST market will:\nShift from standalone security\ntools\nto security\ncapabilities\nthat are deeply embedded in development platforms and IDEs, making security testing a streamlined part of the development workflow.\nIncreasingly emphasize AI-enhanced testing that moves beyond pattern matching and understands application context and business logic, dramatically reducing false positives while catching complex vulnerabilities.\nDeliver more actionable security insights by synthesizing context across different scan types in unified platforms and interfaces.\nMove beyond just\nfinding\nvulnerabilities, toward more actively helping\nfix\nthem through automated patches and intelligent code suggestions.\nAs a unified, AI-powered DevSecOps platform, GitLab is well-suited to deliver what the market needs. We will continue to invest in our AST capabilities to enable security teams to scale their impact and achieve their security goals.\n3-year themes\nScan everything, but don't get in the way\nThe increasing pace of modern software development demands that we push security testing further left than before, integrating it into existing workflows rather than forcing teams to adapt their processes or context-switch to separate tools.\nMoving security scanning directly into the IDE and pre-commit stages enables developers to catch vulnerabilities, exposed secrets, and dependency issues before they even enter the codebase, dramatically reducing remediation costs and team overhead.\nFor this proactive approach to succeed, security tools must provide clear, actionable feedback that developers can understand without deep security expertise, including precise code locations and step-by-step remediation guidance with examples of secure coding patterns.\nBy making security both approachable and efficient, we help organizations build a true DevSecOps culture where security becomes a natural part of every developer's daily work, transforming how organizations approach application security while significantly reducing the burden on overburdened security specialists.\nTo achieve this theme, GitLab will pursue capabilities like:\nDelivering scan results at the speed of software development by offering:\nReal-time scanning for SAST and SCA vulnerabilities and leaked secrets.\nIntelligent incremental scans that avoid re-scanning parts of the application that haven't changed.\nIdentifying runtime security issues early in the development phase with DAST unit tests and by running DAST scans in development environments like `localhost`.\nIntegrating Secret Detection scanning across the platform to prevent leaked secrets in every written place like descriptions and comments on issues, epics, and merge requests, wikis, and more.\nAutomatically scanning for CVEs in repositories and registries for dependencies, packages, and containers.\nDetecting malicious packages and prevent them from entering your software supply chain\nMake better risk decisions with richer context\nIn today's complex security landscape, presenting raw vulnerability data without context can lead teams to work on less impactful tasks or accept risks without realizing the consequences. That doesn't work well for anyone.\nBy combining multiple security scanning methods and leveraging more advanced techniques like AI and machine learning, we can provide deeper context and more accurate risk assessments for each security finding. This intelligence-driven approach helps teams cut through the noise of security alerts, focusing remediation efforts on vulnerabilities that pose the greatest actual risk to their applications. Integration across different security disciplines creates a comprehensive view of each vulnerability's impact and exploitability, enabling more confident decision-making about when and how to remediate issues.\nThe power of machine learning transforms security scanning from a simple detection tool into an intelligent advisory system that helps teams make informed, strategic decisions about their security posture and resource allocation.\nTo achieve this theme, GitLab will pursue capabilities like:\nIntegrating detection capabilities across scanning disciplines to provide more actionable outcomes.\nUsing SAST for advanced tasks like reachability analysis and API discovery, so we can enrich DAST and other scanning processes.\nCorrelating and deduplicating scanning outputs to reduce noise, uncover the most urgent exploitable issues, and focus attention on the most impactful remediations.\nLeveraging AI/ML to reduce false positives by understanding normal code structure, commit history, and runtime behavior.\nTake action, not just inventory\nWhen tools identify vulnerabilities but don't provide a clear path to resolution, organizations end up exposed to security risks for longer than necessary. Worse still, as backlogs of security issues grow, organizations end up accepting risks without realizing itâan untriaged and unresolved vulnerability is one that's tacitly accepted.\nModern security tools must go beyond detection to provide automated remediation pathways that help both developers and security teams efficiently address vulnerabilities.\nDevelopers can make larger impacts when they receive automated merge requests for dependency updates, intelligent suggestions for fixing vulnerable code, and clear guidance on implementing secure alternatives directly within their development environment.\nSecurity professionals benefit from automated workflows that can immediately revoke exposed secrets, quarantine vulnerable dependencies, and orchestrate large-scale security updates across multiple repositories without manual legwork.\nAs applications and security threats grow more complex, effective security programs have to rely on automation to scale up. By transforming security findings into automated actions, intelligent tools help organizations dramatically reduce their mean time to remediation while allowing both development and security teams to focus on strategic work rather than routine maintenance.\nTo achieve this theme, GitLab will pursue capabilities like:\nAutomating remediation actions like revoking exposed secrets, blocking insecure code, and upgrading vulnerable dependencies.\nContinuing to invest in GitLab Duo Vulnerability Explanation and Vulnerability Resolution to produce better recommendations.\nProviding automated system hardening, such as removing dependencies that are not in use.\nImproving AST scan results so that they are easier to understand and act on.\n1-year plan\nTo see what we're planning, check the individual\ngroup\nor\ncategory\ndirection pages.\nPricing\nApplication Security Testing pricing and tiering reflects GitLab's overall\npricing model\n.\nUltimate\nWe focus our efforts primarily on Ultimate.\nAdvanced security is\nan Ultimate pricing theme\nand helps customers deliver on organization-wide security and compliance priorities.\nAdvanced features, including technology developed in-house at GitLab and technology we've\nacquired\n, are available only in Ultimate.\nFree and Premium\nWe make a subset of our AST scanners available in all tiers (including Free).\nWe typically do this when the scanners are themselves open-source.\nWe do not specifically focus on Premium.\nCategories\nSAST\nScans your application source code and binaries to spot potential vulnerabilities before deployment. SAST supports scanning a variety of different programming languages and automatically chooses the right analyzer even if your project uses more than one language. Vulnerabilities, additional data, and solutions are shown in-line with every merge request. Scanner results are collected and presented as a single report. This category is at the \"complete\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nSecret Detection\nScans your repository to help prevent your secrets from being exposed. Secret Detection scanning works on all text files, regardless of the language or framework used. Code pushed to a remote Git branch can be rejected if a secret is detected. This category is at the \"viable\" level of maturity.\nPriority: medium â¢\nDocumentation\nâ¢\nDirection\nCode Quality\nAnalyzes your source code quality and complexity. This helps keep your projectâs code simple, readable, and easier to maintain. This category is at the \"minimal\" level of maturity.\nDocumentation\nâ¢\nDirection\nDAST\nRuns automated penetration tests to find vulnerabilities in web applications and APIs as they are running. DAST can run live attacks against a Review App, an externally deployed application, or an active API. Scans can be run for every merge request, on a schedule, or even on-demand. DAST supports user inputted HTTP credentials to test private areas of your application. Vulnerabilities, additional data, and solutions are shown in-line with every merge request. Scanner results are presented as a single report. This category is at the \"complete\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nAPI Security\nSecures and protects web Application Programming Interfaces from unauthorized access, misuse, and attacks. Tests for known vulnerabilities by performing penetration testing of APIs with DAST. Finds unknown vulnerabilities by performing Fuzz Testing of web API operation parameters.Users can provide credentials to test authenticated APIs. Vulnerabilities, additional data, and solutions are shown in-line with every merge request.. Scanner results are collected and presented as a single report. This category is at the \"complete\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nFuzz Testing\nSends random inputs to an instrumented version of your application in an effort to cause unexpected behavior in order to identify a bug that needs to be addressed. Helps you discover bugs and potential security issues that other QA processes may miss. This category is at the \"complete\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nSoftware Composition Analysis\nAnalyzes external dependencies within your application for known vulnerabilities on each CI/CD code commit. Vulnerabilities, additional data, and solutions are shown in-line with every merge request. Scanner results are collected and presented as a single report. Upon code commit, project dependencies are searched for approved and denied licenses defined by per project custom policies. Software licenses are identified if they are not within policy and are shown in-line for every merge request for immediate resolution. This category is at the \"viable\" level of maturity.\nPriority: high â¢\nDocumentation\nâ¢\nDirection\nContainer Scanning\nScans your container images for known vulnerabilities within the application environment. Image contents are analyzed against public vulnerability databases.Security findings, additional data, and solutions reported in-line with every merge request along with additional data including solutions. Results are presented as a single report. Container Scanning is considered part of Software Composition Analysis. This category is at the \"viable\" level of maturity.\nPriority: medium â¢\nDocumentation\nâ¢\nDirection\nGitLab Advisory Database\nThe GitLab Advisory Database serves as a repository for security advisories related to software dependencies. GitLab integrates the advisory database with its proprietary and open-source application security scanning tools. In order to maintain the efficacy of those scanners, we strive to keep their underlying vulnerability databases up-to-date.\nPriority: high â¢\nDirection\nAttack Emulation\nContinuously assess your applications and services are not vulnerable to security threats through automated, real-world emulated scenarios to identify weaknesses in your attack surface\nPriority: low\nLast Reviewed: 2025-02-20\nLast Updated: 2025-02-20\nEdit this page\nView source",
  "html_file": "61bd3f1fbe9a529a.html"
}