{
  "url": "https://handbook.gitlab.com/handbook/values",
  "title": "GitLab Values | The GitLab Handbook",
  "headings": [
    "GitLab Values",
    "CREDIT",
    "ü§ù Collaboration",
    "üìà Results for Customers",
    "‚è±Ô∏è Efficiency",
    "üåê Diversity, Inclusion & Belonging",
    "üë£ Iteration",
    "üëÅÔ∏è Transparency",
    "Why have values",
    "Five dysfunctions",
    "Operating principles",
    "How to scale the business while preserving GitLab values?",
    "Why our values are public",
    "Hierarchy",
    "Updating our values",
    "How do we reinforce our values",
    "What to do if values aren‚Äôt being lived out",
    "Permission to play",
    "Playing politics is counter to GitLab values",
    "Values make choices",
    "What is not a value",
    "Questions from new team members",
    "Mission",
    "Mitigating Concerns",
    "GitLab Values Quiz"
  ],
  "text": "GitLab Values | The GitLab Handbook\nThe Handbook\nGitLab Values\nAbout GitLab\nAMAs\nBeing a public company\nCadence\nE-Group offsite\nBe clear about sticky bears\nE-Group Weekly\nFamily and Friends Day\nGeneral guidance to OKRs\nOverview of Objectives and Key Results (OKRs)\nOKRs in GitLab\nGitLab All-Company Meetings\nGitLab Culture\nAll Remote\nA complete guide to the benefits of an all-remote company\nAdopting a self-service and self-learning mentality\nAll-Remote and Remote-First Jobs and Remote Work Communities\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nAll-Remote Compensation\nAll-Remote Hiring\nAll-Remote Learning and Development (L&D)\nAll-Remote Management\nAll-Remote Meetings\nAll-Remote Pick Your Brain\nBuilding and reinforcing a sustainable remote work culture\nCombating burnout, isolation, and anxiety in the remote workplace\nCommunicating effectively and responsibly through text\nConsiderations for in-person interactions in a remote company\nConsiderations for transitioning a company to remote\nConsiderations for working while traveling\nGitLab All-Remote Course (Remote Work Foundation)\nGitLab for Remote Teams\nGitLab Meeting Best Practices: Live Doc Meetings\nGitLab's Guide to All-Remote\nRemote Guide for Design Teams\nRemote Guide for Finance Teams\nRemote Guide for Legal Teams\nRemote Guide for People Operations\nHead of Remote: how to hire, job postings, job description, courses, and certifications\nHistory of all-remote work\nHow do you collaborate and whiteboard remotely?\nCollaborative Whiteboard Configurations\nHow do you conduct interviews remotely?\nHow to be a great remote manager - the complete guide\nHow to build a remote team\nHow to contribute to GitLab's all-remote guides\nHow to create the perfect home office setup for remote working\nHow to embrace asynchronous communication for remote work\nHow to evaluate a remote job\nHow to repurpose office space in a remote world\nHow to use forcing functions to work remote-first\nHow values contribute to an all-remote environment\nHybrid-Remote: understanding nuances and pitfalls\nInformal Communication in an all-remote environment\nOur long-term vision for remote work\nOut of the office Report (2020)\nParenting as a remote worker\nPeople: adopting a remote lifestyle\nRemote work emergency plan: What to do (and where to start)\nRemote work events: conferences and summits\nRemote Work Glossary\nRemote Working Experiences\nRemote-work resources\nRemote/work-from-home starter guide\nScaling an all-remote team\nThe 10 models of remote and hybrid work\nThe complete guide to asynchronous and non-linear working\nThe complete guide to remote onboarding for new-hires\nThe complete guide to starting a remote job\nThe definitive guide to all-remote work and its drawbacks\nThe definitive guide to remote internships\nThe GitLab Test ‚Äî 12 Steps to Better Remote\nThe importance of a handbook-first approach to communication\nThe phases of remote adaptation\nThe Remote Work Report 2021\nWhat not to do when implementing remote: don't replicate the in-office experience remotely\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nWork-From-Home Field Guide\nCross-Culture Collaboration Guide\nDiversity, Inclusion & Belonging\nGitLab Diversity, Inclusion, and Belonging 2023\nAdvisory Group Members\nBeing Inclusive\nCEO Diversity Inclusion and Belonging Statement\nDIB Working Group\nInclusive Practices\nDiversity Inclusion & Belonging Communications Strategy\nEngineering Initiatives\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nGoals\nIdentity data\nLeadership Diversity Inclusion & Belonging Council\nNeurodiversity in the Workplace Short Course\nNeurodiversity Resources\nSpeaker Series\nSponsorship Program Guide\nTalent Acquisition Initiatives\nThe Ally Lab\nTMAG - Generational Understanding\nTMRG - API (Asian-Pacific Islander)\nTMRG - Black@GitLab\nTMRG - Caregivers\nTMRG - Gente\nTMRG - GitLab Disability & Neurodivergence\nTMRG - GitLab Pride\nThe GitLab Pride Mentorship\nTMRG - GitLab Women\nActivate your Agile Career\nThe GitLab Mentorship Program hosted by the Women TMRG\nTMRG - Global Voices\nTMRG - MIT - Minorities in Tech\nAdvanced Software Engineering Course - Morehouse College\nMinorities in Tech Mentoring Program\nMinorities in Tech Mentoring Program: Projects\n2020 Projects\nMinorities in Tech Mentoring Program: Thank You\nMIT Mentoring Program Structure\nTMRG - Team Member and Advocacy Resource Group Guide\nUnconscious bias\nGitLab CEO 101\nGitLab Events Code of Conduct\nGitLab Songbook\nGitLab Summit\nLeaders at Summit\nPrevious GitLab Contributes & Summits\nGitLab Top Team Member\nGitLab Environmental, Social, and Governance (ESG)\nGitLab licensing technology to independent Chinese company FAQ\nGitLab Mission\nGitLab Purpose\nGitLab Vision\nHistory of GitLab\nInfrastructure Standards\nInfrastructure Helpdesk and Support\nInfrastructure Labels and Tags\nInfrastructure Standards - Policies\nInfrastructure Standards - Realms\nEngineering Infrastructure Realm\nEngineering Infrastructure Realm Labels and Tags\nGitLab.com SaaS Realm\nGitLab.com SaaS Realm Labels and Tags\nInfrastructure Shared Services Realm\nInfrastructure Shared Services Realm Labels and Tags\nIT Realm\nIT Realm Labels and Tags\nSandbox Cloud Realm\nSandbox Realm Labels and Tags\nSecurity Realm\nSecurity Realm Labels and Tags\nInfrastructure Standards - Tutorials\nInfrastructure Groups Tutorials\nInfrastructure Standards - Tutorials - Group Access Request\nInfrastructure Realm Tutorials\nInfrastructure Standards - Tutorials - Realm Creation Request\nInspired by GitLab\nKPIs\nMeet Our Team\nOnly Healthy Constraints\nOrganizational Structure\nOur stewardship of GitLab\nPricing model\nQuote to Cash\nStill a Startup\nWorking Groups\nAccount Escalation Process\nAI Integration\nAI Security Working Group\nAPI Vision\nArchitecture Kickoff Working Group\nAutomotive Development\nBounded Contexts Working Group\nCategory Leadership Working Group\nChina Service Working Group\nCI Queue Time Stabilization Working Group\nCI/CD Build Speed (time-to-result)\nClickHouse Working Group\nCloud Native Tools Strategy Working Group\nCommercial & Licensing Working Group\nContinuous Scanning Working Group\nContributor Growth\nCross-Functional Prioritization\nCustomer Use Case Adoption\nDashboards\nData POC Working Group\nDatabase Scalability Working Group\nRead-Mostly Data\nTime-Decay Data\nDedicated Cross-Functional Working Group\nDemo & Test data working group\nDevelopment Metrics Working Group\nDevSecOps Adoption\nDigital SMB + SA Working Group\nDisaster Recovery Working Group\nDogfood Plan Working Group\nEcommerce Motion\nEmerging Talent\nEngineering Career Matrices Working Group\nEngineering Internship\nEnterprise Market Leadership Working Group\nEvent Stream Working Group\nExpense Management Working Group\nExperimentation Working Group\nFeature Flag usage Working Group\nFeature Testing Working Group\nFedRAMP Execution Working Group\nFrontend Observability Working Group\nFrontend Vision Group\nFY21 Product Engagement Actions\nGCP Partnership Working Group\nGitHost Migration Working Group\nGitLab Administration Working Group\ngitlab-ui (CSS and Reusable Components)\nGitLab.com Cost Working Group\nGitLab.com Revenue Working Group\nGitLab.com SAAS Data Pipeline\nGTM Product Usage Data\nHigh Performing Teams and Product Division\nIACV and Delta ARR\nIC Gearing Working Group\nImprove Ops Quality\nIncident Response Lifecycle\nInternship Pilot Working Group\nIsolation Working Group\nFault Tolerance\nIssue Prioritization Framework\nKeep Around Refs Working Group\nKubernetes Migration Working Group\nLeading Organizations Working Group\nLearning Experience Working Group\nLearning Restructure Working Group\nLicensing and Transactions Improvements Working Group\nLighthouse Metric Definitions\nLog Aggregation Working Group\nLogging Working Group\nMaintainership\nMajor Releases Working Group\nMerge Request Report Widgets Working Group\nMinorities in Tech - Pilot Mentoring Program Working Group\nMLOps Working Group\nModern Applications Go-To-Market\nNext Architecture Workflow\nObject Storage Working Group\nPerformance Indicator Working Group\nPipeline Validation Service Operations Working Group\nProduct Accessibility Group\nProduct Analytics Working Group\nProduct Career Development Framework Working Group\nProduct Development Flow Working Group\nPurchasing Reliability Working Group\nPython Stewardship Working Group\nRate Limit Architecture Working Group\nReal-Time Working Group\nReal-Time Design Document\nRevenue Globalization Working Group\nRuntime Update Process\nSec DB Decomposition Working Group\nSecure Offline Environment Working Group\nSelf-managed Scalability Working Group\nSharding Working Group\nSimplify Groups & Projects Working Group\nSingle Codebase Working Group\nSoftware Supply Chain Security Working Group\nSOX PMO\nTalent Acquisition SSOT\nTask Groups\nBootstrapVue Removal Group\nCSS Utilities Task Group\nGitLab UI @vue/compat Compatibility Task Group\nVue 3 Quarantined Tests Compatibility Task Group\nVue 3 Router 4 Test Compatibility Task Group\nTeamOps Sales and Marketing\nTiering Working Group\nToken Management Working Group\nTransient bugs\nUpgrade improvements\nUpstream Diversity Working Group\nUser Journey Map Working Group\nVue.js 3 Migration Working Group\nwebpack\nAbout the Handbook\nContent Websites\nContributing to the Handbook\nEditing the Handbook\nEdit your team page entry\nPractical Handbook Editing Tips\nGitLab Handbook Usage\nHandbook Changelog\nHandbook Direction\nHandbook Escalation\nHandbook Style Guide\nAcquisitions Handbook\nAcquisition Process\nAcquisition Integration\nAcquisition Process: Communications\nBoard of Directors and Corporate Governance\nCEO\nCEO Shadow Program\nOffice of the CEO\nEmbody Team\nJiHu Support\nJiHu contribution process\nJiHu guidelines for database changes\nJiHu Security Review Process\nJiHu validation pipelines\nRelease Certification\nOffice of the CEO READMEs\nStella Treas's README\nYin Yu's README\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nCustomer Experience Journey Research\nExpansion Journey: Premium to Ultimate Up-tier\nOur Team & Partners\nCustomer Success\nAccount Team\nAPJ Customer Success\nCommercial Sales - Customer Success\nCommercial Renewal Process\nCustomer Health Scoring\nCustomer Success Management Handbook\nAccount Engagement\nStrategies for Non-Engaged Customers\nAccount Handoff CSM-to-CSM Checklist\nAdoption Landing Zones\nAI/ML Adoption Landing Zone\nCI Adoption Landing Zone\nDevSecOps Adoption Landing Zone\nCadence Calls\nCSM and Support Interaction\nCSM Aspiring Leaders Program\nCSM Development\nCSM Executive Relationships\nCSM FY23 Big Rocks\nCSM Internship Program\nCSM Issue Tracking and OKRs\nCSM Manager Handbook\nAccount Risk & Renewal Management\nCSM Quarterly Business Review\nRoles\nCSM Operations Manager\nCSM November 2021 Engagement Survey\nCSM Onboarding\nMeeting Shadowing\nCSM Paid Time Off\nCSM Quaterly Business Reviews (QBRs)\nCSM Responsibilities and Services\nCSM Infrastructure Upgrade Coordination\nCSM Rhythm of Business\nCSM Strategies for Mitigating Risk In Customer Accounts\nHelping Customers Decide to Migrate to SaaS\nCustomer Health Assessment and Management\nCustomer Onboarding\nCustomer Renewal Tracking\nCustomer Success Escalations Process\nInfrastructure Escalations\nCustomer Success READMEs\nAleesha Dawson's README\nOliver Falk's README\nCustomer Success Teams\nAMER CSMs\nAPJ CSMs\nCSEs\nCSE Content\nCSE Direct Responsible Individuals (DRI)\nCSE Operating Rhythm\nCSE Playbooks page\nCSE Team Member Onboarding\nCustomer Onboarding Best Practices\nCustomer Success Architects (CSA)\nEMEA CSMs\nDevSecOps Adoption Tracking in Gainsight\nDigital Customer Programs\nEngaging with Partners\nEngaging with Professional Services\nExecutive Business Reviews (EBRs)\nFY24 Big Rocks\nFY25 CS Retrospective Program\nLeadership Recurring Check-Ins\nResearching Customer Questions\nRoleplay Scenarios\nService Ping FAQ\nStage Adoption Metrics\nSuccess Plans\nContinuous Planning\nQuestions & Techniques for Success Plan Discovery\nUsing Calendly as a CSM\nUsing Gainsight as a CSM\nCalls to Action (CTAs)\nCSM Dashboard Overview\nCustomer 360\nCustomer Deployment Types\nGainsight Dashboards\nUsing Timeline\nUsing Issue Prioritization Dashboard as a CSM\nUsing the Customer Collaboration Project as a CSM\nWorkshops and Enablement Sessions\nCustomer Success Playbooks\nContinuous Delivery (CD) / Release Stage Playbook\nContinuous Integration (CI) / Verify Workshop\nGitLab Server Migrations Playbook\nCustomer Success Reporting and Dashboarding framework\nCustomer Success Vision\nCustomer Success' Frequently Asked Questions\nCustomer Terrain Mapping Engagements\nCustomer Workshops\nCI Workshop\nInnersource Workshop\nSecure Workshop\nCSM Secure Workshop Discovery Questionnaire\nDemo Systems\nDemo Systems Onboarding\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nIntegration Tutorials\nCreate a Jenkins Pipeline\nEnvironments\nTraining Cloud Omnibus-as-a-Service\nInfrastructure\nDemo Systems Infrastructure - Kubernetes\nDemo Systems Infrastructure - Networking\nEducational Services\nGitLab Education Services Support Handbook\nTech Stack\nArticulate 360 Tech Stack Guide\nCredly Tech Stack Guide\nInstruqt Tech Stack Guide\nGitLab Product Training for Customer Success\nGitLab Quick Start for New GitLab.com Customers\nInitiatives\nCommunities of Practice\nPartners\nPartner Capabilities Journey\nProduct Usage Reporting Vision\nFreemium SaaS Usage Data\nGainsight: Using Gainsight Statistics in SFDC\nGitLab Usage Statistics\nHealth Scoring - Calculations and Methodology\nHow to Use Product Usage Reporting\nPlatform Adoption Scoring\nProduct usage playbooks with usage metrics\nUse Case Adoption Scoring\nProfessional Services Team Handbook\nDelivery Checklists\nDeveloping Software for Professional Services\nGitLab Certified Migration Services Engineer\nGitLab Certified Trainer Program\nGitLab Professional Education Services\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Access The GitLab Training Environment\nGitLab Agile Portfolio Management - Hands-On Lab: Create an Organizational Structure in GitLab\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Customize Issue Boards\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Kanban Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Scrum Board\nGitLab Agile Portfolio Management - Hands-On Lab: Create And Manage A Waterfall Board\nGitLab Agile Portfolio Management - Hands-On Lab: Organize and Manage Issues\nGitLab Agile Portfolio Management - Hands-On Lab: Use GitLab Planning Tools\nGitLab Agile Portfolio Management- Hands-On Lab: Create Issues\nGitLab Agile Portfolio Management- Hands-On Lab: Use A Merge Request To Review And Merge Code\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Code Quality Scanning\nGitLab CI/CD - Hands-On Lab: Create A Basic CI Configuration\nGitLab CI/CD - Hands-On Lab: Defining Stages, Jobs, and Runners\nGitLab CI/CD - Hands-On Lab: Display Pipeline Info\nGitLab CI/CD - Hands-On Lab: Job Policy Patterns\nGitLab CI/CD - Hands-On Lab: Security Scanning\nGitLab CI/CD - Hands-On Lab: Understanding the Basics of Pipelines\nGitLab CI/CD - Hands-On Lab: Using Artifacts\nGitLab CI/CD - Hands-On Lab: Variable Hierarchy\nGitLab CI/CD - Hands-On Lab: Working with the GitLab Container Registry\nGitLab Duo Principles - Hands-On Lab Overview\nGitLab Duo Principles - Hands-On Lab: Code Generation with GitLab Duo Chat\nGitLab Duo Principles - Hands-On Lab: Getting Started with GitLab Duo\nGitLab Duo Principles - Hands-On Lab: Using GitLab Duo to Write New Code\nGitLab Duo Principles - Hands-On Lab: Working with Issues and Merge Requests\nGitLab Duo Principles - Hands-On Lab: Working with Security Vulnerabilities\nGitLab Professional Education Services ILT Labs\nGitLab Advanced CI/CD - Hands-On Lab Overview\nGitLab Advanced CI/CD - Hands-On Lab: Configurations for Complex Processes\nGitLab Advanced CI/CD - Hands-On Lab: Deployment Strategies\nGitLab Advanced CI/CD - Hands-On Lab: GitLab Runners Deep Dive\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Build Pipelines\nGitLab Advanced CI/CD - Hands-On Lab: Optimizing Pipeline Testing\nGitLab Advanced CI/CD - Hands-On Lab: Review Apps\nGitLab Advanced CI/CD - Hands-On Lab: Reviewing Best Practices\nGitLab Agile Portfolio Management - Hands-On Lab Overview\nGitLab Agile Portfolio Management - Hands-On Lab: Project Planning\nGitLab Agile Portfolio Management - Hands-On Lab: Reporting & Portfolio Management\nGitLab Agile Portfolio Management - Hands-On Lab: Structuring your Organization\nGitLab Agile Portfolio Management- Hands-On Lab: Collaboration via MRs and Wikis\nGitLab Agile Portfolio Management- Hands-On Lab: Task Management & Progress Tracking\nGitLab CI/CD - Hands-On Lab Overview\nGitLab CI/CD - Hands-On Lab: Configure a Pipeline to Build an Application\nGitLab CI/CD - Hands-On Lab: Configuring Pipeline Testing\nGitLab CI/CD - Hands-On Lab: Deploying Applications\nGitLab CI/CD - Hands-On Lab: Investigating Broken Pipelines\nGitLab CI/CD - Hands-On Lab: Rules and Merging Changes\nGitLab CI/CD - Hands-On Lab: Working with CI/CD Components\nGitLab Compliance - Hands-On Lab Overview\nGitLab Compliance - Hands-On Lab: Audit Events\nGitLab Compliance - Hands-On Lab: Compliance Center and Frameworks\nGitLab Compliance - Hands-On Lab: Compliance Reports\nGitLab Compliance - Hands-On Lab: Enable and Configure License Compliance\nGitLab Compliance - Hands-On Lab: Pipeline Execution Policies\nGitLab Compliance - Hands-On Lab: Repository Control\nGitLab Compliance - Hands-On Lab: Scan Execution Policies\nGitLab Compliance - Hands-On Lab: Separation of Privileges\nGitLab Fundamentals - Hands-On Lab Overview\nGitLab Fundamentals - Hands-On Lab: Analytics\nGitLab Fundamentals - Hands-On Lab: Collaboration and Code Review\nGitLab Fundamentals - Hands-On Lab: Continuous Integration and Development\nGitLab Fundamentals - Hands-On Lab: Implementing Security Scanners\nGitLab Fundamentals - Hands-On Lab: Organizing your work in GitLab\nGitLab Fundamentals - Hands-On Lab: Project Management with Issues and Boards\nGitLab Fundamentals - Hands-On Lab: Repository Management and Branching\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Addressing Vulnerabilities\nGitLab Security Essentials - Hands-On Lab: Container Scanning\nGitLab Security Essentials - Hands-On Lab: DAST and API Scans\nGitLab Security Essentials - Hands-On Lab: Dependency and IaC Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab Security Essentials - Hands-On Lab: SAST and Secret Detection\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Kubernetes Instance\nGitLab System Admin - Hands-On Lab: Exploring the GitLab Omnibus Instance\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nGitLab System Admin - Hands-On Lab: Exploring the Omnibus Admin Dashboard\nGitLab System Admin - Hands-On Lab: Kubernetes Backup and Restore\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Logging and Monitoring GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Omnibus Backup and Restore\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Troubleshooting GitLab Omnibus\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Kubernetes\nGitLab System Admin - Hands-On Lab: Upgrading GitLab Omnibus\nGitLab System Administration with Kubernetes - Hands-On Lab Overview\nGitLab System Administration with Omnibus - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab Overview\nGitLab Security Essentials - Hands-On Lab: Configure SAST, Secret Detection, and DAST\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Container Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Coverage-Guided Fuzz Testing\nGitLab Security Essentials - Hands-On Lab: Enable and Configure Dependency Scanning\nGitLab Security Essentials - Hands-On Lab: Enable and Configure License Compliance\nGitLab Security Essentials - Hands-On Lab: Enable and Scan Using a Scan Execution Policy\nGitLab System Administration - Hands-on Lab: Backup and Restore GitLab\nGitLab System Administration - Hands-on Lab: Configure GitLab Runners\nGitLab System Administration - Hands-on Lab: Configure Instance Monitoring\nGitLab System Administration - Hands-on Lab: Implement Sign-Up Restrictions\nGitLab System Administration - Hands-on Lab: Install GitLab\nGitLab System Administration - Hands-on Lab: Manage GitLab Logs\nGitLab System Administration - Hands-on Lab: Troubleshoot GitLab\nGitLab System Administration - Hands-on Lab: Use GitLab Administration Commands\nGitLab System Administration Hands-on Lab Overview\nGitLab with Git Fundamentals - Hands-On Lab Overview\nGitLab with Git Fundamentals - Hands-on Lab: Auto DevOps With a Predefined Project Template\nGitLab with Git Fundamentals - Hands-on Lab: Build a .gitlab-ci.yml file\nGitLab with Git Fundamentals - Hands-On Lab: Create a project and issue\nGitLab with Git Fundamentals - Hands-On Lab: Static Application Security Testing (SAST)\nGitLab with Git Fundamentals - Hands-On Lab: Use GitLab To Merge Code\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThought Industries LMS Tech Stack Guide\nGitLab Technical Certifications\nPartner Collaboration\nPositioning Professional Services\nProfessional Service Operations\nMavenlink Processes\nProfessional Services Delivery Methodology\nAgile to GitLab Terminology Mapping\nArchetype Definition\nBacklog Management\nDefinition of Done\nDefinition of Ready\nDiscovery\nGitLab Best Practices\nGood Estimation Techniques\nGood User Stories\nHow to Use CP Automation to Manage Engagements\nIteration 0\nIteration 0 Fundamentals\nIteration Planning per Service Offering\nIteration Scheduling\nManaging Risk, Project Wins, and Business Development\nRetrospectives\nProfessional Services Engagement Management\nGitLab Certified Engagement Manager Professional\nProfessional Services EM Opportunity Tracking\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Implementation Scoping\nProfessional Services EM Scoping - CI/CD Pipeline Migration\nProfessional Services EM Scoping - Migrations\nMigrating from Self-Managed GitLab to GitLab.com\nProfessional Services EM Scoping - Transformational Services\nScoping a Readiness Assessment\nProfessional Services Engagement Management - SOW Creation\nProfessional Services Engagement Management - Transacting ProServ business through AWS Marketplace\nTask Prioritization\nProfessional Services Engineering Workflows\nArtifacts\nAfter Action Reports\nArchitecture Diagrams\nIntake\nAWS Intake\nOn-prem Intake\nInternal\n15-minute Standup\nBlameless Root Cause Analyses\nProfessional Services Business Operations\nProcess\nProject Execution\nProject Kick-off\nSign-off\nStanding Calls\nWelcome E-mail\nProfessional Services Instructional Design and Development\nProfessional Services Offerings\nProfessional Services Offerings Framework\nProfessional Services Partner Invoice Example\nProfessional Services Practice Management\nProfessional Services Pre-Sales Methodology\nProfessional Services Project Management\nProfessional Services Remote Training Session Setup and Reporting\nProfessional Services Technical Architect\nPS Standard SKUs\nRemote Training Facilitation Best Practices\nSelling GitLab Professional Services\nServices to Accelerate Customer Adoption\nSetting up your Development Environment\nWorking with Professional Services\nPublic Sector\nPublic Sector Solutions Architects\nRenewals Managers\nRenewals Managers\nRenewals Managers - How we do it\nRenewals Managers - What we do\nRM Onboarding\nResources to get started with GitLab\nSuccess Tiers\nAccelerator Development Template Usage Guide\nTransitioning Accounts from Pre-Sales to Post-Sales\nUsing Salesforce within Customer Success\nEngineering\nAI Engineering\nAI Framework Group\nAI Model Validation at GitLab\nCode Creation Group\nCode Creation Group engineering overview\nCode Creation: Code Suggestions Guide\nCode Suggestions Implementation Guidelines\nCode Suggestions Model Evaluation Guide\nCode Suggestions Model Rollout Guide\nCode Suggestions Testing Guide\nHow We Work\nCode Creation Group Milestone Planning\nCreate:Editor Extensions Group\nOwnership and boundaries - Editor Extensions\nCustom Models Group\nDuo Chat Group\nDuo Chat's Technical Strategy -\nDuo Workflow Group\nTroubleshooting\nGlobal Search Group\nAdvanced Global Search Rollout on GitLab.com\nGlobal Search - JTBD\nWorkflow Catalog Group\nArchitecture\nArchitecture Design Documents\nLogging Blueprint for GitLab\nArchitecture Design Workflow\nGuidelines\nData Lifecycle\nData Retention Guidelines for Feature Development\nDatabase\nPractices\nScalability\nTechnology Roadmap\nCross Functional Prioritization\nCTO Leadership Team\nDeployments and Releases\nDeployments\nDeveloper Onboarding\nDevelopment\nAI Model Validation at GitLab\nDatabase Engineering\nDevelopment Department Performance Indicators\nDevelopment OKRs\nDevelopment Required Approvals\nEngineering Principles\nFulfillment Sub-department\nFulfillment Diversity, inclusion, and belonging\nFulfillment Platform Team\nFulfillment Provision Team\nFulfillment Seat Management Team\nFulfillment Subscription Management Team\nFulfillment Utilization Team\nGrowth Stage\nExperimentation\nGrowth Fast Boot September 2019\nGrowth:Acquisition Group\nGrowth:Activation Group\nKeeping secure coding knowledge fresh in development\nManager Notes\nOnboarding\nEngineering Manager Onboarding\nProcesses\nDevelopment Talent Assessment Process\nFollow the Sun Coverage - Development Department\nGeneral Information of Development Escalation Process\nDevelopment Escalation Process\nHiring Contingent Workers - Development Department\nRollout Plan Process for Development\nSec Section\nApplication Security Testing Sub-Department\nAPI Security team in the Dynamic Analysis Group\nApplication Security Testing - Planning\nApplication Security Testing, Composition Analysis\nComposition Analysis Runbooks\nEnable Semver Dialect Errors in Sentry\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nDynamic Analysis Group\nProducts\nSecure Product Metrics\nSecret Detection Group\nSecret Detection Metrics\nSecret Detection Runbooks\nSecret Detection Service: General FAQs\nSecret Detection Service: Monitoring\nSecret Push Protection Monitoring\nSecret push protection performance testing\nSecret push protection troubleshooting\nSecure QA Process\nSecure Technical Documentation\nData model for Dependencies Information\nSecure Architecture - Feedback (Dismiss, create an issue or a Merge Request)\nStatic Analysis Group\nRetrospective summaries\nStatic Analysis Group Code Review Process\nStatic Analysis Group Defined False Positives\nStatic Analysis Group EC2 development machine setup guide\nStatic Analysis Group Reaction Rotation\nStatic Analysis Runbooks\nHow to monitor and respond to issues with SAST Automatic Vulnerability Resolution?\nSAST analyzer deprecation and removal instructions\nSAST analyzer rollback to last version in production\nSecure / Govern sub-department delineation\nSecurity Risk Management Section\nSecurity Infrastructure\nSecurity Risk Management Planning\nSecurity Risk Management, Security Insights\nDeveloper Vulnerability Management Setup Guide\nSetup Guide for Vulnerability Explanation and Resolution\nVulnerability Archive Generation Guide\nVulnerability Explanation and Vulnerability Resolution troubleshooting\nSecurity Risk Management, Security Policies\nSecurity Policies - How we prioritize our current work?\nSecurity Policies - Working on features\nSoftware Supply Chain Security Sub-department\nAnti-Abuse Group\nAuthentication Group\nAuthorization Group\nCompliance Group\nSoftware Supply Chain Security:Pipeline Security Group\nPipeline Security Group - JTBD\nDevelopment Department Learning and Development\nDevelopment Department Learning and Development - Reliability\nEngineering manager role explained\nWork Of A Manager\nResources for Staff+ roles\nStaff Engineers\nTransitioning from Individual Contributor to a Manager\nDevOps Engineering\nDev\nCreate Stage\nCreate Stage: Talent Assessments\nCreate Stage: Tech Leads\nCreate:Code Review Group\nCreate:Code Review BE Team\nCreate:Code Review Backend Engineering Resources\nCreate:Code Review BE Engineering Manager Responsibilities\nCreate:Code Review FE Team\nMerge Request Report Widgets - DRI list\nCreate:Remote Development Group\nCreate:Remote Development Principles\nCultivating Contributions from the Wider Community\nDeveloper Cheatsheet\nCreate:Source Code teams\nCreate:Source Code BE Team\nCreate:Source Code FE Team\nEngineering Managers\nEngineering Managers Training Opportunities\nHow we live our values\nMeetings\nMonitoring\nObjectives & Key Results (OKRs)\nRecommended Books for Engineering Managers\nEngineers\nConferences\nIteration Retrospectives\nManaging Effective Skip Level Meetings\nProfessional Development\nRecommended Books for Engineers\nTraining Opportunities\nImport Group\nPlan Stage\nPlan Frontend Engineer Internship\nPlan:Knowledge Engineering Team\nPlan:Product Planning Engineering Team\nPlan:Product Planning Engineering Team - How we work\nPlan:Project Management Team\nWorking Groups\nEpic Work Items Migration\nWork Items API Performance Working Group\nOps Sub-department\nDeploy Stage\nEnvironments Group\nAuto DevOps\nEnvironments Group - GitLab Quality Assurance End-to-End Testing for the Environments group\nGeneral Planning Process - Ops Sub-department\nOps Hiring Process\nPackage Stage\nPackage Group - GitLab Quality Assurance End-to-End Testing for the Package group\nPackage Stage - The most important use cases for our customers\nProject Plans\nCI Catalog\nCluster Web Terminal\nContainer Registry Metadata Database Self-managed\nExternal CI Keyword\nGCP Secrets Integration - Weekly Project Plan\nKubernetes Dashboard\nSecrets Manager - Weekly Project Plan\nService Desk Ticket Work Item\nQuarterly OKRs - Ops Sub-department\nVerify Stage\nProject Plans\nCI Steps - Key Project Plan\nVerify:CI Platform Group\nVerify:Pipeline Authoring Group\nPipeline Authoring Frontend Architecture Process\nPipeline Authoring Group - JTBD\nPipeline Authoring Group Resources\nVerify:Pipeline Execution Group\nPipeline Execution Group - JTBD\nPipeline Execution Group - Risk Map\nProject Plans\nCI Data Partitioning - Weekly Project Plan\nCI Primary Key Conversions - Weekly Project Plan\nMerge Trains Improvements (Fast-forward support) - Weekly Project Plan\nVerify:Runner\nRunner Group - JTBD\nRunner Group - Risk Map\nRunner Group - Team Resources\nRunner Group - User Stories\nVerify:Runner Project Plans\nPerformance Indicators\nEngineering Career Development\nEngineering Career Framework\nDevelopment Department Career Framework\nDev Career Framework\nBackend\nDev Career Framework: Intermediate Backend Engineer\nDev Career Framework: Senior Backend Engineer\nDev Career Framework: Staff Backend Engineer\nDev Career Framework: Principal Engineer\nFrontend\nDev Career Framework: Intermediate Frontend Engineer\nDev Career Framework: Senior Frontend Engineer\nDev Career Framework: Staff Frontend Engineer\nFullstack\nDev Career Framework: Intermediate Fullstack Engineer\nDev Career Framework: Senior Fullstack Engineer\nDev Career Framework: Staff Fullstack Engineer\nDevelopment Department Career Framework: Intermediate\nDevelopment Department Career Framework: Intern\nDevelopment Department Career Framework: Principal\nDevelopment Department Career Framework: Senior\nDevelopment Department Career Framework: Staff\nEngineering Career Framework: Associate\nEngineering Career Framework: Intermediate\nEngineering Career Framework: Intern\nEngineering Career Framework: Principal\nEngineering Career Framework: Senior\nEngineering Career Framework: Staff\nInfrastructure Department Career Framework\nAssociate - Infrastructure Department Career Framework\nCore Platform Career Framework\nDistribution\nCore Platform Career Framework: Intermediate Distribution Engineer\nCore Platform Career Framework: Senior Distribution Engineer\nIntermediate - Infrastructure Department Career Framework\nIntern - Infrastructure Department Career Framework\nPrincipal - Infrastructure Department Career Framework\nSenior - Infrastructure Department Career Framework\nStaff - Infrastructure Department Career Framework\nQuality Department Career Framework\nEngineering Productivity Career Framework\nQuality Career Framework: Intermediate Backend Engineer, Engineering Productivity\nQuality Career Framework: Senior Backend Engineer, Engineering Productivity\nQuality Career Framework: Staff Backend Engineer, Engineering Productivity\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nQuality Department SET Career Framework: Intermediate\nQuality Department SET Career Framework: Principal\nQuality Department SET Career Framework: Senior\nQuality Department SET Career Framework: Staff\nSupport Career Framework\nSupport Career Framework: Associate Support Engineer\nSupport Career Framework: Customer Support Representative\nSupport Career Framework: Intermediate Support Engineer\nSupport Career Framework: Senior Support Engineer\nSupport Career Framework: Staff Support Engineer\nMentoring\nEngineering Communication\nEngineering Poster Boards\nEngineering Demo Process\nEngineering Error Budgets\nEngineering Error Budget Custom Targets\nEngineering Error Budgets for Stage Groups\nEngineering Function Performance Indicators\nEngineering Hiring\nEngineering IC Leadership\nTech Lead at GitLab\nEngineering Management\nEngineering Management Career Development\nEngineering Management Project Management\nEngineering Manager Hiring\nGroup Retrospectives\nEngineering Mentorship\nEngineering Projects\nEngineering Team Readmes\nAmy Shiel README\nAndras Horvath's README\nBen King's README\nChris 'CK' README\nCraig Miskell README\nDaniel Diniz's README\nDavid Wainaina README\nEduardo Bonet's README\nEmily Chang's README\nJane Gianoutsos' README\nJuan Silva's README\nKamil Trzci≈Ñski's README\nLee Matos' README\nLyle Kozloff's README\nMarin Jankovski's README\nMario Mora's README\nMatt Nohr's README\nMax Woolf's README\nMichael Lun√∏e's README\nMike Dunninger's README\nMikeL's README\nNick Veenhof's README\nREADME of Alex Ives\nREADME of Gabriel Yoachum\nREADME of Katrin Leinweber\nRebecca Spainhower's README\nRonnie Alfaro's Readme\nSavas Vedova's README\nSimon Street's README\nThong Kuah's README\nTom McAtee's README\nEngineering Workflow\nCode Review Guidelines\nCode Review Values\nIteration\nRelated Engineering Workflows\nRelease/Feature Determination Workflow\nFast Boot\nFrontend Group\nInterview Metrics - Frontend\nSkillsharing - Frontend\nGitLab Repositories\nGuidelines for automation and access tokens\nIncident\nInfrastructure\nDatabase\nDatabase: Disaster Recovery\nEngineering Productivity team\nDirection - GDK\nEngineering productivity project management\nTest Intelligence\nTriage Operations\nIssue Triage Onboarding\nWider Community Merge Request Triage\nWorkflow Automation\nGetting Assistance on Infrastructure Platforms\nIncident Management\nIncident Follow Up Issues\nIncident Manager On Call onboarding\nTier-2 Oncall\nInfrastructure Environments\nEnvironments Canary Stage\nStaging Ref environment\nInfrastructure Product Management\nProduction\nProduction Architecture\nCI Service Architecture\nDisaster Recovery Architecture\nSupporting Architecture\nProduction Readiness Review\nRate Limiting\nBypass Policy\nManaging Limits\nRate Limiting Troubleshooting\nTeam\nCloud Connector Group\nDistinguished Engineer, Infrastructure - Andrew Newdigate\nFinOps Team\nGitLab Dedicated Group\nDedicated Migration Team\nEnvironment Automation Team\nGitLab Dedicated Architecture\nFrom Dedicated to Cells: A Technical Analysis\nGitLab Dedicated SLAs\nSwitchboard team\nUS Public Sector Services team\nRunway Team\nScalability Group\nThe Infrastructure Platforms Section\nInfrastructure Platforms Tools Index\nRunway\nPlatforms Processes\nCalibration\nThe Infrastructure Platforms Hiring Process\nThe Infrastructure Platforms OKRs\nThe Infrastructure Platforms Project Management\nInfrastructure Platforms\nAlert Playbook Management\nCapacity Planning for GitLab Infrastructure\nCareer Development in the Infrastructure Platforms Department\nChange Management\nCost Management\nGCP CUD\nGroup Cost Metrics\nHow to Engage\nInfrafin\nInfrastructure Analyst Board\nInfrastructure Analyst Role\nLearning Resources\nAWS\nGCP\nP&L Allocation\nData Access Sub Department\nData Access Durability Team\nDatabase Framework Group\nContainer Registry on PostgreSQL\nCrafting Queries with Postgres Ai Plans\nDatabase Group Activity Log\nDatabase Group Stable Counterparts\nDatabase Lexicon - terms and definitions relating to our database\nDatabase Partitioning\nDatabase Strategy\nIdentifying Database Issues\nIntroduction to Background Migrations\nIntroduction to Database Review\nMulti-database Background migrations\nPartitioning - Issue group search\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL Upgrade Cadence\nSharding GitLab by top-level namespace\nSharding GitLab with CitusDB\nUnderstanding how Indexes Impact Performance on GitLab.com\nWorking with the GitLab.com database for developers\nWorkload analysis for GitLab.com\nDatabase Help Workflow\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nDBO Escalation Process\nGit Team\nGitaly Team\nDebugging the Gitaly service\nDeveloper Experience\nBug Prioritization\nDeveloper Experience Dashboards\nDeveloper Experience Design Documents\nDeveloper Experience Onboarding\nDeveloper Experience Project Management\nDeveloper Tooling team\nDevelopment Analytics Group\nFeature Readiness\nPerformance Enablement\nQuality Engineering Learning Resources\nTest Governance Group\nTest Platform Roadmap\nEmergency Change Processes for GitLab SaaS\nGitLab Delivery\nDelivery Group\nDelivery Team Metrics\nDelivery Team Training\nEngineering Manager, Delivery\nDistribution\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery: Self Managed\nSelf Managed Workflow\nGitLab Delivery:Build\nDistribution Team Demo\nDistribution Team Infrastructure and Maintenance\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nDistribution Team Infrastructure: ARM\nDistribution Team usage of Renovate\nDistribution Team Kubernetes and OpenShift release support policy\nDistribution Team Merge Request Handling\nDistribution Team Training\nDistribution Team Triage\nDistribution Team Workflow\nGitLab Delivery:Framework\nReference Architectures - Validation and Testing\nIncident Review\nInfrastructure Department Frequently Asked Questions\nInfrastructure Department Projects\nInfrastructure Feature Support\nNetwork Security Management Procedure\nProduction Engineering\nObservability Team\nCapacity Planning\nCost of Observability Stack\nError Budgets\nTechnical Blueprint\nProduction Engineering Foundations Team\nProduction Engineering Group - Project Management\nProduction Engineering Ops Team\nDisaster Recovery Practice (DR Gamedays)\nEOC Onboarding Buddies\nEOC Shadow and EOC Buddy Expectations\nOn-call handover\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nFY26 - Hosted Runners\nFY26 - Incident Management\nFY26 - Patching & OS Modernization\nSRE Onboarding\nProduction Engineering Runners Platform Team\nRelease Tools\nService Maturity Model\nTenant Scale Group\nCells and Organizations\nTest Platform in Cells\nCells Infrastructure Team\nGeo and Disaster Recovery\nGeo and Disaster Recovery - Hierarchy of Agile Work Items\nGeo and Disaster Recovery - Planning\nGeo and Disaster Recovery - Retrospectives\nGeo on staging.gitlab.com\nGeo scheduled pipelines\nOrganizations Team\nTeam processes\nTenant Scale Group\nInnovation at GitLab\nMonitor Stage\nAnalytics Instrumentation Group\nAnalytics Instrumentation - Monitoring and troubleshooting\nInternal Analytics Infrastructure\nMonitor:Platform Insights Group\nOptimize Group\nMonitoring of GitLab.com\nStaging Monitoring\nOn-Call\nOpen Source at GitLab\nOpen Source Growth Strategy\nPerformance\nPolicies related to GitLab.com\nBackups of GitLab.com\nGitLab Teleport Access Policy\nMonitoring of GitLab.com\nR&D Tax Credits\nRecognition in Engineering\nReleases\nBackports\nInternal Releases\nPatch Releases\nRoot Cause Analysis\nTesting\nBrowser Performance Testing\nDeveloper Experience On-call Rotation\nEnd-to-end Pipeline Monitoring\nEnd-to-End Test Failure Issue Debugging Guide\nFlaky tests\nGitLab Performance Testing Tool Selection Guide\nObservability Based Performance Testing at GitLab\nOperational Verification\nPipeline Triage\nRisk Mapping\nTest Coverage\nTest Platform in Distribution group\nUnplanned Upgrade Stop Workflow\nEnterprise Data Team\nData Governance\nData Catalog\nData Quality\nData Team Data Management Page\nData Team - How We Work\nContributing to the Data Team Project\nCI Jobs You Should Know About on Any MR\nPreparing Your MR for Merging\nWorking in the GitLab Web IDE\nData Development\nData Team - Planning Process\nData Team Calendar - Meetings\nData Triage Guide\ndbt Change Workflow\nFunctional Analytics Center of Excellence\nMerge Request Roles and Responsibilities\nNew Data Source\nData Team Organization\nAnalytics Engineering at GitLab\nData Analytics at GitLab\nData Platform at GitLab\nData Science Handbook\nData Science Project Development Approach\nData Steering Committee at GitLab\nData Team Internships\nData Team Learning and Resources\nData Team Programs\nData For Product Managers\nEnterprise Data & Insights Team Operating Principles\nLearnings From Internships\nSRE Internship\nData Team Platform\nAWS Data Team Guide\nData Infrastructure\nData pipelines\nData Platform Security\nWeb Application Penetration Testing Process\nData Team CI Jobs\nData with GitLab Duo\nDuo Inspiration Hub\ndbt Guide\nEnterprise Data Warehouse\nGDPR deletions\nGetting Started With CI/CD for Data Science Pipelines\nJupyter Guide\nMonte Carlo Guide\nPermifrost\nPython Guide\nPython/Tools package management and inventory\nRStudio Guide\nSAFE Data Guide\nSnowflake Guide\nClustering in Snowflake\nSnowflake SNS integration for Snowflake SnowPipe and task for failure\nSnowflake warehouse optimization\nSnowplow\nSQL Style Guide\nTableau\nHandbook Embedding Demonstration Page\nTableau Admin Guide\nTableau Developer Guide\nTableau Developer Tips and Tricks\nTableau Style Guide\nTableau Project Leaders Guide\nUsing Feast\nEntity-Specific Information\nEntity-Specific Employment Policies\nGitLab GmbH (Germany) information & benefits\nGitLab Iberia s.r.l. (Spain) Information and Benefits\nGitLab Israel Ltd. information & benefits\nExecutive Business Administrators (EBAs)\nCEO Scheduling & Preferences\nE-Group Scheduling\nVP Scheduling\nFinance\nAccounting and Reporting\nFinancial Operations\nBilling Operations\nBilling Operations, GPO\nNetSuite Tech Stack Guide\nAccounts Payable\nCoupa Tech Stack Guide\nNavan Expense Tech Stack Guide\nNavan Physical Card\nVirtual Card Guide for Accounts Payable\nAuthorization Matrix\nCommittee Composition\nFinance Growth and Development\nCFO Shadow Program\nFinance Learning and Development\nFinance Learning and Development\nFinance Mentorship Program\nUnder Construction - FinBT Mentorship Program\nFinance Team Performance Indicators\nFinancial Planning & Analysis\nAdaptive Insights\nCorporate FP&A\nFP&A Definitions\nFP&A Metrics\nFP&A Processes\nFP&A Team Structure\nG&A Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nR&D Finance\nHosting\nGitLab Finance Team READMEs\nBrian Robin's README\nJames (Jim) Gladen's README\nJames Shen's README\nJulie Malloy's README\nNabitha Rao's README\nSimon Mundy's README\nGlobal Travel and Expense Policy\nInvestor Relations\nPayroll\nSales Compensation Plan\nSpending Company Money\nThe GitLab Procurement Team\nCharitable Contribution Requests\nContingent Worker Policy\nCoupa FAQ\nExternal Consultant Orientation & Access Deprovisioning\nField Marketing and Events\nHome Office Equipment and Supplies\nIndividual Use Software\nNon-Cost related Agreements\nTips for Submitting a Zip Request\nVendor Guidelines\nLegacy Vendor Terms and Conditions v1\nVendor Terms and Conditions\nVirtual Cards\nThe GitLab Tax Team\nThe Internal Audit Function\nSarbanes-Oxley (SOX) Program\nTimekeeping Policies and Procedures\nTravel Safety and Security\nSponsored Travel\nGitLab Alliances Handbook\nGitLab Integration Instructions\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partners: Working with GitLab\nDeveloping your GitLab Practice\nChannel Services Catalog\nGitLab Channel Program Guide\nMarketing Development Funds\nGitLab Partner Champions Program\nPartner Enablement\nPartner Technical Presales Enablement\nChannel Partner Implementation Services\nChannel Partner Migration Services\nGitLab Communication\nAlly Resources\nAsk Me Anything\nConfidentiality levels\nDeep Dives\nGitLab Communication ‚Äî Zoom\nGitLab Webinars on Zoom\nGitLab Communication Chat\nGitLab Video Playbook\nPower of the Pause\nTop Misused Terms - GitLab Communication\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nFinancial Wellness\nGitLab BV (Belgium) Benefits\nGitLab BV (Finland) Benefits\nGitLab BV (Netherlands) Benefits\nGitLab Canada Corp\nGitLab France S.A.S.\nGitLab GK (Japan) Benefits\nGitLab Inc (US) Benefits\nTotal Rewards Processes & Audits for US benefits\nGitLab Ireland Ltd\nGitLab Korea Limited Benefits\nGitLab LTD (UK) Benefits\nGitLab Singapore Pte Ltd\nGlobal Expansion\nGlobal Upside Benefits\nPapaya-Global\nPTY LTD Benefits\nRemote.com\nLeave of Absence Tool Kit for Managers and Team Members\nModern Health\nCompensation\nAnnual Compensation Review Cycle\nCompensation Review Cycle Inputs\nThe Compensation Calculator\nCompensation Calculator\nEquity Compensation\nIncentives at GitLab\nHiring & Talent Acquisition Handbook\nCandidate Handbook Page\nRecruitment Privacy Policy\nConducting a GitLab Interview\nContractor Conversions\nEmerging Talent @ GitLab\nGitLab talent ambassador\nGreenhouse\nInterviewer Prep Requirements\nInterviewing at GitLab - Customer Support\nInterviewing at GitLab - Infrastructure\nPanel Interviews\nTechnical Interviews\nJob Families\nMERGE: Ongoing Development for Associate Engineers\nReferral Operations\nReferral Program and Process\nSourcing\nTalent Acquisition Alignment\nTalent Acquisition Process Framework\nCandidate Experience Specialist Responsibilities\nEvergreen Requisitions\nGitLab Talent Acquisition Process Framework for Talent Pools\nInternal Hiring Process\nTalent Acquisition Job Offer Process\nTalent Acquisition Process - Acquisitions\nTalent Acquisition Process - Hiring Manager Tasks\nTalent Acquisition Process Framework for Creating REQs\nTalent Acquisition Process Framework for REQs\nTriad Process\nTalent Acquisition Productivity\nIT\nIT Enterprise Applications\nBusiness Technology - Tech Stack Details\nDocumentation\nPolicies\nBusiness Continuity Plan\nProcedures\nEnterprise Applications READMEs\nAnalissa 'Ana' Moreno's README\nArif Willis-Browne's README\nBarbara Roncato's README\nBien Balaba's README\nCaroline Swanson's README\nChavit Casabar's README\nDavid Kim README\nDerek Isla's README\nKavya Nanjappa's README\nLouis Dwans README\nMarc Di Sabatino's README\nMonali Bhide's README\nNico Sandoval's README\nRenz Santos's README\nRey Manlangit's README\nSarah Pang's README\nSharath Shanker's README\nXander Liwanag's README\nInfrastructure Reference Links\nOrganizational Structure\nArchitecture & Integrations\nEnterprise Application Guides\nCoupa End Users Guide\nCoupa End Users Quick Guide\nCoupa Prepaid Automation Process\nCoupa Supplier Management\nCoupa Virtual Card Guide\nFinance Guides\nFinance System Guides\nHelpLab Information Guide\nNavan Expense End Users Guide\nNS Custom Field guide\nProduct Catalog Guide\nSalesforce Mobile App Users Guide\nZip End Users Guide\nZuora - Enterprise Application Guides\nZuora Collect module\nEnterprise Applications - CRM Team\nFinance Systems Access Requests\nQuote to Cash Documentation\nQuote to Cash Entity Relationship Diagrams\nTroubleshooting: True Ups, Licenses + EULAs\nEnterprise Applications - PMO\nGovernance and IT Program Management\nEnterprise Applications Team G&A (Finance Systems)\nIT Compliance\nIT Enterprise Applications Services\nRolly\nServices\nRobotic Process Automation (RPA)\nTech Stack Applications\nTech Stack Guide Reference\nTools\nPostman\nLabor and Employment Notices\nOffboarding Documents & Notices\nLeadership\n1-1\nSuggested 1:1 Agenda and Daily Standup Format\nBiggest Tailwinds\nBook clubs\nBuilding Trust at GitLab\nCoaching\nCompensation Review Conversations\nCrucial Conversations\nEffective Delegation\nEmotional Intelligence\nCliftonStrengths:Unlocking Team Potential at Gitlab\nPsychological Safety\nPsychological Safety Short Course\nGitLab Onsites - Getting your team together in person\nHigh Output Management\nIdentifying & Addressing Burnout\nMaking Decisions\nManaging Conflict\nLeading through Adversity\nNo Matrix Organization\nSkip Level Meetings - Overview\nUnderperformance\nWorkforce Planning\nLegal & Corporate Affairs (\"LACA\")\nAgile Planning Terms\nAgile Planning Terms V1\nAI Functionality Terms\nAI Functionality Terms V1\nAI Functionality Terms V2\nAI Functionality Terms V3\nAnti-Corruption Policy\nAnti-Fraud Policy\nAnti-Retaliation Policy\nCode of Business Conduct & Ethics\nCommercial Legal\nContent Removal Guidelines\nContract Management and Storage\nCorporate & Compliance Legal\nCorporate Communications Policy\nDORA (Digital Operational Resilience Act) Mapping\nEU Illegal Content Report Form\nExternal Materials Compliance Tips\nFulfillment Reseller Flow-Through Terms\nGitLab Acceptable Use Policy\nGitLab API Terms of Use\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab for Education Program Agreement\nGitLab for Open Source Program Agreement\nGitLab Inc. Philanthropy Policy\nGitLab Legal Team READMEs\nEmily Plotkin's README\nJoel Fluss' README\nMiguel Silva's README\nRashmi Chachra's README\nStacy's readme\nGitLab Privacy\nCustomer Product Usage Information\nData Protection Impact Assessment (DPIA)\nEmployee Privacy Policy\nFAQ - Customer Product Usage Events\nGuidelines for Law Enforcement Requests\nPersonal Data Requests\nTransparency Reports\nGitLab Professional Services Terms\nGitLab Related Party Transactions Policy\nGitLab SAFE Framework\nGitLab Subscription Agreement\nGitLab Testing Agreement\nGitLab Testing Agreement v1\nGitLab Testing Agreement v2\nGitLab Testing Agreement V3\nGitLab Testing Agreement v4\nGitLab's Ethics and Compliance Program\nGitLab AI Ethics Principles for Product Development\nLearning Content Accessibility Guidelines\nGitLab's Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines on public discussion of competitor product features\nLegacy Terms and Agreements\nGitLab Professional Services Agreement V2\nGitLab Professional Services Agreement V3\nGitLab Subscription Agreement V5\nLegacy v1: GitLab Open Source Program Agreement\nLegacy v1: GitLab Professional Services Agreement\nLEGACY: GitLab Subscription Agreement\nLEGACY: GitLab Subscription Agreement V3\nLEGACY: GitLab Subscription Agreement V4\nLEGACY: Privacy Statement\nLegal, Employment at GitLab: A Strategic Partnership\nMarketing Guide: Collaborating with GitLab Legal\nMaterials Legal Review Process\nNon-Disclosure Agreement Process\nPartner Code of Ethics\nPatents\nPolicies\nGitLab Website Terms of Use\nPolicies related to Gifts and Contributions\nUse of Third-party Trademarks in GitLab\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nProduct and Intellectual Property\nPublicity Waiver and Release Guidelines and Process\nRecord Retention Policy\nReseller Agreement\nRisk Management and Dispute Resolution\nSales Guide | Collaborating with GitLab Legal\nStategy & Legal Operations\nEthics and Compliance Courses\nSustainability\nEarth Month\nGitLab Fiscal Year 2023 (FY23) ESG Report\nSustainability Training\nTeam Member Sustainability Guide\nTechnology Partner Agreement\nTrade Compliance\nTrademarks at GitLab\nUX Research Team Promotional Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nMarketing\nAccount Based Marketing\nBlog Handbook\nBlog dashboard\nGit Guide for Blog Contributors\nGitLab Release Posts\nManual Release Post Kickoff\nRelease Post Scheduling\nBrand and Product Marketing\nBrand\nBrand Activation Handbook\nTrademark Guidelines\nGitLab swag program\nThe GitLab Brand Strategy team\nThe GitLab Content Style Guide\nThe naming process at GitLab\nBrand Creative Handbook\nBrand Video\nVirtual Recording Equipment Guide\nGitLab Content Strategy & Ops\nBlog style guide\nProduct and Solution Marketing\n2019 DevOps Dozen\n2019 DevOps Dozen - Best DevOps Solution Provider Executive: Sid Sijbrandij\n2019 DevOps Dozen - Best DevOps Solution Provider: GitLab\nAnalyst Relations\nAnalyst Resources for SDR and Sales Enablement Topics\nForrester Total Economic Impact‚Ñ¢ (TEI) Study Commissioned By GitLab, June 2020\nIndustry Analyst Briefings at GitLab\nIndustry Analyst Relations Inquiry\nCompetitive Intelligence\nApplication Security Market Analysis\nCI/CD Tools Primer\nCustomer Advocacy at GitLab\nDEPRECATED-Demos\nCI/CD Deep Dive Demo\nClick Through Demos\nConference Booth Setup\nIntegration Demos\nPlan to Monitor (p2m) Demo\nRunning Click-throughs off-line\nScaled Agile Framework and GitLab\nSet up GitLab CE or EE on Azure Container Service\nSet up GitLab CE or EE on Google Kubernetes Engine\nSimulation demos\nDevOps tools\nEnablement\nCloud Native Ecosystem Sales Enablement\nGitLab CI/CD for GitHub FAQ\nGitLab Secure and Govern Integrations - WhiteSource\nGitLab.com Subscriptions\nEnterprise IT Roles\nGetting Started with Agile/DevOps Metrics\nGitLab tiers\nGitLab tiers for sales assessment\nHidden IT Groups\nBuild\nDeliver Secure Applications\nImprove Cycle Time\nModernize applications\nOrganize\nProtect IT Group\nRun\nTest\nMarket Insights\nMarket Segmentation\nMarket Strategy and Insights\nPeer Reviews\nPersona snippets\nBuyer Personas\nAlex Persona snippets\nCasey Persona snippets\nDakota Persona snippets\nErin Persona snippets\nKennedy Persona snippets\nUser Personas\nCameron Persona snippets\nDelaney Persona snippets\nDevon Persona snippets\nParker Persona snippets\nRachel Persona snippets\nSacha Persona snippets\nSidney Persona snippets\npmm inventory\nPMM Metrics\nProduct and Solution Marketing Asset Inventory\nProduct and Solution Marketing Metrics\nProduct and Solution Marketing On-Boarding and Other How-to's\n101 - Creating Kubernetes cluster\n101 - No Tissues with Issues\n103 - Maintaining common slides across decks\n104 - Epic Templates - Repeatable sets of issues\n105 - Issue Automation - Keeping your issues squeaky clean\nKeeping Yourself Informed\nProduct and Solution Marketing Project Management Overview\nProduct Marketing Messaging\nProduct Marketing Professional Development\nProduct Marketing Team\nProduct Marketing Onboarding\nProduct Release Updates\nPublic Sector Go To Market\nQBR Support\nReseller Marketing Kit\nRoles Personas\nBuyer Personas\nDay in the Life for the Security Operations Engineer persona\nSolutions Go-to-market\nAuxiliary Solution Resource: Agile\nAgile Message House Template\nUsecase: Template - Keywords\nAuxiliary Solution Resource: Continuous Delivery\nContinuous Delivery Message House\nAuxiliary Solution Resource: GitOps\nGitOps Message House Template\nUsecase: Template - Keywords\nDevOps Solution Resource: Continuous Integration\nCI Message House\nRunner Message House\nDevOps Solution Resource: DevOps Platform\nDevOps Platform Message House\nDevOps Solution Resource: DevSecOps\nDevSecOps Message House\nDevOps Solution Resource: Software Compliance\nDevSecOps Solution Resource: Automated Software Delivery\nProposed Use Case - Incident Management\nProposed Usecase: Data Science\nData Science Usecase: Keywords\nData Science Usecase: Message House\nTechnical Marketing BOM Elements\nUse case: GitLab + Google Cloud\nUsecase: Artifact Management\nUsecase: Template\nMessage House Template\nUsecase: Template - Keywords\nWedge conversation: Source Code Management\nVersion Control & Collaboration Message House\nTravel Priorities\nChief Marketing Officer\nCI/CD GTM Sales Plays\nSales Play: Upsell Premium to Ultimate\nUpsell Premium to Ultimate message house\nUpsell Premium to Ultimate sales play planner\nCMO Shadow Program\nCore DevOps Solutions\nCorporate Communications Handbook\nCorporate Communications Resources and Trainings\nGitLab Incident Communications Plan\nGitLab Speakers Resources\nDemand Generation\nDemand Generation Campaigns Team\nContent in Campaigns\nDirect Mail\nLanding Page Creation\nDeveloper Relations\nCommunity Learning Pathway: Course Resources\nCommunity Programs\nCommunity Programs Workflows\nGitLab for Education Program Workflows\nGitLab for Open Source Program Workflows\nGitLab for Startups Program Workflows\nEducation Program\nOpen Source Program\nStartups Program\nContributor Success Team\nCode Contributor Program Email templates\nCommunity pairing sessions\nContributor Success Team - Code Contributor User Journey\nGitLab Community Hackathons\nGitLab Nominations for Community Swag\nGitLab Notable Contributor Selection Process\nHow to recognize organizations within the contributor ecosystem for GitLab\nInnovation Pitch Competion\nMerge Request Coach Lifecycle\nMetrics & Tableau Dashboards\nWorkflows for working with community contributions\nCore Team\nDeveloper Advocacy\nCommunity Newsletter\nConsultancy workflows for Developer Advocates\nContent library and workflows for Developer Advocates\nDeveloper Advocacy CFPs\nDeveloper Advocacy Community Response Process\nDeveloper Advocacy on Social Media\nDeveloper Advocacy Team Calendar\nDeveloper Advocacy: Mentoring and Coaching\nDeveloper Advocate Team Workflow\nHacker News\nLearn Developer Advocacy\nOSS Contributions\nProjects\nDeveloper Relations - Content Effectiveness\nDeveloper Relations Content Requests\nDeveloper Relations Department Performance Indicators\nDeveloper Relations Events\nDeveloper Relations Program Management\nDeveloper Relations workflow: UTM Tracking Strategy\nDeveloper Relations Workflows and Tools\nCloud Resources for Developer Relations\nCode of Conduct Enforcement\nCommon Room workflows\nCommunity Discord workflow\nDeveloper Relations tools: Zapier\nDeveloper Relations workflow: Team Budgets\nDeveloper Relations Workflows: Content Review\nE-mail response workflow\nForum workflow\nReddit response workflow\nStack Overflow: Tagged Questions and GitLab Collective Overview\nSwag: Process & FAQ\nTwitter response workflow\nZendesk for GitLab Developer Relations\nDeveloper Relations: Program Resources\nGitLab Co-Create Initiative\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nCo-Create Action Plan - FY26Q1\nCo-Create On-Site Engineer Guide\nGitLab Community Apps\nCampaign Manager\nGitLab Contributors Program\nGitLab Meetup Checklist\nLeading Organizations\nStrategic Plans\nContributor Program Unification & Growth Plan\nTechnical Marketing\nGitLab.com logins for demos\nGuide to Working the Booth at Events\nHow Tos\nAdding CTAs to Learn@GitLab YouTube Videos\nAutogenerating comparison infographics using Figma\nCreating an AWS EKS cluster for a GitLab demo\nCreating and Publishing Technical Marketing Demo Videos\nPublish a video on YouTube\nMaking Better Videos\nTechnical Marketing Asset to Stakeholder Matrix\nTechnical Marketing Content Library\nDigital Experience Handbook\nAccessibility\nAnalytics\nGoogle Lighthouse\nBuyer Experience Repository\nCoding Standards for Digital Experience\nContentful CMS\nContentful CMS 'The Source' Pages\nContentful CMS Custom Pages\nContentful CMS Solutions Pages\nEditing content in Contentful\nKnown knowns & feature wishlist\nPartner Microsites\nCore Marketing Site Architecture Plan\nData Dictionary\nDecap CMS\nDex Bot\nDEX Code Review Guidelines\nDEX Core Web Vitals\nDigital definitions\nDigital Experience: Foundations Agenda\nEngineering A/B tests\nEngineering GitLab Product\nEngineering Marketo\nFigma Process\nImage Guidelines\nIncident Response Matrix\nLocalization best practices\nMajor League Hacking Fellows\nMarketing Cookies\nMarketing Site Approval Process\nMarketo page template\nNavigation Repository\nOneTrust\nOneTrust Cookie Consent Implementation\nField Marketing\nField Marketing Epics\nField Marketing Owned Virtual Events\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvent Requirements\nGitLab Marketing Team READMEs\nBrian Tabbert README (Director, Sales Development (AMER))\nChristine Lee README (VP, Marketing Ops & Analytics)\nJean-Baptiste Larramendy README (AVP, Sales Dev)\nLaura Duggan's README\nLauren Barker's README\nMichael 'dnsmichi' Friedrich README (Staff Developer Advocate)\nNathan Dubord's README\nNikki Roth Silverberg README (Staff Marketing Operations Manager)\nSalina Tran | Senior Marketing Operations Manager\nGitLab Positioning FAQs\nGlobal Channel Marketing\nChannel  Marketing Epics\nChannel Marketing Menu of Services\nGlobal Channel Marketing - MDF Operations Process\nHyperscaler Campaign\nGrowth Direction\nInbound Marketing Handbook\nSearch Marketing\nGitLab SEO strategy\nSEO Content Manual\nSitebulb\nTesting for conversion at GitLab\nWebsite Health Resolution\nIntegrated Campaigns\n[NAME] Campaign\nCI/CD Campaign\nDevSecOps 2.0 Campaign\nIntegrated Marketing\nCorporate Event Marketing at GitLab\nDigital Strategy\nDigital Strategy Management\nGitLab PMG Team\nSocial Marketing Handbook\nOpen Social Media Strategies from GitLab\nSocial Advocacy Curator Program\nSocial Media Community Management\nSocial Media Project Management and Admin\nSocial Media Reporting\nTeam Member Social Media Advocacy\nIntra-Department Learning: Marketing Functional Conversations\nJourneys\nLifecycle Marketing\nEmail Best Practices\nEmails & Nurture Programs\nEmails Processes\nLocalization\nLocalization Engineering\nSmartling (retired)\nMarketing - Emergency Response\nMarketing Analytics\nAllocadia\nGoogle Analytics 4\nGoogle Tag Manager\nMarketing Analytics - Analytics Engineering\nMarketing Analytics Data Overview and General Information\nMarketing Analytics Data - L2R Models\nMarketing Analytics Data - SFDC Models\nMarketing Dashboards\nMarketing Metrics\nMarketing Persona Mapping\nMarketing Career Development - Overview\nContributor Success Career Framework\nContributor Success Career Framework: Intermediate Fullstack Engineer\nContributor Success Career Framework: Senior Fullstack Engineer\nContributor Success Career Framework: Staff Fullstack Engineer\nMarketing Career Development - Career Paths\nMarketing Department Efficiency Working Group - FY24\nMarketing Operations\n6sense\nAdobe Marketo Measure (formerly known as Bizible)\nAI in Marketing\nAsana\nBackblaze\nBrilliant\nCampaigns and Programs\nCognism\nEmail Management\nOperational Email Sends\nGoldcast\nGroove.co\nHightouch\niconik\nImpartner\nIterable\nJiffleNow\nLead Lifecycle Management\nLearning Marketing Operations\nList Imports\nLitmus\nMarketing Owned System Provisioning Instructions\nMarketing Technology Tiering System\nMarketo\nMarketo Interesting Moments\nMarketo Tech Stack Guide\nMarketo program/campaign support\nMQL SLAs\nMutiny\nPathFactory\nContent Library\nPathFactory Analytics\nPathFactory for Sales\nQualified\nRev\nRinglead\nSelf-Service List Imports\nTerminus Email Experiences\nTraction Lead Complete\nTypeform\nUserGems\nVartopia\nVimeo\nWorkato\nYouTube uses and access\nzapier\nZoominfo\nMarketing Project Management Guidelines\nEpics project management guidelines\nIssue and Kanban boards project management guidelines\nIssues project management guidelines\nLabels project management guidelines\nManaging Commitment\nMarketing Groups and Projects guidelines\nMilestones project management guidelines\nMarketing Strategy & Platforms\nMarketing Team Processes - How We Work\nPrescriptive Buyer Journeys\nSales Development\nTanuki Tech\nSales Plays\nSales Play: Expand with Package\nSales Play: Infrastructure Automation with GitOps\nSales Play: GitOps for First Order\nSMB Marketing\nTeam Member Social Media Policy\nThe Source Handbook\nUser Engagement\nUTM Strategy\nVirtual Events\nExternal Virtual Events\nSelf-Service Virtual Events\nWebcasts\nWebex Webcasts\nPeople Group\n360 Feedback\nAnti-Harassment Policy\nCompetencies\nContracts, Background Screenings, Probation Periods & PIAA\nDirectly Responsible Individuals (DRI)\nEmployment Solutions - Overview\nEngagement Surveys and Employer Awards\nGender and Sexual Orientation Identity Definitions and FAQ\nGitLab Internal Acceptable Use Policy\nGitLab Offboarding\nGitLab Offboarding FAQ\nGitLab Offboarding Standards\nGitLab Onboarding\nGitLab Onboarding Buddies\nMerge Request Buddies\nTaNewKi Tips\nGitLab People Operations Team\nGiveLab Volunteer Initiatives\nGlobal People Compliance at GitLab\nGuidance on Feedback\nIncident Response\nLearning & Development\nCareer Development and Mobility\nYour Individual Growth Plan (IGP) Journey\nElevate Programs\nElevate\nElevate Applied\nElevate Applied 1:1 Coaching\nElevate+\nElevate+ Participant Hub\nElevate+ Round 3 Pilot - FY25 Q3\nElevatePrep\nGitLab Basics\nGrowth and Development Fund\nGrowth and Development Processing Documentation for Talent Development\nTax Impacts of Different Growth & Development Benefits\nHone Partnership\nInternship for Learning\nLearning Initiatives\nPast Learning Initiatives\nRadical Candor at GitLab\nLevelUp\nLegacy Level Up - Thought Industries\nMentoring at GitLab\nGitLab Company-Wide Mentorship Program\nSelf-Paced External Trainings\nTeam Workshops\nTransitioning to a manager role\nBuilding high performing teams\nWork with the Learning and Development Team\nNew Hires, Celebrations and Significant Life Events\nOrganizational Change Management\nPaid Time Off at GitLab\nPeople Business Partner Team\nPeople Group Calendars\nGitLab Team Member Calendar\nPrograms Calendar - People Managers\nPeople Group Engineering\nEmployment Issues\nMiscellaneous\nNominator bot\nOffboarding Automation Flow\nOnboarding Automation Flow\nOrganization Change Automation Flow\nPeople Operations Internal Handbook\nSlack\nTeam PTO Calendar\nPeople Group Program Management\nPeople Group Project Program\nPeople Group READMEs\nCassiana Gudgenov's README\nTre Ely's README\nPeople Group Systems Architecture\nPeople Group Tech Stack Guide\nPeople Operations Team\nPeople Analytics\nData Guide to People Data Analysis\nPeople Analytics Data Governance\nPeople Analytics Survey Support\nPeople Analytics Tableau Dashboard Overview\nPeople Operations, Technology & Analytics Team Operating Principles\nPeople Success Performance Indicators\nPromotion Document Style Guide\nPromotions and Transfers\nPronoun Guidance and Information\nQuarterly Talent Review (QTR)\nRelocation\nTalent Assessment\nTalent brand\nContent library - life at GitLab\nPeople communications & team member engagement\nProcess for employer awards\nTracking reviews\nTalent Development Program\nTeam Member Relations at GitLab\nUsing GitLab at GitLab\nVisas\nWorkday Guide\nPeople Policies\nGitLab France S.A.S. Remote Work Charter\nGitLab France S.A.S. Right to Disconnect Charter\nGitLab Ireland Ltd Right to Disconnect Policy\nLeave of Absence\nUnited States Leave of Absence Policies\nPeople Policies - GitLab Inc (USA)\nProduct Development\nHow we work\nIssue Triage\nProduct Development Flow\nFeature flags in development of GitLab\nPhase template\nProduct Development Budgeting Process\nProduct Development Flow Success Metrics\nProduct Development Roles and Responsibilities\nR&D Interlock\nR&D PMO\nProduct Handbook\nAI-assisted features\nAI Continuity Plan\nUX maturity guidelines for AI-assisted features\nUX support for AI-assisted features\nCollaboration on shared feature and experience areas\nCollaboration on merge requests experience\nCollaboration on work items framework\nGitLab Product Management\nProduct Internship - Best Practices\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThe Product Manager Role at GitLab\nPersonas\nOrganization Archetype\nProduct Group and Team Pages\nAnalytics Section\nFulfillment Guide\nHow the growth section works\nPlan:Project Management\nProduct Data Insights\nCrash Course for Product Stage Resources\ndbt Cheat Sheet\nEngineering Metrics\nEngineering Metrics Dashboards\nExperimentation Design & Analysis\nGuide to Engineering Analytics Data\nPDI Dashboards, Analysis, & Insights\nProduct Data Insights Data Models Cheat Sheet\nTeam Processes\nVerify Product Group\nProduct Leadership Team Resources\nCPO Shadow Program\nPeople Group for Product Management\nProduct Leadership\nProduct Principles\nProduct Processes\nAnalytics Instrumentation Guide\nOur Commitment to Individual User Privacy in relation to Service Usage Data\nContinuous Interviews\nCross Functional Prioritization\nCustomer Issues Prioritization Framework\nDogfooding for R&D\nGitLab Early Access Program Direction\nMaking GIFs\nNew Product Introduction (NPI) Process\nProduct Customer Advisory Board\nProduct Management Tips and Tricks\nProduct Manager SAFE Guidance\nProduct Milestones\nProduct Procedures\nProduct Team Board Meeting Prep\nSensing Mechanisms\nTiering Strategy & Guidance for Product Managers\nUsing GitLab to plan work\nProduct READMEs\nCynthia 'Arty' Ng README\nProduct sections, stages, groups, and categories\nFeatures by Group\nFeatures Category Quick Lookup\nGitLab the Product\nAdvantages of a single application\nData flow GitLab vs. multiple applications\nUX Department\nAssessing Category Maturity\nCategory Maturity - Competitor Comparison\nCategory Maturity Scorecards\nCompetitor Evaluations\nDesign collaborator's playbook\nDocumenting research insights in Dovetail\nGitLab Navigation\nNavigation inventory\nHow to create a user persona\nHow we work\nCross-stage design collaboration\nDesign Pods\nFigma provisioning and deprovisioning\nProduct Design Manager Pairs\nProduct Design Pairs\nJobs to be Done at GitLab\nAnatomy of a JTBD Canvas\nJTBD - Beyond the Playbook\nJTBD Research Playbook\nValidated GitLab JTBD Canvases and Opportunity Scores\nPajamas Design System\nPajamas Design Review Process\nProduct Design\nDesign Reach Program\nDesign Studios\nHiring Product Designers\nProduct Design Manager Workflows\nUX Themes\nUX Theme Workshops\nProduct Designer Workflow\nA Guide for Designing with AI\nMerge Request Reviews\nPreview Merge Request Changes\nProduct Designer Design Tools\nProduct Designer Priorities and Capacity Management\nRemote Design Sprint\nTechnical Writing\nHiring Technical Writers\nThink Big & Think Small Meetings\nUser journeys\nUX Department Learning and Development\nGitLab-sponsored Tufts University Human Factors/Engineering Psychology Capstone Course\nUX Department Performance Indicators\nSystem Usability Scale\nSystem Usability Scale responder outreach\nUser Satisfaction (USAT) Survey\nUX Forum\nUX Heuristics\nUX Research at GitLab\nAnalyzing and synthesizing user research data\nAnalyzing survey verbatim\nAttending a research event\nChoosing a research methodology\nCollecting useful data\nCommunity contributions for Actionable Insights\nComparative testing for navigation\nCreating a first click study in Qualtrics\nCreating and managing a research participant panel\nDefining goals, objectives, and hypotheses\nDiary studies\nDoing UX research in the AI space\nEvaluating navigation\nFacilitating user interviews\nFinding SaaS users\nFirst click testing for navigation\nFoundational research\nHow the UX Research team operates at GitLab\nHow to Conduct UX Research Workshops\nHow to find existing research\nHow to recruit UX Research participants\nThe Common Screener: an efficient way to screen for multiple studies\nUX research recruiting email tips\nHow to write an effective screener\nInterview Carousel - Becoming a better interviewer 15 minutes at a time\nKano Survey for feature prioritization\nLongitudinal studies\nMental modeling\nPreference testing\nProblem validation and methods\nProblem Validation research for single-stage-group initiatives\nProduct Analytics for UX Research\nRapid Iterative Testing and Evaluation (RITE)\nResearch insights\nResearch prioritization\nResources for Research DRIs\nSolution Validation and methods\nStrategic research at GitLab\nGitLab Adoption Research Program\nSurveys\nCommon types of survey questions\nDesigning your survey\nHow to identify low quality data when designing and reviewing your survey\nPiloting your survey\nQualtrics tips and tricks\nSample sizes for surveys\nSurvey question scales\nTesting navigation: early Solution Validation\nTracking actionable insights\nTracking gold, silver, and bronze UX research projects\nTracking research velocity\nUnmoderated usability testing\nUsability benchmarking\nUsability testing\nUser story mapping\nUsing quantitative data to find insights\nUsing RITE to test navigation\nUsing the UX Research Google Calendar\nUX Bash\nUX Cloud Sandbox\nUX Research growth and development\nUX Research shadowing\nUX Research tools/applications\nUX Researcher pairings\nWhen to conduct UX Research\nWriting a discussion guide for user interviews\nWriting a website usability testing script\nUX Research Operations (ReOps) at GitLab\nGetting the word out about research insights\nHow to fill in for a UX Research Operations Coordinator\nNon-Disclosure Agreements for UX Research\nRecruitment methods\nReOps procurement best practices\nResearch participation gratuities\nThe IP Assignment and when to show it\nUX Resources\nDark Mode Rollout Playbook\nData for Design Decisions\nExperimentation for the User Experience Team\nHow to do UI Code Contributions\nStep by Step Guide to Make Code Changes\nUX Scorecards\nSales\nAccount Planning\nCoaching Account Planning for ASMs\nAssociating emails to Salesforce\nBest Practices for Building Value with Customers\nCommand of the Message\nCommand Plan\nDemystifying the Metrics Conversation\nOpportunity Consults\nProof Points\nCommercial Sales\nCommercial Sales Enablement\nGuide to the Required 7\nCommercial Sales Opportunity Stages\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nRenewals FAQ\nCommissions\nCommunicating with the Field\nField-FYI Slack Channel\nCRO Career Development Day\nCustomer & Partner Fireside Chat\nEnterprise Sales\nEffective Discovery\nFAQ from prospects\nField Communications\nField Alerts\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-04-02\nField Flash Newsletter - Edition 2020-05-05\nField Flash Newsletter - Edition 2020-06-05\nField Flash Newsletter - Edition 2020-07-07\nField Flash Newsletter - Edition 2020-08-06\nField Flash Newsletter - Edition 2020-09-01\nField Flash Newsletter - Edition 2020-10-08\nField Flash Newsletter - Edition 2020-11-02\nField Flash Newsletter - Edition 2020-12-07\nField Flash Newsletter - Edition 2021-01-06\nField Flash Newsletter - Edition 2021-02-01\nField Flash Newsletter - Edition 2021-03-01\nField Flash Newsletter - Edition 2021-04-06\nField Flash Newsletter - Edition 2021-05-03\nField Flash Newsletter - Edition 2021-06-07\nField Flash Newsletter - Edition 2021-07-06\nField Flash Newsletter - Edition 2021-08-02\nField Update Tickers\nGitLab Monthly Release Email to Sales\nHighspot at GitLab\nField Manager Development Program\nField Operations\nBusiness Operations - Salesforce Reference\nCareer Development at GitLab & RSOE\nCustomer Success Monthly Metrics Dashboard\nCustomer Success Operations\nCS Rep Account and Oppty Assignment Processes\nCustomer Programs\nAll-Customer CSAT Survey (CS)\nAvailable Customer Programs\nCustomer Contact Role Tagging for Personalized Communications\nCustomer Newsletter\nCustomer Programs Content & Style Guide\nCustomer Satisfaction Surveys\nGetting Help from Digital Customer Success Programs\nGainsight Administration\nGainsight User Administration\nGainsight: Go-To-Market Technical Documentation\nRattle Configuration and Maintenance\nRenewals Operations Team\nCustomer Success Strategy & Analytics\nData Intelligence\nData Governance\nEcosystem Operations\nGitLab Sales FAQ - Selling with Partners\nPartner FAQ - Selling with GitLab\nEnterprise Applications - CRM Team\nDataloader Installation, Deletion, and Upgrade Instructions at GitLab\nDynamic Quote Templates\nGo-To-Market Integrated Environments\nGo-To-Market Technical Documentation\nBooking Metric Technical Documentation\nIncent Technical Documentation\nLicense Utilization Salesforce App\nSalesforce Config\nSalesforce Tech Stack Guide\nField Enablement\nExecutive Sponsorship Program\nField Team Recognition Programs\nGo-to-Market (GTM) Enablement motion\nSales Manager Best Practices\nGo to Market\nGo to Market Rules of Engagement\nGrowth Resources\nRequesting Internal Support in Salesforce\nSales Operations\nDeal Desk & Order Management KPI - Results\nDeal Desk Handbook\nLinkedIn Sales Insights\nOrder Management Handbook\nPO Acceptance Criteria\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nSales Operations Owned Provisioning\nSales Order Processing\nSales Strategy and Analytics Handbook\nFY22 Field Planning\nSales Headcount\nSales Strategy Projects\nSpekit for Operations/Process/Tools Updates\nField Team Meetings\nGitLab Field QBRs\nHigh Velocity Sales and First Orders Team at GitLab\nHigh Velocity Sales & FO's Product GTM at GitLab\nHVS-FO Data and Ops Team at GitLab\nIdea to Production Demo\nSet up your own test OpenShift Origin instance for the Idea to Production Demo\nInside Sales Department\nInterview with an IT Agility Director\nManager Operating Rhythm\nChannel Sales Manager Operating Rhythm\nCommercial Sales Manager Operating Rhythm\nEnterprise Area Sales Manager Handbook\nSMB Area Sales Manager Operating Rhythm\nMEDDPPICC\nNegotiate to Close\nPresident's Club\nPublic Sector\nREADMEs\nFrancis Potter - Senior Pro Services Engineer\nIan Steward - CRO\nNoah Ing's README\nTim Poffenbarger's README\nSales Discovery and Qualification Questions\nSales Forecasting\nSales Operating Procedures\nDeal Closure\nEngage & Educate the Customer\nFacilitate The Opportunity\nRetain and Expand\nSales Order Processing\nSales Processes\nGitLab Version Check\nSales Process > Account Management\nSales Prospecting\nSales Quick Start\nGraduating from Sales Onboarding\nSales & Customer Success Quick Start Learning Path\nSales & Customer Success Onboarding Process\nSales Quick Start (SQS) Learning Objectives\nSales Quick Start (SQS) Workshop\nTargeted Sales & Customer Success Roles for Sales Quick Start (SQS)\nSales Renewals Process Guide\nSales Revenue Programs\nSales Term Glossary\nARR in Practice\nSales Territories\nLATAM Region Handbook\nSales Territories - Deprecating\nSales Training\nAdditional Resources for Sales Training\nField Accreditation Program\nField Accreditation: Customer Success Managers\nField Accreditation: Solutions Architects\nField Accreditation: Strategic Account Leaders\nField Enablement Spotlight: Continuous Education at GitLab\nEnablement\nCollaborating with Community Programs\nField Functional Competencies\nProduct Certification for GitLab Field Team Members\nSales Kickoff\nSales Kickoff 2020\nSales Kickoff 2021\nSales Kickoff 2022\nSales Kickoff 2023\nSales Kickoff Planning\nSocial Selling\nTechnical Questions for Sales\nTechnical Skills Exchange\nTerritory Planning\nThe Customer-Ready Shadow Program\nTips for Selling GitLab or Partner Professional Services\nTotal Addressable Market\nUnderstanding How Our Customers Use GitLab\nUsing Gainsight at GitLab\nUsing Gainsight within Sales\nSecurity at GitLab\nAccess Management Policy\nChange Management Policy\nContributing to GitLab the Product as a Security Team Member\nControlled Document Procedure\nCorporate Security (CorpSec)\nAutomation\nCorpSec Helpdesk Slack Issue Automation\nGoogle Workspace Deprovisioning\nCorporate Security (CorpSec) Support\nCorporate Security Onboarding 101 Guide\nCorporate Security USB Device Encryption Guide\nCorpSec Direction\nCorpSec End User Services (EUS)\nAccess Requests (ARs)\nAccess Requests (AR) FAQs\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nZoom\nZoom - Additional Configuration\nZoom AI Companion\nZoom Meetings\nZoom Recording\nZoom Security\nZoom Setup\nZoom Tips\nGitLab IT Onboarding 101\nGitLab IT - Mobile Device Onboarding\nGitLab Laptop Management\nLaptop Offboarding and Returns\nLaptop Ordering\nLaptop Repairs\nLaptop Security Configuration Standards\nApple ID for Work\nLaptop Backups\nLaptop Disk Encryption\nLaptop Firewalls\nLaptop iCloud Drive\nLaptop Passwords\nLaptop Personal Use\nLaptop Remote Management and Monitoring\nLaptop Software Updates\nLaptop Touch ID Biometrics\nLaptop Web Browsers\nLaptop Wireless Networks\nLocking Laptop When Unattended\nLaptop Vendor Information\nLaptop Wipe (Factory Reset) Process\nHow To Use Google Calendar Delegate\nHow To Use Google Drive Sharing\nOkta\nOkta Admin Onboarding\nOkta FAQs\nCorpSec Engineering\nCorpSec Device Trust Engineering\nCorpSec Identity Engineering\nCorpSec Infrastructure Engineering\nCorpSec Platform Engineering\nCorpSec SaaS Engineering\nCorpSec Services\n2FA and Password Account Resets for Team Members\nAccess Requests (AR) Services\nAccess Requests FAQ\nCorpSec Change Management\nCorpSec Helpdesk\nCorpSec Infrastructure Services\nCorpSec Mobile Devices (Phones and Tablets) Services\nCorpSec Offboarding Services\nCorpSec Onboarding Services\nCorpSec Role Change Services\nEmail Security Standards\nExternal Collaborators (Customers, Partners, Vendors)\nIdentity Management Services\nService Accounts\nTemporary Service Provider Services (Contractor Users)\nCorpSec Systems and Tech Stack\n1Password\n1Password Groups\n1Password Passkey Guide\n1Password Setup Guide\n1Password Vaults\nAccess Check (accesschk)\nAccess Control (access.gitlab.systems)\nAmazon Web Services (AWS)\nAWS Billing\nAWS Cells Dev Org\nAWS Cells Prod Org\nAWS Dedicated Dev Organization\nAWS Dedicated Dev Accounts\nAWS Dedicated Prod Organization\nAWS Marketplace Organization\nAWS Red Ops Organization\nAWS Sandbox Organization\nAWS Sandbox Accounts\nAWS Services Organization\nAWS Services Accounts\nAmazon Workspaces (VDI)\nAWS Services User Management\nAWS Systems Organization\nAWS Training Org\nApple macOS\nApple macOS Setup Guide\nAzure\nBackblaze\nDemo Systems\nGitLab Product Administration for Internal Team Members and Temporary Service Providers\nCorporate Systems GitOps Configuration Management (cfg.gitlab.systems)\nGitLab Product Development Instance (dev.gitlab.org)\nGitLab SaaS Staging for Internal Team Members (staging.gitlab.com)\nGitLab Sales Demo Instance (cs.gitlabdemo.cloud)\nGitLab Self Managed Deployments for Team Members\nGitLab Self Managed Internal Licenses for Team Members\nGitLab.com SaaS for Internal Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Groups for Team Members and Temporary Service Providers\nGitLab.com SaaS Internal Licenses for Team Members and Temporary Service Providers\nGitLab.com SaaS Projects for Team Members and Temporary Service Providers\nGitLab.com SaaS Top-Level Namespace Groups for Internal Company Use Cases\nGitLab.com SaaS User Setup for Team Members and Temporary Service Providers\nProduct Production GitOps Configuration Management (ops.gitlab.net)\nGoogle\nGoogle Calendar\nGoogle Calendar Delegation Guide\nGoogle Calendar Setup Guide\nGoogle Chrome\nGoogle Cloud Platform (GCP)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev)\nGoogle Cloud (GCP) Organization (cells-dev / gitlab-cells.dev) Projects\nGoogle Cloud (GCP) Organization (cells-prd / gitlab-cells.com)\nGoogle Cloud (GCP) Organization (dedicated-dev / gitlab-private.org)\nGoogle Cloud (GCP) Dedicated Dev Projects\nGoogle Cloud (GCP) Organization (dedicated-prd / gitlab-dedicated.com)\nGoogle Cloud (GCP) Organization (gitlab.com)\nGoogle Cloud (GCP) Organization (gitlab.com) Projects\nGoogle Cloud (GCP) Organization (gitlab.com) User Management\nGoogle Cloud (GCP) Organization (sandbox / gitlabsandbox.cloud)\nGoogle Cloud (GCP) Sandbox Projects\nGoogle Cloud (GCP) Organization (sys / gitlab.systems)\nGoogle Cloud Billing\nGoogle Docs and Drive\nGoogle Docs and Drive Access Request Guide\nGoogle Docs and Drive External Sharing Guide\nGoogle Docs and Drive Internal Sharing Guide\nGoogle Groups\nGoogle Mail (Gmail)\nGoogle Mail (Gmail) Setup Guide\nGoogle Mail (Gmail) User Delegation Guide\nGoogle Mail (Gmail) Verification Guide\nGoogle User Accounts\nGoogle User Account Setup Guide\nGoogle Workspace (Organization)\nGoogle Workspace Apps\nHackyStack (Sandbox Cloud)\nJamf MDM\nJamf MDM Policies\nJamf MDM Setup Guide\nLaptop VPN for Public Networks and System Administration\nNordLayer VPN Setup Guide\nNordLayer VPN Troubleshooting Guide\nLinux Desktop OS\nLinux Desktop OS Security Standards\nLinux Desktop OS Setup Guide\nLumos\nLumos Access Request Guide\nLumos Access Reviews Guide\nMicrosoft Windows\nNira (Google Drive Security) User Guide\nOkta Workforce Identity and SSO\nOkta Access Request Guide\nOkta Applications\nOkta Application Setup Guide\nOkta Groups\nOkta Group Members Management Guide\nOkta Group Nomenclature\nOkta Groups Rules\nOkta Group Rule Nomenclature\nOkta Organization and Policies\nOkta User SSO\nOkta SSO User Setup Guide\nOkta User Android Setup Guide\nOkta User FAQ\nOkta User iPhone Face ID Setup\nOkta User Linux Setup Guide\nOkta User Lockout (Password or 2FA) Guide\nOkta User macOS Setup Guide\nOkta User Passkey Setup Guide\nOkta User Provisioning\nOkta User SSO Guide (Touch ID 2FA Setup)\nOkta YubiKey 2FA Guide\nOkta Verify Device Trust\nOkta Verify Device Trust Android Setup Guide\nOkta Verify Device Trust iOS Setup Guide\nOkta Verify Device Trust macOS Setup Guide\nOkta Workflows\nFlows\nGoogle Workspace Deprovisioner\nSentinelOne Endpoint Detection and Response (EDR)\nSentinelOne EDR Setup Guide\nSentinelOne EDR Troubleshooting Guide\nSlack\nSlack Apps\nSlack Channels\nSlack External Contributors (Users) Guide\nSlack Groups\nSlack User Setup Guide\nSlack Webhooks Guide\nTeleport\nTraining Systems\nYubikey User Guide\nYubikey Self-Service Purchasing Guide\nYubikey WebAuthn 2FA User Guide\nYubiKey User Guide for Android Mobile Devices\nYubiKey User Guide for Apple iOS Mobile Devices\nYubiKey User Guide for GitLab.com User Accounts\nYubiKey User Guide for Google\nYubiKey User Guide for Okta\nZoom\nZoom Setup Guide\nCorpSec Team Directory\nHow We Work (CorpSec)\nCritical Projects\nCustomer Support Operations\nChange Criticalities\nCoding Standards\nDivision of Responsibilities\nDocumentation\nCalendly\nGitLab\nContact Management Projects\ngl-support-bot\ngl-support-bot-admin\nInvestigations\nIssue boards\nLabels\nPersonal Data Requests\nSupport Super Form\nSupport team YAML files\nincident.io\nPagerduty\nRecommended Setup\nRuby Gems\nSupport Readiness\nSalesforce\nSKU Mapping\nSlack\nNotify Oncall\nVBT Slackbot\nWorkflows\nSupport Super Form Processor\nSupportLogic\nSync repo files\nSystem Checkers\nSystem Criticality\nTeam member licenses\nTranscend\nWorkato\nZendesk\nAgents\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEmails\nEnd-users\nExplore\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center sections\nHelp Center user segments\nLiquid language\nMacros\nMetrics definitions\nOrganization Deletion\nOrganization fields\nOrganizations\nRoles\nRound Robin\nSandbox\nSchedules\nSearching\nSLAs\nSSAT\nTags\nThemes\nTicket Fields\nTicket Processor\nTickets\nTriggers\nUser fields\nViews\nWebhooks\nZD-SFDC Sync\nFAQs\nWorkflows\nAnnual Review\nAudits\nChange Mangement\nContact Management Projects\nContacting third parties\nCustomer Support Operations Handover Procedures\nGitLab\nMirroring\nProject setup\nSupport Super Form\nSupport Team YAML files\nWorking issues\nWorking merge requests\nHandling Incidents\nHow to be a Support Ops On-call\nincident.io\nPagerduty\nRuby gems\nSalesforce workflows\nAccount merges\nSKU Mapping\nToken rotation\nWorkato\nWorking Personal Data Requests\nZendesk\nAgent Sync\nAPI\nApps\nArticles\nAutomations\nCES Surveys\nDev Pulse\nDynamic content\nEnd-users\nForms\nGroups\nGuide\nHelp Center categories\nHelp Center management permissions\nHelp Center management user segments\nHelp Center sections\nMacros\nMaintenance Tasks\nOrganization fields\nProvisioning\nRoles\nRound robin\nSchedules\nShared Organizations\nSLAs\nSSAT\nThemes\nTicket fields\nTicket processor\nTickets\nTriggers\nUS Government Support exceptions\nUser Association\nUser fields\nViews\nWebhooks\nWorking tickets\nZD-SFDC Sync\nEngaging with Security\nExternal Security Communications Procedure\nGitLab Audit Logging Policy\nGitLab Password Guidelines\nGitLab Security Resource Center\nGitLab Security Secure Coding Training\ngitleaks on your laptop\nGoogle Cloud Security Best Practices\nIdentity and Access Management v3\nIdentity Access Requests\nIdentity Approvals\nIdentity Architecture Boundaries\nIdentity Counterparts\nIdentity GitOps Architecture\nAWS Configuration Management\nGCP Configuration Management\nOkta Configuration Management\nIdentity Infrastructure Management\nIdentity Kingdoms and Tech Stack\nIdentity Platform\nAccess Check (accesschk)\nIdentity Platform CI/CD Auditlog Pipeline\nIdentity Platform CI/CD Manifest Pipeline\nIdentity Platform CI/CD Provisioning Pipeline\nIdentity Platform GitLab Provisioning\nIdentity Platform Google Provisioning\nIdentity Platform Okta Provisioning\nIdentity User Guide - Audit and Compliance\nIdentity User Guide - Change Management\nIdentity User Guide - Developers\nIdentity User Guide - Identity Operations\nIdentity User Guide - Incident Response\nIdentity User Guide - Managers\nIdentity User Guide - Offboarding Operations\nIdentity User Guide - Onboarding Operations\nIdentity User Guide - Policy Management\nIdentity User Guide - Team Members\nIdentity User Guide - Tech Stack Applications\nIndividual Development Plan\nInformation Security and Artificial Intelligence Management System\nInformation System Contingency Plan (ISCP)\nIsolating your work notebook from other devices in your home network\nPenetration Testing Policy\nPGP Process\nProduct Security\nApplication Security\nApplication Security - Async Communication\nApplication Security - Automation and Monitoring\nApplication Security - Dogfooding and Product Feature Requests\nApplication Security Metrics\nApplication Security - Capacity Indicators, Classifications, and Workflows\nApplication Security - Key Performance Indicators\nApplication Security Results Indicators\nApplication Security Risk Indicators\nApplication Security Operations\nApplication Security Review Process\nApplication Security Runbooks\nApplication Security Engineer Handling priority::1/severity::1 Issues\nApplication Security Engineer Working With SIRT\nAppSec Engineer's Local Setup\nAppSec Frequently Asked Questions\nAppSec Holiday and Friends and Family Day Coverage\nAppSec Review Template Process\nAppSec Threat Modeling Process\nAppSec's Engagement Plan and Ways to Measure Usage of Secure Code Warrior\nBug Hunting Day Process\nCVSS Calculation\nDependency review guidelines for AppSec engineers\nFederal AppSec Container Scan Result Review Process\nGeneral process for the application security team in patch releases\nHackerOne Process\nHandling unintended vulnerability disclosures\nHow to handle upstream security patches\nInvestigating Package Hunter Findings\nJiHu Contribution Merge Monitor Reports\nSecurity Dashboard Review\nTriage Rotation\nVerifying Security Fixes\nApplication Security Stable Counterparts\nApplication Security Team Organization\nApplication Vulnerability Management Procedure\nGitLab Application Security Inventory\nMilestone Planning\nProduct Security Incident Response Team (PSIRT) Services Overview\nReproducible Builds\nReproducible Vulnerabilities\nResponding to customers security scanners review requests\nSecure Design & Development Team Services Overview\nThreat Modeling\nThreat Modeling HowTo\nData Security\nInfrastructure Security\nInfraSec Issue Lifecycle\nInfrastructure Security - Capacity Indicators and Workflows\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSecurity Platforms & Architecture\nProduct Security Engineering\nMetrics\nMilestone Planning\nProduct Security Engineering Runbooks\nHackerOne Tooling\nRotate Service Account Personal Access Tokens (PATs)\nRunway guidelines\nTeam Member Upskilling\nProduct Security Requirements\nProduct Security Risk Register\nWell-Articulated Product Security Risks Guide\nSecurity Architecture\nZero Trust\nSecurity Interlock\nCustomer Zero Triage Process\nInternal Co-Create Process\nRequest Customer Zero Validation from Security\nSecurity Research\nSupply Chain Risk Management Strategy\nVulnerability Management\nClosing Vulnerability Tracking Issues\nDevelopment Labels\nEncryption Policy\nIncident Response Guidance\nInfrastructure Vulnerability Management Procedure\nSLA exceptions\nVulnerability Lifecycle\nVulnerability Management - Standard Issue Labels\nVulnerability Management Automation\nVulnerability Management Code Review and Development Standard\nVulnerability Management Definition: What Does Fixed Mean?\nVulnerability Management Team\nVulnerability Management Team Runbooks\nFixing vulnerabilities\nSo, You've Got A Vulnerability\nWeekly Triage\nVulnerability Resolution SLAs\nWhat is a vulnerability?\nWhy should we fix vulnerabilities?\nProviding assistance to GitLab.com customers during customer-based security incidents\nResponding to Ransomware\nRoot Cause Analysis for Critical Vulnerabilities\nSecurity and Technology Policies Management\nSecurity and Technology Policy Exception Process\nSecurity Assurance\nAutomation and Compliance\nField Security Team\nAnnual Field Security Study\nAnswerBase Quality Guide\nField Security Engagement in QBRs\nField Security Observation and OFI Quality Guide\nField Security Research Program\nField Security Sales Training Program\nGitLab's Customer Assurance Activities\nIndependent Security Assurance\nKnowledge Base\nRequest for Information Process\nSecurity Evangelism\nTrust Center Guide\nObservation Management Procedure\nProduction Readiness: Compliance Assessment\nSecurity Compliance Team\nAccess Review Procedure\nAutomated Evidence Collection and Control Testing\nExternal Audits, Certifications, and Attestations\nFedRAMP Vulnerability Deviation Request Procedure\nGap Analysis Program\nGCF Security Control Lifecycle\nGitLab FedRAMP Authorization Program\nGitLab Security Compliance Controls\nPCI Charter\nPCI Internal Control Review Procedures\nPolicy-as-code\nRisk-based Compliance at GitLab\nRisk-based Control Testing\nSecurity Content Automation Protocol (SCAP) Scanning\nSoftware-Bill-of-Materials (SBOM) Maturity Model and Implementation Plan\nSecurity Enablement Team Charter\nSecurity Governance Program\nPhishing Program\nSecurity Assurance - Automations Library\nSecurity Assurance Automation\nSecurity Awareness Training Program\nSecurity Awareness Training Standard\nSecurity Training\nSecurity Risk Team\nSecurity Operational Risk Management (StORM) Program & Procedures\nBusiness Impact Analysis\nCritical System Tiering Methodology\nSecurity Third Party Risk Management\nSOX CUEC Mapping Procedure\nSecurity Terms Glossary\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nSecurity Change Management Procedure\nSecurity Culture Committee\nSecurity Department Gearing Ratios\nSecurity Department Learning & Development\nSecurity Department Performance Indicators\nSecurity Division Dogfooding Program\nSecurity Division Ecosystem\nSecurity Division Maturity Models\nSecurity Internship\nSecurity OKRs\nSecurity Operations\nSecurity Operations On-Call Guide\nRed Team\nHow the Red Team Operates\nRed Team Rules of Engagement\nOpportunistic Attacks\nPurple Teaming at GitLab\nAtomic Testing\nRed Team Stealth Operations\nSecurity Incident Response Team - SIRT\nSecurity Incident Response Guide\nSecurity Incident Severity and Priority Matrix\nSecurity Incident Communications Plan\nSecurity Shadow: Security Operations\nEngaging the Security Engineer On-Call\nSecurity Logging Overview\nCritical Logging Tiering Methodology\nSignals Engineering Team (SET)\nThreat Intelligence Team\nTrust & Safety Team\nAbuse on GitLab.com\nIntellectual property on gitlab.com\nTrust & Safety Team Frequently Asked Questions\nTrust & Safety, Do It Yourself\nSecurity Planning\nSecurity Requirements for Development and Deployment\nSecurity READMEs\nByron's README\nJoseph Longo README\nJosh Lemos - CISO\nJulie Davila's README\nNick Malcolm's README\nTy Dilbeck's README\nSecurity Shadow Program\nSecurity Shadow: Product Security\nSecurity Shadow: Security Assurance\nSecurity Standards\nGitLab Cryptography Standard\nGitLab Data Classification Standard\nGitLab Password Standards\nGitLab Projects Baseline Requirements\nGitLab Security Logging Standards\nGitLab Token Management Standard\nPhysical Security Standard for Company Assets\nRecords Retention & Disposal\nSoftware Development Lifecycle Standard\nSecurity Threat Management\nIdentity Engineering Team\nSoftware Development Lifecycle Policy\nSupply Chain Security for Open Source Dependencies and Libraries\nTransparency by Default\nWomen in Security\nWorking in Security\nSolutions Architects Handbook\nDemonstrations\nSA Career Development\nSA Manager Operating Rhythm\nSA Offsites\nSA Practices\nBusiness Value Services\nCommercial Solutions Architect Office Hours\nCustomer Success Plan\nDay In The Life of a Developer\nDeliberate Practice\nEffective Objection Handling Practice\nGitLab Dedicated Prospects\nMonthly Release Quiz\nSelling Professional Services\nSolution Architect (SA) Communities of Practice\nIntegration Technologies\nSolution Architecture Retrospective Feedback\nSolutions Architects - Subject Matter Experts\nHow to Request A SME\nSME Cadences\nSME Collateral and Resources\nSME Engage with Product Management\nSME Gather Feedback from Customers\nSME Operations - Collaboration Project, Groups, Slack Channels\nSME Program Structure, Roles and Responsibilities\nSolutions Architects (SA) Ride Alongs\nStrategic Solution Selling\nValue Stream Discovery\nWhat is Cognitive Bias\nWhiteboard-based Facilitation\nWorkshops\nSolutions Architect Sales Plays\nSolutions Architects - Strategic Field Organization\nSolutions Architects Content Calendar\nSolutions Architects GitLab Docs Section\nSolutions Architects Onboarding\nSolutions Architects People Leader Shadow Program\nSolutions Architects Processes\nAccount Planning for Solutions Architects\nAlliance SA Engagement Model\nChannel SA Engagement Model\nEcosystem SA Engagement Model\nHigh Velocity SA Engagement Model\nSA Opportunity Hygiene\nSolutions Architecture Collaboration Project\nSolutions Architecture Data Capture\nCustomer Success Plans\nEmail Logging in Gong\nSalesforce Field Logging Requirements\nSolutions Architecture Activity Logging\nTechnical Discovery\nTechnical Win\nSolutions Architecture Center of Excellence Handbook\nDemo Architect Offerings\nDemo Systems Terms of Service\nWorkshop Contribution Guidelines\nTools and Resources\nGitLab Trial Guidelines\nHands-on Workshop\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nAutomated Software Delivery POV Scope and Acceptance\nDevOps Platform POV Scope and Acceptance\nDevSecOps POV Scope and Acceptance\nSoftware Compliance POV Scope and Acceptance\nRFI/RFP Process\nStack Overflow for Teams\nAdminstration of StackOverflow\nAdopting StackOverflow\nMeasuring StackOverflow Impact\nOnboarding Users on StackOverflow\nSupport Team Handbook\nAdvanced Support Topics\nAI and Support Work\nBrowser Extensions\nCustomer Support Department Performance Indicators\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nAccount Teams working with ASEs\nASE Workflows and Other Standard Practices\nASE - Where to Document and Manage Work for Accounts\nASE Time Tracking\nIntroductory Meeting\nOnboarding an ASE Account\nPlanning PTO as ASE\nQBRs for ASE accounts\nReports and Dashboards for ASEs\nTicket Tsunami Workflow\nBecoming and Being an ASE\nEmergency Workflow\nGlobal Support working with ASEs\nGitLab Support On-Call Guide\nGratis Support for Prospects\nKnowledge Base\nFAQ & Best Practices\nKnowledge Base Features and Roadmap\nKnowledge Base Known Issues\nKnowledge Base lifecycle\nCreating and updating a knowledge article\nReviewing and publishing a knowledge article\nKnowledge Base Style Guide\nKnowledge Base Training Resources\nKnowledge Base Workflow\nReporting and Metrics\nLicensing & Renewals\nAMER Licensing & Renewals Team\nLicensing & Renewals Glossary of Terms\nLicensing & Renewals Workflows\nAutomation Request\nAWS Marketplace license\nBilling, invoice and payments requests\nCommunicating Licensing & Renewals Workflow Changes\nCustomersDot\nAssociating purchases with additional accounts\nCustomer Console\nCustomerDot Account Related Problems\nCustomersDot Admin Support Tools\nTroubleshoot Errors While Making Purchases on CustomersDot\nHandling L&R Internal Requests\nManaging Product Issues\nMerging or splitting license/subscription requests\nQuarterly Subscription Reconciliations (QSR)\nRequests for documents or signatures from GitLab\nSelf Managed\nCloud licensing and the support exemption process explained\nCreating a license key\nCreating a wider community license\nDelivery of license files\nGCP Marketplace license\nGenerating HackerOne Reporter Award Licenses\nGenerating NFR (Not For Resale) Licenses\nHandling flagged licensing provisioning failures\nHandling GitLab Dedicated License Requests\nHandling multi-year subscriptions\nHandling Opt Out of Services Usage Data request\nHandling trials and extensions for GitLab Self-Managed\nSending licenses to a different email address\nTroubleshooting and categorising license activation errors\nTroubleshooting cloud licensing\nTroubleshooting license purchase errors\nWeekend Emergencies - Self-Managed License Request\nSoftware as a Service\nAssociating a subscription with a namespace & troubleshooting errors\nHandling compute minutes and Storage\nHandling trials, extensions and plan changes on GitLab.com\nSubscription and billing issues\nSupporting GitLab Community Programs\nUpdating customer organization name\nWorkflow for handling Plan/License Ticket Attention Requests\nWorking with reseller related requests\nWorking with Sales\nZendesk L&R Ticket Form\nPartnerships\nAlliance Partner Support Guide\nAlliance Partners\nJiHu Partnership\nOpen Partners\nSelect Partners\nProviding Excellent Customer Service\nReadiness Team\nSupport Readiness - Data\nRequesting Gratis Support\nSupport Channels\nSupport Engineer Career Path\nSupport Engineer Resources\nStaff Support Engineer\nSupport Engineering Mentorship\nSupport Engineer Responsibilities\nSupport Engineering Data Analysis Community\nSupport Glossary\nSupport Incident Response Framework\nSupport Learning & Training\nSupport Hybrid Learning Path Checkpoint\nSupport Onboarding Buddy\nTransition training module to GitLab Learn\nSupport Managers\nAreas of Focus Workgroup\nChange Management in GitLab Support\nGetting To Know Your Team Members\nMetrics Analysis Workgroup\nMetrics Analysis - Hypothesis and Actions\nPerformance Management for Support Managers\nPromoting a Support Engineer\nSenior Support Leadership Sync\nSupport 1:1s\nSupport Engineering Manager Responsibilities\nSupport Hiring\nSupport Leadership Sync\nSupport Managers AMER\nSupport Team hazards and challenges\nSupport Pods\nAdvanced Search Support Pod\nAI Support Pod\nAuthentication and Authorization Support Pod\nCI/CD Support Pod\nCode Contributions Support Pod\nDatabase Support Pod\nDocumentation Support Pod\nExample Support Pod\nGeo Support Pod\nGET Support Pod\nGit and Gitaly Support Pod\nGitLab Dedicated Support Pod\nGitLab Dedicated Monthly Business Review Prep\nGitLab Runner Support Pod\nImport and Integrate Support Pod\nIntegrations Support Pod\nKubernetes Support Pod\nLicensing and Renewals Support Pod\nPerformance and Reliability Support Pod\nSec Support Pod\nTraining Support Pod\nUpgrade Support Pod\nSupport Stable Counterparts\nSupport Team APAC\nSupport Team Member Time Off\nSupport time off buddy system\nSupport Workflows\n2FA Removal\nA Support Engineering Manager guide to account escalations\nAbuse Report Review Request\nAccount Deletion & Data Access Requests - Introduction\nAccount Deletion & Data Access Requests - Workflows\nAccount Hold\nAccount Ownership Verification\nAI Workflow\nBrowserStack\nCalendly Setup for Support\nChatOps Commands for GitLab.com\nCMOC Practice Events\nCommunication tips\nCommunity Forum Workflows\nConfirmation Emails\nConverting a Support Emergency into an Account Escalation\nCost optimization of Cloud Services\nCustom domain verification on GitLab.com\nCustomer calls\nCustomer Emergency Retrospectives\nDebugging LDAP\nDEPRECATED - Ensuring correct SLA and Zendesk views\nDev Pulse\nDiagnose Errors on GitLab.com\nDMCA Removal Requests\nDuo Chat case scenarios for support\nEmergency Exception Workflow\nEnabling feature flags for projects or groups on GitLab.com\nFeedback and Complaints\nFieldnote Issues\nGitLab Dedicated Logs\nGitLab Dedicated Observability and Monitoring (Grafana)\nGitLab Dedicated Overview\nGitLab Dedicated Switchboard Troubleshooting\nGitLab Performance Tool (GPT) Quick Start\nGitLab.com custom limits\nGitLab.com Overview\nGoogle Cloud Credit Troubleshooting\nHandling data as a Support Engineer\nHandling Emotionally-Charged Tickets\nHandling fiscal residency document (COR) requests\nHandling Internal Requests\nHandling Licensing & Subscription Requests\nHandling Requests for More Premium Trial compute minutes\nHandling Sales Information Requests\nHosted runners for GitLab Dedicated\nHow to be a Support Manager On-call\nHow to do a WIR Podcast\nHow to Get Help\nHow to Handle Product Offering Migration Tickets\nHow to Perform CMOC Duties\nHow to Perform Customer Emergencies Duties\nHow to Perform GitLab Dedicated CMOC Duties\nHow to Respond to Tickets\nHow to write workflows\nIdentifying the Cause of IP Blocks on GitLab.com\nImproving Documentation\nInvestigate Blocked Pipeline\nInvestigate Commits\nJira with GitLab\nLicensing & Subscription Workflows\nLocked, Blocked and Banned Accounts\nLog and audit requests\nLooking up customer account details\nLooking up customer technical details\nLost Email Account\nMaking Changes and Taking Actions on a user's behalf\nMarking tickets as spam in Zendesk\nMattermost\nName Squatting Policy\nObsolete Page - Was \"Meeting FRT SLA\"\nOOO Ticket Management\nPairify\nPairing sessions\nPatching an instance\nPersonal Data Removal Requests\nPrinting ticket thread without internal notes\nProcessing Signed Data Processing Addendums (DPAs)\nProject Exports for Customers\nReal Time Blocklist Delisting\nRegional and Cross-Regional Workflows\nCross-Region Coordination and Collaboration\nRemove Validation\nRemoving Sensitive Information\nRequest for source code of LGPL-licensed components in GitLab Advanced SAST\nRestoring Deleted Data Requests\nRestoring Deleted Data Requests for GitLab Dedicated\nSaaS Tier for Support Quick Reference\nSaaS, Self-Managed and Dedicated Troubleshooting tables\nSales and Customer Success Escalations\nSatisfaction (CES) review and responding (for Managers)\nScheduling Support Coverage for a Company-wide Event\nSending Notices\nSentry\nService Desk Troubleshooting\nSetting ticket priority\nSidekiq support\nSubpoenas, Court Orders and other requests for user information\nSupport Assisted Customer Requests\nSupport Team Knowledge Areas\nSuspecting a ticket to be malicious\nTeam Workflows\nPerformance reviews\nTechnical Interview Setup\nWeekly Support Team Call\nWorking on a promotion\nTesting Environment\nTicket transfers\nTicketing Style Guide\nTracking Incidents\nTriaging Tickets\nTroubleshooting GitLab Cloud Native chart deployments\nUnbabel Translation in Zendesk\nUpgrade Assistance workflow\nUse of Admin Notes\nUsing Kibana\nVery Breached Tickets\nWorking on High Priority All-Region Tickets\nWorking on tickets\nWorking on Zendesk automations, triggers, macros, views, etc.\nWorking with Customer Support Operations\nWorking with Issues\nWorking with Security\nWorking with Support Pods\nWorking with the NPM GitLab Registry\nWorking With GitLab Support\nGitLab Support - Support Ticket Attention Requests (STAR)\nTeamOps - Redefining Teamwork for the Modern Era\nTeamOps Direction\nTeamOps Growth\nTeamOps Partners\nTools and tips\n1Password and Environment Variables\nAI at GitLab Tips\nAI use cases within the Security Division at GitLab\nClaude.ai Tips\nGitLab Duo Tips\nEditors and IDEs\nemacs\nGitLab Web IDE\nJetBrains IDEs\nCode Inspection\nWhy are there noinspection comments\nCommon JetBrains Setup and Configuration\nIndividual IDEs\nGoLand\nRubyMine\nWebstorm\nLicenses\nTracked JetBrains Issues\nSublime Text\nvim\nVisual Studio Code (VS Code)\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nBookmark these GitLab keyword search paths\nSlack\nZoom\nView page source\nEdit this page\nMaintainers\nBill Staples\nStella Treas\nDevin Rogozinski\nSherida McMullan\nRobert Allen\nOn This Page\nCREDIT\nü§ù Collaboration\nüìà Results for Customers\n‚è±Ô∏è Efficiency\nüåê Diversity, Inclusion & Belonging\nüë£ Iteration\nüëÅÔ∏è Transparency\nWhy have values\nFive dysfunctions\nOperating principles\nHow to scale the business while preserving GitLab values?\nWhy our values are public\nHierarchy\nUpdating our values\nHow do we reinforce our values\nWhat to do if values aren‚Äôt being lived out\nPermission to play\nPlaying politics is counter to GitLab values\nValues make choices\nWhat is not a value\nQuestions from new team members\nMission\nMitigating Concerns\nGitLab Values Quiz\nThe Handbook\nGitLab Values\nGitLab Values\nLearn more about how we live our values at GitLab\nCREDIT\nGitLab‚Äôs six core values are\nü§ù Collaboration\n,\nüìà Results for Customers\n,\n‚è±Ô∏è Efficiency\n,\nüåê Diversity, Inclusion & Belonging\n,\nüë£ Iteration\n, and\nüëÅÔ∏è Transparency\n,\nand together they spell the\nCREDIT\nwe give each other by assuming\ngood intent. We react to them\nwith values emoji\nand they are made actionable below.\nAbout our values\nWe take inspiration from other companies, and we always go for the\nboring solutions\n. Our co-founder, Sid Sijbrandij, has\nshared the origin\nof each of the CREDIT values, but\njust like the rest of our work, we continually adjust our values and strive to make them better.\nGitLab values are a living document.\nIn many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our\nChief People Officer\nand if you work at GitLab, also @mention them in the\n#values\nSlack channel\n.\nDriving Results with CREDIT\nfrom\nGitLab\non\nVimeo\n.\nü§ù Collaboration\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve.\nSimilarly, you can rely on others for help and advice‚Äîin fact, you‚Äôre expected to do so.\nAnyone can chime in on any subject, including people who don‚Äôt work at GitLab.\nThe person who‚Äôs responsible for the work decides how to do it,\nbut they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\nKindness\nWe value caring for others.\nDemonstrating we care for people provides an effective framework for challenging directly and delivering feedback.\nKindness doesn‚Äôt mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers.\nKindness means you make a separation between the work and the person, you can criticize someone‚Äôs work but still be respectful to the person.\nGive as much positive feedback as you can, and do it in a public way.\nShare\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members.\nBe willing to invest in people and engage in open dialogue.\nFor example, consider making private issues public wherever possible so that we can all learn from the experience. Don‚Äôt be afraid of judgement or scrutiny when sharing publicly, we all understand\nit‚Äôs impossible to know everything\n.\nEveryone can\nremind\nanyone in the company about our values.\nIf there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\nShare problems you run into, ask for help, be forthcoming with information and\nspeak up\n.\nNegative feedback is 1-1\nGive negative feedback in the smallest setting possible.\nOne-on-one video calls are preferred.\nNegative\nfeedback\nis distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement\nin a public channel\n, respectfully and\ntransparently\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nWe deal with negative all the time at GitLab. If it‚Äôs not a problem, then why are we discussing it? We deal with negativity a lot, and that‚Äôs also part of our ambition.\nIf you want to get better, you talk about what you can improve. We‚Äôre allowed to publicly discuss negative things; we‚Äôre not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\nNegative feedback can be given in a group setting if it‚Äôs to someone higher in the management chain. This shows that no one is above feedback.\nProvide feedback in a timely manner\nWe want to solve problems while they are\nsmall\n.\nIf you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your\nskip-level\n, a more senior person, or a\npeople business partner\n.\nSay thanks\nRecognize the people that helped you publicly, for example in our\n#thanks chat channel\n.\nWhen publicly thanking, it‚Äôs important to recognize the following:\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\nThanking a person in\n#thanks\nshould be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while\nassuming positive intent\n, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\nThere are a number of good ways and places to say thanks. We shouldn‚Äôt limit saying thanks to just the\n#thanks\nchannel\n.\nGive feedback effectively\nGiving feedback is challenging, but it‚Äôs important to deliver it effectively.\nWhen providing feedback, always make it about the work itself;\nfocus on the business impact and not the person.\nMake sure to provide at least one clear and recent example.\nIf a person is going through a hard time in their personal life, then take that into account.\nAn example of giving positive feedback is our\nthanks chat channel\n.\nFor managers, it‚Äôs important to realize that team members react to a negative incident with their managers\nsix times more strongly\nthan they do to a positive one.\nKeeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself.\nIn the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member‚Äôs performance going forward.\nGive recognition generously, in the open, and often to\ngenerate more engagement\nfrom your team.\nGet to know each other\nWe use a lot of\ntext-based communication\n, and if you know the person behind the text, it will be easier to prevent conflicts.\nSo we encourage people to get to know each other on a personal level through\ninformal communication\n, for example, virtual\ncoffee chats\n, and during\nGitLab Summit\n.\nReach across company departments\nWhile it‚Äôs wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\nDon‚Äôt pull rank\nIf you have to remind someone of the position you have in the company, you‚Äôre doing something wrong.\nPeople already know\nour decision-making process\n.\nExplain why you‚Äôre making the decision, and respect everyone irrespective of their function.\nThis includes using the rank of another person -\nincluding the CEO\n- to sell an idea or decision.\nAssume positive intent\nWe naturally have a double standard when it comes to the actions of others.\nWe blame circumstances for our own mistakes, but individuals for theirs.\nThis double standard is called the\nFundamental Attribution Error\n.\nIn order to mitigate this bias, you should always\nassume positive intent\nin your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\nWhen\ndisagreeing\n, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g.\n‚Äústraw man‚Äù\n). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent‚Äôs position. We call this arguing against a ‚Äústeel‚Äù position, instead of a ‚Äústraw‚Äù one. This concept is borrowed from\nargue the ‚Äústeel man‚Äù\ntechnique.\nA ‚Äústeel‚Äù position should be against the absolute most effective version of your opponent‚Äôs position ‚Äî potentially even more compelling than the one they presented. A good ‚Äústeel‚Äù position is one where the other person feels you‚Äôve represented their position well, even if they still disagree with your assumptions or conclusion.\nAddress behavior, but don‚Äôt label people\nThere is a lot of good in\nthis article\nabout not wanting jerks on our team, but we believe that\njerk\nis a label for behavior rather than an inherent classification of a person.  We avoid classifications.\nSay sorry\nIf you made a mistake, apologize as soon as possible.\nSaying sorry is not a sign of weakness but one of strength.\nThe people that do the most work will likely make the most mistakes.\nAdditionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else.\nMistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\nNo ego\nDon‚Äôt defend a point to win an argument or double-down on a mistake.\nYou are not your work; you don‚Äôt have to defend your point.\nYou do have to search for the right answer with help from others.\nIn a GitLab Unfiltered\ninterview\n, GitLab Head of Remote Darren M. adds context on this operating principle.\nIn many organizations, there‚Äôs a subtle, low-level, persistent pressure to continually prove your worth.\nAnd I believe that this fuels imposter syndrome and wreaks havoc on\nmental health\n.\nWhat‚Äôs so troubling to me is how often perception is reality.\nIn other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\nAt GitLab, ‚Äúno ego‚Äù means that we foster and support an environment where results matter, and you‚Äôre given agency to approach your work in the way that makes sense to you.\nInstead of judging people for not approaching work in an agreed-upon way, ‚Äúno ego‚Äù encourages people to glean inspiration from watching others approach work in new and different ways.\nSee others succeed\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\nDon‚Äôt let each other fail\nKeep an eye out for others who may be struggling or stuck.\nIf you see someone who needs help, reach out and assist. This might involve offering to\npair program\nor setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance.\nWe are a team, so we succeed and shine together by supporting each other!\nPeople are not their work\nAlways make suggestions about examples of work, not the person.\nSay ‚ÄúYou didn‚Äôt respond to my feedback about the design‚Äù instead of ‚ÄúYou never listen‚Äù.\nAnd, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\nDo it yourself\nOur collaboration value is about helping each other when we have questions, need critique, or need help.\nNo need to brainstorm, wait for consensus, or\ndo with two what you can do yourself\n. The Bolt Handbook refers to this as the\nFounder Mentality\n, where all team members should approach the problem as if they own the company.\nBlameless problem solving\nInvestigate mistakes in a way that focuses on the situational aspects of a failure‚Äôs mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team.\nWe hold blameless\nroot cause analyses\nand\nretrospectives\nfor stakeholders to speak up without fear of punishment or retribution.\nShort toes\nPeople joining the company frequently say, ‚ÄúI don‚Äôt want to step on anyone‚Äôs toes.‚Äù\nAt GitLab, we should be more accepting of people taking initiative in trying to improve things.\nAs companies grow, their speed of decision-making goes down since there are more people involved.\nWe should counteract that by having short toes and feeling comfortable letting others contribute to our domain.\nFor example, pointed, respectful feedback to a\nproposal\nby GitLab‚Äôs CEO led to his own merge request being closed. However, it is not required to respond to comments.\nIt‚Äôs impossible to know everything\nWe know we must rely on others for the expertise they have that we don‚Äôt.\nIt‚Äôs OK to admit you don‚Äôt know something and to ask for help, even if doing so makes you feel vulnerable.\nIt is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole.\nAfter your question is answered,\nplease document the answer so that it can be shared\n.\nDon‚Äôt display surprise when people say they don‚Äôt know something, as it is important that everyone feels comfortable saying ‚ÄúI don‚Äôt know‚Äù and ‚ÄúI don‚Äôt understand.‚Äù\n(As inspired by\nRecurse\n.)\nCollaboration is not consensus\nWhen collaborating, it is always important to stay above radar and work\ntransparently\n, but collaboration is\nnot consensus\nand disagreement is part of collaboration.\nYou don‚Äôt need to ask people for their input, and they shouldn‚Äôt ask you ‚ÄúWhy didn‚Äôt you ask me?‚Äù.\nYou don‚Äôt have to wait for people to provide input, if you did ask them.\nYou don‚Äôt need to have everyone agreeing to the same thing - they can\ndisagree, commit, and advocate\n.\nTwo-way doors decisions\ncan be reversed as part of\ndisagree, commit, and advocate\n, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster.\nWe believe in permissionless innovation ‚Äî you don‚Äôt need to involve people, but everyone can contribute.\nThis is core to how we\niterate\n, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\nCollaboration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate collaboration when we take action to help others and include other‚Äôs (both internal and external) input (both help and feedback) to achieve the best possible outcome.\nGitLab Job Grade\nDemonstrates Collaboration Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops collaboration skills by learning from other team members\nKnowledge Assessment for Individual Contributors\n6\nGrows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels.\n7\nModels collaborative behavior for fellow team members and others within the group.\n8\nCoaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate.\nKnowledge Assessment for People Leaders\n9\nFosters collaborative decision making and problem solving across the departments.\n10\nDrives team collaboration across divisions/departments, silos, and division boundaries.\n11\nDevelops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders.  Utilizes contacts to build and strengthen internal support base\n12\nLeads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders.\n14\nChampions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\nüìà Results for Customers\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\nThe Results for Customers value is displayed through the following operating principles:\nSet Ambitious & Measurable goals\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious\nmission\nand\nvision\n, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results.  We agree in writing on measurable goals. We have and report against\nKPIs\nwith guiding targets.\nUnderstand our customers\nAll GitLab team members should understand our customers‚Äô needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab‚Äôs customers.\nWe better understand customers and their needs through:\nReviewing public facing GitLab issues from our customers and users\nDogfooding\nour product to understand the user experience\nReading customer stories from Marketing and Sales\nAttending Customer fireside chats\nLearning feedback from our customers and users on product features and roadmap\nCo-create\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\nKeep end users in sight\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of\nthe Concur effect\n.\nArvind Narayanan\n, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that‚Äôs if you even remember the correct sequence the first time).\nSoftware companies can be breathtakingly clueless when there‚Äôs a layer of indirection between them and their users. Everyone who‚Äôs suffered through Blackboard will have the same reaction to this: try having less functionality!\nRyan Falor\nfollowed up on Narayanan‚Äôs tweet with his definition of the Concur Effect:\ndecision makers are not direct users\nfeatures are overwhelming and disjointed\nuser experience gets worse over time\nSee\nthe Hacker News discussion\nfor a specific UX example.\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\nCustomer results are more important\nthan:\nWhat we plan to make\n. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won‚Äôt let existing plans be an obstacle to working on what will drive the most customer value.\nLarge customer requests\n. Catering to requests from large customers leads to the\ninnovator‚Äôs dilemma\n, we need to also focus on results for small and future customers.\nOur existing scope\n. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a\nsingle application\nfor the DevOps lifecycle.\nOur assumptions\n. Every company works differently, so we can‚Äôt assume that what works well for us will support our customers‚Äô needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\nWhat we control\n. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\nMeasure impact, not activity\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn‚Äôt feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don‚Äôt have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\nDogfooding\nWe\nuse our own product\nin the way our users do to surface improvements that will lead to better\ncustomer results\n. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\nAll team members use GitLab to collaborate on this handbook.\nWe capture content and processes in Git repos and manage them with GitLab.\nWhen something breaks, doesn‚Äôt work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\nGive agency\nWe give people agency to focus on what they think is most beneficial. If a meeting doesn‚Äôt seem interesting and someone‚Äôs active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\nChallenger mindset\nChallenging the status quo can lead to remarkable results - we must never stop. A\nchallenger mindset\nrequires that we continually ask ourselves bold, difficult questions about our business and the problems we solve, while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be\ntenacious\n. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism, internally as GitLab team members, we must focus our efforts inwardly on achieving our very best results for customers to win market share.\nGrowth mindset\nYou don‚Äôt always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on\ntheir trajectory, not their pedigree\n. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\nCross-functional optimization\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Don‚Äôt optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from\nthe GTM teams\n, the right decision may be to push your own team‚Äôs target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\nIn the context of\ncollaboration\n, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\nEmbrace Tenacity\nWe refer to this as ‚Äúpersistence of purpose‚Äù. As talked about in\nThe Influence Blog\n, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\nHave Ownership & Accountability\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\nSense of urgency\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and\nways we communicate\n, so the compounding of results can begin and we can focus on the next improvement.\nOperate with a bias for action\nIt‚Äôs important that we keep our focus on action, and don‚Äôt fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\nDisagree, commit, and advocate\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is\na common principle\n.\nEvery decision can be changed;\nour\nbest decision was one that changed an earlier one\n.\nIn a manager-report relationship, usually the report is the\nDirectly Responsible Individual\n(DRI).\nThe manager may disagree with the final decision, but they still commit to the decision of the DRI.\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes,\nmany or all individuals may disagree yet choose not to speak up\n, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback.\nDissent\nis expression of that disagreement. However, it can be difficult and even socially expensive.\nExpression of feedback is a way for everyone to grow and learn, and is\nbased on facts rather than opinions\n. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and\nassume the decision was made with the best intent\n.\nYou have to achieve results on every decision while it stands, even when you are trying to have it changed.\nYou should communicate with the\nDRI\nwho can change the decision instead of someone who can‚Äôt.\nEscalate to unblock\nIf there is a disagreement and you can‚Äôt move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\nResults Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate results when we do what we promised to each other, customers, users, and investors.\nGitLab Job Grade\nDemonstrates Results Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops the skills needed to commit and execute on agreed actions.\nKnowledge Assessment for Individual Contributors\n6\nApplies commitment to results and demonstrates ability to execute on agreed actions.\n7\nModels a sense of urgency and commitment to deliver results.\n8\nCoaches team members to collaborate and work iteratively towards impact with the focus on the outcome and not activity worked.\nKnowledge Assessment for People Leaders\n9\nFosters a culture of ownership of personal performance.\n10\nDrives efficient execution of results ensuring collaboration between team members.\n11\nDevelops quarterly OKR's ensuring the performance and results of one or more teams.\n12\nLeads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\nEVP/CXO\nLeads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n‚è±Ô∏è Efficiency\nAt GitLab, efficiency means producing\nresults\nwithout wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\nWhen we work internally with other team members, we leverage GitLab‚Äôs unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab‚Äôs ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\nOnly Healthy Constraints\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a\nstartup\n. We try to limit ourselves to\nhealthy constraints\n.\nWrite things down\nWe document everything: in the handbook, in meeting notes, in issues.\nWe do that because ‚Äú\nthe faintest pencil is better than the sharpest memory\n.‚Äù\nIt is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\nBoring solutions\nUse the simplest and most boring solution for a problem, and remember that\n‚Äúboring‚Äù\nshould\nnot be conflated with ‚Äúbad‚Äù or ‚Äútechnical debt.‚Äù\nThe speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps.\nDon‚Äôt pick an interesting technology just to make your work more fun;\nusing established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\nMake a conscious effort to\nrecognize\nthe constraints of others within the team.\nFor example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\nSelf-service and self-learning\nTeam members should first\nsearch for their own answers\nand, if an answer is not readily found or the answer is not clear, ask in public as we all should have a\nlow level of shame\n.\nWrite down any new information discovered\nand pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\nEfficiency for the right group\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself ‚ÄúFor whom does this need to be most efficient?‚Äù Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\nBe respectful of others‚Äô time\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\nSpend company money like it‚Äôs your own\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business\nresults\nrelative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\nWe have\nguidelines\naround this operating principle to help team members better understand our expensing process and expectations.\nFrugality\nAmazon states it best\nwith: ‚ÄúAccomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.‚Äù\nShort verbal answers\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\nKeep broadcasts short\nKeep one-to-many written communication short, as mentioned in\nthis HBR study\n: ‚ÄúA majority say that what they read is frequently ineffective because it‚Äôs too long, poorly organized, unclear, filled with jargon, and imprecise.‚Äù\nManagers of one\nWe want each team member to be\na manager of one\nwho doesn‚Äôt need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\nFreedom and responsibility over rigidity\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process,\nor creating interdependencies\n, because they enable faster decision velocity and higher rates of\niteration\n.\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\nAccept mistakes\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\nMove fast by shipping the minimal valuable change\nWe value constant improvement by iterating quickly, month after month. If a task is not the\nsmallest viable and valuable thing\n, cut the scope.\nEmbrace change\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to\nhold management accountable for being deliberate\n.\nEfficiency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\nGitLab Job Grade\nDemonstrates Efficiency Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain.\nKnowledge Assessment for Individual Contributors\n6\nDevelops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently.\n7\nModels a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product.\n8\nTakes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame.\nKnowledge Assessment for People Leaders\n9\nTakes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others' time and promote self-service and self-learning.\n10\nDrives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value.\n11\nDevelops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value.\n12\nLeads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value.\nEVP/CXO\nChampions GitLab's strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\nüåê Diversity, Inclusion & Belonging\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build a culture that is\ninclusive\nand supports all team members equally in the process of achieving their professional goals. We work to make everyone feel welcome and to increase the participation of underrepresented groups in our community and company.\nBias towards asynchronous communication\nTake initiative to operate\nasynchronously\nwhenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are\nstructuring their day\naround pressing commitments at home or in their community.\nThis is demonstrated by communicating recordings of\nmeetings\n, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to\ndocumentation\nrather than pressuring others to be online outside of their working hours.\nEmbracing uncomfortable ideas and conversations\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don‚Äôt understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply ‚Äúappearing to care‚Äù.\nUnderstanding the impact of microaggressions\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\n‚ÄúThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.‚Äù -  Derald W. Sue\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\nSeek diverse perspectives\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to\nGitLab‚Äôs definition of Diversity, Inclusion & Belonging\n. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term ‚ÄúBrag Document‚Äù was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the\npsychological safety\nto raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a\ndiverse perspective\n, a survey was conducted in one of the\nTeam Member and Advocacy Resource Group (TMRG)\nchannels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\nMake family feel welcome\nOne of the unique elements to an\nall-remote culture\nis the ability to visit a person‚Äôs home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\nShift working hours for a cause\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there‚Äôs a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you‚Äôll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it‚Äôs easy for them to catch up.\nBe a mentor\nPeople feel more included when they‚Äôre supported. To encourage this, and to support diversified learning across departments, consider GitLab‚Äôs\nInternship for Learning\nprogram.\nCulture fit is a bad excuse\nWe don‚Äôt hire based on culture or select candidates because we‚Äôd like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a\nvalues fit\n, not a culture fit.\nWe want cultural diversity instead of cultural conformity. Said differently:\n‚Äúculture add‚Äù > ‚Äúculture fit‚Äù\nor ‚Äúhire for culture contribution‚Äù since our\nmission is that everyone can contribute\n.\nReligion and politics at work\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn‚Äôt mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company.\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our\nCode of Business Conduct and Ethics\n, avoid posting articles that reference specific political figures or parties.\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our\nCode of Business Conduct and Ethics\n.\nWe‚Äôre a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to\ndiversityinclusion@gitlab.com\nor\n#diversity_inclusion_and_belonging\n.\nQuirkiness\nUnexpected and unconventional things make life more interesting.\nCelebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\nBuilding a safe community\nDo\nnot\nmake jokes or unfriendly remarks about\ncharacteristics of the people who make up GitLab and how they identify\n.\nEveryone has the right to feel safe when working for GitLab and/or as a part of the GitLab community.\nWe do not tolerate abuse,\nharassment\n, exclusion, discrimination, or retaliation by/of any community members, including our team members.\nYou can always\nrefuse\nto deal with people who treat you badly and get out of situations that make you feel uncomfortable.\nUnconscious bias\nWe recognize that unconscious bias is something that affects everyone and that the\neffect it has on us as humans and our company is large.\nWe are responsible for understanding our own implicit biases and helping others\nunderstand theirs. We are continuously\nworking on getting better at this topic\n.\nInclusive benefits\nWe list our\nParental Leave\npublicly so people don‚Äôt have to ask during interviews.\nInclusive language & pronouns\nUse\ninclusive\nlanguage.\nFor example, prefer ‚ÄúHi everybody‚Äù or ‚ÄúHi people‚Äù to ‚ÄúHi guys‚Äù, and ‚Äúthey‚Äù instead of ‚Äúhe/she‚Äù. While there are several good guides from folks like\n18f\n,\nUniversity of Calgary\n, and\nBuffer\non using inclusive language, we don‚Äôt keep an exhaustive list.\nWhen new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative.\nIf your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don‚Äôt think it is a problem.\nAnd if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it,\napologize gracefully and move on\n; there is no need to dwell on it, and you can work to avoid making that mistake in the future.\nPlease also visit our\nGender and Sexual-orientation Identity Definitions and FAQ\npage if you have questions around pronouns and other topics related to gender / sexual orientation.\nLearn how to pronounce other people‚Äôs names\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive.\nIf it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested\nin learning how to pronounce their name correctly. This applies to everyone you are in contact with:\nteam members, customers, candidates for jobs, and anyone else.\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not\nspeak up about it.\nOther negative behaviors include giving a person a nickname without their permission, or\nactively avoiding using their name in sync calls.\nIt might be challenging to pronounce names from a different language or culture than your\nown, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\nAsk the person for help in a private space: ‚ÄúI‚Äôm sorry, I don‚Äôt think I am pronouncing your name correctly. Can you help me with the correct pronunciation?‚Äù\nUse the written and recorded pronunciation tools in Slack.\nUse online tools such as videos recorded on YouTube or\nNameShouts\n.\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\nUse of nicknames\nSome people might choose to use a nickname, for example: ‚ÄúBob‚Äù instead of ‚ÄúRobert‚Äù.\nAs long as this is their choice this is perfectly acceptable.\nWe should avoid assigning a nickname to a person without their permission.\nSlack pronunciation features\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by\nediting your profile\n.\nInclusive interviewing\nThis is documented on our page about\ninterviewing\n.\nInclusive meetings\nBe consciously inclusive in\nmeetings\nby giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab\nAMAs\n, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\nInclusive and fair policy to regions with fewer employees\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\nSee Something, Say Something\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don‚Äôt feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn‚Äôt respectful or inclusive.\nEmbracing Neurodiversity\nNeurodiversity\nrefers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring\nunique skills and abilities\nwhich can be harnessed for a\ncompetitive advantage\nin many fields (for example,\ncybersecurity\n), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into\ntransparency\n, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\nRemember,\nbrains work differently\nand always\nassume positive intent\n, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\nWe also recommend that all team members review the\nReasonable Accommodation\nprocess. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\nThe most important thing that managers can do is facilitate an environment in which all team members feel\npsychologically safe\nenough to make requests for\nwhat they need\nin order to do their job.\nFamily and friends first, work second\nLong-lasting relationships\nare the rocks of life\n, and come before work. As someone said in our\n#thanks channel\nafter helping a family member for five days after a hurricane: ‚ÄúTHANK YOU to GitLab for providing a culture where ‚Äúfamily first‚Äù is truly meant‚Äù.  Use the hashtag:\n#FamilyAndFriends1st\nEquity not just equality\nEquity vs. Equality: What‚Äôs the Difference?\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\nDiversity, Inclusion & Belonging Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\nBeing an Ally\nBeing Inclusive\nRecognizing Bias\nGitLab Job Grade\nDemonstrates Diversity & Inclusion Competency by‚Ä¶\nDemonstrates DIB Behaviors by‚Ä¶\n(Should not be considered an exhaustive list)\nKnowledge Assessment\n4\nLearns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn.\n5\nDevelops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes.\nDIB\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, \"like\" slack posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nKnowledge Assessment for Individual Contributors\n6\nHas a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute.\n7\nActively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members.\n8\nImplements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences.\nDIB\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, like posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nHiring Manager ensure a diverse candidate slate and interview panel\nActive participant and advocate for department DIB goals\nKnowledge Assessment for People Leaders\n9\nProactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments.\n10\nDrives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate.\nBlack is Tech\n,\nGrace Hopper\n11\nEmbeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value.\n12\nLeads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as an\nTMRG\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\nEVP/CXO\nChampions the value of Diversity, Inclusion and Belonging into the company's strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as a\nTMRG\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\nüë£ Iteration\nMerriam-Webster\ndefines iteration as the ‚Äúthe action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.‚Äù At GitLab, we iterate to do the\nsmallest valuable thing to get fast feedback and efficiently reach a desired end goal\n. Feedback can be from internal users (dogfooding), a limited number of external users (through our\nearly access program\n), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\nMerge in codebase\nDogfood\nHave some external users (early access program)\nEnsure global optimization (use standardized systems)\nPlan beyond the iteration\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the\nrelease process is not iteration\nthough. Iteration is also not a\nreplacement for having a plan\n. We expect you to know where you are going, but you can iterate to get there.\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You‚Äôre doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don‚Äôt deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn‚Äôt. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don‚Äôt know how to make the transition, and it‚Äôs hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you‚Äôre doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We‚Äôre quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only ‚Äúx‚Äù amount of time on it, and that the next iteration will contain ‚Äúy‚Äù and be ready on ‚Äúz‚Äù.\nIteration enables\nresults\nand\nefficiency\n.\nIn the\nGitLab Unfiltered video\nembedded above, GitLab co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\nStart with a long-term vision\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don‚Äôt start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\nIteration is no substitute for planning\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\nTime-bound objective: Where we want to be in a year\nUX: User experience we are working toward\nQuality: What quality is sufficient quality, inclusive of security\nSuccess metric: Usage we want at a specific time\nData schema: The data schema we need to measure progress towards project goals\nGTM plan: How we want to go to market\nEnablement: When we‚Äôd plan to train and enable the support and field teams\nMarketing: When we‚Äôd launch marketing (doesn‚Äôt have to be at release)\nSecure by design: default to the most secure configuration\nThe release process is not iteration\nMoving through the release process is not iteration.\nThe release process can include:\nDogfooding\nEarly access\nIncremental release using\na feature flag\nDevelopment stage progression\n(such as experiment to beta)\nRelease\nAnnouncement\nWhile\ndevelopment stages\ncan be used to indicate release progress, is not itself iteration.\nIterate toward global maximum\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a ‚Äúlocal maximum‚Äù of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not ‚Äúhalf-baked‚Äù and align with work being done across the entire organization.\nDon‚Äôt wait\nDon‚Äôt wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don‚Äôt wait until you have a better version. Don‚Äôt wait until you record a better video. Don‚Äôt wait for an event (like\nGitLab Summit\n). Inventory that isn‚Äôt released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don‚Äôt wait we signal intent to others that we have a purpose to resolve something.\nNote\n: ‚ÄúDon‚Äôt wait‚Äù should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\nSet a due date\nWe always try to set a due date. If needed, we cut scope.\nIf we have something planned for a specific date, we make that date. For example we\nshipped over 133 monthly releases\n. But every one of them doesn‚Äôt contain all the features we planned.\nIf we planned an announcement for a certain date, we might announce less or indicate what is still uncertain.\nBut we set a due date because having something out there builds trust and gives us better feedback.\nCleanup over sign-off\nAs discussed in\nSid‚Äôs interview on iteration\n, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn‚Äôt coherent), but we try to ensure that people don‚Äôt need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\nStart off by impacting the fewest users possible\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\nFew users over many users\nInternal users (dogfooding) over external users\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\nReduce cycle time\nShort iterations reduce\nour cycle time\n. Merging frequently also prevents merge conflicts.\nWork as part of the community\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\nMinimal Valuable Change (MVC)\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user‚Äôs outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the\nproduct handbook\n, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we‚Äôre adding useful functionality without obvious bugs or usability issues.\nMake a proposal\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone‚Äôs input. Having a proposal will be a much more effective use of everyone‚Äôs time. Every meeting should be a review of a proposal. We should be\nbrainwriting on our own instead of brainstorming out loud\n. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don‚Äôt let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don‚Äôt have a proposal, don‚Äôt let that stop you from highlighting a problem, but please state that you couldn‚Äôt think of a good solution and list any solutions you considered.\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\nEverything is in draft\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and\nassuming others have low context\n, confusion can be reduced as people have shared access to information.\nUnder construction\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\nOpen a feedback issue that provides context about the initial MVC (\nexample\n)\nEnsure the direction page articulates a long-term plan (\nexample\n)\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (\nexample\n)\nLow level of shame when dogfooding\nIn many organizations, you take a risk when you put forth any work that‚Äôs not perfect, work where you haven‚Äôt spent endless cycles planning for contingencies or counterpoints. Because of this, you‚Äôre incentivized to invest a lot of time and effort into preparing for ‚ÄòWhat if?‚Äô scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you‚Äôve squandered time that you could have spent improving it through iteration.\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it‚Äôs perfect, and instead celebrate the small changes.\nCultural lens\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like ‚Äúit doesn‚Äôt have to be perfect‚Ä¶‚Äù can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating.\nGiving feedback\nand ensuring\npsychological safety\nare necessary for every iterative attempt.\nFocus on improvement\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well.\nIn every conversation, inside and outside the company, we should ask a question: What do you think we can improve?\nThis doesn‚Äôt mean we don‚Äôt recognize our successes; for example, see our\nSay Thanks\nvalue.\nWe are positive about the future of the company. We are\nS\nhort\nTe\nrm\nC\nritical\nA\nnd\nL\nong\nT\nerm\nO\nptimistic (\nSTeCALTO\n, for short).\nBe deliberate about scale\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in\nthis article by Paul Graham\n.\nResist bundling\nResist the urge to bundle a series of smaller iterations so team members don‚Äôt see a project as their last (or best) opportunity to contribute. It‚Äôs tempting to\ncreate encompassing projects or initiatives\nthat roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\nMake two-way door decisions\nMost decisions are easy to reverse. In these cases, the\nDirectly Responsible Individual\nshould go ahead and make them without approval. Only when you can‚Äôt reverse them should there be a more thorough discussion. By\nembracing iteration\nand making two-way door decisions, we are more efficient and achieve more results.\nChanging proposals isn‚Äôt iteration\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether\ninternal users or a limited customer group\n, can you learn from feedback. When you‚Äôre changing a proposal based on different opinions, you‚Äôre frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\nEmbracing Iteration\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it‚Äôs where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the\nend of the first iteration\nrather than a\nhypothetical future state\nthat requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\nMake small merge requests\nWhen you are submitting a merge request for a code change, or a process change in\nthe handbook, keep it as small as possible. If you are adding a new page to the\nhandbook, create the new page with a small amount of initial content, get it merged\nquickly via\nHandbook Usage guidelines\n, and then add additional sections iteratively with subsequent merge requests.\nSimilarly, when adding features to GitLab, consider ways to\nreduce the scope\nof the feature before creating the merge request to ensure your merge request is as small as possible.\nAlways iterate deliberately\nRapid iteration can get in the way of\nresults\nif it‚Äôs not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we‚Äôve set development plans),\norganizational structure\nor\nproduct scope alignment\n(where real human stresses and team stability are involved), sales methodologies (where we‚Äôve trained our teams) and this values page (where\nwe use the values to guide all GitLab team members). In those instances, we add additional review to the approval\nprocess; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the\nGitLab Handbook Usage\npage and takes place via merge request approvals.\n12 things that are not iteration\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we‚Äôve seen mistaken as iteration, but don‚Äôt meet our definition of iteration.\nReducing quality, or lowering goal posts\nAvoiding or reducing documentation\nCompromising on security\nDelivering something that‚Äôs not the recommended path or on by default\nShipping something of no value\nAn excuse to focus on unimportant items\nMoving through the release process\nRevisions you don‚Äôt ship or publish\nAn excuse to impose unrealistically tight timelines\nAn excuse to avoid planning\nImposing long hours\nExpecting others to fix your work\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\nIteration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\nGitLab Job Grade\nDemonstrates Iteration Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops own knowledge by trying and failing. When asking questions isn't content with silence or unhelpful/incomplete responses, seeks out primary sources.\nKnowledge Assessment for Individual Contributors\n6\nActively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team's help. Ships things that aren't 100% knowing that you'll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you'll help colleagues learn.\n7\nIndependently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way.\n8\nIs able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not \"two-way door decisions\". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller.\nKnowledge Assessment for People Leaders\n9\nIn addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions.\n10\nIn addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions.\n11\nIn addition to upholding the requirements of a  Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division.  They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved.\n12\nIn addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision.\nEVP/CXO\nIn addition to upholding the requirements of a Fellow/VP,  the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\nüëÅÔ∏è Transparency\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn‚Äôt mean it can‚Äôt be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you‚Äôve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say ‚ÄúWhat‚Äôs the\nkaizen\nmoment here?‚Äù and find a better way without hurt feelings.\nEven as a\npublic company\n, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a\npublic company\n, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\nWhen there are exceptions, material that is\nnot public by default is documented\n.\nPublic by default\nEverything at GitLab is public by default.\nThe public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\nOne example of transparency at GitLab is the\npublic repository of this website\nthat also contains this\ncompany handbook\n. Others include the\nGitLab CE\nand\nGitLab EE\nissue trackers, as well as\nmarketing\nand\ninfrastructure\n. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons,\nand processes with the\nwhole community\nand the world in the spirit of open source, which we believe creates more value than it captures.\nIn line with our value of transparency and being public by default, all GitLab team member\nprofiles\nshould be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the\nPrivate profile\noption is unchecked\nin your profile settings\n. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\nBecause we are public by default and have the\nSAFE framework\nwe don‚Äôt need to make cases for why things should be transparent. If something is unSAFE and needs to remain\nnot public\nit can be.\nNot public\nWe make information public by default because\ntransparency is one of our values\n.\nHowever it is\nmost important to focus on results\n.\nTherefore, a category of information is\npublic\nunless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is\nnot public by default\non our communication page.\nIf you believe something shouldn‚Äôt be public that currently is (or vice versa), then\nmake a merge request\nto the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the\nDRI\n. When content contains information which is\nnot public\nit is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a ‚Äúnot public/internal only‚Äù note. Always share publicly what we can.\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify.\nCertain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\nMost companies become non-transparent over time because they don‚Äôt accept any\nmistakes. Instead, we should always err on the side of transparency when there\nis a choice to be made between caution or inaction, and transparency. If we make\na mistake, we now know what the limits of transparency are for the company and\nwe should\ndocument this\n.\nThe only exception to this rule would be in the case when there are legal concerns.\nBecause some information is\nnot public\nthe public information can be lacking some context. We should be cognizant of that.\nDirectness\nBeing direct is about being transparent with each other. We try to channel our inner\nBen Horowitz\nby being\nboth straightforward and kind\n.\nFeedback is always about your work and not your person. That doesn‚Äôt mean it will be easy to give or receive it.\nArticulate when you change your mind\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an\nearlier\nstance is not your\ncurrent\nstance provides clarity to others and encourages data-driven decision making.\nSurface issues constructively\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don‚Äôt worry; correct it and\nproactively\nlet the affected party, your team, and the CEO know what happened, how you corrected it, and how‚Äîif needed‚Äîyou changed the process to prevent future mistakes.\nTransparency is most valuable if you continue to do it when there are costs\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we‚Äôll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about\nsecurity incidents\nand participating in and contributing to Live Broadcasts.\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\nSingle Source of Truth\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don‚Äôt need separate artifacts with different permissions for different people.\nFindability\nOur transparency value means more than just making information accessible to all. In order to\nimprove performance\nit‚Äôs important that we not only ensure information is accessible, but also ensure it flows to the correct places and is\nfindable\nby those who need it. Focusing on information flow will ensure you, for example, utilize\nmulti-modal communication\n, or that you keep your\nstakeholders informed of changes\nby posting links to MRs in Slack.\nSay why, not just what\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made.\nThis is related to\nChesterton‚Äôs fence\n- it‚Äôs much easier to suggest removing or changing something if you know why it exists in the first place.\nIf you use generalized terms such as ‚Äúindustry standard‚Äù or ‚Äúbest practices,‚Äù be sure to give context, as without context they can be seen as potentially vague or opaque.\nSimilarly, merely stating a single value isn‚Äôt a great explanation for why we are making a particular decision. Many things could be considered ‚Äúiteration‚Äù or ‚Äúefficiency‚Äù that don‚Äôt match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value‚Äôs name.\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the\nefficiency of boring solutions\nwith the focus on\ncustomer results\n. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our\nvalues hierarchy\nand\ndirectly\ndiscussing the tradeoffs is easier with more context.\nArticulating why also helps people understand how something changed when you\narticulate that you changed your mind\n.\nSaying why does not mean justifying a decision against all other suggestions.\nThe\nDRI\nis responsible for their decision.\nThe DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a ‚Äúwhy‚Äù with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members.  In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\nReproducibility\nEnable everybody involved to come to the same conclusion as you. This not only involves\nreasoning\n, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even\nif they may disagree\n.\nTransparency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\nGitLab Job Grade\nDemonstrates Transparency Competency by‚Ä¶\nKnowledge Assessment\n5\nUses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on.\nKnowledge Assessment for Individual Contributors\n6\nProvides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution.\n7\nContinually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels.\n8\nImplements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known.\nKnowledge Assessment for People Leaders\n9\nFosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known.\n10\nDrives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution.\n11\nDevelops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate.\n12\nLeads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value.\nEVP/CXO\nChampions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\nWhy have values\nOur values provide guidelines on how to behave and are written to be actionable.\nThey help us describe the type of behavior that we expect from GitLab team members.\nThey help us to know how to behave in the organization and what to expect from others.\nValues provide a framework for distributed decision making, detailed in GitLab‚Äôs\nTeamOps\nmanagement philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that\nour culture\nremains driven by our values.\nLastly, values create a\nconscious culture\nthat is designed to help you prosper and experience exceptional personal growth through work.\nFive dysfunctions\nOur values also help us to prevent the\nfive dysfunctions\n:\nFear of conflict\nSeeking artificial harmony over constructive passionate debate =>\nprevented by transparency, specifically\ndirectness\nand collaboration, specifically\nshort toes\nAbsence of trust\nUnwilling to be vulnerable within the group =>\nprevented by collaboration, specifically\nkindness\nAvoidance of accountability\nDucking the responsibility to call peers on counterproductive behavior which sets low standards =>\nprevented by results, iteration, and\ntransparency\nInattention to results\nFocusing on personal success, status, and ego before team success =>\nprevented by\nresults\nLack of commitment\nFeigning buy-in for group decisions creates ambiguity throughout the organization =>\nprevented by transparency, specifically\ndirectness\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values.\nSimilar to happiness, trust is something that is an outcome, not something you can strive for directly.\nWe hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\nOperating principles\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value.\nThey clarify what a given core value means and looks like\nat GitLab\n.\nUnderstanding this distinction is critical to thriving at GitLab,\nparticularly for\nnewer team members\nwho may be familiar with a prior organization‚Äôs interpretation of iteration or collaboration (as examples).\nProcess for removing operating principles\nValues are not just things we do, but things that actively drive good behavior.  When we remove them it doesn‚Äôt mean we stopped believing in it, just that it wasn‚Äôt actively helping to drive behavior. If we don‚Äôt prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\nTo\nremove\nan operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\nThe GitLab Value Handbook Page owner must approve and merge the request.\nMention the specific value\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, ‚Äúnot a value add‚Äù or ‚Äúscored well on values during our interview.‚Äù In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\nHow to scale the business while preserving GitLab values?\nFor certain business decisions or projects (such as\ncompensation\nand\nend-point management\n), GitLab team members may have a lot of opinions and interest,\nand they want to provide their feedback and comments.\nOn the other hand,  it might be challenging for the project DRI to digest and respond to all these inputs.\nWhat should you do in this scenario?\nEveryone can contribute at GitLab.\nWe encourage team members to share feedback and leave comments on issues.\nLeaving feedback and comments shows that team members care about a topic and about GitLab as a company.\nThese perspectives may also uncover potential risks and problems in the project.\nThere shouldn‚Äôt be a\n‚ÄúDon‚Äôt they have their job to do?‚Äù\ntype of response.\nFurthermore, we shouldn‚Äôt judge team members who are perceived as being the ‚Äúsqueaky wheel.‚Äù\nAt GitLab, we\nmeasure impact, not activity\n.\nAs long as a team member is producing required results, they are empowered to decide how to spend their time.\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone.\nIf a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle.\nIn these cases, it‚Äôs best to have time-boxed feedback built into timelines.\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\nWe‚Äôre deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We‚Äôll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we‚Äôre using for the decision:\nare there allergies to consider?\ncost per pound\nteam member preferences\nOnce the decision is made, it will be what is going into the stew.\nThis method\nhas shown itself to be effective\nat soliciting productive feedback that doesn‚Äôt derail a timeline while ensuring team members feel heard.\nWhy our values are public\nCompanies are encouraged to copy and implement GitLab‚Äôs values. They are Creative Commons and can be copied verbatim.\nWe make our values public for\nmany reasons\n. There is great power and efficiency in teams who share company values. Concealing values until\nafter\nsomeone is hired into an organization is not a wise strategy.\nNot everyone will see our values and feel aligned with them, and that‚Äôs OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who\nare\naligned with GitLab‚Äôs values apply for an\nopen vacancy\n, this allows our hiring teams to more efficiently move candidates through the\ninterview process\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nCompanies may ask you to write a blank check. They‚Äôll say, ‚ÄòCome join our organization, and when you‚Äôre here, you need to subscribe to our values, our way of working, and our strategy. It‚Äôs very essential, and it‚Äôs part of our identity!‚Äô\nBut these companies don‚Äôt give you the opportunity up front to evaluate it. It doesn‚Äôt make any sense to me. If it‚Äôs so important that people share your values, have them out there.\nHierarchy\nOccasionally, values can contradict each other. It‚Äôs useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nIt‚Äôs an attempt to relieve at least some of the tension. It‚Äôs not absolute. If you think of values as binary, that‚Äôs not going to work. There will always be interpretation, and there‚Äôs always magnitude to consider.\nWe made a hierarchy so that it‚Äôs clear, in the end, the result matters most. For instance, we‚Äôre not going to be transparent for the sake of being transparent. We‚Äôre not radical in our transparency. We do it because we think it will lead to better outcomes.\nThose hierarchies are really important. They won‚Äôt preempt every debate, but it helps.\nUpdating our values\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you‚Äôre a\nteam member\nor in the\ncore team\nplease post a link to the MR in the\n#values\nSlack channel\n. If you‚Äôre not part of those groups, please send a direct X/Twitter message to\n@sytses\n.\nHow do we reinforce our values\nWhatever behavior you reward will become your values. We reinforce our values by:\nCriteria we use for\npromotions\nand communicate to the whole company on announcement.\nWhat we select for during\nhiring\n.\nWhat we emphasize during\non-boarding\n.\nCriteria we use for our\nannual compensation review\n.\nWhat we refer to when\nmaking decisions\n.\nThe example the E-group sets for the company since\na fish rots from the head down\n.\nWhat we expect from all team members, as\nambassadors for our values\n.\nKeeping them\nup to date\nwith a\nstream of commits that add details\n.\nBehavior we give each other\n360 feedback\non.\nBehavior we\ncompliment\n.\nCriteria we use for\ndiscretionary bonuses\n.\nWhat we include in our\noffer letters\nCriteria we use to\nmanage underperformance\n.\nWhat we do when we\nlet people go\n.\nGiving value awards during\nGitLab Summit\n.\nProviding GitLab team members and\nqualified individuals\ntransparency into all aspects of the company through the\nCEO Shadow Program\nto enable them to better engage and collaborate cross-functionally.\nLinking the takeaways of courses to our values, like we did for\nthe Crucial Conversations training\n.\nThe default settings of the software we use (for example:\nSpeedy meetings\n,\ndocument sharing\n, agendas, etc.)\nReinforcing our values with features in GitLab, for example the\nIterations feature\n.\nApplying one of our\nvalues virtual backgrounds\nin video calls.\nOur GitLab\nSong Book\n, the song lyrics often mention GitLab values.\nRegularly conduct a values exercise at the\ne-group offsite\n.\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is ‚Äú\nnot living the values\n‚Äù isn‚Äôt helpful.\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances\nare\nyour values. It‚Äôs not what you say they are. Values should be explicitly part of our\nhiring\nprocess, our job profiles, and our\nreview process\n.\nWhen we give\nbonuses\nand\npromotions\n, they are always linked to values. That‚Äôs the crucial thing. If you reinforce them there, that‚Äôs the most powerful thing you can do. ‚Äî\nSid Sijbrandij, GitLab co-founder\nWhat to do if values aren‚Äôt being lived out\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as ‚Äúme values‚Äù rather than ‚Äúcompany values.‚Äù For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with\nassuming positive intent\nfrom other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab‚Äôs\n#values\nSlack channel\n(for GitLab team members) or @-mentioning\n@gitlab\non X/Twitter (for those who do not work at GitLab).\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nAlmost every time we face a hard decision at GitLab, it‚Äôs because values are in conflict. It‚Äôs not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\nPermission to play\nFrom our values we excluded some behaviors that are obvious; we call them our\npermission to play\nbehavior:\nBe truthful and honest.\nBe dependable and reliable.\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\nBe deserving of the trust of our team members, users and customers.\nBe committed to the success of the whole organization.\nAct in the best interest of the company, our team members, our customers, users, and investors.\nMake the best decisions for GitLab.\nAct in accordance with the law.\nDon‚Äôt show favoritism as\nit breeds resentment, destroys employee morale, and creates disincentives for good performance\n. Seek out ways to be fair to everyone.\nPlaying politics is counter to GitLab values\nWe don‚Äôt want people to play politics at GitLab.\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is.\nThis is a manifestation of the\nBelief Bias\n, where we judge an argument‚Äôs strength not by how strongly it supports the conclusion but by how strongly\nwe\nsupport the conclusion.\nProposals should be weighed on their merits and not on who proposed them.\nAnother example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that‚Äôs different from being promoted just because people like you.\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\nPolitical environment\nNon-political environment\nValues are weaponized and used out of their intended context\nTeam members utilize values with a positive intent\nTeam members are driven by self-interest\nTeam members are driven by company interest\nTeam members work in silos\nTeam members optimize globally\nPeople have territorial behaviors and are quick to perceive suggestions as attacks\nPeople have\nshort toes\nPeople have unhealthy alliances with backroom conversations\nPeople have good intent and actively collaborate with folks\nInformation is intentionally withheld\nInformation is shared early (often WIP) and at the same time with all interested parties\nPeople try to undermine each other‚Äôs credibility by arguing with the weakest part of their argument\nPeople take a\n‚Äústeel man‚Äù position\nand argue against the strongest version of your opponent‚Äôs position\nFolks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other‚Äôs backs\nFeedback is given directly. This includes feedback about a manager‚Äôs team\nCommunicating your own suggestions through a report instead of directly\nFeedback is given directly from the person who has it\nEvaluating proposals or work by who said or did it instead of by what is in it\nProposals¬†and work is evaluated without regard to who worked on them\nLack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know\nTeam members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate,\nthey do it in an effective way\nValues make choices\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values ‚Äî although the result is a very different company.\nWhat is not a value\nAll-remote\nisn‚Äôt a value. It is something we do because it helps to\npractice our values\nof transparency, efficiency, results, and diversity, inclusion & belonging.\nQuestions from new team members\nDuring every\nGitLab 101 session with new hires\nwe discuss our values. We document the questions and answers to\nFrequently Asked Questions about the GitLab Culture\n.\nNew team members should read\nGitLab‚Äôs guide to starting a new remote role\n, and reference\ninterviews\ncentered on values within the\nGitLab Unfiltered YouTube channel\n.\nMission\nOur\nmission\nis to\nenable everyone to contribute to and co-create the software that powers our world\n. This mission guides our path, and we live our values along that path.\nMitigating Concerns\nWe have a page which documents our\nMitigating Concerns\n. Many of our values help to mitigate some of these concerns.\nGitLab Values Quiz\nAnyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this\nlearning course\nin Level Up. If you have questions, please reach out to our L&D team at\nlearning@gitlab.com\n.\nLast modified June 27, 2025:\nRemove company OKR process (\n99161f51\n)\nView page source\n-\nEdit this page\n-\nplease\ncontribute\n.",
  "html_file": "01c74d0abe5a1fe6.html"
}