{
  "url": "https://about.gitlab.com/direction/ops",
  "title": "Section Direction - Ops\n|\nGitLab",
  "headings": [
    "Section Direction - Ops",
    "What We Do",
    "Ops Section Vision",
    "Composition",
    "3 Year Strategy",
    "Why We Do It",
    "Impact",
    "Market",
    "Current Position",
    "Challenges",
    "Opportunities",
    "Useful Resources",
    "Performance Indicators",
    "Personas and Jobs to Be Done"
  ],
  "text": "Section Direction - Ops\n|\nGitLab\nSection Direction - Ops\nMaintained by\n:\nContribute to this page\nEdit this page\nYou are here:\nGitLab Direction\nSection Direction - Ops\nThe following page may contain information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nWhat We Do\nOps Section Vision\nComposition\n3 Year Strategy\nMarket Predictions\nThemes\nOps Section Plan\nWhy We Do It\nImpact\nMarket\nCurrent Position\nChallenges\nOpportunities\nUseful Resources\nPerformance Indicators\nPerformance Indicator Goals\nPersonas and Jobs to Be Done\nWho is it for?\nToday\nMedium Term (1-2 years)\nWhat We Do\nOps Section Vision\nOur Vision for the Ops section is to set up developers for efficient and safe software delivery using the best practices in CI/CD, operations and integrated security.\nComposition\nVerify\nConfigure\nPackage\nMonitor\nRelease\nThe Ops Section is comprised of five stages: Verify, Package, Deploy and Monitor. For a deeper view of the direction of each specific stage please visit the respective Direction Pages linked below:\nVerify\nPackage\nDeploy\nMonitor\nMarket analysts (internal)\noften describe these stages as automated software quality (ASQ, partially correlated with Verify, Package and Deploy), IT automation and configuration management (ITACM, correlated with Deploy), and IT operations management (ITOM, partially correlated with Monitor). The Ops section also covers CI/CD (Verify/Deploy), IT Infrastructure Monitoring/APM (Monitor), CDRA (Deploy), Infrastructure Configuration (Deploy) and Package and Binary Management (Package)\nanalyst categories\n.\nIn some contexts, \"ops\" refers to operators. Operators were the counterparts to Developers represented in the original coining of the term\nDevOps\n. That definition highlighted the rift between the two groups and a need for collaboration. At GitLab, we use \"ops\" to mean operations - any component of the value stream delivery platform after a developer commits code. Our\ndeveloper first perspective\nmeans our use of the word \"ops\" is focused on enabling developers to configure tools and perform operations tasks\nfirst\n. We have support for\nplatform operations and SRE teams\nwho provide Pipelines, Infrastructure and alert response tools to development teams, and ambitious plans to\nsupport traditional operators in the future\n.\n3 Year Strategy\nGitLab's Ops strategy follows that of\nGitLab's company strategy\n. Just like our company\nmission\n, we will enable\neveryone to contribute\nbeyond application code to other digital artifacts that increasingly define the performance, reliability, and resilience of the world's software. We will pursue that mission and capitalize on the opportunities (such as, developer buyer power, IT skills gaps, a move towards Kubernetes, and our roots in source-control and CI) by utilizing a\ndual-flywheel\napproach. This approach starts with attracting developers performing DevOps tooling and operations tasks to our Free/Core tier. As we build best of breed tools for them we will\nco-create\nto drive product improvements. This will generate revenue for higher product tiers and additional investment for supporting the modern development teams.\nMore specifically, we will achieve this by enabling\neasy-to-discover\n,\nworking-by-default\n, workflows that support doing powerful, complex actions with a minimum configuration. We want to take advantage of our single application so that, while each team may have their own views or dashboards in the product that support their day to day, the information is available everywhere and to everyone, embedded naturally into their day-to-day workflow where it's relevant. For example:\nAllow platform teams to share operational definitions (infrastructure, environments, deployment pipelines, monitoring configuration) with development teams and for development teams to easily contribute improvements to their definition\nAt scale management of deployments with actionable analytics and dashboards to support management of development teams\nOperational tasks that ensure reliability, like chaos engineering and performance testing, are shifted left\nSoftware Engineers and Testers looking at an individual issue can see which environment(s) that issue has been deployed to\nSatisfying compliance needs and supply chain security by improving the traceability of artifacts throughout the build, test, deploy process\nIncident responders can immediately see details of the last deploy, recent code changes and errors, traces and logs needed to help them get their service back up quickly\nThe end result is that even complex delivery flows become part of everyone's primary way of working. There isn't a context shift (or even worse, a switch into a different tool) needed to start thinking about delivery or operations - that information is there, in context, from your first commit. The centerpiece of this strategy is our\nGet Things Done Easily theme\n.\nMarket Predictions\nThe Ops Section stages represent over 50% of GitLab's future CSM expansion.\nIn three years the Ops market will:\nConsider CI a critical capability for bridging between Dev, Sec & Ops to create truly high-performing DevSecOps organizations\nConsider Package management an integrated requirement for any CI/CD platform\nProvide seamless progressive delivery capabilities as a critical tool for enabling lean product-focused development\nConsolidate around Kubernetes as the de facto multi-cloud abstraction layer which application delivery teams interact with to deploy and maintain software\nHave adapted DevSecOps processes to also include infrastructure and observability into CI/CD pipelines providing more responsive, more secure, and higher quality production applications\nThemes\nOur Ops Section themes are additive to our overall\nYearly Themes\n. In FY24, we plan to execute on:\nWorld-class DevSecOps by delivering\nGitLab Events\n,\nCI/CD Catalog\n, enabling GitOps in GitLab with Flux, integrating a cluster overview under Environments, and prioritizing usability of our key workflows\nAdvanced security and compliance by delivering\nSLSA 4 framework requirements\n, investing in\nSecrets Management Direction\nObservability, analytics, & feedback via our investment in\nend-to-end error tracking\n.\nGitLab Data Science support with SaaS Runner GPU improvements\nOps Section Plan\nOur plan is to continue to lean into\nadoption through usability\nand\ndiscoverability\nin our core stages of Verify, Package, and Deploy. This will mean sustained focus on onboarding users and organizations from\nSCM, to CI to Deployment\n.\nFor the Monitor stage, we will pursue our common progression product approach to breadth, namely:\nCreate MVCs which showcase the possibility of new categories in a single-application\nLeverage the high rate of learning provided by dogfooding to achieve viability\nShift focus to awareness and acquisition of viable capabilities by increasing SMAU & GMAU\nBegin building completeness and tier value as a result of increased SMAU\nAs a result our\nperformance indicators\nand tier strategies are aligned to the maturity of each stage.\nIn doing so, over the next 12 months we will choose\nNOT\nto:\nInvest in Verify stage features like:\nTracking accessibility results over time\n.\nMerge Trains API Support\n.\nAutomatic flaky test minimization\n.\nCreation and\nmanagement\nof tests (automated or manual).\nReal-time pipeline and job statuses\nPipeline Simulation\nor local pipeline debugging, even though it is a highly requested feature\nInvest in some specific Package stage features like:\nDependency Firewall\n, as we'll focus on making the\nDependency Proxy\nfunctional and complete.\nPackage manager formats and features that are not NPM, Maven, C++, .NET, Linux, Ruby, Python, PHP, or Go or community contributed.\nInvest in specific Deploy stage features like:\nService Now Integration\nto control rollbacks or other pipeline actions is not in the cards.\nContinuous Delivery for Machine Learning\n- Add support for training and testing pipelines for Machine Learning\nInvest heavily in ease of use and experience for individuals attaching Kubernetes clusters to projects. While there are use cases for project-level attachment, it is a higher priority to provide Infrastructure Platform teams with an enhanced cloud-native management experience.\nInvest heavily in automated cluster cost-optimization efforts - We will pursue this as our adoption by platform teams increases.\nWhy We Do It\nImpact\nThe\nOps Section stages\nare at the forefront of GitLab's single DevOps platform vision of enabling everyone to contribute. These stages represent\nhalf\nof GitLab's Total Addressable Market expansion during the next five years and the\nmarkets\nwhere we have some of the lowest current penetration. As a result the opportunity and impact from R&D investment in these stages are the highest in the company.\nUser growth\nin Ops Section stages improves\nStages per Organization\nbeyond typical SCM customers - providing the value of a single DevOps platform to our customers. Adding new types of users in turn increases\nunique active users\n, while adding paid tier features increases Average Revenue Per User (ARPU) and broad adoption across users in our customers' organizations increases net retention. All of these are critical drivers of our GitLab's business performance.\nWe would appreciate your feedback on this direction page. Please take\nour survey\n,\nemail Jackie Porter\nor\npropose an MR\nto this page!\nMarket\nThe total addressable market (TAMkt) for\nDevOps tools\ntargeting\nthese stages\nwas\n$5.2B in 2019 and is expected to grow to $10.7B by 2024 (18.8% CAGR) (internal)\n. This analysis is considered conservative as it focuses only on developers and doesn't\ninclude additional potential users\n.\nThis is a deep\nprofit pool\nand represents a significant portion of GitLab's expanding addressable market. As organizations further adopt DevOps, developer focused ops tools account for a larger share of market. This market has traditionally targeted IT Architects, System Admins and Operators where large hardware budgets enabled expensive IT tools to flourish.\nThe\nmarket is well established (internal)\n, but the participants are evolving rapidly. Existing leaders in single stages of the DevOps lifecycle are expanding to build\nvalue stream delivery platforms (internal)\n, what GitLab calls complete DevOps platforms delivered as a single application. These existing players are doing so via\nacquisition\nand product development. The leaders run the gamut from GitHub with their strong position in the SCM market and their growing capabilities to\ncompete in CI/CD\n, to Delivery focused tools such as Harness and JFrog, to\nGrafana, DataDog and New Relic with their strong positions in Observability\nand expansion into deployment and incident response. All are pivoting to pursue the value stream delivery platform market.\nCurrent Position\nDespite many strong players, GitLab's market share in the Ops section is growing, especially in the Verify, Package, and Deploy stages. For Monitor, our unique perspective as a single and complete DevOps application positions us for growth.\nYou can see how users currently use our various stages in our\nOps Section product performance indicators (internal)\nand\nOps Section Usage Dashboard (internal)\n.\nWe are\ncontinually investing in R&D\nin all Ops Section stages. The maturity of each stage and category can be found in our\nmaturity page\n. Our\ninvestment in the Ops section stages (internal)\nis critical to both enabling enterprise users to continue on their DevOps maturity journey and completing our\ncomplete DevOps platform vision\n. Driving adoption across multiple Ops stages enables\nearly adopters\nto recognize the\nbenefit of a single application\n.\nChallenges\nWe face a wide range of market challenges (in priority order):\nGitLab created a new market for\nDevOps platforms delivered as a single application\n. We were an early entrant in this market\nbefore it was defined\nbut there are many, and will be more, fast followers. Key players include large established tech firms (Microsoft, Atlassian), growth companies that have established positions in specific stages (Harness, DataDog), and newly consolidated platforms from acquisition (JFrog, CollabNet/VersionOne/XebiaLabs).\nBy 2023, the number of companies switching to VSDPs is expected to quadruple (internal)\n.\nFew companies have been able to successfully bridge between Developer and Operator personas. Building tools that satisfy both sets of\njobs-to-be-done\nis difficult. Without deeply understanding new personas (such as\nPlatform Engineers\n) and tasks, market entrants' products result in a checklist of modules that lack a cohesive experience for users.\nIn recent years we've seen the emergence of large\npublic cloud infrastructure providers\nmoving from a focus on infrastructure services for operators towards developer tools. These providers could challenge current notions of\nmulti-cloud\nby creating great, integrated experiences in their tools for developers to create, verify, and deploy applications to the provider's infrastructure. Microsoft, with their acquisiton of GitHub and it's burgeoning preference for Azure deployments is a first example. There is a possibility that these provider-centric ecosystems present organizations with a choice of investing in a best-of-breed platform with a small subset of projects or a sufficient enough platform used by all.\nBeyond the key players, there is also rapid innovation. This makes for a market where there is proliferation of new technology concurrent to consolidation of the winning technologies into comprehensive platform players. Ease of deployment for CI/CD and operational tools has aided this expansion. Developers and operations teams can easily instrument and utilize new technologies alongside their existing software development pipelines with less risk, and in quicker time frames than under previous models where it required diligent planning and months of installation and configuration.\nThe macroeconomic environment in 2023 has slowed from prior year's growth, as indicated by a recent\nGartner Report on IT Spending in 2023\n. This poses a headwind toward all software providers and the industry as a whole could face increased pressure.\nOutside of market challenges we have some internal ones as well:\nWhile we are focused on it - generally we are still not\ndogfooding\nthe Deploy and Monitor stage features sufficiently. Within GitLab we don't have a dedicated Platform Team that serves as our internal model for our\nPrimary Target Persona\n. This has the effect of\nslowing our rate of learning\n, and putting us in the position of not having immediate real-world validation of product investments.\nOur\nProduct Hierarchy\nmeans we have groups narrowly focused on stages or categories. This has the effect of limiting our ability to deliver truly\ndelightful\nexperiences for users. We've started tracking the\nOps section's contribution to Stage Per Organization\nto further mitigate this challenge.\nContributing to a growing, large monolith can be slower and more risky than building independent services and applications. We have seen our cycle time slowed down by long MR reviews. We have also experienced the risk of not building for scale first by introducing functionalities only to see that new service cause outages.\nHaving a large scope means having to make more trade-offs. These trade-offs often mean divesting from further-horizon investment in favor of short term gain. Being able to stay disciplined to our\ninvestment allocation - internal\nwill be important to penetrate new markets.\nOpportunities\nGiven the above challenges, there are key opportunities we must take advantage of (in priority order):\nRise of the Platform Engineer:\nGartner has\nsuggested\nthat \"platform engineering is an emerging technology that can accelerate the delivery of applications.\" The 2022 report expects that by 2026 80% of enterpises will establish a platform team to improve developer experience and effectiveness with resuable services and tools related to delivery. GitLab is well positioned as a unified platform to deliver on the emerging platform engineering trend.\nCross-Use Case Workflows:\nAs a single DevSecOps platform, a single user may action and span multiple\nuse cases\nin their daily experience with GitLab. We have an opportunity to prompt users to explore new functionality within their existing workflow. For example, we can prompt users without CI/CD on projects that contain Terraform code to utilize our\nTerraform MR review widget\n. Doing so will organically\ninspire more adoption and usage of cross-platform tools\n. This usage will result in an improvement of productivity for our users, supporting the expansion of seats to include more users within an organization's instance.\nDevOps Adoption Pains:\nFor many organizations their\nDevOps journey is currently stalled as they attempt to adopt continuous delivery in an effort to increase their deployment frequency\n. GitLab's\ncommon method for defining CI and CD workflows\nallows organizations to use the same tools their teams love for CI when overcoming this new challenge. DevOps transformations are also hampered by a\nlack of IT operations skills (internal)\n. Most organizations have taken to creating\ninfrastructure platform teams\nto\nminimize the amount of operations expertise required by DevOps team members (internal)\n. Those teams' traditional operations tools are not integrated within the development team's workflow, and force an unneeded tradeoff between reliability and speed. This tradeoff results in increased down-time and problems with recovering from disaster - or slowed business agility. Value Stream Delivery Platforms like GitLab can\nmove a team from reactive to proactive reliability without sacrificing development velocity (internal)\n. GitLab's combination of Create, Verify, Deploy and Monitor allow our users to\nmeasure all four aspects of their delivery performance\n. Improving the resuability, standardization, and enforcement of best practices via Shared Resource Library or\nService Catalog\nis top of mind to mitigate the DevOps implementation challenges of enterprises.\nIncreasing Developer buying power:\nIn the move to DevOps,\ntools focused on enabling developers garner an increased share of wallet\n.\n71% of organizations (internal)\nwill achieve full DevOps adoption on some projects within a year.\n35% of DevOps implementations include Monitor stage capabilities, 30% include Deploy stage ones (internal)\n. This increasing buyer power is driven by the cultural and organizational changes (often called Digital Transformation Initiatives) needed for DevOps to deliver software faster. This also applies to traditional IT teams who will,\nby 2024 see 30% of their focus move from IT ops to continuous engineering\nvia role shifts like moving from system admin roles to SRE roles.\nMarket Recognition:\nThe IT market has recognized the value of GitLab's core proposition, a\ncomplete DevOps platform delivered as a single application\n. We know because single-function companies\nare consolidating\n, and analysts have\ncreated a new category - VSDP\n- to describe that proposition. One key value driver for this market is the shifting-left of traditional Ops tasks ensuring reliability doesn't have to come at the expense of speed.\nIaC and GitOps are strong first steps towards AIOps:\nAIOps strives to provide self-learning, self-healing IT operations massively impacting IT operations professionals and their tools. However, it is\nearly in the hype cycle (internal)\nand being successful will depend on DevOps teams first defining their infrastructure, operations, and observability as code. IT Operations teams are first adopting automation and programmable infrastructure (Automated Ops) in order to keep up with developer velocity. Experience with developer tools like source control and CI/CD tooling are becoming requirements for operations teams,\noften replacing inefficient CMDB tools in the process\n. GitLab's roots in SCM and CI and the entire\nGitOps\n,\nInfrastructure as Code\n, and Observability as Code movements will help us attract and add value for\nOps personas\nand set us up for future AIOps success.\nContinuing commoditization of tooling:\nWell-funded technology companies (Google, Netflix, Lyft, Spotify etc.) that are focused on scaling have a history of releasing open source software that leap-frog vendor software. Examples include Kubernetes, Prometheus, and many of the foundational projects in CNCF. In the observability space,\n70% of instrumentation is expected to be open-source by 2025\n. DevOps vendors have to continue to move up the value chain as previously specialized software gets commoditized. GitLab has the opportunity to mind the\nDeveloper Experience Gap\nand provide an easy to use and effective software development toolchain.\nUseful Resources\nBelow are some additional resources to learn more about Ops:\nThe DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations\nAccelerate: The Science of DevOps: Building and Scaling High Performing Technology Organizations\nPerformance Indicators\nThe performance of the Ops section is defined as the total adoption of its stages as measured by the\nOps Section Total Stages Monthly Active Users (internal)\n) (Ops Section CMAU). Ops Section TMAU is a sum of all SMAUs across the five stages in the Ops Section (Verify, Package, Deploy & Monitor).\nTo increase the Ops Section TMAU, the product groups are focused on driving their stage adoption. We are especially focused on increasing adoption of the Verify and Deploy stages by driving CI usage from existing SCM users and driving CD usage from existing CI users. This will activate users into Ops Section TMAU and enable them to continue to adopt other Ops section stages as described on Ops section adoption journey (see also the\nproduct-wide adoption journey\n):\ngraph LR\n%% Define Styling\nclassDef OpsStage fill:#11f,color:#fff\nclassDef OtherStage fill:#ddd,color:#888\n%%% Define Stages\nP[Plan]:::OtherStage\nC[Create]:::OtherStage\nV[Verify]:::OpsStage\nPa[Package]:::OpsStage\nR[Release]:::OpsStage\nCo[Configure]:::OpsStage\nM[Monitor]:::OpsStage\nS[Secure]:::OtherStage\nD[Govern]:::OtherStage\n%% Define Connections\nC -.- P\nP -.-> M\nV -.- S\nC ==> V\nV ==> R\nV ==> Pa\nV ==> Co\nR ==> M\nR -.- Co\nCo -.- D\nCo ==> M\nM -.- D\nsubgraph \"Legend\"\nLegend1[Ops Stage]:::OpsStage == Critical Path==> Legend2[Other Stage]:::OtherStage\nLegend1 -. Additional Path .-> Legend2\nend\nThe majority of our\nOps section product groups\nare focused on driving adoption first, and then monetization within their category scope. Some groups are well placed to focus on monetization right away by adding tier value for\nbuyer personas\n(e.g. development manager, director) on top of existing stages which already have heavy usage.\nSee more details about our\nProduct Performance Indicators\nin our\nOps Section Product Performance Indicators page\n.\nPerformance Indicator Goals\nWe track our quarterly Product Performance Indicator goals in our\ninternal handbook page\n. We track our long-term Product Performance Indicator goals here.\nPersonas and Jobs to Be Done\nWho is it for?\nWe identify the\npersonas\nthe Ops section features are built for. In order to be transparent about personas we support today and personas we aim to support in the future we use the following categorization of personas listed in priority order.\nð©- Targeted with strong support\nð¨- Targeted but incomplete support\nâ¬ï¸- Not targeted but might find value\nToday\nTo capitalize on the\nopportunities\nlisted above, the Ops section has features that make it useful to the following personas today.\nð©\nSasha - Software Developer\nð©\nDevon - DevOps Engineer\nð¨\nIngrid - Infrastructure Operator\nð¨\nAllison - Application Ops\nð¨\nSimone - Software Engineer in Test\nâ\nâ¬ï¸\nOps Teams\nâ¬ï¸ Central IT / System Admins\nMedium Term (1-2 years)\nAs we execute our\n3-year strategy\n, our medium term (1-2 year) goal is to provide a single application that enables collaboration between cloud native development and platform teams.\nð©\nSasha - Software Developer\nð©\nDevon - DevOps Engineer\nð©\nIngrid - Infrastructure Operator\nð©\nAllison - Application Ops\nð©\nSimone - Software Engineer in Test\nð©\nDelaney - Development Team Lead\nð©\nRachel - Release Manager\nð¨\nOps Teams\nâ¬ï¸ Central IT / System Admins\nEdit this page\nView source",
  "html_file": "d59be907755a76a5.html"
}