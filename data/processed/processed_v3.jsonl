{"doc_id": "fdb2927c2e2f9845", "url": "https://handbook.gitlab.com/handbook/values", "title": "GitLab Values | The GitLab Handbook", "text": "The Handbook\nLearn more about how we live our values at GitLab\nGitLab‚Äôs six core values are\nü§ù Collaboration\n,\nüìà Results for Customers\n,\n‚è±Ô∏è Efficiency\n,\nüåê Diversity, Inclusion & Belonging\n,\nüë£ Iteration\n, and\nüëÅÔ∏è Transparency\n,\nand together they spell the\nwe give each other by assuming\ngood intent. We react to them\nwith values emoji\nand they are made actionable below.\nAbout our values\nWe take inspiration from other companies, and we always go for the\nboring solutions\n. Our co-founder, Sid Sijbrandij, has\nshared the origin\nof each of the CREDIT values, but\njust like the rest of our work, we continually adjust our values and strive to make them better.\nIn many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business.\nWe used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior.\nEveryone is welcome to suggest improvements. Please assign MRs to update these values to our\nChief People Officer\nand if you work at GitLab, also @mention them in the\n#values\nSlack channel\n.\nDriving Results with CREDIT\nfrom\nGitLab\non\nVimeo\n.\nü§ù Collaboration\nTo achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve.\nSimilarly, you can rely on others for help and advice‚Äîin fact, you‚Äôre expected to do so.\nAnyone can chime in on any subject, including people who don‚Äôt work at GitLab.\nThe person who‚Äôs responsible for the work decides how to do it,\nbut they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented.\nKindness\nWe value caring for others.\nDemonstrating we care for people provides an effective framework for challenging directly and delivering feedback.\nKindness doesn‚Äôt mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers.\nKindness means you make a separation between the work and the person, you can criticize someone‚Äôs work but still be respectful to the person.\nGive as much positive feedback as you can, and do it in a public way.\nShare\nThere are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members.\nBe willing to invest in people and engage in open dialogue.\nFor example, consider making private issues public wherever possible so that we can all learn from the experience. Don‚Äôt be afraid of judgement or scrutiny when sharing publicly, we all understand\nit‚Äôs impossible to know everything\n.\nEveryone can\nremind\nanyone in the company about our values.\nIf there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions.\nShare problems you run into, ask for help, be forthcoming with information and\nspeak up\n.\nNegative feedback is 1-1\nGive negative feedback in the smallest setting possible.\nOne-on-one video calls are preferred.\nNegative\nfeedback\nis distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement\nin a public channel\n, respectfully and\ntransparently\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nWe deal with negative all the time at GitLab. If it‚Äôs not a problem, then why are we discussing it? We deal with negativity a lot, and that‚Äôs also part of our ambition.\nIf you want to get better, you talk about what you can improve. We‚Äôre allowed to publicly discuss negative things; we‚Äôre not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting.\nNegative feedback can be given in a group setting if it‚Äôs to someone higher in the management chain. This shows that no one is above feedback.\nProvide feedback in a timely manner\nWe want to solve problems while they are\nsmall\n.\nIf you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your\nskip-level\n, a more senior person, or a\npeople business partner\n.\nSay thanks\nRecognize the people that helped you publicly, for example in our\n#thanks chat channel\n.\nWhen publicly thanking, it‚Äôs important to recognize the following:\nShowing thanks in as large a setting as possible (company-wide) at a company as large as ours is the exception instead of the norm, it takes some getting used to.\nBeing thanked at the company level for what you view as a relatively small or minuscule contribution can feel awkward.\nThanking a person in\n#thanks\nshould be done sincerely and summarize why you are thankful so the person on the receiving end can easily understand why they are being thanked. Even while\nassuming positive intent\n, not all folks are comfortable with public praise. Help this person understand how they went above and beyond and why you felt it was important for the team member to be recognized.\nThere are a number of good ways and places to say thanks. We shouldn‚Äôt limit saying thanks to just the\n#thanks\nchannel\n.\nGive feedback effectively\nGiving feedback is challenging, but it‚Äôs important to deliver it effectively.\nWhen providing feedback, always make it about the work itself;\nfocus on the business impact and not the person.\nMake sure to provide at least one clear and recent example.\nIf a person is going through a hard time in their personal life, then take that into account.\nAn example of giving positive feedback is our\nthanks chat channel\n.\nFor managers, it‚Äôs important to realize that team members react to a negative incident with their managers\nsix times more strongly\nthan they do to a positive one.\nKeeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself.\nIn the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member‚Äôs performance going forward.\nGive recognition generously, in the open, and often to\ngenerate more engagement\nfrom your team.\nGet to know each other\nWe use a lot of\ntext-based communication\n, and if you know the person behind the text, it will be easier to prevent conflicts.\nSo we encourage people to get to know each other on a personal level through\ninformal communication\n, for example, virtual\ncoffee chats\n, and during\nGitLab Summit\n.\nReach across company departments\nWhile it‚Äôs wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible.\nDon‚Äôt pull rank\nIf you have to remind someone of the position you have in the company, you‚Äôre doing something wrong.\nPeople already know\nour decision-making process\n.\nExplain why you‚Äôre making the decision, and respect everyone irrespective of their function.\nThis includes using the rank of another person -\nincluding the CEO\n- to sell an idea or decision.\nAssume positive intent\nWe naturally have a double standard when it comes to the actions of others.\nWe blame circumstances for our own mistakes, but individuals for theirs.\nThis double standard is called the\nFundamental Attribution Error\n.\nIn order to mitigate this bias, you should always\nassume positive intent\nin your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes.\nWhen\ndisagreeing\n, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g.\n‚Äústraw man‚Äù\n). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent‚Äôs position. We call this arguing against a ‚Äústeel‚Äù position, instead of a ‚Äústraw‚Äù one. This concept is borrowed from\nargue the ‚Äústeel man‚Äù\ntechnique.\nA ‚Äústeel‚Äù position should be against the absolute most effective version of your opponent‚Äôs position ‚Äî potentially even more compelling than the one they presented. A good ‚Äústeel‚Äù position is one where the other person feels you‚Äôve represented their position well, even if they still disagree with your assumptions or conclusion.\nAddress behavior, but don‚Äôt label people\nThere is a lot of good in\nthis article\nabout not wanting jerks on our team, but we believe that\njerk\nis a label for behavior rather than an inherent classification of a person.  We avoid classifications.\nSay sorry\nIf you made a mistake, apologize as soon as possible.\nSaying sorry is not a sign of weakness but one of strength.\nThe people that do the most work will likely make the most mistakes.\nAdditionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else.\nMistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel).\nNo ego\nDon‚Äôt defend a point to win an argument or double-down on a mistake.\nYou are not your work; you don‚Äôt have to defend your point.\nYou do have to search for the right answer with help from others.\nIn a GitLab Unfiltered\ninterview\n, GitLab Head of Remote Darren M. adds context on this operating principle.\nIn many organizations, there‚Äôs a subtle, low-level, persistent pressure to continually prove your worth.\nAnd I believe that this fuels imposter syndrome and wreaks havoc on\nmental health\n.\nWhat‚Äôs so troubling to me is how often perception is reality.\nIn other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results.\nAt GitLab, ‚Äúno ego‚Äù means that we foster and support an environment where results matter, and you‚Äôre given agency to approach your work in the way that makes sense to you.\nInstead of judging people for not approaching work in an agreed-upon way, ‚Äúno ego‚Äù encourages people to glean inspiration from watching others approach work in new and different ways.\nSee others succeed\nA candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed.\nDon‚Äôt let each other fail\nKeep an eye out for others who may be struggling or stuck.\nIf you see someone who needs help, reach out and assist. This might involve offering to\npair program\nor setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance.\nWe are a team, so we succeed and shine together by supporting each other!\nPeople are not their work\nAlways make suggestions about examples of work, not the person.\nSay ‚ÄúYou didn‚Äôt respond to my feedback about the design‚Äù instead of ‚ÄúYou never listen‚Äù.\nAnd, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed.\nDo it yourself\nOur collaboration value is about helping each other when we have questions, need critique, or need help.\nNo need to brainstorm, wait for consensus, or\ndo with two what you can do yourself\n. The Bolt Handbook refers to this as the\nFounder Mentality\n, where all team members should approach the problem as if they own the company.\nBlameless problem solving\nInvestigate mistakes in a way that focuses on the situational aspects of a failure‚Äôs mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team.\nWe hold blameless\nroot cause analyses\nand\nretrospectives\nfor stakeholders to speak up without fear of punishment or retribution.\nShort toes\nPeople joining the company frequently say, ‚ÄúI don‚Äôt want to step on anyone‚Äôs toes.‚Äù\nAt GitLab, we should be more accepting of people taking initiative in trying to improve things.\nAs companies grow, their speed of decision-making goes down since there are more people involved.\nWe should counteract that by having short toes and feeling comfortable letting others contribute to our domain.\nFor example, pointed, respectful feedback to a\nproposal\nby GitLab‚Äôs CEO led to his own merge request being closed. However, it is not required to respond to comments.\nIt‚Äôs impossible to know everything\nWe know we must rely on others for the expertise they have that we don‚Äôt.\nIt‚Äôs OK to admit you don‚Äôt know something and to ask for help, even if doing so makes you feel vulnerable.\nIt is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole.\nAfter your question is answered,\nplease document the answer so that it can be shared\n.\nDon‚Äôt display surprise when people say they don‚Äôt know something, as it is important that everyone feels comfortable saying ‚ÄúI don‚Äôt know‚Äù and ‚ÄúI don‚Äôt understand.‚Äù\n(As inspired by\nRecurse\n.)\nCollaboration is not consensus\nWhen collaborating, it is always important to stay above radar and work\ntransparently\n, but collaboration is\nnot consensus\nand disagreement is part of collaboration.\nYou don‚Äôt need to ask people for their input, and they shouldn‚Äôt ask you ‚ÄúWhy didn‚Äôt you ask me?‚Äù.\nYou don‚Äôt have to wait for people to provide input, if you did ask them.\nYou don‚Äôt need to have everyone agreeing to the same thing - they can\ndisagree, commit, and advocate\n.\nTwo-way doors decisions\ncan be reversed as part of\ndisagree, commit, and advocate\n, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster.\nWe believe in permissionless innovation ‚Äî you don‚Äôt need to involve people, but everyone can contribute.\nThis is core to how we\niterate\n, since we want smaller teams moving quickly rather than large teams achieving consensus slowly.\nCollaboration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate collaboration when we take action to help others and include other‚Äôs (both internal and external) input (both help and feedback) to achieve the best possible outcome.\nGitLab Job Grade\nDemonstrates Collaboration Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops collaboration skills by learning from other team members\nKnowledge Assessment for Individual Contributors\n6\nGrows collaboration skills by using different types of communication; files issues appropriately, asks in the right Slack channels and uses the right labels.\n7\nModels collaborative behavior for fellow team members and others within the group.\n8\nCoaches team members on how to collaborate more effectively and pointing team members to the right channels to collaborate.\nKnowledge Assessment for People Leaders\n9\nFosters collaborative decision making and problem solving across the departments.\n10\nDrives team collaboration across divisions/departments, silos, and division boundaries.\n11\nDevelops networks and builds partnerships, engages in cross-functional activities; collaborates across boundaries, and finds common ground with a widening range of stakeholders.  Utilizes contacts to build and strengthen internal support base\n12\nLeads collaboration and teamwork in daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Encourages greater cross-functional collaboration among e-team leaders.\n14\nChampions collaboration and teamwork into daily routines, prioritizing interactions, information sharing, and real time decision making across divisions/departments. Champions cross-functional collaboration among e-team leaders and GitLab.\nüìà Results for Customers\nWe exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else.\nThe Results for Customers value is displayed through the following operating principles:\nSet Ambitious & Measurable goals\nWhile we iterate with small changes, we strive for large, ambitious results. We have an ambitious\nmission\nand\nvision\n, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results.  We agree in writing on measurable goals. We have and report against\nKPIs\nwith guiding targets.\nUnderstand our customers\nAll GitLab team members should understand our customers‚Äô needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab‚Äôs customers.\nWe better understand customers and their needs through:\nReviewing public facing GitLab issues from our customers and users\nDogfooding\nour product to understand the user experience\nReading customer stories from Marketing and Sales\nAttending Customer fireside chats\nLearning feedback from our customers and users on product features and roadmap\nCo-create\nWe create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world.\nKeep end users in sight\nOur focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of\nthe Concur effect\n.\nArvind Narayanan\n, a Princeton Professor, described his frustration with Blackboard in a viral Tweet:\nIt has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that‚Äôs if you even remember the correct sequence the first time).\nSoftware companies can be breathtakingly clueless when there‚Äôs a layer of indirection between them and their users. Everyone who‚Äôs suffered through Blackboard will have the same reaction to this: try having less functionality!\nRyan Falor\nfollowed up on Narayanan‚Äôs tweet with his definition of the Concur Effect:\ndecision makers are not direct users\nfeatures are overwhelming and disjointed\nuser experience gets worse over time\nSee\nthe Hacker News discussion\nfor a specific UX example.\nAt GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users.\nCustomer results are more important\nthan:\nWhat we plan to make\n. If we focus only on our own plans, we would have only GitLab.com and no self-managed delivery of GitLab. This does not mean that we will agree to every feature request, but we won‚Äôt let existing plans be an obstacle to working on what will drive the most customer value.\nLarge customer requests\n. Catering to requests from large customers leads to the\ninnovator‚Äôs dilemma\n, we need to also focus on results for small and future customers.\nOur existing scope\n. For example, when customers asked for better integrations and complained about integration costs and effort, we responded by expanding our scope to create a\nsingle application\nfor the DevOps lifecycle.\nOur assumptions\n. Every company works differently, so we can‚Äôt assume that what works well for us will support our customers‚Äô needs. When we have an idea, we must directly validate our assumptions with multiple customers to ensure we create scalable, highly relevant solutions.\nWhat we control\n. We strive to provide the best possible experience for each of our customers, and take responsibility for all of the aspects that we can reasonably control.\nMeasure impact, not activity\nWe care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn‚Äôt feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don‚Äôt have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions.\nDogfooding\nWe\nuse our own product\nin the way our users do to surface improvements that will lead to better\ncustomer results\n. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways:\nOur development organization uses GitLab.com to manage the DevOps lifecycle of GitLab itself.\nAll team members use GitLab to collaborate on this handbook.\nWe capture content and processes in Git repos and manage them with GitLab.\nWhen something breaks, doesn‚Äôt work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community.\nGive agency\nWe give people agency to focus on what they think is most beneficial. If a meeting doesn‚Äôt seem interesting and someone‚Äôs active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes.\nChallenger mindset\nChallenging the status quo can lead to remarkable results - we must never stop. A\nchallenger mindset\nrequires that we continually ask ourselves bold, difficult questions about our business and the problems we solve, while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be\ntenacious\n. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism, internally as GitLab team members, we must focus our efforts inwardly on achieving our very best results for customers to win market share.\nGrowth mindset\nYou don‚Äôt always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on\ntheir trajectory, not their pedigree\n. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations.\nCross-functional optimization\nOur definition of cross-functional optimization is that you do what is best for the organization as a whole. Don‚Äôt optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from\nthe GTM teams\n, the right decision may be to push your own team‚Äôs target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives.\nIn the context of\ncollaboration\n, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can.\nEmbrace Tenacity\nWe refer to this as ‚Äúpersistence of purpose‚Äù. As talked about in\nThe Influence Blog\n, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed.\nHave Ownership & Accountability\nWe expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve.\nSense of urgency\nTime gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and\nways we communicate\n, so the compounding of results can begin and we can focus on the next improvement.\nOperate with a bias for action\nIt‚Äôs important that we keep our focus on action, and don‚Äôt fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working\nDisagree, commit, and advocate\nWhen a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is\na common principle\n.\nEvery decision can be changed;\nour\nbest decision was one that changed an earlier one\n.\nIn a manager-report relationship, usually the report is the\nDirectly Responsible Individual\nThe manager may disagree with the final decision, but they still commit to the decision of the DRI.\nIn a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes,\nmany or all individuals may disagree yet choose not to speak up\n, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback.\nDissent\nis expression of that disagreement. However, it can be difficult and even socially expensive.\nExpression of feedback is a way for everyone to grow and learn, and is\nbased on facts rather than opinions\n. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else.\nWhen you want to reopen the conversation on something, show that your argument is informed by previous conversations and\nassume the decision was made with the best intent\n.\nYou have to achieve results on every decision while it stands, even when you are trying to have it changed.\nYou should communicate with the\nwho can change the decision instead of someone who can‚Äôt.\nEscalate to unblock\nIf there is a disagreement and you can‚Äôt move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker.\nResults Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate results when we do what we promised to each other, customers, users, and investors.\nGitLab Job Grade\nDemonstrates Results Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops the skills needed to commit and execute on agreed actions.\nKnowledge Assessment for Individual Contributors\n6\nApplies commitment to results and demonstrates ability to execute on agreed actions.\n7\nModels a sense of urgency and commitment to deliver results.\n8\nCoaches team members to collaborate and work iteratively towards impact with the focus on the outcome and not activity worked.\nKnowledge Assessment for People Leaders\n9\nFosters a culture of ownership of personal performance.\n10\nDrives efficient execution of results ensuring collaboration between team members.\n11\nDevelops quarterly OKR's ensuring the performance and results of one or more teams.\n12\nLeads the achievement of results while driving the continued alignment to our values of collaboration, efficiency, diversity, iteration and transparency.\n‚è±Ô∏è Efficiency\nAt GitLab, efficiency means producing\nresults\nwithout wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole.\nWhen we work internally with other team members, we leverage GitLab‚Äôs unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab‚Äôs ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications.\nOnly Healthy Constraints\nMost companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a\nstartup\n. We try to limit ourselves to\nhealthy constraints\n.\nWrite things down\nWe document everything: in the handbook, in meeting notes, in issues.\nWe do that because ‚Äú\nthe faintest pencil is better than the sharpest memory\n.‚Äù\nIt is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it.\nBoring solutions\nUse the simplest and most boring solution for a problem, and remember that\n‚Äúboring‚Äù\nshould\nnot be conflated with ‚Äúbad‚Äù or ‚Äútechnical debt.‚Äù\nThe speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps.\nDon‚Äôt pick an interesting technology just to make your work more fun;\nusing established, popular tech will ensure a more stable and more familiar experience for you and other contributors.\nMake a conscious effort to\nrecognize\nthe constraints of others within the team.\nFor example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future.\nSelf-service and self-learning\nTeam members should first\nsearch for their own answers\nand, if an answer is not readily found or the answer is not clear, ask in public as we all should have a\nlow level of shame\n.\nWrite down any new information discovered\nand pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results.\nTeam members have more room to grow themselves when they are able to self-service and self-learn.\nEfficiency for the right group\nOptimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself ‚ÄúFor whom does this need to be most efficient?‚Äù Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision.\nBe respectful of others‚Äô time\nConsider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions.\nSpend company money like it‚Äôs your own\nEvery dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company.\nConsider the degree to which a purchase increases your ability to better accomplish your work and achieve business\nresults\nrelative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas.\nWe have\nguidelines\naround this operating principle to help team members better understand our expensing process and expectations.\nFrugality\nAmazon states it best\nwith: ‚ÄúAccomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.‚Äù\nShort verbal answers\nGive short answers to verbal questions so the other party has the opportunity to ask more or move on.\nKeep broadcasts short\nKeep one-to-many written communication short, as mentioned in\nthis HBR study\n: ‚ÄúA majority say that what they read is frequently ineffective because it‚Äôs too long, poorly organized, unclear, filled with jargon, and imprecise.‚Äù\nManagers of one\nWe want each team member to be\na manager of one\nwho doesn‚Äôt need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end.\nWhen team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day.\nFreedom and responsibility over rigidity\nWhen possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process,\nor creating interdependencies\n, because they enable faster decision velocity and higher rates of\niteration\n.\nWhen team members have freedom and responsibility over rigidity, they have more room to help others.\nAccept mistakes\nNot every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks.\nMove fast by shipping the minimal valuable change\nWe value constant improvement by iterating quickly, month after month. If a task is not the\nsmallest viable and valuable thing\n, cut the scope.\nEmbrace change\nAdoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to\nhold management accountable for being deliberate\n.\nEfficiency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work.\nGitLab Job Grade\nDemonstrates Efficiency Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops an understanding of being a manager of 1 by taking responsibility for your own tasks and delivering on commitments. Brings up ideas for process improvements to 1:1s. Learns to write everything down as it is far more efficient to read a document at your convenience than to have to ask and explain.\nKnowledge Assessment for Individual Contributors\n6\nDevelops a deeper understanding of efficiency and actively identifies process inefficiencies within the team. Seeks out ways to be more effective in their role, while also starting to mentor others in ways to work efficiently.\n7\nModels a culture of efficiency within the team where people make good, timely decisions using available data and assessing multiple alternatives. Models using boring solutions for increasing the speed of innovation for our organization and product.\n8\nTakes ownership of own team process inefficiencies, implements cross team efforts in ensuring things are running smoothly. Implements a way of working in the team where team members first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame.\nKnowledge Assessment for People Leaders\n9\nTakes ownership of group level process inefficiencies and guides cross sub-departments in ensuring things are running smoothly. Fosters a culture in the sub-departments where you respect others' time and promote self-service and self-learning.\n10\nDrives the framework of frugality on a department level and owns departments efforts in ensuring things are running smoothly. Drives efficient resolution of highly complex or unusual business problems that impact the department / team. Holds their managers and peers accountable for upholding this value.\n11\nDevelops the framework and strategy of frugality cross division resulting in efforts ensuring things are running smoothly. Develops leaders to action on division/department/team inefficiencies. Hold their management teams accountable for upholding this value.\n12\nLeads with efficiency across the company. Ensures efficient resource allocation decisions across the company. Leads across company strategy and policy improvements that move the business towards more efficiency. They hold their senior management and the e-group accountable for upholding this value.\nChampions GitLab's strategy for efficiency internally and externally. Constantly looking for efficiency improvements cross company and holding other e-group members accountable for upholding efficiency too. They are comfortable leading through frugality and accepting of mistakes.\nüåê Diversity, Inclusion & Belonging\nDiversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build a culture that is\ninclusive\nand supports all team members equally in the process of achieving their professional goals. We work to make everyone feel welcome and to increase the participation of underrepresented groups in our community and company.\nBias towards asynchronous communication\nTake initiative to operate\nasynchronously\nwhenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are\nstructuring their day\naround pressing commitments at home or in their community.\nThis is demonstrated by communicating recordings of\nmeetings\n, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to\ndocumentation\nrather than pressuring others to be online outside of their working hours.\nEmbracing uncomfortable ideas and conversations\nPart of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority.\nWe believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don‚Äôt understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply ‚Äúappearing to care‚Äù.\nUnderstanding the impact of microaggressions\nMicroaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression?\n‚ÄúThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.‚Äù -  Derald W. Sue\nAt GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact.\nSeek diverse perspectives\nWe believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to\nGitLab‚Äôs definition of Diversity, Inclusion & Belonging\n. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias.\nAn example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term ‚ÄúBrag Document‚Äù was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the\npsychological safety\nto raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a\ndiverse perspective\n, a survey was conducted in one of the\nTeam Member and Advocacy Resource Group (TMRG)\nchannels. The poll results showed that 100% of those polled preferred a different title and the title was changed.\nMake family feel welcome\nOne of the unique elements to an\nall-remote culture\nis the ability to visit a person‚Äôs home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment.\nShift working hours for a cause\nCaregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there‚Äôs a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you‚Äôll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it‚Äôs easy for them to catch up.\nBe a mentor\nPeople feel more included when they‚Äôre supported. To encourage this, and to support diversified learning across departments, consider GitLab‚Äôs\nInternship for Learning\nprogram.\nCulture fit is a bad excuse\nvalues fit\n, not a culture fit.\nWe want cultural diversity instead of cultural conformity. Said differently:\n‚Äúculture add‚Äù > ‚Äúculture fit‚Äù\nor ‚Äúhire for culture contribution‚Äù since our\nmission is that everyone can contribute\n.\nReligion and politics at work\nWe generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn‚Äôt mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company.\nThere is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our\nCode of Business Conduct and Ethics\n, avoid posting articles that reference specific political figures or parties.\nWhile it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our\nCode of Business Conduct and Ethics\n.\nWe‚Äôre a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to\ndiversityinclusion@gitlab.com\nor\n#diversity_inclusion_and_belonging\n.\nQuirkiness\nUnexpected and unconventional things make life more interesting.\nCelebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves.\nBuilding a safe community\nDo\nnot\nmake jokes or unfriendly remarks about\ncharacteristics of the people who make up GitLab and how they identify\n.\nEveryone has the right to feel safe when working for GitLab and/or as a part of the GitLab community.\nWe do not tolerate abuse,\nharassment\n, exclusion, discrimination, or retaliation by/of any community members, including our team members.\nYou can always\nrefuse\nto deal with people who treat you badly and get out of situations that make you feel uncomfortable.\nUnconscious bias\nWe recognize that unconscious bias is something that affects everyone and that the\neffect it has on us as humans and our company is large.\nWe are responsible for understanding our own implicit biases and helping others\nunderstand theirs. We are continuously\nworking on getting better at this topic\n.\nInclusive benefits\nWe list our\nParental Leave\npublicly so people don‚Äôt have to ask during interviews.\nInclusive language & pronouns\nUse\ninclusive\nlanguage.\nFor example, prefer ‚ÄúHi everybody‚Äù or ‚ÄúHi people‚Äù to ‚ÄúHi guys‚Äù, and ‚Äúthey‚Äù instead of ‚Äúhe/she‚Äù. While there are several good guides from folks like\n18f\n,\nUniversity of Calgary\n, and\nBuffer\non using inclusive language, we don‚Äôt keep an exhaustive list.\nWhen new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative.\nIf your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don‚Äôt think it is a problem.\nAnd if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it,\napologize gracefully and move on\n; there is no need to dwell on it, and you can work to avoid making that mistake in the future.\nPlease also visit our\nGender and Sexual-orientation Identity Definitions and FAQ\npage if you have questions around pronouns and other topics related to gender / sexual orientation.\nLearn how to pronounce other people‚Äôs names\nWe attach part of our identity to our names, and if it is mispronounced it can feel less inclusive.\nIf it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested\nin learning how to pronounce their name correctly. This applies to everyone you are in contact with:\nteam members, customers, candidates for jobs, and anyone else.\nPeople whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not\nspeak up about it.\nOther negative behaviors include giving a person a nickname without their permission, or\nactively avoiding using their name in sync calls.\nIt might be challenging to pronounce names from a different language or culture than your\nown, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are:\nAsk the person for help in a private space: ‚ÄúI‚Äôm sorry, I don‚Äôt think I am pronouncing your name correctly. Can you help me with the correct pronunciation?‚Äù\nUse the written and recorded pronunciation tools in Slack.\nUse online tools such as videos recorded on YouTube or\nNameShouts\n.\nPractice the pronunciation with a friend or team member who knows the correct pronunciation.\nAlways avoid making jokes or comments about how it is difficult to pronounce their name.\nUse of nicknames\nSome people might choose to use a nickname, for example: ‚ÄúBob‚Äù instead of ‚ÄúRobert‚Äù.\nAs long as this is their choice this is perfectly acceptable.\nWe should avoid assigning a nickname to a person without their permission.\nSlack pronunciation features\nSlack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by\nediting your profile\n.\nInclusive interviewing\nThis is documented on our page about\ninterviewing\n.\nInclusive meetings\nBe consciously inclusive in\nmeetings\nby giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting.\nWith internal meetings, consider using an agenda document for questions. For example, with GitLab\nAMAs\n, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation.\nCustomers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion.\nInclusive and fair policy to regions with fewer employees\nBeing globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions.\nFor example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided.\nWhen planning an event, the organizer should cater for location density differences to maximize participation in all regions.\nSee Something, Say Something\nAs a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don‚Äôt feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn‚Äôt respectful or inclusive.\nEmbracing Neurodiversity\nNeurodiversity\nrefers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring\nunique skills and abilities\nwhich can be harnessed for a\ncompetitive advantage\nin many fields (for example,\ncybersecurity\n), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive.\nAt GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into\ntransparency\n, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them.\nRemember,\nbrains work differently\nand always\nassume positive intent\n, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result.\nWe also recommend that all team members review the\nReasonable Accommodation\nprocess. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools.\nThe most important thing that managers can do is facilitate an environment in which all team members feel\npsychologically safe\nenough to make requests for\nwhat they need\nin order to do their job.\nFamily and friends first, work second\nLong-lasting relationships\nare the rocks of life\n, and come before work. As someone said in our\n#thanks channel\nafter helping a family member for five days after a hurricane: ‚ÄúTHANK YOU to GitLab for providing a culture where ‚Äúfamily first‚Äù is truly meant‚Äù.  Use the hashtag:\n#FamilyAndFriends1st\nEquity not just equality\nEquity vs. Equality: What‚Äôs the Difference?\nWhile the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people.\nEquality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome.\nDiversity, Inclusion & Belonging Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute.\nIf you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources:\nBeing an Ally\nBeing Inclusive\nRecognizing Bias\nGitLab Job Grade\nDemonstrates Diversity & Inclusion Competency by‚Ä¶\nDemonstrates DIB Behaviors by‚Ä¶\n(Should not be considered an exhaustive list)\nKnowledge Assessment\n4\nLearns to understand the impact of biases. Gathering more information about the skills needed to be accountable for their actions, apologizes and learn.\n5\nDevelops an understanding of the impact of biases; seeks to learn more about their own biases. Is accountable for their actions, apologizes and learns from their mistakes.\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, \"like\" slack posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nKnowledge Assessment for Individual Contributors\n6\nHas a growing understanding of the impact of biases; fosters a sense of inclusion and belonging on their team. Holds themselves and peers accountable for upholding this value by kindly pointing out when mistakes might be made. Encourages an inclusive team environment where differences are encouraged and everyone can contribute.\n7\nActively aware of how bias or exclusion might occur on a team and helps to facilitate a team environment where team members belong and feel safe. Models empathy with their interactions with customers and cross functional team members.\n8\nImplements best practices to limit bias on their team. They ensure blameless accountability is practiced throughout their team. Creates an environment where team members feel safe to share ideas and welcomes individual differences.\ntraining and/or other company wide training to further education on DIB\nAttend DIB Initiatives Calls to stay informed and connected with ongoing efforts and discussions\nParticipate in a DIB Initiative: join\nTMRGs\nyou identify with, support other groups as an Ally, attend events, like posts and spread the word\nParticipate in a TMRG initiative\nMember of a working group related to a DIB initiative, e.g. participate in a\nMentorship\nprogram\nHiring Manager ensure a diverse candidate slate and interview panel\nActive participant and advocate for department DIB goals\nKnowledge Assessment for People Leaders\n9\nProactively finds ways of facilitating an inclusive team environment and assesses processes to protect against unconscious bias. They hold their team members accountable including cross functional stakeholders. Promotes individual differences across their team and other departments.\n10\nDrives diversity, inclusion and sense of belonging across their department. They hold their managers and peers accountable for upholding this value. They are actively involved in the execution of D&I strategies and encourage others to participate.\nBlack is Tech\n,\nGrace Hopper\n11\nEmbeds the value of Diversity & Inclusion across their division and finds opportunities to limit the impact of bias on decision making processes. Uses feedback and data to formulate a strategy on how to make improvements. They hold their management teams accountable for upholding the value.\n12\nLeads with the value of Diversity & Inclusion across the company and finds opportunities to limit the impact of bias on decision making processes. They sponsor internal initiatives to increase trust, psychological safety and inclusion. They hold their senior management and the e group accountable for upholding this value.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as an\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\nChampions the value of Diversity, Inclusion and Belonging into the company's strategy. They champion and sponsor internal and external D&I initiatives. They speak to the importance of this value in company-wide meetings. They hold their leaders and other e group members accountable for upholding this value. They continuously seek ways to increase trust, psychological safety and inclusion across the broader company.\nDIB Team\n&\nLeadership DIB Council\nto establish an action plan for your departments & division\nServe as a\nexecutive sponsor\nEmbed DIB into All hands or in person events e.g.review organizations OKR as it relates to DIB progress, champion trainings related to further DIB knowledge, invite guest speakers to advocate\nüë£ Iteration\nMerriam-Webster\ndefines iteration as the ‚Äúthe action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.‚Äù At GitLab, we iterate to do the\nsmallest valuable thing to get fast feedback and efficiently reach a desired end goal\n. Feedback can be from internal users (dogfooding), a limited number of external users (through our\nearly access program\n), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers.\nWhen we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state:\nMerge in codebase\nDogfood\nHave some external users (early access program)\nEnsure global optimization (use standardized systems)\nPlan beyond the iteration\nIteration does not require us to ship features that are open to all users from day one. Feedback can come from internal users or a limited number of external users (early access program). Moving through the\nrelease process is not iteration\nthough. Iteration is also not a\nreplacement for having a plan\n. We expect you to know where you are going, but you can iterate to get there.\nAn iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link.\nWhile you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You‚Äôre doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one.\nMany people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don‚Äôt deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn‚Äôt. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don‚Äôt know how to make the transition, and it‚Äôs hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards.\nThe way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you‚Äôre doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We‚Äôre quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert.\nHowever, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only ‚Äúx‚Äù amount of time on it, and that the next iteration will contain ‚Äúy‚Äù and be ready on ‚Äúz‚Äù.\nIteration enables\nresults\nand\nefficiency\n.\nIn the\nGitLab Unfiltered video\nembedded above, GitLab co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization.\nStart with a long-term vision\nIteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don‚Äôt start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results.\nIteration is no substitute for planning\nIteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include:\nTime-bound objective: Where we want to be in a year\nUX: User experience we are working toward\nQuality: What quality is sufficient quality, inclusive of security\nSuccess metric: Usage we want at a specific time\nData schema: The data schema we need to measure progress towards project goals\nGTM plan: How we want to go to market\nEnablement: When we‚Äôd plan to train and enable the support and field teams\nMarketing: When we‚Äôd launch marketing (doesn‚Äôt have to be at release)\nSecure by design: default to the most secure configuration\nThe release process is not iteration\nMoving through the release process is not iteration.\nThe release process can include:\nDogfooding\nEarly access\nIncremental release using\na feature flag\nDevelopment stage progression\n(such as experiment to beta)\nRelease\nAnnouncement\nWhile\ndevelopment stages\ncan be used to indicate release progress, is not itself iteration.\nIterate toward global maximum\nIf we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a ‚Äúlocal maximum‚Äù of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not ‚Äúhalf-baked‚Äù and align with work being done across the entire organization.\nDon‚Äôt wait\nDon‚Äôt wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don‚Äôt wait until you have a better version. Don‚Äôt wait until you record a better video. Don‚Äôt wait for an event (like\nGitLab Summit\n). Inventory that isn‚Äôt released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don‚Äôt wait we signal intent to others that we have a purpose to resolve something.\nNote\n: ‚ÄúDon‚Äôt wait‚Äù should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers.\nSet a due date\nWe always try to set a due date. If needed, we cut scope.\nIf we have something planned for a specific date, we make that date. For example we\nshipped over 133 monthly releases\n. But every one of them doesn‚Äôt contain all the features we planned.\nIf we planned an announcement for a certain date, we might announce less or indicate what is still uncertain.\nBut we set a due date because having something out there builds trust and gives us better feedback.\nCleanup over sign-off\nAs discussed in\nSid‚Äôs interview on iteration\n, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn‚Äôt coherent), but we try to ensure that people don‚Äôt need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers.\nStart off by impacting the fewest users possible\nIteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer:\nFew users over many users\nInternal users (dogfooding) over external users\nEnvironments with fast feedback (SaaS) over slow feedback (self-managed)\nReduce cycle time\nShort iterations reduce\nour cycle time\n. Merging frequently also prevents merge conflicts.\nWork as part of the community\nSmall iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback.\nMinimal Valuable Change (MVC)\nWe encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user‚Äôs outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the\nproduct handbook\n, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we‚Äôre adding useful functionality without obvious bugs or usability issues.\nMake a proposal\nIf you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone‚Äôs input. Having a proposal will be a much more effective use of everyone‚Äôs time. Every meeting should be a review of a proposal. We should be\nbrainwriting on our own instead of brainstorming out loud\n. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don‚Äôt let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don‚Äôt have a proposal, don‚Äôt let that stop you from highlighting a problem, but please state that you couldn‚Äôt think of a good solution and list any solutions you considered.\nBy making a proposal you also provide better visibility into the work and the context surrounding it.\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components.\nEverything is in draft\nAt GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and\nassuming others have low context\n, confusion can be reduced as people have shared access to information.\nUnder construction\nAs we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end.\nEducating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan:\nOpen a feedback issue that provides context about the initial MVC (\nexample\n)\nEnsure the direction page articulates a long-term plan (\nexample\n)\nAnnounce the MVC in a release post, link to the feedback issue, and link to the direction page (\nexample\n)\nLow level of shame when dogfooding\nIn many organizations, you take a risk when you put forth any work that‚Äôs not perfect, work where you haven‚Äôt spent endless cycles planning for contingencies or counterpoints. Because of this, you‚Äôre incentivized to invest a lot of time and effort into preparing for ‚ÄòWhat if?‚Äô scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection.\nThe downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you‚Äôve squandered time that you could have spent improving it through iteration.\nHaving a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it‚Äôs perfect, and instead celebrate the small changes.\nCultural lens\nCultural differences can bring unique challenges and expectations to iteration. For some, expressions like ‚Äúit doesn‚Äôt have to be perfect‚Ä¶‚Äù can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating.\nGiving feedback\nand ensuring\npsychological safety\nare necessary for every iterative attempt.\nFocus on improvement\nWe believe great companies sound negative because they focus on what they can improve, not only on what is working well.\nIn every conversation, inside and outside the company, we should ask a question: What do you think we can improve?\nThis doesn‚Äôt mean we don‚Äôt recognize our successes; for example, see our\nSay Thanks\nvalue.\nWe are positive about the future of the company. We are\nhort\nTe\nrm\nritical\nnd\nong\nerm\nptimistic (\nSTeCALTO\n, for short).\nBe deliberate about scale\nFirst, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in\nthis article by Paul Graham\n.\nResist bundling\nResist the urge to bundle a series of smaller iterations so team members don‚Äôt see a project as their last (or best) opportunity to contribute. It‚Äôs tempting to\ncreate encompassing projects or initiatives\nthat roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved.\nMake two-way door decisions\nMost decisions are easy to reverse. In these cases, the\nDirectly Responsible Individual\nshould go ahead and make them without approval. Only when you can‚Äôt reverse them should there be a more thorough discussion. By\nembracing iteration\nand making two-way door decisions, we are more efficient and achieve more results.\nChanging proposals isn‚Äôt iteration\nChanging something without shipping it is a revision, not iteration. Only when the change is rolled out to users, whether\ninternal users or a limited customer group\n, can you learn from feedback. When you‚Äôre changing a proposal based on different opinions, you‚Äôre frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite.\nEmbracing Iteration\nIn order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it‚Äôs where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the\nend of the first iteration\nrather than a\nhypothetical future state\nthat requires multiple iterations. By embracing iteration we can increase creativity in incremental components.\nMake small merge requests\nWhen you are submitting a merge request for a code change, or a process change in\nthe handbook, keep it as small as possible. If you are adding a new page to the\nhandbook, create the new page with a small amount of initial content, get it merged\nquickly via\nHandbook Usage guidelines\n, and then add additional sections iteratively with subsequent merge requests.\nSimilarly, when adding features to GitLab, consider ways to\nreduce the scope\nof the feature before creating the merge request to ensure your merge request is as small as possible.\nAlways iterate deliberately\nRapid iteration can get in the way of\nresults\nif it‚Äôs not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we‚Äôve set development plans),\norganizational structure\nor\nproduct scope alignment\n(where real human stresses and team stability are involved), sales methodologies (where we‚Äôve trained our teams) and this values page (where\nwe use the values to guide all GitLab team members). In those instances, we add additional review to the approval\nprocess; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the\nGitLab Handbook Usage\npage and takes place via merge request approvals.\n12 things that are not iteration\nIteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we‚Äôve seen mistaken as iteration, but don‚Äôt meet our definition of iteration.\nReducing quality, or lowering goal posts\nAvoiding or reducing documentation\nCompromising on security\nDelivering something that‚Äôs not the recommended path or on by default\nShipping something of no value\nAn excuse to focus on unimportant items\nMoving through the release process\nRevisions you don‚Äôt ship or publish\nAn excuse to impose unrealistically tight timelines\nAn excuse to avoid planning\nImposing long hours\nExpecting others to fix your work\nIn this\nGitLab Unfiltered video\n, GitLab co-founder Sid Sijbrandij elaborates on each of these 12 things that are not iteration.\nIteration Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback.\nGitLab Job Grade\nDemonstrates Iteration Competency by‚Ä¶\nKnowledge Assessment\n5\nDevelops own knowledge by trying and failing. When asking questions isn't content with silence or unhelpful/incomplete responses, seeks out primary sources.\nKnowledge Assessment for Individual Contributors\n6\nActively looks for opportunities to iterate and contribute to boring solutions. Balances short term gains and long term benefit with team's help. Ships things that aren't 100% knowing that you'll be able to improve them in the next revision. Asks questions with abandon. Publicly shares failures if you'll help colleagues learn.\n7\nIndependently balances short term gains and long term benefit. Identifies opportunities to deliver projects in an iterative way.\n8\nIs able to take long term goals and turn them into small actionable steps that can be implemented in an iterative way. Identifies and prevents decisions that are not \"two-way door decisions\". Ships. All the time. Sounds like a broken record in discussions with more junior members of the team; always asking if we can make something smaller.\nKnowledge Assessment for People Leaders\n9\nIn addition to upholding the requirements of a Staff/Manager level, a Principal/Sr. Manager practices and fosters the value of iteration to team members. They hold their team members accountable for iteration and boring solutions.\n10\nIn addition to upholding the requirements of a Principal/Sr. Manager, a Distinguished/Director proactively finds ways to drive the value of iteration and boring solutions.\n11\nIn addition to upholding the requirements of a  Distinguished/Director , a Sr. Distinguished/Sr. Director embeds the value of Iteration across the department and division.  They use their cognitive and analytical abilities to anticipate and adapt to unpredictabilities in regard to strategic risk in a way that benefits all involved.\n12\nIn addition to upholding the requirements of a Sr. Distinguished/Sr. Director , a Fellow/VP leads the way for the value of Iteration across the division and cross functional teams. They confidently lead their teams through change and proactively take risks based on values and the strategic vision.\nIn addition to upholding the requirements of a Fellow/VP,  the EVP champions the value of Iteration across GitLab. They are comfortable leading through discomfort and the unease associated with change and innovation.\nüëÅÔ∏è Transparency\nBe open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn‚Äôt mean it can‚Äôt be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you‚Äôve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say ‚ÄúWhat‚Äôs the\nkaizen\nmoment here?‚Äù and find a better way without hurt feelings.\nEven as a\npublic company\n, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a\npublic company\n, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so.\nWhen there are exceptions, material that is\nnot public by default is documented\n.\nPublic by default\nEverything at GitLab is public by default.\nThe public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from.\nOne example of transparency at GitLab is the\npublic repository of this website\nthat also contains this\ncompany handbook\n. Others include the\nGitLab CE\nand\nGitLab EE\nissue trackers, as well as\nmarketing\nand\ninfrastructure\n. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons,\nand processes with the\nwhole community\nand the world in the spirit of open source, which we believe creates more value than it captures.\nIn line with our value of transparency and being public by default, all GitLab team member\nprofiles\nshould be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the\nPrivate profile\noption is unchecked\nin your profile settings\n. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles.\nBecause we are public by default and have the\nSAFE framework\nwe don‚Äôt need to make cases for why things should be transparent. If something is unSAFE and needs to remain\nnot public\nit can be.\nNot public\nWe make information public by default because\ntransparency is one of our values\n.\nHowever it is\nmost important to focus on results\n.\nTherefore, a category of information is\npublic\nunless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is\nnot public by default\non our communication page.\nIf you believe something shouldn‚Äôt be public that currently is (or vice versa), then\nmake a merge request\nto the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the\n. When content contains information which is\nnot public\nit is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a ‚Äúnot public/internal only‚Äù note. Always share publicly what we can.\nWhen information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify.\nCertain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information.\nMost companies become non-transparent over time because they don‚Äôt accept any\nmistakes. Instead, we should always err on the side of transparency when there\nis a choice to be made between caution or inaction, and transparency. If we make\na mistake, we now know what the limits of transparency are for the company and\nwe should\ndocument this\n.\nThe only exception to this rule would be in the case when there are legal concerns.\nBecause some information is\nnot public\nthe public information can be lacking some context. We should be cognizant of that.\nDirectness\nBeing direct is about being transparent with each other. We try to channel our inner\nBen Horowitz\nby being\nboth straightforward and kind\n.\nFeedback is always about your work and not your person. That doesn‚Äôt mean it will be easy to give or receive it.\nArticulate when you change your mind\nIf you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an\nearlier\nstance is not your\ncurrent\nstance provides clarity to others and encourages data-driven decision making.\nSurface issues constructively\nBe transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don‚Äôt worry; correct it and\nproactively\nlet the affected party, your team, and the CEO know what happened, how you corrected it, and how‚Äîif needed‚Äîyou changed the process to prevent future mistakes.\nTransparency is most valuable if you continue to do it when there are costs\nWe practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we‚Äôll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about\nsecurity incidents\nand participating in and contributing to Live Broadcasts.\nTransparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs.\nSingle Source of Truth\nBy having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don‚Äôt need separate artifacts with different permissions for different people.\nFindability\nOur transparency value means more than just making information accessible to all. In order to\nimprove performance\nit‚Äôs important that we not only ensure information is accessible, but also ensure it flows to the correct places and is\nfindable\nby those who need it. Focusing on information flow will ensure you, for example, utilize\nmulti-modal communication\n, or that you keep your\nstakeholders informed of changes\nby posting links to MRs in Slack.\nSay why, not just what\nTransparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient.\nThis also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made.\nThis is related to\nChesterton‚Äôs fence\n- it‚Äôs much easier to suggest removing or changing something if you know why it exists in the first place.\nIf you use generalized terms such as ‚Äúindustry standard‚Äù or ‚Äúbest practices,‚Äù be sure to give context, as without context they can be seen as potentially vague or opaque.\nSimilarly, merely stating a single value isn‚Äôt a great explanation for why we are making a particular decision. Many things could be considered ‚Äúiteration‚Äù or ‚Äúefficiency‚Äù that don‚Äôt match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value‚Äôs name.\nSaying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the\nefficiency of boring solutions\nwith the focus on\ncustomer results\n. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our\nvalues hierarchy\nand\ndirectly\ndiscussing the tradeoffs is easier with more context.\nArticulating why also helps people understand how something changed when you\narticulate that you changed your mind\n.\nSaying why does not mean justifying a decision against all other suggestions.\nThe\nis responsible for their decision.\nThe DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change.\nWhen a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a ‚Äúwhy‚Äù with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members.  In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency.\nReproducibility\nEnable everybody involved to come to the same conclusion as you. This not only involves\nreasoning\n, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even\nif they may disagree\n.\nTransparency Competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier.\nGitLab Job Grade\nDemonstrates Transparency Competency by‚Ä¶\nKnowledge Assessment\n5\nUses public issue trackers, projects, and repositories when possible. Looks for opportunities to publicly share the things that they are working on.\nKnowledge Assessment for Individual Contributors\n6\nProvides context and background on projects and issues so that those with no prior knowledge are able to contribute to the discussion. They welcome feedback and new ideas as they know that will lead to a better solution.\n7\nContinually surfaces improvements across their functional area of expertise. They share feedback with others and understand how to disagree and commit to solutions. They model what it means to be as open as possible. They encourage conversation in public channels.\n8\nImplements open processes across their team. They also track team issues and projects openly so their team members are aware of everything that is happening on a team at a given time. They leverage feedback to drive the best possible outcomes with the information they have available. They also share feedback with their team and their peers in a timely, kind manner so their position on a given topic is known.\nKnowledge Assessment for People Leaders\n9\nFosters and coaches openness across cross functional departments. They lead cross functional issues, projects and ideas inviting feedback to generate the best possible solution. They hold their teams accountable to continue to find opportunities to share things openly. They give feedback to their team members, peers and managers in a timely, kind manner so their position on a topic is known.\n10\nDrives their departmental strategy with openness as a key value. They hold their management team accountable to working openly and pushes them to make everything transparent even when it might be difficult to do so. They coach managers on the value that additional feedback can bring to the end solution.\n11\nDevelops leaders that work openly and continue to provide timely, kind feedback across their division. They develop leaders that drive their teams with openness as a foundational part of the way that they operate.\n12\nLeads the company by being open in all things. They are open with things that might traditionally not be shared broadly. They communicate directly and provide feedback in a timely manner to initiatives happening within their department and across the company. They hold the e group and other leaders accountable for upholding this value.\nChampions transparency both internally, across the company and externally. They participate both internally and externally in events and share the value that being open can provide to increasing trust with team members and others that interact with our product. They provide timely, kind feedback with initiatives happening internally and externally. They hold the e group and other leaders accountable for upholding this value.\nWhy have values\nOur values provide guidelines on how to behave and are written to be actionable.\nThey help us describe the type of behavior that we expect from GitLab team members.\nThey help us to know how to behave in the organization and what to expect from others.\nValues provide a framework for distributed decision making, detailed in GitLab‚Äôs\nTeamOps\nmanagement philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that\nour culture\nremains driven by our values.\nLastly, values create a\nconscious culture\nthat is designed to help you prosper and experience exceptional personal growth through work.\nFive dysfunctions\nOur values also help us to prevent the\nfive dysfunctions\n:\nFear of conflict\nSeeking artificial harmony over constructive passionate debate =>\nprevented by transparency, specifically\ndirectness\nand collaboration, specifically\nshort toes\nAbsence of trust\nUnwilling to be vulnerable within the group =>\nprevented by collaboration, specifically\nkindness\nAvoidance of accountability\nDucking the responsibility to call peers on counterproductive behavior which sets low standards =>\nprevented by results, iteration, and\ntransparency\nInattention to results\nFocusing on personal success, status, and ego before team success =>\nprevented by\nresults\nLack of commitment\nFeigning buy-in for group decisions creates ambiguity throughout the organization =>\nprevented by transparency, specifically\ndirectness\nSome dysfunctions are not addressed directly by our values; for example, trust is not one of our values.\nSimilar to happiness, trust is something that is an outcome, not something you can strive for directly.\nWe hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given.\nOperating principles\nOperating principles are behaviors that empower GitLab team members to definitively live out a given value.\nThey clarify what a given core value means and looks like\nat GitLab\n.\nUnderstanding this distinction is critical to thriving at GitLab,\nparticularly for\nnewer team members\nwho may be familiar with a prior organization‚Äôs interpretation of iteration or collaboration (as examples).\nProcess for removing operating principles\nValues are not just things we do, but things that actively drive good behavior.  When we remove them it doesn‚Äôt mean we stopped believing in it, just that it wasn‚Äôt actively helping to drive behavior. If we don‚Äôt prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture.\nTo\nremove\nan operating principle from the Handbook page, submit your change through a merge request and explain your reasons in the merge request description.\nThe GitLab Value Handbook Page owner must approve and merge the request.\nMention the specific value\nMost companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, ‚Äúnot a value add‚Äù or ‚Äúscored well on values during our interview.‚Äù In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members.\nFor certain business decisions or projects (such as\ncompensation\nand\nend-point management\n), GitLab team members may have a lot of opinions and interest,\nand they want to provide their feedback and comments.\nOn the other hand,  it might be challenging for the project DRI to digest and respond to all these inputs.\nWhat should you do in this scenario?\nEveryone can contribute at GitLab.\nWe encourage team members to share feedback and leave comments on issues.\nLeaving feedback and comments shows that team members care about a topic and about GitLab as a company.\nThese perspectives may also uncover potential risks and problems in the project.\nThere shouldn‚Äôt be a\n‚ÄúDon‚Äôt they have their job to do?‚Äù\ntype of response.\nFurthermore, we shouldn‚Äôt judge team members who are perceived as being the ‚Äúsqueaky wheel.‚Äù\nAt GitLab, we\nmeasure impact, not activity\n.\nAs long as a team member is producing required results, they are empowered to decide how to spend their time.\nOn the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone.\nIf a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle.\nIn these cases, it‚Äôs best to have time-boxed feedback built into timelines.\nIn a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment:\nWe‚Äôre deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We‚Äôll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we‚Äôre using for the decision:\nare there allergies to consider?\ncost per pound\nteam member preferences\nOnce the decision is made, it will be what is going into the stew.\nThis method\nhas shown itself to be effective\nat soliciting productive feedback that doesn‚Äôt derail a timeline while ensuring team members feel heard.\nWhy our values are public\nCompanies are encouraged to copy and implement GitLab‚Äôs values. They are Creative Commons and can be copied verbatim.\nWe make our values public for\nmany reasons\n. There is great power and efficiency in teams who share company values. Concealing values until\nafter\nsomeone is hired into an organization is not a wise strategy.\nNot everyone will see our values and feel aligned with them, and that‚Äôs OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who\nare\naligned with GitLab‚Äôs values apply for an\nopen vacancy\n, this allows our hiring teams to more efficiently move candidates through the\ninterview process\n.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nCompanies may ask you to write a blank check. They‚Äôll say, ‚ÄòCome join our organization, and when you‚Äôre here, you need to subscribe to our values, our way of working, and our strategy. It‚Äôs very essential, and it‚Äôs part of our identity!‚Äô\nBut these companies don‚Äôt give you the opportunity up front to evaluate it. It doesn‚Äôt make any sense to me. If it‚Äôs so important that people share your values, have them out there.\nHierarchy\nOccasionally, values can contradict each other. It‚Äôs useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values.\nThink of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:\nIf a change impacts Transparency positively but impacts Efficiency negatively in roughly the same amount, we would move ahead since Transparency is higher in the hierarchy than Efficiency.\nIf a change has a massive positive impact on Diversity but negatively impacts Iteration, we would move ahead even though Diversity is lower in the hierarchy than Iteration because the overall impact is more positive than negative.\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nIt‚Äôs an attempt to relieve at least some of the tension. It‚Äôs not absolute. If you think of values as binary, that‚Äôs not going to work. There will always be interpretation, and there‚Äôs always magnitude to consider.\nWe made a hierarchy so that it‚Äôs clear, in the end, the result matters most. For instance, we‚Äôre not going to be transparent for the sake of being transparent. We‚Äôre not radical in our transparency. We do it because we think it will lead to better outcomes.\nThose hierarchies are really important. They won‚Äôt preempt every debate, but it helps.\nUpdating our values\nOur values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you‚Äôre a\nteam member\nor in the\ncore team\nplease post a link to the MR in the\n#values\nSlack channel\n. If you‚Äôre not part of those groups, please send a direct X/Twitter message to\n@sytses\n.\nHow do we reinforce our values\nWhatever behavior you reward will become your values. We reinforce our values by:\nCriteria we use for\npromotions\nand communicate to the whole company on announcement.\nWhat we select for during\nhiring\n.\nWhat we emphasize during\non-boarding\n.\nCriteria we use for our\nannual compensation review\n.\nWhat we refer to when\nmaking decisions\n.\nThe example the E-group sets for the company since\na fish rots from the head down\n.\nWhat we expect from all team members, as\nambassadors for our values\n.\nKeeping them\nup to date\nwith a\nstream of commits that add details\n.\nBehavior we give each other\n360 feedback\non.\nBehavior we\ncompliment\n.\nCriteria we use for\ndiscretionary bonuses\n.\nWhat we include in our\noffer letters\nCriteria we use to\nmanage underperformance\n.\nWhat we do when we\nlet people go\n.\nGiving value awards during\nGitLab Summit\n.\nProviding GitLab team members and\nqualified individuals\ntransparency into all aspects of the company through the\nCEO Shadow Program\nto enable them to better engage and collaborate cross-functionally.\nLinking the takeaways of courses to our values, like we did for\nthe Crucial Conversations training\n.\nThe default settings of the software we use (for example:\nSpeedy meetings\n,\ndocument sharing\n, agendas, etc.)\nReinforcing our values with features in GitLab, for example the\nIterations feature\n.\nApplying one of our\nvalues virtual backgrounds\nin video calls.\nOur GitLab\nSong Book\nRegularly conduct a values exercise at the\ne-group offsite\n.\nThe most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure.\nIn negative feedback, we should be specific about what the problem is. For example, saying someone is ‚Äú\nnot living the values\n‚Äù isn‚Äôt helpful.\nYour values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances\nare\nyour values. It‚Äôs not what you say they are. Values should be explicitly part of our\nhiring\nprocess, our job profiles, and our\nreview process\n.\nWhen we give\nbonuses\nand\npromotions\n, they are always linked to values. That‚Äôs the crucial thing. If you reinforce them there, that‚Äôs the most powerful thing you can do. ‚Äî\nSid Sijbrandij, GitLab co-founder\nWhat to do if values aren‚Äôt being lived out\nValue erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as ‚Äúme values‚Äù rather than ‚Äúcompany values.‚Äù For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration.\nIf you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with\nassuming positive intent\nfrom other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab‚Äôs\n#values\nSlack channel\n(for GitLab team members) or @-mentioning\n@gitlab\non X/Twitter (for those who do not work at GitLab).\nIn a\nGitLab Unfiltered interview on values\n, GitLab co-founder Sid Sijbrandij offers the following context.\nAlmost every time we face a hard decision at GitLab, it‚Äôs because values are in conflict. It‚Äôs not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision.\nPermission to play\nFrom our values we excluded some behaviors that are obvious; we call them our\npermission to play\nbehavior:\nBe truthful and honest.\nBe dependable and reliable.\nTry to keep promises. If you might not keep a promise, proactively communicate as soon as you suspect it.\nBe deserving of the trust of our team members, users and customers.\nBe committed to the success of the whole organization.\nAct in the best interest of the company, our team members, our customers, users, and investors.\nMake the best decisions for GitLab.\nAct in accordance with the law.\nDon‚Äôt show favoritism as\nit breeds resentment, destroys employee morale, and creates disincentives for good performance\n. Seek out ways to be fair to everyone.\nWe don‚Äôt want people to play politics at GitLab.\nAn example of politics is people discussing a proposal and being overly focused on whose proposal it is.\nThis is a manifestation of the\nBelief Bias\n, where we judge an argument‚Äôs strength not by how strongly it supports the conclusion but by how strongly\nwe\nsupport the conclusion.\nProposals should be weighed on their merits and not on who proposed them.\nAnother example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that‚Äôs different from being promoted just because people like you.\nBelow are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one.\nPolitical environment\nNon-political environment\nValues are weaponized and used out of their intended context\nTeam members utilize values with a positive intent\nTeam members are driven by self-interest\nTeam members are driven by company interest\nTeam members work in silos\nTeam members optimize globally\nPeople have territorial behaviors and are quick to perceive suggestions as attacks\nPeople have\nshort toes\nPeople have unhealthy alliances with backroom conversations\nPeople have good intent and actively collaborate with folks\nInformation is intentionally withheld\nInformation is shared early (often WIP) and at the same time with all interested parties\nPeople try to undermine each other‚Äôs credibility by arguing with the weakest part of their argument\nPeople take a\n‚Äústeel man‚Äù position\nand argue against the strongest version of your opponent‚Äôs position\nFolks do not provide direct feedback. Instead, they withhold their thoughts or speak behind each other‚Äôs backs\nFeedback is given directly. This includes feedback about a manager‚Äôs team\nCommunicating your own suggestions through a report instead of directly\nFeedback is given directly from the person who has it\nEvaluating proposals or work by who said or did it instead of by what is in it\nProposals¬†and work is evaluated without regard to who worked on them\nLack of transparency in escalations. Team members go to a manager without first attempting to align with peers on an issue or letting peers know\nTeam members speak directly to each other about feedback and requests in order to resolve their own conflicts. When they escalate,\nthey do it in an effective way\nValues make choices\nValues make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values ‚Äî although the result is a very different company.\nWhat is not a value\nAll-remote\nisn‚Äôt a value. It is something we do because it helps to\npractice our values\nof transparency, efficiency, results, and diversity, inclusion & belonging.\nQuestions from new team members\nDuring every\nGitLab 101 session with new hires\nwe discuss our values. We document the questions and answers to\nFrequently Asked Questions about the GitLab Culture\n.\nNew team members should read\nGitLab‚Äôs guide to starting a new remote role\n, and reference\ninterviews\ncentered on values within the\nGitLab Unfiltered YouTube channel\n.\nMission\nOur\nmission\nis to\nenable everyone to contribute to and co-create the software that powers our world\n. This mission guides our path, and we live our values along that path.\nMitigating Concerns\nWe have a page which documents our\nMitigating Concerns\n. Many of our values help to mitigate some of these concerns.\nlearning course\nin Level Up. If you have questions, please reach out to our L&D team at\nlearning@gitlab.com\n.\nLast modified June 27, 2025:\nRemove company OKR process (\n99161f51\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 18477}
{"doc_id": "77db59ae45f2a4c4", "url": "https://about.gitlab.com/features", "title": "Self-Managed Feature Comparison", "text": "Compare GitLab features across plans\nDiscover which GitLab plan delivers the right features and capabilities for your team's needs.\nGet free trial\nTalk to sales\nGitLab features\nLearn about pricing\nFree\nPremium\nUltimate\nSource Code Management & DevOps Workflows\nCompute minutes per month\nAmount of time that projects can use to run jobs on instance runners on GitLab.com\n400\ncompute minutes\n10,000\ncompute minutes\n50,000\ncompute minutes\nStorage\nStorage usage limits include Git repository and Large File Storage (LFS).\n10 GiB\n500 GiB\nBuilt-in CI/CD\nAutomate code building, testing, and deployment with customizable pipelines and integrated security.\nContainer Scanning\nIdentify vulnerabilities in container images early in development, providing remediation paths before security risks reach production environments.\nPublish static websites for free with GitLab Pages\nPublish from your repository using any site generator, with automatic CI/CD deployment, custom domains, SSL support, and access controls.\nJira Development Panel Integration\nReference Jira issues in GitLab with automatic two-way linking.\nPush Rules\nCustomizable pre-receive Git hooks that enforce commit content standards, message formats, branch naming rules, and file requirements.\nMerge Request Guardrails\nCustomize approval workflows with rules defining who must review code before merging, including options to prevent self-approvals and require authentication.\nCode Quality Reports\nIdentify maintainability issues during code review, displaying findings directly in merge requests.\nProtected Environments\nSafeguard testing and production environments by restricting deployment access to authorized users only.\nRemote Development Workspaces\nCode without local setup using Web IDE and Workspaces to access fully-featured development environments on remote servers.\nMultiple approvers in code review\nDefine how many approvals a merge request must receive before it's merged, and which users should approve.\nRemote repository pull mirroring\nAutomatically sync branches, tags, and commits from external repositories every 30 minutes, with safeguards to prevent data loss.\nCreate test cases from within GitLab\nDocument and track test scenarios directly in GitLab to improve collaboration, while maintaining visibility controls and integration with your existing workflows.\nGitLab Duo\nProject Management\nSecurity and Compliance\nSLA Management\nPortfolio Management\nScaled and Multi-Region Support", "num_words": 334}
{"doc_id": "17ab3450ad613f5f", "url": "https://handbook.gitlab.com/handbook/company/okrs", "title": "General guidance to OKRs | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGeneral guidance to OKRs\nAn overview of how OKRs may be done.\nThe OKRs set of pages provide general guidance for the teams who wish to use OKRs.\nSee also:\nWhat OKRs are, and general guidance on how to formulate them, on\nthe general OKRs page\n.\nHow to enter and organize OKRs in GitLab, on\nthe OKRs in GitLab page\n.\nOverview\nOKRs\nare quarterly objectives that can help achieve\nKPIs\n.\nWe do not use it to\ngive performance feedback\nor as a\ncompensation review\nfor team members.\nOKRs are what is different\nThe OKRs are what we are focusing on this quarter specifically. Our most important work are things that happen every quarter.\nThings that happen every quarter are measured with\nKey Performance Indicators\n.\nPart of the OKRs will be or cause changes in KPIs.\nMeasuring Brand New Initiatives\nSome KRs will measure new approaches or processes in a quarter. When this happens, it can be difficult to determine what is ambitious and achievable because we lack experience with this kind of measurement. For these first iterations, we prefer to set goals that seem ambitious and expect a normal distribution of high, medium, and low achievement across teams with this KR.\nShared Objectives\nIf there is something important that requires two (or more) parts of our organization, all leaders involved should share the same or similar objective. They should have deconflicted key results so they can still achieve things within their sphere of control. This is in keeping with our concepts of\ncollaboration\nand\ndirectly responsible individual (DRI)\n.\nPass-thru Key Results\nIt‚Äôs acceptable for managers and reports to have an identical key result. For instance, something really important might need to happen at the executive level, but it‚Äôs a manager or IC several layers apart who is doing the actual execution. Every person in that line of reporting should have the same key result.\nWhile it can feel like double-counting, it is consistent with\nAndy Grove‚Äôs\nconcept of Managerial Leverage outlined in his book\nHigh Output Management\n. This ensures that conversations happen in the relevant 1-1s, that everyone knows the latest status, and that the person executing does not accidentally get re-tasked. Please remember to recognize the person that achieved the result so there is no perception of ‚Äútaking credit‚Äù for others‚Äô work.\nTarget Dates in Key Results\nJust because quarters are a useful timeframe for objectives, does not mean that key results should default to being due on the last day of the quarter. This could lead to unnecessary delays. Consider putting specific target dates into the key result phrase to indicate when it is needed by.\nYou should decide your scoring methodology ahead of time. You might score an OKR as 0% if it misses its target date. Or, if it‚Äôs less time sensitive, you might penalize it 10% for each week it‚Äôs delayed.\nHow do I prioritize OKRs in light of other priorities?\nOKRs do not replace or supersede core team member responsibilities or performance indicators. OKRs are additive and are essentially a high signal request from your leadership team to prioritize the work. They typically are used to help galvanize the entire company or a set of teams to rapidly move in one direction together. You should aim to complete them unless you have higher priority work that is surfaced and agreed to by leadership.  When surfacing tradeoffs, team members should not factor in how an unmet OKR may impact your executive leadership bonus in their prioritization. They should instead focus on GitLab priorities.\nMaintaining the status of OKRs\nTeams should update the score for their key results in GitLab regularly.\nHealth Status\nWhen presenting the status of OKRs, we use the following terms to denote the status of a key result:\nOn track - the DRI is confident the key result will be achieved.\nNeeds attention - the DRI believes there is some risk the key result will be achieved. Elevated attention is required in order for the key result to be achieved.\nAt risk - the DRI does not expect the key result will be achieved. Urgent action is required in order for the key result to be achieved.\nAn Objective/Key Results health status should be maintained as the SSOT on the status. This is something that should be able to be referenced at any point in order to get a clear view of progress against the objective. The objective owner will be responsible for designating a health status based on a roll up the health statuses of all relevant KRs.\nEach KR should have a clear scoring.\nScoring OKRs\nOKRs and their scoring align with fiscal quarters.\nSince we set OKRs that are aspirational, we\ndon‚Äôt expect 100% achievement\nacross KRs. We score individual KRs to note our achievement against our stated goal. This is the scoring framework.\nAchievement against targets\nScore\nOn-target\n85 to 100%\nOff-target\n70 to 84%\nAt risk\n0 to 69%\nSee also\nTips for OKRs that are scoreable\n.\nOverview of Objectives and Key Results (OKRs)\nGeneral information on OKRs, criteria, and guidance on how to write them.\nOKRs in GitLab\nHow to enter and organize OKRs in the GitLab platform.\nLast modified June 27, 2025:\nRemove company OKR process (\n99161f51\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 892}
{"doc_id": "97781fb8deddf4bf", "url": "https://handbook.gitlab.com/handbook/engineering/devops/ops/general-planning", "title": "General Planning Process - Ops Sub-department | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevOps Engineering\nOps Sub-department\nGeneral Planning Process - Ops Sub-department\nThe general planning process followed by the groups within the Ops Sub-department.\nGroups within the Ops Sub-department follow an async planning process to coordinate planning and discussion between members of the group. This process is related to the general\nGitLab Product Development Timeline\nprocess and adds additional practices we‚Äôve found useful.\nThe goals of this process are to ensure we:\nTransparently describe the goals for each milestone so team members can align on them and effectively plan and execute their contributions.\nEfficiently coordinate handoffs between the validate and build tracks within each milestone, such as design and development.\nEfficiently discuss and define the scope of work for development, product design, and quality engineering.\nTeams can customize this process to meet needs specific to their team as long as the customizations are documented on their team handbook page.\n1 month before start of milestone\nPM: create a Planning Issue for the milestone from the team‚Äôs\nPlanning Issue Template\n.\nPM: Set the Planning Issue milestone based on the current working milestone (e.g. Planning Issue 12.10 goes in milestone 12.9).\nPM: update\nGoals for the Milestone\nin Planning Issue description.\nPM: assign the Planning Issue to the PM, Engineering Managers, Product Designer, and Software Engineer in Test.\nPM: ask for feedback on the\nGoals for the Milestone\nby adding comments for the product group members and other teams‚Äô group members if cross-team collaboration is required.\n~3 weeks before start of milestone\nEngineering Managers: update\nScope of Engineering Work\nProduct Designer: update\nScope of Work for UX\nPM: review scope of works and provide feedback to Engineering Managers and Product Designers via comments on the issue.  Synchronous conversations are encouraged but should be summarized as comments.\n~2 weeks before start of milestone\nProduct Designer: attach first draft designs to the planning issue (directly or via linked issue)\nProduct Designer: add a comment asking for feedback on first draft designs\nEngineering Managers: add a comment asking for feedback on Scope of Engineering work from engineers or other GitLab team members\n~1 week before start of milestone\nProduct Designer: attach next draft designs to the planning issue (directly or via linked issue)\nProduct Designer: add a comment asking for feedback on next draft designs\nSoftware Engineer in Test: review issues under\nScope of Engineering Work\nand apply\n~quad-planning\nlabel\nSoftware Engineer in Test: update\nScope of Work for Testing\nRelease day\nPM: close Planning Issue\nPlanning Issue Template\nPlanning issue templates follow a format similar to this. Teams can add additional headings specific to their team.\n###\n<\nSection\n>\nPlanning Board\n<!-- link to your sections planning board -->\n### Goals for the milestone:\n<!-- Replace with the high-level goals to be achieved by the end of the milestone -->\n*\nGoal 1...\n*\nGoal 2...\n### Scope of Work for Engineering\n<!--\nList of issues in priority order go in this table\nUse :white_check_mark: for Frontend and/or Backend if there is work for that team\n-->\n### Scope of Work for Engineering Debt\n<!-- What work of Engineering Debt from the past will Engineering be focused on?\n-\nShould be at least 1 Issue per Milestone\n-\nThe more we can handle the better... balance\n-->\n### Scope of New Work for UX\n<!-- What new work will UX be focused on?\n-\nDesign based on research in previous Milestones\n-\nResearch to help inform designs for future Milestones\n-\nResearch to validate previously designed UI\n-->\n### Scope of Work for Deferred UX\n<!-- What work of Deferred UX from the past will UX be focused on?\n-\nShould be at least 1 Issue per Milestone\n-\nThe more we can handle the better... balance\n-->\n### Scope of Work for Software Engineers in Test\n<!-- What work will Testing be focused on? -->\n/label\n<!-- add section label here -->\n~\"Planning Issue\"\nTeam Planning Issue Templates:\nEnvironments Team Template\nMonitor APM Team Template\nMonitor Health Team Template\nPlanning Issue Board\nAll the planning issues are viewable on the\nOps Section - Issue Planning (Issue Board)\nLast modified May 26, 2025:\nSeparate DevOps and AI Engineering, deprecate Development (\n8a4a60ac\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 709}
{"doc_id": "00752cc7059051ad", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution/merge_requests", "title": "Distribution Team Merge Request Handling | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nGitLab Delivery\nDistribution\nDistribution Team Merge Request Handling\nWorkflow and responsibilities for Merge Requests performed by Distribution Engineers.\nIntroduction\nMerge Requests are the responsibility of all Distribution Engineers. For the most part, we follow the\nengineering process for code review\n.\nWorkflow\nThe Distribution team uses the\nReviewers feature\nin the code review process. The process looks like this:\nAuthor opens a merge request in a project.\nWhen ready for review:\nIf the merge request included an automatic Reviewer Roulette comment like\nthis one\n, after the\ndanger-review\nCI/CD job has finished:\nThe Author assigns the review directly to the reviewer suggested by the Reviewer Roulette and applies the ‚Äúworkflow::ready for review‚Äù label using the command ‚Äú@gitlab-bot ready @username-of-someone‚Äù.\nIf not:\nThe Author applies the ‚Äúworkflow::ready for review‚Äù label.\nA reviewer checks the\nDistribution merge requests ready for review dashboard\nper their priority regularly, and then picks up the merge request when they are able to work on it by adding themselves under the Reviewers section, and adding the ‚Äúworkflow::in review‚Äù label.\nOnce approved, the Reviewer adds a Maintainer under the Reviewers section for final review/merge. At this point, the Reviewer may decide whether to keep themselves listed as a Reviewer or to remove themselves (so the MR no longer appears in their MR list). If the Maintainer has any comments, then they work with the Author to clarify. It is the responsibility of the Maintainer to find another Maintainer to look at a merge request that is assigned to them if they are unable.\n: If you are working on a merge request that requires a response quicker than the\n, please\n@\nmention the\ngitlab-org/distribution\ngroup in order to alert the Distribution team. The team will exercise best effort in handling these requests.\nReviewers\nBy default, every Distribution Engineer team member who is not a Maintainer on a project should consider themselves a Reviewer. You are encouraged to spend some of your time looking at Merge Requests in any of our\nprojects\nthat have the ‚Äúworkflow::ready for review‚Äù label.\nReviewers are responsible for working with contributors to ensure that changes meet our standards, before approving and passing them on to a Maintainer for final review and merge. Reviewers should confirm that the Merge Request addresses the problem the linked Issue describes. Reviewers are also responsible for verifying that all applicable Merge Request checklist items have been completed. In situations where a checklist item is not applicable, Reviewers should verify that the item is indeed not necessary. When you encounter a situation as Reviewer where you are unsure whether something meets our standards, ping a Maintainer directly within the Merge Request with the question.\nAdditionally, in the spirit of ‚Äúeveryone can contribute‚Äù, anyone who is interested is encouraged to be a Reviewer. There should be no barrier preventing anyone from reviewing available merge requests. We encourage any interested party to participate.\nAnyone who plans on actively participating in the Reviewer process is encouraged to\nupdate their entry on the team page\n.\nWhen looking for merge requests to review, consider checking the\nMerge Request Report\nto see what reviews are in danger of breaching the\n.\nMaintainers\nProject Maintainers are encouraged to ensure that Reviewers, and in particular Reviewers who have designated themselves\nenrolled in the Reviewer mentorship program\n, look at a Merge Request before they spend time on it. There are times when it makes sense for a Maintainer to not wait for a reviewer, so judgment should be used here. For example, we do need to keep the\nin mind. If an MR is in danger of missing that deadline, a Maintainer should not hesitate to respond.\nAssigning Merge Requests\nTo help achieve all of this, we should urge contributors to\nnot\nassign merge requests to an individual when looking for initial review, unless there is a specific reason someone should look at a merge request. Rather, the merge request should have the ‚Äúworkflow::ready for review‚Äù label applied, and a Reviewer will add themselves under the Reviewers section when they are beginning to look into it.\nIf a merge request is assigned directly to you as a Maintainer without prior review, you are encouraged to assign it to an available Reviewer. If a merge request is assigned directly to you as a Reviewer, use your judgment. If you will not be able to work on it soon, try and find another Reviewer to take a look.\nService-level objective\nWhen looking for a merge request to work on, consider the\nGitLab Review-response SLO\n. Anything in danger of breaching that deadline should be looked at first.\nDue to the load on the Distribution team, the SLO is longer than that of the rest\nof the company:\nFrom GitLab team members: Review-response SLO < 4 business days\nFrom authors of\nLeading Organizations\n: Review-response SLO < 6 business days\nThe team aims to return to the company-wide SLO standard dependent upon expanding the team and paying down technical debt.\nReview iteration\nOnce the merge request is in review, the ‚Äúworkflow::in review‚Äù label should remain on the merge request as the Reviewer/Maintainer and Author iterate through feedback.\nWhen the merge request is ready to be handed back for changes or further review, ensure that the individual responsible for the next step is assigned and signal the handoff with a fresh comment mentioning the individual in the Merge Request.\n: By default, Authors should handoff to the Reviewer/Maintainer who previously reviewed the merge request. If that individual is listed as away in their status for longer than two days, then please\n@\nmention the\ngitlab-org/distribution\ngroup in order to alert the Distribution team for a new reviewer.\nSquash and merge\nDistribution-owned projects enable\nsquash and merge\nby default. This feature combines all of the merge request‚Äôs commits into one commit before merging, ensuring a clean history on the target branch.\nBecause the squash and merge feature is set to\nencourage\n, authors can still disable the option if desired. For example, merge requests with only one commit would not necessarily benefit from a squash prior to merge.\nReferences\nDistribution team projects\n- The full list of projects the Distribution team maintains\nEngineering Projects\n- The full list of supported GitLab projects. Clicking on the project name will bring you to the list of Maintainers and Reviewers for each project.\nLast modified April 16, 2025:\nMove Distribution team pages and delete Systems (\nddf3584c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1086}
{"doc_id": "3f88b65db410c0fc", "url": "https://handbook.gitlab.com/handbook/company/working-groups/product-career-development-framework", "title": "Product Career Development Framework Working Group | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nWorking Groups\nProduct Career Development Framework Working Group\nLearn more about the Product Career Development Framework Working Group goals, processes, and teammates!\nAttributes\nProperty\nValue\nDate Created\nApril 21, 2021\nTarget End Date\nJanuary 31,2023\nSlack\n#wg_product-cdf\n(only accessible by GitLab team members)\nGoogle Doc\nWorking Group Agenda\n(only accessible by GitLab team members)\nDocs\nFramework Handbook Page\nIssues\nIssue List\n/\nIssue Board\nLabel\n~wg-product-cdf\nAssociated KPIs/OKRs\nPromotion Rate and Retention\nGitLab group for working group\n`@wg-product-cdf\nBusiness Goals\nDeliver a revised\nProduct Career Development Framework\nfor Individual Contributor roles in Product based on new competencies by 2022-06-20.\nConduct AMAs and training with Product Organization on new CDFs for optional use in a  FY23-Q3 Career Conversations.\nConduct AMAs and training with Product Organization on new CDFs for broad use in FY23-Q4 Career Conversations.\nProtocols and Processes\nWe will have a recurring weekly sync with the working group\nWe will use a issue board for assigning tasks and delegating efforts across the working group\nWe will track efforts in phases, which will be broken up into epics\nThe DRI for the CDF is the VP of Product Management and all changes for the CDF will be approved via the VP\nExit Criteria\nResearch and incorporation of industry standards into Product Manager\nSkills\nand\nRequirements\n=> 100% delivered in\nProduct#2460\nResearch and incorporation of internal expectations into Product Management\nResponsibilities\n=> 100% delivered in\nProduct#2517\nand\nProduct#2832\nClear quantative measures for progress\nincluded in the CDF\nTraining for how to use the CDF for all\nProduct Leaders\nSimplification of\nPM Competencies\nRoles and Responsibilities\nWorking Group Role\nPerson\nTitle\nExecutive Sponsor\nDavid DeSanto\nVP, Product\nFacilitator\nJackie Porter\nDirector of Product, Verify & Package\nFacilitator\nFarnoosh Seifoddini\nGroup Product Manager, Product Operations\nFunctional Lead\nKenny Johnston\nSenior Director of Product, Ops & Analytics\nFunctional Lead\nJoshua Lambert\nDirector of Product, Enablement\nFunctional Lead\nHillary Benson\nDirector of Product, Sec & Data Science\nFunctional Lead\nJustin Farris\nSr Director, Product Monetization\nReviewer\nGabe Weaver\nSenior Product Manager\nReviewer\nSam Kerr\nPrincipal PM\nReviewer\nTaylor McCaslin\nGroup Manager, Product - ModelOps & Anti-Abuse\nReviewer\nViktor Nagy\nSenior Product Manager\nMeetings\nMeetings are recorded and available on\nYouTube in the\nWorking Group - Product CDF\nplaylist. The playlist is public, although, some meetings maybe private due to the nature of the material covered in the call.\nLast modified April 7, 2025:\nFix broken links (\n0cdabc39\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 414}
{"doc_id": "c564d85dddb6c495", "url": "https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product/single-application", "title": "Advantages of a single application | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct sections, stages, groups, and categories\nGitLab the Product\nAdvantages of a single application\nDiscussing the advantages of having a single application\nSingle application\nGitLab is a\ncomplete DevOps platform\n, delivered as a single application that does everything from project planning and source code management to CI/CD, monitoring, and security. The advantages of a single application are listed in the following paragraphs.\nBy delivering a single application we shorten cycle times, increase productivity,\nand thus create value for our customers.\nOther vendors offer a kit plane you have to assemble yourself, GitLab is a type certified aircraft.\nSingle application vs multiple applications\nFor example, the experience of one enterprise customer that converted from multiple DevOps tools to GitLab was:\nNine-times fewer hours of elapsed time from when a developer chooses to work on a change to when it is in production\nTen-times fewer separate tools for purchasing to buy, for IT to install, and for users to have to authenticate to\nFour-times fewer hours of hands-on keyboard time and four-times fewer tasks for people to do, allowing them to be more productive\nFive-times fewer different teams requiring to be involved and four-times fewer handoffs between teams, allowing them to be more productive and making the time to value more predictable\nHow does having one application vs many applications impact the workflow?\nDataflow and source data\nSingle authentication\nYou only have to login to one application. Users don‚Äôt waste time logging in. You only have to set up one account. It is clear to users what account they should use. Due to less confusion phishing is harder.\nSingle authorization\nGitLab does not require you to manage authorizations for each of\nits tools. This means that you set permissions once and everyone in your organization has the right access to every component.\nSingle project\nUsers don‚Äôt have to set up or ask others to set up a project across applications. This can be a major source of delays.\nSingle setup\nWith\nAuto DevOps\nyour new projects have all the needed testing and deployment from the get go. And by having logging and security scanning happen automatically you reduce risk.\nSingle interface\nA single interface for all tools means that GitLab can always present the\nrelevant context. Relatedly, any feature is always in its most optimal location.\nWe don‚Äôt have to force ourselves to create a new page to serve a new feature. The feature\nwill just appear in the best designed existing location, simplifying navigation.\nAlso, you don‚Äôt lose information due to constant context switching between different interfaces.\nUsers don‚Äôt have to switch between applications constantly.\nFurthermore, if you‚Äôre comfortable with one part of GitLab, you‚Äôre comfortable\nwith all of GitLab, as it all builds on the same interface components.\nSingle installation\nRunning GitLab means that there is only one single application to install, maintain, scale, backup, network, and secure.\nSingle upgrade\nUpdating GitLab means that everything is guaranteed to work as it did before.\nMaintaining separate components is often complicated by upgrades that change\nor break integration points, essentially breaking your software delivery pipeline.\nThis will never happen with GitLab because everything is tested as an integrated whole.\nSingle data-store\nGitLab uses a single data-store so you can get information about the whole software development lifecycle instead of parts of it. With multiple applications you not only have multiple databases but also different definitions, processes. Multiple data-stores lead to redundant and inconsistent data. You don‚Äôt have to duplicate data nor do manual entry. There is a single source of truth without having to build a data warehouse.\nSingle overview\nAutomated links between environments, code, issues, and epics provide a better overview of project state and progress. All information is realtime and there is a coherent set of concepts and definitions.\nSingle flow\nUsing a single application means you don‚Äôt have to integrate 10 different products. This saves time from your developers, reduces risk, increases reliability, and lowers the bill of external integrators. The flow is better for the more than 100,000 organizations and over 2,000 people using GitLab that use the same flow to contribute and make it great. If you have a developer tools department, they can now focus on other tasks to make your developers more effective.\nSingle vendor\nYou can deal with one vendor instead of multiple vendors pointing to each-other.\nSingle training\nYour end user training becomes less complex; a multi-vendor environment means\nmultiple trainers to manage.\nSingle codebase\nWe prefer to offer a single application instead of a network of services or\noffering plugins for the following reasons:\nWe think a single application provides a better user experience than a modular approach, as detailed by\nthis article from Stratechery\n.\nThe open source nature of GitLab ensures that we can combine great open source products.\nEveryone can contribute to create a feature set that is\nmore complete than other tools\n. We‚Äôll focus on making all the parts work well together to create a better user experience.\nBecause GitLab is open source, the enhancements can become\npart of the codebase instead\nof being external. This ensures the automated tests for all\nfunctionality are continually run, ensuring that additions keep working. This is in contrast to externally maintained plugins that might not be updated.\nHaving the enhancements as part of the codebase also\nensures GitLab can continue to evolve with its additions instead of being bound\nto an API that is hard to change and that resists refactoring. Refactoring is essential to maintaining a codebase that is easy to contribute to.\nMany people use GitLab on-premises, and in such situations it is much easier to install one tool than install and integrate many tools.\nGitLab is used by many large organizations with complex purchasing processes, and having to buy only one subscription simplifies their purchasing.\nEmergent benefits of a single application\nA single application across the entire DevOps lifecycle has unique, emergent\nbenefits.\nIt‚Äôs no longer necessary to ask for access to each separate tool; everyone is\nable to make use of all tools. Expect non-engineers to monitor deploys, follow\nthe development process, and directly contribute to QA by reporting findings.\nVastly improved cycle time. Constant context switching, re-authentication and\nlack of information slows down teams immensely. It sounds obvious, but having\neverything you need available at all times makes for more efficient work.\nTracking whether a change is being worked on, is live in an environment, or is\nblocked no longer requires detective work. It‚Äôs available everywhere and\naccessible to everyone.\nThis is highlighted by analyst specified benefits of\nValue Stream Delivery Platforms\n, of which GitLab is considered a representative vendor.\nSome additional example benefits include:\nCI and container registry\nPushing from CI to the container registry: before GitLab, this requires you to create a\nproject and user account in a separate registry - and then on each job, credentials have to be passed\nbetween CI and the registry. With GitLab, none of this is necessary, because GitLab knows who you are\nand what your authorizations are in that project.\nDebugging issues\nBecause all decisions, code, changes and deploys happen in the same place and are linked to issues and merge\nrequests, GitLab has a full audit log of every decision, change and deploy. So if anything goes wrong,\ndiscovering the source of the issues is simple and doesn‚Äôt require checking multiple apps, teams and logs.\nMonitoring from merge request\nYou deploy a change by merging a merge request. Because GitLab has monitoring built-in, it‚Äôs able to show\nin the merge request that e.g. the error rate has increased. The responsible developer sees this with the\ncorrect context and can start to solve the issue immediately.\nNo need to integrate multiple tools\nEnterprises that use a complex toolchain often need\n20 people to manage all the interconnections\nwhile a single person can do the same work to administer GitLab. Here is a list of the various integrations necessary between tools:\nIssue tracking <=> Kanban boards, preferably they show the same issues.\nIssue tracking <=> Version control, close issues when you merged code in your branch.\nIssue tracking <=> Code review, the code review has a link to the issue it is related to.\nIssue tracking <=> CD/Release automation, see which changes are implemented by which deploy / are live and where.\nIssue tracking <=> Monitoring, link the initiative to the impact on metrics.\nKanban boards <=> Version control, close issues when you merged code in your branch.\nVersion control <=> Code review, the code review happens on a branch that is updated.\nVersion control <=> Continuous integration, run CI automatically on the default branch, see CI status per branch.\nVersion control <=> CD/Release automation, see whether a particular commit is live somewhere.\nVersion control <=> Security testing, see whether a commit is vulnerable / with out-of-date dependencies.\nCode review <=> Continuous integration, see the test results in the code review screen.\nCode review <=> Security testing, see the test results in the code review screen.\nCode review <=> CD/Release automation, see and control pushing to new environments in the code review screen.\nCode review <=> Monitoring, see the effect of a code change on the metrics.\nContinuous integration <=> Security testing, run security testing as part of CI.\nContinuous integration <=> Container registry, push the container that is built to the registry.\nContinuous integration <=> CD/Release automation, deploy if green, or don‚Äôt deploy when red.\nContinuous integration <=> Configuration management, configure the testing.\nSecurity testing <=> CD/Release automation, prevent insecure code from being deployed.\nSecurity testing <=> Container registry, scan the container registry.\nContainer registry <=> CD/Release automation, pull the container.\nCD/Release automation <=> Configuration management, configure the deployment.\nCD/Release automation <=> Monitoring, see the release in the monitoring.\nConfiguration management <=> Monitoring, configure the monitoring.\nFlowchart\nBelow is a flowchart illustration of the various integrations necessary between tools specified above.\nflowchart LR\nA(Plan)\nB(Create)\nC(Release)\nD(Software Supply Chain Security)\nE(Configure)\nF(Monitor)\nG(Verify)\nH(Secure)\nI(Package)\nsubgraph Manage\nend\nSecurity benefits\nWhen we have\nadded aggregated logging\nwe can move on to some security features that only a single application for the whole DevOps lifecycle can offer out of the box:\nLog complete requests (header, payload, cookie) from Nginx to Elastic Search to form the basis of an Intrusion Detection System (IDS) and give you complete sitemaps. We can probably use something like\nclient_body_in_file_only\nand we don‚Äôt need something like\nMITM proxy\nsince we can use the SSL keys.\nLog complete sessions, that contain multiple requests over time, such as logging in and creating a new object before the final request is possible.\nModify the payload or headers with something like\nwfuzz\nand content like\nseclists\n, run it against a review app and see what http status returns change from 2xx to 5xx and/or where you can do a\nSQL string escape\n. Show a sorted list of starting with the most likely vulnerabilities.\nWhen running the above fuzzing payloads see if they hit new code paths by instrumenting the application with runtime application self protection and then sort by seeing what code paths are the least covered by the unit tests ran by GitLab CI.\nAny\nerror tracking\nreport contains all the requests in that user session to generate that state.\nWhen someone submits a vulnerability report combine this with any 500 error stack traces stored in\nerror tracking\n.\nWhen fuzzing or a human hits a vulnerability generate a\npcap file\nwith the request and start scanning production traffic for this.\nLower operating expense (OpEx)\nBuilding and maintaining integration between multiple individual point tools comes with additional overt and\nhidden costs.\nOvert cost\nThe overt cost of paying for\nlicensing and support of multiple tools\nis\nhigher than a single application. A single application can charge less because its fixed costs are distributed\nacross the functionality, whereas separate vendors each need to pay those costs themselves for each of their solutions.\nHidden cost\nBusinesses that manage a toolchain pay hidden operating costs in the form of engineering time needed to\nbuild and maintain the toolchain instead of using those engineering resources to write software with\nbusiness logic that delivers differentiated value. For a large enterprise this can be the difference\nbetween\npaying 20 engineers vs one engineer\nto maintain your tools.\nFurther examples\nPlanning (code merge closes issues updates epic) - Always up to date and across different projects\nMove from issue board to issue tracker - Kanban boards are consistent with issue tracker\nGetting the stack running for a new developer - Can start developing without setup time or help\nMerge request contains monitoring, security, etc. information - Can see overview in MR of tests, quality, performance, browser performance, artifacts, discussion, environment, rollback\nSecurity (security in parallel, instead of separate) - Security tests results can be aggregated\nIdentify vulnerable applications quickly and automate the remedy\nAdd the build application to a container registry - No need to set up a project in the container registry and pass credentials around\nNeed to find an artifact from a CI build - Artifacts are accessible directly from any merge request\nReviewing the application - QA test can start work immediately\nRun CI/CD/Security/Quality without having to configure anything - One click to deploy to production\nNeed to scale up a containerized application - Scaling up and down is just another button inside your project with all relevant data to make a decision\nA project adopts containerization - New servers are automatically provisioned via Kubernetes\nRollback a failing deployment automatically without human intervention\nActivity feeds span all product categories, across DevOps lifecycle\nCycle time (real time and integrated) - Can view activity across DevOps lifecycle\nPermission levels and settings - User rights are consistent across all applications\nAudit log - What a person was able to do across the lifecycle in audit logs\nGeo does not just to SCM, it also does CI, CD, issue tracking - People at other location have quick access to the whole DevOps-lifecycle, not just repos\nEasier to administer then 10 different applications - The flow between the activities doesn‚Äôt break because of updates to a single step in the life-cycle\nStart a new microservice project - A project has all tools in it, no need to find out how this project is named in other tools\nSomeone new joins the organization - Users automatically have access to all tools that are relevant for their role, without creating a ticket and waiting\nConversational Development\nConversational development carries a conversation across Departments and teams\nthrough the DevOps lifecycle, involving gatekeepers at every step. By providing\nrelevant context, a feature that is only possible with an integrated solution\nlike GitLab, we can reduce cycle time, making it easier to diagnose problems and\nmake decisions.\nConcretely, conversational development in GitLab means that a change can be\neasily followed from inception to the changes it made in performance and\nbusiness metrics and feeding this information back to\nall\nstakeholders\nimmediately\n.\nEffectively, this allows cross-functional teams to collaborate effectively.\nReview Apps\nReview apps are the future of change review. They allow you to review not just\nthe code, but the actual changes in a live environment. This means one no longer\nhas to check out code locally to verify changes in a development environment,\nbut you simply click on the environment link and try things out.\nOnly a tool that combines code review with CI/CD pipelines and integration with\ncontainer schedulers (Kubernetes) is able to quickly create and shut down review\napps and make them part of the review process.\nCycle Analytics\nCycle analytics tell you how what your time to value, from planning to\nmonitoring is. Only by having direct access to each step in the software\ndevelopment lifecycle, GitLab can give actionable data on time to value.\nThis means you can see where you are lagging and make meaningful change to ship\nfaster.\nContainer registry integrates with CI\nEvery GitLab projects comes with a container registry. That means there is no\nneed for elaborate configuration to be able to use and push container images in\nCI. Rather, all you have to do is use a\npre-defined\nvariable in\nyour CI configuration file (\n.gitlab-ci.yml\n).\nUse cases, not modules\nSometimes users ask if GitLab has particular module that contains a set of\nfeatures. A modules-mindset results in narrowly-focused solutions and redundant\nfeatures and abstractions. GitLab is a single application that solves entire use\ncases that might touch many parts of GitLab, without creating additional\nunnecessary complexity.\nExisting features and data accrue value over time\nAs GitLab breadth expands, but is maintained as a single application, new\nfeatures are continually back-integrated into existing features. This means that\nexisting features and the data that they have already generated over time accrue\nnew value for very little cost in the context of the new features and their\nuse cases.\nTrend Towards DevOps Platform Consolidation\nContinuing apace after Microsoft‚Äôs 2018\nacquisition of GitHub\n, the trend to consolidate DevOps companies seems here to stay. In January 2019,\nTravis CI was acquired by Idera\n, and in February 2019 we saw\nShippable acquired by JFrog\n. Atlassian and GitHub now both bundle CI/CD with SCM, alongside their ever-growing related suite of products. In January 2020,\nCollabNet acquired XebiaLabs to build out their version of a comprehensive DevOps solution\n.\nIt‚Äôs natural for technology markets go through stages as they mature: when a young technology is first becoming popular, there is an explosion of tools to support it. New technologies have rough edges that make them difficult to use, and early tools tend to center around adoption of the new paradigm. Once the technology matures, consolidation is a natural part of the lifecycle. GitLab is in a fantastic position to be ahead of the curve on consolidation, as we‚Äôre already considered a representative vendor in this\nnewly defined market\n, but it‚Äôs a position we need to actively defend as more competitors start to bring legitimately integrated products to market.\nData flow GitLab vs. multiple applications\nAbout the data flow in GitLab\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3035}
{"doc_id": "50ab860422fd76d5", "url": "https://handbook.gitlab.com/handbook/product/ux", "title": "UX Department | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nThe GitLab UX department comprises four areas to support designing the GitLab product: UX Research, Product Design, Technical Writing, and Foundations\nHello\nWe‚Äôre the GitLab User Experience (UX) department. We comprise four areas to support designing and building the GitLab product.\nUX Research\nTechnical Writing\nProduct Design\nFoundations -\nPajamas\nOur goal is to make our product easy to use, supportive of contributions from the wider GitLab community, and built for a diverse global community. We want GitLab to be the easiest and most delightful product in its class.\nHow we work\nWe support all users from beginners to experts.\nWe believe that GitLab software should be unintimidating and accessible for a beginner, without oversimplifying important features for advanced users. We stay with users every step of the way to help them learn fast as a beginner and then become an expert over time.\nWe‚Äôre building one product, together.\nWe‚Äôre highly focused on ensuring that no matter how big our product gets, the entire experience stays cohesive, consistent, and interconnected.\nWe‚Äôre humble facilitators of user experience design.\nEveryone is a designer;\neveryone can contribute\n. We are not egotistical, moody experts who alone hold the keys to user delight. We encourage Product Managers, Engineers, and the wider GitLab community to contribute to creating an exceptional user experience.\nWe look for small changes and big impacts.\nSometimes the simplest, most boring solution is what is needed to make users successful. We want our UI to stay out of the user‚Äôs way. We work iteratively to make modest but valuable changes that make users more productive, faster, and better at accomplishing their tasks.\nWe‚Äôre informed by empathy.\nWe‚Äôre human, and we design for humans, so we strive for understanding, self-awareness, and connection. We are quirky, and we introduce our quirks into designs when appropriate.\nWhen we find problems that are simple to fix, we are empowered to make those changes ourselves.\nIf a change will take you less than 15 minutes to make (for example, a minor change to our website or microcopy in the product), then start with an MR instead of an issue. By making the change yourself, you are taking immediate action to improve our product, and you might learn a new skill, too! If it seems simple, but you have questions, remember that there are people who can help you with code changes both in the UX department and across the company.\nWe work closely with the community, and our stable counterparts Product Managers (PM), Frontend engineers (FE), Backend engineers (BE), Quality engineers, and the Brand team. We follow GitLab‚Äôs shared process referred to as the\nProduct Development Flow\nand\nR&D Interlock\n.\nPMs define the ‚Äúwhat‚Äù and ‚Äúwhy‚Äù to lead the product direction. These are the benefits we provide to users. It‚Äôs informed by gathering customer and user feedback in partnership with UX Research.\nProduct Designers define ‚Äúhow‚Äù the direction is experienced. It‚Äôs how users interact with the product to gain the benefits.\nEngineers define ‚Äúhow‚Äù the product is built to meet the product and experience direction from PM and Product Design.\nWorkflows\nUX Researcher\nTechnical Writing\nProduct Designer\nProduct Design Manager\nCross-functional Prioritization\nHeadcount planning\nEvery Product Designer is aligned with a PM and is responsible for the same customer benefits the PM oversees. Technical Writers each support multiple stage groups. UX Researchers support multiple groups within a section.\nIn the spirit of having stable counterparts, we plan headcount as follows:\nOne Product Designer for every stage group.\n1:1 ratio of Product Designers to PM (excludes stage groups with no user-facing impact or, in some cases, stage groups with low usage).\n1 Product Designer for 1-3 Frontend engineers; 2 Product Designers for 4-5 Frontend engineers.\nOne Technical Writer for up to three stage groups.\n1:3 ratio of Technical Writers to stage groups.\nApproximately a 1:21 ratio of Technical Writers to Engineers.\nOne UX Researcher for up to 5 stage groups.\n1:5 ratio of UX Researchers to Product Managers.\nApproximately a 1:35 ratio of UX Researchers to Engineers.\nManager support that‚Äôs appropriate for the function.\nApproximately a 1:5 ratio of Managers to direct reports for UX Research and Product Design.\nApproximately a 1:7 ratio of Managers to direct reports for Technical Writing.\nUX labels\nGitLab uses labels to categorize, prioritize, and track work. The following is a breakdown of the labels most directly related to the UX workflow. An overview of all the label types and uses can be found in the\ncontributing doc\n.\nlabel\n: Indicates that UX work is required on this issue. These issues can be new features, ideas for improvement or anything else where UX should contribute their expertise.\nInclusion\nlabel\n: A change to GitLab that promotes inclusion as it relates to our\ndiversity\nvalue.\nInclusive design\nlabel\n: Considering, exploring, and evaluating the different ways someone would access, interact with, or contribute to content that results in a more accessible experience.\nAccessibility and scoped accessibility labels\nare used to identify issues with accessibility impact. The scoped labels should be added after an accessibility audit has validated the impact and used in combination with\npriority\nand\nseverity\nlabels to\ntriage\nan issue.\nAccessibility\nlabel\n: Issues that contain actionable items that help create an accessible product experience.\nAccessibility-audit\nlabel\n: Issues related to auditing exisiting experiences in order to understand possible accessibility-related improvements.\nAccessibility-ops\nlabel\n: Issues related to building accessibility into our internal workflows.\naccessibility::critical\n: Prevents some or all users from performing critical tasks with no possible workaround.\naccessibility::high\n: Prevents some users from performing critical tasks. A workaround may exist, but not without creating frustration and inefficiency.\naccessibility::medium\n: Prevents some users from performing non-critical tasks, or where the user experience is seriously degraded for users with certain assistive technologies.\naccessibility::low\n: The user experience is degraded for users with certain disabilities or using certain assistive technologies, but users can still accomplish tasks.\nlearnability\nlabel\n: Issues that address learnability problems by helping users quickly become familiar with GitLab features.\nScoped workflow labels\nfrom the\nProduct Development Flow\nshould be used to indicate where an issue is in the development lifecycle. Issues can move between workflow labels as many times as necessary, and not all labels will be applicable to every issue. Issues that require UX would use one of these labels as defined in the Product Development Flow:\nworkflow::validation backlog\nworkflow::problem validation\nworkflow::design\nworkflow::solution validation\nPajamas component lifecycle labels\nare scoped labels used for creating and updating\nPajamas\ncomponents. Label usage guidelines can be found in the\nPajamas component lifecycle documentation\n.\nUX problem validation\nlabel\n: Indicates that the issue requires UX work to validate that the problem is relevant to users. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our\nUX Performance Indicators\n.\nUX solution validation\nlabel\n: Indicates that the issue requires tasks to validate that the proposed solution is technically feasible and meets user needs. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our\nUX Performance Indicators\n.\nUI polish\nlabel\n: Indicates the issue covers\nonly\nvisual improvement(s) to the existing user interface.\nDeferred UX\nlabel\n: Deferred UX results from the intentional decision to deviate from the UX vision or MVC, which sacrifices the user experience. Deferred UX labeled issues are to be included in subsequent releases. Use this label to indicate that the UX released does not meet:\nUX and Pajamas specifications\nUsability standards\nFeature viability standards\nThis label is applied to any follow-up issues that address a UX gap. It does not apply to the issue or merge request that created the Deferred UX. For example, if the agreed MVC design solution is not fully realized due to release pressures or implementation oversight, that‚Äôs considered Deferred UX.\nIf the design is implemented correctly but unforeseen UX issues are identified, it is\nnot\nconsidered Deferred UX.\nIf in doubt about when to apply this label, use the following rule: If you can say ‚ÄúThis UX problem did not originate from an issue or merge request,‚Äù then it‚Äôs just UX, not Deferred UX. In case your team makes the decision ship an MVC that contains Deferred UX, it is recommended to create an issue to track it as soon as the change has been released.\nLearn more about Deferred UX as a UX Department Performance Indicator\n.\nUX Paper Cuts\nlabel\n: Used to prioritize and track work from the UX Paper Cuts team.\nSeeking community contributions\nSystem Usability Scale (SUS)\nlabels\n: Indicates that the issue is related to usability problems surfaced in one of our SUS research efforts. More specifically, issues related to SUS that are prioritized can be labeled with the corresponding Fiscal Year and Quarter. For example:\nSUS::FY22 Q2 - Incomplete\n.\nLearn more about SUS score as a UX Department Performance Indicator\nRegression\nlabel\n: Indicates a bug introduced in the latest release that broke correct behavior (see the\ncontribution guidelines\nfor more info).\nUX scorecard\nlabel\n: Indicates the primary issue or epic for the\nUX Scorecard\n. We use this label to help us easily find current work and track efforts over time.\nUX scorecard-rec\nlabel\n: Indicates this issue is a recommendation that was a result of a UX scorecard review. It‚Äôs OK if the issue was created prior to the scorecard being done; it can still be pulled into the set of recommendations.\nCM scorecard\nlabel\n: Indicates the primary issue or epic for the\nCM Scorecard\n. It is used to easily find current work and track efforts.\ncm-scorecard-rec\nlabel\n: Indicates this issue is a recommendation that was a result of a CM Scorecard.\nActionable Insights\ndocument learnings from research that need to be acted on.\nActionable Insight::Exploration needed\n: A research insight derived from a UX research study that requires further exploration.\nActionable Insight::Product change\n: A research insight derived from a UX research study and requires a change to the product experience.\nType labels\n: Used to track feature, maintenance, and bug issues and MRs. UX Leadership are active participants in influencing the prioritization of all three work types. See also who are the\nDRIs for prioritization\n.\nTheme labels\ncan be created to group issues that solve a similar user experience problem but don‚Äôt have a category. This can be especially useful for a user experience that spans the product. These issues still require a UX label.\nUX: Feature Discovery Improvement\n: Indicates issue may improve feature discoverability.\nUX: Onboarding Improvement\n: Indicates issue is a potential onboarding improvement.\nUX Calendar\nThe\nUX Calendar\n(\ninternal only\n) is the SSOT for our team meetings. You can find the details for UX calls, UX Forum, and other team meetings here. These meetings are open to everyone in GitLab. Anyone in the UX department can add events to the Google Calendar. Managers and above can make changes and manage sharing, while ICs can make changes to events. Please reach out in the\n#ux_leadership\nSlack channel with any questions or requests.\nUX All Hands\nThe UX All Hands meeting takes place every six weeks, with two sessions to accommodate both EMEA/AMER and APAC/AMER-friendly time zones.\nThe purpose is to share company updates, stay connected, and receive feedback.\nThe entire UX department is invited, though anyone at GitLab is welcome to attend and contribute to the\nAll Hands agenda\n(internal). As with all general meetings at GitLab, attendance is optional though encouraged, and will be recorded.\nRetrospectives\nTo understand the specific challenges faced by the UX Department, we hold an async UX retrospective after every milestone. This retro is carried out through a new Issue created for the recent release in the\nux-retrospectives\nproject. The goal is to evaluate what went well, what didn‚Äôt go well, and how we can improve.\nUX Forum\nThe\nUX Forum\nis a recurring meeting for UX team members to share and discuss their work.\nThis includes past, current, or future work, and covers Product Design, UX Research, and Technical Writing.\nAll meetings are recorded and made available on\nUnfiltered\nfor Product, UX, Engineering, and Leadership to watch at their convenience.\nUX Week in Review\nThe\nUX Week in Review\nis an asynchronous document that includes important updates for everyone in the UX department. This doc is editable by anyone at GitLab and everyone can contribute.\nReminders are sent out weekly in the\n#ux\nSlack channel to add and read updates. UX Managers will receive a monthly reminder in the\n#ux_leadership\nSlack channel to add project updates from across their team.\nUX Talent Assessment\nIn UX, we utilize\nperformance factor worksheets\n(\nüîí internal only\n) as a way to facilitate talent assessment and growth conversations between manager and their direct reports. These worksheets are available in Google Sheets format and the spreadsheets include tabs for a mid-year and year-end review, as well as a tab to list Achievement, Strengths, and Opportunities throughout the year.\nIt is strongly encouraged for each team member to have their own worksheet created at the start of the fiscal year so that it can be used as a tool throughout the entire year.\nPerformance factor worksheets can be utilized to help efficiently complete the year-end company\ntalent assessment program within Workday\n.\nMeet some of our team members\nValerie Karnes\n- Director of Product Design\nJacki Bauer\n- Product Design Manager\nJustin Mandell\n- Product Design Manager\nTaurie Davis\n- Senior Product Design Manager\nRayana Verissimo\n- Product Design Manager\nJeremy Elder\n- Staff Product Designer, Foundations\nAustin Regnery\n- Senior Product Designer\nAnne Lasch\n- Senior UX Researcher\nEmily Bauman\n- Senior Product Designer\nWill Leidheiser\n- Staff UX Researcher\nAssessing Category Maturity\nWe assess the maturity of our product categories based on market evaluations and user testing\nCompetitor Evaluations\nCompetitor evaluations help us understand how a competing product addresses the Jobs-To-Be-Done that our product also tries to address.\nDesign collaborator's playbook\nThis page acts as a quick reference of mental models for sync and async collaboration.\nDocumenting research insights in Dovetail\nThe GitLab UX Research team's guide to documenting insights in Dovetail\nGitLab Navigation\nThe group::personal productivity team owns the navigation structures of the GitLab product. Please review this information if you plan to propose changes to GitLab navigation.\nHow to create a user persona\nThis page goes into detail around the steps needed to create a user persona with a high degree of confidence.\nHow we work\nGuidance on how the UX Department at GitLab works.\nJobs to be Done at GitLab\nJobs to be Done (JTBD) is a framework for viewing products and solutions from the user's perspective, focusing on the problems they want to solve rather than specific solutions. It helps GitLab team members uncover user needs, identify strategic opportunities, validate plans, and drive innovation.\nPajamas Design System\nThe goal of Pajamas is to be the single source of truth for the robust library of UI components that we use to build the GitLab product\nProduct Design\nAt GitLab, our Product Design team drives the business forward by becoming experts in their specific stage groups staying informed about the entire product, and aligning with user and business goals. We partner closely with our stable counterparts in Product Management and Development to deliver exceptional user experiences.\nProduct Designer Workflow\nHere are some guidelines to help Product Designers manage their work at GitLab\nRemote Design Sprint\nThe purpose of a Remote Design Sprint is to create a shared understanding and a solution to a problem following a specific process over a set timeframe. Remote Design Sprint process is based on [Google's Design Sprint methodology](https://designsprintkit.withgoogle.com/methodology/overview), and adjusted using [AJ&Smart's Remote Design Sprint 2.0](https://drive.google.com/file/d/16bwrAqHVf8qxovd87Q7LdzqwAgy7a6Rx/view).\nTechnical Writing\nThe GitLab Technical Writing team collaborates with developers, product managers, and the community ‚Ä¶\nThink Big & Think Small Meetings\nThe purpose of think big & think small meetings is to develop a shared understanding of goals by discussing vision, roadmap, research, design, and delivery of upcoming features.\nUser journeys\nUser journeys help GitLab teams understand and optimize the complete experience of customers as they discover, adopt, and integrate our DevSecOps platform to drive both user success and business value.\nUX Department Learning and Development\nThis page contains links to internal and external resources that members of the UX Department at GitLab can use to build their skills.\nUX Department Performance Indicators\nPerformance indicators for the UX department at GitLab\nUX Forum\nThe UX Forum is a recurring meeting for UX team members to share and discuss their work.\nUX Heuristics\nHeuristics used by the UX team to evaluate our product.\nUX Research at GitLab\nThe UX Research team delivers key and timely insights to drive user-centric innovation, support and influence decisions from design tactics to product strategy.\nUX Research Operations (ReOps) at GitLab\nWe empower UX Research DRIs with the resources needed for efficient and high-quality research, enabling team members to focus on generating insights that drive exceptional user experiences and product innovation.\nUX Resources\nThis page includes information about UX Resources to help you do your job as a product desginer at GitLab.\nUX Scorecards\nThe UX Scorecard is a process similar to a heuristic evaluation that helps identify usability issues and score a given experience.\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2926}
{"doc_id": "3f9651aa1fa289fb", "url": "https://handbook.gitlab.com/handbook/company/culture", "title": "GitLab Culture | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nHere‚Äôs a look at what you can expect from our culture and all-remote environment.\nIntroduction\nPlease see our\ncompany page\nfor more general information about GitLab.\nLife at GitLab\nAt GitLab, our mission is simple: to enable everyone to contribute to and co-create the software that powers our world. Our platform doesn‚Äôt just bring people together‚Äîit unites teams and organizations, breaking down barriers and redefining what‚Äôs possible in software development.\nHere, you‚Äôre not just contributing to a tool, you‚Äôre shaping the future of secure, scalable software delivery. Our high-performance culture values collaboration, ownership, and impact, accelerating careers while driving global innovation.\nThis is more than a job, it‚Äôs your opportunity to build something that matters.\nEveryone can contribute\nOur size and\nour mission\n(enable everyone to contribute to and co-create the software that powers our world.) mean that our team members can ‚Äî and are expected to ‚Äî make an impact across the company.\nBecause we all use our product internally, you don‚Äôt have to be a developer to learn to collaborate in the GitLab tool.\nFrom your very first week, no matter your role, you‚Äôll gain the technical skills needed to access, question, and contribute to projects far beyond your job description.\nThis unique approach works because we‚Äôre a team of helpful, passionate people who want to see each other, the company, and the broader GitLab community succeed.\nWe learn from each other, challenge each other, and thank each other.\nCome prepared to do meaningful work that will help shape the future of the company.\nWhile the opportunities to contribute are boundless in a growing organization like GitLab, they may not be clearly defined.\nYou‚Äôll need to think creatively, speak up to see how you can help, and be willing to try something new.\nFreedom to iterate\nAt GitLab, our\nvalue of iteration\nhas a unique impact on the way we operate and get things done.\nWorking this way means our team members are expected to quickly deliver the minimal valuable change in their work instead of waiting to produce a polished, completed product.\nWhile this can be a challenging practice to adopt at first, it‚Äôs liberating to be able to make mistakes, get feedback quickly, and course correct to reach a better outcome, faster.\nAs our company and the industry continue to grow, you‚Äôll have the freedom to change and constantly evolve everything from your schedule and your workspace to your job description and your skills.\nCulture at GitLab\nCulture at GitLab is composed of three things.\nCamaraderie (mutual trust and friendship). This is created and maintained by\ninformal communication\n. We also build trust by\neffectively collaborating\nwith others.\nWork style (how we work). This is defined and articulated in our\ncommunication guide\nand\nhandbook usage guide\n.\nOther pages related to culture\nDiversity, Inclusion and Belonging\nTalent Brand\nAll Remote\nGitLab is one of the world's largest all-remote companies\nCross-Culture Collaboration Guide\nThis guide will help GitLab team members in effective and inclusive communication and cross-cultural collaboration globally\nDiversity, Inclusion & Belonging\nDiversity, Inclusion & Belonging is fundamental to the success of GitLab. We include it in every way possible and in all that we do.\nGitLab CEO 101\nThere is a monthly GitLab CEO 101 call with new hires and the CEO.\nGitLab Events Code of Conduct\nGitLab is dedicated to providing a harassment-free and inclusive event experience for everyone!\nGitLab Songbook\nThe GitLab Songbook contains popular songs that have been adapted and arranged by GitLab team members.\nGitLab Summit\nOver the years, GitLab has hosted GitLab Summits, global team member events. In the past, these ‚Ä¶\nGitLab Top Team Member\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 631}
{"doc_id": "c09f8d34ad6fbae5", "url": "https://about.gitlab.com/company", "title": "About GitLab", "text": "About GitLab\nBehind the scenes of The DevSecOps Platform\nWhat we do\nWe're the company behind GitLab, the most comprehensive DevSecOps platform.\nWhat started in 2011 as an open source project to help one team of programmers collaborate is now the platform millions of people use to deliver software faster, more efficiently, while strengthening security and compliance.\nSince the beginning, we've been firm believers in remote work, open source, DevSecOps, and iteration. We get up and log on in the morning (or whenever we choose to start our days) to work alongside the GitLab community to deliver new innovations every month that help teams focus on shipping great code faster, not their toolchain.\nLearn more about GitLab\nGitLab by the numbers\nNumbers as of March 2025\nCode\ncontributors\n4,600+\nOffices\nAll-remote since inception\n0\nConsecutive monthly releases\n162\nTeam members\nin 60+ countries\n2,300+\nEstimated registered users\nOver 50 million\nFrom planning to production,\nbring teams together in one application\nGet free trial\nGitLab's mission\nOur mission is to enable everyone to contribute to and co-create the software that powers our world.\nLearn more\nGitLab's values\nCollaboration\nWe prioritize things that help us work together effectively, such as assuming positive intent, saying √¢¬Ä¬úthanks√¢¬Ä¬ù and √¢¬Ä¬úsorry,√¢¬Ä¬ù and giving timely feedback.\nResults for Customers\nWe operate with a sense of urgency and bias for action and we do what we promise because we exist to help our customers achieve more.\nEfficiency\nFrom choosing boring solutions to documenting everything and being managers of one, we strive to make fast progress on the right things.\nDiversity, Inclusion, & Belonging\nWe work to ensure GitLab is a place where people from every background and circumstance feel like they belong and can thrive.\nIteration\nWe aim to do the smallest viable and valuable thing, and get it out quickly for feedback.\nTransparency\nEverything we do is public by default, from our company handbook to the issue trackers for our product.\nGitLab over the years\n2011\nThe GitLab project began with a commit\nWe started releasing a new version of GitLab on the 22nd of every month\n2012\nThe first version of GitLab CI is created\n2014\nGitLab is incorporated\n2015\n2016\nAnnounced our master plan and raised $20 million in B round financing\n2021\nGitLab Inc. became a publicly traded company on the Nasdaq Global Market (NASDAQ: GTLB)\nWorking at GitLab\nWe strive to create an all-remote environment where all team members around the world can show up as their full selves, contribute their best, feel their voices are heard and welcomed, and truly prioritize work-life balance.\nIf you're interested in being a part of the team, we invite you to\nlearn more about working at GitLab\nand apply to any open positions that look like a good fit.\nView all open roles\nBetter teams. Faster progress. Better world.\nTeamOps is GitLab's unique people practice which makes teamwork an objective discipline. It's how GitLab scaled from a startup to a global public company in a decade. Through a free and accessible practitioner certification, other organizations can leverage TeamOps to make better decisions, deliver results, and move our world forward.\nLearn more about TeamOps\nGet certified\nLearn more\nBlog\nSee what's new with GitLab, DevOps, security, and more.\nVisit the blog\nPress room\nGitLab news, press releases, logos and brand assets\nLearn more\nInvestor relations\nThe latest stock and financial information for investors.\nLearn more\n50%+ of the Fortune 100 trust GitLab\nStart shipping better software faster\nSee what your team can do with the intelligent\nDevSecOps platform.\nGet free trial\nTalk to sales", "num_words": 597}
{"doc_id": "c6722ad6d9ef3ef5", "url": "https://handbook.gitlab.com/handbook/security/product-security/security-platforms-architecture/security-interlock/customer-zero-triage-process", "title": "Customer Zero Triage Process | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nProduct Security\nSecurity Platforms & Architecture\nSecurity Interlock\nCustomer Zero Triage Process\nRunbook for the Security Team to triage and assign Customer Zero Requests\nNew Customer Zero Requests\nWhen Customer Zero requests are created using our\nrequest templates\n, they are automatically labeled with\nC0Workflow::Backlog\n, which makes them visible on\nthis issue board\n(internal only).\nTriagers may choose to subscribe to the\n~C0Workflow::Backlog\nlabel and/or periodically monitor the board to identify new issues that need to be triaged.\nHow to Triage New Issues\nSelect an issue that does NOT start with the prefixes\nor\n. Those issues are ones that submitters have started, but they still need to provide additional information before we review them. That‚Äôs fine! We‚Äôd prefer to have visibility into what‚Äôs coming anyway.\nApply the label\n~\"C0Workflow::Initial Triage\"\nto indicate that someone is already triaging this issue so no one duplicates your efforts. You can do this manually or by moving the Issue to the next column on the\nissue board\n(internal only). If your triage takes more than just a few minutes, assign the issue to yourself so this shows up in your TODOs and you don‚Äôt lose track.\nReview the information provided in the Issue and determine if sufficient information has been provided for someone to work it. For example, are all of the key fields populated? Do you understand the feature and have all of the information you‚Äôd need to do a review?\nIf Not\n: Tag the requestor and key contacts in a comment and ask them clarifying questions. Apply the label\n~\"C0::Waiting on Requestor\"\nto the Issue manually or by moving it to the next column on the\nissue board\n(internal only). Ask that they tag you directly when they‚Äôve provided the additional information so you can re-review and follow the next steps.\nOnce you have determined there is sufficient information in the Issue, first set the milestone appropriately, given both the Timeline Requirements in the Issue and our\nSLOs\n, which state requests received at least 10 calendar days before the next milestone starts should have feedback provided within the next milestone. Requests received later than that will typically be prioritized for milestone+2.\nDetermine which team(s) are best suited to provide the appropriate feedback. If you are unsure which teams‚Äô feedback is required, ask in\n#product-security-department-only\n. Once you have determined the appropriate team(s), take the following steps:\nTeam\nSteps\nAppSec\n1. Apply the\n~\"Application Security Team\"\nlabel\n2. Tag\n@gitlab-com/gl-security/product-security/appsec\nand ask them to incorporate into their milestone planning\nTag\n@gitlab-com/gl-security/product-security/appsec/psirt-group\nand ask them to incorporate into their milestone planning\nVuln Management\nTag\n@gitlab-com/gl-security/product-security/vulnerability-management\nand ask them to incorporate into their milestone planning\nProdSecEng\n1. Apply the\n~\"team::Product Security Engineering\"\nlabel\n2. Tag\n@gitlab-com/gl-security/product-security/product-security-engineering\nand ask them to incorporate into their milestone planning\nNot Listed\nTag team members individually, and update this Handbook page if you receive alternate instructions\nApply the label\n~\"C0Workflow::On Deck\"\nto indicate this has been triaged and assigned.\nYou‚Äôre Done!\nLast modified June 25, 2025:\nAdd ProdSecEng into table (\nc0b8f6c4\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 519}
{"doc_id": "aa415bff0040bdff", "url": "https://handbook.gitlab.com/handbook/finance", "title": "Finance | The GitLab Handbook", "text": "The Handbook\nFinance\nWelcome to the GitLab Finance Handbook\nThe GitLab Finance Department includes multiple Teams: Accounting, Financial Planning & Analysis, Tax and Business Operations Programs.\nFinance Issues\nPlease use confidential issues for topics that should only be visible to team members at GitLab.\nAccounts Payable\nExpense Guidelines\nOperating Metrics\nProcurement\nSales Comp Plan\nSignature Authorization Matrix\nAuthorization Matrix Policy\nStock Options\nForms\n2025 GitLab Inc W-9 Document and Certificate of Residence\nForm CA-590 - Please request by email to\ntax@gitlab.com\nCorrespondence\nPlease use the\n#finance\nchat channel in Slack for questions that don‚Äôt seem appropriate for the issue tracker or internal email correspondence.\nAccounts Payable\n- inquiries which relate to vendor and merchant invoices, or team member‚Äôs expenses should be sent to our Accounts Payable mailbox -\nap@gitlab.com\n. You can also reach the AP team on Slack in the\n#accountspayable\nor\n#expense-reporting-inquiries\nchat channels.  Invoices that require payment processing should be sent to\nap@gitlab.com\n.\nBilling Operations\n- customer billing inquiries should be sent to our Billing mailbox ‚Äì\nbilling@gitlab.com\n.\nAccounts Receivable\n- customer payment/remittance inquiries should be sent to our Accounts Receivable mailbox -\nAR@gitlab.com\nPayroll\n- inquiries which relate to contractor invoices should be sent to our Payroll mailbox -\nnonuspayroll@gitlab.com\n.\nCFO Approvals\nPlease use the\n#cfo-approvals\nchat channel in Slack for alerting the CFO to a request for his approval\nTag the CFO‚Äôs Staff EBA in the Slack request for visibility and followup\nAppropriate Finance team members in the approval flow must approve prior to requesting CFO approval\nAll requests must go through the appropriate approvals process, include a link to the Issue or description and receive all approvals prior to requesting CFO approval\nWe\nFinance\nFinance Handbooks\nAccounting\nBusiness Technology\nFinancial Planning & Analysis\nInvestor Relations\nTax\nGeneral Topics\nLegal and Financial Information\nFor commonly requested company information, please visit our\nwiki page\n.\nCompany Accounts\nLogin information for the following accounts can be found in the Secretarial vault\non 1Password:\nFedEx\nAmazon\nIND (Immigratie en Naturalisatie Dienst, in the Netherlands) company number\nIf you need this information but cannot find it in your shared vaults, check with the People Connect Team members to get access.\nFiscal Year\nA fiscal year is a one-year period that corporations use for accounting and budgeting.\nGitLab‚Äôs Fiscal Year runs from February 1 to January 31. The fiscal year naming correlates to the ending month of the given fiscal year, for example FY26 is GitLab‚Äôs fiscal year running February 1, 2025 to January 31, 2026.\nQ1: February 1 through April 30\nQ2: May 1 through July 31\nQ3: August 1 through October 31\nQ4: November 1 through January 31\nFiscal Year\nCalendar Year\n2025-02-01 to 2025-04-30\n2025-05-01 to 2025-07-31\n2025-08-01 to 2025-10-31\n2025-11-01 to 2026-01-31\nRefer to our\nwriting style guidelines\nfor proper use of date formats.\nRevenue non-committee\nInternal Management Members:\nChief Financial Officer (DRI), Chief Executive Officer, Chief Revenue Officer (model, guidance, plan, target)\nInvoice template and where to send\nVendor invoices are to be sent to\nap@gitlab.com\nand\npayroll@gitlab.com\nfor contractors. An\ninvoice\ntemplate can be found in Google Docs by the name of ‚ÄúInvoice Template‚Äù.\nNon-US contractors not from Hungary, Italy, Japan, New Zealand, Nigeria, South Africa, Switzerland, and Ukraine will get pay their monthly wages and expenses through iiPay. Here is the process:\nenter bank information in Workday under Bank Information tab. Note - new contractor should enter their bank information within 3 business days from their start date.\nenter VAT number if it is available\nsubmit monthly salary/bonus/commission invoice in through Google form by the 8th of each month (as described to you during onboarding)\nsubmit expenses through Navan Expense by the 8th of each month\nthe scheduled payment date is the 22nd of each month\niiPay will send out remittance advice along with the scheduled payment via your GitLab email address\nNon-US contractors from Italy, Nigeria, South Africa, Switzerland, and Ukraine will need to send their monthly invoice for salary/bonus/commission and any\nexpenses\nby the 15th to\npayroll@gitlab.com\n.\nIn many cases, VAT will not be payable on transactions between GitLab BV and EU-based\nvendors/contractors, thanks to ‚ÄúShifted VAT‚Äù. To make use of this shifted VAT:\nThe vendor/contractor writes the phrase ‚ÄúVAT shifted to recipient according to\narticle 44 and 196 of the European VAT Directive‚Äù on the invoice along with the\nVAT-number of GitLab IT BV (NL860316828B01).\nOn the vendor‚Äôs VAT return the revenue from GitLab BV goes to the rubric ‚ÄúRevenue within the EU‚Äù. It goes without saying that vendors are responsible for their own correct and timely filings.\nGitLab BV files the VAT on the VAT return, and is generally able to deduct this VAT all as part of the same return.\nTimesheets for Hourly Employees\nPeople Ops and Finance will share a private Google Sheet with you where you will log your hours for each day in the ‚Äúhours‚Äù column.\nThere is a dropdown in the ‚Äúpay type‚Äù column, with the default being Regular. There are also options for Overtime, Vacation, Sick, and Bereavement. Choose the appropriate pay type for your time.\nIf you work overtime or more hours than agreed upon in your contract, please obtain approval from your manager and forward to Finance before payroll cutoff.\nYour timesheet is due one day prior to the submit payroll date, which is outlined for the calendar year on your timesheet.\nHow spend is allocated to departments\nBudgets are aligned to departments, and budgets follow the owner who requested the spend. When determining who should request the spend, consider the owner of the outcome.\nFor example, work to enable a sales partner that will not be incorporated into the product would go to Sales. Work that will be part of the product and supported by engineering, should be charged to the Engineering budget.\nFinance Business Partner Alignment\nFunction\nName\nCustomer Support\nR&D Finance\nSales\nSales Finance\nProfessional Services\nSales Finance\nMarketing\nMarketing Finance\nEllen Boyd and Jess Smith\nTypes of Work that the team does\nLevel 1: Keeping the lights on activity. Always striving to make this area as efficient as possible so more Layer 2 focus can be attained. Example: closing the books.\nLevel 2: Operational Efficiencies, Business Engagement and Partnering, actionable insights for the organization. Examples: improving close process, partnering with sales to make a business decision\nAccounting and Reporting\nThis page contains GitLab‚Äôs accounting and reporting policies, which can be made public. ‚Ä¶\nAccounts Payable\nThis page contains GitLab‚Äôs Accounts Payable department policies, procedures and guidelines. ‚Ä¶\nAuthorization Matrix\nPlease refer to the authorization matrix here\nCommittee Composition\nDisclosure Committee Composition Chairperson: Chief Executive Officer, Chief Financial Officer, ‚Ä¶\nFinance Growth and Development\nWelcome to the GitLab Finance Growth and Development Page\nThe GitLab Finance Department is dedicated ‚Ä¶\nFinance Team Performance Indicators\nExecutive Summary KPI Health Status Recurring revenue variance ex-JV Confidential Confidential ‚Ä¶\nFinancial Planning & Analysis\nWelcome to the FP&A Team Handbook. Our missions is to maximize GitLab's long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively\nGitLab Finance Team READMEs\nLearn more about working with various members of the Finance team\nGlobal Travel and Expense Policy\n1. POLICY GitLab‚Äôs Global Travel & Expense Policy is meant to provide guidance to all Team ‚Ä¶\nInvestor Relations\nWe have an externally facing investor relation website. The page you are on now the handbook that ‚Ä¶\nPayroll\nPlease refer to the Payroll internal handbook page ‚Ä¶\nSales Compensation Plan\nFY23 Compensation T&Cs can be found in the Internal Handbook: ‚Ä¶\nSpending Company Money\nAll team members and contractors must protect our Company assets, such as equipment, supplies, cash, ‚Ä¶\nThe GitLab Procurement Team\nWhat is Procurement? The Procurement team manages GitLab‚Äôs Supplier Lifecycle through the ‚Ä¶\nThe GitLab Tax Team\nThe tax department is responsible for GitLab's overall tax strategy including all components of tax compliance, tax planning and accounting for income taxes. In addition, the tax department manages GitLab's statutory requirements including statutory audits, filing of entity-level financial information, transfer pricing, and ensuring intercompany transactions are recorded appropriately.\nThe Internal Audit Function\nPlease refer to the Internal Audit page in the internal handbook.\nTimekeeping Policies and Procedures\nInternal handbook link\nTravel Safety and Security\nTravel Safety and Security Team member safety and security are a top priority for GitLab. If a team ‚Ä¶\nLast modified April 25, 2025:\nRemove key reviews (\n41c68411\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1404}
{"doc_id": "ec040f8aec0e6557", "url": "https://handbook.gitlab.com/handbook/company/esg", "title": "GitLab Environmental, Social, and Governance (ESG) | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Environmental, Social, and Governance (ESG)\nAn overview of corporate sustainability at GitLab.\nGitLab Fiscal Year 2024 (FY24) ESG Report\nMessage From Our Chief Executive Officer\nAt GitLab, our mission is to enable everyone to contribute to and co-create the software that powers our world. This, together with our values, is at the core of how we manage our business, including our approach to Environmental, Social, and Governance (‚ÄúESG‚Äù).\nOur all-remote team drives GitLab‚Äôs strategy and business results in more than 60 countries worldwide. In FY24, we sharpened our focus on our people by emphasizing the foundational role of high-performing teams and continuing to leverage our core value of diversity, inclusion, and belonging (DIB) to drive innovation and impact across our business. These efforts included launching new training and development programs and additional resources to encourage and enable team members to contribute and to give our people leaders more of the skills they need to manage efficient and effective teams.\nOur ESG strategy also encompasses efforts to minimize our environmental impact and better understand and address the potential effects of climate change on our business. In FY24, we continued to enhance our approach to measuring and reporting our greenhouse gas emissions. We conducted GitLab‚Äôs first climate risk assessment in alignment with the Task Force on Climate-related Financial Disclosures (TCFD) and launched the first iteration of a supplier engagement program focused on improving the visibility of emissions in our supply chain.\nWe are committed to good corporate governance and high standards of ethics and compliance. In particular, as we continue to harness the power of AI to enhance the GitLab platform, we recognize the importance of working within a robust framework of ethical principles and protecting our customers‚Äô and users‚Äô data. In early fiscal year 2025, we launched the GitLab AI Transparency Center, giving customers direct access to our AI Ethics Principles for Product Development, AI Continuity Plan, and AI features documentation so that they can adopt AI with confidence.\nLastly, our strategy and mission are also bolstered by engagement with the wider GitLab community. In the last fiscal year, we continued to expand outreach and drive social impact through community programs such as GitLab for Startups, GitLab for Open Source, and GitLab for Education. We also launched GitLab for Nonprofits, which provides free GitLab licenses to registered nonprofit organizations that align with our values and ESG strategy. Our charitable efforts are further complemented by the GitLab Foundation, which supports people in growing their lifetime earnings through education, training, access to opportunities, and systems changes on a global scale.\nAs ever, GitLab ‚Äî the platform and the company ‚Äî is made stronger by the support of our stakeholders, including our team members, customers, shareholders, and the wider community. I am thankful for the contributions so far and look forward to what we can accomplish together in the years ahead.\nSincerely,\nSid Sijbrandij\nGitLab Co-Founder and Chief Executive Officer\nIntroduction\nOur Mission and Vision\nGitLab‚Äôs\nmission\nis to enable everyone to contribute to and co-create the software that powers our world.\nOur mission is the way we realize\nour purpose\n: to help people increase their lifetime earnings through access to opportunities and the DevSecOps platform.\nOur\nvision\nAllOps platform\n‚Äî a single application for all R&D.\nOur efforts are guided by our six core\nvalues\nof Collaboration, Results for Customers, Efficiency, Diversity, Inclusion and Belonging, Iteration, and Transparency. Together, they spell the\nwe give each other by assuming good intent.\nAbout This Report\n‚ÄúWith GitLab‚Äôs second ESG Report, we demonstrate our values of iteration and transparency, sharing how we continue to build on our approach to addressing the issues that matter most to our stakeholders and our business. One key example is the launch of our AI Transparency Center, underscoring how we are leveraging the power of AI within a clear framework of ethics, responsibility, and accountability. As our innovation continues to break down barriers, we recognize the increasing opportunity of integrating our business and sustainability strategies to create value for our customers, our shareholders, our team members, and the broader community.‚Äù\n‚Äì\nRobin Schulman\n, Chief Legal Officer, Head of Corporate Affairs, and Corporate Secretary\nGitLab‚Äôs Environmental, Social, and Governance (‚ÄúESG‚Äù) Report includes information on our key ESG focus areas, our programs and policies, achievements to date, metrics and targets that help define our ESG program, and our plans for the future. Data about GitLab‚Äôs financial performance is not included in this report and may be found in our\nfinancial and SEC filings\n.\nUnless otherwise specified, the information included in this report was last updated on July 18, 2024. The content included covers Fiscal Year 2024 (‚ÄúFY24‚Äù) (as of January 31, 2024) and we plan to update the report annually. Throughout the report, there may be mentions of Fiscal Year 2025 (‚ÄúFY25‚Äù), which runs from February 1, 2024, through January 31, 2025. We would also like to note that GitLab maintains a public-facing\nhandbook\n, pages of which are linked throughout the report. These pages are maintained separately and may reflect a different reporting period than this report.\nThis report has been prepared with reference to the Global Reporting Initiative (‚ÄúGRI‚Äù) Standards released in October 2021 and the Sustainability Accounting Standards Board (‚ÄúSASB‚Äù) Standard for Software & IT Services. We have also provided disclosures based on the framework of the Task Force on Climate-related Financial Disclosures (‚ÄúTCFD‚Äù). Content indexes for these standards are available in the\nAppendix\n.\nGitLab‚Äôs Nominating and Corporate Governance Committee on the Board of Directors (‚ÄúBoard‚Äù) has reviewed the information in this report.\nFor information on GitLab‚Äôs ESG Team, please visit the\nESG handbook page\n.\nOur Approach to ESG\nESG Strategy\nGitLab‚Äôs ESG strategy is driven by our\nvalues\nand deeply integrated into the company‚Äôs business philosophy. It reflects longstanding practices embedded in our work culture since GitLab‚Äôs inception, as well as updated policies and programs designed to meet the evolving needs and expectations of our stakeholders.\nThe\nESG Team\ncreates and maintains GitLab‚Äôs ESG/sustainability strategy and programs. This includes creating and managing GitLab‚Äôs ESG disclosures and public ESG reports, identifying and prioritizing key issues to advance our social and environmental goals, and creating partnerships with nonprofit organizations that support GitLab‚Äôs values and mission.\nESG Materiality Assessment\nOur ESG strategy is informed by an understanding of the ESG topics that matter most to our business and our stakeholders. Completed in December 2022, our ESG materiality assessment included engagement with internal and external stakeholders and a focus on ‚Äúdouble materiality,‚Äù exploring both topics that have the greatest impact on GitLab‚Äôs business, as well as the actual and potential impact of our activities on the environment, society, and our global communities. GitLab senior leadership ‚Äî including members of the Nominating and Corporate Governance Committee of GitLab‚Äôs Board of Directors ‚Äî were engaged as part of the assessment.\nThe materiality assessment identified the following key ESG topics:\nSocial\nTalent and Engagement\nDiversity, Inclusion, and Belonging (DIB)\nEnvironment\nClimate Action and Greenhouse Gas Emissions\nGovernance\nInformation Security and Data Privacy\nResponsible Product Development\nBusiness Ethics\nWe also include in this report other topics relevant to our business and stakeholders, including Community, Social Impact, and Corporate Governance.\nUnited Nations Sustainable Development Goals Alignment\nThe\nUnited Nations Sustainable Development Goals (‚ÄúUN SDGs‚Äù)\nprovide a shared blueprint for peace and prosperity for people and the planet, now and into the future. Our ESG efforts currently align with five of the 17 UN SDGs, and we seek to drive progress on the goals within our operations. We will continue to revisit and deepen our alignment as we make progress on our ESG strategy.\nSocial\nTalent and Engagement\n(UN SDG #8 and 10)\nWe‚Äôre a team of helpful, passionate people who want to see each other, GitLab, and the broader GitLab community succeed.\nOur mission\n(to enable everyone to contribute to and co-create the software that powers the world) means that our team members can ‚Äî and are expected to ‚Äî make an impact across the company. We empower them by cultivating a high-performance and results-driven culture ‚Äî one that enables people to do their best work and advance their careers while fully contributing towards advancing GitLab‚Äôs business results. We hire, promote, and recognize those team members who best live our\nvalues\n.\nWe also leverage team members‚Äô unique skills and experiences to drive extraordinary outcomes. We believe that when team members seek feedback from a diverse group of peers and leaders, inside and outside of their group or function, they make better decisions and feel more connected. We work to make everyone feel welcome and increase the participation of underrepresented groups in our community and company.\nOur entire workforce is remote, making it easier for people of diverse backgrounds and abilities to join the team. As GitLab has evolved, we have learned a great deal about what it takes to build and manage a fully remote team, which we share through our publicly available\nhandbook\n.\nTalent Management\nOur approach to talent management is underscored by our values, particularly of transparency and diversity, inclusion, and belonging. It is also bolstered by the resources we provide to help our team members grow and succeed.\nThrough our website and\nhandbook\n, we are transparent about\navailable positions\n,\nbenefits\n,\njob descriptions\n,\nonboarding\nand\noffboarding\nprocedures, facilitating connections with various internal groups, and much more.\nWe also work to build a diverse team to drive extraordinary outcomes by expanding outreach and inclusivity initiatives to increase the number of team members and our Manager+ population who identify as part of an underrepresented group.\nOur\nPeople Group\nis dedicated to supporting each team member through their career journey at GitLab. They enable GitLab‚Äôs strategy through a focus on attracting and retaining diverse talent, creating a high-performance culture with a focus on efficiency and quality results, driving divisional success through talent programs, and cultivating an equitable and inclusive culture. This includes developing and maintaining our\ntalent brand\n, facilitating ongoing\nlearning and development\n, and providing resources for team members to\nconnect\n, share concerns, and seek\nsupport\n.\nIn FY24, we focused on accelerating GitLab‚Äôs 3-year strategy through re-emphasizing the foundational role of high-performing teams. At GitLab, high-performing teams:\nAct with urgency to deliver key results\nHold individuals and teams accountable for great work\nTrust each other\nDeliver results on time\nCollaborate with open and effective communication\nWe educate team members about our values through trainings,\nvideos\n, workshops, forums, certifications, and ambassadors, which are designed to reinforce our values as key drivers of our high-performance, results-driven culture.\nDeveloping Our Leaders\nManagers at GitLab support our mission of enabling everyone to contribute to and co-create the software that powers our world. We need to equip our people leaders with the skills to lead globally dispersed, all-remote teams to support our business growth at scale.\nElevate\nis GitLab‚Äôs leadership training program for Managers and Senior Managers, which prepares managers with skills they need to build high-performing teams. In FY24, we certified 73% of our eligible Managers and Senior Managers in Elevate. Although this fell short of our goal of 85%‚Äîdue to business-critical initiatives, some team members had to delay certification for a year‚Äîit demonstrated positive momentum for the program and contributed to the company‚Äôs strong performance throughout the year.\nDuring FY24, we also developed and launched additional tools to help participants deepen and continue their learning beyond initial certification.\nElevate Applied\nis an ongoing resource that enables Managers and Senior Managers to connect with each other and practice, apply, and integrate concepts taught in Elevate in their day-to-day work at GitLab.\nIn addition, we developed and announced the FY25 launch of\nElevate+\n, a six-month program designed to enable senior leaders (Directors and Senior Directors) to better understand and practice behaviors anchored in GitLab‚Äôs values and leadership competencies, develop new skills to support high-priority business needs, and help establish and strengthen cross-functional connections.\nTalent Engagement\nWe strive to foster a culture of continuous growth so that GitLab remains a great place to work. A positive impact on team member experience leads to a positive impact on results for GitLab and its customers.\nOur\nTalent Development\nteam (commonly referred to as ‚ÄúLearning & Development‚Äô‚Äô) enhances team member performance, expands capabilities, and further develops skills that make GitLab team members the top talent in the industry. Our vision is to be recognized as a top organization for remote learning and development and to create a future where everyone contributes to a culture of curiosity. We accomplish this by focusing on skill-based learning, providing resources to enhance career mobility, and developing learning journeys for teams throughout the organization.\nTo support our aim of facilitating accessible, remote-friendly development for all, we provide asynchronous access to learning opportunities, including:\nLevel Up\n, our learning management software, which is designed to facilitate and centralize the learning experience for GitLab team members.\nSelf-paced external trainings\n, for accessing role-specific training courses and learning materials from industry-leading providers.\nCareer Development and Mobility\n, providing resources and direction to help team members engage in lifelong growth to meet their unique goals.\nGrowth and Development Fund\n, enabling team members to access external resources to develop their skills and careers.\nAs a global, all-remote company with a team of diverse backgrounds, experiences, and perspectives, GitLab offers a dynamic environment and culture where everyone is encouraged to do their best work. Our talent brand empowers team members to share their thoughts on\nwhat it‚Äôs like to work here\nbecause their voices and stories make GitLab unique and successful.\n‚ÄúBy fully embracing the values, GitLab has changed the way I work. I have become more productive and satisfied with the work I do, while also having a better work-life balance. It‚Äôs motivating to work somewhere so amazing with such great people.‚Äù ‚Äì Cynthia, Strategy and Operations, Office of the CEO\nEngagement Surveys\nWe conduct a number of\nengagement surveys\nthat enable us to capture honest feedback from our team members, understand engagement levels across the organization, and respond to changing needs. By making small iterations and moving quickly, we can get the data needed to evolve engagement programs as needed and align our priorities to the areas team members care about most. Our key survey tools include the annual CultureAmp Engagement survey, Employer Award surveys, and other ad hoc measures like Organizational Health surveys.\nIn FY24, our Annual\nEngagement Survey\nreached 88% participation and indicated an overall engagement score of 75% favorable. This is 2% higher than our\nNew Tech\npeer group, which gives us confidence in knowing we have a highly engaged team member community. Additional highlights included:\n94% agree: ‚ÄúI enjoy engaging with my peers at GitLab.‚Äù\n92% agree: ‚ÄúIt is easy to ask other members of your team for help.‚Äù\nSubsequently, our global year-end pulse survey demonstrated positive momentum with an overall engagement score of 79% favorable (+4%). In addition, 91% of participants said they‚Äôre proud to work at GitLab, while 86% rated GitLab as a great place to work.\nGitLab received\nGreat Place to Work Certification\nfor the 4th year in a row in May 2024 with 93% of its U.S. based team members saying that they believe GitLab is a great place to work.\nGreat Place to Work\nrecognizes companies for their outstanding workplace culture, benefits, and performance through successful completion of a survey for US-based team members and culture brief application.\nDiversity, Inclusion, and Belonging\n(UN SDG #5, 8, and 10)\nWe are committed to a future where the\nDiversity, Inclusion and Belonging\n(‚ÄúDIB‚Äù) value empowers everyone to contribute.\nAs a globally dispersed organization serving customers all over the world, we strive for a team that is representative of our users, an open and transparent work culture where all voices are heard and welcomed, and an environment where everyone can show up as their full selves and contribute to their best ability each day.\nWe believe this not only makes GitLab a great place to work but also supports innovation and promotes better decision-making, helping us continue to deliver results for customers.\nOur DIB focus also extends to how we show up for people outside of GitLab, through initiatives that promote DIB in our industry and the broader community. To put it simply, we need the contributions of everyone in order to empower our team members, help our users change the world, and transform the industry.\nWe do this through our A.D.A.P.T. strategy:\nction ‚Äì Puts intentionality into how we attract, progress, and retain our team members, engage with our customers, and diversify the open source community.\no Good ‚Äì By providing avenues and opportunities for GitLab and team members to meaningfully contribute to our community and society.\nccountable ‚Äì We hold ourselves accountable in the commitments we make as well as being answerable for the outcome.\nolicies ‚Äì scalable processes and policies inform and govern our program development and execution.\nransparent ‚Äì Our internal efforts are shared externally.\nAdditionally, to continue to drive progress, we‚Äôve organized our DIB work into three pillars: empowering our people, uplifting our communities, and building inclusivity into all we do.\nEmpowering Our People\nGrowing Our Talent & Their Experience\nOur team members are critical to our success. We provide pathways for them to thrive individually and as a part of the GitLab community.\nLevel Up\n‚Äì Our learning platform is designed to deploy learning content across GitLab internal team members.\nCareer development and mobility\n‚Äì We provide resources and direction to help team members engage in lifelong growth to meet their unique career goals.\nTeam Member Resource Groups\n(TMRGs) ‚Äì TMRGs cultivate an inclusive workplace and empower our employees by fostering a supportive environment where everyone can thrive. Our TMRGs are open to all team members, not just those who specifically identify with a particular group.\nAsian/Pacific Islander\nBlack@GitLab\nCaregivers\nDisabilities and Neurodivergence\nGente\nGenerational Understanding\nGlobal Voices\nPride\nGitLab Women\nTeam Member Advocacy Groups\n(TMAGs) ‚Äì TMAGs are groups that share common interests and work together to drive change on behalf of the community through education, action, and enablement across a specific need.\nCareer Enablement\nMental Health ‚Äì Coming soon\nLeadership in Action\nFrom education to mentorship, sponsorship, and advocacy, GitLab educates its leaders, provides resources for its team members, and holds its leaders accountable so that team members feel empowered to utilize the community they are surrounded by every day.\nTMRG Executive Sponsors\n‚Äì VP+ leaders who volunteer to support, advocate, and connect TMRG communities to our shared GitLab mission and vision and E-Group leaders.\nLeadership DIB Council\n‚Äì A strategic group of senior leaders who assist the DIB team in implementing and aligning the strategy to each division‚Äôs strategic imperatives.\nSponsorship\n‚Äì VP+ leaders advocate and provide visibility and guidance to our team members for growth and career advancement.\nEquipping Our People Leaders\n‚Äì Our leadership training ensures that DIB is considered and threaded throughout the team member experience.\nElevate ‚Äì Manager training\nElevate+ ‚Äì Director+ inclusive leadership training\nElevate Applied ‚Äì Continuous learning for Elevate graduates\nUplifting Our Communities\nCommunity partnerships are a great way for GitLab to engage with the community externally, provide opportunities for career development and networking for our team members, and also add layers of DIB to key areas of our organization. Partnerships are also how we measure our inclusive practices against industry standards and can act as accountability partners in achieving success.\nExternal Engagement\n‚Äì We sponsor and support events worldwide that promote inclusion and belonging, and create learning and growth opportunities for our team. By networking with diverse talent at these events, we infuse our team with fresh perspectives and ideas. Reflecting on a year of impactful partnerships, we are inspired to further foster spaces where technology and diverse talent converge, giving everyone a voice.\nDo Good\n‚Äì Throughout the year, the DIB and ESG teams collaborate to give back to the communities we serve by offering volunteer opportunities to team members, working with TMRGs to donate funds to relevant nonprofits, and providing in-kind donations to DIB related nonprofits through the\nGitLab for Nonprofits\nprogram.\nBuilding Inclusivity Into All We Do\nWhen we think about DIB, it‚Äôs easy to see it only from a team member perspective. Our goal is to bring inclusivity into as many touch points as possible ‚Äî from our open source contributors to how we engage with our customers and users.\nDEI Project Badging Program\n‚Äì In FY24, GitLab partnered with the Linux Foundation through the Community Health Analytics in Open Source Software (\n) project to enable open source projects to signal their focus on building and growing diverse communities.\nDigital Accessibility\n‚Äì At GitLab, we build understanding, empathy, and allyship around accessibility. We do this through various methods internally, including\nInclusive Design Principles\n, Digital Accessibility Training, webinars, and workshops, to ensure that our Product and Engineering teams are equipped with the skills necessary to make our product more accessible.\nInclusive Hiring\n‚Äì GitLab strives to create an equitable application, interview, selection, and offer process for all candidates to ensure we‚Äôre building a diverse and inclusive workforce around the globe as the company continues to grow.\nDIB Working Group\n‚Äì A strategic group of impactful team members who collaborate to drive action and results in support of DIB. This includes promoting inclusive practices in areas such as name pronunciation, pronoun education, and meeting etiquette in an all-remote workplace.\nLooking Ahead\nWe followed through on our commitments and accomplished a lot in 2023, but we still have work to do. We are continuing to build DIB into every part of GitLab ‚Äì both internally with our team members and externally with our customers, users, partners, and open source community.\nWe have committed to four key objectives in FY25:\nDeliver our supplier diversity strategy\n‚Äì We have set an aspirational goal to double the number of suppliers categorized as diverse. To achieve this aspirational goal, we are engaging partners, strategically embedding diversity, inclusion and belonging practices into our procurement process, and evaluating our current suppliers‚Äô practices in line with applicable anti-discrimination principles.\nIncrease representation\n‚Äì Extend our representation of team members from our Disabilities, Neurodivergence and LGBTQIA+  communities. We are working with several partners to help us achieve this goal including but not limited to, Unicorns in Tech, DisabilityIN, and Anita B. Org. Visit\nthis Handbook page\nto learn more about how we select partners and measure success in attracting team members from these communities.\nEmerging Talent @ GitLab\n‚Äì Our mission is to attract, acquire, and activate talent to unlock their potential, connecting learning agility with employment opportunities, decoupled from academic-based prerequisites. This is anchored on the belief that building a balanced workforce will enable GitLab to scale effectively and inclusively, and that building a strong foundation today will greatly impact our future growth.\nEnsure inclusive leadership\n‚Äì Inclusive leadership is integrated into leadership development experiences and offered as voluntary resources to promote ongoing education and awareness. These experiences span all front-line and aspiring leaders in addition to VP and E-Group populations.\nGitLab Community\nFrom the beginning, GitLab has been an\nopen source project\nmade possible by contributions from its community. Contributors to GitLab ‚Äî the platform and the company ‚Äî make up the GitLab community and are fundamental to GitLab‚Äôs strategy and mission.\nThe\nDeveloper Relations\nteam supports GitLab‚Äôs mission by working with our community to ensure they receive support and recognition for contributing to GitLab. This involves a multifaceted approach that includes creating educational content, organizing events and workshops, developing programs, and providing platforms for knowledge exchange and collaboration. The team focuses not only on promoting GitLab‚Äôs features and capabilities but also on actively listening to and incorporating feedback from our community to inform product development and improvements.\nGitLab Community Programs\nGitLab‚Äôs\nCommunity Programs\naim to put GitLab‚Äôs most powerful features in the hands of communities that may not otherwise have the means to access them, helping them to grow and thrive. Members of the Community Programs team serve as liaisons, tracking the ways their respective communities prefer using GitLab and translating that knowledge into insights that help GitLab create a better product.\nWhile each program is unique in its organization and execution, benefits may include:\nComplimentary subscriptions of GitLab Ultimate\nDirect lines of communication to GitLab team members\nOpportunities to partner with GitLab for presentations and events\nOur key community programs include the following:\nLaunched in FY24,\nGitLab for Startups\nhelps qualifying startups streamline their development processes and improve collaboration by providing free access to GitLab Ultimate for one year, followed by deeply discounted access to any tier for a second year. Current participants include several startups focused on delivering innovative sustainability solutions, such as\nBreathe Battery Technologies\n,\nVerity Nature\n, and\nClimaSens\n.\nThe\nGitLab for Open Source\nprogram provides qualifying projects with no-cost subscriptions of GitLab Ultimate. By empowering open source projects with our most advanced features, GitLab for Open Source supports our mission and helps make GitLab the best place for open source projects to grow and thrive.\nThe\nGitLab for Education\nprogram aims to enable educational institutions to succeed in teaching, learning, and conducting research with GitLab. We seek to build an engaged community of GitLab users around the world who actively contribute to GitLab and each other‚Äôs success and ultimately become evangelists of GitLab in the workplace and beyond. As of January 2024, the GitLab for Education program provides over 3.5 million seats of GitLab Ultimate at more than 1,800 educational institutions in more than 74 countries.\nFor information on GitLab for Nonprofits, see\nSocial Impact\nbelow.\nOther Community Initiatives\nFinding an open source community to learn, connect, and grow with can be a challenge for many developers. To better align on best practices for building inclusive open source communities and to ensure that our DIB value is reflected in our contributor community, GitLab has partnered with the\nproject to integrate GitLab with their recently released\nDEI Project Badging program\n. The DEI Project Badging program enables open source projects to:\nClearly signal their focus on building diverse communities\nMore easily highlight the work they are doing to welcome and support new members\nAdd visual badges to their projects to indicate their community‚Äôs reflection on the CHAOSS DEI badging metrics\nTo learn more about how the program works and how GitLab and CHAOSS worked together to bring it to the wider community, see our\nblog post\n.\nIn FY24, our Contributor Success Team sought to enhance community relations and contribute to sustainability by allowing teams to recognize contributors by sponsoring tree planting in lieu of traditional rewards like swag. Through a partnership with\nTree-Nation\n, we have the ability to plant trees on behalf of others, and others can also pay to plant trees in our forest. Similarly, our Marketing team offers attendees at GitLab events the opportunity to plant trees through\nRewards.Earth\n.\nSocial Impact\n(UN SDG #4 and 10)\nCharitable Giving\nLaunched in 2023, GitLab‚Äôs\nPhilanthropy Policy\nsupports GitLab teams that want to engage in charitable giving and activities benefiting registered nonprofit organizations that align with GitLab‚Äôs mission, values, and ESG strategy. By enabling teams to contribute to causes aligned with their work, we foster connections between GitLab‚Äôs purpose and values and the opportunity to drive impact in the broader community. For example, in FY24:\nGitLab Women\n, our TMRG that helps women advance their skills and leadership potential, donated funds to\nWomen Who Code\n, a national organization focused on empowering women to excel in technology careers.\nParticipants in our sales incentive program, GitLab President‚Äôs Club, built filter kits with\nWater to Wine\n, an international nonprofit committed to building a holistic, community-based model by supporting the life and dignity of all through the power of clean water.\nGitLab for Nonprofits\nDuring FY24, we also launched our in-kind donation program,\nGitLab for Nonprofits\n, which gives free GitLab licenses to registered nonprofit organizations that align with our values and ESG strategy. Nonprofits accepted into the program are provided a free Ultimate license for one year for up to 20 seats. In the first six months of the program, we granted licenses to more than 100 qualified nonprofits.\n‚ÄúGitLab is our canvas for workflow across our nonprofit organization. It allows us to do everything from planning and managing the workloads for our teams all the way to the CI/CD pipelines, which automate efforts ranging from routine tasks to platform deployments in our various environments. Whether it‚Äôs documenting processes in place with issue templates or structuring organization-wide initiatives with interdependent issues, epics, and milestones, GitLab gives us the structure we need, with the flexibility to meet our unique needs.\"\n‚ÄìMike Bowie, Chief Technology Officer, Last Mile\nVolunteer Initiatives\nThrough our\nGiveLab program\n, we encourage team members to take part in volunteer initiatives that support and ultimately uplift their local communities.\nIn FY24, GitLab provided virtual volunteer opportunities for team members through a partnership with\nSuitUp\n, a nonprofit that equips students for life beyond the classroom by partnering with schools/youth organizations and businesses to develop, organize, and implement engaging educational competitions in communities across the U.S. and beyond.\n‚ÄúWe extend our heartfelt gratitude to GitLab for their invaluable partnership with SuitUp in 2023. GitLab‚Äôs commitment to youth education has not only paved a clear pathway for our students‚Äô success, but has opened abundant opportunities for their development in STEM careers and beyond. We are deeply thankful to the GitLab team for their dedication and the transformative impact they have had on the lives and futures of our SuitUp students across the globe.‚Äù\n‚ÄìKelsey English Smith, SuitUp‚Äôs Interim Chief Executive Officer\nGitLab Foundation\nGitLab is dedicated to supporting charitable organizations with missions that align with our company‚Äôs values through the GitLab Foundation. Established in 2022, the GitLab Foundation focuses on supporting people to grow their lifetime earnings through education, training, access to opportunities, and systems change on a global scale. Its vision is a world in which one million more people can afford a better life.\nThe GitLab Foundation is funded by GitLab and its co-founder, Sid Sijbrandij. When GitLab went public in 2021, the Board approved a 1% share donation to capitalize the GitLab Foundation. In FY24, 1,635,545 shares of Class A common stock were registered to be issued to the GitLab Foundation.\nThe GitLab Foundation is an independent nonprofit entity and its operations are autonomous from GitLab. To learn more, please visit the\nGitLab Foundation\n.\nEnvironment\nClimate Action and Greenhouse (GHG) Emissions\nAround the world, many communities are already experiencing climate impacts such as warmer temperatures, more frequent severe weather events, and changes in water availability and other vital ecosystem services. With this in mind, GitLab is committed to doing our part to minimize our environmental footprint, including working to reduce GHG emissions associated with our operations.\nAs a fully remote company, GitLab has no Scope 1 (direct) emissions or Scope 2 emissions from purchased electricity for company-owned facilities, meaning that 100% of our footprint comes from Scope 3 emissions. Our FY24 GHG inventory measures emissions associated with purchased goods and services (which includes cloud services), capital goods, employee commuting (which includes remote work), business travel, and investments (as defined under Category 15 of the GHG Protocol).\nOur emissions increased in FY24 partially due to improvements in our methodology. For FY24, we estimated emissions using the Comprehensive Environmental Data Archive (CEDA), a multi-regional economic and environmental database, as it better reflects the global nature of supply chains, helping capture differences in emissions profiles that vary significantly from one country to another. We also expanded our measurement to include emissions from investments (as defined under Category 15 of the GHG Protocol).\nMore detailed results of our inventory are available in the\nPerformance Data Table\n. Our third-party assurance letter of our FY24 GHG inventory is available\nhere\n.\nIn FY24, we took steps to further understand our climate impacts and advance the development of a formal emissions reduction strategy. This included initiating GitLab‚Äôs first climate risk assessment, to help us better understand climate-related risks and opportunities for our business. For more information on our climate risk assessment and scenario analysis, please see our\nTCFD Index\n.\nIn FY24, we also launched a supplier engagement program with a focus on climate. As an initial step, we engaged our top 20 suppliers by spend who are not currently disclosing emissions data, asking them to start measuring their emissions and sharing the data publicly. We will be expanding the scope of the engagement to include more suppliers in FY25.\nIn FY25, we will continue working to establish GHG emissions reduction targets. We have also launched the first iteration of a team member\nsustainability guide\nwith the goal of educating GitLab team members on how to be more sustainable.\nIn January 2024, GitLab purchased and retired carbon removal credits worth 8,580 tonnes of CO2e. The purchase funds a reforestation program called Trees for Global Benefits, a long-running cooperative carbon offsetting program that combines community-led activities to increase carbon sequestration, encourage sustainable land-use practices, and provide farmers with performance-based payments. We also retired additional credits worth 877 tonnes of CO2e that were purchased in FY23.\nGovernance\nCorporate Governance\nGitLab is strongly committed to good corporate governance practices, which provide an important framework within which our\nBoard\nand\nexecutive leadership\ncan pursue our strategic objectives for the benefit of our shareholders.\nThe Board‚Äôs duty is to serve as a prudent fiduciary for shareholders and to oversee the management of the company‚Äôs business. To fulfill its responsibilities and discharge its duty, the Board follows the procedures and standards set forth by GitLab‚Äôs\nCorporate Governance Guidelines\nand\nother governance documents\n.\nBoard members‚Äô responsibilities include:\nRisk oversight\nMonitoring the performance of the Chief Executive Officer (CEO) and other\nExecutive\nleaders\nGiving feedback on the\nmission\n,\nvalues\n, and strategy\nEvaluating if adequate resources are available to achieve our goals and that those resources are used effectively\nAdvocating for GitLab externally\nParticipating in\nBoard meetings\nParticipating on\nBoard committees\nThe Board has an Audit Committee, a Compensation and Leadership Development Committee, and a Nominating and Corporate Governance Committee. The composition and responsibilities of each committee are described in our\nProxy Statement\nand in the\nInvestor Relations section\nof our website.\nBoard committees oversee and review areas of risk that are particularly relevant to them based on their responsibilities and charters. GitLab‚Äôs management regularly provides reports to support the Board‚Äôs oversight obligations. This reporting cadence provides visibility and information regarding the identification, assessment, and management of critical risks and the company‚Äôs risk mitigation strategies.\nThe\ncharter\nof the Nominating and Corporate Governance Committee tasks the committee with assisting the Board in overseeing company programs relating to corporate responsibility and sustainability, including ESG matters. GitLab‚Äôs Senior Director, ESG, reports to the Chief Legal Officer (who is also the Head of Corporate Affairs and Corporate Secretary) weekly and to GitLab‚Äôs executive leadership as needed. The Nominating and Corporate Governance Committee meets at least twice per year and ESG topics are discussed with this committee as well as with the full Board as needed.\nInformation Security and Data Privacy\nAt GitLab, we recognize that to maintain trust and deliver the world‚Äôs leading DevSecOps platform, security and privacy must remain our top priorities. Our information security and privacy practices reflect our dedication to safeguarding customer data and building security into the core of our product and our company.\nSecurity Assurance\nThe GitLab\nSecurity Division‚Äôs\nmission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. As part of this mission, the\nSecurity Assurance\nDepartment is responsible for monitoring and reporting on GitLab‚Äôs compliance with various security frameworks and standards and for providing GitLab customers with a high level of assurance around the security of GitLab Cloud Services, which is comprised of GitLab.com and GitLab Dedicated.\nTo help ensure that user information is protected, we employ a range of administrative, technical, and physical security controls. For more information on our security practices, please see our\nTechnical and Organizational Security Measures\nfor GitLab Cloud Services.\nWe maintain various security certifications covering GitLab Cloud Services, including ISO/IEC 27001:2013, ISO/IEC 27017:2015, and ISO/IEC 27018:2019. In FY24, we expanded our compliance portfolio to include a SOC 2, Type II report for GitLab Dedicated and added TISAX AL-2 certification for GitLab Cloud Services.\nIn January 2024, we enhanced customer access to assurance resources with the launch of the updated GitLab\nTrust Center\n. The Trust Center provides a single, unified location for communicating our compliance and assurance credentials, hosting our security and privacy documentation for customer consumption, sharing important notices, and hosting our internal knowledge base where customers can readily access the same answers we provide in questionnaire responses. This self-service approach not only provides customers with increased visibility of critical information but also enables them to accomplish security and risk reviews quickly and efficiently.\nCybersecurity\nGitLab‚Äôs cybersecurity program was designed in alignment with industry standards and recognized best practices to identify, assess, and manage material risks from cybersecurity threats. Identified risks are assessed for criticality, prioritized for remediation, and reported by GitLab‚Äôs security teams to various levels of our management. Our global incident response team iteratively evaluates security events for impact, using both qualitative and quantitative factors. Security incidents that are assessed as potentially material are escalated to designated members of our senior management and Board, as applicable.\nOur security program also accounts for potential cybersecurity risks associated with third parties with whom we do business. These risks are continually assessed throughout the vendor lifecycle, from onboarding to offboarding. We also engage in continuous monitoring of our cybersecurity risks and perform security assurance activities via independent, external third parties such as consultants, auditors, and assessors during our robust security certification audits, penetration tests, and bug bounty programs.\nThe Audit Committee has oversight responsibility for risks and incidents relating to cybersecurity threats, including compliance with disclosure requirements and related effects on financial and other risks, and it reports any findings and recommendations, as appropriate, to the full Board for consideration. Management is responsible for and regularly discusses identifying, assessing, and managing material cybersecurity risks on an ongoing basis through programs led by the Chief Information Security Officer, the Chief Legal Officer, and the Chief Financial Officer.\nFor more information, see our FY24\nForm 10-K\nand our GitLab\nTrust Center\n.\nData Privacy\nGitLab is fully committed to protecting the personal data of its customers, team members, suppliers, and other stakeholders in accordance with global comprehensive data privacy laws. We take the privacy of personal data very seriously and have initiated a variety of methods and controls so that we know what data we collect and hold and that it is protected appropriately.\nOur\nPrivacy Statement\nprovides details on how we collect, share, use, and protect personal information and on the choices that customers and users have regarding their personal data. Users also have the right to access, correct, restrict, or delete personal data and to port personal data to another company. Although legal and regulatory requirements related to data privacy may vary by jurisdiction, GitLab provides users with the same rights and choices no matter where they live. For more information on our privacy practices, see our\nPrivacy Statement\n.\nThe\nPrivacy Team\n(part of GitLab‚Äôs Legal and Corporate Affairs Team) provides support and guidance to uphold consistent business processes around the protection of personal data. Privacy Team members collaborate cross-functionally and serve as advocates to ensure that the data privacy practices of GitLab meet the needs of our cross-functional partners and are continually balanced with an ever-changing global data privacy and protection landscape.\nThe GitLab\nData Classification Standard\ndefines data categories and provides a matrix of security and privacy controls for the purposes of determining the level of protection to be applied to GitLab data throughout its lifecycle.\nAs part of our commitment to privacy, GitLab ensures that, where appropriate, projects and personal data processing activities are subject to Privacy Reviews and a\nData Protection Impact Assessment\n(DPIA) as key components of a ‚ÄòPrivacy by Design‚Äô approach.\nResponsible Product Development\nGitLab‚Äôs\nproduct mission\nis to consistently create products and experiences that users love and value. We believe this includes our responsibility to\ndesign inclusive products\nthat aim to provide access to content and functionality that enables consumption and contribution from everyone. Our\nproduct principles\nguide us in developing products consistent with the approach of other world-class product organizations.\nWe strive to set an example by empowering our wider GitLab community to build and work with the highest levels of security through our DevSecOps platform. This extends to how we are incorporating artificial intelligence (AI) and continuously evolving the platform to enable secure, responsible development.\nResponsible AI\nGitLab is dedicated to responsibly building artificial intelligence (AI) into and throughout our comprehensive DevSecOps platform. We offer GitLab Duo, a\nfull suite of AI capabilities\nacross the GitLab platform so that our customers can ship better, more secure software faster. GitLab Duo follows a privacy- and transparency-first approach to help customers confidently adopt AI while keeping their valuable assets protected.\nAs we work to integrate new AI-powered features into the platform, we do not simply adopt the latest advancements for their own sake. Instead, we take a strategic,\nintentional approach\n, ensuring that the features we add have a clear purpose, appropriate controls, and safeguards to protect users‚Äô data. This includes a\npolicy\nnot to use customers‚Äô or users‚Äô AI inputs to train any language models without their instruction or prior consent.\nIn early 2024, we launched the GitLab\nAI Transparency Center\nto enable our customers to confidently unlock the enormous potential of AI and emphasize our customer-centric approach to responsible AI development and deployment. The AI Transparency Center currently includes GitLab‚Äôs\nAI Ethics Principles for Product Development\n,\nAI Continuity Plan\n, and\nAI features documentation\n. The principles and policies in our AI Transparency Center govern how we responsibly select AI models to use based on an extensive model evaluation process. The launch of the center was a cross-functional effort led by the Legal and Corporate Affairs (LACA) team in partnership with the Product, Security, and Marketing teams.\nSecurity and Governance\nOur commitment to responsible product development also encompasses how we support customers in ensuring security and responsibility throughout the software development lifecycle. GitLab‚Äôs security and governance capabilities include a wide range of controls, such as automatic scanning of project dependencies for security vulnerabilities, license compliance, and other risks; vulnerability management and security scanning; security and compliance policies; and comprehensive anti-abuse tools. In FY24, we introduced several enhancements, including support for\ncustom roles\n, expanded security\npolicies\n, improved security scanner accuracy, and support for\ngroup-level dependency lists\nfor centralized dependency management.\nContinuous Integration and Delivery\nThe incorporation of end-to-end\ncontinuous integration and delivery\n(CI/CD) features in GitLab supports the default integration of best practices, empowering users to focus on developing code with speed, security, and quality in mind. This includes automated code testing capabilities that make software development easier, faster, and less risky for developers.\nIn FY24, we continued to enhance GitLab‚Äôs CI/CD offering with new features such as\ncomponents\n, preconfigured CI/CD files that automate the process of building, testing, and deploying software applications, and\nexpanded runner machine types\nto enable faster CI/CD pipelines. We also improved key GitLab features such as\nvariables\nand\nsecrets\n, helping users make more informed decisions about their data and application security while also supporting the best practices in design and secure workflows.\nBusiness Ethics\nGitLab is committed to the highest standards of legal and ethical business conduct. It has long operated its business consistent with operating principles and policies that reinforce this commitment. GitLab complies with all laws and regulations that are applicable to its activities and expects all team members to adhere to our ethical standards and legal and regulatory obligations. These expectations are reflected and reinforced by our\nCode of Business Conduct and Ethics\n(‚ÄúCode of Conduct‚Äù) and various supporting\npolicies, procedures, and other resources\n(collectively, ‚ÄúCompliance Standards‚Äù).\nIn FY24, we centralized our compliance efforts. The\nEthics and Compliance Program\n, is designed to help GitLab team members maintain its culture of compliance and to promote ethical decision-making by:\nEnsuring that Compliance Standards are current, easy to find, and widely available to team members;\nMonitoring the regulatory landscape for developments and updating our policies, as necessary, to maintain compliance with applicable laws and regulations;\nEducating our team members on our policies and reporting avenues through training, awareness initiatives, and other outreach efforts;\nProviding guidance and resolving related inquiries involving, for example, conflicts of interests and gifts and entertainment; and,\nEncouraging and facilitating appropriate risk assessment, due diligence, and remediation to deter, detect, and address unlawful, unethical, and discriminatory conduct.\nBoard Oversight\nThe Board, through its Audit Committee, is responsible for administering the Code of Conduct, and for addressing material issues and risks concerning Compliance Standards and applicable laws and regulations. The Audit Committee has delegated day-to-day responsibility for administering and interpreting the Code of Conduct to GitLab‚Äôs Chief Legal Officer.\nTeam Member Responsibilities\nEach team member is responsible for reading, understanding, and ultimately complying with GitLab‚Äôs Compliance Standards. Team members are expected to deal honestly, ethically, and fairly with customers, partners, suppliers, competitors, and other third parties. GitLab expressly prohibits team members from violating applicable laws and regulations, and any team member who does so may face disciplinary action, up to and including dismissal (subject to local law). To memorialize and reinforce GitLab‚Äôs expectations, we require each team member to review and acknowledge our Code of Conduct on an annual basis.\nTeam members are educated on GitLab‚Äôs policies and procedures and related laws and regulations through continuous training, both at onboarding and throughout the year, and awareness campaigns. Team members are encouraged to ask questions about our policies and seek guidance when necessary through various avenues, including a Slack channel dedicated to ethics and compliance.\nReporting of Concerns and Violations\nGitLab strives to foster a work environment in which ethical issues and concerns may be raised and discussed with supervisors or others without\nfear of retribution\n. If a team member becomes aware of a suspected or actual violation of law, regulation, or GitLab Compliance Standards, they have a responsibility to promptly report their concern in accordance with GitLab‚Äôs Whistleblower Policy and Code of Conduct.\nGitLab offers team members a variety of ways to report suspected or actual violations. Team members may raise their concerns orally or in writing to their direct supervisor or manager, to GitLab‚Äôs Chief Legal Officer, or to the Audit Committee.\nAt any time, team members may also submit reports using EthicsPoint, a GitLab-provided tool that is available 24 hours a day and allows for anonymous reporting about conduct addressed in the Code of Business Conduct and Ethics. Reports to EthicsPoint can be submitted using a toll-free hotline or through the EthicsPoint\nwebsite\n. In addition to EthicsPoint, GitLab has engaged\nLighthouse Services\nto provide an anonymous hotline for team members to submit reports involving team member relations.\nGitLab treats all reports seriously. Notification of reports submitted via EthicsPoint is automatically provided to the Chief Legal Officer and Chairperson of the Audit Committee and those reports are promptly and thoroughly investigated by qualified personnel at the direction of the Chief Legal Officer, as appropriate. Reports involving team member relations are reported to the People Group team.\nPartner Ethics\nGitLab‚Äôs commitment to legal and ethical conduct extends to its suppliers, contractors, resellers, agents, and consultants (collectively,  ‚ÄúPartners‚Äù). GitLab expects all Partners, their employees, sub-suppliers, and any other party involved in the execution of GitLab work to comply with all applicable laws, regulations, and the standards set forth in GitLab‚Äôs\nPartner Code of Ethics\n, which includes standards relating to ethical conduct, including human rights and labor, health and safety, bribery and corruption, environmental impacts, and more.\nAppendix\nGRI disclosures\nSASB disclosures\nTCFD disclosures\nPerformance Data Tables\nContact\nFor questions regarding GitLab‚Äôs ESG report and data, please contact\nESG@GitLab.com\n.\nForward-Looking Statements\nThis report contains forward-looking statements within the meaning of the federal securities laws. These statements involve assumptions and are subject to known and unknown risks and uncertainties that could cause actual results to differ materially from those discussed or anticipated. For a complete discussion of risk associated with these forward-looking statements in our business, please refer to our SEC filings, including our most recent quarterly report on Form 10-Q and our most recent annual report on Form 10-K.\nOur forward-looking statements are based upon information currently available to us. We caution you to not place undue reliance on forward-looking statements, and we undertake no duty or obligation to update or revise any forward-looking statement, or to report any future events, or circumstances or to reflect the occurrence of unanticipated events.\nAdditionally, this presentation contains information related to upcoming features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned during the presentation are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab.\nPrevious ESG Reports\nFY23 ESG Report\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 8246}
{"doc_id": "b26303113a711f22", "url": "https://handbook.gitlab.com/handbook/support/license-and-renewals/workflows/customersdot/customerdot_account", "title": "CustomerDot Account Related Problems | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nLicensing & Renewals\nLicensing & Renewals Workflows\nCustomersDot\nCustomerDot Account Related Problems\nUsing the customer console for internal requests is only for special cases where the existing tools won‚Äôt allow us to complete the task at hand.\nOverview\nSometimes customers have trouble accessing their account.\nCustomersDot email and password log in has been deprecated.\nCustomers can instead\nfollow these steps\nto log in using a one-time sign-in link.\n1. Customer cannot sign in even after password reset\nThis could be because the password reset email was requested from\nhttps://\ngitlab.com\n/users/password/new\n.\nWe can confirm this by searching through the mailgun log. To locate the password reset email:\nLog in to Mailgun using your account\nOn the left panel, expand\nSending\nand go to\nLogs\nOn the top left, click the\nDomain\ndropdown and choose\nmg.gitlab.com\ndomain to confirm that the password reset email was requested on GitLab.com.\nIf the customer is unable to log in using their GitLab.com account, request them to log in using a\none-time sign-in link\n.\n2. The CustomersDot account has not been confirmed\nWhen the account is not confirmed, the customer cannot log in. To view whether an account is confirmed:\nSign into CustomerDot with your admin account\nFind the customer account\nClick on the\ni\nicon on the customer account or\nShow\nif you‚Äôre already viewing the account\nThe confirmation is shown in\nConfirmed at\nfield\nIf the customer has not confirmed their email/account, we can resend the confirmation email using\nthis form\nand get back to the customer.\n3. The customer is trying to sign in using another email address\nSituations may arise where a customer has used a different email address for their\ncustomers portal\naccount and their GitLab.com account. It may also be possible that a customer has signed up more than once using different email addresses (e.g.\nfirstname_lastname@organization.com\nand\nfirstname.lastname@organization.com\n). In scenarios such as these, please explain the differences to the customer, and clarify which email address they used for their GitLab subscription.\n4. Unlinked CustomersDot account\nLet‚Äôs say a Customer X has an existing Customers Portal account with their email\ncustomerX@example.com\neither because:\nThey had a legacy Customers Portal account that was manually created before GitLab SSO was enforced\nOr their account was created as part of a sales assisted purchase\nüîß Customer X needs to log in to their\nCustomers Portal\naccount using a\none-time sign-in link sent to their email\nand\nlink their GitLab account\n5. Unlinked CustomersDot account for purchases via Sales\nLet‚Äôs say a Customer Y purchases a subscription through Sales. Their signed Order Form has the\nSold To\ncontact‚Äôs email as\ncustomerY@example.com\n.\nOnce the Quote is processed, Zuora‚Äôs\ncallout service\ntriggers an account creation on Customers Portal. This service uses the\nSold To\ncontact‚Äôs details to create the account.\nFor various reasons, the created Customers Portal account is not linked to a GitLab account.\nFor example:\nThe subscription has not yet been applied to a group.\nSupport used\nCustomersDot Support Admin Tools force associate workaround\nto bypass the need to have a linked GitLab account to apply a subscription and the customer never linked their GitLab account.\nüîß Customer Y needs to log in to their\nCustomers Portal\naccount using a\none-time sign-in link sent to their email\nand\nlink their GitLab account\n.\n6. Linked accounts have different emails\nLet‚Äôs say a Customer Z has an existing Customers Portal account (\ncustomerZ@example.com\n) either from an existing purchase or by creating a new account.\nAnd this Customers Portal account has been linked to a GitLab account (check the\nGitLab Groups\ntab) whose email is\ngitlabZ@example.com\n.\nThis could be someone else‚Äôs GitLab account or Customer Z might have multiple GitLab accounts or multiple emails in their GitLab account.\nüîß Customer Z needs to log in to their\nCustomers Portal\naccount and either:\nChange the linked GitLab account\nto the GitLab account with email\ncustomerZ@example.com\nOr update the email in their Customers Portal account to match the email in the linked GitLab account, which is\ngitlabZ@example.com\n.\nBecause we try to keep the CustomersDot account email with GitLab account email have a one-to-one mapping, consider offering the addition of multiple CustomersDot accounts to the customer‚Äôs billing account.\nIn this case, we can recommend the following steps:\nUnlink the GitLab account whose email is\ngitlabZ@example.com\nfrom the CustomersDot account whose email is\ncustomerZ@example.com\n.\nThe customer should then create a CustomersDot account using the GitLab account whose email is\ngitlabZ@example.com\n.\nWe add the new CustomersDot account whose email is\ngitlabZ@example.com\nto the billing account.\nAdditionally, the customer can also create a GitLab account with the email\ncustomerZ@example.com\nthen\nlink it to the CustomersDot account whose email is\ncustomerZ@example.com\n.\nLast modified May 23, 2025:\nAdd cdot admin support tools (\n87516458\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 813}
{"doc_id": "7dfcace3dc05ea2d", "url": "https://handbook.gitlab.com/handbook/people-group/celebrations", "title": "New Hires, Celebrations and Significant Life Events | The GitLab Handbook", "text": "The Handbook\nPeople Group\nNew Hires, Celebrations and Significant Life Events\nReview different ways GitLab celebrates its team members.\nNew Hire Swag\nAs a new hire at GitLab, you will be getting a customized welcome package! On your date of hire you will receive an\nemail\nto claim the package with a redemption link. Then simply enter your shipping information to have your welcome swag shipped directly to you.\nNew Parent Swag\nWelcoming a new child into your family is an exiting life event that GitLab wants to help celebrate. New parents will receive a swag bundle that includes a teething ring, baby socks, plush tag blanket, adult socks, baby bib and baby blanket (all GitLab branded). The Absence Management team will mail the gift to the team member. There is no action required by the team member or their manager. Gifts are ordered on a weekly cadence, although time to ship and customs can vary depending on the country. For questions related to new parent swag, please email\nleaves@gitlab.com\n.\nCelebrations\nGitLab Anniversary\nAt GitLab we like to acknowledge and celebrate team member milestones and contributions. This means that those celebrating their first, third, fifth and tenth hire-date anniversary will receive a token of acknowledgement.\nAlong with this, all celebrants regardless of length of tenure will receive a mention in the\n#team-member-updates\nchannel which allows the greater GitLab community to share in the celebration!\nAnniversary Gifts\nTeam members celebrating a GitLab anniversary will have the option to select a custom swag item only available to those celebrating an anniversary. Team members celebrating their one-year anniversary have the option to receive a custom GitLab Tech-Caddy. Those celebrating their three-year anniversary have the option of a branded 3-piece tumbler, pen and notebook set. Folks celebrating their five-year anniversary have the option of a GitLab branded computer backpack. And finally, team members celebrating their tenth-year anniversary have the option of receiving a custom swag package.\nNo action is required by team members in order to receive these gifts! If you are due an anniversary gift the vendor team, Brilliant, will email you at the beginning of the following month that you are celebrating your anniversary with a specific redemption link. The People Operations team runs a monthly report from Workday looking back to the previous month to identify the eligible team members and share this with the swag vendor.\nRedeeming New Hire Swag and Anniversary Swag\nPlease note: the New Hire and Anniversary Swag links are provided specifically for the redemption of preselected items. These items are not eligible for exchange or conversion to swag shop credit.\nIf you have any questions or need further assistance regarding New Hire or Anniversary Swag, please don‚Äôt hesitate to reach out to the People Operations team via\nHelpLab\n.\nTeam Member Birthdays\nGitLab encourages team members to take a day of vacation on their special day in alignment with our\nPaid Time Off Policy\n. If your celebration happens to fall over a weekend please be sure to take an alternate day such as the Friday prior or the Monday after.\nTeam Member Retirement\nRetirement marks the end of decades of working life and is a significant life event. Celebrating a team member‚Äôs retirement is an opportunity to acknowledge their career and express appreciation for their contributions. You may organize a virtual farewell gathering or\nan E-Card\nwhere team members can share memories and express best wishes as they embark on this new chapter.\nTeam Member Gifts and Flowers\nFor questions on our policy and how to submit your Team Member Gift and Flower expenses, including which categories to use in Navan, please refer to the\nGlobal Travel and Expenses handbook page\n.\nPlease note: The intended recipient will need to provide their residential address directly for the purposes of flower / gift delivery - personal information may not be disclosed without team member consent.\nRecommended sites:\n1-800 Flowers\nFlora Queen\nSending an E-Card\nAnother nice way to celebrate someone, express your appreciation or show support to a team¬†member is by creating an e-card and having team members sign the card via DocuSign. Have fun with this, get creative when making the card using google docs, google slides or a program of your choice.\nAn example can be found\nhere\n.\nOnce you have your card created:\nUpload the document to DocuSign\nOnce uploaded, assign signatures to those individuals that you would like to sign and then send the request to those individuals\nWhen an individual has signed you will get an email notification\nAfter you have all of your signatures then download the document from DocuSign\nSlack or email the card to the recipient\nRecommended sites:\nElla Cards\nKudoboard Cards\nLast modified July 8, 2025:\nPeople Connect to People Operations Updates (\nfacc4002\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 808}
{"doc_id": "c9f064743d382f84", "url": "https://handbook.gitlab.com/handbook/company/vision", "title": "GitLab Vision | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Vision\nBehind the scenes of The DevSecOps Platform\nVision\nOur vision captures what we want to deliver to customers in the next 10 years.\nOur current vision is available to GitLab team members in the internal handbook.\nThe remainder of this page includes details about GitLab‚Äôs approach to long-term planning.\nCadence\nOur\nMission\nis on a 30-year cadence. It is the inspiration for this company vision, which is on a\n10-year cadence\n.\nThe vision here is reflected in our company strategy, which is on a 3-year cadence. You can find additional product vision details on our\ndirection page\n.\nMonitoring an evolving market\nWhile we define our mission, vision, and strategy, we also acknowledge that we need to adapt with a changing market to meet customer needs. Netflix is a great example of this. Everyone knew that video on demand was the future. Netflix, however, started shipping DVDs over mail. They knew that it would get them a database of content that people would want to watch on demand. In other words, timing is everything.\nAdditionally, we must ensure that our Platform is open. If a new, better version control technology enters the market, we will need to integrate it into our platform, as it is one component in an integrated DevSecOps product.\nEntering new markets\nGitLab\nhas taken existing, fragmented software tooling markets, and by offering a consolidated offering instead, have created a new\nblue ocean\n. We would like to find more markets where we can repeat this same model.\nThe desirable characteristics of such markets fall into two stages: category consolidation and creation.\nCategory Consolidation\nA set of customer needs that are currently served by multiple, independent software tools.\nThose tools may already integrate with each other or have the possibility of integration.\nThose tools operate in categories that are typically considered discrete (for example, with GitLab, SCM was one market and CI was another).\nThere is no current ‚Äòwinner‚Äô at consolidating this market, even if there are some attempts to combine some of the tool categories within said market.\nUsers of the product are able to contribute to it ‚Äî for example, with GitLab, many users are software developers who can directly contribute code back to the product itself.\nWhen initially combined, the categories form a consistent and desirable user flow, which solves an overriding customer requirement.\nWe can offer a consolidated toolchain that is more cost effective for customers than purchasing, running, and integrating each tool separately.\nWe can do so profitably for the company.\nCategory Creation\nBy combining categories, a new overriding category, or market, gets created: the consolidated toolchain.\nThe sum of the categories combined should have desirable\n, such that entering the market means entering on a growth curve.\nNot all of the individual categories need to be on the upward curve of the\ntechnology adoption lifecycle\n(TAL). It is, however, necessary that there are enough future categories with high CAGR that are early in their adoption lifecycle.\nThe ideal overlap of the TALs is that the peaks of the curves are as close to each other as possible, so that when one TAL moves to Late Majority, the next TAL is still curving upwards. This allows it to provide an organic growth opportunity for the company in the markets it is entering.\nOur goal is to develop this model to be more quantifiable and formulaic, so that we can quickly and easily assess new opportunities.\nMitigating Concerns\nWe acknowledge the concerns to achieving our goals. We document them in our\nMitigating Concerns page\n.\nTake GitLab for a spin\nSee what your team could do with The DevSecOps Platform.\nGet free trial\nHave a question? We're here to help.\nTalk to an Expert\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 647}
{"doc_id": "373816db39230e81", "url": "https://handbook.gitlab.com/handbook/support/license-and-renewals/workflows/working_internal_requests", "title": "Handling L&R Internal Requests | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nLicensing & Renewals\nLicensing & Renewals Workflows\nHandling L&R Internal Requests\nDescribes how to service internal requests for licensing & renewals.\nServicing Internal Requests\nChoose the best\nL&R Workflows\nwhen servicing L&R internal requests. L&R Internal Requests can be found in the ‚ÄúL&R‚Äù View in Zendesk.\nThe L&R team works on licensing and subscription related internal requests that are filed by GitLab team members using the\nGitLab Support Internal Request form\n.\nUse the\nSupport::L&R::Sales Internal Request - Office Hours Notice\nmacro in either your first or last response in the ticket to increase awareness of the regional office hours hosted by the L&R team.\nA list of the different options available and example scenarios can be found in\nthis section\n. Click for details.\nOrder Management\nNote:\nTeam members who are part of Sales or another team should NOT use the\nOrder Management\noption as the request will be rejected.\nThe Order Management team\ndetermines whether a license has been fulfilled automatically after opportunity closure, and if not, work with Support Engineering to ensure manual fulfillment by filing an internal request with the\nOrder Management\noption as defined in\nthis issue\n.\nThe\nOrder Management\noption is therefore used to request manual license fulfillment, specifically for scenarios where a license has not been generated or sent automatically.\nThe requestor would ideally provide more information in the additional context field on whether a license was not found or the license exists but needs to be resent. The Support Engineer handling the ticket would follow the appropriate workflow according to the request in the ticket.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 288}
{"doc_id": "2e4aacc246dde179", "url": "https://handbook.gitlab.com/handbook/sales/field-operations/field-enablement/sales-manager-best-practices", "title": "Sales Manager Best Practices | The GitLab Handbook", "text": "The Handbook\nSales\nField Operations\nField Enablement\nSales Manager Best Practices\nSuccessful management includes onboarding, reviewing Command Plans, opportunity coaching, strategic coaching, career development and performance management\nOnboarding New Team Members\nSuccessful onboarding plays a critical role in getting your team member on the path to success! Before a new team member joins, please review the onboarding process so you know what to expect and can help set expectations with your new hire!\nThe onboarding page\nhas a lot of great resources including links to the\nSales specific onboarding issue\n.\nFor more information on the onboarding process, please feel free to check out the Onboarding Education Session and AMA we had with Sales leaders on June 3, 2020:\nReview Account Plans\nRegularly review account plans with your team. Quarterly reviews of the account plan(s) are recommended. For more information, review the\nAccount Planning Coaching\npage.\nReview Command Plans\nRegularly review an aggregate of your team‚Äôs Command Plans in this\nSalesforce Report\n. This will allow you to scan your team‚Äôs progress on both a macro and micro level and identify possible information gaps or obstacles that can hinder an opportunity.\nOpportunity Coaching\nCheck out the\nOpportunity Consults Handbook page\nRegularly leverage the Command of the Message and MEDDPPICC\nSales Manager Materials\n(internal only).\nStrategic Coaching\nCelebrate your wins and socialize success stories to help with motivation across teams\nContinue to leverage your fellow managers for feedback and input on what is working well\nLead with ‚ÄúWhy‚Äù in team and 1:1 rep discussions (GitLab has done a good job of explaining ‚ÄúWhy‚Äù for GitLab organizationally, but managers will want to ensure that daily interactions lead with ‚ÄúWhy‚Äù for teams and individual reps)\nEnable partner sellers to jointly run deals leveraging Command of the Message and MEDDPPICC\nConduct Command of the Message and MEDDPPICC refresh sessions covering 1-2 slides/tools per week\nCareer Development\nLeverage GitLab‚Äôs\nCareer Development\nresources\nPerformance Management\nPerformance Assessment and Succession Planning\nPerformance Management Overview for Sales Managers\n(May 2020, 18 minutes, private)\nLeadership Handbook\nFor additional leadership resources, check out the\nLeadership handbook\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 364}
{"doc_id": "08a96a443ad56d37", "url": "https://handbook.gitlab.com/handbook/people-group/talent-assessment", "title": "Talent Assessment | The GitLab Handbook", "text": "The Handbook\nPeople Group\nTalent Assessment\nOverview of three critical pieces of GitLab‚Äôs talent development program: performance, growth potential, and key talent.\nPurpose\nThe purpose of the Talent Assessment Program is to identify and retain team members who drive the success of our organization. This is a top priority and strategic process for people managers at GitLab. Our Talent Assessment Program (which is a critical piece of our overall\nTalent Development Program\nserves as a mechanism to help mitigate a couple of our biggest concerns:\nlack of performance management\nand\nlosing key people\n.\nAdditional key benefits of the Assessment Program include:\nHelp facilitate career development conversations (and ensure they‚Äôre occurring regularly)\nEnsure transparency and ongoing feedback between team members and their managers\nDiscuss promotion readiness and plan promotions\nSuccession planning\nIncrease awareness of top talent across departments (during calibration sessions)\nOverview\nWe use Workday to complete our Talent Assessment. You can review an overview of Workday Talent\nhere\n. Please reach out to your\nPeople Business Partner\nif you have any questions.\nYou can also review the following\nguide\nwhich mirrors what is included in the Workday Talent Assessment template to prepare you prior to the tool being launched.\nThere are many talent assessment options, and we have opted to use a Performance/Growth Potential Matrix (commonly known as ‚Äú9-Box‚Äù in the US) and annually review Key Talent.\nGitLab‚Äôs Performance/Growth Potential Matrix is a type of talent assessment that forms part of our\nTalent Development Program\n.\nThe FY25 talent assessment should consider performance from the period FY25Q1 - FY25Q4\nFor team members with a tenure up to three months to the launch of the Talent Assessment Program will be designated as ‚ÄúToo New to Rate‚Äù. Also in some cases a ‚ÄúToo New to Rate‚Äù designation might be applicable for newly promoted or transferred team members. More about that designation can be found below.\nThe Performance/Growth Potential Matrix\nPerformance ‚Üë\nGrowth Potential ‚Üí\nDeveloping Growth Potential\nGrowing Growth Potential\nExceeding Growth Potential\nExceeding\nBox 5\nTeam member is consistently surpassing performance expectations in their current role but needs to continue to grow in current role, or has not exhibited the willingness or ability to grow in the current role.\nBox 2\nTeam member is consistently surpassing performance expectations in their current role, makes valuable contributions and consistently demonstrates competencies required. They have shown willingness and/or ability to further grow in their role and they may be ready to take on additional responsibilities in the next 12 months.\nBox 1\nTeam member is developing faster than the demands of their current position and/or division. Team member has been given additional assignments and has demonstrated high-level commitment/achieved significant results. Team member is ready to broaden their skill set and take on significantly greater scope and responsibility.\nPerforming\nBox 7\nTeam member is currently meeting expectations of their role, and/or team member is not willing or able to absorb greater scope, impact or complexity.\nBox 4\nTeam member is currently meeting expectations and has shown willingness or ability to further grow; may not be ready to absorb greater scope, impact or complexity in the next 12 months.\nBox 3\nTeam member is contributing as expected and is meeting performance expectations. They have shown willingness and/or ability to further grow in their role and they may be ready to take on additional responsibilities in the near future.\nDeveloping\nBox 9\nTeam member is not meeting performance expectations and there is still more to learn in the current position,\nor\n, team member has not been in the position long enough (promotion, new to the role, or new hire) to adequately demonstrate the pillars of growth potential for a sustained period of time.\nBox 8\nTeam member has not been in the position long enough to adequately demonstrate their capacity (promotion, new to the role, or new hire), or may have lost pace with changes in the organization. The team member has shown the willingness and/or ability to grow in the role aligned with the pillars of growth or has had opportunity to consistently demonstrate performance and growth potential.\nBox 6\nThe team member is not meeting the requirements of their current role, but has demonstrated willingness and ability to extend beyond scope once ramped, and/or is showing the willingness and ability to grow further with additional guidance or direction. The team member could be more successful in the current role with more direction/time to ramp, or in another role or department that more appropriately suits their skill set.\nThis matrix is an individual assessment tool that evaluates both a team members current contribution to the organization and their potential level of contribution.\nIt is commonly used in succession planning as a method of evaluation an organization‚Äôs talent pool, identifying potential leaders, and identifying any gaps or risks.\nIt is regularly considered a catalyst for robust dialogue (through a calibration process) and is considered more accurate than one person‚Äôs opinion.\nThe performance/growth potential matrix can be a diagnostic tool for career development.\nThe matrix serves as a tool to help managers assess, develop, and coach their team members - ultimately resulting in an ability to more effectively and efficiently lead teams.\nWhat is ‚ÄúPerformance‚Äù?\nPerformance includes both results and behaviors, and is broken into three areas: Developing, Performing, and Exceeding.\nDeveloping\nPlease note that\nDeveloping\nshould not be automatically associated with underperformance. As highlighted below,\nDeveloping\ncan also be used for new hires or newly promoted team members that are still ramping up in their new roles. Your manager will provide example and detail to ensure the rationale behind the\nDeveloping\nrating is communicated.\nBased on the Job Family responsibilities,\nvalues\nand\nremote working competencies\n, team members in this category are not meeting all of the expectations. There is still more to learn and improve on in the current position to achieve the desired results. This may be due to the following:\nThe team member has not been in the position/at GitLab long enough to adequately demonstrate performance.\nThe team member has been recently promoted and needs time to ramp up performance in the new role.\nThe team member may have lost pace with changes in the organization.\nThe team member is not committed to the job responsibilities and/or GitLab.\nThe team member finds it difficult to perform work in a way that is aligned with our values and/or competencies.\nThe team member‚Äôs performance is aligned to our values and competencies, however, they lack results for Job Family responsibilities.\nTeam member was part of a recent\ntransfer\nand is still learning how to be successful on their new team.\nExamples:\nThe team member needs a lot of guidance from the manager with the majority of tasks to understand requirements and deliverables expected.\nThe team member has not been in the position long enough to adequately demonstrate their capacity. For example, the team member was recently promoted or has changed roles and needs more time to ramp up.\nThe team member is missing important due dates which is affecting the team, GitLab and/or customers.\nThe team member still needs to adapt remote working best practices. For example, the team member does not manage their own time or work to achieve results or may have difficulty with asynchronous communication.\nThe team member lacks (a part of) the knowledge, skills and abilities which are required for the role, resulting in a low quality of work being delivered.\nThere is a significant mis-alignment (i.e. the team member struggles to collaborate with others, the team member does not work iteratively and key metrics are impacted, etc.)\nPerforming\nBased on Job Family responsibilities,\nvalues\nand\nremote working competencies\nteam members in this category are ‚Äúon track‚Äù and meeting all expectations. They can independently and competently perform all aspects of the Job Family responsibilities in a way that is aligned with our values and competencies. Their performance consistently meets the requirements, standards, or objectives of the job, and they can occasionally exceed expectations. They deliver results in a timely and accurate fashion. This performance may be expected as a result of:\nThe team member is consistent and stable in their performance.\nThe team member has the required knowledge, skills and abilities to perform in the role successfully and also applies values and competencies in their work.\nThe team member has adapted to remote working and their knowledge, skills, and abilities align seamlessly to their role at GitLab.\nExamples:\nTeam member is a dependable member of the team. Their manager can trust them to achieve key metrics.\nTeam member consistently works in accordance with our value and remote working competencies.\nWhile consistently meeting expectations, the team member does not regularly exceed expectations.\nTeam member does not frequently express interest in additional projects, responsibilities, or work outside of their immediate scope.\nThe team member is exemplifying our values in their work, but might have some competencies to improve on.\nExceeding\nTeam members that are exceeding consistently surpass the demands of their current position. They demonstrate unique understanding of work beyond the assigned area of responsibility. They contribute to GitLab‚Äôs success by adding significant value well beyond Job Family requirements,\nvalues\n, and\nremote working competencies\n. This performance may be expected as a result of:\nIndividual is developing more quickly than the demands of their current position.\nThey rise to the challenge when given additional assignments and achieve significant results.\nA ‚Äúgo-to‚Äù team member for their peers for tough problems and day-to-day guidance.\nHigh commitment and engagement to GitLab combined with extensive knowledge, skills, and abilities to perform in the role.\nExamples:\nConstantly seeks opportunities to improve both self and organization.\nThe team members exemplify great ways of giving and receiving feedback - incorporating this directly in their work.\nThe team members are ambassadors for the values, take full ownership of delivering projects, and very rarely miss due dates.\nPlease note that an\nExceeding\nassessment for the performance factor does not guarantee a promotion. While the performance factor is a consideration, there are several considerations that are reviewed when evaluating promotion readiness. Please work with your manager to align expectations.\nExpected Distribution Performance/Growth Potential Company-Wide\nNote that this is an expected distribution, not a forced distribution. The bell curve distribution aligns with what is most commonly used as a benchmark in the industry and serves as a baseline for us to review and calibrate against. There may be exceptions that are justified that can be discussed and reviewed during calibration. Where deviations from the expected distribution occur, managers should use this as a data point to further review and work with their leadership to ensure appropriate growth plans are in place, proper role fit exists, hiring plans are adjusted, that we are promoting at a fair and accurate rate.\nWe expect roughly ~5% of team members to be assessed as\nTNTR (Too New To Rate)\n.\nPerformance:\nDeveloping\n: 10%, not yet meeting all of the expectations\nPerforming\n: 60-65%, ‚Äúon track‚Äù and meeting expectations\nExceeding\n: 25%, consistently surpasses the demands of their current role\nGrowth Potential:\nDeveloping\n: 10%\nGrowing\n: 60-65%\nExceeding\n: 25%\nRemember that ‚ÄúDeveloping‚Äù for Performance and Growth Potential should not be automatically associated with underperformance, and that many newly promoted team members and new hires fall into this category.\nThe Performance Factor\nWhile the primary objective of the performance axis of the Performance/Growth Potential Matrix is to calibrate team member performance, this axis of the matrix also directly impacts the\nPerformance Factor\n, which is a determining factor in the annual compensation review. Please reference the\nTotal Rewards Performance Factor page\nfor more detail on compensation impact.\nMeasuring Performance\nHow can managers determine whether their team members are Developing, Performing, or Exceeding? ‚ÄúThe Performance Factor‚Äù is determined from several components outlined below. It is\noptional\nto use\nThe Performance Factor Worksheet\nfor weighing the different Performance Factors.\nJob Family Responsibilities and Functional Competencies\nPerformance against Job Family responsibilities, requirements, performance indicators, and functional competencies (if applicable) should be weighted at 60%.\nReview Job Families: Look at the Responsibilities section and how your team member is performing against those responsibilities\nExample:\nSoftware Engineer in Test\nReview Performance indicators per Job Family: Look at the Performance indicators.\nExample:\nSoftware Engineer in Test\n(if applicable)\nFunctional Competencies\nFor management roles, please also review and consider the\nlevels\noutlined in the Organizational Structure.\nGitLab Competencies\nPerformance against these competencies should be weighted at 40%.\nValues Competencies\nRemote Working Competencies\nJob Frameworks\n(If applicable)\nManager and Leadership Competencies\nWhen completing the talent assessment form, team members and managers should reflect on the applicable competencies and job frameworks when filling out the achievements, strengths, and opportunities section.  Given GitLab‚Äôs\nCREDIT values\nshould be lived, with each day representing a new opportunity to refamiliarize oneself with said values and strive to implement them in every professional interaction, there is an opportunity for team members and managers to rate how a team member demonstrates each of the CREDIT values.  The following rating scale is used for each value:\nRarely Demonstrated\n: team member demonstrates some of the sub-values associated with this value on an occasional basis.\nSometime Demonstrated\n: team member demonstrates most of the sub-values associated with this value on a regular basis.\nConsistently Demonstrated\n: team member demonstrates a large majority of the sub-values associated with the value in most interactions.\nUse the comment box at the end of the CREDIT values section to provide examples to support the ratings selected.\nWhat is ‚ÄúGrowth Potential‚Äù?\nWhile performance is focused on the past and present, growth potential is focused on the future. Because of the nature of the future-focus associated with growth potential, it is more difficult to measure than performance, and inherently more qualitative than quantitative. A key element in determining growth potential is the manager and leadership observation and experience working with team members. Managers can gauge team member growth potential against the expectations in their current role or their growth potential to take on different roles across GitLab.\nGrowth potential refers to the ability and desire of a team member to successfully assume increasingly more broad or complex responsibilities and learn new skills, as compared to peers and the roles‚Äô responsibilities outlined in their respective Job Family. This could include the growth potential to move up to the next level in their job family, and/or a lateral move.\nThe Growth Potential assessment helps managers determine the best growth trajectory for their team members. The growth potential assessment will be used as input to leverage our engagement tools, offer lateral and upwards career opportunities, and do succession planning.\nGrowth Potential\ncan change\nover time as team members develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities.\nMeasuring Growth Potential\nThere are four primary pillars to consider when measuring growth potential:\n‚ÄúGrowth Potential‚Äù Pillar\nDefinition\nAdaptability\nDemonstrating a willingness and ability to learn new skills and apply them to be successful under new, tough, or difficult conditions. Ability to navigate uncertainty and be flexible with change.\nExpandability\nExpandability outside their areas (laterally or vertically), with the willingness and ability to take on a role of greater complexity, impact, and scope.\nConsistency\nDemonstrating effective problem-solving capabilities, the consistent delivery of results over time in changing circumstances, and dependability in the commitments you make.\nSelf-Awareness\nThe depth to which an individual recognizes skills, strengths, weaknesses, blind spots, and is able to reflect and act to improve and invest in their own development. Judgment in decision-making is also a key element of self-awareness. Judgment can be seen through our level of self-awareness in several ways, including communication, collaboration, and results. Judgment can be defined as ‚ÄúThe ability to make considered decisions or come to well thought-out conclusions‚Äù, and to do this effectively, we need to have a heightened sense of self-awareness in terms of how our communication will come across and how decisions and conclusions drawn will impact others and their willingness to collaborate.\nUnder each pillar there are a few questions that managers should consider when assessing team member growth potential. Please note that the answer to all of these questions does not have to be\nyes\nto determine a team member is ‚Äúexceeding‚Äù growth potential, the questions are here to help guide managers through the thought and evaluation process.\nAdaptability\nDoes the team member adapt to change well? (i.e. realignments, management changes, company changes, etc.)\nDoes the team member seek to learn new skills to further succeed in their role?\nHas the team member demonstrated ability to learn new things effectively under pressure?\nExpandability\nDoes the team member demonstrate interest in other areas outside of the immediate scope of their role?\nDoes the team member invest time in learning new skills that will help them grow (laterally or vertically)?\nHas the team member volunteered for any ‚Äústretch‚Äù projects or initiatives?\nDoes the team member coach, mentor, and/or influence others?\nConsistency\nDoes the team member consistently deliver results?\nDoes the team member follow through on their commitments?\nIs the team member dependable?\nIf scope or timeline change, does the team member communicate the change and provide updates to stakeholders?\nSelf-Awareness\nDoes the team member respond to feedback aligned with our\nReceiving Feedback Guidelines\n?\nDoes the team member acknowledge their strengths and areas of improvement?\nDoes the team member work towards closing gaps for their improvement areas?\nDoes the team member demonstrate sound judgment in their decision-making?\nGrowth Potential Output\nAfter assessing team member growth potential based on the four pillars outlined above, managers can determine whether team member growth potential is currently developing, growing, or exceeding.\nDeveloping\n‚ÄúDeveloping‚Äù growth potential generally refers to a team member who is not working at full growth potential against the roles and responsibilities outlined in their Job Family. There could be a variety of reasons for this, including:\nThey are new to their role and did not have the time to demonstrate willingness and/or ability aligned with the pillars of growth potential\nLack of motivation to take on new projects\nMotivated to do what is needed in current job, not in what is required in a higher level\nNot expressing interest or demonstrating desire to continuously learn new skills\nPlease note that ‚Äúdeveloping‚Äù growth potential\ndoes not\nequate to ‚Äúdeveloping‚Äù performance, but correlates with the pillars of growth potential outlined in the ‚Äúmeasuring growth potential‚Äù section below.\nExamples:\nA team member is recently promoted or is new to the company, and hasn‚Äôt had sufficient time to demonstrate the pillars of growth potential for a sustained period of time (and at the new level, if recently promoted)\nA team member has actively expressed that they do not have an interest in learning new skills or take on new projects. In a day-to-day they show self-awareness but they have not shown great adaptability, expandability and consistency to further expand on their role and responsibilities.\nGrowing\n‚ÄúGrowing‚Äù growth potential generally refers to a team member who is growing in their current role and demonstrating interest in advancing (up or laterally) and they exhibit knowledge, skills, and abilities that indicate this. Team members with ‚Äúgrowing‚Äù growth potential generally:\nShow interest in areas outside of their immediate scope occasionally\nAre comfortable in their current role\nAre a stable counterpart for other team members (especially for peers and more junior team members)\nLearn and apply new skills when the job calls for it; apply lessons learned to enhance success\nExample:\nA team member has demonstrated adaptability and expandability but has not been consistent in their results or self-awareness. This holds the team member back from growing to a higher level or taking on more complex responsibilities in their current role.\nExceeding\n‚ÄúExceeding‚Äù growth potential generally indicates that a team member will be ready for promotion within the next year (or when an opportunity arises). ‚ÄúExceeding‚Äù growth potential team members:\nFrequently seek involvement in stretch project/projects outside of their scope\nInvest in their development; seek feedback to improve and applies that feedback on the job\nDemonstrate ability to learn new skills\nActively pursue increased opportunities to influence decisions and inspire others\nExample:\nA team member has consistently and proactively looked for opportunities to fill gaps and take on stretch projects. When another team member left the team, you leaned on this team member to help keep projects moving forward until you found a suitable backfill. They regularly ask for feedback from peers and adapt their approach accordingly. This has given your team member skills beyond their current job requirements, and broader understanding of the business.\nCalibration\nThe portion of the Performance/Growth Potential matrix that often entails the most significant time commitment is the live calibration session of team members with leadership. The calibration session is very valuable to ensure consistency across the Job Family and level, raise any questions, and provide cross-departmental and/or cross-divisional feedback on team members to capture the assessment of different managers as opposed to the opinion of the direct manager exclusively.\nEnsure consistency and fairness in assessments\nCalibrate on approach and thought process behind assessments\nProvide cross-departmental and/or cross-divisional feedback\nProvide an additional checkpoint to check for\nunconscious bias\nCalibration can be done asynchronously or synchronously, and should be done by level (i.e. Manager calibration for their directs, Director calibration for their directs, etc.) so as not to disclose Talent Assessment evaluations amongst peers.\nToo New to Rate\nFor newly onboarded team members, with a tenure up to 3 months, we have implemented a ‚ÄúToo New to Rate‚Äù (TNTR) assessment category. This designation will be applied to individuals with a start date within 3 months of the kick off of Talent Assessment as they have not yet had sufficient time to demonstrate their Performance/Growth Potential according to the defined pillars.\nThe introduction of a ‚ÄúToo New to Rate‚Äù category is a solution as feedback was raised that being rated ‚ÄúDeveloping‚Äù in many cases does not reflect the actual Performance/Growth Potential. Therefore a TNTR designation is to accurately reflect the time to get up and running of recently onboarded team members. This category acknowledges that new hires require a reasonable timeframe to familiarize themselves with the organization, their role, and the expectations before they can be accurately assessed using the Performance/Growth Potential Matrix.\nWhile newly onboarded team members do not need to complete the Talent Assessment evaluation in Workday, it‚Äôs still important for them to have a check-in conversation with their manager. We recommend that this conversation happens after the team member has completed 3 months with GitLab. We‚Äôve created\nthis template\nfor team members and managers to complete. The goal would be for the newly onboarded team member and their manager to come together to have a conversation reflecting on their first 3 months at GitLab, highlighting their strengths and opportunities, then aligning on any support needed for the team member moving forward.\nBesides team members with a GitLab tenure up to 3 months (New hire TNTR), the ‚ÄúToo New to Rate‚Äù designation will also be available for team members that have just transferred or were promoted to a new role. Please see the\nPromotions or Transfer During Assessment Cycle\nsection for more details and guidance on how to evaluate and consider performance in these scenarios.\nIf any of the above cases arise it is recommended that you discuss with your People Business Partner to ensure the Too New to Rate designation is consistently applied.\nCalibration Session\nThe calibration session is one of the most important pieces of the Performance/Growth Potential Matrix process, as it provides time for managers, their peers, and their manager to calibrate. Below are a few communication guidelines to ensure efficiency and fairness during the calibration session discussion.\nBest Practices\nBe conscious of time and consider setting a (reasonable) time limit per team member being discussed.\nReview program guidelines and avoid leniency bias.\nRefer to performance data that you may have taken on a team member throughout the past year - including  any stakeholder or cross-functional feedback, performance against metrics over time, key accomplishments, etc.; this will help avoid bias like recency bias or the halo effect. Please note that when reviewing feedback for the  talent assessment, it‚Äôs important to take into account areas in which the team member has improved. Two quarters is a fairly significant amount of time and team members have (hopefully) taken action on improvement areas during this period, which should be reflected in the assessment. Managers and other participants in calibration discussions should be prepared with this information if asked how they determined a rating.\nLeaders should feel comfortable providing feedback on team members in other functions that they have direct experience working with.\nFocus on discussing artifacts that are relevant to the performance factor and refrain from discussing artifacts that are not relevant to performance being developing, performing or exceeding. Examples of artifacts which are not relevant: upcoming maternity/parental leave, personal information/home situation or things that were confidentially shared and do not relate to performance.\nRefer to the competencies, job family, job frameworks and values when deciding what is relevant.\nUtilize the SBI model for\nfeedback\n. Focus on facts and avoid blanket statements as opposed to (i.e. [team member] has poor communication), ‚Äú[team member] struggled with collaboration during the roll-out of x project and could have improved communication by ensuring they aligned with x stakeholders more regularly during the process. The impact of this was x.‚Äù\nCalibration is not a stack ranking of team members. While some inter-person comparison may happen, it should only be to ensure that evaluations are being applied fairly across different raters.\nAsk questions and provide feedback!\nThis may seem obvious, but it is an important aspect to help identify any potential bias\nWho Do I Calibrate?\nIt is likely not necessary to discuss each team member in detail, particularly for larger groups. Calibration sessions typically focus on gaps, outliers and areas that might require additional management attention and/or alignment.\nAs a best practice, we should calibrate outliers. ‚ÄúOutliers‚Äù are typically considered to\nBox 1 (‚ÄúExceeding Growth Potential‚Äù and ‚ÄúExceeding Performance‚Äù) and Box 9 (‚ÄúDeveloping Growth Potential‚Äù and ‚ÄúDeveloping Performance‚Äù)\n.\nPeople Business Partners\nand business leaders have discretion to expand this threshold as needed, but live calibration for team members in Box 1 and Box 9 should be the baseline across the board.\nA few additional reasons to consider calibrating beyond Box 1 and Box 9 are:\nTeam members close to promotion\nTeam members who have changed assessments from the previous fiscal year (i.e. ‚ÄúPerforming Performance‚Äù to ‚ÄúExceeding Performance‚Äù)\nTeam members in Box 3 (‚ÄúExceeding Growth Potential‚Äù and ‚ÄúPerforming Performance‚Äù) to highlight potential development opportunities from peer groups\nOutliers based on Performance alone (i.e. everyone ‚ÄúDeveloping Performance‚Äù and everyone ‚ÄúExceeding performance‚Äù)\nAnyone hired in the last 3 months assessed as Performing or Exceeding for Performance aligned with eligibility guidance\nAnyone identified as Key Talent\nCalibration Session Pre-Work\nIt is\nabsolutely essential\nthat managers complete the required pre-work to ensure that the live calibration session is as efficient and productive as possible. Pre-work includes:\nFor calibration sessions you can leverage\nthis agenda template\nReview the team member‚Äôs own\nSelf-Evaluation\nif they have completed one, if they wished to complete one.\nReview the Job Family/Families that will be calibrated in detail\nReview our competencies\nTalent Assessment Training\nJob frameworks\nHigh Performing Team Indicators\nValues competencies\nRemote work competencies\nFunctional competencies\n(if applicable)\nDetermine the appropriate box for each of your team members\nAdd notes for each of your team members to the agenda, at least 12 hours before the session\nAn example of notes could include:\n2-3 strengths/accomplishments (and supporting examples)\n2-3 improvement areas\nAnything else noteworthy (i.e. recently promoted or transferred, etc.)\nKeep the\nSBI Model\n(Situation, Behavior, Impact) in mind when adding notes for strengths/accomplishments and improvement areas. Each point should include clear examples and blanket statements should be avoided.\nReview the notes of your peers for other team members and add feedback/questions/thoughts for discussion\nIf you did not attend the people manager live training session, please access the training video.\nTopics To Avoid\nWhile we want to encourage open and transparent conversation during calibration session, there are certain topics that should be avoided to ensure we respect team member privacy.\nSharing whether team members are currently undergoing\nformal performance remediation\n. It is okay to share that team members are receiving coaching, but specifics pertaining to Written coaching, PIPs, etc. should be avoided.\nAnything related to health (i.e. medical diagnoses, conditions, disabilities, etc.). It is okay to share that team members have a lot going on in their personal lives, but we should not go into detail.\nNote that this applies for team member‚Äôs friends/family as well.\nIdentifying Action\nAfter the calibration sessions the performance and growth potential outcomes can be used as input for the following:\nCareer Development Conversations\nPromotion planning\nIdentifying\nL&D opportunities\nSuccession Planning\nQ4 Formal Talent Assessment\nTimeline\nDetailed dates for FY26 are pending and process is subject to modification. In general the timeframe runs from January through March with ACR (compensation statement) release in April and compensation changes and promos effective beginning of May.\nNote that different departments may have additional due dates built into the high level timeline, so please follow up with your\nPeople Business Partner\nif you have any questions.\nBelow are the current activities for the formal assessment beginning in Q4 (January)\nKick off Optional Self-Evaluation cycle for all Team Members\nDue date for all Self-Evaluations\nManagers begin to review their team members self evaluations and gather feedback. Workday Calibration cycle opens and Calibration discussions occur\n5:00pm PST Workday Calibration will be locked\nKick off the Manager Evaluation cycle in Workday\nAnnual Compensation Review Kicks off for Managers\nDue date for all Manager evaluations. Talent Assessment in Workday is locked.\nTotal Rewards and final E-Group review and approval\nManagers can communicate Performance/Growth Potential assessment and Annual Compensation Review to team members\nTalent Assessments pending in Workday will be auto advanced to team members*\nAnnual Compensation Review effective date\n*Team members who are on Leave of Absence (LOA) on TBD are excluded from the auto advancement of their talent assessment until they return to work.\nNote: For full details on our Annual Compensation Review (ACR) timeline and cycle, please refer to our ACR\nhandbook page\n.\nCadence\nGitLab completes talent assessment\nat least\nonce per year in Q4, with a recommended informal mid-year check-in. The formal assessment ideally takes place prior to the\nannual compensation review\n. Our e-group completes Performance/Growth Potential Matrix multiple times a year for their direct reports.\nEligibility\nAnyone hired on or before January 31st should receive a Performance and Growth Potential assessment, as they are eligible for Annual Compensation Review. However, if the team member being assessed has been with GitLab for a period of 3 months or less or recently transferred roles or was promoted, please see the\nToo New To Rate description\n.\nTeam Member Self-Evaluations\nIt is up to all team members‚Äô discretion if they wish to complete their Self-Evaluation in Workday. While they are voluntary, self evaluations are highly encouraged so the team member‚Äôs perspective is captured and shared with their manager prior to the manager‚Äôs evaluation and Calibration Sessions. Please review the most current\ntimeline\nto ensure a timely delivery.\nTeam members may use Claude, Insights, and GitLab Wrapped to assist in the preparation of your self evaluation.  AI tools like these can be super helpful to assist you in gathering information about your accomplishments, or helping you brainstorm how you might refine your self evaluation. However, meaningful human input and review is always required, and you should not rely solely on Claude to write your self-evaluation.\nMatrix Assessment Timeline\nThe Performance/Growth Potential Matrix typically takes 4-6 weeks to complete from beginning to end. Steps are as follows:\nTeam members have the opportunity to complete a Performance Review Self-Evaluation if they so wish, and share it with their manager through Workday.\nManagers complete a Manager evaluation and Performance/Growth Potential ratings for their respective team members\nLive session takes place for calibration with managers up to E-Group level\nExecutive Review (leadership meets to review the matrix results, key talent, promotion requests, development and performance actions, review discrepancies, and measure against previous matrix results)\nTalent Management and People Analytics performs an equality review.\nFinal approval of E-Group members and Total Rewards.\nAnnual Compensation review kicks off after Talent Assessment\nPerformance/Growth Potential and Annual Compensation Review updates are communicated to team members\nFinal Assessments in Workday\nAligned with the\ntimeline\n, managers can see final assessments for each of their team members in their respective Workday profiles.\nPromotions or Transfers During Assessment Cycle\nThe cut-off date to determine whether to assess team members as Too New to Rate based on recent promotion/transfer for the FY25 Talent Assessment cycle is based on their time in role prior to the start of the Talent Assessment cycle,\n2025-01-27\n. Please note, that a ‚Äútransfer‚Äù constitutes as a change to one or multiple of the following things: job family, department, division, or job grade. A change in job title specialty and manager alone would not constitute as a transfer.\nGuidelines are as follows:\nIf a team member interviews and transfers or is promoted to a new role, with an effective date\nwithin\n90 days of the start of the talent assessment cycle or throughout the talent assessment cycle (on or after 2024-10-01), guidance would be that they should be assessed as Too New to Rate.\nFor example, if a Senior Manager is promoted to Director on 2024-11-02, they would be assessed as\nToo New to Rate\nfor the Talent Assessment cycle.\nIf a team member interviews and transfers to a new role or was promoted to a new role more than 90 days before the start of the talent assessment cycle (on or before 2024-10-01) they would be assessed based on the new level/role.\nFor example, if a Senior Manager is promoted to Director on 2024-09-15, they would be assessed based on the new Director-level role for the Talent Assessment cycle.\nException for FY25 Talent Assessment Cycle\n: Due to the transition of our promotion cycles, team members who receive a promotion effective in the FY26 Q1 (Feb 1) cycle, will receive a talent assessment rating that is reflective of their full FY25 performance, and not be classed as TNTR for this talent assessment cycle. For example, if a Senior Manager is promoted to Director effective 2025-02-01, their Talent Assessment should reflect their Senior Manager level to ensure we are capturing a full year of Performance and Growth Potential feedback.\nIt is important to note that because being promoted recognizes high performance both in terms of increased scope/responsibility and monetarily through compensation increase therefore a\npromotion ‚Äúresets‚Äù the performance factor evaluation\n.\nWhile a recent promotion resets the performance factor evaluation, and a job transfer is internal mobility that may be a lateral job level, there are  soft skills and technical skills that are most likely transferable. When assessing team members who have transferred teams or changed roles throughout the year, managers should gather feedback from the previous manager on performance as well and take that into account when evaluating and documenting performance to reflect performance for the entire year. Managers should also provide the team member feedback on how they‚Äôre doing in their current role to ensure they‚Äôre set up for success, and aware of feedback moving forward in their current position.\nBest Practices for Communicating Performance/Growth Potential Factors\nCommunication\nIn most companies the Performance/Growth Potential Matrix is used exclusively as a management tool and results are not typically shared with team members. In the spirit of our transparency value, we want to encourage feedback with team members.\nDiscussion topics that arise during calibration sessions (or at any other point during the assessment process) are confidential. Please do not share with anyone other than each individual team member.\nAfter calibration sessions are done and performance and growth potential factors are determined, it‚Äôs time to communicate the final results with team members.\nPlease follow the Talent Assessment timeline and communicate performance and growth potential ratings to team members in your performance review conversations within the communication window\n. The conversation following the talent assessment process is the most important part; it is a great way to drive alignment with your team members and set them up for success moving forward.  Below are  some of the best practices for communications, but remember, if you are ever in doubt please reach out to your manager or\nPeople Business Partner\nfor additional support.\nCommunicate performance and growth potential factors face-to-face over Zoom\n. As a manager, this is the opportunity for you to have a conversation with your team member about their performance and growth potential. Having the conversation over Zoom allows for you to have a dialogue with your team member (versus just sharing their performance and growth potential factor asynchronously) and allows you to pick up other information, like tone and non-verbal cues which can tell you more about how someone is feeling during this conversation. You may also choose to share the PDF of the review prior to the conversation so that your team member has time to process the information. If so, ideally share just 1-2 days prior to the conversation so you are able to address questions promptly.\nPrepare for the discussion ahead of time.\nAs a manager, you should prepare in advance of calibration discussions with your team members. Before communicating a team member‚Äôs\nperformance and growth potential factors\n, it‚Äôs beneficial to look back through your preparation document, notes, and anything relevant that was discussed as part of the calibration exercise. Be prepared with notes on the following:\nAreas the team member is doing well\nAreas that need improvement\nAreas that you identified as either strengths and/or development areas that differed from the team member‚Äôs self-assessment.\nProvide specific examples for both strengths and improvement areas. The\n(Situation - Behavior - Impact) model can be effective for delivering examples structured in a way that makes impact clear to team members.\nThink about recommendations and/or focus areas for a team member‚Äôs development OR if a team member has an active\nIndividual Growth Plan(IGP)\n, consider how the feedback fits into their current IGP\nSchedule a separate call or repurpose your\n1:1\n) to discuss a team member‚Äôs performance and growth potential factor\n. The performance and growth potential factors should be communicated at the beginning of the meeting. This allows the team member time to ask questions, discuss their assessment, and most importantly, determine next steps. If your 1:1s are often filled with agenda items, the recommendation is to schedule another call to make sure you have ample time allocated.\nProtect the confidentiality of other team members\nby avoiding saying things like ‚Äúyou were the only team member to be rated this performance factor.‚Äù\nAvoid making future promises\nlike, ‚ÄúIn the next review, I will rate you X performance/growth potential factor.‚Äù\nSample Script for Delivering a Talent Assessment\nThe script below is intended to help you structure your Performance and Growth Potential conversation. Personalizing this conversation to reflect your authentic tone will make this a more effective conversation with your team member.\n‚ÄúThank you for taking some time today to discuss your Performance and Growth Potential. I wanted to discuss your achievements and strengths, improvement areas, future development, and the final result of the talent assessment.‚Äù\n‚ÄúI assessed your performance factor as *\n[Insert Performance factor]\n:‚Äù\nExceeding\n(consistently surpassing the demands of their current position)\nPerforming\n(‚Äúon track‚Äù and meeting all expectations of current position)\nDeveloping\n(room to learn and grow, not currently meeting all expectations of current position)\nToo New To Rate\n(hired or transferred <90 days from the start of the Talent Assessment program)\n‚ÄúI assessed your performance as\n[Insert Performance Factor]\nbecause:‚Äù\nI assessed your performance against your job responsibilities as\n[Insert Performance Factor]\n.\nYour strengths in your job responsibilities are [Insert strengths with supporting examples]\nYour opportunities in your job responsibilities are [Insert opportunities with supporting examples]\nI assessed your performance against values competencies as\n[Insert Performance Factor]\n.\nYour strengths in aligned competencies are [Insert strengths with supporting examples]\nYour opportunities in aligned competencies are [Insert opportunities with supporting examples]\n‚ÄúI assessed your growth potential factor as *\n[Insert Growth potential factor]\n:‚Äù\nExceeding\n(ready to take on more responsibilities within the next year (or when an opportunity arises))\nGrowing\n(growing in current role, demonstrating interest in advancing (up or laterally) and they exhibit knowledge, skills, and abilities that indicate this.)\nDeveloping\n(not working at full growth potential against the roles and responsibilities)\n‚ÄúI assessed your growth potential as\n[Insert Growth Potential Factor]\nbecause:‚Äù\nI assessed your growth potential against the four pillars of growth potential as\n[Insert Growth Potential Factor]\n.\nYou have shown X, Y, Z [Insert strengths with supporting examples]\nYour opportunities to further grow in your role are X, Y, Z are [Insert opportunities with supporting examples]\nIf a team member was identified as\nkey talent\n, please ensure to communicate to the team member during the talent assessment conversation.\nI‚Äôd like to thank you for your hard work as, and I look forward to continuing to work together! Do you have any questions?\n[Allow team member to ask questions and respond]\nAs a next step, let‚Äôs schedule some time to talk more about what you want to do in the future and create a career development plan together OR let‚Äôs talk about how this feedback should be incorporated into your Individual Growth Plan.\nSample Next Steps\nThe most important part of the talent assessment discussion is to determine next steps in partnership with your team member. The team member should be the DRI for the next steps with support from you as their manager. Our\nCareer Development handbook page\nincludes a lot of great information and resources on career development including\nan Individual Growth Plan guide\nwhich should help provide structure and a plan for next steps.\nIf you have any questions or concerns about next steps, please contact your manager and/or your\nPeople Business Partner\n.\nInformation Guide\nPerformance/Growth Potential Review General Information\nWhy does this matter to me?\nThe Talent Assessment involves all team members and managers.\nTeam Members are assessed according to\nperformance\nand\ngrowth potential\n. Team Members should be prepared to have a conversation with their manager about their performance and growth potential in\neach year.\nManagers assess their team members‚Äô\nperformance\nand\ngrowth potential\n. Managers attend calibration meetings in which team members‚Äô ratings are discussed and evaluated to ensure consistency and minimize bias. Once the program closes, managers are responsible for communicating Performance/Growth Potential Factor to team members.\nCan I use Claude or other AI tools to help me with my self evaluation?\nYes. You may use Claude, Insights, and GitLab Wrapped to assist in the preparation of your self evaluation.  AI tools like these can be super helpful to assist you in gathering information about your accomplishments, or helping you brainstorm how you might refine your self evaluation. However, meaningful human input and review is always required, and you should not rely solely on Claude to write your self-evaluation.\nCan I utilize Claude or other AI tools to help with manager evaluations?\nClaude is the only AI tool you are permitted to use for this purpose, and it may only be used to assist in the writing of manager evaluations. Use of Insights, GitLab Wrapped, or any other AI tool for the assessment of team members or the writing of manager evaluations is not permitted. Claude can be super helpful to assist you in brainstorming how you might refine the feedback in your manager evaluation. However, meaningful human input is required in assessing performance and growth potential of your team members, and you should not rely solely on Claude to write manager evaluations. We also have a robust calibration process in our talent assessment program to ensure we are consistently and fairly assessing performance and growth potential across GitLab.\nHow does this impact the way I work at GitLab?\nThe Performance Assessment\nis an evaluation of your performance against\njob family responsibilities\nand\nGitLab competencies\nand\nGrowth\nis evaluated against the 4 pillars of Growth Potential. Both can help you determine strengths and improvement areas that you can apply in your day-to-day work/way you work.\nHow does this impact the teams I lead?\nAs a manager, you assess your team members‚Äô\nperformance\nand\ngrowth potential\n. Managers attend calibration meetings in which team members‚Äô assessments are discussed and evaluated to ensure consistency and minimise bias. Once the program closes, managers are responsible for communicating Performance/Growth Potential Factor to team members.\nWho can I reach out to in supporting me during Talent Assessments for my team?\nYou can reach out to your manager or your\naligned People Business Partner\n.\nAs a manager, when reviewing my team members, what is the difference between Developing and Underperformance?\nThe ‚ÄúDeveloping‚Äù rating means that the team member is not (yet) meeting all of the responsibilities and competencies for the role. This can be for many reasons, including a recent start date. By contrast,\nUnderperformance\ninvolves\nconsistently\nnot meeting the goals and requirements of the job; GitLab follows specific processes to attempt to remediate.\nWhile everyone within the Developing category isn‚Äôt automatically Underperforming, a team member who is Underperforming would also be grouped into the Developing category, because Performing is not an accurate assessment.\nTeam members who are on a formal Underperformance remediation plan, such as a\nPerformance Improvement Plan\n, are not eligible for a compensation increase as a result of the\nAnnual Compensation Review\n.\nWill my Growth Potential assessment impact my compensation?\nYes both Performance, Growth Potential, and Key Talent Assessment can impact your Total Rewards.\nCan my performance factor be changed?\nAfter the Talent Assessment closes, the performance factor cannot be changed. You should work with your manager to develop a plan to develop your performance for future assessments.\nDoes this mean I am automatically getting an X% increase in the upcoming Annual Compensation Review?\nThe Performance/Growth Potential Factor is one of the factors considered in the\nAnnual Compensation review\n. The recommended increases displayed in the handbook are there to ensure company wide consistency. The factors taken into account for the Annual Compensation Review are:\nYour hire date (new hires hired after October 31st are ineligible for compensation review)\nOther compensation increases received over the last year\nTiming of promotion and/or role changes\nYour current placement within the compensation band\nLocation factor\nRole benchmark updates\nCompany budget for compensation increases\nWhen is the next opportunity for my performance to be reviewed?\nTalent Assessments are formally conducted at the beginning of the fiscal year (Q1) to assess the prior year, and we encourage a mid-year check-in at the half-year.\nWhat can I do to change my performance factor in the future?\nThere are many things that you can do to change your performance factor in the future. Please work with your manager on a career development plan and discuss actions that can be taken to improve.\nCan my Growth Potential rating be changed?\nAfter the Talent Assessment closes, your growth potential factor cannot be changed. Your manager assessed your growth potential factor and this would be an opportunity for you and your manager to align on your growth opportunities. This discussion can also be an input into your career development discussion.\nWhat can I do to change my Growth Potential rating in the future?\nThere are many things that a team member can do to change their growth potential factor in the future. Talk with your manager about how you might be able to develop a plan to increase your\nexpandability, adaptability, consistency and self-awareness\n. Do you currently possess all the skills needed for your current role? Have you identified what skills you would like to learn? Have you determined what your career goals are, and are you actively working towards those goals? Are there additional projects to take on, to stretch your current responsibilities and/or skills? These are some discussion questions that might help you and your manager align on a future plan for growth.\nMy team member is currently on a performance remediation plan; how should I handle this?\nYou should continue to move forward with communicating their performance factor to them and use the meeting as an opportunity to reinforce the expectations of meeting the goals highlighted in the plan.\nTalent Assessment - Manager Scenarios\nMy team member is on a leave (protected leave or PTO) during the Talent Assessment period. How should I handle communication of their assessment?\nIf they will be returning from leave before the due date to communicate\nTalent Assessment results\n, please wait until their return from leave to communicate their assessment. If they are returning from leave after the due date to communicate Talent Assessment results, you may email them to offer to discuss their assessment. If they do not reply or prefer to wait until their return, please respect that choice.\nMy team member was on protected leave for a large portion of the Talent Assessment period. How should I factor this in when assessing them?\nIt‚Äôs important to ensure you are assessing the team member‚Äôs performance for their contributions while working during the assessment time period. There should be no adverse impact on their overall assessment due to being on leave for a portion of the period. During calibration, please remain vigilant to ensure no private details related to their time away are disclosed. Please reach out to your PBP to discuss the specific details related to your team member.\nMy team member is on leave of absence during the Talent Assessment communication window. What happens to their Talent Assessment?\nPlease do not action the To-Do task ‚ÄúMeet with your Employee‚Äù if your team member is on leave of absence (LOA). We will exclude team members on LOA from the auto advancement setting on TBD and you can communicate their talent assessment when they return to work.\nMy team member was assessed as key talent last year, and is not for this assessment period. How should I handle communication with them?\nThere is no guarantee that team members will retain their key talent assessment each assessment period. Make sure to explain the reasons why their key talent assessment has changed, including how we assess Key Talent and the\ndefinition outlined in the Handbook\n.\nRemember to end the conversation by discussing what your expectations are of key talent going forward. It‚Äôs important not to make promises about future assessments, but to focus on what makes a team member critical to the business, and how you, their manager, will support them.\nMy team member was exceeding performance last assessment, and is not for this period. How should I communicate this change?\nIt‚Äôs important to take a look at what may have changed since last year. Is your team member in a new role? On a new team? Did they take on bigger stretch assignments?\nAny of these factors can influence a team member‚Äôs performance. Be prepared with specific examples to share which support your performance assessment. The feedback conversation should also focus on what success looks like for the team member in the year to come and how you, as the manager, can support them with their goals.\nI have just adopted a new team, and the previous manager is no longer at GitLab. How can I assess the performance of my team fairly?\nYou may be able to gather insights from your manager or cross functional stakeholders who have worked closely with the team member in the performance period. You may have access to the recent 360 feedback for each of your team members, as well as their talent assessment from last year to help inform your thinking. If you haven‚Äôt already, it‚Äôs important to ask the team member to share their own perspective on their accomplishments prior to you taking the role, so you are well prepared for the discussion of your assessment.\nA team member recently moved to be my direct report, however for the majority of the performance year, they reported to another manager. Are there options to delegate or re-assign the manager evaluation to their previous manager?\nAs a manager, you can delegate the manager evaluation to another manager in your direct management chain. If your team member moved from another manager in another organization, you should collaborate with the previous manager to write the review with their input. The previous manager can leverage the Talent Assessment\ngoogle template\nto capture their feedback and provide it back to you so that you can enter it into Workday. As the new manager, you will be responsible for the calibration of team members in your management chain at the time of calibration. You should also ensure your communication of the final talent assessment is done in a joint conversation with the previous manager, you as the new manager and your team member.\nThis would be a great opportunity to ensure a formal transition and knowledge of performance and feedback takes place between previous manager and new manager. Please enter a HelpLab request if you have any questions about your specific scenario.\nMy team member does not agree with their placement in performance and growth potential. How should I approach this?\nRemember that this conversation will be most effective if you are well prepared. If you haven‚Äôt yet, take an opportunity before the performance and growth potential conversation to understand their own assessment of their results.\nDuring the performance and growth potential conversation, provide the opportunity for a dialogue with your team member. Remain open and curious about their perspective. Engage in active listening, ensuring that you aren‚Äôt planning your counterpoints while they are sharing. The expectation is not that the results will necessarily change but the insights they provide may shape how you both think about their growth and development path.\nIf you feel a conversation might be particularly challenging, you may reach out to the TMR team or your PBP to role play the discussion and ensure you are prepared.\nMy team member is exceeding growth potential expectations, how should I be thinking about their ongoing development?\nGreat! At GitLab team members have the opportunity to own their own development, and deserve a great manager (you) to facilitate it. Ask your team member to articulate where they would like to see their skills and career develop. You may have insights that help them refine those goals based on where you see the business going, as they will be most successful in gaining the experience they‚Äôre looking for if there are opportunities to align those goals with business goals.\nThe\nCareer Development handbook page\nhas more ideas to help your team member craft a growth plan, including information on GitLab‚Äôs\nGrowth and Development benefit\n.\nHow should we be communicating Growth Potential to team members?\nFirst, ensure the team member understands what we mean when we say we are assessing Growth Potential, including the\n4 pillars\nthat you considered when making the assessment. Be prepared with specifics that led to your evaluation.\nRemember, Growth Potential can change over time as team members are promoted, develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities. Avoid making promises, but if your team member sees themselves in a higher position, help them understand behaviors you expect to be able to assess them differently next time.\nI received unexpected feedback about my team member from a cross-functional stakeholder in my calibration session. What should I do?\nIf you receive unexpected feedback during the calibration, ensure you really understand what happened, and what has been discussed with your team member so far. If someone has tried to help this team member in the past, how did it go? Can your peer provide specifics to help you understand the impact of the behaviors? Talk to your peer about the importance of using this feedback to help your team member grow, and make sure you have agreement on how you plan to deliver this message.\nDuring the discussion with your team member, be prepared to gain their perspective on the situation first. Listen actively and consider their point of view. When delivering the message, consider the root cause, focus on impact and alignment with our values, and end with a discussion on future actions that would be more successful.\nIf and when appropriate, check in with your peer on how improvements are going. Be sure to stay close to the situation so you are in a position to deliver more timely feedback if the behavior is ongoing.\nHow do I assess team members in acting or interim roles?\nFor team members who have assumed an\nActing or an Interim role\n, we will assess team members aligned with their\npermanent positions\n(i.e. not the Acting or Interim position).\nAs the Talent Assessment impacts compensation, and Acting/Interim periods are not permanent, in the instance that a team member does not end up moving into the Acting/Interim role permanently, we would not want to have their compensation impacted by a temporary position.\nMy team member is performing at a high level in terms of results, but they struggle with behavioral alignment to one or more of our values. How do I take the ‚Äúhow‚Äù into account when I am assessing their performance and growth?\nReview the handbook content on how we\nmeasure Performance\nand how we\nmeasure Growth Potential\n. When a high output/results-oriented team member is struggling with soft skills and/or behavior, this is oftentimes related to improvement areas in terms of alignment to our\nvalues competencies\n, and/or our\nGrowth Potential pillars\n(particularly, but not limited to, Self-Awareness). Considering our measurement guidelines for Performance and Growth Potential holistically, and be sure that your assessment takes all of our competencies, job family responsibilities, and pillars into account.\nMy team member has the skills to perform, but there are\nwill-based performance issues\nthat are impacting their ability or the team‚Äôs ability to succeed. How should I think about this in terms of assessing their performance?\nFirst, act early. Do not wait for a formal performance and growth potential assessment conversation to deliver feedback about your concerns. Be specific, and document your conversation. Loop in a TMR specialist for support as these conversations can be challenging.\nReview the definition of ‚ÄúDeveloping‚Äù performance. Note that one criteria that applies to this category is a team member who is struggling to perform in a way that is aligned to our values and competencies. Think about the specific behaviors or impacts of their work or how they are working that have led you to assess that they are not fully engaged. Despite having the skills, if your team member is not contributing at the level they are expected to be, you should consider that a performance issue in the way you would a skill based performance issue. Keep in mind that not addressing these challenges may be affecting your other team members, especially those who may be picking up the slack. We encourage to review the handbook page on\nUnderperformance\n.\nMid-Year Check In\nGreat managers share\nfeedback\nwith team members year-round in 1:1 meetings and ad-hoc. A dedicated Mid-Year check-in is a useful tool to support a  holistic discussion between team member and manager about how things are going as we approach the second half of the fiscal year. During the Mid-Year check in, we assess how things are going from both the team member and managers‚Äô points of view, and share feedback to help inform performance and development plans. Leaning into where things are going well, as well as uncovering blind spots or improvement areas early are the keys to delivering great results. A Mid-Year check in complements weekly, on-going feedback, so we recommend documenting your discussion in your 1:1 doc to support frequent updates on action items and development goals.\nGoals of the Mid-Year check in are:\nTo provide a dedicated space for questions/clarification about performance and growth opportunities at GitLab\nTeam members share a cumulative self assessment of their performance against expectations and progress on development goals\nManagers respond, and provide their own cumulative update to the team member on how things are going. This should build on the regular performance feedback they should be delivering weekly in 1:1s and ensure no surprises at the end of the year review.\nEligibility\nTo participate in the mid-year check in we recommend that team members have at least 3 months of tenure so accomplishments and improvement areas are able to be clearly outlined with examples.\nProcess\nRecommended process for our Mid Year check-in will be as follows:\nTeam Member Led: Team member provides a self-assessment on their own performance in their\n1:1 document\nGoogle docs template\nis available to guide the self-assessment process. Team members are encouraged to author a document based on this template, share it with their manager and link it to the top of their 1:1 document. Team members should reflect on their achievements, strengths, and opportunity areas since the last formal Talent Assessment in Q4. It is the team member‚Äôs responsibility to provide the self-assessment and bring it to the conversation with their manager to discuss and align on. Linking the document to the 1:1 agenda ensures the self-assessment is available to come back to throughout the rest of the year.\nThe template contains an agenda for the Mid-Year check-in as follows:\nAchievements\nList your 3 most significant achievements since the last formal\nTalent Assessment\n, aligned with the job responsibilities and expectations of the role. This can include significant impact to the department or company, customer-impact, community-impacting, etc. Feedback can also be included in this section if applicable.\nStrengths & Opportunities in Role\nIn this area the goal is to determine 2-3 strengths and 2-3 opportunity areas in accordance with your role, job family, and\njob framework\n. Include examples when necessary to provide clarity or context.  Ensure there are actionable takeaways.\nSupport Needed\nA place to outline any support needed from your manager for your ongoing success and development at GitLab.\nManager Feedback\nManagers will provide additional feedback or response to the self-assessment outlined above. Managers should be sure to reference the Achievements (3) and Roles & Responsibilities (Strengths and Opportunities) outlined by the team member above, and to any additional thoughts or feedback (2-3 points).\nNext Steps\nA space for the team member and manager to document any relevant next steps stemming from this conversation. This could be a full\nIndividual Growth Plan\nor a couple of key actions or development opportunities for the individual.\nManager Feedback: Team members let their manager know when they have provided their self-assessment overview in their\n1:1 document\nTeam members should share their Mid-Year Check In document with their manager at least one week prior to the live discussion to ensure managers have time to review the content, and to add in their own feedback in the\nManager Feedback\nsection.\nLive Discussion\nTeam members and managers use a dedicated 1:1 to discuss the Mid Year check in.\nAlign on actions/next steps\nTeam member and manager align on action items stemming from the conversation to best support team member development and alignment to their goals. You are encourage to leverage our\nCareer Development and Mobility\n) handbook page for ideas and inspiration.\nTimeline\nMid-Year Check-In Timeline (FY2026):\n2025-06-16 ‚Äì 2025-06-30: Manager & Team Member preparation & 360 feedback gathering (optional)\nw/c 2025-06-30 & 2025-07-07: People Manager Enablement Sessions\n2025-07-01 ‚Äì 2025-07-18: Mid-year conversations conducted & documented\n2025-07-21 ‚Äì 2025-07-25:Follow-up on development & performance goals\nSuccession Planning\nSuccession planning is an important step in our Talent Assessment process. Completing the\nPerformance/Growth Potential Assessment\ngives leaders a fresh overview of the top performers and the highest growth team members in their respective organizations. Particularly for individuals in Senior Leadership roles and above (the\nS-Group\nand depending on structure the\nDirector-Group\n, a recommended next step following the Performance/Growth Potential assessment is to do succession planning.\nSuccession planning ensures we are identifying and developing future GitLab leaders to ensure business continuity in the event of an unforeseen change, and providing the current leadership team the opportunity to grow and scale. It may provide an opportunity to diversify our leadership team by developing our internal bench of talent. Note, potential alone does not determine who will be a successor. Strong succession candidates should demonstrate sustained exceeding performance and growth, aspire to have a role at the next level, and be ready for a much larger role in the near term.\nQuestions we should ask ourselves when thinking about succession planning (and the individual(s) identified) are:\nWhat are our current and upcoming business goals?\nDoes the successor candidate have a track record of delivering strategic results, working in alignment with our values, and demonstrating high growth potential?\nDoes our successor candidate have skill gaps that must close before they are ready to deliver on the business goals identified?\n(if we do have skill gaps)\nCan we develop our successors to close those gaps? If so, how? How long will this additional exposure and skill development take? Who else at GitLab should we engage to support their development?\nIf not, do we need to hire externally to ensure business continuity?\nIf we do not have anyone who could assume the role in an emergency situation, what is our plan to provide emergency coverage?\nSuccession Planning Process\nThe succession planning process might vary slightly for different areas of the business depending on size and structure, but at a high level the process should flow as follows:\nLeaders go through the\nPerformance/Growth Potential Assessment\nprocess for all of their direct reports.\nIdeally, this process includes\ncalibration\nto generate a level of initial familiarity amongst leadership peers with the talent in the organization.\nLeaders identify and document their respective successors\n(and emergency coverage plans if the identified successor could not currently cover in an emergency situation) leveraging\nthis template\n.\nSuccession plans are reviewed with peers\n(i.e. all other executives, all other senior leaders in the function, etc.) and your\nPeople Business Partner\n, ideally during a synchronous session to facilitate discussion and questions.\nDevelopment plans are finalized\nfor successors and documented in the successor slide.\n(if applicable)\nSkills gaps impacting ability to achieve business goals are identified and actions are put in place\nto ensure these gaps are closed/minimized (i.e. stretch assignments, increased visibility and exposure, or hiring)\nSuccession Readiness Definitions\nSuccession Readiness\nDescription\nEmergency (ER)\nSomeone who could take over this role if the current person were affected by a\nlottery factor\nor had to take emergency leave. Has competency and experience to provide coverage on an interim basis (~6 months), but may not be suitable for the role long-term\nNote: If there is no one who could assume the role today in an emergency situation, part of the succession coverage plan should include an overview of recommendation steps (i.e. engaging a consultancy, splitting up the team, etc.)\nReady Now (RN)\nSomeone who has 90% of the competency & experience to take the role now\nReady in 1-2 years\nWith additional responsibility & exposure, could take the role soon. Likely has the competency and experience to provide coverage on an interim basis if there is an urgent business need\nReady in 2-3+ years\nLonger term candidate who requires significant development. May also have the competency to provide coverage on an interim basis if there is an urgent business need.\nNote that the\nEmergency Coverage\nslide in the\ntemplate above\nshould only be used to if the identified successor could not provide temporary coverage for the current leader in an emergency situation.\nResources\nResource\nPurpose\nWorkday: Self Assessment & Manager Evaluation Template\nTeam members and managers can leverage this template to begin thinking through and documenting the optional self-assessment and the manager evaluation for the Talent Assessment. Please note that this template is for team members who would like to get an early start ahead of Workday launching the Talent Assessment cycle, however, all assessments will need to be transferred over to Workday for formal documentation and calibration.\nWorkday Job Aid: How to Complete My Annual Self Evaluation\nTeam member instructions for how to complete their annual Self-Evaluation task in Workday.\nWorkday Job Aid: How to Complete the Manager  Evaluation and Assess Growth Potential\nManager instructions for how to complete their Manager Evaluation task and Assess Growth Potential task in Workday.\nWorkday Job Aid: How to Complete Talent Calibration\nManager instructions for how to complete their Talent Calibration in Workday.\nWorkday Job Aid: How to Facilitate Calibration - PBPs\nPBP instructions for how to facilitate calibration sessions in Workday.\nWorkday Calibration Video Tutorial\nManager instructions for how to complete their Talent Calibration in Workday.\nTalent Assessment Calibration Agenda Doc\nThis template can be used by managers to ensure similar pre-work, structure, and context to generate alignment ahead of live calibration sessions. The agenda is also recommend to ensure rationale behind potential assessment changes during calibration are recorded.\nValues competencies\nValues competencies form an important part of the Performance Factor evaluation and are important to review prior to beginning the assessment period.\nHigh Performing Team Indicators\nWe‚Äôve broken down each characteristic of high performance to help you recognize and measure success.\nRemote work competencies\nRemote work competencies form an important part of the Performance Factor evaluation and are important to review prior to beginning the assessment period.\nFunctional competencies\nFunctional competencies (for groups that have them developed) can also influence the Performance Factor and should be reviewed prior to the assessment period.\nIt is important to me mindful of unconscious bias always, and especially during talent reviews and assessments. It is highly recommended that you review the handbook page and watch the training.\nPerformance Factor\nhandbook page\nThis page is the SSOT to review the Performance Factor‚Äôs impact on compensation.\nKey Talent\nKey Talent Criteria\nKey Talent makes up roughly ~10% of the population. Key Talent represents team members who have a significant impact on GitLab‚Äôs present and future success. They deliver quality results that are instrumental in moving critical company initiatives forward and do so consistently in alignment with our values. These team members are often recognized as experts in their current role. Team members, at any level, can be considered Key Talent.\nTeam members identified as Key Talent typically have knowledge, skills, and experience that:\nSubstantially impacts the company‚Äôs ability to achieve significant milestones and results\nDemonstrates consistently strong performance\nDemonstrates growth potential; the ability and desire to assume increasingly more broad or complex responsibilities and learn new skills.\nHas an outsized, measurable impact on business performance\nHas a significant impact to the operation of a critical functional area\nHas demonstrated the ability to scale with the organization\nKey Talent, Performance, and Growth Potential\nTeam members identified as key talent must be assessed at minimum Performing and Growing (Box 4) in the\nTalent Assessment process\n.\nAlthough Performance and Growth Potential are a consideration in the Key Talent selection process, they are not the only criteria used to determine the designation and should not be used in isolation. It is important to look holistically at the Key Talent Criteria outlined above when determining who qualifies as Key Talent on your team.\n‚ÄúTNTR‚Äù (Too New to Rate) team members can be considered key talent but this would be an exception. In order for a ‚ÄúTNTR‚Äù team member to be identified as key talent they must meet the criteria above and be ramping successfully in their new role.\nWe exclude team members rated ‚ÄúTNTR‚Äù when we calculate our Key Talent distribution across the company. E.g. Team members designated Key Talent during Calibration\ndivided by\nTalent Assessment eligible team members (excluding TNTR) = Key Talent Distribution %\nBelow are a few examples to help managers think through Key Talent designations as they relate to Performance and Growth Potential:\nA team member that has a performance assessment of ‚ÄúExceeding‚Äù is not automatically indentified as Key Talent. Perhaps they are doing exceptionally well in their role, but the impact on business performance may not be significant enough to meet the definition above.\nA team member that is new to the role due to recent promotion and rated ‚ÄúTNTR‚Äù could be identified as Key Talent if they are ramping successfully in their role and have a high impact on the ability for the company to achieve results.\nNote: Intentionally hoarding knowledge is in direct conflict with our\ntransparency value\nand is viewed as a performance issue as we measure performance based on alignment with our values.\nKey Talent and Single Points of Failure (SPOF)\nSingle Points of Failure (SPOF) refers to a single person whose absence would significantly impact the ability of an area of the company to function.\nTeam members that are identified as Key Talent can also be SPOF, as the definition of SPOF overlaps with a few of the Key Talent Criteria outlined above, however, a team member who is identified as SPOF is not also Key Talent by default.\nA few key differences between Key Talent and SPOF include: team member‚Äôs performance and growth potential, risk mitigation plans, and support/development strategies.\nFour scenarios exist in the context of our Talent Assessment:\nTeam member identified as Key Talent\nTeam member identified as SPOF\nTeam member identified as Key Talent and SPOF\nTeam member identified as neither one\nTo review the SPOF definition in more detail along with a few examples, please review our\nOrganizational Design\nhandbook page.\nProcess To Determine Key Talent\nIt is important to have a holistic view of all team members when determining who meets the key talent criteria, which is why we require a certain scope when calibrating key talent and making final recommendations in the organization. There are several factors that can help determine the level at which key talent should be assessed, including things like reporting lines and span of control. As a general rule, if a people manager meets the following requirements, key talent calibrations should start at their level:\nSenior Manager level or above\n20+ direct and indirect reports\nThe process to determine Key Talent is as follows:\nDirect managers make initial key talent recommendations in Workday. The direct manager should include the key talent recommendation along with the Performance and Growth Potential recommendation. The\nkey talent criteria\nthat is met should be noted in Workday.\nDuring sub-department calibration sessions, Senior Managers+ should calibrate on the initial key talent recommendations and make adjustments as appropriate, keeping in mind both\nkey talent criteria\n, and number of individuals identified as key talent, as key talent makes up only ~10% of team members company-wide.\nThe Senior Manager (if applicable), Director, Senior Directors, VP, and People Business Partner (PBP) discuss and calibrate the Key Talent nominations at the department level calibration sessions.\nA final proposal goes to the E-Group member who adds in their Key Talent and reviews for final approval on Division level.\nOrganizational Value\nA very small portion of our business (roughly ~10% of the population) is considered to be key talent. As such, a team members‚Äô value in the organization should not be determined based on whether or not they are identified as key talent.\nWhile some team members are identified as key talent, this does not mean the rest of our team is not valued and important to our organization‚Äôs success. Aligned with our\nexpected performance distribution\n, approximately 60-65% of our team are core performers (or\n‚Äúperforming‚Äù\n. Core performers are responsible for keeping things consistently moving forward. This group comprises the largest population in companies across the board for a reason and is an essential part of any organization‚Äôs success.\nImpact of Being Identified as Key Talent\nWe want to make sure we use engagement tools to retain Key Talent. A few of our primary engagement tools are:\nLearning & Development\n, growth opportunities and compensation.\nLearning & Development:\nWe want to support the growth of Key Talent and their competencies, skills, and knowledge by providing them with the tools they need and the opportunities to progress their own personal and professional development goals. As a people manager it‚Äôs your priority to identify\nL&D opportunities\nfor your team.\nGrowth Opportunities:\nAs a people manager, it‚Äôs important to have career conversations and identify growth opportunities with your team members. For Key Talent, it‚Äôs especially important to discuss their motivation and ambitions. Growth opportunities can be both horizontal and vertical. Examples of growth opportunities are: expanding the scope within a team member‚Äôs current role, a lateral move to a new role, or a promotion to the next level.\nCompensation:\nAt GitLab, compensation = cash + equity + benefits. We have a\nmarket-based approach\nand differentiate pay based on performance. Our Annual Compensation Review Cycle and Annual Equity Refresh program allow us to differentiate compensation based on performance and for Key Talent.\nSuccession Planning:\nAs team members identified as Key Talent are critical to roles that have a high impact on the company‚Äôs success, it is important that we identify successors to mitigate risk in the organization.\nNote that being considered or designated as a key talent one year, does not mean or guarantee that a team member will be considered or designated as a key talent moving forward.\nKey Talent Program\nSupporting Key Talent at GitLab is a critical element of business scalability and organizational development and growth. Our Key Talent are often individuals that can be looked to for mentorship and guidance by others, but it is also important that we invest in the development of this group and ensure that key knowledge is shared. A couple of key ways we can support our Key Talent is through regular discussions and the development of\nIndividual Growth Plans (IGPs)\n.\nBelow are suggestions for getting started, resources for managers, a\nKey Talent Engagement Discussion template\n, and a recommended cadence.\nKey Talent Engagement Discussion\nOne way to set up a structure and regular cadence for touchpoints with our Key Talent population is through Key Talent Engagement Discussions. We recommended these discussion focus areas are: Overall Engagement, Growth/Challenge, and Support Needed. The main goals for check-ins with this group include:\nGet a pulse on overall engagement\nUncover potential risks for business continuity and implement plans to mitigate\nIdentify areas of support needed\nIdentify opportunity for stretch projects and continued growth\nUse this discussion as a starting point to partner with team members to get\nIndividual Growth Plans (IGPs)\nin place\nLeverage this data to identify key themes and potential actions across our Key Talent pool with the goal of improving engagement (leaders can work with their aligned\nPeople Business Partner\non this piece)\nManagers can leverage\nthis template\nto help facilitate consistency in Key Talent Engagement Discussions.\nIndividual Growth Plans (IGPs)\nKey Talent Engagement Discussions can be a great starting point to start thinking through Individual Growth Plans, which is the recommended next step. Some ideas for our Key Talent population to consider when thinking through\nIndividual Growth Plans (IGPs)\ninclude:\nStretch project (Cross functional, and an opportunity to be DRI)\nMentor (leader to help identify internal or external mentor)\nCoach or Coaching program (e.g.\nCoaching Right Now\nManagement development (if applicable)\nCross-functional/leadership exposure plan\nCross learning plan with other roles within their division\nCadence\nWe recommend that managers perform Key Talent Engagement Discussions twice per year, roughly every 5-6 months. Discussion timing is at manager discretion, as we want to ensure these discussions are held at the most relevant and impactful time for each team member. Key Talent Engagement Discussions are more geared towards stay interview format, and should not replace ongoing informal check-ins, regular feedback, and growth discussions that happen more regularly in 1:1s.\nA couple of options for Key Talent Engagement Discussions that managers can consider are:\nBefore Mid-Year check-in\n: Before our company-wide\nMid-Year check-ins\n. This cadence would be 1) Key Talent Engagement Discussions, 2) Mid year check-in discussion, 3)\nIndividual Growth Plans (IGPs)\n(\nif applicable\n). Touching base with Key Talent ahead of Mid-year check-ins can help provide an insightful baseline and level of insight before going into more performance-focused discussions.\nIn FY'24 Q2, we will begin\noptional\nKey Talent Engagement Discussions across the organization aligned with our upcoming mid-year check-in process. For divisions or departments that choose to opt in, the high level timeline would be as follows (exact dates TBD):\nMay: Key Talent Engagement Discussions (optional)\nJune:\nMid year check-ins\n(required)\nJuly: IGP (Individual Growth Plan) development (optional)\nAfter our\nTalent Assessment cycle\n: This cadence would be 1) Self-assessment, 2) Talent Assessment performance review discussion, 3) Key Talent Engagement Discussion, 4)\nIndividual Growth Plans (IGPs)\n(\nif applicable\n). We recommend that Key Talent Engagement Discussions occur\nafter\nTalent Assessments as opposed to before to ensure we have the most recent group of key talent calibrated and confirmed before Key Talent Engagement Discussions occur.\nAs mentioned above, Key Talent Engagement Discussions can be done at any point during the year, it is not necessary that they are coupled with our Mid year check-in process.\nLast modified June 6, 2025:\nUpdated Mid-Year Check-In Timeline (\n0311457d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 13579}
{"doc_id": "4ac1fcfb7d854892", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/project-mgmt", "title": "Professional Services Project Management | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nProfessional Services Project Management\nThe GitLab PMO & Delivery team accelerates Customer time to value through excellence in Professional Services Delivery. Throughout the\nPS Customer Journey\n, we work to deliver Projects within the agreed scope, timeline, and budget while embracing iteration to address evolving customer needs. Our success is measured by delivering solutions that enable customers to fully realize the benefits of GitLab products. You can find the list of PS Offerings\nhere\n.\nProject Initiate & Plan\nIteration 0\nInitial Kantata Review\nDeliver, Train, and Monitor\nProfessional Services Delivery Methodology\nReporting Project Health & Forecasting\nIterate and Validate\nDeploy & Close\nProject Initiate & Plan\nThe\nCustomer Epic\n, which is labeled as SOW# + Customer, includes internal links to all relevant Customer & contract information. After obtaining Legal approval on a Professional Services contract, PS Quote triggers an Epic in GitLab.com around the recently sold Professional Services Project, at the\nProfessional Services Group\nlevel.\nOnce a prospective Services deal reaches ‚ÄúStage 6‚Äù (closing) in the PS Customer Journey, the PSOps team refers to the\nCustomer Epic\nto find the\n‚ÄúScheduling Intake‚Äù issue\n. From this issue, the Resource Scheduling team works to gather the initial information needed to assign the PS Resources (PM, PSE, TA). This is where the PM is introduced to the Project.\nOnce assigned, the PM then reviews the Scheduling intake and begins to review/conduct the\nSales to Delivery Transition\nphase.\nGiven the close collaboration between the PS Project Management and PS Operations\nteam functions\n, please refer to the\nPS Operations Wiki\nfor more details on processes related to scheduling, reporting, billing, partner processes, and more.\nIteration 0\nincludes the initial planning between the GitLab & Customer Project Teams. Proper Iteration 0 preparedness allows us to address risk and expectation early.\nSummary of Iteration 0 Content:\nIteration 0 covers the critical preparatory phase of a project, including:\nEngagement Manager to PS Delivery Team transition process\nSetting up Support access for the Customer\nConducting Stakeholder Planning sessions\nOrganizing the Customer Kickoff meeting\nRunning initial Discovery sessions with the Customer\nEstablishing working agreements between teams\nSetting up the project communication plan\nConfiguring the GitLab project structure (PM tooling)\nInitial Kantata Review\nKantata is our primary Resource Management software. From here the PMO team reviews and manages the Delivery team hours against the Project scope in order to effectively report on Project progress with the Customer. This is also the primary mechanism for PS revenue forecasting. To ensure resources are allocated appropriately & our forecast is as accurate as possible, it‚Äôs important to adhere to the schedule outlined above.\nOnce assigned to a project, make sure you, as the PM are assigned as the lead of the project in Kantata.\nGo to Kantata > Resourcing > Resource Center > Projects and filter by Project Lead = you to review the allocations for your projects.\nGo to Kantata > Resourcing > Resource Center > Team Members to see a specific resource(s) availability in case you need to change or increase allocations.\nThere are 2 types of bookings:\nSoft bookings are non-confirmed allocations for team members (displayed as striped cells). This must be added by the PM.\nHard bookings are confirmed allocations (displayed as colored cells). This also, must be added by the PM.\nTo create a new resource request, navigate to the Resource Center > Projects. Under the list of assigned team members, you can click ‚ÄúAdd Team Member‚Äù or ‚ÄúAdd unnamed Resource‚Äù, fill-in the information at the top of the pop-up and click ‚ÄúSubmit Request‚Äù. NB: Clicking ‚ÄúPost‚Äù will not submit the request.\nBillable vs NonBillable information\n, please refer to\nTeam Metrics\npage.\nDeliver, Train, and Monitor\nProfessional Services Delivery Methodology\nWe follow the\nPSDM (Professional Services Delivery Methodology)\nfor all our Professional Service Engagements. The PSDM is a comprehensive framework that covers:\nManaging Projects in GitLab as the single source of truth\nManaging Projects according to SOW format (Agile, Timd and Materials, Fixed Price)\nEstablishing Project Velocity and Iteration scheduling\nSetting up Agile ceremonies and processes\nManaging labels for effective project tracking\nCreating and maintaining status reports\nSetting up and utilizing RAID boards for risk management\nConducting both Internal and Customer Retrospectives\nAdhering to Agile terminology and best practices\nManaging sprints/iterations for optimal delivery\nReporting Project Health & Forecasting\nPMO/Ops Reporting Schedule\nThe\nPS reporting schedule\n& month end timelines are pinned to the ps_pmo Slack channel for weekly update requirements\nThe purpose of this schedule is to reference and understand the relationship between PMO updates to Projects (health, forecasts, timecards) and PS Operations (reports, resource scheduling). Goal is to ensure Project and Program Managers are updating Project forecast in a consistent and symbiotic way to support both our PS Ops teams, as well as communicate our PS Project Portfolio review across the GitLab organization.\nTime & Materials (T&M) projects are invoiced according to time submitted at the Project level.\nFixed Fee projects (FF or FP) are invoiced at a Milestone schedule. So it‚Äôs vital to ensure anticipated dates are added to Milestones within FF projects, and we get customer signoff before the billing period ends.\nNote\nWhile SKUs are one transaction, we track against hourly (T&M) billings (eg. Consulting Blocks & Dedicated Engineer Projects)\nForecasting Time and Materials (T&M) and Fixed Fee (FF)\nForecast allocations impact PS revenue forecast and team members availability, utilization and planning.\nSoft allocations are used when final schedule is not known yet, for visibility and planning. Soft allocation will not promise team member availability for a project, and will be considered upside forecast (assuming 40% accuracy).\nHard allocations will promise team member availability, for the requested hours, once approved by the project coordinator. The allocated hours will also project into the revenue forecast (assuming 90-95% accuracy).\nIf is too early to resource request a specific resource, but we have a rough anticipation of our project schedule, please hard schedule with ‚Äúunnamed resource‚Äù as this helps us understand our capacity needs.\nTo ensure forecast revenue is accurate go under Resource Center in Kantata:\nSelect ‚ÄúProject Tab‚Äù and filter via ‚ÄúMy Projects‚Äù\nExpand project you are allocating for so you can see all PS Engineers and yourself\nClick on each team member‚Äôs name and submit RR request via the ‚Äúactivity‚Äù window opened and assign to Project Coordinator as recipient\nIf it‚Äôs a FF project, we need to update the dates on the Milestones in order for it to reflect in our forecast:\nOpen your project and open the ‚ÄúTask Tracker‚Äù tab\nExpand milestones\nUpdate sign off date\nHow to Track Upside\nUpside is reviewed on a weekly, monthly and quarterly basis. There are four scenarios around when we need to track upside within our weekly revenue tracking sheet (which is pinned to our ps-pmo channel):\nIf we are unable to confidently forecast the project resources 2 months out, we need to soft-book PSE/PM/TA time in Katata.\nIf we have a pending CO that is not yet reflected in Katata, review with the PMO Manager the details.\nIf we anticipate a Milestone date will be adjusted to complete in the quarter, but it has not yet been confirmed/verified.\nIt is helpful to call upside out in the customer report. ex: can only soft-forecast ‚Äúx‚Äù amount because of ‚Äúy‚Äù restraints.\nWeekly Forecast Call Prep\nUpdated by 8am EST Tuesday\nRun ‚ÄúRemaining Funds to Forecast‚Äù report\nSelect project status\nSort by project lead/PM\nValidate start/kickoff/end dates are populated in for all of your project tasks\nRun your Forecast report and ensure it‚Äôs accurate\nReview any upside or pushes/changes in forecast with PMO Manager\nRun the ‚ÄúTask Audit Report‚Äù\nRun the Allocation report\nReview all soft & hard bookings and look at all team members in light blue\nHelp to find work for these team members as they are under allocated!\nReview all soft-bookings Allocation report\nSelect All roles\nSelect Full quarter\nThere should be no soft allocations for the current month unless the project has just kicked off\nEnsure hard bookings are in place for all projects post kick-off\nProfessional Services Portfolio Report\nUpdated by 8am EST Tuesday\nUpdate the following in the Notes section:\n1-lined progress update\nIf there is an issue, what is the proposed action + timing of fix\nIf there is assistance needed\nDRI & contributors\nLink to RAID & Internal Customer Epic if Y/R (to review WE, CO, WaR)\nIterate and Validate\nManaging to Project Scope Changes\nProject scope for Professional Services is the outline of the work required to deliver a Service against the Customer use case. This includes an overview of the work to be delivered (scope definitions), duration, and resources (cost). All of which is included in the Statement of Work (SOW). If there is a change in project scope, the Project/Program Manager will follow the guidelines below to ensure we properly capture:\nChange Order\nChange orders (CO) are common elements of Professional Services engagements that can modify the scope definitions, duration, or cost of an ongoing project. A\nchange order issue\nand a\nchange order template\nis created by the Project/Program Manager and communicated with the Engagement Manager and Account Team. It is always attached to the Internal Customer Epic Issue.\nCommon project scope change scenarios:\nDoes need a CO:\nChange of scope definitions where the project budget requires additional funds. The PM should work with the EM/Account Team to fill out the Change Order template. From here, the EM will create a new PS opportunity for the amount required to fulfill the scope change. A new Kantata project will then be created by the PSOps team.\nIf an existing project is requested to be pushed out two months, with similar project activities and deliverables as the original scope, and the customer agrees to use the original SOW, a change order must be created and associated with a new PS opportunity that reflects the extension.\nIf the Project moves from T&M to FF (or vice versa).\nIf you feel the Project needs a CO (especially on FF projects).\nDoes not need a CO:\nIf there is a change of project scope definitions within the SOW duration and budget, no change order is needed. The PM must get written confirmation with the Customer on the change of Scope definitions. This written confirmation must be screenshot & attached to the associated Project Epic.\nFor extensions less than 2 months past the SOW expiration, the PM should capture\nwritten confirmation\n(from email or Slack) and attach the confirmation to the\n‚ÄúScope Engagement and Write SoW‚Äù\nissue found within the customer Epic.\nWork at Risk (WaR)\nWaR issue\nserves as a means to gain approval from PS leadership to commence project staffing or initiation before all paperwork is finalized. This approval is necessary whenever there‚Äôs a requirement to commit to project start dates before the opportunity is completely closed. It‚Äôs essential for both consulting and training projects. The responsibility for initiating WaR lies with the assigned Project or Program Manager with the EM/AE teams. This will enable the Delivery team to start staffing the project promptly. When seeking approval for Work at Risk, please follow the steps outlined in the WaR template above.\nA WaR is not billed to the customer until after the contract is signed.\nCommon scenarios:\nKicking off a project before SOW is signed by the Customer.\nResuming work before the CO is signed by the Customer, or the change is captured in writing.\nWork Exception (WE)\nA Work Exception is used by a PM when seeking approval for a project to exceed the hours/budget originally allotted. Navigate to the\nPS-Plan\nproject, add a new issue and select/follow the Work Exception issue template to gain approvals from PS leadership. It can be used independently or including a CO.\nBe sure close out work exception issues at the end of each quarter to assure proper quarterly accounting.\nAdding labels & detail within the issue as a PM is crucial, as this is how we will work to improve our internal PS processes.\nDeploy & Close\nProject Closure/Retrospective Meeting\nSchedule a 30-minute meeting with the customer‚Äôs point of contact (POC) to review the external project retrospective. It‚Äôs recommended the team leverages the retrospective issue template within the Customer Project (CP) within Gitlab, and act as living issue throughout the project, allowing both teams to collaborate and update it regularly. During the closure meeting, this retrospective will serve as the primary agenda and a reliable source for capturing customer feedback. The meeting should cover key successes, challenges, and areas for improvement.\nCSAT Survey\nBefore the project closure meeting, send the\nCustomer Satisfaction (CSAT) Engagement Survey\nto gather formal feedback. A template or example communication for this can be found\nhere\n. The CSAT survey provides insights into customer satisfaction and highlights areas for future improvement.\nRevenue Sign Off\nRevenue Release T&M Projects\nRevenue is recognized and released at the end of each month.\nProject hours must be logged weekly via the time sheet function in Kantata. Professional Services Engineers (PSEs) or Project Managers (PMs) log time against the project, and the Project Lead or PM approves these entries weekly.\nAt the end of each month, the Project Coordinator (PC) compiles all approved timesheets and submits the consolidated report to Finance for review and revenue release.\nRevenue Release FP Projects\nRevenue is recognized upon receipt of customer milestone acceptance or upon the completion of passive acceptance (according to the SOW terms).\nThe PM makes a copy of the\nProject Milestone/Closure document\nand attaches the document to the Customer for closure, copying Operations coordinator. The Customer can either sign the document itself or reply ‚Äúapproved‚Äù.\nOnce approved, The PM updates set the Milestone in Kantata to ‚Äúcomplete‚Äù.\nIf passive acceptance is applicable per the SOW, the Customer has 5 business days to approve or deny before we can set the milestone to ‚Äúcomplete‚Äù. Day 1 is counted as the day the notification is sent.\nKey Updates for Kantata\nWithin all respective Milestone tasks, complete the following:\nSign-Off Sent: Update this custom field when the acceptance request email is sent.\nSign-Off Received: Update this custom field when customer acceptance is received or passive acceptance is achieved. Attach the acceptance email (in PDF form) to the milestone.\nPassive Acceptance Utilized: If passive acceptance is used, update this field accordingly.\nFor both acceptance scenarios, attach the acceptance email or milestone document to the milestone.\nUpdate actual start/kickoff/end dates\nNote: Only top-level milestone fields should be updated. Sub-activities within the milestone remain unchanged.\nInternal Project Retrospective\nSchedule an internal project retrospective meeting with the GitLab Account Team, GitLab PS Project Team, Engagement Manager, and Delivery Managers, TA, and Practice team. The\ninternal retrospective\nis essential for documenting lessons learned, scoping insights, and opportunities for continuous improvement.\nKantata Updates\nOnce the project is fully completed, with all hours submitted and accounted for, and milestone acceptance confirmed (for fixed-price projects), update the project status in Kantata to ‚ÄúCompleted‚Äù.\nLast modified May 1, 2025:\nAdded specifics to project closure/sign-off for FP Project (\nf1dd15de\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2513}
{"doc_id": "b75bba90b8f29e3b", "url": "https://handbook.gitlab.com/handbook/engineering/development", "title": "Development | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nAI Model Validation at GitLab\nHow we monitor the market for models to evaluate and respond to on-demand requests for new model evaluation.\nDatabase Engineering\nThis page is dedicated to database application engineering and provides an entry-point for resources ‚Ä¶\nDevelopment Department Performance Indicators\nExecutive Summary KPI Health Status Past Due InfraDev Issues Okay We are now below 5. We did have a ‚Ä¶\nDevelopment OKRs\nDevelopment Required Approvals\nOverview There are specific scenarios we are identifying that will require additional approval ‚Ä¶\nEngineering Principles\nEngineering Principles At GitLab, Company Culture is very important to us. The main ingredient of ‚Ä¶\nFulfillment Sub-department\nThe Fulfillment Sub-department is composed of the Billing and Subscription Management, Fulfillment Platform, Provision, and Utilization development teams working on the infrastructure between the systems which affect the user purchasing process that support the GitLab DevOps Platform.\nGrowth Stage\nThe Growth Stage consists of development teams working in the product delivering enhancements and running experiments\nKeeping secure coding knowledge fresh in development\nSecure Coding Training Guidelines It is essential that all developers are aware of secure coding ‚Ä¶\nManager Notes\nThis page is for any development manager notes we want to share more broadly. A directory was ‚Ä¶\nOnboarding\nProcesses\nSec Section\nThe Sec Section is composed of development teams working on Secure and Software Supply Chain Security features of the GitLab DevOps Platform.\nLast modified December 15, 2023:\nMigrate Engineering ruby code to the new handbook (\nc8544f4a\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 254}
{"doc_id": "80dc24d55d96595b", "url": "https://handbook.gitlab.com/handbook/communication", "title": "GitLab Communication | The GitLab Handbook", "text": "The Handbook\nGitLab Communication\nWe‚Äôre an all-remote company that allows people to work from almost anywhere in the world. It‚Äôs important for us to practice clear communication in ways that help us stay connected and work more efficiently.\nWe‚Äôre an\nall-remote\ncompany that allows people to work from\nalmost anywhere in the world\n. We hire great people regardless of where they live, but with GitLab team members across\nmore than 60 countries\n, it‚Äôs important for us to practice clear communication in ways that help us stay connected and work more efficiently.\nTo accomplish this, we use\nasynchronous communication\nas a starting point\nand stay as open and transparent as we can by communicating through public issues,\nmerge requests\n, and\nSlack channels\n.\nWe also place an emphasis on ensuring that conclusions of offline conversations are written down.\nWhen we go\nback and forth three times,\nwe jump on a\nsynchronous video call\n.\nWe communicate respectfully and professionally at all times.\nEffective & Responsible Communication Guidelines\nAssume\nPositive Intent\n.\nAlways begin with a position of positivity and grace.\nKindness Matters.\nYou are looking at a screen, but you are really talking to a person. If you wouldn‚Äôt say it to a person‚Äôs face, do not send it to them in a text message.\nExpress Your Thoughts Responsibly and Inclusively.\nWe live in different locations and often have very different perspectives. We want to know your thoughts, opinions, and feelings on things. We also ask you to consider the guidelines around communicating potentially sensitive topics.\nOwn It.\nIf you say it or type it, own it. If it hurts the company or an individual, even unintentionally, we encourage you to look at things from other points of view and apologize easily.\nBe a Role Model of our\nValues\n.\nFeedback is Essential.\nIt is difficult to know what is appropriate in every one of our team members 60+ countries. We encourage team members to give feedback and receive feedback in a considerate way.\nDo not underestimate a 1:1.\nAsynchronous communication (e.g., via text) is helpful and necessary. In some cases (e.g., to clarify misunderstandings) it can be much more effective to jump on a Zoom video call.\nAlways Adhere to our\nAnti-Harassment Policy\nand\nGitLab Code of Business Conduct and Ethics\n.\nEveryone should be comfortable in their work environment.\nFocus on what we can directly influence.\nThere are many factors we can‚Äôt directly influence and we should avoid spending time discussing those things. For example, we don‚Äôt talk about our\nmarket capitalization\nbecause aspects of this are out of our control. Instead, we should focus on how we can work together to achieve company objectives and grow\nannual recurring revenue\n.\nCommit to\nactive and effective listening\n.\nEmbracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about\nmastering the use of the written word in an all-remote setting\n.\nEveryone is a moderator\nIf you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format.\nIf there is an issue to raise regarding someone‚Äôs communication or conduct, team members should follow the process for\nraising communication concerns\nby sharing their concern with their manager or, if preferred, email Team Member Relations (\nteammemberrelations@gitlab.com\n) directly.\nAsynchronous communication\nIn an\nall-remote setting\n, where team members are empowered to live and work where they‚Äôre most fulfilled, mastering asynchronous workflows is vital to avoiding\ndysfunction\nand enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward\nwithout\nthe need for additional stakeholders to be available at the same time your communique is sent.\nTo learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit\nGitLab‚Äôs guide to embracing asynchronous communication\n.\nCommunicate directly\nWhen working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary.\nEscalate to management if you are not getting the support you need. Remember that everyone is a\nmanager of one\nand they might have to complete their own assignments and inform the reporting lines.\nCommunicating Potentially GitLab Sensitive Topics\n(This guidance supplements and overlaps with\nGitLab‚Äôs SAFE Framework\n, the guidance on the use of\nthe internal handbook\nAs GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication.\nWords have impact long after they are written, and even when you‚Äôre communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our\nGuidelines for communicating effectively and responsibly through text\n.\nConfidentiality levels\nAt GitLab, we are\npublic by default\n, but some information is classified as internal or limited access. Please see the\nconfidentiality levels\nhandbook page for details on this.\nExamples of Potentially GitLab Sensitive Topics\nTeam member data (individual performance, start dates, departures)\nViolations, or potential violations, of policies and/or local rules and regulations\nCustomer or partner information (logos, trademarks, spend)\nMaterial nonpublic information\nThe above examples overlap with the\nGitLab‚Äôs SAFE Framework\nexamples. We recommend you to further review that page for more information and context.\nWhat are the risks?\nLegal risk:\nThese are the risks that arise from regulations and laws that govern GitLab or the market in which it operates. This includes, but is not limited to, content that would compromise a GitLab team member, customer, or user‚Äôs personal data and/or privacy.\nMorale risk:\nRaising GitLab sensitive topics that may be misinterpreted without the opportunity to ask clarifying questions can create risk to team culture and/or morale.\nPR risk:\nRemember that anything you document could ultimately be shared/viewed externally. Consider that a discussion in a public MR or issue is a demonstration of our\nvalues\nto those outside of GitLab who are looking to learn more about how we collaborate.\nWe encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting.\nDetermining Which Communication Forum To Use\nThe table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage.\nCommunication Forum\nWhen To Utilize\nUse\nthe internal Handbook\naligned with the guidelines\nWhen you want to document information for team members that is\ninternal-only\n, including\nnot public\nand not\nlimited access\nExternal MR/issue (not confidential)\nFor discussion and collaboration when there is no risk suspected or identified (directly or later) and it doesn‚Äôt fall into\nnot public\ncategory\nInternal MR/ confidential issue\nFor discussion and collaboration when there is no risk suspected or identified but adhering to things that are\ninternal-only\n,\nnot public\n, SAFE Framework/General Communication Guidelines\nYour Manager, DRI and/or Legal\nFor discussion and collaboration when in doubt about potential risk and you want to review if there‚Äôs a potential risk\nFor discussion and collaboration when there‚Äôs a risk suspected or identified, communicate directly with the DRI verbally via Zoom. Examples include issues where Limited Access applies or it covers a change to People Process/policy.\nPeople Group (your People Business Partner or Team Member Relations)\nFor discussion and collaboration when there‚Äôs a risk suspected or identified, a policy violation, and/or it‚Äôs a private matter\nGitLab‚Äôs Whistleblower policy\nFor flagging a situation that is a violation as set out in the policy\nWhen in doubt, you can reach out to your People Business Partner and/or your leadership team  directly.\nOrganization code names\nPlease see our\nProject names section\n.\nInternal communication\nInternal communication is any work related communication at a company.\nInternal Communication includes team member conversations, wider team discussions, or internal announcements to the company or targeted outreach to select internal audiences.\nAt GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue.\nSince we believe that all team members must be\nManagers of One\n, most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others.\nIn those cases, the DRIs may want to engage the\nInternal Communications function\n.\nTop tips and best practices\nAll written communication happens in English, even when sent one on one, because sometimes you need to forward an email or chat.\nUse\nasynchronous communication\nwhen possible: merge requests (preferred) or issues. Announcements happen on the appropriate Slack channels and people should be able to do their work without getting interrupted by chat.\nDiscussion in issues or Merge Requests is preferred over everything else. If you need a response urgently, you can Slack someone with a link to your comment on an issue or merge request, asking them to respond there, however be aware that they still may not see it straight away. See\nSlack\nfor more.\nIf you choose to email instead of chat it is OK to send an\ninternal\nemail that contains only a short message, similar as you would use in chat.\nYou are not expected to be available all the time. There is no expectation to respond to messages outside of your planned working hours.\nSometimes synchronous communication is the better option, but do not default to it. For example, a video call can clear things up quickly when you are blocked. See the\nguidelines on video chats\nfor more detail.\nIt is OK to ask as many questions as you have. Please ask them so many people can answer them and so others can benefit from seeing the answer. Use issues or public chat channels (like\n#questions\n) instead of direct messages or one-on-one emails. If you have researched in the handbook and could not find the answer or need clarity, include the handbook link you were reviewing and state ‚Äúwhile looking in the handbook I could not find x,y,z‚Äù.\nIf you send a handbook link to someone as an answer to a question, consider adding some context, especially if they are new to GitLab. It‚Äôs great that we often have the answer documented, but it‚Äôs not always easy to find if you are a new team member.\nIf the answer to a question isn‚Äôt documented, please immediately make a merge request to add it to the handbook in a place you have looked for it. It is great for the person who answered the question to see you leading by example to ensure that question only needs to be answered once. A merge request is the best way to say thanks for help.\nIf you mention something (a merge request, issue, commit, webpage, comment, etc.) please include a link to it.\nAll company data should be\nshareable\nby default. Do not use a local text file, but rather leave comments on an issue.\nWhen someone asks something, give back a deadline or that you did it. Answers like: ‚Äòwill do‚Äô, ‚ÄòOK‚Äô, ‚Äòit is on my todo list‚Äô are not helpful. If it is small it‚Äôs better to spend 2 minutes and do the tasks so the other person can mentally forget about it. If it is large you need to figure out when you‚Äôll do it, by returning that information the other person might decide to solve it in another way if it takes too long.\nIt is OK to bring an issue to someone‚Äôs attention with a CC (‚Äúcc @user‚Äù), but CCs alone are not enough if specific action is needed from someone. The mentioned user may read the issue and take no further action. If you need something, please explicitly communicate your need along with @ mentioning who you need it from.\nAvoid creating private groups for internal discussions:\nIt‚Äôs disturbing (all users in the group get notified for each message).\nIt‚Äôs not searchable.\nIt‚Äôs not shareable: there is no way to add people in the group (and this often leads to multiple groups creation).\nThey don‚Äôt have a subject, so everyone has to remember the topic of each private group based on the participants, or open the group again to read the content.\nHistory is lost when leaving the group or\nafter 90 days\n.\nIt is perfectly fine to create a channel, even for a single customer meeting. These channels should be named ‚Äúa_\n-internal‚Äù to indicate their ‚Äúinternal‚Äù nature (not shared with customers).\nUse\nlow-context communications\nby being explicit in your communications. We are a remote-only company, located all over the world. Provide as much context as possible to avoid confusion. Relatedly, we use\nubiquitous language\nfor communication efficiency.\nWhen discussing concepts, be careful not to lean too much into hypotheticals. There is a tipping point in which it decreases value and no longer becomes constructive at helping everyone come into a unified decision.\nConsult our\ntips for better writing\n.\nInternal Communication Channel Guidance\nWhat/When\nThe Loop\nSlack\nEmail/Newsletters\nMeetings\nPrimary Purpose\nTransparency around GitLab procedures, documenting information handbook-first\nConnect team members with news, information, and stories\nReal-time collaboration and quick communications\nFormal communications, select company updates, and consolidated updates to targeted audiences\nSynchronous discussions and collaboration\nBest For\n1.) Sharing processes and/or procedures valuable to customers, community, or candidates 2.) Creating external transparency (core values, mission, and vision) 3.) Documenting workflows and standardized processes\n1.) Finding/sharing company information, announcements, and events 2.) Learning/sharing programs and initiatives 3.) Accessing personalized and relevant content 4.) Team member storytelling, connection, and engagement 5.) Team showcases and wins\n1.) Immediate discussions 2.) Quick questions 3.) Team coordination 4.) Time-sensitive, informal updates 5.) Instantaneous feedback/communication 6.) Channel-specific discussions\n1.) Critical and/or formal announcements 2.) Newsletters with targeted updates 3.) External communications (customers, vendors, etc.) 4.) Items requiring official email notification 5.) Informing targeted audiences 6.) Select leadership communications\n1.) Complex discussions  2.) Decision-making sessions 3.) Relationship building 4.) Project kickoffs/reviews 5.) Interactive sessions 6.) Ideation and/or problem solving 7.) Engaging and visual presentations 8.) Resolving conflicts\nNot For\n1.) Time-sensitive updates 2.) Internal communication 4.) Team-specific news 5.) Daily operational matters\n1.) Technical documentation 2.) Small audience communication 3.) Highly confidential information. Note: Private Sites is an option for safeguarding access\n1.) Detailed documentation 2.) Complex content sharing 3.) Evergreen or long-term Information sharing\n1.) Collaborative discussions 2.) Questions requiring quick responses 3.) Urgent issues requiring immediate attention\n1.) Simple updates 2.) Information sharing only 3.) Documentation of processes 4.) That which could be handled asynchronously\nKey Features / Benefits\n1.) Version control 2.) Public accessibility 3.) Single source of truth for processes\n1.) Customization and personalization 2.) Newsletter, feed, employee generated content 3.) AI powered search and content governance 4.) Fosters Communication, connection, and culture\n1.) Collaboration and connection 2.) Integrations 3.) Real-time communication 4.) Productivity and efficiency 5.) Supports projects, teams, and transparency\n1.) Improved awareness 2.) Streamlined communication 3.) Personalized content delivery\n1.) Face-to-face interaction 2.)Screen and presentation sharing 3.) Breakout rooms 4.) Recording capability\nStructure content instead of using FAQs\nWe want to\navoid unstructured content\nwhich includes FAQs (Frequently Asked Questions), especially for internal communication.\nFAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which aren‚Äôt questions.\nStructured content around GitLab, the product, should be in\nGitLab Docs\nand structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information.\nRestructuring the content\nAs an example, let‚Äôs say your FAQ would have a question like:\nQ: I‚Äôm not seeing widget X, what should I do?\nA: If you‚Äôre not seeing widget X, you can verify if it‚Äôs enabled or not by going to User Profile -> Settings and ensure the checkbox is enabled under Enable widget X\nYou can reframe it to:\nHow to enable widget X\nYou can enable widget X by going to User Profile -> Settings and ticking the checkbox next to Enable widget X then clicking on the Save button\nFAQs are discouraged elsewhere as well\nContent guidelines across the industry support avoiding FAQs:\nhttps://www.plainlanguage.gov/guidelines/web/avoid-faqs/\nhttps://digital.gov/2015/04/27/are-faqs-still-relevant/\nhttps://guides.18f.gov/content-guide/our-approach/structure-the-content/\nhttps://gds.blog.gov.uk/2013/07/25/faqs-why-we-dont-have-them/\nhttps://thegood.com/insights/faq-pages/\nhttps://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi/\nMultimodal communication\nEmploy multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information.\nWhen doing this, create and link to a\nsingle source of truth\n: ideally the\nhandbook\n, otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth.\nWhen referring to email that recipients should have received, reference the sender and subject of the email so it‚Äôs easy to find. For example, ‚ÄúYou should have received an email from Jane Smith with the subject ‚ÄòTraining Seminar Details‚Äô‚Äù.\nAsking ‚Äúis this known‚Äù\nIf something is behaving strangely on\nhttps://gitlab.com\n, it might be a bug. It could also mean that something was changed intentionally.\nPlease search if the issue has already\nbeen reported\n. If it has not been reported, and you are sure it is a bug, please\nfile an issue\n.\nIf you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel\n#is-this-known\n.\nIf you know which stage of the DevOps lifecycle is affected, it is also okay to ask in #s_{stage}, for example\n#s_manage\n.\nWhen you ask:\nMake sure that no-one has experienced this issue before, by checking the channel for previous messages.\nDescribe the behavior you are experiencing, this makes it searchable and easier to understand.\nDifferent people might look for different things in the same screenshots.\nAsking in a single channel helps discoverability, duplicated efforts and reduces noise in other channels.\nPlease refrain from asking in general purpose channels like\n#frontend\n,\n#backend\n,\n#development\nor\n#questions\n.\nNumbering is for reference, not as a signal\nWhen taking notes in an agenda, in the handbook, or in other documents, keep items numbered so we can refer to Item 3 or 4a.\nThe number is not a signal of the importance or rank of the subject unless explicitly stated to be such.\nIt is just for ease of reference.\nCross link\nLinking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the\nLive Doc Meeting\nsection of the All Remote Guide links to the\nLive Docs Meetings page\n. The\nLive Docs Meetings page\nlinks back to the\nLive Doc Meeting\nsection of the All Remote Guide.\nAcknowledgement Receipts (ACK)\nInformal ACKs\nIn informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following:\nSlack emoji reaction of\n:ack:\nor an\nresponse => Acknowledged, or message received\nThumbs up üëç => good idea\nWhite checkmark ‚úÖ => task is complete or done\nHeart ‚ù§ Ô∏è= expression of gratitude or appreciation\ncc @mentions => if someone needs to see a message\nFormal ACKs\nIn order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process.\nTo prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one.\nAs a guideline, we‚Äôd expect no more than one per quarter to be sent out. Too many ACKs lose power.\nTo initiate an ACK process:\nClone the form from the\nACK template\nand fill it out.\nLink to MRs and Handbook pages instead of duplicating your content in the form.\nWhy handbook first?\nAsk People Ops to pull a report from Workday with the column headers First Name, Last Name, Job Title, Department, Manager, and Work Email. Double check it and turn the emails into a comma-delimited string with an excel formula like this:\n=TEXTJOIN(\", \", true, Sheet1!E2:E432)\nSend the form and expect to get 50% of the responses in the first 24 hours. To get the rest:\nPost in common Slack channels.\nAdd to staff meeting agendas.\nSuggest to team managers to post to their team Slack channels, ask for explicit\n:ack:\nand pin to the channel until everyone responds.\nLastly, reach out 1-on-1 to stragglers while being respectful of vacation time.\nSay thanks\nAs we continue to build on\ninclusion\n, recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of\n.\nThank people that did a great job in our\n#thanks\nSlack channel. Almost\neveryone in the company is active in this channel\nso please don‚Äôt be shy.\nConsider other channels where recognition can be acknowledged: team meetings, issues, company calls, 1-1 meetings, etc.\nIf someone is a team member just\n@\n-mention them, if multiple people were working on something try\n@\n-mentioning each person.\nWhen announcing a completed project, list the key contributors.\nPlease be as timely as possible with your recognition.\nIf possible please include a link with your thanks that points to the subject matter that you are giving thanks for, for example a link to a merge request.\nPlease do not mention working outside of working hours, we want to minimize the pressure to do so.\nPlease do not celebrate GitLab contribution graphs that include working for uninterrupted weeklong cycles, as this does not foster healthy\nwork/life harmony\nfor all team members. While GitLab team members are free to time-shift and work weekends in place of weekdays, we discourage celebrating the absence of time away from work.\nDo not thank the CEO or other executives for something that the company paid for, thank GitLab instead.\nTo thank someone who is not a team member, you can\nnominate them for community swag\n.\nUnderstand that everyone doesn‚Äôt need or want recognition. Once this is advised, please respect when they don‚Äôt.\nValues emoji\nAdd Values emoji reactions to thank you messages in the\n#thanks\nslack channel\nor feel free to use them in GitLab.com, other slack channels and\nsocial media, when you see alignment to our values:\nGitLab‚Äôs values\n.\nEmoji\nCustom values emoji\nMeaning\n:handshake:\n:collaboration-value:\nCollaboration\n:chart_with_upwards_trend:\n:results-value:\nResults for Customers\n:stopwatch:\n:efficiency-value:\nEfficiency\n:globe_with_meridians:\n:diversity-value:\nDiversity Inclusion and Belonging\n:footprints:\n:iteration-value:\nIteration\n:eye:\n:transparency-value:\nTransparency\nAs a second iteration, we have\nadded these custom emoji to GitLab\nto enable tanuki values reactions in issues, epics, and MRs within the\ngitlab-com\nand\ngitlab-org\ngroups.\nAs a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings!\nIndicating availability\nIndicate your availability by updating your own calendar using Google‚Äôs\n‚Äúout of office‚Äù\nfeature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select.\nPut your planned away time including holidays, vacation, travel time, and other leave in your own calendar. Please see\nCommunicating your time off\nfor more.\nSet your working hours in your Google Calendar settings.\nUtilize Time Off by Deel to keep other GitLab team members aware of your\nplanned time away\nwithin Slack.\nInformal communication\nis made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure.\nIn other words, it‚Äôs what happens when we get to know each other and talk about anything other than work.\nInformal communication is a\nvital part of GitLab culture\n, and we‚Äôve listed\n20+ ways to engage\n.\nNot sure where to go?\nIf there is something that you want to discuss, but you do not feel that it is\na reasonable option to discuss with either your manager or CEO, then you can reach\nout to any of the other\nC-level GitLab team members\n.\nStart with a Merge Request\nWhen possible, it‚Äôs best practice to start a discussion with a\nMerge Request (MR)\ninstead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on.\nAlways\nopen\nan MR for things you are suggesting and/or proposing. Whether something is not working right or we are iterating on a new internal process, it is worth opening a merge request with the minimal valuable change instead of opening an issue encouraging open feedback on the problem without proposing any specific change directly. Remember, an MR also invites discussion, but it‚Äôs specific to the proposed change which facilitates focused decision.\nNever ask someone to create an issue when they can default to the merge request.\nStarting with a Merge Request is part of\nHandbook First\nand helps ensure the handbook is up-to-date when a decision is made. It is also how we make it possible for\nEveryone to Contribute\n. This is true, not just for updating the handbook but for updating all things.\nMerge Requests, by default, are\nnon-confidential\n. However, for\nthings that are not public by default\nplease open a confidential issue with suggestions to specific changes that you are proposing. The ability to create\nConfidential Merge Requests\nis also available. When possible, consider not including sensitive information so the wider community can contribute.\nNot every solution will solve the problem at hand. Keep discussions focused by\ndefining the problem first\nand\nexplaining your rationale\nbehind the\nMinimal Valuable Change (MVC)\nproposed in the MR.\nBe proactive and consistent with communication on discussions that have external stakeholders such as customers. It‚Äôs important to keep communication flowing to keep everyone up to date. MRs can appear stale if there aren‚Äôt recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that MRs are closed in a timely manner through approving or rejecting the open requests.\nHave a\nbias for action\nand\ndo not aim for consensus\n. Every MR is a\nproposal\n, if an MRs author isn‚Äôt responsive take ownership of it and complete it. Some improvement is better than none.\nCross link\nissues or other MRs with related conversations. E.g. if there‚Äôs a Zendesk ticket that caused you to create a GitLab.com MR, make sure to document the MR link in the Zendesk ticket and vice versa. And when approving or rejecting the MR, include reason or response from Zendesk. Put the link at the top of each MR‚Äôs description with a short mention of the relationship (Report, Dependency, etc.) and use one as the central one and ideally close the alternate if duplicate.\nWhen providing links to specific lines of code relevant to the MR,\nalways use a permalink\n(a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see\nLink to specific lines of code\n.\nIf submitting a change for a feature,\nupdate the description with the final conclusions\n(Why an MR was rejected or why it was approved). This makes it much easier to see the current state of an issue for everyone involved in the implementation and prevents confusion and discussion later on.\nSubmit the\nsmallest\nviable and valuable thing\n. When proposing a change, submit the smallest reasonable commit, put suggestions for other enhancements in separate issues/MRs and link them. An MR can start off as only a\nproblem description and TODO comments\n. If you‚Äôre new to GitLab and are writing documentation or instructions, submit your first merge request for at most 20 lines.\nDo not leave MRs open for a long time. MRs should be\nactionable\n‚Äì stakeholders should have a clear understanding of what changed and what they are ultimately approving or rejecting.\nMake a conscious effort to\nprioritize\nyour work. The priority of items depends on multiple factors: Is someone waiting for the answer? What is the impact if you delay it? How many people does it affect, etc.? This is detailed in\nEngineering Work flow\n.\nWhen submitting a MVC,\nask for feedback\nfrom your peers. For example, if you‚Äôre a designer and you propose a design, ping a fellow designer to review your work. If they suggest changes, you get the opportunity to improve your design and propose an alternative MR. This promotes collaboration and advances everyone‚Äôs skills.\nRespond to comments within a\nthreaded discussion\n. If there isn‚Äôt a discussion thread yet, you can use the\nReply to comment\nbutton from the comments to create one. This will prevent comments from containing many interweaved discussions with responses that are hard to follow.\nIf your comment or answer contains separate topics, write separate comments for each, so others can address topics independently using the\nReply to comment\nbutton.\nIf you have received any feedback or questions on your MR, try to acknowledge comments as\nthat‚Äôs how we ensure we create an environment of belonging for all team members\n. Merging your MR as-is without giving an answer or any response makes the commenters feel their opinions are unheard. If you are the\nDirectly Responsible Individual\n(DRI) who does not have to make a fast decision, you can choose not to change your MR, but you should acknowledge the comments or feedback, consider if they warrant a change to your MR, and\nsay why, not just what\n.\nIf there are many comments, you can choose to summarize key feedback areas and share your response at a high level. We appreciate that\nif you force a DRI to explain too much, you‚Äôll create incentives to ship projects under the radar. The fear of falling into a perpetual loop of explaining can derail a DRI, and cause people to defer rather than working with a bias for action\n. This is something we want to avoid.\nWhen fast decisions are needed,\nwe‚Äôll have to accept that people listened to us but don‚Äôt owe us an explanation to have fast decisions based on everyone‚Äôs input\n. The goals are to be transparent and collaborative‚Äìnot to lose efficiency. Not everyone will agree, but we expect all people to\ndisagree, commit, and disagree\n.\nFor GitLab, the product merge request guidelines are in the\nContribution guide\nand code review guidelines for reviewers and maintainers are described in our\nCode Review Guidelines\n.\nEven when something is not done, share it internally so people can comment early and prevent rework.\nCreate a\nDraft\nmerge request to prevent an accidental early merge. Only use Draft when merging it would\nmake things worse\n, which should rarely be the case when contributing to the handbook. Most merge requests that are in progress don‚Äôt make things worse. In this case, do not use Draft; if someone merges it earlier than you expected just create a new merge request for additional items. Never ask someone to do a final review or merge something that still has Draft status. At that point you should be convinced it is good enough to go out.\nIf any follow-up actions are required on the issue after the merge request is merged (like reporting back to any customers or writing documentation), avoid auto-closing the issue.\nIf a project requires multiple approvals to accept your MR, feel free to assign multiple reviewers concurrently. This way the earliest available reviewer can start right away rather than being blocked by the preceding reviewer.\nIf the MR involved gets a lot of comments, you can turn it into a\nManager Mention MR\n.\nConsider recording a concise video or audio file outlining the merge request and uploading it to the GitLab\nUnfiltered channel\non YouTube. This will make content more accessible, prevent future confusion, allow for multitasking (e.g. cooking dinner and listening to the video), and increase participation for folks who digest audio information better than visual.\nScaling Merge Requests through ‚ÄúManager Mention MRs‚Äù (formerly Consolidated MRs)\nSome merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as ‚ÄúManager Mention MRs‚Äù by clearly designating them as such at the beginning of the MR description with the following code block:\n### Manager Mention MR\nThis MR is a [Manager Mention MR](/handbook/communication/#scaling-merge-requests-through-manager-mention-mrs-formerly-consolidated-mrs). Contributors should tag their manager when adding a comment. If managers are tagged they should either respond to the question or summarize and tag their manager.\nAdditionally, add the\n~\"Manager Mention MR\"\nlabel to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation.\nWe tried Manager Mention MR‚Äôs for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. We‚Äôre starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days‚Äô notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members.\nFor all managers:\nIt is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label\n~\"Manager Mention MR\"\nto be notified when MRs transition to this designation.\nWhat not to do:\nNot communicate to team members about company-wide changes. Ignoring team member questions, whether that‚Äôs in a 1:1 or Manager Mention MR.\nWhat to do:\nIf one of your team members has a suggestion, solution or sees an issue, see if talking through the communication will answer any of their questions. Team members are also allowed to bring forward their ideas in the Manager Mention MR addressed to you, we want everyone to contribute. As a manager, you will be expected to communicate changes to your teams and also be present to answer any team member questions, whether that‚Äôs in a 1:1 or Manager Mention MR. As a manager, it is part of your role to understand and own change management for your team and properly triage the process and expectations. Consider a synchronous call with the team member for further context, make a suggestion, link to additional context, delete any unnecessary comments from their team, or escalate to the author of the MR. Ensure that the comments of your reports you interact with were made after the Manager Mention label was added.\nFor team members:\nCheck if the MR you are about to comment on has the\n~\"Manager Mention MR\"\nlabel. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question.\nWhat not to do:\nLeaving a comment and CC‚Äôing your manager at the end of your post, but not addressing your manager directly.\nWhat to do:\nAddress your manager directly at the beginning of your message as your comments should be addressed to your manager. If you have a suggestion, solution or see an issue with a big change, you can also bring it up directly to your manager. The MR is not a poll. Give suggestions on how to improve and try to find data that helps support your argument or change in the MR.\nMRs should not start out as a Manager Mention MR as we prefer\ncommunication to be direct\n. They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments.\nWhen an MR is changed to be\nManager Mention\n, the person making this change should add a comment stating this so that everyone tracking the MR can be informed.\nIssues\nIssues are valuable when there isn‚Äôt a specific code change that is being proposed, such as:\nCrafting a research proposal to validate a problem or solution\nIdeating on designs in order to solve a particular problem\nBreaking down implementation tasks in order to deliver a solution iteratively\nTracking progress of particular tasks, especially when an issue board is needed\nWhen utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed.\nBelow are a few things to remember when creating issues:\nWhen\nclosing\nan issue leave a comment explaining why you are closing the issue and what the MVC outcome was of the discussion (if it was implemented or not).\nWe keep our\npromises\nand do not make external promises without internal agreement.\nBe proactive and consistent with communication on discussions that have external stakeholders such as customers. It‚Äôs important to keep communication flowing to keep everyone up to date. Issues can appear stale if there aren‚Äôt recent discussions and no clear definition on when another update will be provided, based on feedback. This leaves those subscribed in the dark, causing unnecessary surprise if something ends up delayed and suddenly jumps to the next milestone. It is important that issues are closed in a timely manner. One way of doing this is having the current assignee set a due date for when they will provide another update. This can be days or weeks ahead depending on the situation, prioritization, and available capacity that we may have.\nPro Tip:\nWhen creating a Merge Request you can add\ncloses: #[insert issue number here]\nand when the Merge Request is merged, the issue will automatically close. You can see an example of this\nhere\n.\nNote:\nAutomatic issue closing\nis disabled on some projects.\nIf a user suggests an enhancement, try and find an existing issue that addresses their concern, or create a new one. Ask if they‚Äôd like to elaborate on their idea in an issue to help define the first MVC via a subsequent MR.\nCross link\nissues or MRs with related conversations. Another example is to add ‚ÄúReport: \" lines to the issue description with links to relevant issues and feature requests. When done, add a comment to relevant issues (and close them if you are responsible for reporting back, or reassign if you are not). This prevents internal confusion and us failing to report back to the reporters.\nWhen cross-linking issues or MRs, include a preview of the content you are linking, to facilitate\nlow-context communication\n:\nGood:\nthis would cause performance issue similar to #123456\n. The reader has full information on first read and can refer to the link for more.\nAvoid:\nthis would cause issue similar to #123456\n. The reader needs to click the link and find the relevant information among other discussion threads, before switching back to the original discussion.\nWhen providing links to specific lines of code relevant to the issue,\nalways use a permalink\n(a link to a specific commit for the file). This ensures that the reference is still valid if the file changes. For more information, see\nLink to specific lines of code\n.\nPrioritize your work on issues in the current\nmilestone\n.\nUse the public issue trackers on GitLab.com for everything since\nwe work out in the open\n. Issue trackers that can be found on the relevant page in the handbook and in the projects under\nthe gitlab-com group\n.\nAssign an issue to yourself as soon as you start to work on it, but not before that time. If you complete part of an issue and need someone else to take the next step,\nre-assign\nthe issue to that person.\nEnsure the issue\ntitle\nstates what the desired outcome should be. For instance, for bugs make sure the issue states the desired result, not the current behavior.\nRegularly update\nthe issue description with the latest information and its current status, especially when important decisions were made during the discussion. The issue description should be the\nsingle source of truth\n.\nIf you want someone to review an issue, do not assign them to it. Instead, @-mention them in an issue comment. Being assigned to an issue is a signal that the assignee should or intends to work on it. So you should not assign someone to an issue and misrepresent this with a false signal.\nIf you‚Äôd like to inform someone about an issue or assign a task to them, do so via an issue comment, not only by adding them to the description. The to-do item generated when you mention someone in an issue description provides little context for the action you‚Äôre requesting. But using a comment to explicitly inform someone of the action you‚Äôd like them to take ensures that when they read the associated to-do item they won‚Äôt need to read the entire issue to gather the context they need to complete the work.\nDo not close an issue until it is\ndone\n. It‚Äôs okay to explicitly ask if everyone is on board and in agreement on how to move forward, whether to iterate, close the open issue, or create a subsequent MR to implement a MVC.\nOnce a feature is\ndone\n, update the description to add a link to the corresponding documentation. When using a Search Engine, issues often appear before documentation pages, which makes it harder to find the relevant information about the feature.\nWrite issues so that they exclude private information. This way, the issue can be public. Only use confidential issues, if the issue must contain\nnon-public information\n.\nNote:\nConfidential issues are\naccessible to all members of the project with Reporter access and above\n. You may consider using a Google Doc for items that require a stricter level of confidentiality.\nIf the content within a public issue transitions to become what is deemed confidential\nnon-public information\n, the issue may be made confidential.\nIf the content of a public issue draws comments that are deemed in violation of our\ncode of conduct\nthe issue may be locked and may\nundergo moderation\n.\nHow to make a company wide announcement\nConsider the subject and the audience.\nQuestions you might want to ask yourself: Is this relevant to all team members globally?\nIs this something important, urgent and high priority? Is there a better place for this communication, such as a more informal Slack channel?\nKeep it simple, brief and summarize what is important. Cover the 5 W‚Äôs. What, Why, Who, When, Where (you can also add How, if required as a call to action). The majority of information should still be in the Handbook which you include links to.\nCommon company wide announcements include (but are not limited to): organization changes, policy iterations, requests to participate in a company survey, unveiling the next GitLab Contribute location, codebase migrations, process improvement and security/safety announcements.\nRemember Handbook First.\nWhen you announce anything, include links to the respective Handbook pages for more information. Consider adding link to an Issue if the information is not public yet.\nOptional AMA.\nIf desired and appropriate, offer a company wide Zoom call to host an AMA (Ask Me Anything). Oftentimes, questions can be managed within the Discussion tab of a GitLab Issue or Merge Request. For broad announcements, such as registration opening for GitLab Contribute, an AMA may be better suited for a large volume of inquiries. To schedule a company wide call, please make a request in the\n#people-connect\nSlack channel, and include a Google Doc in the invite for questions.\nRemember we are a global company with significant time-zone differences. Unless there is a reason to do otherwise, ensure any time-sensitive calls to action or announcements are made when the whole company has enough time to action. Consider different timezones, non-linear work days, and PTO. Announcements should be made ideally 72 hours (at minimum 24 hours) in advance of a due date. This is to prevent APAC/EMEA team members missing important announcements posted outside their normal working hours.\nSometimes a late announcement is better than none at all, and acknowledging those who will miss it might be a kind gesture, such as ‚ÄúApologies to our APAC/EMEA friends for the late notice‚Äù.\nPosting in #company-fyi\nOur company-wide announcements channel is\n#company-fyi\n.\nIt is an\nannouncement only\nchannel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in\n#company-fyi\nshould not be duplicated in\n#whats-happening-at-gitlab\n. Be mindful of the\nattention economy\n.\nIn order to post or have a message posted in\n#company-fyi\n, please reach out to\nthe internal communications team\nor your function‚Äôs executive who can approve the message and post it.\nExamples of what\nshould not\ngo in\n#company-fyi\n(as per new group guidelines):\nCompetition prize winner announcements\nOrg change or new team member announcements (unless they are E-group)\nPromotion of an optional non-company-wide internal event\nAnnouncement that directly impacts less than 75% of team members\nActions required from team members is not critical or timely\nThe above should all go in the new #whats-happening-at-GitLab channel\n(formerly the\n#company-announcement\nchannel).\ngraph TB\neverybody{{\"Do you want to reach the entire company?\"}}\nimportant{{\"How important is it?\"}}\npermission{{\"Do you have permission<br>\nto post in #company-fyi?\"}}\nurgent{{\"Is it urgent?\"}}\nreconsider{{\"Are you sure you can't reach the people you need by posting in topic channels?\"}}\nchannel-important>\"Post in #company-fyi\"]\nchannel-important-ask>\"Ask your function's executive<br>\nto post in #company-fyi\"]\nchannel-general>\"Post in #whats-happening-at-gitlab\"]\nchannel-topic>\"Post in the most topical channel\"]\nrepost([\"Repost in the 1-2 most appropriate channel(s) based on your topic/audience\"])\nno-repost([\"Do not repost\"])\nclassDef question fill: #ECECFF\nclass everybody,important,permission,urgent,reconsider question;\nclassDef action fill: #a2f2a9\nclass channel-important,channel-important-ask,channel-general,channel-topic,repost,no-repost action;\nclassDef repost fill: #f2d3a2\nclass repost,no-repost repost;\neverybody -- Yes --> important\neverybody -- No  --> channel-topic\nimportant -- need-to-know --> permission\nimportant -- good-to-know --> reconsider\npermission -- Yes --> channel-important\npermission -- No  --> urgent\nreconsider -- Yes --> channel-general\nreconsider -- No --> channel-topic\nurgent -- No  --> channel-important-ask\nurgent -- Yes --> channel-general\nchannel-topic --> repost\nchannel-general --> repost\nchannel-important --> no-repost\nchannel-important-ask --> no-repost\nPosting in #whats-happening-at-gitlab\nDue to the volume of posts in the Slack channel, we recommend that you do not use #whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to:\nAnything involving GitLab team member policy, such as changes in benefits, laws, review cycles, etc.\nUrgent matters that can‚Äôt wait for #company-fyi but still need to be communicated to everyone such as service outages or last minute event changes\nMeetings\nCommon meeting problems\nMeetings are incredibly expensive since they require synchronous time.\nThe most common meeting problems can all be addressed by following the above guidelines around scheduling meetings.\nSome of the most common meetings problems are outlined below:\nProblem\nSolution\nPresent instead of Q&A\nPre-record presentations on YouTube, so meetings are only Q&A\nMeetings set up for or default to brainstorming\nPeople should default to making thoughtful proposals async and building upon them in meetings, if needed\nNo agenda with edit rights for everyone\nEnsure that every meeting has an agenda and is available for everyone to edit\nPeople are late to meetings or don‚Äôt have time to use the restroom between meetings\nUse Speedy Meetings to give people breathing space before their next meeting\nEveryone is responsible for notes\nIf folks are involved in a meeting and have capacity to do so, they should take notes using GitLab‚Äôs\nLive Doc Meetings principles\n. This is important, because:\nMeetings at GitLab should have notes (for a single source of truth and to enable async participation among other reasons)\nIn the absence of this joint commitment to note-taking, this is the type of work that is likely to fall disproportionately to\nunderrepresented groups\n. This is not in line with our\ndiversity, inclusion, and belonging value\n.\nIt may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in.\nWhile meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded.\nEngaging EBAs in note-taking\nGitLab Executive Business Administrators\nsometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes.\nCan the folks already in this meeting cover note taking responsibilities, or is there a reason to engage an EBA in this capacity?\nCan other folks be identified ahead of time or at the start of the meeting to ensure adequate coverage?\nHow does this stack against the EBAs other priorities? You can check directly with the EBA or their manager.\nSmart note taking in meetings\nNote taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion.\nConsider the following best practice when taking notes in meetings:\nIf at the start of the meeting, it does not look like all team members will contribute to note-taking, identify a set of note-takers who will be responsible for this activity within the meeting\nUtilize Zoom‚Äôs AI Companion to create and/or share a meeting summary. Meeting Summary with Zoom AI Companion uses AI technology, which may include third-party models, and allows meeting hosts to initiate an AI-generated summary of their meeting. When the host enables this feature in a meeting, participants may automatically receive a summary after the meeting ends, if the host chose to share it with them.\nNote-taking can be a lot for a single person to stay on top of‚Äìespecially when there is a fast moving conversation with many speakers. Team members should still feel empowered to contribute by helping with notes as needed, even if there is someone assigned.\nAnother good reference is the CEO Shadow\nhandbook page tips section\n, specifically\nIt's helpful if shadow one takes notes as the first speaker is talking, then shadow two starts when the next speaker continues the conversation. Shadow one can pick up note taking again when the next speaker contributes. By alternating this way, the shadows are better able to keep up with all the participants in the conversation.\nThis advice can be used in general meetings as well.\nAsk others to scribe answers in real-time to allow the person who asked the question to focus on the answer. Touch up the answer when the conversation has moved on to something less relevant.\nIt can be hard to keep up with the dialog and capture quality notes when there‚Äôs fast back and forth conversation. Lead by example and write when you‚Äôre not talking, expect others will write when you‚Äôre talking.\nFocus on noting speakers and their key points over capturing all words said. Extensive note-taking should not happen at the expense of correct note-taking.\nWrite down your questions\nin the agenda before vocalizing. Always ask people to vocalize their questions to provide the most detailed context and for audio-only playbacks.\nUse discretion in taking notes if sensitive topics are being discussed. For example, do not takes notes on\nnot-public information\nif the agenda may be available to an audience who should not be privy to this information.\nIf someone requests folks to stop taking notes, stop for the duration of the discussion unless there is verbal confirmation that note-taking should resume. Ask for the confirmation before typing before you resume note-taking.\nAt the end of the meeting, clearly capture key takeaways, next steps, and\nDRIs\n.\nIf you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the\n#safe\nSlack channel\nFew meetings with presentations\nPresenting\nduring meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content\nasynchronously\n. Remember it is not required to have a presentation or have a pre-recorded presentation.\nIn the video below, GitLab co-founder, Sid Sijbrandij, explains why there are no presentations in most meetings.\nPre-recorded presentations enable:\nAllows time for Q&A, which enables attendees to have their questions answered without running out of time.\nReinforces GitLab‚Äôs\nBias Towards Asynchronous Communication\nbecause it allows a distributed team to consume the presentation asynchronously.\nStrengthens\nself-service and self-learning\nby maximizing the meeting time‚Äôs efficiency to ensure that team members have their voices heard during the Q&A.\nStandardizes the approach to meetings across the organization.\nIncludes transcripts that can boost content value, help team members focus, and increase accessibility.\nFlexibility in viewing using rewind and playback speed adjustments.\nEncourages and enables greater participation from\nneurodiverse team members\nwho might take added time to process and reflect before asking questions.\nAllows for selective watching of presentation material for a certain period.\nThere are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following:\nA presentation, with optional attendance and mandatory recording. This will allow clarifying questions to be asked and answered efficiently and enables team members to watch async.\nInclude an async Q&A doc for team members who did not attend the presentation.\nEnsure the async Q&A doc is linked in the YouTube description.\nBest Practices for Pre-Recorded Presentations\nUse Zoom to create a pre-recorded video presentation.\nPost the recording to the GitLab\nUnfiltered YouTube channel\nand attach it to the meeting agenda.\nAt least 24 hours in advance of the meeting, announce in Slack Channels that the meeting has a pre-recorded video, and all attendees are advised to watch beforehand.\nFramework for meetings with presentations\nWhile most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example,\nGitLab Assembly\nor the\nFunctional Leaders Meeting\n.\nGitLab has the following meeting framework for determining which meetings should have presentations:\nPresentation Approach\nTypes of meetings with few participants\nTypes of meetings with many participants\nNo presentations (async prep)\nMost meetings\nPresentations\nThese meetings should not happen\nAssembly\nand other large team meetings\nMeeting introduction guidelines\nIntroductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines:\nAgree ahead of time to do introductions so everyone is prepared for it.\nCreate a list of people with their roles in a shared agenda and use that for the introduction sequence.\nEach person should introduce themselves so that everyone can see that person on Zoom.\nThe person introducing themselves hands it over to the next person in the agenda.\nMake sure you‚Äôre never screen sharing when people are introducing themselves.\nScheduling meetings\nEvery scheduled meeting should either have a Google Presentation (for example for functional updates that don‚Äôt require participation) or a Google Doc (for most meetings) linked. If it is a Google Doc it should have an\nagenda\n, including any preparation materials (can be a presentation). For a step-by-step guide on GitLab meeting best practices, visit our\nLive Doc Meetings page\n.\nNo agenda is required for\ncoffee chats\n. Note that only meetings that are primarily social in nature should be labeled as a coffee chat in the calendar invite.\nA suggested format for 1:1 agendas can be found on the\n1:1 leadership page\n.\nFor team members working in AMER timezones who regularly collaborate with EMEA team members:\nIf all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the\nPST morning block\n.\nThe PST morning block should be reserved for\ncross-regional collaboration\nwith team members whose timezones make it harder for them to meet later in the day.\nFor team members working in AMER timezones who regularly collaborate with APAC team members:\nIf all meeting attendees are located in AMER timezones, the meeting should be scheduled outside of the\nPST afternoon block\n.\nThe PST afternoon block should be reserved for\ncross-regional collaboration\nwith team members whose timezones make it harder for them to meet earlier in the day.\nDue to the number of timezones covered in APAC, the\nPST afternoon block\nwill only overlap with the Eastern most APAC countries\nIf you want to ask GitLab team members if they are available for an event please send a calendar invite with Google Calendar using your Google GitLab account to their Google GitLab account. When you add a GitLab team member as a ‚ÄúGuest‚Äù in Google Calendar, you can click the See Guest Availability button to check availability and find a time on their calendar. These calendar invites will automatically show up on all parties calendars even when the email is not opened. It is an easier way to ensure everyone has visibility to the meeting and member‚Äôs status. Please respond quickly to invites so people can make necessary plans.\nIf you want to check if a team member is available for an outside meeting, create a calendar appointment and invite the team member only after they respond yes. Then invite outside people.\nWhen scheduling a call with multiple people, invite them using a Google Calendar that is your own, or one specific to the people joining, so the calendar item doesn‚Äôt unnecessarily appear on other people‚Äôs calendars.\nIf you want to move a meeting just move the calendar appointment instead of reaching out via other channels. Note the change at the top of the description.\nPlease click ‚ÄòGuests can modify event‚Äô so people can update the time in the calendar instead of having to reach out via other channels. You can configure this to be checked by default under\nEvent Settings\n.)\nWhen scheduling a meeting we value people‚Äôs time and prefer the ‚Äúspeedy meetings‚Äù\nsetting in our Google Calendar\n. This gives us meetings of, for example, 25 or 50 minutes leaving some time to:\nWrite notes and reflect\nRespond to urgent messages\nTake a\nbio break\nStretch your legs\nGrab a snack\nWhen scheduling a meeting, please try to have it start at :00 (hour) or :30 (mid-hour) to leave common start times available for other meetings on your attendees‚Äô calendars. Meetings should be for the time needed, so if you need 15 minutes just book that.\nWhen creating a calendar event that will be used company wide,\nplease place it on the GitLab Team Meetings Calendar\n. That way the event is easily located by all individuals.\nWhen you need to cancel a meeting, make sure to delete/decline the meeting and choose the option\nDelete & update guests\nto make sure everyone knows you can‚Äôt attend and don‚Äôt wait for you.\nIf you want to schedule a meeting with a person not on the team please use\nCalendly\n. Use Google Calendar directly if scheduling with a GitLab team member.\nMaterials Review\nare scheduled as all day not busy events as a reminder three days before the scheduled call.\nWhen scheduling recurring meetings, consider using\n(UTC+00:00) Coordinated Universal Time\nas the meeting time zone,\nso that the meeting time does not change for others when your local time zone changes.\nCross-regional Working Hours Recommendations\nIf you‚Äôre scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours.\nThe suggested times are organized by the regions that you‚Äôre trying to accommodate.\nEach suggested window is shown in the local time zone.\nFor example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time.\nNote: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year.\nTimezone\nStart\nEnd\nLondon/Lisbon\nParis/Rome\nIstanbul/Tel Aviv\nAbu Dhabi\nMumbai\nPacific Time\nEastern Time\nTimezone\nStart\nEnd\nSydney\nTokyo\nHong Kong\nHo Chi Minh\nPacific Time\nEastern Time\nTimezone\nStart\nEnd\nLisbon/Dublin\nParis/Rome\nIstanbul/Tel Aviv\nMumbai\nHo Chi Minh\nHong Kong\nSydney\nMulti-session meeting naming\nWhen scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members),\nname them after the topic, appended with a session number based on the order they show up in the calendar.\nTeam members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours.\nAvoid:\nTerms like\nfriendly\nor\nearly\n/\nlate\n, as these terms are overly subjective.\nAn early meeting for one team member might seem late for someone in a different time zone.\nOr a west coast AMER meeting might seem ‚ÄúAPAC friendly‚Äù, but not to someone in western APAC who is still asleep when the meeting starts.\nUsing\n,\n, or\nonly\nunless the meeting is specifically targeting members of that time zone.\nThese terms give the impression that only team members from those timezones are welcome, when people from any timezone with any working style are welcome.\nFor example:\nScheduled time\nPreferred\nAvoid\n‚ÄúAll members meeting - Session 1‚Äù\n‚ÄúAll members meeting - EMEA/AMER‚Äù\n‚ÄúAll members meeting - Session 2‚Äù\n‚ÄúAll members meeting - AMER/APAC friendly‚Äù\n‚ÄúAll members meeting - Session 3‚Äù\n‚ÄúAll members meeting - APAC/EMEA only‚Äù\nVideo calls\nUse video calls if you find yourself going back and forth in an issue/via email\nor over chat. Guideline: if you have gone\nback and forth 3 times\n, it‚Äôs time\nfor a video call.\nSometimes it‚Äôs better to\nnot\nhave a video call. Consider these tradeoffs:\nIt is difficult (or impossible) to multi-task in a video call.\nIt may be more efficient to have an async conversation in an issue, depending on the topic.\nA video call is limited in time: A conversation in an issue can start or stop at any time, whenever there‚Äôs interest. It is async.\nA video call is limited in people: You can invite anybody into an async conversation at any time in an issue. You don‚Äôt have to know who the relevant parties are ahead of time. Everyone can contribute at any time. A video call is limited to invited attendees (and those who have accepted).\nYou can easily ‚Äúpromote‚Äù an async conversation from an issue to a video call, as needed. The reverse is harder. So there is lower risk to start with an async conversation.\nFor a newcomer to the conversation, it‚Äôs easier and more efficient to parse an issue, than read a video transcript or watch it.\nConversations in issues are easily searchable. Video calls are not.\nTry to have your video on at all times because it‚Äôs much more engaging for participants.\nDo not worry if you\ncan‚Äôt pay attention at the meeting\nbecause you‚Äôre doing something else, you are the manager of your attention. The flip-side of being the manager of your own attention is that others should not hesitate to request your attention when it is needed.\nDuring internal calls, it‚Äôs okay to eat on video if you‚Äôre hungry or the call is during your lunch time (please turn your mic off). To maintain professionalism, if you are presenting or facilitating a customer call please try to avoid eating. If eating during a customer call is unavoidable, please turn off your video and mute your mic.\nYou should ensure that you are properly dressed for all video calls. Properly dressed means that you are wearing clothing that covers the top and bottom parts of your body. We do not have a strict dress code policy, but want to make sure that all participants on video calls feel comfortable. If you cannot be properly dressed for the entirety of the call, you should not join, but watch the recording at a later time.\nHaving pets, children, significant others, friends, and family visible during video chats is encouraged. If they are human, ask them to wave at your remote team member to say\n‚ÄúHi in your native language‚Äù\n.\nDo not feel forced to have your video on, use your best judgement.\nAdditional points for video calls with customers or partners:\nResults come first. Your appearance, location and background is less important than making customers successful so don‚Äôt wait for the perfect time / place when you can engage a customer right away.\nCommunicating that GitLab is an enterprise grade product and service provider is supported by the way you present yourself. Most of the time, if you would not wear something or present yourself in a certain way at a customer‚Äôs office, candidate interview, or partner meeting in person then it‚Äôs probably not the right choice on a video call with them either.\nGreen screens are a great background solution. It‚Äôs great to work in your garage or basement! Just get a green screen behind you and put up a professional background image to present well externally and still use the rest of the room how you want!\nWe prefer\nZoom\n.\nGoogle Calendar also has a\nZoom plugin\nwhere you can easily add a Zoom link for a video call to the invite.\nFor meetings that are scheduled with Zoom:\nAfter reviewing our\nZoom\nhandbook page, if you have additional questions, please contact IT in the\n#it_help\nSlack channel.\nNote that if you select to record meetings to the cloud (setting within Zoom), you must include the text\nin the meeting title if you want them to be automatically placed in the\nGitLab Videos Recorded\nfolder in Google Drive on an hourly basis via a\nscheduled pipeline\n.\nYou can find these videos in Google Drive by looking under\nShared drives\nand\nGitLab Videos Recorded\n. If you do not have access to this drive, contact\nIT Ops\n.\nThe\nscript for syncing the files is here\n.\nNote also that after a meeting ends, Zoom may take some time to process the recording before it is actually available. The sync to Google Drive happens on the hour mark, so if the recording is not available, it may take another hour to be transferred.\nConsider using a utility to easily mute/unmute yourself, see\nShush\nin the tools section.\nHybrid calls are annoying\n.\nAlways be sure to advise participants to mute their mics if there is unnecessary background noise to ensure the speaker is able to be heard by all attendees.\nWe start on time and do not wait for people. People are expected to join no later than the scheduled minute of the meeting (before :01 if it is scheduled for :00). The question ‚Äòis everyone here‚Äô is not needed.\nIt feels rude in video calls to interrupt people.\nThis is a situation where we have to do something counter intuitive to make all-remote meetings work.\nIn GitLab, everyone is encouraged to interrupt the speaker in a video call to ask a question or offer context.\nWe want everyone to contribute instead of a monologue.\nInterrupting can be done by clicking ‚ÄúRaise Hand‚Äù in Zoom, by physically raising your hand on video, or by interrupting verbally.\nAs a speaker, allow yourself to be interrupted.\nAs a listener, advocate (verbally if necessary) for those who have raised their hand.\nJust like in-person meetings be cognizant of when, who, and how you interrupt, we don‚Äôt want\nmanterrupting\n.\nWe end on the scheduled time. It might feel rude to end a meeting, but you‚Äôre actually allowing all attendees to be on time for their next meeting.\nDo not use the chat of products like Zoom to communicate during the call, use the linked document instead. Zoom Chat has been configured for a 30 day retention. This allows everyone to contribute additional questions, answers, and links in the relevant place. It also makes it easier for people in conflicting timezones to contribute questions before the call and makes it easier to review questions and answers after the call, which can be before watching the recording.\nYou do not need to remind other people to vocalize their questions. Just say their name and a keyword of the question, e.g. ‚ÄòJay about credit-cards‚Äô.\nEvery comment is document worthy, even small support comments such as\n+1\nor\nVery Cool!\n.\nWe encourage the recording and\nsharing of everything to our YouTube Unfiltered channel\n.\nIt is unusual to smoke in an open office or video conference, vaping is associated with this. For this reason we ask that you don‚Äôt vape during calls, and if you absolutely have to, kindly switch your camera off.\nSpeak up when you notice something is not working. If you notice someone‚Äôs microphone, web cam or latency is causing issues for them it is good to speak up. On a video call it can be harder for the speaker to notice that they aren‚Äôt being understood compared to a face to face conversation. As such you will be doing them a favour by speaking up early to let them know that they are having a problem. Also see\nHear nothing say something\nfor further explanation.\nYou are the manager of your attention\nYou are the manager of your attention, and you decide when you do or don‚Äôt pay attention in a meeting.\nYou will always have more work than time in your life.\nIf you get invited to a meeting you don‚Äôt think you should go to, you should decline the meeting.\nIt is better to cancel than to show up and not pay attention.\nOn the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call.\nIf you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call.\nIf you get asked a question when you‚Äôre not paying attention, it is an okay use of time to repeat a question every now and then.\nIf training is required for one‚Äôs role, team members should plan to give the training full attention‚Äìespecially if engagement in discussions or breakout rooms is required. If training is ‚Äônice to learn‚Äô or ‚Äòoptional‚Äô for team members, multi-tasking can be done at the team members discretion.\nWe don‚Äôt use the first 15 minutes of a meeting to read the materials like they\ndo at Amazon\n. You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials.\nMeetings start on time at GitLab.\nDo not use your camera to signal you‚Äôre not paying attention;\ncameras should always be on\n.\nDo not ask meeting attendees to pay attention\nThere are too few hours in a week, so we expect each team member to\nmanage their attention\n. If you‚Äôre hosting a meeting, don‚Äôt tell people to give you their attention or stop multi-tasking. Respect each team member‚Äôs agency over their time. Instead of demanding attention, earn participants‚Äô attention by organizing and facilitating meetings so they are compelling to attendees.\nFirst post is a badge of honor\nYou should take pride in being the first person to add a question to a\nmeeting agenda, however unlike\nthe First post\nmeme we do want the first post to be\nmore than just ‚ÄúFirst!‚Äù. The meeting DRI will be happy to see there is a\nquestion ready before to kick off the meeting. The Meeting DRI should remember\nto thank the person for asking the first question.\nDo not do a countdown before ending a call\nNever do a countdown or say something like. ‚ÄúI‚Äôll give it x seconds‚Äù, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call.\nHybrid calls are annoying\nIn calls that have remote participants everyone should use their own equipment (camera, headset, screen).\nWhen multiple people share equipment the following\nproblems arise for remote participants\n:\nCan‚Äôt hear the sharing people well\nBackground noise since the microphone of the sharing people is on all the time\nCan‚Äôt clearly see facial expressions since each face takes up only a small part of the screen\nCan‚Äôt easily see who is talking since the screen shows multiple people\nHard getting a word in since their delay is longer than for the sharing people\nThe\npeople sharing equipment also have problems\nbecause they don‚Äôt have their own equipment:\nCan‚Äôt easily screen share something themselves\nTrouble seeing details in screen sharing since the screen is further away from them\nCan‚Äôt scroll through a slide deck at their own pace\nSharing people can‚Äôt easily participate (view or type) in a shared document with the agenda and meeting notes.\nThe disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people.\nThe disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience.\nThe extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy.\nTheoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms:\nIt is annoying to first hear someone talk in the room and then hear it over audio with a delay.\nIt is hard to consistently mute yourself when not talking to prevent someone else‚Äôs voice coming through your microphone as well.\nTypes of meetings\nAsk Me Anything meetings\ncan be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change.\nFormat: AMAs use the whole meeting time for questions from attendees, answered by the host.\nFireside Chats\nFireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting.\nFormat: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees.\nWalk and Talk calls\nA Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a\ncoffee chat\nand a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If it‚Äôs a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with\nincreased focus and creativity\n. A Walk and Talk can also help prevent\nZoom fatigue\n.\nThe team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members‚Äô schedules. We‚Äôve created a Slack channel #walk-and-talk-meetings where, if you‚Äôd like, you can share pictures from your walking meetings.\nRelease retrospectives and kickoffs\nAfter GitLab releases a new version\nevery month\n, we have a\n30-minute call a few days later reflecting on what could have been\nbetter:\nWhat went well this month?\nWhat went wrong this month?\nWhat could we have done better?\nWe spend the first part of the retrospective meeting reviewing the action\nitems from the previous month.\nOn the 8th of each month (or the next business day), we have a kickoff meeting\nfor the version that will be released in the following month. The product team and other leads will have already had\ndiscussions on what should be prioritized for that release. The purpose of this kickoff is\nto get everyone on the same page and to invite comments.\nBoth the retrospectives and kickoffs are\nlive streamed to our GitLab Unfiltered YouTube channel\nand posted to our\nUnfiltered YouTube channel\n.\nDeep Dives\nAs GitLab continues to grow, sharing knowledge across the community becomes even more important.\nThe\nDeep Dives page\ndescribes initiatives we are trying to encourage.\nThis aligns with how we work since everything at GitLab is\npublic by default\n.\nDaily Sync Escalation Process\nGitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the\ninternal handbook\n.\nPresentations\nAll presentations are made in Google Slides using\nour templates\n.\nPlease allow anyone at GitLab to edit the presentation (preferred) or at least comment on the presentation.\nIf the content can be public use File > Publish to the web > Publish to get a URL and paste that in the speaker notes of the first slide (commonly the title slide).\nThe title of every slide should be the message you want the audience to take away, not the subject matter. So use ‚ÄòOur revenue more than doubled‚Äô instead of ‚ÄòRevenue growth‚Äô.\nSlide titles should not be more than one line. Be concise in highlighting the key point that you want to make.\nDo not add a period at the end of a title.\nDuring introductions, make sure that nobody is presenting. We remember people better and have more empathy when we clearly see peoples faces and expressions.\nAt the end of the presentation, when you go to Q&A, stop presenting in Zoom. This way the other people can see the person who is speaking much better.\nAll presentations at GitLab should be based on screenshots of the handbook, issues, merge requests, review apps, and data from GitLab Insights and Sisense charts. In most cases it shouldn‚Äôt be needed to make content uniquely for the presentation. If you need something that doesn‚Äôt exist yet add it to the place it belongs and then copy it into the presentation. This way we can have a\nSingle Source of Truth\nfor everything we do. By using screenshots you indicate to people you did the right thing and they can find the canonical source in the appropriate place. Having to find information by digging through old presentations doesn‚Äôt scale. Consider linking the screenshot to the original source.\nDo not use cumulative graphs internally. For example total ARR, total user, total contributors, or total Merge Requests. Instead use IACV per dollar spend, users added per month, contributions per month, or\nMR rate\n. Cumulative graphs can\nhide trends\nand are\nfar more likely to be misinterpreted\n. The only acceptable use of cumulative graphs is for external presentations where they are expected by the audience and commonly used.\nWhen your presentation includes graphs or other data, make sure your graphs have clear titles and dimensions. Make sure your data has significant figures and labels. For example, use ‚ÄòJanuary: 1.95M projects‚Äô instead of ‚ÄòJanuary: 1.95M‚Äô. Keep in mind that your audience may not have the full context, especially if they are reading the presentation asynchronously.\nWhen giving a presentation, your commentary should not be a regurgitation of the words in the slide. The audience can read the slide for themselves; your commentary should focus on the most important takeaways.\nVideo and presentation tips with Lorraine Lee\nOn 2022-01-20, the L&D team hosted\nLorraine Lee\nfor a live speaker series on video and presentation techniques in an all-remote workspace.\nKey points addressed in the training include:\nIncrease your confidence on video\nusing lighting, visuals, and curating your environment\nKeep your audience engaged\nwith movement, power words, and the think/do/feel matrix\nStay connected with your audience\nby smiling, making eye contact, and framing yourself in video\nInsert energy\nby standing up, projecting, and using hand gestures\nWatch the replay below:\nWriting style guidelines\nAs you‚Äôre creating external or business content for GitLab, please refer to the\nGitLab Content Style Guide\n. For technical content, you can reference\nthis word list\n.\nThis list offers additional guidance for written communication at GitLab:\nDo not use rich text, it makes it hard to copy/paste. Use\nMarkdown\nto format text that is stored in a Git repository. In Google Docs, use ‚ÄúNormal text‚Äù using the style/heading/formatting dropdown and paste without formatting.\nRead our\nMarkdown Style Guide\nfor more information when using Markdown.\nDo not use ALL CAPS because it\nfeels like shouting\n. However, there is the\n#all-caps\nSlack channel\nfor your good-natured shouting needs.\nWe use Unix style (\nlf\n) line endings, not Windows style (\ncrlf\n), please ensure\n*.md text eol=lf\nis set in the repository‚Äôs\n.gitattributes\nand run\ngit config --global core.autocrlf input\non your client.\nWhen specifying measurements, please include both Metric and Imperial equivalents.\nWhen mentioning currency amounts that team members may need to convert to their local currency (e.g. benefits, expenses, or bonuses), link those amounts to our\nExchange Rates\nsection (e.g.\n).\nMonetary amounts shouldn‚Äôt have one digit, so prefer $19.90 to $19.9.\nGitLab is an internationally diverse company. US-based team members should not refer to team members outside the US as ‚Äúinternational‚Äù. Instead, use ‚Äúnon-US‚Äù. Please also avoid the use of ‚Äúoffshore/overseas‚Äù to refer to non-American continents.\nIf you have multiple points in a comment or email, please number them. Numbered lists are easier to reference during a discussion over bulleted lists.\nWhen you reference an issue, merge request, comment, commit, page, doc, etc. and you have the URL available, please include it.\nIn making URLs, always prefer hyphens to underscores, and always use lowercase.\nThe community includes users, contributors, core team members, customers, people working for GitLab Inc., and friends of GitLab. If you want to refer to ‚Äúpeople not working for GitLab Inc.‚Äù, just say that, and don‚Äôt use the word ‚Äúcommunity‚Äù. If you want to refer to people working for GitLab Inc., you can also use ‚Äúthe GitLab Inc. team‚Äù, but don‚Äôt use ‚ÄúGitLab Inc. employees‚Äù.\nWhen we refer to the GitLab community (excluding GitLab team members), please say ‚Äúwider community‚Äù instead of ‚Äúcommunity‚Äù.\nAll people working for GitLab (the company) are the\nGitLab team\n. We also have the\nCore team\nthat consists of volunteers.\nPlease always refer to GitLab Inc. people as GitLab team members, not employees.\nUse\ninclusive and gender-neutral language\nin all writing.\nAlways write ‚ÄúGitLab‚Äù with ‚ÄúG‚Äù and ‚ÄúL‚Äù capitalized, even when writing ‚ÄúGitLab.com‚Äù, except within URLs. When ‚Äúgitlab.com‚Äù is part of a URL, it should be lowercase.\nDo not use a hyphen when writing the term ‚Äúopen source‚Äù except where doing so eliminates ambiguity or clumsiness.\nIf an email needs a response, write the answer at the top of it.\nUse the future version of words, just like we don‚Äôt write internet with a capital letter anymore. We write frontend and webhook without a hyphen or space.\nOur homepage is\nhttps://about.gitlab.com/\n(with the\nabout.\nand with\nhttps\n).\nIf you use headers, properly format them (\n##\nin Markdown, ‚ÄúHeading 2‚Äù in Google Docs); start at the second header level because header level 1 is for titles. Do not end headers with a colon. Do not use emoji in headers as these cause links to have strange characters.\nDo not use acronyms when you can avoid them. Acronyms have the effect of excluding people from the conversation if they are not familiar with a particular term. Example: instead of\n, write\nmerge request (MR)\n.\nIf acronyms are used, expand them at least once in the conversation or document and define them in the document using\nKramdown abbreviation syntax\n. Alternatively, link to the definition.\nIf you don‚Äôt know the meaning of an acronym, ask. It‚Äôs always ok to\nspeak up\n.\nCommunicating dates and time\nFor external content, refer to the guidance in the\nGitLab Content Style Guide\n.\nFor internal content, use ISO dates:\nyyyy-mm-dd\nFor months, use\nyyyy-mm\n, so 2018-01 for January.\nRefer to a year with CY18 (never with 2018) and a quarter with CY18-Q1 to prevent confusion with fiscal years and quarters. If the year is obvious from the context it is OK to use Dec 4, but not 12/4.\nGitLab operates on a\nFiscal Year\noffset from the calendar year. When referring to a fiscal year or quarter, please use the following abbreviations:\n‚ÄúFY20‚Äù is the preferred format and means: Fiscal Year 2020, the period running from February 1, 2019 through January 31, 2020\n‚ÄúQ1‚Äù = the first quarter of the current Fiscal Year, so on Feb 1, 2020, ‚ÄúQ1‚Äù is the period from Feb. 1, 2020 through April 30, 2020. Note that Epics in GitLab follow Calendar Years and Quarters.\nWhen referring to a quarter in a future or past year, combine the two above: ‚ÄúFY21-Q1‚Äù\nWhen financial data is presented, include a note to indicate fiscal year (e.g. ‚ÄúFiscal Year ending January, 31 ‚ÄòYYYY‚Äù)\nFor time formatting guidelines, refer to the\nGitLab Content Style Guide\n.\nPlease remember that not everyone is working in the same timezone; what may be morning for you is evening for someone else. Try to say 3 hours ago or 4 hours from now, or use a timestamp, including a timezone reference.\nDon‚Äôt use ‚ÄúEOD‚Äù or ‚Äúend of day‚Äù (‚ÄúCOB‚Äù or ‚Äúclose of business‚Äù, ‚ÄúEOB‚Äù or ‚Äúend of business‚Äù), unless you are okay with a deliverable being due at the end of\nanywhere on earth\n. Team members communicate across timezones, where ‚Äúend of day‚Äù does not specify the exact date and time. When you want something due at a specific time,\ncommunicate the date and time\nby when the request should be done, for example:\nPlease review before 2023-06-10 5PM PT\n.\nVisuals\nMany times an explanation can be aided by a visual.\nWhenever presenting a diagram, we should still allow everyone to contribute.\nWhere possible, take advantage of the handbook‚Äôs support for\nMermaid\n. If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the\nMermaid Live Editor\ncan be a helpful tool.\nWhere taking advantage of Mermaid isn‚Äôt possible, link to the original in our Google Drive so that the diagram can be edited by anyone.\nUbiquitous language\nAt GitLab we use\nubiquitous language\nto increase communication efficiency.\nThis is defined in\nDomain-driven design\nas: ‚ÄúA language structured around the domain model and used by all team members to connect all the activities of the team with the software.‚Äù\nWe use it for activities in GitLab, even ones not implemented in software.\nBy having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to\nparts of our organization\nas a function, department, or group depending on exactly what is meant.\nMake sure that domains don‚Äôt overlap, for example\norganization size\nand\ndeal size\ndon‚Äôt reuse words to prevent overlap.\nIf a term is ambiguous don‚Äôt use it, for example our hiring team uses the terms\nroles\nand\nvacancies\n, but avoid the ambiguous word\njob\n.\nMake sure that projects and working groups have clear and direct names. Prefer ‚ÄúCI Spend Reduction Working Group‚Äù to ‚ÄúProject Raven Working Group‚Äù.\nMake sure that people can infer as much as possible from the word, for example our\nsubscription options\nallow you to know if someone is using self-managed or GitLab.com.\nMake sure terms don‚Äôt overlap without clearly defining how and why, for example see our\ntier definitions\n.\nKeep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often.\nMECEFU terms\nMECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language.\nYou pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his\nkung fu\nor soccer fu skills.\nWe want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency:\nMutually Exclusive: nothing is referenced by more than one term\nCollectively Exhaustive: everything is covered by one of the terms\nFew words: the longer terms are the more likely it is people will not use all of them and cause confusion, therefore consider two words as the upper limit for a single term. Avoid acronyms because they are hard to remember (we‚Äôre open to a few words to replace MECEFU as an acronym :)\nUbiquitous language:\ndefined above\nAn example of a MECEFU term is our\nsales segmentation\n:\nMutually Exclusive: There is no overlap between the numbers and there is a single dimension.\nCollectively Exhaustive: Everything for 0 to infinite employees is covered.\nFew words: Mid-market is a natural combination and SMB is abbreviated.\nUbiquitous language: We‚Äôre not using the word ‚ÄòEnterprise‚Äô which already can refer to our Enterprise Edition distribution.\nOne nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar.\nSimple language\nSimple Language is meant to encourage everyone at GitLab to simplify the language we use.\nWe should always use the most clear, straightforward, and meaningful words possible in every conversation.\nAvoid using ‚Äúfluff‚Äù words, jargon, or ‚Äúcorporate-speak‚Äù phrases that don‚Äôt add value.\nWhen you\ndon‚Äôt\nuse Simple Language, you:\nConfuse people and create a barrier for participants of your conversation.\nCause others to not speak up in a meeting because they don‚Äôt understand what you‚Äôre saying.\nAre not inclusive of those whose first language is not English.\nDo not add value with your words.\nWhen you\ndo\nuse Simple Language, you:\nGet work done more efficiently.\nBuild credibility with your audience (your team, coworker, customer, etc.).\nKeep people‚Äôs attention while you‚Äôre speaking.\nCome across more confident and knowledgeable.\nHere‚Äôs an example:\nOriginal sentence\nWe‚Äôre now launching an optimization of our approach leveraging key learnings from the project‚Äôs postmortem.\nA Simple Language sentence\nWe‚Äôre creating a new plan based on what we learned from this project.\nSimple Language is important both when we‚Äôre speaking to other team members and when we‚Äôre representing GitLab to people outside the company.\nBe sure to use Simple Language in written communications as well.\nOur handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective.\nCorporate marketing maintains guidelines on\nGitLab‚Äôs tone of voice\n.\nInstead of‚Ä¶\nTry‚Ä¶\nGetting buy-in/Getting alignment\nAsking for feedback since DRIs make decisions\nSynergy\nEffective Collaboration\nGet all your ducks in a row\nBe organized\nDo not let the grass grow too long\nWork quickly\nLeverage\nUse more explicit phrasing- debt, etc.\nSend it over the wall\nShare it with a customer\nBoil the ocean\nWaste time\nPunt\nMake less of a priority\nHelicopter view/100 foot view\nA broad view of the business\nTurtles all the way down\nCascade through the organization\nWhen someone has spare/extra cycles\nWhen someone is available\nInefficient things shouldn‚Äôt sound positive\nFor example, do not suggest that you‚Äôre ‚Äúworking in real-time‚Äù when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving.\nDo not use a cool term such as ‚Äútiger team‚Äù when the\nexisting term of ‚Äúworking group‚Äù\nis more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isn‚Äôt to use flowery language.\nThe last example is when we used ‚ÄòPrioritizing for Global Optimization‚Äô for what we renamed to headcount reset. When we\nrenamed it\nwe saw a good reduction in the use of this disruptive practice of moving people around.\nUsing additional languages\nUsing American English as our standard language supports our values such as efficiency, results, and transparency.\nCareful use of another person‚Äôs language can be a celebration of diversity and build an atmosphere of inclusion.\nThe guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind:\nUse of an additional language is optional.\nStick to the few simple phrases in the table below.\nAlways include the language used and a translation to English.\nTeam members can choose to indicate the languages they speak in their Slack profile.\nWhen in doubt, use American English.\nHere‚Äôs an example:\nHey @nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo MƒÅori: great work / well done!)\n„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô (Japanese: thank you very much) for the review @cynthia!\nLanguage\nHello\nThank you\nGreat work / well done\nCroatian\nHvala\nJapanese\n„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô\nTe Reo MƒÅori\nKia ora\nNgƒÅ mihi\nKa mau te wehi!\nAvoid using Git in Project Names\nAvoid using\nGit\nin the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become\nThe DevOps Platform\n.\nEmail\nWe have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines:\nSend one email per subject as multiple items in one email will cause delays (have to respond to everything) or misses (forgot one of the items).\nAlways reply to emails by replying to all, even when no action is needed. This lets the other person know that you received it. A thread is done when there is a single word reply, such as OK, thanks, or done.\nIf you‚Äôre sending an email to a large group of people (or a distribution list), put those recipients in BCC (rather than in the ‚ÄúTo‚Äù field) so that a reply all won‚Äôt ping hundreds of people.\nIf you forward an email without other comments please add FYI (for your information), FYA (for your action), or FYC (for your consideration). If you forward an external request with FYC it just means the person who forwarded it will not follow up on the request and expects you to decide if you should follow up or not, the terms comes from\nmovie promotion to voters\n.\nEmail forwarding rules are specified in the shared\nEmail, Slack, and GitLab Groups and Aliases\nGoogle Doc accessible only to people in the company. If you want to be added or removed from an internal alias, change a rule, or add a forwarding email alias, please\nsuggest an edit\nin the doc and\nsubmit a new access request\n.\nOnly Google Workspace domain admins are allowed to provision Google Groups and email distributions.\nEmails are asynchronous, for example, if your manager emails you on a weekend it is fine to reply during the workweek.\nIf an email is or has become\nurgent\nfeel free to ping people via chat referencing the subject of the email.\nIf you or your team needs to send an email to a group of team members, not grouped in a current\nGoogle email group\n, and specifically related to personally identifiable information (location, state, country, etc.) please contact a Total Rewards Analyst at total-rewards@gitlab who can create an email list from Workday data, with approval.\nWhere appropriate, consider using professional salutations including Hi or Hello and avoid colloquial expressions such as Hey, Oh, or Sup. Sometimes only the person‚Äôs name is suitable. The level of formality should often mirror the formality from previous messages when communicating with internal team members as well as external persons.\nTry to always use a person‚Äôs name when starting or responding to a message, especially if there are multiple persons cc‚Äôd, so that the addressee knows you are addressing them.\nMake sure all relevant letters and words that need capitalization are capitalized, such as the start of sentences or the word ‚ÄúI‚Äù.\nProofread your messages so that sentences are punctuated correctly, typos are fixed, and grammar is corrected. Consider using the really helpful\nGrammarly\ntool - this tool is great for both native English speakers and for those who use English as an additional language.\nAll messages and replies are signed with a professional send-off (ex. Best regards), your name, and your signature block.\nSlack\nSlack is used for:\nInternal-only communication and announcements impacting all team members\nLinking a GitLab Issue or Merge Request (confidential if necessary) where discussion can take place is encouraged when sharing announcements on Slack\nConsider creating a\nManager Mention MR\n, so that we can collaborate with Efficiency and Transparency across threads\nCompany newsletters and team updates\nAsynchronous team standups, questions, and quick collaboration\nInformal communication\nUse a\nbias for action\nto quickly move conversations that require collaboration and action out of Slack and into an issue.\nOnly 90 days of Slack activity will be retained, so Slack should specifically NOT be used for:\nObtaining approvals\nDocumenting decisions\nStoring official company records or documents\nSharing personal or sensitive information regarding any individuals\nInternal Slack messages between team members are still considered professional communication. Please do not use or add emoji‚Äôs to Slack that are of a political, religious or of a sexual nature. You can refer to the\nReligion and politics at work\nsection of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your\nPeople Business Partner\n.\nThere is a lot of information pertaining to Slack, as it is a critical part of GitLab‚Äôs communication. See the\nSlack tools and tips page\n.\nGeneral guidelines\nEveryone can contribute, and while opinions are important to provide perspective, we value\nproposals\nand\niteration\n. If the subject is of value to the wider community, consider commenting on an existing issue or opening a new\nmerge request\ninstead.\nUse the\n:white_check_mark:\nemoji or similar to indicate an inquiry has been answered. Anyone can add the emoji. If you‚Äôre not sure, then feel free to leave it up to the person who asked. An emoji indicator is particularly helpful in channels where lots of questions are posted, such as\n#questions\n, and\n#git-help\n.\nIn general, you can think of emoji reactions as equivalent to body-language responses we use in real-life conversations, such as nodding your head as encouragement when a verbal (or in Slack, written) response might be too much. However, please be aware that use and understanding of emoji, like body-language, is not universal. Others may not communicate via those means the same way that you do, particularly those who are Autistic or otherwise neurodivergent. If in doubt, you can use text to clarify.\nIn both public and private channels,\nthreads\nare valuable for keeping conversations together. If you want to respond to a question or comment in a channel, please start a thread instead of responding below them in the channel. This helps to keep the discussion in one place where it is easy to follow, and reduces noise as each message in a thread does not result in an unread message for everyone in the channel.\nUnless you‚Äôre in an active chat, don‚Äôt break up a topic into multiple messages as each one will result in a notification which can be disruptive. Use\nthreads\nif you want to provide extra info to the question/comment you posted.\nIf you are having a hard time keeping up with messages, you can update your preferences to have Slack email you all notifications. To change the setting, go to\nPreferences > Notifications > When I'm not active on desktop...\nand ‚Äúsend me email notifications.‚Äù\nIf you agree in a message to start a video call (typically by asking ‚ÄúCall?‚Äù) the person that didn‚Äôt leave the last comment starts the call. So either respond to the ‚ÄúCall?‚Äù request with a video link or say ‚ÄúYes‚Äù and let the other person start it. Do not say ‚ÄúYes‚Äù and start a call 5 seconds later since it is likely you‚Äôll both be creating a video call link at the same time.\nAs an admin of the Slack workspace, if given the option to\n‚ÄúDisable future attachments from this website‚Äù\nwhen removing an attachment from a message\nthis will block the link/domain from\nunfurling\nin the entire Slack workspace\n. Be careful and deliberate when choosing this option as it will impact every user in the workspace.\nWhen referencing a Slack thread in a GitLab.com issue, don‚Äôt\nonly\nlink to the thread. Not only will people outside of the GitLab organization be unable to access the content, but the link will expire after the Slack retention period expires. Instead:\nReview the contents\nfor confidentiality of users, customers, or any other sensitive information before posting.\nCopy and paste the relevant parts of the thread into the issue using blockquote formatting.\nLink to the Slack thread and include\n(internal)\nafter the link. For example:\nhttps://gitlab.slack.com/archives/C0AR2KW4B/p1555347101079800\n(internal)\nPost a link to the issue note in the Slack thread to let others know that discussion has moved to the issue.\nWhen selecting your Slack display name, please do not have your name in all capital letters as this is often\nassociated as shouting\nin written communications.\nAvoid direct messages\nNote:\nWe don‚Äôt use the term\nprivate message\n, because these\ndirect messages\nare not inherently\nprivate\nlike a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as\ndirect messages themselves\n.\nWhen using Slack for work-related purposes, please avoid direct messages.\nDirect messages discourage collaboration\n. You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed.\nIf someone sends you a work-related direct message, it is okay to let them know you‚Äôd like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like:\nIn the direct message:\nThanks for reaching out, that's a great question/idea I think the rest of the team could benefit from. I'm going to move this to #public-channel based on [our desire to avoid direct messages](/handbook/communication/#avoid-direct-messages)\nIn the appropriate public channel:\n@Person asked \"question\" in a DM, pulling that out here if anyone else has input.\nAnswer the question in a thread on that channel message, allowing others to benefit.\nIf you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like:\nPlease consider posting in a public channel before direct messaging\nWhy direct message me when you can post in a public channel?\nIf you must send a work-related direct message, don‚Äôt start a conversation with ‚ÄúHi‚Äù or ‚ÄúHey‚Äù as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., ‚ÄúI‚Äôm having trouble understanding issue #x, can we talk about it quickly?‚Äù.\nDo not use group direct messages\nUse private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you can‚Äôt add people to the conversation. This is a hindrance to collaboration and transparency.\nConsider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use.\nAs we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820.\nAs a result, there is a natural tendency for people to prefer private channels of communication.\nCommunication is siloed.\nAs we grow, people may be reaching out to the wrong person.\nIf you have a question, other people might have it too.\nSlack is our primary source of chat communication and is where many personal interactions happen.\nWe want to continue to encourage folks to build personal relationships with one another which will often happen over DMs.\nUse public channels\nIf you use Slack and plan to message 3 or more people, we recommend a channel for customer/issue/project/problem/partnership.\nLearn about\ncommon channels and channel-naming conventions\n.\nIf something is important but not urgent - like complimenting or encouraging the entire team - use email or post in the channel without\n@\n-mentioning the team.\nIt‚Äôs not rude to leave a channel. When you‚Äôve had your questions answered or are no longer interested, feel free to leave the channel so it won‚Äôt distract you anymore.\nThe usage of ChatBots for integrations can sometimes depend upon the name of the channel. You should consult the channel about such integrations before changing the name of commonly used/popular channels to avoid inadvertently breaking integrations.\nBe respectful of others‚Äô time\nStart by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. It‚Äôs about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration.\nThe following tips provide ways to work respectfully with others given this context, though is not an exhaustive list:\nIf you‚Äôre only referring to someone, but don‚Äôt actually need their attention, and want to spare them from getting notified, spell out their name normally without\n@\nmentioning them.\nYou also do not need to\n@\nmention someone if they are part of a Slack thread unless you need their attention (for them to review, respond, etc.), since Slack has a dedicated view for threads.\nSlack messages should be considered asynchronous communication, and you should not expect an instantaneous response; you have no idea what the other person is doing.\nDo not feel obligated to respond to Slack messages when you are not working.\nFeel free to send a colleague a link to these guidelines if the communication in Slack should be done\nasynchronously\n.\nPlease avoid using @here or @channel unless this is about something urgent and important.\nIn chat, try to keep the use of keywords that mention the whole channel to a minimum. They should only be used for pings that are both urgent and important, not just important. By overusing channel mentions, you make it harder to respond to personal mentions promptly since people get pinged too frequently. Additionally, if you are planning to\n@mention\na specific team (\nSlack User Group\n), consider the size of the group you are mentioning (\nsee group membership\n) and the impact of pinging all of these people for the particular situation. If something is urgent and important:\nUse\n@here\nto notify all currently\nactive\nmembers in the room. Please only use\n@here\nif the message is important\nand\nurgent.\nUse\n@channel\nto notify\nmembers in the room, irrespective of away status. Please only use\n@channel\nif the message is important\nand\nurgent.\nIf you are aware that your teammate is on vacation, avoid mentioning them in a high volume channel. It will be difficult to find the information or question when they return. If you need to ensure they refer back to the thread, ensure to send them a link to the relevant Slack message through a direct message.\nQuestions\nIf you have a question that you can‚Äôt find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the\ndesignated slack channel\nto ensure your question is addressed.\nIf your question doesn‚Äôt relate to any of the existing topics:\nAsk it in the\n#questions\nSlack channel\nOnce you receive an answer, document it in the handbook and post the MR link in your question thread\n‚úîÔ∏è once you‚Äôve been helped\nWhen would GitLab use Corporate Export?\nThe times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slack‚Äôs policy, which can be found\nhere\n.\nExamples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in\nSlack‚Äôs documentation\n.\nAre my direct messages and private channel conversations completely private?\nNo. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its\nEmployee Privacy Policy\n, including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims.\nPlease keep\nin mind when communicating directly with other team members.\nIf you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call.\nFor additional questions, please address in the\nissue\n.\nEmergency chat\nSlack is down\nTo use the ‚ÄúSlack Down!‚Äù group chat on Zoom:\nIn the Zoom desktop app go to the\nTeam Chat\ntab\nClick\n+\nClick\nJoin a Channel\nSearch\nSlack down!\nClick\nJoin\nOnce service is restored, go back to Slack.\nZoom is down\nTo use Slack Huddle:\nNavigate to the appropriate Slack channel or direct message.\nUse\n/huddle\nto trigger a huddle, which supports both audio and video calls.\nYou may need to give permissions if it‚Äôs the first time you are using Slack calls.\nOnce service is restored, go back to Zoom.\nSlack and Zoom are down\nJoin the\nSlack Down!\nroom on Hangouts Chat.\nOnce service is restored, go back to Slack and Zoom.\nTypes of documents\nGoogle Docs\nNever use a Google Doc / Presentations for something non-confidential that has to end up on the website or the\nhandbook\n. Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook.\nGoogle Docs can be useful when rapidly\niterating\n/commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that won‚Äôt be referred to beyond 2-3 weeks, it can remain in a Google Doc or\npresentation\n.\nPageless is the GitLab preferred format\nGoogle Docs\nPageless format\nis the preferred format for company documents that won‚Äôt be printed. If you set your\ndefault to Pageless\nthen this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See\nGood practices and helpful tips\nfor help navigating the pageless format.\nLink sharing\nIf you\ndo\nneed a Google Doc, create one with your company Google Workspace (formerly G Suite)\naccount and set the visibility, access controls and searchable flag according to the following guidelines.\nThe recommended defaults when sharing a document for GitLab internal purposes is setting visibility to\nGitLab\n, access to\nEditor\nand searchable\nCan find in search results\nto ensure everyone can contribute!\nNote:\nTo our knowledge, it is not possible to set the default to\nCan Edit\nand you have to change the permissions from\nView\nmanually. We hope that Google adds this capability in the future.\nVisibility Setting\nUse Cases\nAnyone with the link\nAvoid this setting. Instead, choose\nGitLab\n, then explicitly share the document with desired external individuals. Only use this if you want the document to be public but not indexed by Google.\nGitLab (Recommended Default)\nThis is the recommended default as it allows anyone within GitLab to easily discover documents via searching for their name within Drive.\nRestricted\nWhen the document contains highly sensitive or private information such as 1:1s with direct reports\nSearchable Setting\nEffect\n‚Äî‚Äî‚Äî‚Äî‚Äì\n‚Äî‚Äî‚Äî\nCan find in search results.\nmakes the file available to anyone with a PeppGitLaberdine Google account and discoverable within GitLab Google Drive‚Äôs search feature.\nMust have link to access\nmakes the file available to anyone with a GitLab Google account who has the link.\nAccess Setting\nUse Cases\n‚Äî‚Äî‚Äî‚Äî‚Äì\n‚Äî‚Äî‚Äî\nEditor\nAnyone that can view the document can edit it. This is the recommended setting when\nOn - GitLab\nis enabled for the document\nCommenter\nAnyone that can view the document can add a comment but cannot edit the document. This is ideal if you want to provide visibility but retain more fine-grained control of document editing.\nViewer\nIndividuals with access to the document will only be able to view it.\nReference Google‚Äôs\ndocumentation\non Link Sharing to learn more.\nGood practices & helpful tips\nIf you have content in a Google Doc that is later moved to the website or handbook,\ndeprecate the Google Doc\n.\nWhen referring to a Google Doc or folder on the Google Drive in the handbook, refrain from directly linking it. Instead, indicate the name of the doc. If you link the URL people from outside the organization can request access, creating workload and the potential for mistakes. (In the past, linking a Google Doc has led to inadvertently opening the sharing settings beyond what was intended.) This also helps prevent spam from people outside GitLab requesting access to a doc when clicking its link. To save people time you can also\nlink to the search results page\nwhich allows people to quickly get to the doc without anyone being able to request access. If there are multiple documents showing up in the search, you may filter your\nsearch link by adding the owner.\nIf you are having trouble finding a shared Google Doc, make sure you\nSearch <your domain>\nin Google Drive.\nIn our handbook, if you find yourself wondering whether it is better to provide a public link to a Google Doc vs. writing out the content on the website, use the following guideline: Is this document frequently adapted / customized? If yes, then provide a link, making sure that the document can be\ncommented on\nby\nanyone\nwith the link. For instance, this is how we share our employment\ncontracts\n. If the document is rarely customized, then provide the content directly on the site and deprecate the Google Doc.\nIf you want to quickly find where a team member‚Äôs cursor is in a Google Doc, click their icon at the top of the document and the app will jump you to the current location. This works in Sheets and Presentations as well.\nYou can set the notifications on a Google Doc so you only get emailed when someone tags you directly instead of getting emails for every comment. Click on ‚Äúnotifications‚Äù and select ‚ÄúOnly yours‚Äù. By the way, when you create the doc, it defaults to All, but when you are just shared with it, it defaults to Only yours. There is\nno global default\n.\nYou can find a template of the\nGitLab letterhead\non the shared Google Drive. Please be sure to make a copy of the document to your Google Drive before customizing the template for your use.\nIf you want to have the Google Doc be readable to the public, do not change the sharing settings from ‚ÄòEditable by Everyone at GitLab‚Äô,\npublish the document\ninstead.\nIn all cases, the sharing settings (who a document is shared with, if it is visible to the whole company, etc.) on a Google Doc should be the single source of truth for the confidentiality of the document.\nAvoid using your initials when adding content to Google Docs or referring to someone else. Use your full name, as Google Docs\nSmart Compose\nwill auto-complete names for you, and display information about the GitLab team member on hover. It makes documents more readable and consumable, especially for people outside your team/department.\nWhen there is a synchronous discussion about an issue or MR captured in a Google Doc, be sure to summarize the discussion into the issue or MR and link to the agenda item where it was discussed with a\nbookmark\n. If the notes are\nlimited access\nor no notes were taken, please say so. This will ensure that interested GitLab Team Members can see both the summary and context of the discussion.\nIn the\npageless format\nyou can use COMMAND+OPTION+SHIFT+J or\nView‚Äì>Hide Comments\nto quickly hide comments that reduce document width.\nWhen using Google Docs, paste full URLs rather than linking text.\nChips\nare the one acceptable alternative when linking to another Google document. Advantages for using URLs rather than hyperlinks include:\nGreater visibility when it is a long URL and specific. Links are important but easy to miss otherwise (short and only a different color and/or underlined).\nAbility to see what the content is without hovering over (which isn‚Äôt quick on mobile).\nMakes it easier to paste the content as formatting free text (not rich text), which we prefer and is sometimes the only option.\nHow to deprecate a Google Doc\nAdd ‚ÄòDeprecated: ‚Äô to the start of the title.\nRemove the content you moved.\nAdd a link to the new location at the beginning of the doc/first slide/first tab.\nAdd a link to the merge request or commit that moved it (if applicable).\nHandbook page\nPages like this are part of the\nhandbook\nProduct documentation\nGitLab Docs\n-\ndocs.gitlab.com\nis where you can find documentation on GitLab, the product.\nGitLab repositories\nrepository\n/\nrepositories\nare where files are kept under\nsource code management\n. In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc.\nREADMEs\n-\nREADME.md\nfiles are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for\nuser profiles\nas personal READMEs.\nGoogle Calendar\nWe recommend you set your Google Calendar access permissions to ‚ÄòMake available for GitLab - See all event details‚Äô. Consider marking the following appointments as ‚ÄòPrivate‚Äô:\nPersonal appointments\nConfidential & sensitive meetings with third-parties outside of GitLab\n1-1 performance or evaluation meetings\nMeetings on organizational changes\nThere are several benefits and reasons to sharing your calendar with everyone at GitLab:\nTransparency is one of our values and sharing what you work on is in line with our message of ‚Äúbe open about as many things as possible‚Äù.\nDue to our timezone differences, there are small windows of time when our availabilities overlap. If other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member. This speaks to our value to be more efficient.\nIf you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. ‚ÄúCheck Google Analytics‚Äù), consider marking yourself ‚ÄúFree‚Äù for those events so that coworkers know they may schedule a meeting during that time if they can‚Äôt find another convenient time.\nGoogle Calendar Appointment Scheduling\nThis feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability.\nThis allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools.\nA member of our Customer Success team created a\ndemo video of how to use this feature\n.\nExternal communication\nKey practices to consider during any meeting are listed below.\nVideo Calls - If this is your first time meeting a customer/prospect/partner/etc., turn on your camera when you login to Zoom. This will help to make the customer/prospect feel more comfortable as they are certain your undivided attention is geared towards them.\n‚ÄúNo agenda, no attenda‚Äù - Always have an\nagenda prepped and ready to go\n, with the exception of\ncoffee chats\n. Share this with your audience. Make sure that everything on the agenda is accurate and ask if there‚Äôs anything missing that needs to be addressed during this call or for the future. When there is no agenda, it translates to you not caring. When sharing agendas with customers and partners it should be called ‚ÄúGitLab + Name Shared Collaboration & Agenda‚Äù, not ‚ÄúExternal Agenda‚Äù as that implies there is something the parties are not seeing.\n70/30 Rule - Ask open ended questions that leave the audience talking 70% of the time, while you are talking 30% of the time. Please note that this varies based on the type of meeting that you are conducting. Be conscious of what questions need to be asked and to capture those items.\nTake Notes - Effective note-taking is a valuable skill that will help you retain and recall any important details. Be the person who remembers all the details of your audience‚Äôs needs.\nAdapt to Audience Tone - Before going into the business portion of your meeting, evaluate first the tone of the audience. Adapt your tone accordingly in order to appeal to various types of personalities.\nMid-call - Half-way through the meeting, check in with your audience. Ask them what their thoughts are on the progression of this meeting and if what you‚Äôre presenting is on the right track. This helps both you and the audience by re-aligning expectations and making sure the meeting is going the right direction.\nPre-Close Summary - 10 Minutes (1-hour meetings) or 5 minutes (30 minute meetings) prior to ending the call, ask the audience to build out an agenda for the next step or meeting. This helps to secure next steps and to ensure there are no balls dropped.\nPost Meeting Action - Immediately write down notes and next steps and input into the proper directory (Google Drive, Salesforce, etc.).\nTwo Block Rule - For in person meetings with external parties you should wait until you‚Äôre more than two blocks from the meeting before discussing the results of the meeting. Nobody wants to hear themselves being discussed in the bathroom.\nCommunicating with media and industry analysts\nGitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services.\nFor more, please visit the\nCorporate Communications handbook section\n.\nPaid external speaking requests\nGitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third party‚Äôs questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to\n#external-comms\nSocial media\nPlease see our\nteam member social media policy\n.\nPosting or streaming to YouTube\nSee the\nYouTube page\nfor options and instructions for posting recordings and live streaming to our YouTube channels.\nGuidelines for vendor meetings\nWe request external vendor meetings to use our video conferencing tool so we can quickly join the call and record the session if we need to. Confirm with vendor that they agree we can record the call. The DRI for the vendor meeting will generate the zoom link and share with the vendor.\nDecide ahead of the meeting who should be invited, i.e. those likely to get the most out of it.\nAhead of the meeting, we should agree internal agenda items/requirements/priorities and provide to the external provider.\nIn order to make the best use of time, we wish to avoid team introductions on the call, particularly where there are a number of us attending. We can include a list of attendees with the agenda and give it to the vendor before or after the meeting. Introductions can be helpful in some external calls. In those meetings, use\nthese guidelines\n.\nWhen a question or issue is raised on the agenda, if the person who raised it is present they will verbalize it live on the call; or if they are not present, then someone will raise it for them. This is a common GitLab practice.\nWhere possible, we request that the vendor provides their slides / presentation materials and any other related information after the meeting.\nDo not demo your tool live, create a pre-recorded walk-through of the tool and make it available to GitLab before the meeting so we can ask questions if needed.\nBe cognizant of using inclusive language.\nWe respectfully request that everyone is mindful of the time available, to help manage the call objectives effectively.\nUser communication guidelines\nKeep conversations positive, friendly, real, and productive while adding value.\nIf you make a mistake, admit it. Be upfront and be quick with your correction. If you‚Äôre posting to a blog, you may choose to modify an earlier post. Just make it clear that you have done so.\nThere can be a fine line between healthy debate and incendiary reaction. Try to frame what you write to invite differing points of view without inflaming others. You don‚Äôt need to respond to every criticism or barb. Be careful and considerate.\nAssume positive intent\nand explicitly state the strongest plausible interpretation of what someone says before you respond, not a weaker one that‚Äôs easier to criticize.\nRapoport‚Äôs Rules\nalso implores you to list points of agreement and mention anything you learned.\nAnswer questions, thank people even if it‚Äôs just a few words. Make it a two way conversation.\nAppreciate suggestions and feedback.\nDo not make promises that you can‚Äôt keep.\nDo not offer\nplatitudes\n. Be direct and respectful. For\nexample\n- we don‚Äôt need to suggest that our actions are because we ‚Äúheard feedback‚Äù when they are really done for other reasons.\nGuide users who ask for help or give a suggestion and share links.\nImproving Open Development for Everyone\n,\nTypes of requests\n.\nWhen facing negative comments, respond patiently and treat every user as an individual, people with the strongest opinions can turn into\nthe strongest supporters\n.\nBy default, discussions in issues and MRs are public and could include participation of wider community members. It is important to make the wider community members feel welcome participating in discussions and sharing their view. Wider community members also submit\nMRs to help improve our website/handbook\nand this is often their first contribution to GitLab. We want to make sure that we are responsive to their contributions and thank them for helping improve GitLab.\nAdhere to the\nCode of Conduct\nin all communication. Similarly, expect users to adhere to the same code when communicating with the GitLab team and the rest of the GitLab community. No one should accept being mistreated.\nCompany phone number\nIf you need to provide the details of GitLab‚Äôs contact information you can take the\naddress from the visiting page\nfor reference; or the\nmailing address\nof the office in the Netherlands if that is more applicable.\nIf a phone number is required, leave this field empty by default. If that is not possible, then use\nthe general number (+1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email.\nEffective communication competency\nCompetencies\nare the Single Source of Truth (SSoT) framework for things we need team members to learn.\nIn an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab:\nUses\nasynchronous\ncommunication as the starting point and stays as open and transparent as we can by\ncommunicating via text\nthrough public issues, merge requests, and Slack channels (over DMs).\nPlaces an emphasis on ensuring that conclusions of offline conversations are written down ensuring a\nsingle source of truth\n.\nProduces video\nwhen necessary.\nIf you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources:\nCommunicating effectively and responsibly through text\nEmbracing asynchronous communication\nSkills and behavior of applying effective communication as a Team Member\n:\nEffectively practices communication via text.\nUses asynchronous communication when possible:\nmerge requests\n(preferred) or\nissues\n.\nDirects all communication to the appropriate channels (Slack, GitLab, email).\nRecognises when synchronous communication is the more appropriate option.\nDirects all decisions and discussions to the Handbook as a single source of truth.\nRecords videos to communicate information when that is the most efficient and effective way to consume the content.\nEmploys multimodal communication to broadcast important decisions.\nPractices low context communication and provides as much background as possible when communicating via text to avoid confusion.\nSkills and behavior of applying effective communication as a People Manager\n:\nImplements working asynchronously across teams, departments or across the company. Drives communication where possible to asynchronous channels.\nHolds team members accountable for effectively communicating via text.\nFosters an environment across teams, departments or divisions where asynchronous communication is the starting point.\nGuides team members on when producing video is appropriate. Implements interactive communication tools across their team, department or the company depending on level.\nDrives and funnels conversations to the right channels across teams, divisions and the company.\nAlly Resources\nWhat is an ally? A diversity, inclusion and belonging ‚Äúally‚Äù is someone who is willing ‚Ä¶\nAsk Me Anything\nLearn and ask questions at GitLab's Ask Me Anything (AMA) meetings\nConfidentiality levels\nAt GitLab, we are public by default, but some information is classified as internal or limited access. This page provides details on confidentiality levels.\nDeep Dives\nThe goal of a Deep Dive session is to share knowledge about a particular topic, with the assumption that recipients already have some basic understanding or aptitude for the given subject.\nGitLab Communication ‚Äî Zoom\nZoom-specific communication guides GitLab uses Zoom as the primary video collaboration platform for ‚Ä¶\nGitLab Communication Chat\nIntroduction At GitLab, Slack is critical to our communication with each other. While it enables ‚Ä¶\nGitLab Video Playbook\nGitLab Video Playbook The purpose of this playbook is to help those who are looking to create video ‚Ä¶\nPower of the Pause\nPower of the Pause There are times in everyone‚Äôs life when you can feel overwhelmed, anxious, ‚Ä¶\nTop Misused Terms - GitLab Communication\nList of Top Misused Terms Below are terms people frequently use when they should use another term. ‚Ä¶\nLast modified July 9, 2025:\nUpdate file _index.md (\n2a31acb0\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 22841}
{"doc_id": "a4ddfad6be917a6d", "url": "https://handbook.gitlab.com/handbook/legal/employment-law", "title": "Legal, Employment at GitLab: A Strategic Partnership | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nLegal, Employment at GitLab: A Strategic Partnership\nEmployment law governs the relationship between employers and employees. At GitLab, the Legal Employment team serves as a\nstrategic partner\nacross the organization, providing expert guidance and proactive legal solutions throughout the entire team member lifecycle.\nWhat does this partnership entail?\nWe *\ncollaborate strategically\nwith Sales, Go-to-Market, Finance and People teams to develop scalable, compliant employment solutions as GitLab expands globally and responsibly, implementing a comprehensive process for gathering, assessing, and acting on country-specific information.\nWe\nempower\nthe Talent Acquisition department to achieve its critical goals while ensuring compliance with local laws and regulations during sourcing, recruitment, and hiring processes.\nWe\nenable\nthe People Connect team to effectively onboard and support team members with location- and role-specific legal support, setting team members up for success from day one.\nWe\npartner\nwith the Total Rewards team, People Operations team and People Business Partners to develop forward-thinking policies that balance GitLab‚Äôs business objectives, team members‚Äô needs, and global legal requirements.\nWe provide\nstrategic counsel\nto our Team Member Relations team, People Business Partners, and Total Rewards as they navigate complex team member matters, including reasonable accommodation requests, performance management, career progression, and other relationship dynamics.\nWe\nchampion\nour Diversity, Inclusion, and Belonging initiatives by aligning all employment decisions with our mission statement and applicable laws.\nWe\nsafeguard\nGitLab‚Äôs interests while also providing fair treatment during employment transitions, including offboarding processes and post-employment matters.\nHow to work with the Legal Employment team\nConnect - Collaborate - Consult (and Consider any additional guidelines)\nTo work with the Legal Employment team, reach out early in your process, provide complete information about your needs and any time constraints you have. Being specific about what you‚Äôre requesting and any deadlines you face will enable the Legal Employment team to best triage requests and support you.\nConnect\nTo connect with Legal Employment, especially on sensitive matters, you can use the ‚Äô\nlegal-employment@gitlab.com\n‚Äô email address, or for non-sensitive queries, you can reach out in the\n#legal\nslack channel. Note that GitLab team members with individual employment queries should reach out to Team Member Relations team on ‚Äô\nteammemberrelations@gitlab.com\n‚Äô or to their aligned\nPeople Business Partner\nfor support.\nCollaborate\nFor cross-functional projects that do not involve individual team members but do require the Legal Employment team‚Äôs attention, please (i) open an Issue in the\nLegal and Compliance Project\n; (ii) select the appropriate Issue Template; (iii)  apply the label legal-employment :: to-do and (iv) if you know which Legal team member you will be working with, include them as an Assignee. This will update the\nLegal Employment Issue Board\nfor the Employment team‚Äôs benefit, and allow the team to pick up and/or assign appropriately.\nlegal-employment:in progress\nmeans the Legal Employment team is actively working on the issue.\nlegal-employment:pending requester\nmeans the Legal Employment team has a requirement or task that must be met by the requester before the issue progresses.\nlegal-employment:done\nmeans the Legal Employment team has finished their portion of the issue.\nConsult\nA table showing coverage for queries by subject matter is available for internal use and can be accessed\nhere\n. You are welcome to consult any member of the Legal Employment team.\nConsider these additional guidelines\nIt is worth considering the\nprivilege guidelines\nwhen communicating with GitLab‚Äôs Legal and Corporate Affairs team (aka the LACA team), including the Legal Employment team. Note that, if a communication is privileged, it can be protected from disclosure in litigation or other disputes. If in doubt, there‚Äôs an internal, GitLab University micro course on\n‚ÄòPrivileged communication‚Äô\n, which is relevant to any team member who communicates with the LACA team, seeking legal advice on behalf of GitLab. The training explains the legal protection which may be applied to certain communications between team members and LACA and how best to communicate in order to be protected.\nIt is also important to note that, if you receive any formal documents that appear to be legal notices, demands, subpoenas, court papers, or other potential litigation materials, you should please forward these by email to the legal team immediately (to the ‚Äô\nlegal@gitlab.com\n‚Äô email address) without responding yourself. Please add a brief note explaining when and how you received the document. These materials often have strict response deadlines, and your prompt sharing allows the legal team to review and address them properly to protect both you and GitLab.\nLast modified May 1, 2025:\nUpdate file employment-law.md (\n28f76b4e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 760}
{"doc_id": "d5d8b9bb99bf371d", "url": "https://handbook.gitlab.com/handbook/engineering/development/sec/security-risk-management/security-insights", "title": "Security Risk Management, Security Insights | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nSec Section\nSecurity Risk Management Section\nSecurity Risk Management, Security Insights\nThe Security Insights group at GitLab is charged with developing solutions to enable customers to manage their security risks effectively and efficiently.\nCustomer outcomes we are driving for at GitLab\nAs a developer it is imperative to know if you are introducing vulnerabilities as you merge into protected branches in addition to the default branch. In FY25, we will allow users to track vulnerabilities across multiple branches. If there is something a developer wants to remediate, but aren‚Äôt sure where to get started, they can use our features AI to learn more and get a suggestion for a fix.\nAs a security engineer, you want to know what vulnerabilities to work on first. Over the next year we will be adding key risk metrics so you can quickly triage and mitigate vulnerabilities that have the potential to be exploited.\nLeadership wants to make sure their organization is mitigating risks and their security programs are effective. With enhancements to the Security Dashboards, leaders will have a place to get an overview and answer key questions about metrics, trends and vulnerabilities that need\nto be addressed quickly.\nTop Priorities for FY25\nEnable users to identify risk and visualize trends\n- We will be making enhancements to Security Dashboards at the project and group level.\nEstimate potential impact and likelihood of vulnerability exploitation\n- Give users the ability to access risk directly in the vulnerability report through industry known risk scores like CVSS (Common Vulnerability Scoring System) and exploitability probability.\nEnable users to track vulnerabilities across multiple branches\n- Allow users to track vulnerabilities outside the default branch.\nOffer guidance for users to get started with vulnerability remediation\n- leverage the power of AI and security training to help developers understand and remediate vulnerabilities.\nSecurity Insights features are reliable and perform at scale\n- As we add more group and organization level features, we will be optimizing query performance and move forward with confidence that our database will scale and perform as we grow.\nSecurity Insights Team Structure\nThe Security Insights group is structured into three focused swimlanes that each approach work in\nvertical slices\n: Performance and Optimization, Projects, and AI. This subdivision is to provided bounded focus to each area: enabling us to progress on multiple fronts and reduce planning overhead.\nTeam Structure\nName\nRole\nSlack channels:\nMain channel:\n#g_srm_security_insights\nEngineering - All SRM groups:\n#s_srm_eng\nPrioritization\nWe use our  Security Insights Priorities page for\n17.x\nto track what we are doing, and what order to do it in.\nProduct Workflow\nThe Security Insights group largely follows GitLab‚Äôs\nProduct Development Flow\n.\nAdditional information can be found on the\nPlanning page\n.\nMilestone Planning\nOn the second Tuesday of the month the Product Manager kicks off the planning issue. They identify priorities for the milestone and tag engineering managers, and stable counterparts (UX, QA) to review.\nBy the third Tuesday of the month the Engineering Managers have reviewed the planning issue and agreed on the scope for the milestone.\nAll issues scheduled for the milestone should have the\n~Deliverable\nlabel as well as\nHealth Status: On Track\nat the beginning of the milestone. The milestone field should also be set correctly.\nThe planning issue is created in this\nepic\nfor 17.0-17.11.\nProject Estimation\nOur team follows a multi-phase estimation process. This allows us to have just-in-time information to facilitate predictable roadmap planning.\nHigh Level Estimation\nProjects in our priorities roadmap will contain an estimation issue (labeled with\n~estimation::needed\n). These can be found on the\nestimation issue board\n.\nEstimation issues have several desired outcomes:\nProvide high level, # of milestone based estimate for the respective capabilities (frontend, backend)\nIdentify dependencies (other product groups, new technologies, libraries)\nDetermine outstanding questions and if they block further estimation or will be required before planning breakdown can start.\nThese outcomes should be added to the respective areas within the epic template.\nAdd\n~estimation:complete\nlabel and close the estimation issue when complete.\nTracking Deliverables\nIssues that are marked as Deliverables for a milestone serve as the single source of truth for what we aimed to deliver for a given milestone. Throughout the milestone, things may change, become blocked, etc.\nIdeally, we‚Äôd like to keep the Planning Issue unchanged after the milestone starts.\nSomething is considered delivered if it is either a. merged into production in time for the release date, b. completed before the next milestone start, or c. the feature flag enabling the feature is turned on.  It is important to keep track of the milestone of the deliverable; we encourage self-managed customers to turn on feature flags so they can try different features. Ensuring the milestone is correct, allows someone to tell if that change is available in a specific release.\nWeekly async issue updates\nAt the end of every week, each engineer is expected to provide a quick async issue update by commenting on their assigned issues using the following template:\n### Async issue update\n*\nCurrent status:\n<!--- Please provide a quick summary of the current status (one sentence) -->\n*\nShipping this milestone:\n*\nScope reduction opportunities:\n/health_status\n/label\n<!-- Please apply a :triangular_flag_on_post: emoji to this comment. Fore more information see https://gitlab.com/jayswain/automated-reporting -->\nWe do this to encourage our team to be more async in collaboration and to allow the community and other team members to know the progress of issues that we are actively working on. This also enables us to automatically collate updates across swimlanes, removing some manual process.\nIndicating Status and Raising Risk\nOur teams use the\nHealth Status\nfeature within issues to indicate the likelihood of completion within the milestone. We assign\nOn Track\nat the beginning of a milestone to a small number of issues where we have high confidence in delivery during that milestone. If there is concern with marking something as initially on track, then we should discuss why.\nRaising risk early is important. The more time we have, the more options we have. For example, issues that have not gone into review by the first Monday of the month may not have enough time to get merged. These should be considered Needs Attention or At Risk depending on their complexity and other factors.\nFollow these steps when raising or downgrading risk:\nUpdate the Health Status in the issue:\nOn Track\n- high confidence - there is no indication the work won‚Äôt get merged by the second Tuesday of the month.\nNeeds Attention\n- medium confidence - the issue is blocked or has other factors that need to be discussed.\nAt Risk\n- low confidence - the issue is in jeopardy of missing the merge cutoff on the second Tuesday of the month.\nAdd a comment about why the risk has increased or decreased. Copy the Engineering Manager and Project Manager for awareness.\nNote that an issue probably shouldn‚Äôt go directly from On Track to At Risk. That pattern indicates we have missed an opportunity to discuss earlier. Consider the progression:\nOn Track -> Needs Attention -> At Risk\n.\nSupport rotation\nOn top of our development roadmap, engineering teams need to perform tasks related to support and triage. Our team nominates an individual person to reserve capacity for these tasks. The rota is\nhere (internal link)\nThis is to avoid excessive context-switching and better distribute the workload. It is important we defend our focus within the team to support the delivery of our commitments.\nIf you are\nnot\nthe nominated person in a given week then:\nYou are not expected to triage and investigate by default. Use your best judgement here (e.g. critical issues still take priority, no change in expectations here).\nYou should redirect the question to the nominated person (e.g. if it comes in a DM in Slack, redirect it to our public channel).\nPlease keep track of the actions you‚Äôre doing during your rotation and add notes in the corresponding issue (e.g. copying tools command executed locally, sharing relevant changes to projects and processes, etc.)\nTriage expectations\nTriage does not immediately guarantee a change to currently-planned work in a milestone. Triage is the process of determining impact and priority so we can justify changes to scope and milestone commitments.\nRefine the request for help tickets: do we have reproduction steps, does this relate to other scoped or planned work, is this a bug or feature request or an acceptable limitation of the system.\nOutcomes could be: updates to our documentation or Handbook pages, validated reproduction of bugs and then creating issues from this.\nDirectly answering support questions.\nEngaging with Product to agree on priority and scheduling of any work required. Work with Product to define severity and whether to interrupt the rest of the development team.\nWhen dealing with Slack interactions you are expected to use the following reactions:\nüëÄ - I am actively looking at this\n‚úÖ (or a variant) - This is resolved\nResponsibilities - Support\nMonitor slack channels for questions, support requests, and alerts. The person assigned to the reaction rotation is expected to handle them primarily.\nIf a support engineer requests assistance via Slack and it requires investigation or debugging, they should be directed to raise an issue in\na dedicated project\n.\n#g_srm_security_insights\ns_srm\n#sec-section\nWe utilize a standardized\nRequest for Help\nprocess to request formal assistance from our group . This helps with visibility, tracking and review. Please submit a new Request for Help for Security Insights using\nthis template\n.\nMR Reviews\nWe follow these guidelines when submitting MRs for review when the change is within the Security Insights domain:\nAim to request at least one of the reviews from someone outside our group. This helps avoid a code knowledge silo.\nFor time-critical reviews, consider using internal reviewers and maintainers.\nThe initial review should be performed by a member of the team. This helps the team by:\nFaster reviews, as the reviewer is already familiar with the domain.\nAdditional awareness of changes taking place within the domain.\nIdentifying changes that don‚Äôt align with what is happening with the domain.\nProviding additional confidence from a domain expert to the external maintainer reviewer that the change behaves as expected.\nGraphQL merge requests should be reviewed by a frontend engineer as soon as possible. This\nhelps to validate the interface, and allows changes to be made before tests are written.\nIssue Boards\nSecurity Insights Milestone Board\nPrimary board showing the stage of currently planned issues.\nSecurity Insights ‚ÄúWho‚Äôs working on what‚Äù board\nShows issues assigned to engineers on our team.\nThese boards show current status of issues.\nQuality\nQuality and E2E Specs\nWorkflow of E2E runs on Staging and Production\nWe run scheduled E2E tests on both staging and production environments every 4 hours. These tests help ensure that recent deployments haven‚Äôt introduced regressions.\nWe can monitor test results in the following Slack channels:\n#e2e-run-staging\n#e2e-run-production\nFor full details of scheduled E2E test pipelines running against live environments see\nE2E test pipelines\n.\nRunning and Fixing E2E specs\nPrerequisites\nEnsure the following before running tests:\ngdk\nis up and running\nRunner is up and running\nSet\nto 0 inside your\nenv.runit\nin the\ngitlab-development-kit\ndirectory:\nexport\n=\n0\nEnsure EE License is set as an environment variable in your .env file.\nRunning QA Tests\nUse the following command to run tests locally against your GDK instance:\nRunning against your\ngdk\nWith a feature flag enabled:\n=\nfalse\nbundle\nexec\nbin/qa Test::Instance::All http://gdk.test:3000/ <filename/path> --enable-feature <feature_flag_name>\nYou can also run a specific RSpec line using\n:<line_number> to target the surrounding example block. See\nRSpec best practices\nfor more details.\nWith a feature flag disabled:\n=\nfalse\nbundle\nexec\nbin/qa Test::Instance::All http://gdk.test:3000/ <filename/path> --disable-feature <feature_flag_name>\nWithout a feature flag:\n=\nfalse\n=\n\"root_password\"\n=\n\"api_token_from_gdk\"\n=\n\"root_password\"\n=\nhttp://gdk.test:3000 bundle\nexec\nrspec <filename/path>\nRunning against staging\n=\ntrue\n=\ntrue\nbundle\nexec\nbin/qa Test::Instance::All https://staging.gitlab.com <filename/path>\nThe credentials are to be found in 1Password.\nLocal testing of licensed features\nWhen a feature needs to check the current license tier, it‚Äôs important to make sure this also works on GitLab.com.\nTo emulate this locally, follow these steps:\nExport an environment variable[^1]:\nexport\n=\n1\nWithin the same shell session, run:\ngdk restart\nNavigate to\nAdmin > Settings > General > ‚ÄúAccount and limit‚Äù\n, and enable ‚ÄúAllow use of licensed EE features‚Äù.\nSee the\nrelated handbook entry\nfor more details.\nTroubleshooting common errors and fixes\nFor general troubleshooting hints, see\nE2E test troubleshooting\n.\nError: QA::Resource::Sandbox Fabrication Failed\nError Message:\nFabrication of QA::Resource::Sandbox using the API failed (400) with `{ \"message\": \"Failed to save group {:visibility_level=[\\\"public has been restricted by your GitLab administrator\\\"]}\" }`\nSolution:\nNavigate to GDK Admin Area ‚Üí General\nUnder Restricted Visibility Levels, ensure none of the checkboxes are selected.\nError: API Client Validation Failed\nError message:\nAn error occurred in a `before(:suite)` hook.\nFailure/Error: raise InvalidTokenError, \"API client validation failed! Code: #{resp.code}, Err: '#{resp.body}'\"\nSolution:\nEnsure your user verification is complete before running a pipeline.\nCheck if your API token is valid.\nError: Namespace is Not Valid\nError message:\nQA::Resource::Errors::ResourceFabricationFailedError:\nFabrication of QA::Resource::Project using the API failed (400) with `{ \"message\": { \"namespace\": [\"is not valid\"] } }`.\nSolution:\nReset your GDK by running:\ngdk data-reset\nError: Webpack Module Parse Failed\nError message:\n/.../.../.../gdk/gitlab/node_modules/graphql-ws/dist/client.js 75:56\nModule parse failed: Unexpected token (75:56)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See\nhttps://webpack.js.org/concepts#loaders\n>           if (\"id\" in message2) listeners2[message2.id]?.(message2);\nSolution:\nSwitch from Webpack to Vite\nRun\ngdk update\nRunning E2E specs in the MR pipeline\nWe encourage running the\ne2e: test-on-omnibus\ndownstream\nE2E job\nin merge requests at least once and reviewing the results when there are changes in:\nGraphQL (API response, query parameters, schema, etc.)\nGemfile (version changes, adding/removing gems)\nDatabase schema/query changes\nAny frontend changes that directly impact the vulnerability report page, MR security widget, pipeline security tab, security policies, configuration, or license compliance page.\nRunning Govern E2E specs locally against GDK\nStandalone\nE2E specs can be run against your local GDK instance\n.\nE2E tests with feature flags\nE2E tests should pass with a feature flag enabled before it is enabled on Staging or on GitLab.com.\nTherefore, it‚Äôs important to confirm this when introducing a new feature flag. Adding or editing a feature flag definition file\nstarts two\ne2e:test-on-omnibus\njobs\n(one with the feature flag turned on and another where it‚Äôs turned off).\nFor a thorough explanation of the end-to-end testing process when working with feature flags, please consult the official documentation on the\nTesting feature flags with end-to-end tests\npage.\nNotes and Resources on QA Testing\nFor any questions, reach out to\n#s_developer_experience\n.\nResources\nTesting at GitLab handbook page\nTesting Code in Merge Requests\nRunning Govern E2E Specs Locally Against GDK\nAutomatic test execution when a feature flag definition changes\nEnd-to-end test pipelines\nGitLab team member‚Äôs guide to using official build infrastructure\nE2E testing overview video\nMonitoring\nStage Group dashboard on Grafana\nLargest Contentful Paint (LCP)\nfor our web pages.\nContributing\nLocal testing of licensed features\nWhen a feature needs to check the current license tier, it‚Äôs important to make sure this also works on GitLab.com.\nTo emulate this locally, follow these steps:\nExport an environment variable:\nexport GITLAB_SIMULATE_SAAS=1\nThere are many ways to pass an environment variable to your local GitLab instance. For example, you can create a\nenv.runit\nfile in the root of your GDK with the above snippet.\nWithin the same shell session run\ngdk restart\nAdmin > Settings > General > ‚ÄúAccount and limit‚Äù, enable ‚ÄúAllow use of licensed EE features‚Äù\nSee the\nrelated handbook entry\nfor more details.\nCross-stack collaboration\nWe encourage frontend engineers to contribute to the backend and vice versa. In such cases we should work closely with a domain expert from within our group\nand also keep the initial review internal.\nThis will help ensure that the changes follow best practice, are well tested, have no unintended side effects, and help the team be across any changes that go into the Security Insights codebase.\nCommunity Contributions\nThe Security Insights group welcomes community contributions. Any community contribution should get prompt feedback from one of the Security Insights engineers. All engineers on the team are responsible for working with community contributions. If a team member does not have time to review a community contribution, please tag the Engineering Manager, so that they can assign the community contribution to another team member.\nIf a team member creates an issue or finds an issue where we would be open to a community contribution, it should be labeled with ~‚ÄúSeeking community contributions‚Äù. If the contributor needs an EE license, we can point towards the\nContributing to the GitLab Enterprise Edition (EE)\nsection on the Community contributors workflows page.\nGroup discussion\nWe hold group discussions every other week.  We alternate between a milestone kickoff and general discussion format. Everyone is invited to attend, and it‚Äôs a great forum to ask questions about Vulnerability Management, customer queries, our road map, and what the Security Insights team might be thinking about. You can find the meetings on the\nSecurity Insights calendar\n; take a look at\nthe agenda\n(internal link). We hope to see you there!\nLast modified July 8, 2025:\nRemove Security Insights metrics section (\n7d074be1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2893}
{"doc_id": "f0c8d450fc1da288", "url": "https://handbook.gitlab.com/handbook/sales/commercial", "title": "Commercial Sales | The GitLab Handbook", "text": "The Handbook\nSales\nCommercial Sales\nWelcome to the Commercial Sales Handbook\nThe Commercial Sales department is part of the overall\nGitLab Sales\nDivision. We focus on delivering maximum value to\nSMB and Mid-Market\ncustomers throughout their entire journey with GitLab.\nCommercial Team Groups\nSMB Account Executives\nMid Market Account Executives\nArea Sales Managers\nGetting Started as a New Hire\nPlease ensure you read the\nCommercial Sales onboarding page\n.\nTop Tips to Onboard Quicker\nBookmark the relevant SalesForce dashboard for your region, this is essential to your success. Your Manager will give you the link when you first join.\nGet familiar with the\nclose date conventions\nused in Commercial Sales.\nEnsure you fully understand\nthe Required 7\n. Your teammates and manager are more than happy to help you with this if you need it.\nRead through reviews of GitLab to get an idea of what customers think about the product. Two good places to start are\nSoftwareadvice.com\nand\nGartner Reviews\n.\nWatching videos is core to your onboarding. You can watch YouTube & Chorus videos at 1.5x or 1.75x speed to get through them efficiently, you can still retain the information but in less time. Go to the Settings widget > Playback speed.\nWhen you first start, searching through Slack is a great way to find useful information as it‚Äôs our primary method of asking questions and announcing things to the company. Some channels that are particularly good for information:\n#questions\n#sales\n#competition\nUse\nBuiltWith.com\nto get an idea of what technologies a customer is using currently (though be sure to verify this with them)\nYou might find it useful to create a Google doc to document all your learnings in your first 30 days, as you will get a lot of information to remember and it will also get you in the habit of taking notes, a\nkey part of GitLab‚Äôs culture\n.\nYou can never have too many\ncoffee chats\nwith colleagues. You don‚Äôt need to ask permission from people, just put some time in their diary.\nMake sure your calendar is always up to date so that you can get meetings from SDRs without having to moving them around.\nListen to as many\nChorus\ncalls as possible. They are an excellent way to onboard.\nAdd your own tips to this page as you onboard to pay it forward for the next new rep!\nGet familiar with GitLab and seaching for Issues, MR‚Äôs and handbook pages. This will significantly speed things up as you progress through onboarding.\nContinuous Learning\nBelow is a list of resources considered highly valuable for continuous learning and development by Commercial Sales team members at GitLab. Note, that some of these resources are not publicly available, so consult a fellow teammate for access where necessary.\nGitLab Direction\nIncludes GitLab‚Äôs Vision,\nMaturity\nframework and planned features and their release dates within each of GitLab‚Äôs\nPaid Tiers\n.\nGitLab Blog\nMonthly articles on Releases, Engineering, Open Source, Culture and other popular topics of interest.\nGitLab Unfiltered YouTube\nA YouTube channel private to GitLab employees with video recordings and playlists on company meetings, enablement sessions and other topics. Access GitLab‚Äôs\nSales Enablement playlist\n.\nChorus Recordings\nOur team‚Äôs history of call and demo recordings is a valuable training resource for new and existing sales team members.\nSales & SDR Enablement Sessions\nWeekly training sessions covering popular product, market and sales training topics chosen by the sales and marketing team members.\nProduct Study Guide\nA study course for team members to understand the current full scope of capabilities offered in each tier of GitLab and reasons for tier upgrades.\nSales Training\npage\nCommercial Sales Enablement\npage\nEvents\nWhen traveling please consider ROI of both any costs plus your time:\nIf you are going to an event you think first:\nWhat is the total you will spend for travel?\nWhat is the total you will spend on food and lodging for me?\nWhat is the amount you will likely spend on customer meals (meals x customers x # of times)?\nHow many total business hours will you be away from salesforce?\n8 hours: then you need to get 5x return on $, and the fact that any event pipeline closes at about 30%\nHow many total personal life hours will you be away from your personal life?\nGiven the rough calculation above, you‚Äôve to be committed driving/booking enough Net ARR at the event prior to you going to the event\nNote: this doesn‚Äôt mean you can‚Äôt get travel approval without booking meetings. It means once you get travel approval it is on you to go get people to the event/meetings to create pipeline.\nTrip Notes\nThe ultimate purpose of attending any GitLab field event is to gain insight and add value. Sid Sijbrandij, our co-founder, talks about the importance of conferences and events\nhere\n. He believes the main goal of GitLab team participation should always be to connect with our customers and prospects and not to solely attend presentations. Trip notes are our internal process for tracking and capturing this data.\nWhy and When?\nTrip notes are required for the entire Commercial Sales Team anytime a team member travels for the company while working at GitLab. We believe it would be fun and valuable if you also shared trip notes when you traveled for personal reasons; however, that is up to your discretion.\nHow to properly document your trip notes?\nPlease follow the best practice process and use the\ntrip note template\nas a format to prepare for your future trip.\nTrip Notes Best Practice\nCommercial attendee will write up their notes in a google doc.\nPlease save your notes as GitLab internal read only for Commercial Team review in the\nCommercial Sales Drive Trip Notes Folder\n.\nOnce saved, please slack and share a link to your notes in the commercial_global_all channel to alert the team of your recent trip.\nFinally, please share your\nPost Trip feedback\nfor the entire company and the Field Marketing team directly in the specific Event Issue on the ‚ÄòPost Event Recap & Feedback‚Äô spreadsheet.\nGive Back Project\nWhat is the Give Back Project?\nThe Give Back Project is a self-selected opportunity to help the Commercial Sales team achieve better results. It is a finite project that, upon completion, is to be adopted by no less than 70% of the Commercial Sales team and used at least once a month.\nThe Give Back Project is assigned to all new Commercial Sales team members and is required to be completed as part of their on-boarding process.\nWhy is there a Give Back Project?\nThe goal of the Give Back Project is to allow new team members to be able to instantly contribute to the Commercial Sales team\nFosters GitLab‚Äôs values of collaboration and results\nThe Give Back Project gives team members the opportunity to be exposed to problems on the team today and will allow the team to look back and see how we addressed shortcomings in the past\nHow to properly document a Give Back Project\nGive Back Projects are described and worked by team members in the\nCommercial Sales issue tracker\nIf it is something that needs to be repeated (like a customer AMA) an associated handbook entry is created with a description on how a new person could achieve this\nAlthough the Give Back Project is designed to be finite, there is always room for iteration at GitLab. Be sure to include any necessary instructions on how a different team member would be able to add to your project if necessary\nExample Give Back Projects\nCustomer AMAs:\nMeetings for GitLab team members with current customers that provide an opportunity to ask them about anything in regard to their experience with GitLab\nCustomer Meetings:\nSharing the best practices for conducting any kind of external meeting at GitLab\nTrip Notes:\nallows team members who attend field events to track and capture data in order for the rest of the team to gain insight\nDoing Business with Partners/Channels:\nGuidelines on how to work with partners and resellers in order to ensure value is maximized in these areas\nHow to Handle New Customers After They Purchase:\nBest practices for handling new GitLab customers based on the scope of their purchase\nTechnical Evaluation of Customers:\nHow to properly evaluate a customer‚Äôs current technical environment in order to create organizational alignment and prescribe how GitLab can best solve their problems\nFor a complete list of our Give Back Projects and other Onboarding assignments our team is working on, please click the private link\nhere\n.\nPaid Time Off (PTO) and Results\nWe have found following steps beneficial to make the process of time off easy for Sales and keep business continuity.  This does not serve as a replacement to the company wide\nGuide to Paid Time Off\nor add process for\nSick Time Policy\n. This is the expanded approach to preparing yourself and the team for time off planned specific to the group.\nInform Manager as in the GitLab team members guide to time off\nAsk a regional team member for coverage and share planned time off\nSelect someone ideally in similar role and who has capacity to cover while OOO\nIt may be helpful to create a shared doc of action items, and follow reference from the handbook\nThere may be cases where double coverage or support from your manager is needed if no one else is available\nNote: For\nFamily & Friends Day\n, there is no need for backup coverage as it is a publicly visible shutdown for GitLab. Please message in your below OOO auto-reply as such including the handbook page, and contact details for technical support\nSubmit time-off in Time Off by Deel in Slack, and add your chosen team member who is covering for you as the assignee role for all tasks, you can label it something like ‚Äúimmediate and general‚Äù\nCreate calendar invite with title:\nEx: ‚ÄúFirst and Last Name OOO - (First and Last Name) is Covering‚Äù. Optional invite to your manager and person covering.\nBlock the morning of your return date on your calendar so you can return to work with catch-up time for things like:\nRe-submitting forecast in Clari\nRanking new accounts that came through\nRespond to email, support tickets, via Required 7\nOptionally schedule time on the return day to sync with the individual covering for you\nRole responsibilities to prepare being out of office\nAny quotes that are currently out to clients, resend via docusign with the person covering for you cc‚Äôd on them. Intro AE covering to client in case either have questions via email\nRun\nthis report\n, edit the\ndates\nfield in the top right corner to be the dates you are OOO, then select ‚Äòrun report‚Äô. Make sure ZERO next steps are falling on the dates you are out and cover anything not urgent before PTO. This will ensure you leave you without a huge workload for your backup or you in return.\nIf you have an urgent next step scheduled, reach out before vacation, inform the client you will be OOO and get either the person covering for you or your manager included by\ncc:\non the email w/ intro\nIf you have less urgent next steps approaching, assess if they should be handled before or after vacation and then edit the next steps date based on your assessment\nSet your email OOO auto-reply including the email of the person covering for you. If your manager is available the days you are out you can add them as well in the email message and any other urgent correspondence\nOn the day before time off:\nEnsure all required 7 reports are up to date\nSubmit forecast in Clari\nOptions on phone notifications related to work:\nEncouraged: Delete apps associated with work such as email and slack\nRecommended if it is difficult to get these apps back on your phone: Silence notifications on apps associated with work\nLeave your computer closed and have a blast!\nArea Sales Managers have additional steps to consider before leaving for time off:\nSet expectations on coverage for 1:1s and team meetings\nUpdating quote approval routing in SFDC to the person covering for you. Navigate to you name dropdown - My Settings - Personal - Approver Settings.  Search for the person covering next to Delegated Approver, confirm and select Save\nIn Navan, set Vacation Delegate in Settings - Account Details\nSubmit forecast\nIf planned time off exceeds the 25 consecutive days as outlined in the guide, request temporary ASM coverage for forecasting in Clari by submitting a request in the\nSales Operations\nproject.\nRole responsibilities of covering for a team member as backup\nRespond within 24 hours to the absent AE‚Äôs customers if they contact you.\nAddress new Required 7 items that appear on your team‚Äôs Required 7 dashboard for the absent AE.\nTake any urgent customer calls or BDR/SDR calls that have been set up. If you are not able to attend for any reason, you are expected to tell your manager so that appropriate backup can be found. Customer or prospect calls on the calendar should not be delayed or rescheduled.\nWork on and close deals in the absent AE‚Äôs territory while they are out.\nBackup AEs are not required to:\nCover tasks unrelated to the specific AE role. For example, if the absent AE is a member of a Team Member Resource Group (TMRG), you are not expected to attend TMRG meetings.\nOutbound campaigns to the absent AE‚Äôs customers (you can if you want to, of course).\nAgree to be a backup if you do not have time to do so, or cover multiple team members. There are other AEs who can help.\nForecast on behalf of the absent AE. Only update their opportunities as needed.\nRequired 7\nNew team members should familiarize themselves with\nThe Required 7\n. These are the 7 tactical skills required to be an excellent Commercial Sales Account Executive:\nRanking your accounts\n-\nvideo here\nRank all accounts and explain why; log your sources for future efficiency; this needs to be your (recent) ranking, not the previous owners, nor the ranking from the prior fiscal. If it‚Äôs unchanged, make the note that it is unchanged and why\nBuilding your (consider changing the deck)\ncustom deck\nfor any opp amount over $5k SMB $10k MM\nAmount\n(n.b. amount, not Net ARR) that:\nCalculates the ROI of using GitLab vs. next best option (this might be vs. do nothing)\nProvides the 2 options for the customer going forward - normally both with GitLab (example: Ult or Prem)\nDemonstrates a customised vision for the customer: ‚Äúwhat if you used all of GitLab to do DevOps in a single app?‚Äù\nCapture the full response, in the customers‚Äô words to that vision and the reasons why they think it is possible, or not possible. This capture can be done in the speaker notes so your customer can validate and then copied into an activity after the call.\nvideo here\n, and be sure to check out\nthis video\non creating an effective ROI slide deck and\nthis supporting deck\nCapturing key information:\nHow did the customer/prospect hear about GitLab and what is their understanding of what we do?\nMeaningful information on why we won/lost a deal\nLogging your\ncall notes\nvideo on taking efficient notes during a meeting\nand top tips from a top performer\nhere\nUpdating your next steps\n-\nvideo here\nCommand plans\n, what needs to be filled in:\n$5k SMB, $10k MM\nAmount\n- All fields in opportunity overview (the whys) and close-plan over this Amount threshold\n$10k SMB, $20k MM\nNet ARR\n- Full Command Plan over this Net ARR threshold\nIf you don‚Äôt yet know the answers or have the data, you will populate the Command Plan fields with your script and next steps to get that information\nException to command plan: for channel managed opportunities we may not have access - put\nChannel-Managed\nin the opportunity title\n(\ntraining session here\nand\ntraining deck here\n)\nKeeping your opportunities\nup to date at all times\nvideo\nAccount Ranking\nIt is a requirement for the Commercial Sales Team to tier their accounts using the fields on the Account Object. This helps prioritize the accounts to go after when prospecting for new or expansion. Please see below definitions specific to SMB and Mid-Market AEs.\nRanking Training and Definitions\nCommercial Sales: Account Ranking Training Clippet\nSMB Account Executive Definitions for Account Ranking\nRank 1: Top 10 Accounts with new business or upselling possibility within the next 12 months\nRank 1.5: Future opportunities that we should not lose track of as there is a sales opportunity here with no timeline\nRank 2: Believe there is an opportunity, but will take additional work before opening and beginning a sales cycle\nRank 3: Greenfield, SDR attention - perhaps a drip campaign\nSMB AE must have potential user field filled in on the account object for Rank¬†1, and 1.5\nSMB AE must have the notes section filled in on why an account is Rank¬†2 or 3\nMid-Market Account Executive Definitions for Account Ranking\nRank 1: Accounts that I am working to maximize their Net ARR this fiscal year.\nRank 1.5 The subset of Rank¬†2 that is best and trending toward being future Rank¬†1s.\nRank 2 Accounts that I am working to grow and I speak with them at least once a month.\nRank 3 Accounts that I keep informed about GitLab and DevOps monthly.\nClose Date Conventions\nFirst, forecasting, down to even the opportunity level, is a routine exercise for accuracy, not motivation or aspiration. Each week on Wednesday it is required to update five values in Clari by close of business (5 PM) local time.¬† This is Renewal Loss Best Case, Renewal Loss Best Case, Gross Net ARR Best Case, Gross Net ARR Commit, and Net 50/50.¬† At this time, it is required to double-check pipeline cleanliness and always follow the close date conventions listed here.\nThe close date should always be in the month that you believe it has the most likely chance of closing (with only one exception as dictated below).\nAt\nall times\nthe Net ARR amount should reflect your best estimate of the actual amount that the opportunity will have on it when it closes in the month reflected in the close date. There are no exceptions other than returning from an onsite visit, even if you have not spoken with the account. If you get a new opp you should quickly assess the account and, given your experience, make an educated guess on what amount the company will transact at.\nThe Stage represents where you believe the customer is in their buying process, not only the specific steps they have taken with you.\nThe three close dates:\nLast day of the month it will close in\nonly if you have a compelling event defined\nThe actual day the opportunity will close when the quote goes out for signature. It will appear past due if we don‚Äôt get the signature back and pushes to the Friday of the week it should close.¬† Renewals default to this convention\nFirst day of the following month, no compelling event defined\nPlacing the close date on the first day of the month is a temporary status of\nup to 48 hours\nduring which time the AE would work directly with their Champion / Economic Buyer to confirm the compelling event and client timeline.  Once determined, the AE would move the close date to the last day of the month of actual closing.\nThis close date carries a window of roughly 60 days of when you think it will come in\nExample\n: It‚Äôs April 23rd, a new business Mid-Market opportunity is identified for a company at 410 employees and growing at an unknown rate (unclear due to being an agency). The company completed their evaluation with a trial ending this month, there are defined problems initially trying to solve, with some people who have used GitLab before.\nQuestion for AE and self, what % chance of the purchase occurring in April, May, or June?\n90% April, 10% May\nChorus recordings\nA recording Chorus license is mandatory for all Commercial Account Executives. Our intent is to record customer calls for the following reasons:\nFor training, to make sure we are giving customers the best possible experience\nTo give to the customer as a visual record of our conversations with them\nTo verify any details we may have missed in the conversation\nMandatory steps required to record calls\nFollow instructions for using\nChorus Scheduler\nDeal Reviews\nProject 35\nAs we continue to grow as an organization, developing our sales skills to deliver an impeccable sales experience is a critical component of the customer experience, either leading them to enjoy working with GitLab or not, depending on the quality of that experience. We‚Äôve created a program called ‚ÄúProject 35‚Äù to help you improve your selling skills. We are utilizing our largest opportunities for the quarter to hone in our selling skills with the goal of these skills being valuable on all other sales opportunities.\nAs part of Project 35 we will be focusing on the following core selling skills:\nRunning excellent sales calls & importance of pre-call prep\nStronger discovery to uncover Command Plan (why now, why GitLab, why do anything at all)\nBuilding ROI\nFinding & cultivating champions\nNegotiation\nComplex Deal Management\nCollaboration - amongst peers and leadership\nPreparation for your next role & large deal management\nDuring a Project 35 call, The AE who is discussing their opportunity will answer the following questions:\nPrep for a no. What are all the questions or reasons they will say no?\nAre we building a relationship (onsite, something else?)\nNail the project name and the timing of the project (sell services)\nSelling against a ROI slide\nBased on the information uncovered in the prior questions, use supporting reasons for AEs to update their next steps live. Managers should enter their comments in the Manager Notes section for any deals they review live or asynchronously.\nEngage wider sales team. Who are, by name, the CSMs, SAs, Partners that are helping sell the deal. Please assign them to the discussion in the document so that they are able to join the call and contribute to the discussion.\nOpportunity Consults and Lightweight Deal Reviews\nAn\nOpportunity Consult\n(OCF) is an in depth, two-way conversation between the AE and the ASM to review the opportunity\nCommand Plan\n. The AE should expect to provide the ASM with more detailed information about the\nOpportunity Overview\nfields, the customer‚Äôs pain points and desired outcomes, challenges or gaps in qualification aligned to the\nopportunity qualification framework, articulate a\nClose Plan\nand identify the biggest opportunity risk(s) and action(s) to mitigate those risks.\nA Lightweight Deal Review (LDR) is a shorter (5-10 minute) deal review that is designed to identify gaps in the\nCommand Plan\nand specific next steps. At the end of an LDR, an AE and ASM should have a plan in place to capture the information that is not in the Command Plan, and a specific plan of action on and before the next call.\nOpportunity Next Steps Best Practices\nAlways keep Next Steps Date and Next Steps up to date as an assignment to a future version of yourself on how you will take action to continue the customers buying process.\nWhen you start your day you need to check all inputs like email, zendesk, and lead queue so you can triage those requests into your priorities for that day.\nAllocate times of your day in four ways:\nCustomer meetings scheduled\nProactive email and internal efforts\nProactive calling efforts\nTime to check inputs again\nWhen beginning a proactive time block, open your opportunities view and sort by Next Steps Date.\nYour Next Steps should be specific and compelling so that you can take action on them within 3 minutes of reading.\nNext Steps\nshould contain\nonly\nthe actions you will take next: no dates, no history, just the Next Steps\nWhen you update\nNext Steps\n, the\nNext Steps History\nwill automatically capture your prior\nNext Steps\n, applying a date stamp and storing them in reverse-chronological order\nPlease Note:\nIf you previously included history in the\nNext Steps\nfield, the next time you update\nNext Steps\nyou will need to clear the field completely and input only your Next Steps\nOpportunity-Specific Slide Deck\nIt is required that all opportunities above $10,000 (Mid Market) and $5,000 (SMB) in total amount (not Net ARR) will have a custom slide deck that is shared with the customer or prospect. The custom deck must be attached to the opportunity by pasting the deck link in the SalesForce field ‚ÄòLink to Custom Pitch Deck‚Äô on the opportunity home page. This will enable Mid Market Account Executives and SMB Account Executives to capture critical account information. Additionally, this will facilitate selling on value rather than features.\nCustom Deck Requirements\nVisual Requirements\nDeck‚Äôs main color will match or resemble that of the customer‚Äôs.\nWhere possible, use the customer‚Äôs logo.\nIt is appropriate to ask the customer for a blank template.\nCustomer Agreed-upon Agenda\nWhen meeting with the customer, leverage an agreed upon agenda to aide in co-selling.\nCalculated ROI of GitLab v. Next Best Option\nFor New Business the next best option could be ‚Äòdo nothing‚Äô or our competition.\nFor Renewals the next best option could be to go back to what they were doing before.\nTwo options (rough plans) with GitLab going forward\nFor new business this takes the form of\nTwo Lane Selling\nwhere we give them a high engagement and a low engagement option.\nFor a renewal, this could be a one year v. a three year option, or Premium v. Ultimate.\nNon-Custom Single Application pitch to the customer\nThis slide should have a visual representation of using GitLab as a single application for the entire software development life cycle.\nThe intent of this slide is to have the conversation with the customer on ‚Äòwhat is possible‚Äô, and to capture their feedback\nFull capture of the customer‚Äôs feedback on the ‚ÄòSingle Application‚Äô slide\nCapture the customer‚Äôs actual words in the speaker notes of the ‚Äòsingle application‚Äô slide\nRed / Green Process and Procedures\nRed / Green Purpose\nEffective ASM coaching of the why now, why do anything, why GitLab and specific next steps the Account Executive will take with the prospect/client. The goal of the red/green process is to accurately forecast which opportunities will close for each designated fiscal period (Month/Quarter). The red/green process is  meant to most acutely build skills around identifying the timeline that is most comfortable for the customer to close.\nRed / Green Definition\nDesignating each opportunity that has a shot to close at the end of each fiscal period as either Red (not going to close before the end of the month), or Green (going to close before the end of the month), and updating manager notes with a defense of the color and a specific next step the AE will complete by the next check in (usually the next day). For context, a green account will have a ‚Äúwhy now‚Äù that corresponds with a close before the end of the period.\n- The threshold (unless otherwise stated) for accounts that will be reviewed during Red/Green is:\n- SMB: $2,000 NetARR or greater\n- Mid-Market: $7,000 NetARR or greater\nRed / Green Tactics\nRed/Green meetings are held the 15th (or closest non-weekend day prior to the 15th) of each month, and the last five work days of the month.\nArea Sale Managers should conduct R/G meetings live with each of their Account Executives. This discussion should not be held asynchronously. Checklist of items below in this order. Advance to next question once prior is confident\nIs this opportunity Red or Green?\nWhy do anything at all?\nWhy GitLab?\nWhy now? (Is there a time-driven reason this opportunity will close within a specific time frame)\nWhat level is your closest relationship with?\nHow can they help you:\nGet accurate information on the ideal time for the customer to buy GitLab?\nGet you access to someone else in the organization who has access to the above information?\nWhat is the AEs immediate next step based on the answer to the items above? If anything less than ‚Äúwait for account to move from closing to closed-won‚Äù, then see ‚ÄúWhy Now‚Äù question.\nAn example of a specific next step would be to ask your closest contact: ‚ÄúIs this at all easier for you if we close this next month?‚Äù\nOnce Red/Green discussion is complete on the account, the ASM will enter notes in the ‚Äúmanager notes‚Äù section of the opportunity to reflect the discussion and the immediate next step the account executive will take.\nRepeat the same process the following date for all accounts above the threshold.\nRed / Green Outcome\nHit the forecast we commit to and build better sales skills for our AEs and better coaching skills for our ASMs.\n- Ideal skills that need to be built are:\n- Understanding the concepts and execution around knowing the ideal timeline the customer wants to close.\n- Identifying pain and having customers understand both the negative impacts of not switching to GitLab as well as the realized positive business outcomes by switching to GitLab.\n- Building a time-bound mutual success plan with the customer based on the severity or the ability for the customer to devote resources to a project.\nRed / Green Lookback Process\nAt the first R/G meeting of the following period, the leadership team will submit their actual closed-won for the prior period as well as their final R/G commitment. Team will then discuss the reasons why each finished where they did and identify any items that led to variation from commitment.\nSMB Account Executives\nSMB Account Executives ‚ÄúSMB AEs‚Äù act as Account Executives and the face of GitLab for\nprospects and customers. They are the primary point of contact for companies that employ between 1 to 99 employees.\nSMB Roles\nSMB Account Executives are designated into one of the following pod positions:\nFirst Order\nPooled\nExpand\nNamed\nSMB Account Executives in First Order will assist prospects in their evaluation through the first buying process. Depending on the account, the other three roles will be the customer‚Äôs primary point of contact for any renewal and expansion discussions.  Collectively the team is responsible for working new business in their\nterritory\nas well as handling the customer journey for new and existing customers.\nAMER SMB Pooled Account Executives are responsible for managing a subset of SMB customers who range from companies on day 1 of using GitLab, all the way to companies who‚Äôve used GitLab since their day 1. The Pooled AEs work collectively in a ‚Äúpooled‚Äù account ownership model meaning customers are aligned at the team level and all AEs are equipped to help. Pooled AEs work with customers to evaluate product and plan expansion, making recommendations to ensure a successful renewal with GitLab based on their needs.\nPlease read below and through the\nSMB handbook page for more information\n.\nCritical Salesforce reports to follow and bookmark\nSMB AMER Required 7\nSMB APAC/EMEA Required 7\nSMB APAC/EMEA 1:1 Dashboard\nNew Business\nWork Initial Qualification Meetings\nIQM‚Äôs\nfrom Commercial SDR Team\nAccept Sales Accepted Opportunities according to\nSAO Criteria\nNurture and help prospects during their Trial evaluation after Accepting Opportunities\nPush to Webdirect or help with the Sales Order Process\nCustomer Journey\nInbound Queue Management\nLicensing/Subscription Management\nTroubleshooting Resource for Licensing/Subscription Management\nQuotes / Sales Order Processing\nCustomer Health Check Process\nGainsight Data in SFDC Definitions\nInbound Queue Management\nZendesk:\nManaging incoming requests received through support.gitlab.com\nThe goal and focus\nof working Zendesk tickets for the SMB team is to help with\nupselling\nand\nrenewals\nWithin timezone (WIP), the Support team is responsible to take the lead on all incoming ZD tickets in the\nUpgrades, Renewals, and AR (refunds) queue\n. In off-hours, the SMB team will triage and handle any tickets which will breach during their timezone.\nSupport will take the lead on all incoming requests in the queue and only forward to the sales owner when:\nThere is an Net ARR affecting event from a\ncustomer\nThere is a credit or other request which requires sales manager approval\nSalesforce Pipeline Activity\nOpportunity Management in Salesforce\nPrior to working a new opportunity always double-check the Account segmentation is ‚ÄúSMB‚Äù and the employee count for the company is less than 100, by viewing datafox information and verifying with LinkedIn (especially outside of AMER)\nDirect yourself every day to your Next Steps to know how to prioritize and organize your day. Recommendations on how to work through your next steps for the day:\nSort by stage, placing highest priority stage at the top\nPrioritize the opportunities you are going to work on first by stage, amount, and close date\nEnsure ‚ÄúNext Steps,‚Äù ‚ÄúNext Step Date,‚Äù and ‚ÄúNext Steps Owner‚Äù are current with actionable and informative information that helps guide you on how to move the opportunity through the pipeline\nIf a potential future opportunity that requires an action is greater than 30 days out, make sure this is detailed in the next steps field\nOnce opportunities in the stages Discovery through Awaiting Signature are updated, begin working on Pending Acceptance. Continue to prioritize with the same criteria as above.\nPipeline Generation\nIn weekly communication with your direct management review the health of your pipeline and update records as needed in real-time. You should know at all times what your pipeline multiplier is and if you need to create more pipeline to have a successful month and quarter. Refer to your team‚Äôs\nPipeline Generation\nchecklist documents and the associated SFDC reports associated with keeping activity up to date.\nCommercial Sales Stages Activities and Exit Criteria\nPipeline management is key to predictable, scalable revenue attainment and can make the difference between simply hitting your number and overachieving. Proper sales pipeline management helps you allocate your time correctly, increase deal velocity, and increase total deal volume, size, and revenue through accurate forecasting practices.\nA well-managed sales pipeline requires a clear process with defined activities and exit criteria that serve as a roadmap to getting a deal from discovery to closed won (or qualified out quickly). The following process is specific to the Commercial Sales team and will ensure you have a clean pipeline and accurate forecast.\nDetailed Exit Stage Criteria Google Sheet\nExit Criteria at a Glance\nPlease read through the\nCommercial Sales Opportunity Stages handbook page\nfor more information.\nWeb Direct Oppty Management in Salesforce\nFind the report view for all CFQ ‚Äúcurrent fiscal quarter‚Äù Web Direct purchases in your territory ‚ÄúSMB_Web Directs CFQ_name‚Äù:\nCheck that there are no open opportunities that could have been a duplicate by viewing the opportunities listed under the Account\nIf not a duplicate, place the main contact in the opportunity on the outreach sequence ‚ÄúSMB_Web Direct Outreach‚Äù - by: Madeline Hennessy\nDependent on the opportunity and company if personal outreach is preferred, you must log your activity and have a next step date to follow up on your activity\nLicensing/Subscription Management\nNote: if you need access to a system,\nopen an Access Request\nGitLab Trials & Subscription Management\nAccess\nthe CustomersDot\nto provide changes to a user, group, or subscription.\nTroubleshooting & How-To Resources for Licensing & Subscription Management\nDetailed instructions on how to handle problems with licenses and subscriptions can be found in\nthese instructions and resources.\nMore information about\nsales order processing\ncan be found in the Business Ops handbook section.\nMid Market Account Executive\nMidmarket Account Executives are the primary point of contact between prospective and existing customers of GitLab within a space defined as mid-market, which currently works with companies that employ between 100 to 1,999 employees. These GitLab team members manage the spectrum of project sizes, ranging from small fast growing teams in smaller agile organizations to complex enterprise projects advising on the journey with GitLab to achieve specific business outcomes.\nMid-Market AEs work closely in tandem with the business development team and sales management to manage a broad book of business spread over a large opportunity value range and focus on exceeding client expectations.\nMid Market Roles\nNew Logo AE\n: These AEs work on the\nBase Accounts\nthat are not currently customers of GitLab. Once the customer has signed its first contract, the customer is transitioned to the SMB, MM, or ENT segment depending on the size of the customers.\nMM Key Accounts Named AE\n(MMKAN): These AEs work on current customers that have been deemed to be high spending (high CARR) or have the potential to be high spending (high LAM). To be successful the MMKAN AE must expand their accounts more than the standard expansion rate for their named list of accounts. The named list for each MMKAN AE will grow through the fiscal year as the MMKAFO AE wins new high potential customers.\nMM Territory AE\n: These AEs work geographic regions of accounts that have not been vetted to be New Logo AE or MM Key Account named AE. The role sells to both prospects and current accounts.\n‚ÄúMM Key Accounts‚Äù can be used to refer to MM Key Accounts First Order and MM Key Accounts Named collectively. MM Key Accounts are the sub-set of MM accounts with a higher\nand potential LAM.\nCore Responsibilities\nOwn your set of accounts - build & execute your plan.\nManage book of business: new business, expansion, renewals.\nCollaborate with Sales Development channel for handover of inbound qualified opportunities to progress to closure.\nExecute outbound campaigns.\nNew Business\nWork Initial Qualification Meetings\nIQM‚Äôs\nfrom SDR Team\nAccept Sales Accepted Opportunities according to\nSAO Criteria\nNurture and help prospects during their Trial evaluation after Accepting Opportunities\nPush to Webdirect or help with the Sales Order Process\nSelecting Target Accounts for marketing\nLog into Datafox or Sales Navigator\nInput your territory criteria\nEstablish a list of accounts and sort by Company Head Count\nSearch for keywords like DevOps\nLook into each account to see if they are actually yours\nLook into each employee that is either an engineer or technology professionals\nAdd that company name to your list\nIf not enough companies through this process continue below:\nLook for the intersection of revenue and vertical in Datafox\nLook at the account in SFDC to see if CE User\nFilter using signals if using Datafox\nAssess if they have had recent funding announcements\nOnce selected add the company name, city, and zip code to your sheet\nCustomer Journey\nInbound Queue Management\nLicensing/Subscription Management\nTroubleshooting Resource for Licensing/Subscription Management\nQuotes / Sales Order Processing\nCustomer Health Check Process\nGainsight Data in SFDC Definitions\nAccount Ownership Rules of Engagement for Commercial Sales updated 2022-09-22\nThe Commercial Sales Team follows the\nAccount Ownership Rules of Engagement\nThis section provides step by step clarity on how to follow the\n.\nProcess to follow\nAccount will be organized into the following two categories:\nAccounts who were customers before February 1st of the fiscal year\nAccounts who became customers on or after February 1st of the fiscal year\nAccounts who became customers before February 1st of the fiscal year will follow this process\nIt is the responsibility of the Account Executive who owns the account to qualify how many employees the account has prior to February 1st.\nAccounts who have less than 100 employees on or before February 1st will be owned by SMB for the fiscal year\nAccounts who have 100 or more employees on or before February 1st will be owned by Mid Market for the fiscal year\nAs an Account Executive, if you qualify an account and are unsure of the rules of engagement by the number of employees or corporate address, you should screenshot the data you are reviewing, post it on the account in chatter and edit Account Rank Notes. Tag your Area Sales Manager when research is complete for further review by @ mentioning them. If the ASM has reviewed the data provided by the Account Executive as well as doing their own due diligence and is unsure of the rules of engagement, they should screenshot their research, post it on the account in chatter and tag the Regional Director for review by @ mentioning them. Finally, if a Regional Director is unsure of the rules of engagement after reviewing the data provided and doing their own due diligence, they should screenshot their research, post it on the account in chatter and tag the Regional Vice President for review and final decision. All final decisions for Commercial account and opportunity ownership are up to the sole discretion of the Regional Vice President of the Commercial Division.\nAccounts who became customers on or after February 1st of the fiscal year\nAccounts will be separated into the following categories\nSales Assisted First Order\nWeb Direct First Order\nFor sales assisted first orders, it is the responsibility of the account executive who conducts the initial discovery with the prospect to research and qualify the number of employees and headquarter location for the account.\nIf the account has less than 100 employees the account will be managed by SMB for the remainder of the fiscal year\nIf the account 100 employees or greater the account will be managed by Mid Market for the remainder of the fiscal year\nIf the account has greater than 500 employees or greater than 100 LAM dev please see the Rules of Engagement Between MMKAFO and Mid-Market Territory for FY ‚Äò23 for proper lead routing\nFor web direct first orders we understand there may be a degree of differentiation of actual employee count versus what our systems capture based on the tools utilized to enrich data. It is the responsibility of the Account Executive who owns the first order to identify the correct number of employees after the web direct first order and ensure that the employee count is not ‚Äúwholly wrong‚Äù. Wholly wrong is used only for accounts that upon initial assignment are assigned by automation i.e. no team member reviewed them at first transaction.\nWholly wrong is defined as the following\nMid Market owned accounts with less than 80 employees\nSMB owned accounts with greater than 120 employees\nIf an account is wholly wrong, it is the responsibility of the account owner to chatter @sales-support to reassign the first order and the account to the correct segment.\nIf an account is not wholly wrong but above or below the segment line (respectively) is it the responsibility of the account owner to chatter @sales-support to flag the account to move to the appropriate segment at the beginning of the following fiscal year.\nAll accounts that are not researched or identified as being assigned to the wrong segment will be reassigned.\nIf the AE qualifies this and then keeps it, this can lead to disciplinary action.\nAs part of the qualification process tt is expected to qualify the location of company headquarters and employee count so we can best support the customer. It is not acceptable to qualify location and employee count in a manner that jeopardizes the customer experience. If you are unsure, always tag your manager in chatter to review the data before involving the customer.\nRules of Engagement Between MMKAFO and Mid-Market Territory for FY ‚Äò23\nFiscal Year 2023 Account Moves\nFor all accounts that are in SalesForce.com as of February 24, 2022 the Mid-Market Key Accounts First Order team will own all accounts that are:\nSegmented to Mid-Market NORAM or EMEA\nMarked as ‚ÄúFirst Order Available‚Äù in SalesForce\nHave a full time employee count of 500 employees or greater as marked in the ‚ÄúAccount Demographic Max Family Employees‚Äù field under Account Demographics in SFDC.\nHave a potential user count of 100 users or more as measured by the LAM Dev Count Field.\nTo avoid confusion the logic is\n[1 AND 2 AND (3 OR 4)]\n.\nNote: If an AE suspects that the employee count or potential user count is not accurate in our data sources, it is the AEs responsibility to uncover the employee count and potential user count during the discovery phase. If an account is identified to belong to either territory or First Order and the other party continues to work the lead without doing proper due diligence, the account will be reassigned to the appropriate party.\nNew Accounts to SalesForce.com after Feb 24, 2022\nFor all\ninbound\nMQLs for which an account does not yet exist in SalesForce.com, the routing of that lead and account will be based exclusively on employee count.\nIf the account has 500+ employees it will be routed to the MMKAFO team\nIf the account has less than 500 employees it will be routed to the Mid-Market Territory team\nMMKAFO AEs are able to go\noutbound\nto accounts that are not yet in SalesForce.com that fit the criteria in the Mid Market Key Accounts definition:\nMid-Market accounts that have either 500+ employees OR 100 potential users as defined by LinkedIn Engineering + IT personnel count.\nMMKAFO AEs are able to create the outbound accounts in SFDC that fit the above criteria, and ask Sales Operations to move the account into their name.\nNote: If it is found out that an AE asks for an account to be deduplicated in order to work said account, disciplinary action will be taken.\nAccount Moves Throughout Fiscal Year 2023\nIf an MMKAFO AE finds out through discovery that a sub 500 employee account segmented to First Order in reality has less than 100 potential users, they should immediately ask for the account to be moved to Territory.\nIf a ‚ÄúFirst Order Available‚Äù account is segmented to Territory, and the Territory AE finds out through discovery that the account actually has more than 500 employees, they should immediately ask for the account to be moved to First Order.\nThe automation for new accounts in the system means accounts with under 500 employees but over 100 potential users will be routed to territory and left there unless they have no activity at the quarter change over.\nIf it is found out that an AE intentionally ignores rules number 1 or 2 more than twice in a fiscal year disciplinary action is likely to be taken.\nCo-Selling\nCo-selling is the responsibility of both the Account Executive and their Area Sales Manager to join sales calls together. This is to ensure the best client/prospect experience, along with jointly finding the highest potential within that account.\nArea Sales Managers have an expectation to log a minimum of 5 co-selling calls per rolling 7 days, although we are aiming to achieve closer to 10-12 calls over a rolling 7 days.\nCo-Selling Roles when working with your ASM\nPrimary Seller: Consider this role as the main pitch person. You are directing the conversation, sharing the deck and taking live notes and adding value, while also keeping on track with the agenda decided upon.\nCo-Seller: This individual is responsible for raw notes in Salesforce, time management, and digging into comments to identify areas where we should be finding additional information. The Co-pilot should be digging into levels and amounts of pain when the Pilot moves on without capturing this.\nFor additional information please visit this\nreinforcement module\nWorking with Channel Partners\nThe GitLab partner network is ready to work with GitLab Account Executive‚Äôs in order to extend the customer selling and services capacity offered by Commercial Sales. Channel‚Äôs approach to this is called Partner Co-selling and working with Partners involves building a simple, clear, mutual customer opportunity plan establishing ‚Äúwho will do what, when?‚Äù.\nWhat are the key benefits from working with partners?\nAEs Working with Partners for Increased Customer Value & Net ARR\nExtended reach and capabilities via Partner sales and services capacity and reach via GitLab-trained Partner AE‚Äôs, SA‚Äôs, Engineers, and often a GitLab channel manager to coordinate/assist.\nAccelerated reach to new customer logos ‚Äú\nLand\n‚Äù: Partners are beginning to bring GitLab new logo opportunities via mining their customer base. In many cases, Partners already have a ‚Äútrusted Partner status‚Äù with their customers, which also serves to accelerate new logo engagements.\nIncreased customer ‚Äú\nExpand\n‚Äù success: In many cases, Partners will sell and deliver the key services called for to ensure customers get the maximum value from their GitLab technology investment and drive stage advance along with user growth.\nDeployment and related services: For faster delivery and increased capacity, AEs are turning to Partners to sell and deliver these services, also CSM-like customer success services.\nIn the case of OPEN partners via distributors, dramatic reduction in the admin steps associated with quote-to-order process.\nHow do AEs work with partners for increased customer value & Net ARR?\nGitLab has a mature Partner network with good coverage of GitLab-trained Sales and Technical resources. There are a few ways in which AEs will work with a customer including a Partner.\nApproved Partner GitLab Deal Registrations\nAs these are received in your territory, in most cases* you will be contacted by a GitLab channel team member to arrange a co-selling kickoff call to develop a simple Partner co-selling plan to share with the Partner. GitLab Channel Managers do not proactively manage all OPEN Partners. AEs can always request Channel Manager support for a Deal Registration by slacking channel-sales or available contacts.\nIf you find themselves thinking 1. ‚Äúa Partner SA could execute on this customer-requested SA task‚Äù, or 2. AEs have customers that could benefit from a ‚ÄúPartner services attach engagement‚Äù, reach out on slack\n#channel-sales\nwith a Partner engagement request, if possible with a link to the related account or opportunity. A member of the channel team will promptly reach out to learn more about the request, and connect you with a Partner that is pre-qualified to promptly and properly execute on the task at hand, and keep you updated along the way.\nAEs should lead planning and execution of the joint opportunity/customer pursuit with alignment and support of the partner and GitLab Channel Manager. The plan should be\ntracked in SFDC with tasks and action items\n. Partners should always get an email confirmation of any tasks assigned to them (via AE or Channel Mgr).\nChannel Managers will engage with AE‚Äôs in the following ways:\nWhen a new deal registration arrives in the AE‚Äôs pipeline\nTo review 2-3 Partners for the AE to work with for AE-selected joint customer success motions:\nThe Channel Manager will bring the possibilities forward during this call\n2 examples of working with Partners are featured in\nthis LevelUp\nAEs should share their thoughts about prioritizing which Partner activities would be best for which of their customers\nIn the case of Open partners via distributions, when the opportunity is ready, AE‚Äôs email\npartnersupport@gitlab.com\nwith the link to the opportunity requesting quote-to-order support (chatter alias coming soon)\nResources to learn more about teaming with Channel Partners?\nIf this is a first time for an AE, we recommend watching the available training delivered. This Levelup video starts with a basic understanding of the\nChannel Partner landscape\n.\nLevelUp video on\nMaximizing Value of Partners in a Deal\nspecifically for AE‚Äôs to learn more about co-selling success.\nLearn more about Partner co-selling best practices, how Partners can help build out key elements of an AE‚Äôs R7 & Command Plans\nand much more in the\nChannel Sales Handbook\n.\nSlack\n#channel-sales\nor reach out to your Channel Account Manager with any questions or requests for assistance. The channel is closely monitored by several members of the channel team who are here to help AE‚Äôs succeed in co-selling in any way we can.\nList of\nGitLab-trained OPEN and SELECT channel partners\nChannel Partner Finder **\nHere\nNew Logo Team\nThe New Logo Team is a specialized sales team within GitLab‚Äôs High Velocity Sales & New Logo organization focused on closing first-order deals in MM & ENT accounts.\nAfter the first transaction is closed by the New Logo team, the New Logo AEs are responsible to kickstart the handover process. Below are the responsibilities of the New Logo team and the Mid-Market Key Account Named team.\nWhen to Pass an Account Mid-Market or Enterprise\nNew Logo AEs will own an account until an account becomes a paid customer. Once this happens, the account will graduate into their respective segment (SMB, MM, or ENT).\nHandover Process\nNew Logo AE Responsibilities\nPlease refer to the\nNew Logo Team Playbook\nfor additional information about the role and responsibilities.\nEnsure the opportunity is marked as ‚ÄòClosed-Won‚Äô.\nEnsure the customer has a working license.\nLog an activity (naming convention: [NL AE NAME] NL Account Summary for Handoff)  on the account level detailing the following:\nWhy the account chose GitLab (use case)\nThe expected NetARR to be sold in the next 12 months\nEstimated timeframe of the next purchase\nWhy you believe b and c to be the case\nWork with the Named or Territory AE, the CSM (if known), and the customer to set up a handoff call\nNew Logo AE should take the lead on scheduling this call\nNote\n: Should the NL Rep and Named or Territory AE agree ahead of time that an email introduction will suffice, then the team can bypass the handoff call.\nIf the initial amount AND the potential of the next opportunity are less than a combined NetARR of $10,000, or the inheriting AE agrees, a handoff email can be used.\nEnsure all material like custom decks are added into a dedicated customer sub-folder in the\nCustomers & Prospects\ndrive.\nCreate a sub-folder in one of the folders labeled A-Z based on the first letter of the customer account name. (Example: Acme Inc. would go in the folder labeled ‚ÄúA‚Äù)\nAdd all customer facing or internal documents related to that customer into the folder. This way the entire Account Team will be able to view all related content.\nFor Web Directs without prior engagement :There will be no handover as the FO AE has not had any engagement.\nDigital Sales Room\nA Digital Sales Room is a secure, personalized webpage where AEs can share curated content, collaborate with prospects, and track buyer engagement throughout the sales process. It centralizes all sales materials, presentations, and communications in one branded space, eliminating scattered emails and creating a seamless buyer experience.\nDigital Rooms - Highspot Overview Training\nDigital Rooms 101\nEngage Buyers with Digial Rooms\nNamed/Territory AE Responsibilities\nWork with the New Logo AE, CSM, and customer to schedule a handoff call (or email).\nThe goal should be to have two-way communication with the customer within one week of the initial close.\nIf an email is used, the Named or Territory AE should respond at their earliest convenience to introduce themselves as the new primary point of contact\nLook at the account activities for the activity logged by the FO AE.\nBased on the above notes, open a growth opportunity if scheduled before the first renewal date\nRead through all notes tagged (ii), the custom pitch deck, and the command plan to gain an understanding of the account and its potential.\nEngage the CSM on strategic accounts and get them engaged asap\nFor Web Directs: It is the responsibility of the Named/Territory AE to reach out to the new customer.\nProcess to Move Accounts From Base to Named/Territory\nPlease refer to the\nGo-To-Market Rules of Engagement\npage for additional information about account graduation for the New Logo Team.\nWhen to Consider Involving a Named or Territory AE Before the Initial Deal is Done\nThere may be situations where it is beneficial to either GitLab, the Prospect, or both to introduce the Named or Territory AE before the initial deal closes. These situations include, but are not limited to:\nExtra support is needed for a strategic account.\nA CSM may need to be engaged before the initial contract is signed.\nAn onsite meeting may need to happen and the Named/Territory AE is in a better geographical location to handle it.\nThe customer has asked to be introduced to who will handle their account after the initial contract is signed.\nGeneral Guidelines to Follow When Making this Consideration\nIt is always the decision of the New Logo AE to determine if an introduction should be made pre-contract signature, but there are some general best practices to follow if an introduction is to be made.\nIdeally, pre-contract introductions would be limited to higher LAM accounts, so this does not become a scale issue.\n99 LAMDev for Key Accounts\n->49 LAMDev for Territory Accounts\nIn an effort to not waste Named/Territory AEs time, an introduction should not be made unless there is a very high close percentage. Therefore, an introduction is best if made when the opportunity is in\nstage 5 or 6\n.\nNamed/Territory AEs and New Logo AEs should meet often (every other week on average) to identify accounts where a pre-contract introduction would make sense.\nCommercial Leadership Development Pilot Program\nThis pilot program is for Commercial team members interested in learning more about Sales management and building foundational leadership skills.\nThis program is designed to give team members:\nExposure to leadership topics and development of foundational leadership skills\nLeadership frameworks that they can modify and apply to their teams\nExperience with the expectations of a sales leader and how that differs from an individual contributor role\nOpportunity to network with peers and other cross functional stakeholders\nThe program will run for a total of\n8\nweeks;  each week focusing on a new topic. See the proposed topics by week for the pilot program:\nWeek\nTopic\nDescription\n1\nLeading People\nPrimary differences between being an individual contributor and a leader, establishing a V2MOM for your newly created team, building an inclusive culture, situational leadership, coaching model, establishing expectations for success and the cadence of events to drive consistent results on a daily, weekly, monthly, quarterly and annual basis\n2\nRunning Effective 1 on 1s\nCore components for every meeting, how to capture and provide feedback from activities during the week, building consistency in performance through consistent accountability in one on one.\n3\nA Leaders Responsibility on Sales Calls\nStructure of an effective pre-call meeting, what roles a leader should focus on during the sales call, expected follow up for coaching and delivering results\n4\nRunning Effective Team Meetings\nKey components to a great team meeting - recognition, training, results, pipeline creation and current events. How to structure a meeting to bring energy and ensure AEs leave with clear expectations for the week ahead\n5\nCoaching and Providing Feedback\nUtilizing different coaching frameworks based on situational need - GROW, SBI, Skill/Will Coaching Model. An HR partner‚Äôs perspective on key professional items that may arise and how to handle them\n6\nForecasting & Managing Metrics\nUnderstanding what leading and lagging indicators to measure. Implementing programs based on the trends identified in metrics to ensure consistent, positive results. Learning how to forecast effectively and the role Red/Green plays in being a great coach and manager\n7\nRecruiting and Interviewing\nHow Diversity, Inclusion and Belonging is essential to building a world class team. A recruiter‚Äôs point of view on how to attract top talent. Review and discuss our Commercial interview methodology. Discuss what questions and activities ensure our interview process is inclusive and legal\n8\nComponents of an Effective Pipe Generation Campaign\nReview the primary reasons consistent pipe gen campaigns are needed for sustainable growth. Key components of an effective pipeline campaign. How to launch, reinforce, measure and recognize for effective results.\nExpectations of Participants\nTime Committment: A total of ~40 hours of dedicated time during the quarter between synchronous meetings and asynchronous work.\nThe GitLab Commercial department expects all Team members to uphold the highest standards of moral and ethical behavior in harmony with GitLab‚Äôs CREDIT values. Engaging or promoting activities that are inconsistent with GitLab‚Äôs values is not acceptable. It is expected that Team members who are enrolled will uphold both stated and inferred values of working at GitLab. Items include but are not limited to:\nGood collaboration with other team members\nAssuming positive intent\nContinuing to deliver results in the team member‚Äôs current position\nBeing inclusive during class discussions, accepting alternate views as alternate, not right or wrong, to foster belonging for other team members\nAdditionally, it is our expectation that if participating in the program, team members will make their best effort to attend meetings and learning activities. If they are unable to attend, participants should give the facilitator as much advance notice as possible. If participants are not present in the course, they will be removed from the program.\nWho is eligible to participate?\nAny Commercial team member that is in good performance standing (not currently on a performance or behavioral warning) and has been in their current role for over 3 months.  We will be selecting 12 participants for this first cohort. It is our itention that this program continue after the first pilot program to continue to give Commercial team members a chance to grow their skills.\nOther Related Pages\nCommercial Sales - Customer Success\nTerritories\nCommercial Sales Enablement\nWelcome to the Commercial Sales Enablement Handbook Page\nCommercial Sales Opportunity Stages\nSales stages activities and exit criteria\nHigh Velocity Sales and First Orders - Feedback Collection and Best Practices\nOverview of how HVS collects product, systems, and case operations feedback, along with how to best provide feedback\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nOverview of the High Velocity Sales and First Orders Sales Model\nRenewals FAQ\nCustomer Renewals - Frequently Asked Questions\nLast modified June 18, 2025:\nUpdate Commercial Sales HB Page (\nd02e0b34\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 10301}
{"doc_id": "491bbd794462ea7a", "url": "https://handbook.gitlab.com/handbook/security/security-assurance", "title": "Security Assurance | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Assurance\nSecurity Assurance Mission and Vision\nOur mission is to provide a high level of assurance that Gitlab (the platform and company) is secure.\nOur vision is to be a trusted sales enablement partner that is recognized internally and externally for its collaborative and transparent security assurance program, powered by AI and automation. This will be achieved through 10 strategic objectives:\nEstablish GitLab as a thought leader in DevSecOps and AI.\nAccelerate the sales cycle to enable Sales to acquire new customers and reduce customer churn.\nAlign Security Assurance with strategic business objectives and develop oversight for continuous alignment\nEnhance the efficiency and effectiveness of Security Assurance through automated and custom-built solutions\nFacilitate strategic initiatives to expand and improve GitLab‚Äôs external Security brand.\nIdentify, manage, and reduce security risk through cross-functional collaboration, strategic prioritization, and proactive mitigation including governance over data security and resilience programs.\nProactive compliance initiatives to maintain competitive advantage and enable customer acquisition through alignment with regulatory and industry specific requirements.\nIntra-division collaboration to enable successful, timely, and cost effective program and project initiation, management, and delivery through repeatable and scalable processes with consistent measurement and actionable reporting.\nInfluence product development and enhancement through deliberate use and delivery of actionable feedback.\nIntra and Inter-division collaboration to enable effective and efficient identification and remediation of compliance findings.\nSecurity Assurance Department Structure\nThere are four teams in the Security Assurance department.\nGovernance & Field Security\nSecurity Compliance\nSecurity Risk\nSecurity Program Management\nGovernance Team Page\nField Security Team Page\nSecurity Compliance Team Page\nSecurity Risk Team Page\nSecurity Program Management Team Page\nCore Competencies\nField Security Core Competencies\nSales Training (Security)\nSales Enablement (Security)\nCustomer Assurance (Security)\nSecurity Evangelization\nSecurity Governance Core Competencies\nSecurity Policies, Standards and Control maintenance\nSecurity Assurance Metrics\nRegulatory Landscape Monitoring\nSecurity Awareness and Training\nSecurity Assurance Application Administration\nSecurity Assurance Automation\nSecurity Risk Core Competencies\nSecurity Third Party Risk Management\nTier 2 Operational Security Risk Management\nBusiness Impact Assessments\nCritical System Tiering\nSecurity Compliance Core Competencies\nContinuous Control Monitoring\nSecurity Certifications and Attestations\nUser Access Reviews (non-SOX)\nObservation management for control failures and Tier 3 (system-level) risks\nGitLab Production Readiness: Compliance Assessment\nCore Tools and Systems\nThe Security Assurance sub department utilizes a variety of tools to carry out day to day activities. The system admin is responsible for the following:\nConfiguration changes\nOnboarding/offboarding/transfers (ie Access)\nUpgrades/patching/incidents\nMigrations to new environments\nRestores from backup\nAdmin level audit evidence\nQuality oversight (limited scope)\nAll other actions are the responsibility of the assigned DRI.\nSystem Name\nSystem Description\nAdmin\nHyperproof\nKey system utilized for initiating, tracking/documenting, and completing Governance, Risk, and Compliance related activities.\nDonovan Felton\nSecurity Compliance -\nMadeline Lake\nSecurity Risk -\nTy Dilbeck\nAuthomize\nKey system utilized by Security Compliance for\nUser Access Reviews\nAlex Frank\nPlatform -\nAlex Frank\nCustom Connectors -\nByron Boots\nSafebase\nTrust center solution to host security collateral for customers to request.\nDonovan Felton\nJoe Longo\nProofPoint\nKey system utilized for the creation and distribution of our security training and phishing simulations to provide ongoing testing for adherence of various compliance frameworks.\nDonovan Felton\nJoe Longo\nBitSight\nBitSight is used to assess and monitor software vendors as part of our Security Third Party Risk Management Program.\nRyan Lawson\nTy Dilbeck\nGitLab\n- Security Assurance Projects\nPrimarily used to engage stakeholders via issues, updates to Security Assurance related handbook pages, etc.\nSecurity Assurance Senior Director\nEach Team is responsible for their Projects, but everyone can contribute\nContacting the Team\nJoin our slack channel: #sec-assurance\nEmail:\nsecurity-assurance@gitlab.com\nTeam READMEs\nByron‚Äôs README\nReferences\nCheck out these great security resources built with our customers in mind:\nGitLab‚Äôs\nCustomer Assurance Package\nGitLab‚Äôs\nSecurity - Trust Center\nGitLab‚Äôs\nSecurity Team Page\nAutomation and Compliance\nPurpose The goal of this handbook page is to document the goals and priorities for the automation in ‚Ä¶\nField Security Team\nGovernance and Field Security team charter\nField Security Team The Field Security team serves as the ‚Ä¶\nObservation Management Procedure\nThis procedure details the  and remediation process for observations.\nProduction Readiness: Compliance Assessment\nThe Compliance Production Readiness Assessment is a process designed to make it clear what obligations systems owners have for configuring and hardening a system/tool/service in order for GitLab to meet its compliance and regulatory obligations.\nSecurity Compliance Team\nSecurity Enablement Team Charter\nTeam Charter Mission The mission of the Security Enablement team is to: (i) drive the development of ‚Ä¶\nSecurity Governance Program\nSecurity Risk Team\nSecurity Risk Team Charter\nSecurity Terms Glossary\nA glossary of common Security Terms that may be encountered in Security Assurance documentation.\nTechnical and Organizational Security Measures for GitLab Cloud Services\nTechnical Security Validation\nLast modified February 18, 2025:\nAdding updated vision to handbook (\nb61b39aa\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 800}
{"doc_id": "e7a8c38aeb063a22", "url": "https://handbook.gitlab.com/handbook/security/security-operations", "title": "Security Operations | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Operations\nVision\nProtect company property by identifying, preventing, detecting and responding to risks and security events targeting the business and GitLab.com and its users. We are at the forefront of GitLab‚Äôs security.\nMission\nThe Security Operations department focuses on the operational aspect of security. Our department consists of experienced breakers, builders, and defenders from all walks of life and geographic locations. We are responsible for improving GitLab‚Äôs security capabilities, metrics in the areas of security anomaly/event detection, incident response and abuse mitigation of GitLab.com.\nOur department consists of:\nSecurity Incident Response Team (SIRT)\n- Security incident response and forensic analysis\nTrust & Safety\n- Prevention and mitigation of abuse of the GitLab.com platform\nRed Team\n- Adversary emulation\nThreat Intelligence\n- Actionable insights on real-world threats\nSignals Engineering\n- Detection Engineering\nContacting Security Operations\nSlack channel to interact with the Security Operations Department\n#security-operations\nThe Security Operations department follows the\nSecurity Team On-Call Rotation\nwith more details available in\nSecurity Operations On-Call\nHow to Engage the Security Engineer On-Call\nGitLab Security Division Group (GitLab)\nGitLab Security Operations Department Group (GitLab)\nLast modified July 3, 2025:\nUpdate SIRT members, grammar & formatting (\n067f051a\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 207}
{"doc_id": "d0bb8e548a7baa9e", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/pmm-professional-development", "title": "Product Marketing Professional Development | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nProduct and Solution Marketing\nProduct Marketing Professional Development\nThe PMM Role\nThe Handbook‚Äôs\nProduct Marketing Manager Role Page\noutlines the key responsibilities of your role. This page will discuss the ways in which you can measure and improve your performance in that role and develop yourself as a Marketer and\nGitLab Team Member\n.\nCareer Development Within Product Marketing\nProduct Marketing & Solutions Architects\nQuarterly Rotation Pilot Program\nContext:\nWe want GitLab to be a place where everyone can build their careers and have a big impact for our customers and the business. In this spirit, we are testing a rotation program between the Product Marketing team and the Solutions Architects team. The goals of this program are:\nExpose high performing teammates to new skills and experience in different areas of the business.\nEnable teammates to apply their experience to a new area, offering diversity of thought and a fresh perspective.\nHelp teammates see how different roles contribute to unified company goals.\nCreate cohesion between teams.\nCreate an onramp to new roles as opportunities arise.\nDetails:\nThe rotation program will be scoped at 3 months, starting at the beginning of the quarter in order to reduce disruption.\nThe rotation may include a percentage of time where the SA still works on their SA tasks ‚Äì the majority of time, however, should be spent in product marketing\nTeam member(s) participating in the rotation will be ‚Äôembedded‚Äô with the product marketing team. They will attend all PMM meetings including 1:1s with team leaders.\nProduct Marketing will provide specific areas of focus (e.g. competitive intel) and projects (e.g. persona development, competitive benchmarking) at the beginning of the rotation.\nWe will not change official reporting structure (e.g. Workday) during the rotation\nParticipation in the rotation program does not change compensation structure\nAt the end of the rotation, there may be an opportunity to join the product marketing team should there be (1) available headcount and (2) ongoing consistent performance during the rotation.\nDesired Outcomes for GitLab and the involved teams and individuals:\nTo promote our values through internal mobility and contribute to long term career aspirations of the team members\nTo cross functionally collaborate and drive outcomes for respective teams involved including but not limited to through evangelism - writing blogs, sharing experience, recording day in the lives videos\nEligibility/How to participate:\nThe rotation program will only be available to teammates with strong performance, and who have been in their current role for at least 1 year.\nFor the pilot program in Q2 FY25, SA and Product Marketing will be nominating a team member to participate and will establish learnings to iterate on the program for future quarters.\nAll team members interested in future rotations should have completed an IGP with their manager, and indicate interest through their manager and to SA leadership.\nSA and Product Marketing leadership will review interested candidates, along with the SA team‚Äôs ability to support the rotation due to workload requirements, in the month prior to the beginning of each quarter.\nCandidates will go through an interview process with the VP, Product Marketing to understand background, experience and interest areas in the rotation program.\nThe experience will be tailored on a case by case basis matching 1. The needs for the business, and 2. The interest from the rotation candidate. For example:\nA set of deliverables associated with Competitive Intelligence. For example: Revamp competitive messaging/content against GitHub\nRe-cast the buyer persona documentation with full rollout across GTM.\nConduct new hire Competitive Intel onboarding\nMaintain Crayon, our Competitive Intel platform.\nTopics/Resources  (sections with suggested resources/links)\nBelow are a list of resources and links to suggested professional development tools and resources:\nDomain Specific Resources (SDLC/DevOps)\nAgile (scrum,kanban, etc)\nVideos and Webpages\nGitLab Agile Delivery\nScrum.org- What is Scrum\nWhat is Kanban\nCourses:\nConferences:\nDevOps\nVideos and Webpages\n-\nGitLab DevOps\n(Specifically the resources list at the bottom)\nCourses:\nConferences:\nSoftware Programming\nProduct Marketing specific resources\nProduct Marketing\nPublic Speaking\nStorytelling\nMarketing in general\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 690}
{"doc_id": "02d27a57c91cf120", "url": "https://handbook.gitlab.com/handbook/product/personas", "title": "Personas | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nPersonas\nRoles vs personas\nPersonas describe the ideal target for GitLab. They help us define our messaging and marketing delivery. They are theoretical people to target. By defining their concerns and where they go for information, we can best spend our marketing dollars and sales efforts by focusing on this ideal target.\nRoles are distinct job titles. These are the real people you will encounter while selling. You will find a contact at an account with a specific role. Understanding the challenges faced by each role in IT, along with what they care most about, is helpful to deliver the right value proposition to the right person.\nPersonas\nPersonas are a generalized way of talking about the ideal target we are aiming to communicate with and design for. They help us not only define our messaging and marketing delivery, but also our product. Keeping personas in mind allows us to use the correct language and make the best decisions to address their specific problems and pain points. GitLab has both\nbuyer\nand\nuser\npersona types.\nBuyer personas\nWe are iterating on updates to buyer personas on this\nBuyer Persona\npage.\nUser personas\nUser personas are people who actually use GitLab. They may or may not be the person in\nthe organization who has the authority and budget to purchase GitLab, but they\nare heavy influencers in the buying process. Users personas are created from data gathered from UX research studies. If a new user persona is needed, or an existing persona has to be updated, see our handbook guide on\nHow to Create a User Persona\n.\nHow do user personas interact?\nWhile user personas are often distinct individuals it is equally important to understand how multiple personas interact as to understand the workflows and motivations of individual personas.\nAs a result we will also consider:\nOrganization Archetype\nPersona Composition\nOrganizational Archetype\nOrganizational archetypes describe how organizations have structured their software development process and teams.\nThey help us understand common structures and the resulting types of interactions that the personas in those structures experience.\nWe‚Äôll build out descriptions of common organizational archetypes as our research continues\nand introduce new personas that fit into these new organization archetypes.\nIt can happen that a persona from one organizational archetype will have similar jobs-to-be-done,\nor other characteristics, as one or even multiple personas from another organizational archetype.\nDescribing all of them will help us understand the differences that could otherwise go unnoticed\nand make better-focused decisions during product development.\nLearn more\nabout the organizational archetypes GitLab is addressing.\nList of User Personas\nWe describe the following personas in terms of the jobs they do, their motivations and frustrations. Understanding our users through this lens helps us contribute to a product that supports their workflow.\nParker, Product Manager\nDelaney, Development Team Lead\nPresley, Product Designer\nSasha, Software Developer\nPriyanka, Platform Engineer\nJanell, Enablement Advocate\nSidney, Systems Administrator\nRachel, Release Manager\nSimone, Software Engineer in Test\nAllison, Application Ops\nIngrid, Infrastructure Operator\nDakota, Application Development Director\nAmy, Application Security Engineer\nIsaac, Infrastructure Security Engineer\nAlex, Security Operations Engineer\nCameron, Compliance Manager\nDaphne, Data Scientist\nMia, ML Engineer\nUser Personas across stages\nOur personas span across stages (see table below for a depiction of how our user personas map across stages). Understanding how our personas map across stages helps us understand how to collaborate cross-functionally to support their needs.\nNote: To change the table above, team members can edit the\nGoogle Slide deck\n.\nUser Personas across Use Cases\nNote: To change the tables above, team members can edit the\nGoogle Slide deck\n.\nParker (Product Manager)\nAlternative Job Titles:\nProgram Manager, Project Manager, Technical Product Manager, Head of Product\nJob Summary\nAt the center of many facets in product development, I am responsible for shaping strategic visions, translating them into actionable plans, and ensuring that our products meet user needs and deliver real value. While my role extends beyond tactical responsibilities, I recognize the critical nature of managing day-to-day tasks which drive successful execution, even though they may not be my favorite part of the role. I strive to create strong relationships, align teams towards common goals, and ensure stakeholders buy-in to the vision for successful product development. My toolkit must include data-driven decisions, market awareness, effective communication, and a clear strategic vision.\nMotivations\nSolving Complex Problems and Delivering User Value: I find deep satisfaction and motivation in tackling challenging problems head-on. My drive stems from the opportunity to develop innovative solutions that meet user needs and create real value, culminating in a richer user experience and making a positive impact in the day-to-day lives of our users while driving value and increasing revenue for my organization.\nTaking Products from Concept to Launch: The process of taking a product from concept to launch excites and motivates me. I get satisfaction from taking part in the evolution of an idea into a fully realized product, navigating challenges, guiding development, and observing the impact with users.\nAdapting to Change and Achieving Alignment: I‚Äôm proud when I can adapt to shifting company objectives and maintain effective communication with my team. I am always working to achieve alignment across teams, knowing that it fuels our ability to achieve ambitious goals and innovate together.\nFrustrations\nBeing Stuck in a ‚ÄúProject, Not Product‚Äù, Management Role: It‚Äôs demotivating when I find myself primarily functioning as a project manager, focusing on tracking tasks and timelines rather than the dynamic and strategic responsibilities that come with being a product manager. This hinders my ability to address customer needs, devise effective market strategies, and maintain a clear product vision, which drives my job satisfaction.\nWasting Time, Development Capacity, and Ultimately Money: Wasted efforts and resources on products that fail to gain traction or meet user needs is disheartening. I feel frustrated when we invest in solutions that go unused or lack a clear purpose, especially when there is little meaningful user value or overall product success.\nInability to access project status quickly: It can be frustrating when it is difficult to obtain the status of work efforts and I am forced to spend time chasing status. Timely awareness of project status, especially when it is off track, is crucial for my role because I need to ensure people invested in delivery are informed if we will not meet our commitments.\nBalancing Product Vision and Capacity: I am constantly trying to make the most of our team‚Äôs capacity to execute on our product vision. It‚Äôs a challenging juggling act to ensure I am making the right decisions on what comes next to maximize our ability to deliver compelling value to the market.\nUnpredictable Timeframes, Feature Delays, and Deprioritization: It‚Äôs frustrating when I‚Äôm tasked with providing clients and stakeholders with a reasonable timeframe for the delivery of a feature since development cycles can be unpredictable, and change is inevitable.\nDelaney (Development Team Lead)\nAlternative Job Titles:\nTechnical Manager, Software Engineering Team Lead, Technical Team Lead, Software Development Director, Development Lead, Head of Development\nJob Summary\nI am responsible for meeting with the product management team to discuss and schedule features, so we can convert concepts into practical solutions. I ensure that capacity is properly estimated, create program specifications, and often mentor junior developers.\nMotivations\nWhen discussing feature requests, I want to receive clear requirements from the product and design teams, so my team can deliver on time and reduce back-and-forth communication.\nWhen assessing team resources, I want to see a history of how accurately developers on my team have estimated their capacity, so that I can assign them to the right tasks.\nWhen important deadlines are approaching, I want all team members to reliably update our tools, so that I can track progress without having to search for relevant information in other communication channels.\nFrustrations\nIt can be difficult for my team to do thorough code reviews in a reasonable timeframe, while still making progress on their own assignments.\nWhen demand surpasses our current capacity, it can be stressful to resolve issues while not creating new ones that result from hasty work.\nI am not always aware of the best way to explain technical limitations to stakeholders who are not involved in the development process.\nPresley (Product Designer)\nAlternative Job Titles:\nUX Designer, Interaction Designer, UI/UX Designer, UI Designer, Experience Designer\nJob Summary\nMy goal is to translate the product‚Äôs mission into an effective, empathetic, and efficient user experience. I am responsible for understanding user needs and product requirements, in order to conceptualize and design the graphic elements and components needed to shape the user interface. I collaborate primarily with product managers and developers, in addition to working with other stakeholders such as UX research and marketing.\nMotivations\nWhen a deliverable is requested, I want to have clear, up-to-date requirements that I can reliably refer back to throughout the design process.\nWhen collaborating with other designers, I want to be able to see who has edited a file so that I can confirm whether changes were made intentionally.\nWhen presenting deliverables to stakeholders, I want to be able to make updates to a design without having to edit a series of files in various tools.\nWhen developers are implementing my designs, I want to easily keep track of changes that go live in production, so that I can alert them of any needed fixes.\nFrustrations\nIt‚Äôs frustrating to have to create a file in one tool, export the file, create a prototype in another tool, and use a separate tool to handoff the design to developers.\nIt can be difficult to ensure that stakeholders are looking at up-to-date designs, when carrying out an iterative feedback process.\nIt can be challenging to get access to more resources, when my company does not have a defined way to prove design value to stakeholders.\nSasha (Software Developer)\nAlternative Job Titles:\nSoftware Engineer, Application Developer, Digital Solutions Developer, Consultant, Database Developer, Mobile Developer\nJob Summary\nI spend the majority of my time focused on completing planned development tasks, with roughly 30-40% of time taken by meetings, planning for the next sprint, and fixing bugs or customer requests as they arise. I work off of issues and have a regular stand-up with my team.\nMotivations\nWhen I‚Äôm planning work, I want to have better communication between stakeholders, so I can deliver something they really need and use.\nWhen I‚Äôm on-call, I want to be the expert on some part of the system, so I know that I‚Äôm a valuable part of the team.\nWhen collaborating with a large number of developers, I want to see a record of everyone‚Äôs changes, so we can pinpoint and unwind mistakes.\nWhen I‚Äôm pairing with my teammates, I want to learn new tools and skills, so I can keep growing in my career.\nWhen I‚Äôm making changes, I want to deliver secure and performant code, so I can ensure the integrity of my organization‚Äôs software is not compromised.\nFrustrations\nI‚Äôm frustrated when requirements change after work has already begun on a project.\nI‚Äôm frustrated when work is inaccurately scoped, because it causes stress and eats into time planned for other work.\nI‚Äôm frustrated when I come across brittle code and something that should be an easy fix requires a lot of rework.\nI‚Äôm concerned that by taking longer than expected on a task I may be judged or seen as blocking others‚Äô work.\nPriyanka (Platform Engineer)\nAlternative Job Titles:\nDevOps Engineer, Operations Engineer, Systems Engineer, IT Consultant\nJob Summary\nMy job is to enable the developers to focus on the business code only. To achieve my goal, I write pipeline definitions, deployment templates, CLI tooling to be used by development teams, so the software delivery process is streamlined across organization. Beside building out these features and fixing potential bugs, I educate and support the development teams around topics related to our pipelines or target infrastructures, so they can build, deploy, and release as efficiently as possible.\nDepending on the organization and/or need of the development teams, I am part of a central platform team or a member of an application development team.\nMotivations\nWhen developers plan a project that requires my support, I want to be notified, so I can avoid unnecessary reactive work.\nWhen I resolve problems, I want to be able to track impact and other important success metrics, so I can raise my profile in the organization.\nWhen I create a solution for developers, I want to see it being used, so I know that my contributions are reliable and valued.\nWhen I‚Äôm facing a new or novel challenge, I want to whiteboard it with a teammate, so I have the satisfaction of helping solve a problem that has no manual.\nWhen I‚Äôm advocating for a new process or tool, I want to point to a metric or test, so I can support my case with something objective.\nFrustrations\nIt is hard for me to quantify my efforts and convince others of time that will be saved in the future by investing time in proactive tasks in the present.\nI‚Äôm frustrated by the avoidable crises, caused by a lack of communication, that derail my work and burn up my resources.\nI dislike frequent context-switching and being responsible for some tasks that I feel I am not good at, because of the many hats my job requires me to wear.\nI‚Äôm frustrated by the politics of convincing people to adopt my recommendations.\nJanell (Enablement Advocate)\nAlternative Job Titles:\nDevOps Evangelist, Developer Productivity Engineer, Developer Advocate\nJob Summary\nMy job is to enable developers to ramp up the learning curve of modern DevOps practices - including when that adoption is not compulsory. This can include new work management, new tooling and navigating the modernization of their applications into the cloud. To achieve my goal, I write and maintain automation code that can be directly consumed by developers as dependencies as well as scaffolding templates to be sure new projects are off to a good start. In addition to CI/CD automation, this frequently this involves support for cloud deployment, kubernetes manifests and any other associated parts for a wholistic approach to moving teams onto modern application practices. This technical work frequently involves exposing company specific things to developers as an easy to use ‚Äòservice‚Äô - for instance, registering their application with our company-wide Configuration Management Database (CMDB).\nMy job also includes being an active champion and evangelizng development teams to leverage the new assets and ways of working - this involves treating my work as though it were a product or service - managing it to be stable, fixing bugs, taking feature requests and creating and promoting release information. This also includes workshops, managing communities of practice and creating peer Q&A platforms.\nMy manager has developer productivity and enablement as a strong focus and is very interested in how our efforts accelerate onboarding to our next generation application frameworks and also how we contribute to the long term productivity gains and business value generation of the teams that adopt our enablement.\nMy job also includes influencing not just technology, but also processes and culture when they might inhibit adoption of modern application and DevOps practices and technology.\nDeveloper enablement plays such a critical role in the efficient onboarding of developers that I generally have strong input on tooling selection as I screen it for the ability to allow us to extend it.\nDepending on the organization and/or need of the development teams, I am part of a central enablement team or a member of an application development team if the team‚Äôs work has a large enough scope.\nMotivations\nWhen I build for developers, I need to accommodate a broad set of ways of working - our organization is too diverse to try to put everyone onto a single set of enablement assets.\nWhen I build dependencies for developers, I need them to be able to version lock on them so that I can safely enhance and fix the code while not creating problems for their production deployments.\nWhen I release new versions or entirely new functionality, I need it to be discoverable by developers - although we maintain email campaigns, we can‚Äôt rely on everyone consuming the information this way and it does not help new hires.\nFrustrations\nIt can be a challenge to maintain awareness of all DevOps tooling product features that I can opinionate for our team - this includes all templating functionality, all pipeline security controls and all deployment functionality.\nI‚Äôm frustrated by members of my team and development teams that do not maintain appropropriate versions and version management discipline as I am then accused of being the source of production problems.\nI‚Äôm sometimes frustrated by the burden of maintaining custom training or other enablement content to articulate how our DevOps processes work within our tooling.\nIt can be very challenging to provide standardized, end-to-end enablement for specific new patterns since each team feels that all of the organic elements evolved into their currently approach are absolutely necessary - it‚Äôs hard to get them to simplify by reconsidering not just their DevOps code - but their team processes as well.\nSidney (Systems Administrator)\nAlternative Job Titles:\nSystems Engineer, Database Administrator, Infrastructure Engineer, Site Availability Engineer, Site Reliability Engineer\nJob Summary\nI maintain and scale our infrastructure and configurations, and my priority is to automate as much as possible. When needed, I also build servers and help developers deploy to them.\nMotivations\nWhen I get asked for help multiple times on the same task, I want to automate that task, to save time and avoid mistakes in the future.\nWhen I‚Äôm on-call, I want to receive tiered notifications, so that the true emergencies don‚Äôt get lost in the noise.\nWhen I‚Äôm releasing an improvement, I want no one to notice, so I know that it has gone smoothly.\nFrustrations\nI‚Äôm frustrated by the large volume of reactive work that I face.\nI‚Äôm frustrated by the number of channels (email, Skype, SMS, Slack, pager) on which I receive on-call notifications.\nI‚Äôm frustrated when I get inundated by requests from people who have not followed the correct process.\nI‚Äôm frustrated when developers do not implement my recommendations, and I‚Äôm responsible for fixing their preventable problems anyway.\nRachel (Release Manager)\nJobs to be done\nI am responsible for coordinating a deployment to production. I push the last button in our pipeline; i.e. changing the load balancers to point to the latest deployment.\nI coordinate the release by defining the scope and tasks for delivery.\nI am in charge of external communications around a release, especially assembling changelogs or release notes.\nI organize a response room if necessary to bring in everyone that may need to support a release\nMotivations\nI want a smooth deployment\nI want to make sure everything in the pipeline will work, because it‚Äôs the last thing that happens before it‚Äôs moved to production. If you ship something into production that shouldn‚Äôt be there, that can be catastrophic.\nEvery time the CI/CD pipelines run to green or catch issues when needed, I can sleep calmly.\nChallenges\nDealing with archaic infrastructure, such as slow connections and outdated equipment, can make it difficult to ensure everyone has the files they need to contribute and manage the pipeline.\nEnsuring enough developers, Product Managers, etc. are available to support projects.\nUI testing isn‚Äôt automated so that takes time out of the testing process.\nCoordinating all the different teams across a release can be challenging and requires a lot of follow up to ensure they play their part when they should.\nTools\nGitLab\nJIRA (for tickets from non-technical users)\nTrello (for planning issues and communication)\nSlack (for communication)\nSimone (Software Engineer in Test)\nAlternative Job Titles:\nSoftware Development Engineer in Test\nMy role\nI‚Äôm a software engineer in my organization with a keen interest in quality and the skills necessary to promote it. My objective is to\nhelp build quality into the development process\nand\npromote ownership of quality across every team\n. To accomplish this, I develop tooling to support test processes and quality reporting. I also write tests at every level in the\ntest pyramid\n. I groom my organization‚Äôs tests to make them both efficient and effective as well as help grow a quality mindset across departments.\nJobs to be done\nDevelop and maintain test frameworks:\nI need to provide the engineers in my organization with one or more well-maintained test frameworks that facilitate writing tests at the appropriate level.\nProvide tooling and reporting to facilitate quality:\nI need to create and maintain both tooling and reporting that allows developers to more easily accomplish quality-related tasks and provide feedback to engineering and management.\nPerform quality planning with counterparts:\nI want to interact with my engineering counterparts on a regular basis, tracking what is coming up for development as well as what is happening now and what is being delivered. Knowing this, I need to be able to identify both the riskiest and most important work being done so I can provide quality feedback at the appropriate time through performing code reviews and having discussions about both the design and implementation of the features.\nManage Test Environments\nI also provision and maintain test environments that are representative of the software being used in production. Through these environments testing can then occur that is as realistic as possible and catch issues earlier.\nSkills & Personal Traits\nFocused: Has a great focus on quality and what it means in an engineering role\nAdaptable: Can think like a developer and an architect\nCurious: Enjoys learning how things work or taking things apart\nTechnical: Enjoy building tools (has coding skills)\nPassionate: Loves improving tools and processes and advocating for quality\nEffective communicator: articulate both verbally and in writing\nFrustrations\nFlaky tests\nLong running test suites\nNot being able to reproduce issues due to lack of representative test data\nUnstable infrastructure\nNot being able to give earlier feedback on development work\nKey Tools\nTracking, documentation\n: GitLab Issues\nCommunication\n: Slack, Zoom, GitLab Issues\nReal-time documentation\n: Google Docs\nTerminal, coding environment\n: VIM, VS Code, or RubyMine with Ruby, JavaScript, Terraform, and other supporting languages\nTest automation frameworks\n: Implementations of testing tools suited for my products\nA cloud management console\n: To access the infrastructure (Google Cloud Platform, Amazon Web Services, Azure)\nEnvironment Provisioning\n: Terraform and Ansible\nTriage and mitigation\n:\nDocker - to reproduce issues and emulate environments\nAccounts for different environments - for testing and infrastructure\nData repositories and generators\nLogging tools\nElastic Stack (Elasticsearch, Kibana, Beats, Logstash)\nSentry\nPrometheus\nCollaboration with other teams\nDevelopment teams\nProduct teams\nInfrastructure\nUX teams\nSupport\nAllison (Application Ops)\nAlternative Job Titles:\nDevOps engineer, Lead developer, Site Reliability Engineer\nMy role\nI have responsibility for ensuring the application I own is accessible and performant for its users. I wear an Application Ops hat, but I also wear a\nSoftware Developer\nt-shirt.\nJobs to be done\nI want to be able to deploy to production and non-production environments automatically without requiring action from other teams.\nI want to use my selected deployment tools so I can predictably understand what ‚Äúdeploy‚Äù means.\nI want to deploy following the company best practices set out by Priyanka, the platform engineer so that we minimize the risk of a new deployment.\nI want to get up-to-date, real-time information about the system components I own so that I can be assured about the performance and health of the applications I own.\nI want to be notified about potential problems with the applications I own, so that I can act avoid downtime and degradations before they happen.\nI want to roll back or roll forward from erroneous deployments so that I can keep my systems functional.\nFrustrations\nAs a consumer of a monitoring platform, I‚Äôm frustrated when my apps instrumentation doesn‚Äôt report in the monitoring systems\nI‚Äôm frustrated when I can‚Äôt determine the root cause of the monitoring system‚Äôs errors.\nI‚Äôm frustrated when I need to use multiple tools to identify that there is an issue.\nI‚Äôm frustrated about processes that slow down deployments.\nI am frustrated when I can‚Äôt trust the data coming from monitoring systems (false negatives or false positives)\nIngrid (Infrastructure Operator)\nAlternative Job Titles:\nSystems Engineer, Database Administrator, Infrastructure Engineer, Site Availability Engineer, Site Reliability Engineer, System Administrator\nMy Role\nI have responsibility for providing, maintaining and operating the shared infrastructure which my application development teams utilize to develop, test, ship and operate software more quickly.\nJobs to be done\nWhen I set up new infrastructure, I want to do it in a programmable way, so others can review my changes and we can repeat the steps if needed.\nWhen I own an infrastructure resource, I want to keep it up to date with security patches, so I can sleep well at night.\nWhen I own an infrastructure resource, I want to assure that it serves its purpose well, so I fulfill my SLAs.\nWhen I own an infrastructure resource, I want to be mindful about its costs, so that I can run it within budget.\nWhen I support developers, I want to automate the integration points, so I will not become a bottleneck in their processes.\nWhen I‚Äôm on-call, I want to receive tiered notifications, so that the true emergencies don‚Äôt get lost in the noise.\nWhen I‚Äôm releasing an improvement, I want no one to notice, so I know that it has gone smoothly.\nFrustrations\nI‚Äôm frustrated by the large volume of reactive work that I face.\nI‚Äôm frustrated by the number of channels (email, Skype, SMS, Slack, pager) on which I receive on-call notifications.\nI‚Äôm frustrated when I get inundated by requests from people who have not followed the correct process.\nI‚Äôm frustrated when developers do not implement my recommendations, and I‚Äôm responsible for fixing their preventable problems anyway.\nDakota (Application Development Director)\nJob Summary\nDakota is a key IT leader who manages and leads several teams of developers supporting a specific set of business applications. See the\nbuyer persona\nand\nEngineering Director Persona\nresearch for more details.\nMotivations\nBusiness Satisfaction:\nDelivering consistent and predictable business results.\nDevOps transformation:\nTransforming my organization to create new value with DevOps processes and tools.\nTeam building:\nGrowing and improving the team through my managers.\nProcess excellence:\nEnsuring that my team have the tools, training, and resources to successfully deliver the business value.\nFrustrations\nReactive versus proactive:\nUrgent roadblocks, organizational issues and emergencies make it difficult to manage time and workload.\nContext switching:\nThere is a large amount of content to cover across all of my projects and teams.\nCreating business cases:\nSecuring budget for new strategic initiatives and resources for her team is labor-intensive and time-consuming.\nAmy (Application Security Engineer)\nAlternative Job Titles:\nApplication Security Analyst or Specialist\nMy Role\nI am responsibility for assessing potential business-critical vulnerabilities, performing code reviews to focus on security best practices, and verifying security fixes in the environment.\nJobs to be done\nWhen I set up new assessing vulnerabilities, I want to understand the potential threat a particular vulnerability represents to my organization‚Äôs assets, so that I can prevent the threat from occurring.\nWhen I am reviewing feature proposals or a code author‚Äôs code, I want to ensure the new code will not introduce security vulnerabilities in my organization‚Äôs assets, so that there are fewer business critical vulnerabilities.\nWhen I am reviewing security fixes, I want to verify there are no remaining threats to the organization‚Äôs assets, so my organization can be confident about its security.\nMotivations\nWhen I‚Äôm monitoring my vulnerability dashboards, I want to see everything I am monitoring in one tool, so I can do my job easier and more efficiently.\nI want to make sure to run all necessary security scans before code is released to remain proactive.\nWhen on the job, I want to stay up to date on the latest information and education in information security, so I can grow in my career.\nFrustrations\nI‚Äôm frustrated by the large volume of vulnerabilities that I face.\nI‚Äôm frustrated when I am not provided enough time to assess all of the vulnerabilities I face.\nI‚Äôm frustrated when code authors do not provide enough documentation or context related to the security of their code changes.\nCollaboration with other teams\nInfrastructure security teams\nDevelopment teams\nCompliance\nResources\nRelevant UX Research findings\nIsaac (Infrastructure Security Engineer)\nAlternative Job Titles:\nInfrastructure Security Analyst or Specialist\nMy Role\nI am responsibility for creating and maintaining security tools, monitoring production environments, and assessing security tools to ensure my organization‚Äôs assets are compliant with the security requirements.\nJobs to be done\nWhen my organization has a new security policy they must follow, I want to create security tools to ensure my organization‚Äôs assets are compliant with the policies, so that I can prevent the threat from occurring.\nWhen reviewing a code author‚Äôs code, I want to ensure the new code will not introduce security vulnerabilities in my organization‚Äôs assets, so that there are fewer business critical vulnerabilities.\nWhen assessing my organization‚Äôs assets, I want to verify there are no uncompliant areas in the organization‚Äôs assets.\nMotivations\nWhen I‚Äôm monitoring my dashboards, I want to see everything I am monitoring in one tool, so I can do my job easier and more efficiently.\nWhen evaluating the security of production environments, I want to be more proactive than reactive, so I can anticipate potential threats or vulnerabilities before the bad guys do.\nWhen I‚Äôve done all I can do proactively, I also want to be able to enable reactive tools and investigate the data from them as a final layer of defense.\nWhen on the job, I want to stay up to date on the latest information and education in information security, so I can grow in my career.\nFrustrations\nI‚Äôm frustrated when internal development teams are noncompliant with a security policy by subverting a security policy or a security tool I created and maintain.\nI‚Äôm frustrated when internal development teams do not respond in a timely manner to fix new vulnerabilities detected in a production environment.\nI‚Äôm frustrated when code authors do not provide enough documentation or context related to the security of their code changes.\nI‚Äôm frustrated when development teams are resistant to security changes.\nCollaboration with other teams\nApplication security teams\nSecurity operations teams\nDevelopment teams\nCompliance\nResources\nRelevant UX Research findings\nAlex (Security Operations Engineer)\nAlternative Job Titles:\nSecurity Operations Analyst or Specialist\nMy role\nI‚Äôm the firefighter of the Security team. My objective is to\nprevent malicious attacks\nand\nmitigate active risks\nto my organization as they pop up, as\nquickly\nas possible. In order to do that, I develop detection tooling that generates\ntrustworthy alerts\n, and take part in an on-call rotation where I serve as an\nIncident Responder\n.\n‚ÄúI need to be jack of all trades: When SecOps get paged, it could be about anything, and there‚Äôs a high probability that the incident concerns something you‚Äôve never dealt with before. The sky could be falling and there‚Äôs a lot at stake and so the role of a security operations person can be pretty stressful.‚Äù\nJobs to be done\nManage incident response:\nWhen I am on-call, I need to respond to and manage incidents as they pop up, so as to mitigate the risk to my organization as quickly as possible.\nReal-time documentation:\nAs an incident unfolds, I want to document as much of what is happening as possible, so that later on I could use that information as part of updating or creating a runbook, and possibly creating an RCA (Root Cause Analysis).\nBuilding detection tools:\nWhen I‚Äôm not on-call, I want to build tools that enhance our detection and alerting capabilities, so as to improve my organization‚Äôs security stance.\nShort-term project management:\nAs an incident unfolds, I want to assign tasks and coordinate the work of multiple individuals across my organization, so I can move as quickly as possible to remediate the risk.\nSkills & Personal Traits\nGreat ability to divide my focus effectively and deal with interruptions, such as new alerts, new data, and urgent requests from colleagues\nGood at thinking quickly on my feet and maintaining my composure in stressful situations\nCan think like an attacker as well as a defender\nEnjoy building tools (has coding skills)\nPassionate about improving processes\nEffective communicator: articulate both verbally and in writing\nEnjoys the variance of SecOps work\nFeels relatively comfortable with handling unknown unknowns\nMotivations\nWhen I‚Äôm monitoring my dashboards for security alerts or incidents, I want to see everything I am monitoring in one tool, so I can do my job easier and more efficiently.\nWhen security testing, I want to be more proactive than reactive, so I can anticipate potential threats or vulnerabilities before the bad guys do.\nWhen I‚Äôve done all I can do proactively, I also want to be able to enable reactive tools and investigate the data from them as a final layer of defense.\nWhen on the job, I want to stay up to date on the latest information and education in information security, so I can grow in my career.\nFrustrations\nIt is cumbersome to edit description of timeline in real-time, and it‚Äôs especially difficult to do in hindsight. Often the timeline documentation isn‚Äôt completed.\nOften important parts of the info I need in order to handle the incident are either not communicated fully, or are being communicated in an unstructured manner which makes aggregation and searching difficult.\nKey Tools\nGitLab Issues\n: Tracking, documentation\nPagerDuty\n: Initiation standpoint, where pages are sent through\nSlack, Zoom, GitLab Issues\n: Communication\nGoogle Docs\n: Real-time documentation\nTerminal, coding environment\n: Mostly Python, some Go - for building and/or running tools\nThe Hive\n: A security incident management tracking tool\nCortex - part of The Hive, allows for easy automation\nA cloud management console\n: To access the infrastructure\nVarious tools for triage and mitigation\n:\nDocker - to reproduce security issues and test approaches\nAccounts for different environments - to test against\nELK stack - to go over logs\nStackdriver or BigQuery - long-term storage, used for incidents that are open for a long period of time\nCollaboration with other teams\nInfrastructure\nLegal\nCompliance, AppSec\nSupport\nDevelopment teams\nVarious SMEs\nRelated resources\nRelevant UX Research findings\nCameron (Compliance Manager)\nAlternative Job Titles:\nCompliance Program Manager, Audit Report Analyst, Audit Events Analyst\nJob Summary\nI‚Äôm in charge of ensuring that our organization‚Äôs use of third-party software adheres to internal company policy. This can consist of the SDLC, access management, change management, and a multitude of other policies. I interface regularly with our internal compliance, audit, and/or security teams to deliver the information they need for our organization‚Äôs compliance program.\nJobs to be done\nI need to be able to provide our internal compliance teams with evidence artifacts that help my company maintain a positive compliance posture.\nI need to find tools that enable my organization to manage our compliance program and mitigate risk within the application and its use.\nI need to create effortless processes for compliance so that my team will remain productive and efficient while meeting obligations for our primary job responsibilities.\nMotivations\nWhen I‚Äôm supporting an audit, I need the information to be available quickly and easily so I can reduce the time and disruption involved in the evidence collection process.\nWhen I‚Äôm managing my teams and projects, I need to know I‚Äôm not introducing unnecessary risks so I can protect the company from liability.\nFrustrations\nI‚Äôm frustrated because it‚Äôs difficult to find, aggregate, and report on all of the necessary data for audit purposes.\nI‚Äôm frustrated when tools do not have features that give me peace of mind about our organization‚Äôs compliance posture.\nIt‚Äôs challenging to compile data in a format that‚Äôs efficient and valuable to my internal audit or compliance team.\nIt‚Äôs challenging to build custom tooling and services every time we identify a gap in the compliance posture of our tools.\nDaphne (Data Scientist)\nAlternative Job Titles:\nData Analyst, Machine Learning Engineer\nJob Summary\nI collect, preprocess, and analyze data to derive insights and build predictive models.\nJobs to be done\nCollect and gather data from multiple sources.\nClean, transform, and preprocess data for analysis.\nExplore and analyze data to derive insights.\nBuild predictive models to solve business problems or make data-driven predictions.\nUpdate models with new training data to maintain their relevance.\nCollaborate with ML Engineers to deploy models and maintain data pipelines.\nMotivations\nAs a data scientist, my focus is on analyzing data and building effective models, rather than software development.\nI aim to create models that provide practical solutions and drive business value.\nFrustrations\nData access\nLack of computational resources\nLack of data and/or ML/AI literacy in the organization\nLack of streamlined processes and automations\nLack of data governance and ambiguity around policies, data ownership and data stewardship.\nMia (ML Engineer)\nAlternative Job Titles:\nMLOps Engineer, ModelOps Engineer\nJob Summary\nI am responsible for building, optimizing, and deploying machine learning models into production environments.\nJobs to be done\nBuild, optimize and experiment with machine learning models.\nDeploy models into production environments and integrate with other software systems.\nMonitor deployed models, detect performance issues and drift. Retrain and update models as needed.\nOptimize ML systems for scalability, performance, and efficiency.\nDevelop and maintain data pipelines and infrastructure to support end-to-end model and machine learning lifecycles.\nWork closely with data scientist, software engineers and other stakeholders to deliver ML solutions.\nMotivations\nBuild scalable, operatable ML systems.\nTurn data insights into products.\nFrustrations\nLack of automation and reproducibility\nLimited compute resources\nLack of Expertise and Knowledge Sharing\nLack of organizational buy-in to adopt MLOps and ModelOps\nInternal personas\nInternal personas reflect the workflow, needs, and challenges faced by GitLab team members. These personas support and influence the work of GitLab groups that serve internal use cases.\nList of internal personas\nEddie, Content Editor (Internal persona)\nDana, Data Analyst (Internal persona)\nEddie (Content Editor)\nAlternative job titles:\nContent Marketer, Technical Writer\nJob Summary\nI am responsible for creating, updating, and curating content for my company‚Äôs site. I review and submit changes to existing pages and create pages to add new content as needed.\nMotivations\nWhen I need to improve existing page content, I want to quickly find the areas that need to be updated, so I can ensure that the content is consistent and up-to-date.\nWhen I need to create a new page, I want to easily find the correct directory, so I can submit my changes to the appropriate location.\nFrustrations\nIt‚Äôs challenging to know which pages need to be updated, when I am responsible for managing a site with a lot of content.\nIt can be intimidating to make content changes, if I am not used to working with technical editing tools in my workflow.\nIt‚Äôs frustrating to have to spend time figuring out where content lives in the directory structure, especially when making small changes.\nIt‚Äôs difficult to make bulk updates to a page without tools that allow me to find-and-replace content.\nDana (Data Analyst)\nAlternative Job Titles:\nData Analytics Consultant, Business Data Analyst\nJob Summary\nMy goal is to deeply understand the lifecycle of data from various sources and model it in a way that fosters cohesive, accurate analysis. I am responsible for maintaining high quality data, building reports and dashboards, and explaining trends across data sources. I collaborate with stakeholders across the company, providing useful analyses and insights that empower them to build a stronger product and organization.\nMotivations\nWhen directors are assessing key performance indicators, I want to build dashboards with reliable data, so that they can have confidence in the conclusions drawn from the data.\nWhen our product team needs to measure the value of our features, I want to see more granularity and context for patterns in usage data, so that we can develop a better understanding of how people are interacting with the product.\nWhen important company initiatives are being discussed, I want to deliver queryable data and empower my colleagues to run their own analyses, so that they can use data-driven insights to inform critical decisions.\nWhen my colleagues are working on projects requiring data analysis, I want to find ways to optimize queries, so that they can spend more time actioning insights.\nFrustrations\nIt can be frustrating to work with data that is not properly structured and low in quality and confidence as a result.\nIt can be difficult to know exactly how to approach analysis, when my colleagues are not clear about the questions they have and why they want to explore certain aspects of the data.\nIt‚Äôs hard to trust the integrity of data, when inconsistent tracking results in missing context for key events.\nIt‚Äôs difficult to answer big picture questions about feature usage and user retention, when feature parameters and usage criteria aren‚Äôt completely defined.\nOrganization Archetype\nWhat is an organization archetype? An organization archetype is a typical example of an ‚Ä¶\nLast modified February 17, 2025:\nUpdate docs links in product pages (\n9993abed\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6858}
{"doc_id": "15f778841481ee2e", "url": "https://handbook.gitlab.com/handbook/people-group", "title": "People Group | The GitLab Handbook", "text": "The Handbook\nPeople Group\nThe People Group at GitLab supports all GitLab team members through the complete team member lifecycle.\nWelcome\nWelcome to the People Group handbook! You should be able to find answers to most of your questions here.\nPeople Group Vision\nThe People Group works together to establish a high performance and results driven culture where a diverse and inclusive team can experience a meaningful career.\nWe support a culture that enables people to do their best work and advance their careers while fully contributing to advancing GitLab‚Äôs business results. We hire, promote, and recognize team members who best live our values.\nThe People Group strategy is aligned with\nGitLab‚Äôs Company Strategy\nthrough a focus on supporting GitLab‚Äôs ability to deliver on our FY26 Plan while setting the foundations to build a generational company.\nWe‚Äôve published more information about how this vision translates to strategy and for People Group members and GitLab team members in this\ninternal-only presentation\n.\nConnect with us\nYou can also check out pages related to People Group in the section below. If you can not find what you are looking for please do the following:\nThe People Group\nholds several subprojects to organize the people group; please create an issue in the appropriate subproject or\ngeneral\nif you‚Äôre not sure. Please use confidential issues for topics that should only be visible to GitLab team-members. Similarly, if your question can be shared please use a public issue. Tag\n@gl-people-connect-team\nor\n@gl-hiring\nso the appropriate team members can follow up.\nPlease note that not all People Group projects can be shared in an issue due to confidentiality. When we cannot be completely transparent, we will share what we can in the issue description, and explain why.\nEmployment Issue Tracker\n: Only Onboarding, Offboarding and Transition Issue Templates are held in this subproject, and they are created by the People Operations Team only. Interview Training Issues, are held in the\nTraining project\nand created by the Talent Acquisition team. Please see the\ninterviewing page\nfor more info.\nPeople Operations\n; Please create a case for the People Operations team with any questions that do not seem appropriate for the issue tracker within\nHelpLab\n- choosing the applicable template/category applicable. For access requests regarding Google or Slack groups, please create an issue here:\nhttps://gitlab.com/gitlab-com/team-member-epics/access-requests\n. For questions that relate to Payroll, Expenses or Equity, please direct your question to the respective teams in HelpLab. Regarding questions for our recruiting team, including questions relating to access, or anything to do with Greenhouse, referrals, interviewing, or interview training please use the\n#talent-acquisition\nchannel.\nIf you need to discuss something that is confidential/private (including sensitive matters surrounding your team), you can open a\nHelpLab\nCase the Team Member Relations team. Any team member, regardless of location, can use this form to discuss a private sensitive matter.\nIf you need help with any technical items, for example, 2FA, please ask in\n#it_help\n. The channel topic explains how to create an issue. For urgent matters you can mention\n@it-ops-team\n.\nThe People Group: One Team Mosaic Video\nOne Team Mosaic Video\nIn general, the People Group is here to support GitLab‚Äôs\nmission\nby bringing top talent into GitLab, and then enabling team members to make meaningful contributions in alignment with our\nvalues\n.¬† Please don‚Äôt hesitate to\nreach out\nwith questions or ask for support!\nThe People Group works together as one team, made up of five departments: People Operations, Talent and Engagement, Total Rewards, People Business Partners, and Diversity, Inclusion, and Belonging (DIB).\nDepartment\nTeams\nPeople Operations\nPeople Operations, Employment Solutions, People Compliance, People Tools & Technology\nTalent and Engagement\nTalent Acquisition; Candidate Experience, Talent Acquisition Operations and Insights, Sourcing, Talent Brand\nEngagement; Talent Development, Engagement, Talent Management, People Analytics\nTotal Rewards\nGlobal Compensation, Benefits, and Equity Strategy\nPeople Business Partners\nAligned to Engineering, Product, Sales, Marketing, and G&A, and Team Member Relations\nNeed Help?\nIn Case of Emergency\nIf team members need emergency support from GitLab‚Äôs People team, please create a case in\nHelpLab\n. HelpLab is monitored during most working hours and is the centralized support platform for all people-related queries. Read more about our\nPeople Connect methods of engagement\n.\nWe trust team members to always use their best judgement when facing any emergency. Team members are encouraged to dial their country‚Äôs emergency services number for any critical and/or medical emergency. In the case that other team members are aware of a team member‚Äôs emergency (during a Zoom call for example) and wish to call that country‚Äôs emergency services on the original team member‚Äôs behalf, we do not recommend this as only certain People Ops team members have access to team member addresses and we would take on the role of communicating with emergency services, should this extremely rare situation arise.\nIn the event a team member is in an unsafe situation due to a natural disaster, please see the\nDisaster Recovery Plan\npage.\nHow to Report Violations\nAs stated in the\nCode of Business Conduct and Ethics\n, we have a section related to reporting violations. GitLab has engaged Navex to provide EthicsPoint, a comprehensive and confidential reporting tool, an anonymous ethics hotline for all team members. The purpose of the service is to insure that any team member wishing to submit a report anonymously about conduct addressed in the\nCode of Business Conduct and Ethics\ncan do so without the fear of retaliation.\nIn addition to EthicsPoint, GitLab has engaged Lighthouse Services to provide an anonymous reporting hotline for all team members to submit reports regarding team member relations. Reports may cover but are not limited to the following topics: wrongful discharge or disciplinary action,\nsexual harassment\n, discrimination, conduct violations, alcohol and substance abuse, threats, improper conduct, violation of company policy.\nPlease note that the information provided by you may be the basis for an internal and/or external investigation into the issue you are reporting and your anonymity will be protected by Lighthouse to the extent possible by law. However, your identity may become known during the course of the investigation because of the information you have provided. Reports are submitted by Lighthouse to a company designee for investigation according to our company policies.\nLighthouse has a toll free number and other methods of reporting are available 24 hours a day, 7 days a week for use by team members.\nWebsite:\nhttps://www.lighthouse-services.com/gitlab\nUSA Telephone:\nEnglish speaking USA and Canada: 833-480-0010\nSpanish speaking USA and Canada: 800-216-1288\nFrench speaking Canada: 855-725-0002\nSpanish speaking Mexico: 01-800-681-5340\nAll other countries telephone: +1-800-603-2869\nE-mail:\nreports@lighthouse-services.com\n(must include company name with report)\nFax: (215) 689-3885 (must include company name with report)\nIn addition to EthicsPoint and Lighthouse, please review the\nTeam Member Relations\npage. GitLab also offers a\nHarassment Complaint Form\nthat any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at\nteammemberrelations@gitlab.com\n.\nHow to reach the right member of the People Group\nThis table lists the aliases to use, when you are looking to reach a specific group in the People Group. It will also ensure you get the right attention, from the right team member, faster.\nSubgroup\nGitLab handle\nEmail\nSlack Group handle/channel\nGreenhouse\nIssue tracker\nPeople Business Partners\n@gl-peoplepartners,\nPlease add the\npbp-attention\nlabel to any issue or MR that requires PBP review, collaboration, or feedback\npeoplepartners@ gitlab.com\n@peoplepartners\nn/a\nTotal Rewards\n@gl-total-rewards\ntotal-rewards@ gitlab.com\nHelpLab\nn/a\nPeople Compliance Partner\nHelpLab\nn/a\nPeople Operations Team\n@gl-people-ops-team\nHelpLab\n@people-ops-team\nn/a\nTeam Member Relations\n@atisdale-ext\nteammemberrelations@gitlab.com\nn/a\nAbsence Management Team\n@lyndemeiers\nleaves@gitlab.com\nHelpLab\nn/a\nPeople Group Engineering\n@gl-people-engineering\nNo email group, create issues for People Engineering\nhere\n#peopleops-eng\nn/a\nhttps://gitlab.com/groups/gitlab-com/people-group/peopleops-eng/-/boards/3941171\nDiversity, Inclusion and Belonging\nNo alias yet, @mention the\nDiversity, Inclusion and Belonging Partner\ndiversityinclusion@ gitlab.com\nn/a\nDiversity, Inclusion and Belonging issue tracker\nLearning and Development\n@gitlab-com/people-group/learning-development\nlearning@ gitlab.com\n#learninganddevelopment\nn/a\nL&D Issue Board\nTalent Acquisition\n@gl-talent-acquisition\nrecruiting@ gitlab.com\n@talent-acquisition-team\nn/a\nEmployer Branding\nNo alias yet, @mention the\nSenior Talent Brand Manager\nemploymentbranding@ gitlab.com\nn/a\nCandidate Experience Specialist\n@gitlab-com/gl-ces\nces@ gitlab.com\n@ces\n@ces*\nTalent Acquisition Operations and Insights\n@gl-talent acquisitionops\ntalentacquisitionops@ gitlab.com\n@talent-acquisition-ops\n@talent-acquisitionops\nSourcing\n@gl-sourcingteam\nn/a\n@sourcingteam\nn/a\nPeople Analytics\nNo alias, create issues for People Analytics\nhere\nn/a\n@peopleanalyticstriage\nn/a\nPeople Analytics Issue Board\nPeople Group Program Calendar for Managers and Team Members\nOn\nthis page\nyou can find our People Manager Calendar and All Team Member Calendar. The goal of these pages is to ensure that team members and People Managers can plan ahead and have an overview of upcoming programs and timelines.\nCommunication on People Programs that require action\nEach quarter a Slack reminder will go out in #people-manager-and-above channel to review the next quarter calendar events. Each month shows Task, which outlines the people manager responsibility associated with the specific program, and (if applicable) highlights the Key Date. We will also leverage our Manager Newsletter and the Company Newsletter for broadcasting our programs widely.\nUpdating calendars\nEach month on the first Monday there‚Äôs a calendar reminder to update the calendars on that date. This calendar reminder includes People Business Partners and the DRI in L&D.\nAlso with sharing the calendars in the news letters People Business Partners and L&D will be tagged.\nThe goal of the calendar is to include information at least two quarters ahead of the current quarter. For questions about the updates to the calendars you can always reach out to People Connect.\nSupport provided by the Legal, Employment team to the People Group\nThe Legal-Employment team, collaborates with and provides support to the People team in many functional areas.\nEmail approval from the Senior Director of Legal, Employment is required prior to engagement with external counsel to allow for accurate tracking of costs.\nInvoices will be sent to Senior Director of Legal, Employment, for approval.\nWhen support from the People Operations team is required by the Legal, Employment team\nThe Legal, Employment team may require support from the People Operations team, for communicating a country specific legal requirement to team members, to consult with team members in an entity country if necessary or to arrange legally required contract amendments, to name just a few examples. As these matters may relate to individual team members or groups of team members, they are appropriately managed in a confidential manner.\nIf the Legal, Employment team makes a request for support or assistance from the People Operations team, the request should be formulated using a template (\nlinked here\n, though accessible internally only to Legal, Employment and the People Operations team).\nThe request should include\nall\nthe required detail and explanation to enable people connect to support, including:\nAn explanation of what is needed\nWhether there‚Äôs a timeline on the request (ensuring people connect are provided with as much lead time as possible)\nWhether all the information needed, has been provided, eg contact names, dual language translations if applicable, links to any relevant documents etc\nA note on whether an FAQ to share with team members is needed or whether people connect have enough information to answer any questions which might arise\nWhether there are any follow up actions for legal or for people connect\nA short explanation or summary (if necessary) or courtesy update for the managers of any affected team members\nWhether confirmation of completion is needed\nTo make a request, a copy of the template should be saved, filled out as above, dated and passed to Alissa Meeks/the People Operations Manager so the request can be assessed and assigned to a member of the people connect team for completion. Once assigned, the member of the People Operations team who will be assisting with the request should touch base with the member of the Legal, Employment team who has made the request, to confirm that the request is being worked on and so it‚Äôs easy to collaborate on finishing out the task.\nSupport provided by the People Operations team to the People Business Partner team\nMost tasks/requests from the People Business Partners for the People Operations team will be handled via a HelpLab. If a general query/question, the PBP may request guidance in the private\n#pbp-peopleops\nSlack channel. This is a private channel. The People Operations Team, will self-assign a task, within 24 hours and comment in Slack/HelpLab on the request to confirm.\nPeople Operations Responsibilities & Response Timeline\nPlease note that the source of truth for role responsibilites is the job family for the\nPeople Operations Team\n. The table below is meant to provide a quick overview of some of the core responsibilities for the team.\nPeople Operations Team\nResponsibility\nResponse Timeline\nOnboarding\n2 weeks prior to start date\nOffboarding\nImmediate action for involuntary & 24 hours for voluntary\nOrganizational Changes\nWithin 3 days of effective date of change\nLetters of Employment\nWithin 24 hours\nEmployment Verification\nWithin 24 hours\nAnniversary Emails\nFirst day of the following month\nHelpLab Queries\nWithin 24 hours\nProbation Period Notifications\nDaily (when applicable)\nContract Renewals\n30 days or more prior to team member‚Äôs renewal date\nExit Interviews\nDuring voluntary offboarding team member‚Äôs last week\nUS Unemployment Claim Management\nAs Needed and Audited Quarterly\nRelocations\nAs requested, usually completed 30 days or more prior to team member‚Äôs relocation date\nOther listed processes for the People Connect Team can be found\nhere\nEmployment Solutions Team\nResponsibility\nResponse Timeline\nCountry Conversions\nAs soon as approval is given by CFO. Conversion turnaround time can vary based on a variety of factors.\nPeople Compliance Team\nResponsibility\nResponse Timeline\nAdministration of the signing of our Code of Business Conduct and Ethics\nAnnually in Feb/March\nFrequently Requested\nPlease review the\nfrequently requested section\nof the People Internal Handbook before reaching out to the team. The page includes information on accessing a team directory, requesting a letter of employment, mortgage forms, the companies reference request policy, ordering business cards, and changing your name in GitLab systems.\nAddresses\nFor the mailing addresses, see our\nvisiting\npage.\nFor the NL office, we use\naddpost\nto scan our mail and send it to a physical address upon request.\nReporting potential inaccurate LinkedIn Profiles\nGitLab does not actively search for LinkedIn profiles that have inaccurate information about being a GitLab Team member. However, there are instances where a profile is identified and there is question on whether the person is truly a GitLab team member. Here is the process for flagging a potentially inaccurate profile and the actions that the People Connect Team will do to confirm and potentially report a profile.\nTeam members should first check in Slack and/or on the organizational page to determine if the team member is a current GitLab team member.\nIf the team member cannot confirm the profile, team members should reach out to the People Operations Team via\nHelpLab\nwith the LinkedIn profile in question.\nThe People Operations team member will confirm in Workday that they are not/have not been a team member.\nThe People Operations team member will confirm with talent acquisition to confirm if they have ever been interviewed, made an offer or were declined.\nThe People Operations team member will reach out to the\nDeveloper Relations team\nto confirm if they are an active wider community member via the\n#developer-relations\nSlack channel, using the\n@devrel-team\ntag.\nIf they are a confirmed member of the wider community but not a team member, the Developer Relations team will reach out the profile and ask them to change their profile to match their GitLab involvement.\nIf they are not a current member of the wider community and talent acquisition has confirmed they do not have a profile in Greenhouse, talent acquisition will create a Do Not Hire profile.\nThe People Operations team member will report the account to LinkedIn via the\nReporting Inaccurate Information on Another Member‚Äôs Profile\nUsing Workday\nWe use Workday to maintain team member information.  All team members (all contract types) are in Workday.\nWorkday is managed and maintained by the People Tools and Technology team.\nSee our\nWorkday Guide\nto  learn more about how to use Workday.\nUsing Culture Amp\nAdministrative access to CultureAmp will be limited based on role and responsibility. There are 3 different levels of access:\nAccount Administrator access can manage account setting and team member data, create surveys and has access to all survey results.\nSurvey Creator administrator access can create, manage and design surveys, select participants and share results.\nSurvey data analyst administrator can export raw data from all surveys enabled for raw data extract.\nTo request access please open an access request with the type of account\naccess requested\nand the business need. You can assign the access request to Anesia Chan\n@anechan\nand Laura Janssen\n@Laura-Janssen\n(as backup) for review and approval. The default admin access will be the Survey Creator administration rights unless other access is specified. Please note that Survey Data Analyst admin rights will not be granted to team members outside of the People group with out permission from the Chief People Officer.\nIf you need support with a specific CultureAmp Survey, please complete this\nissue template\nto alert the People Analytics Team.\nTake Time Out to Learn\nAt GitLab, we believe that\ncareer growth is non-linear\n. In practice, non-linear career growth is an opportunity for team members to increase efficiency with new skills, develop as leaders with new responsibilities, and grow as an expert in their field.\nBut growth only happens when we make intentional time and space to learn.\nAs a People Group, we‚Äôre embracing this attitude of continuous learning together, with the challenge that, as a team, we can spend a total of\n300 hours\nlearning before the end of FY25 Q3! We encourage everyone to participate, spending approx. 2 hours per month learning something new, as a way to prioritize your development and use work time to uplevel and upskill.\nAt the end of the quarter, we‚Äôll ask folks to self-report hours spent learning, and take a tally of total People Group learning hours.\nHere are a few ways you might spend time learning this quarter:\nCreate an IGP\nto track and monitor your growth goals\nUtilize the\nGrowth and Development Fund\nto engage in a class or conference\nOrganize a\njob shadow\nor\ninternship for learning\nto increase exposure and collaboration with different roles and teams.\nAttend an AMA or async Group Conversation, and contribute by asking a question.\nOrganize a discussion on your team about a shared topic (i.e. article, book, or podcast on a topic that is relevant to your team‚Äôs work)\nAttend a TMRG career growth event\nWe encourage everyone to have an ongoing conversation about career growth with their manager during weekly 1:1s. If this isn‚Äôt already part of your weekly check in, consider adding it to your agenda template now!\nInvesting in your growth is essential for both your individual success and the success of our entire team. Let‚Äôs start learning together!\nOther pages related to the People Group\nPeople Business Partners\nPeople Business Partner Team\nTotal Rewards\nBenefits\nGlobal Compensation\nPeople Operations\nCode of Business Conduct and Ethics\nPromotions and Transfers\nEmployment Solutions (International Expansion)\nContracts\nProbation Periods & PIAA\nOnboarding\nOffboarding\nCelebrations\nPeople Operations\nPeople Analytics\nTalent Acquisition\nIncentives\nHiring process\nLeadership\nLearning and Development\nLearning & Development\nGuidance on Feedback\nDiversity, Inclusion and Belonging\nGender and Sexual-orientation Identity Definitions and FAQ\nOther People Group Links\nPeople Policy Directory\nUnderperformance\nVisas\nLeadership handbook\nPeople Group READMEs\nPeople Key Performance Indicators\nPeople Performance Indicators\n360 Feedback\n360 Feedback is an opportunity where managers, direct reports, and cross functional team members will give feedback to each other.\nAnti-Harassment Policy\nEveryone at GitLab has a responsibility to prevent and stop harassment. Learn more about our Anti-harassment policy.\nCompetencies\nGitLab has competencies as a common framework to learn things. This page is a Single Source of Truth (SSoT) resource for our competencies.\nContracts, Background Screenings, Probation Periods & PIAA\nGitLab contract information and associated procedures.\nDirectly Responsible Individuals (DRI)\nDirectly Responsible Individuals (DRIs) at GitLab own particular projects, initiatives, or activity.\nEmployment Solutions - Overview\nGitLab's Employment Solutions.\nEngagement Surveys and Employer Awards\nGitLab uses engagement surveys to allow team members to provide feedback and leadership to gain insight.\nGender and Sexual Orientation Identity Definitions and FAQ\nGender and sexual identity definitions, frequently asked questions, and resources\nGitLab Internal Acceptable Use Policy\nThis policy specifies requirements related to the use of GitLab computing resources and data assets\nGitLab Offboarding\nOffboarding Procedures for GitLab Team Members and Stakeholders\nGitLab Onboarding\nOnboarding at GitLab and Onboarding Issue Templates\nGitLab People Operations Team\nConnect with Us GitLab Team Members can now reach out to us at the touch of a button via HelpLab. ‚Ä¶\nGiveLab Volunteer Initiatives\nDiscover GitLab's volunteering opportunities with GiveLab\nGlobal People Compliance at GitLab\nThe Global People Compliance team at manages all compliance-related initiatives across People Operations processes.\nGuidance on Feedback\nGitLab's views and directions on how to give and receive feedback.\nIncident Response\nAn outline of action to be taken in the instance that a team member or group of team members is impacted by an extreme weather event; natural disaster or any other catastrophe.\nLearning & Development\nOverview Purpose Why we exist: GitLab Talent Development (commonly referred to as ‚ÄúLearning ‚Ä¶\nNew Hires, Celebrations and Significant Life Events\nReview different ways GitLab celebrates its team members.\nOrganizational Change Management\nIntroduction GitLab is growing fast and we have been ranked as one of the fastest-growing private ‚Ä¶\nPaid Time Off at GitLab\nIntroduction This policy relates to the types of leaves that GitLab offers and the guidelines ‚Ä¶\nPeople Business Partner Team\nPeople business partners at GitLab contribute to GitLab's strategy by driving a high performance and inclusive culture in each division.\nPeople Group Calendars\nCalendars for team members and managers to help plan for the year at GitLab.\nPeople Group Engineering\nInformation about GitLab's People Group Engineering team and its projects, workflow, and sources of data.\nPeople Group Program Management\nThis page provides an overview of Program Management positions within the People Group today, a list of key competencies, and links to templates and resources for reference.\nPeople Group Project Program\nAny GitLab People Success or Talent Acquisition team members may participate in projects listed in the People Group Project Program issue board.\nPeople Group READMEs\nPeople Group Systems Architecture\nInformation about GitLab's People Group systems and how they are all linked together.\nPeople Group Tech Stack Guide\nReference for how Workday is implemented.\nPeople Operations Team\nGitLab People Operations Department Handbook\nPeople Success Performance Indicators\nGitLab's People Success Department Performance Indicators.\nPromotion Document Style Guide\nAssembling a case for promotion can be a time-consuming process. The tips and style principles in ‚Ä¶\nPromotions and Transfers\nInformation and protocols related to GitLab promotions and transfers.\nPronoun Guidance and Information\nResources for understanding and discussing pronouns and their usage at GitLab.\nQuarterly Talent Review (QTR)\nOverview of GitLab's internal quarterly talent review process.\nRelocation\nGitLab's Policies & Processes in Relation to Team Member Relocations.\nTalent Assessment\nOverview of three critical pieces of GitLab's talent development program: performance, growth potential, and key talent.\nTalent brand\nOur ambitions as an employer, the steps we take to achieve and communicate those ambitions, and the measures in place to ensure we live up to them.\nTalent Development Program\nInformation on GitLab's Talent Development Program to ensure ongoing success across all teams.\nTeam Member Relations at GitLab\nThe Team Member Relations team at GitLab ensures that team members feel safe and have a point of contact for all confidential discussions.\nUsing GitLab at GitLab\nIntro Everyone at GitLab uses our GitLab tool in their daily work. This page details items specific ‚Ä¶\nVisas\nInformation on travel visas, visa letters, and immigration to the Netherlands.\nWorkday Guide\nWhy Workday? Integrated people processes that allow us to view Team Member data in one system ‚Ä¶\nLast modified July 8, 2025:\nDeleting public frequently requested People Group handbook page (\nadabe71d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4015}
{"doc_id": "6a2c89bd0813c3ea", "url": "https://handbook.gitlab.com/handbook/resellers/channel-tools-resources", "title": "Channel Partner Tools and Resources | The GitLab Handbook", "text": "The Handbook\nGitLab Channel Partner Program\nChannel Partner Tools and Resources\nChannel Partner tools and resources to help grow your GitLab business.\nWe invite organizations interested in becoming a GitLab Channel Partner to\n.\nGitLab Partner Portal\nPartners are given access to our\nPartner Portal\nwhen they are onboarded. This serves as the primary source of information and transactions for our Partners. The GitLab Partner Portal has the following capabilities:\nPartner registration and account management\nDeal registration and opportunity management\nTraining accreditation and other learning\nSales, services, and program and marketing resources\nGitLab news, communications and program announcements.\nVisit the portal at\npartners.gitlab.com\n.\nPlease note: if no one from your organization logs in to use our Partner Portal, after 6 months, your portal account will be deactivated. If you need your account reactivated, please contact\npartnersupport@gitlab.com\nand they will reactivate you.\nGitLab Landing Page Guidelines\nGitLab Channel Partners need a landing page with information about GitLab as part of their organization website. Here is what we look for in a webpage:\nWe prefer your landing page URL be created as yourcompanyurl.com/GitLab. If this is not possible, we ask you to set a redirect for that URL to the actual one.\nWe encourage your landing page to be in the local language. There are plenty of resources on GitLab, many in additional languages, however you can translate any of our Instant Marketing campaign materials (found in the marketing section of the Partner Portal) onto your website.\nYour organization‚Äôs GitLab webpage should use the Authorized Reseller logo (available on the Partner Portal) and link back to us at\nabout.gitlab.com\n.\nYour webpage should include a ‚ÄúWhat Is GitLab?‚Äù paragraph which can be found in our\npress kit\nalong with our logo. You can find additional information in our\nreseller marketing kit\n.\nTo ensure you are consistently representing our product on your website, we ask that wherever you mention the GitLab product or features, there should be a link back to the corresponding item on\nabout.gitlab.com\n.\nWhile not required, we encourage Partners to include a Free Trial button on your GitLab webpage. This Free Trial button is customized to include your unique ID and tags all leads to your organization. The 30-day Free Trial helps your customer try GitLab for one month free and gives you the opportunity to discuss how it‚Äôs working for them. To learn more about this offering go to the\nMarketing Demand Generation section\nof the Partner Portal.\nMarketing Resources\nChannel Partners have several programs and tools available to help them market and sell GitLab. The following are a few of the programs offered; additional programs are added periodically so bookmark this page to ensure you always have the latest information.\nGitLab Brand and Logo\nBookmark the\nGitLab Brand and Logo website\nto ensure you have access to these materials.\nAuthorized Reseller Logo\nThe GitLab Authorized Reseller logo allows your prospects and customers to know that GitLab is working with you.\nUse the GitLab Authorized Reseller logo on your materials where appropriate and in accordance with our\nbrand and logo guidelines\n.\nThe logos are available in the\nREADME file\nof the resellers project. Also, the logos can also be downloaded from the Marketing collection of the Asset Library in the\nPartner Portal\n.\nGitLab Public Relations Request\nAny requests for public relations support must go through the CAM as well as the GitLab PR team. Please refer to the\nCorporate Communications handbook page\nfor more information on the process.\nPartner Instant Marketing Campaigns\nWe ºve developed a full suite of GitLab marketing assets for Partners, including ebooks, infographics, videos, digital ads, social media posts, and more. They can select what they need, customize the materials with a logo, and begin marketing. Social media materials are also available. Materials are available in 6 languages: English, French, German, Japanese, Korean and Spanish.\nStart using these materials today by going to the\nMarketing Demand Generation section\nof the Partner portal.\nPartner Microsite Program\nKeeping your Partner websites up-to-date with the latest GitLab content is easy with our Partner microsite program. Partner‚Äôs simply provide GitLab with their logo, give us an ‚ÄúAbout Us‚Äù statement and begin your nurture effort. Topics on the microsite include GitOps, DevOps, DevSecOps, Ultimate Upgrade and Automated Software delivery. GitLab creates and maintains these SEO-friendly, co-branded microsite, with customized URLs for Partners to use to directly with customers.\nLearn more by going to the\nMarketing Demand Generation section\nof the Partner Portal.\nCustomer Case Studies\nTestimonials from happy customers are a great tool, but gathering this information can be difficult and time-consuming. To participate in this program, Partners should contact\nPartner Marketing\nor learn more by going to the\nMarketing Demand Generation section\nof the Partner Portal.\nMarketing Development Funds\nSelect Partners may be eligible for\nMarketing Development Funds, or MDF,\nto acquire new GitLab customers, drive demand within an existing mutual customer base, or help educate GitLab teams. GitLab MDF can support multiple marketing efforts, including participation in trade shows, sales incentives, direct mailing costs, training, and more.\nRequesting Marketing Development Funds\nOur Select Partners are eligible to submit requests for consideration for marketing development funds (MDF). To learn more, check out our\nMDF handbook page\nor login to the\nPartner Portal\nand visit the marketing page.\nGitLab Branded Item Requests\nPlease submit your request for GitLab-branded items through your Channel Account Manager (CAM). We have been known to co-fund co-branded or locally produced swag.\nGitLab Partner Communications and Resources\nGitLab uses the Partner Portal, and our News on Demand Platform to communicate with Partners.  Partners will automatically receive the newsletter and other communications when they have access to the portal. GitLab will deliver communications in the following manner.\nPartner Flash Newsletter -\nOnce in the portal, navigate to My News to set preferences. A Partner can elect to receive the newsletter daily, weekly, or bi-weekly and select what content type to receive. Example: Only interested in Marketing content? You can opt out of Technical content.\nPartner Webcasts -\nAt times, Channel Programs or Channel Leadership might host a Partner webcast to announce a program change or essential updates. Channel Marketing hosts a monthly Marketing Webcast; other Channel facing teams might elect to host a Webcast for our Partners.\nPartner Portal Notifications -\nThis is not a primary form of communication; it augments other communication vehicles. Partners can see notifications at the top right corner of the portal. Click the bell image within the portal to see active notifications.\nNotifications via email -\nOccasionally, we will use email notifications to communicate out-of-cycle announcements, send surveys, or Partner SKO/Summit notifications.\nNot receiving communications?\nTypically a person has opted out. Contact the Partner Help Desk, and we can add you back in. Partners can access archived articles by accessing My News in the portal menu.\nGitLab Handbook\n.\nMore Channel Partner Program Information\nIf you are looking for additional information on the GitLab Partner program see the following handbook pages.\nChannel Partner Program Overview\nChannel Program Guide\nChannel Services Program\nChannel Services Catalog\nChannel Partner Training and Certifications\nChannel Partners: Working with GitLab\nChannel Tools and Resources\nAlliance Program\nAll authorized GitLab resellers are invited to the GitLab #resellers Slack channel. This Slack channel allows you to reach out to our sales and marketing team in a timely manner, as well as other resellers. Additionally, you can reach the GitLab Channel Team at\npartnersupport@gitlab.com\nand the GitLab Partner Marketing Team at\npartner-marketing@gitlab.com\n.\nLast modified June 16, 2025:\nPX Portal Updates - Channel Partner Tools and Resources Handbook Page (\nc546c955\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1272}
{"doc_id": "c911ba549c7b2269", "url": "https://handbook.gitlab.com/docs/development", "title": "Handbook Development | The GitLab Handbook", "text": "Contributing Guidelines\nHandbook Development\nDevelopment environment and processes for maintaining the handbook\nThe handbook site uses\nHugo\nfor static page generation\nfrom Markdown.\nThe handbook uses a base theme called\nDocsy\n. A custom theme override\nis located in the\nDocsy GitLab Theme\nproject and automatically included in the handbook setup.\nSupport\nFor help and support with the development environment, please reach out in the public\n#handbook\nSlack channel.\nIf you encounter a problem or bug, please open an issue or MR in the respective handbook projects.\nEdit the handbook in your browser\nFollow the\nediting the handbook\ndocumentation.\nArchitecture Overview\nThe Markdown files get parsed by Hugo, and converted into static HTML files, including all assets (JS, CSS, images, etc.).\nThe static files are uploaded to GitLab Pages.\nflowchart TD\nA(docsy) --> B\nB(docsy-gitlab) --> H\nB(docsy-gitlab) --> I\nC(www-gitlab-com) --> H\nC(www-gitlab-com) --> I\nD(handbook) --> H\nE(handbook-internal) --> I\nF[handbook.gitlab.com]\nG[internal.gitlab.com]\nThere are four internal projects and one external project used in the process of building and deploying the internal and external handbooks.\nDocsy\nis the base theme used for both handbook sites.\nDocsy GitLab\nis an extension to the base Docsy theme with GitLab specific customizations and features. Docsy GitLab is included in both handbook sites.\nwww-gitlab-com\nis the source repository of data files used by both handbook sites.\nhandbook\nis the public handbook site.\ninternal-handbook\nis the internal handbook site.\nTemplates and Partials\nReview the Hugo development documentation to learn more.\nhttps://gohugo.io/templates/introduction/\nhttps://gohugo.io/functions/partials/\nThere are some\npartials specific to GitLab\n.\nAccess tokens\nTo minimize maintenance, a small number of group and project access tokens are used.\nThis overview is not meant to be a comprehensive list. Search in this and other development documentation pages for details on the individual access tokens.\n, currently called\nDocsy GitLab Release\n. Used for various things, primarily:\ndocsy-theme\nrelease\njob\nnotify\nhandbook jobs\n, currently called\nTriage bot\n. Used for various maintenance tasks, primarily:\nTriage\nCI jobs in\nmaintenance-tasks\nProject access tokens are sometimes created for project specific tasks, such as\n.\nA ‚Äúzap‚Äù\n(internal) (use shared 1Password sign in) has been configured with a group level webhook to notify the\n#handbook-escalation\nchannel. Due to its reliability, you may want to consider creating an issue, or some other reminder.\nHandbook monitoring\nThe\nhandbook monitor project\nruns a pipeline every 10 minutes (see pipeline schedule) to check if the handbook is ‚Äúup‚Äù using\nhurl\n.\nThere is another scheduled monthly pipeline that will rebuild the image used in CI. This job will only run if there‚Äôs an environment variable\nset to\nto avoid rebuilding the image with every scheduled CI job.\nIf the job fails, the pipeline will post to the\n#handbook-escalation\nSlack channel.\nNotices are also posted in that channel when pipelines fail on the\nmain\nbranch of the handbook projects.\nNote: Internal handbook is not monitored in this way as there is a blocking issue. See\ninternal-handbook#90\n.\nSimilarly, the request for\nintegrating the handbook to infra‚Äôs monitoring\nis pending. See\ndocsy#14\nfor more information.\nRun the handbook locally for edits\nSupported methods:\nDocker or compatible runtime (all software preinstalled in a container image)\nLocal installation (experienced users, more software dependencies, can break)\nRequirements\nCommand line:\ngit\n,\nwget\n(for syncing data). Additional requirements for local installation, see below.\nDocker or compatible runtime (for running the Hugo environment in a container)\nOn\nmacOS\n: Docker Desktop, Rancher Desktop, etc.\nOn\nLinux\n: Docker engine, Podman, etc.\nClone the handbook Git repository\nCloning the repository allows you to manually edit the handbook locally. If you prefer to use the Web IDE, please continue reading the\nediting the handbook\ndocumentation.\nWe recommend using git to clone the repository and then editing the handbook with a text editor such\nas\nVisual Studio Code\n,\nTypora\n,\nNova\nor\nSublime\nto name a few.\nClone the repository:\nPublic handbook\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/handbook.git\nInternal handbook\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/internal-handbook.git\nDocsy GitLab theme\n:\ngit clone git@gitlab.com:gitlab-com/content-sites/docsy-gitlab.git\nSet up the repository\nAfter cloning the repository, sync the required data files from the\ndata file location (currently the\nwww-gitlab-com\nrepository).  Without this\nstep, the handbook cannot be run locally.\nOpen a terminal, navigate into the cloned handbook repository path, and run the\nsync-data.sh\nscript.\nExample for the public handbook:\ncd\nhandbook\n./scripts/sync-data.sh\nRunning Hugo\nHugo needs to be run to generate the static files from the handbook markdown content.\nWhen installing Hugo, review the CI file of the relevant handbook repository for the version of Hugo in use. The latest version may or may not work.\nThere are two ways to run Hugo:\nRunning the Handbook in Docker\nRunning the Handbook Locally\nParameters for Hugo\nThe handbook is huge, and by default, the\nhugo server\ncommand loads everything to memory.\nThe following options for the\nhugo\ncommand can be helpful for debugging or otherwise running locally:\n--environment=production\n: generate a production build (asset minification, checksums, etc)\nNote:\nhugo v0.x.x+extended\nversion must be installed, use\nhugo version\nto check\nNote:\nnpm i\nmust be run as a prerequisite to install\npostcss\nand\nautoprefixer\ndependencies\n--renderToDisk\n: slower but requires less memory to run. Useful if you have less than 16GB allocated to docker machine\n--verbose\n: enables verbose logging output\n--templateMetrics\nand\n--templateMetricsHints\n: prints metrics related to how frequently templates are invoked and how much time is being spent evaluating them\n--printMemoryUsage\n: periodically prints memory usage while the site is building\nBuild static files\nTo render the entire site to disk (and inspect the output in\n${PWD}/public\n),\npurge the generated files first, and then run Hugo.\nmake clean\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\nhugomods/hugo:exts hugo\n# or\nhugo\nPermissions\nFor some pages to render you may need a\npersonal access token\n.\nGenerate one and export it as an environment variable prior to running\nhugo\ncommands:\nexport\nHUGOxPARAMSxGITLAB_API_KEY\n=\n\"<token>\"\nhugo ...\nIf you need to make changes to the underlying theme you‚Äôll need to make changes in the\nGitlab-Docsy\nmodule\n.\nLinting content\nTo enforce rules and guidelines, we use:\nCustom Handbook lint\nHugo lint\nmarkdownlint\nVale\nOnce an error is encountered, the relevant job fails and a comment is added to the merge request with a list of errors, with guidance for the suggested fix.\nWarnings and suggestions are not reported in the comment, but are in the code quality report.\nCurrently, all configuration and script files exist in each repository. See\nconfiguration file sync issue\n.\nHandbook lint\nThe custom handbook lint script (\nhandbook version\n) is used to verify a number of the guidelines we have, including:\nMedia files\nImage location for new images.\nImage size for images in the MR.\nVideo location for new videos.\nCodeowners\nFolder or file exists.\nA controlled document is listed in the\n[Controlled documents]\nsection, and vice versa.\nA required approval includes the specified groups, such as\ne-group\n.\nWarns if a listed user is not in the\nteam.yml\n.\nNote: If a user exists, but the job says they‚Äôre not a team member, check the relevant\ndata/team-member.yml\nfile to see if the GitLab username matches.\nHugo lint\nWe use\nHugo lint\nto check for the validity of internal links. It supports relative linking to the markdown file, and the production path.\nEach job also outputs the top 30 incorrect links to assist in fixing them.\nSee the ReadMe for more information about how Hugo lint works.\nmarkdownlint\nRefer to the\nmarkdown guide\nfor style guide information, and guidance on rules.\nWe use\nmarkdownlint-cli2\nin our pipelines with a slightly customized set of rules.\nBefore pushing any changes, you can run\nmarkdownlint-cli2\nand fix any suggested changes to avoid pipeline failures.\nTo run\nmarkdownlint-cli2\nusing Docker, run:\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\ndavidanson/markdownlint-cli2 content/**/*.md\nIf you have\nmarkdownlint-cli2\ninstalled locally\n, you can run the command in the relevant repository.\nThis method is recommended when editing the config file (look for the\nmarkdownlint\nfile), and testing the changes. To have markdownlint automatically fix some errors,\nadd the fix option:\nmarkdownlint-cli2 --fix\n\"content/**/*.md\"\nRules are configured to be close to the\nGitLab documentation markdownlint\n, without some of the stricter styling rules.\nThe relevant rules are also noted in the\nmarkdown guide\n.\nVale\nWe use\nVale\nto verify some of the rules in the\nHandbook Markdown Guide\n.\nVale errors will fail the pipeline and are included in the MR comment.\nWarnings are included in the job log, code quality, and MR diff.\nTo run Vale using Docker, run:\ndocker run --rm -v\n$(\npwd\n)\n:\n$(\npwd\n)\n-w\n$(\npwd\n)\njdkato/vale content\nIf you have vale installed locally, you can test the changes. To limit the results, add the\nminAlertLevel\noption, such as:\nvale --no-wrap --minAlertLevel error --glob\n=\n'{content,assets,layouts}/**/*.md'\n.\nRules are configured to be close to the\nGitLab documentation vale rules\n.\nWhen the\ngitlab_base\nrules are exactly the same, they are included in the\ngitlab_base\nfolder in the content sites repositories.\nWhen the rules differ, they are stored in the\nhandbook\nfolder.\nDocsy GitLab Theme Development\nDocsy\nis used as a base for the internal and public handbooks. Modifications\nand extensions have been added on top to ensure efficient handbook usage.\nAll Hugo partials and shortcodes should be added to this repository, instead\nof duplicating them locally into the handbook projects.\nThe\nDocsy GitLab theme\nis integrated into the public/internal handbook repositories using a Go module in\ngo.mod\n.\nLocal Development\nTo develop on the Docsy GitLab theme locally build the handbook (or internal-handbook) project with the updated local copy of the docsy-gitlab theme following the steps below:\nAdd the following line to the bottom of the\ngo.mod\nfile in the handbook project:\nreplace\ngitlab\n.\ncom\n/\ngitlab\n-\ncom\n/\ncontent\n-\nsites\n/\ndocsy\n-\ngitlab\n=>\n/\ndocsy\n-\ngitlab\nRun the Hugo server:\nhugo server\nLoad the site locally:\nopen http://localhost:1313/\nAny changes made to files in local\ndocsy-gitlab\nproject will be rendered in the local instance.\nTesting changes\nWhen making changes that may have a user impact (not content only changes):\nTest the changes\nlocally\nfirst by performing the upgrades to\ngitlab-docsy\n,\nhandbook\n, and\ninternal-handbook\nand running the builds locally. Manual testing locally will make it easy to spot any major issues.\nIf there are no concerns, create a MR in the Docsy project with the changes, and have a maintainer review. Ensure that only the relevant changes you‚Äôre testing are in the MR.\nNote: At the moment, there is no review app for the\ndocsy\nproject. When relevant, include local testing notes in the MR.\nWith the new version of the theme available, create new MRs in\nhandbook\nand\ninternal-handbook\nwith the changes and upgrade to the theme if needed. Use review apps for both MRs to test the dependency changes in a production-like environment.\nApply the changes to the internal handbook first, and ensure changes are okay.\nNext, apply the changes to the public handbook.\nIf there are any issues, revert the changes to the handbook projects.\nReleases\nChanges made to\ndocsy-gitlab\nwill be made available to the\nhandbook\nand\ninternal-handbook\nafter the version is bumped and deployed to each project. This includes all theme updates with partials, shortcodes, and any changes to\n/docs\n. Much of this process has been automated, but a few manual steps are still required. To release a\ndocsy-gitlab\nchange follow these steps:\nAfter the merge request is merged, a pipeline on the\nmain\nbrach will kick off. After the pipeline succeeds, the\nrelease\njob can be triggered manually. For example:\nhttps://gitlab.com/gitlab-com/content-sites/docsy-gitlab/-/pipelines/1304430830\nThe release job will do three things:\nCreate a release in the\ndocsy-gitlab\nproject. Example:\nhttps://gitlab.com/gitlab-com/content-sites/docsy-gitlab/-/releases/v0.3.25\nCreate a merge request to\nhandbook\n. Example:\nhttps://gitlab.com/gitlab-com/content-sites/handbook/-/merge_requests/6086\nCreate a merge request to\ninternal-handbook\n. Example:\nhttps://gitlab.com/gitlab-com/content-sites/internal-handbook/-/merge_requests/4771\nAssign a\nhandbook backend maintainer\nor codeowner to each MR for review.\nOnce the merge request to\nhandbook\nand\ninternal-handbook\nhave been merged, the theme changes will be deployed to the sites.\nFor more information on the release process, see the\nrelease script\n.\nDependencies\nUpdating dependencies\nNote: Before updating dependencies, review the\ngo.mod\nfile in the target\nproject for additional notes and requirements.\nAlways update dependencies individually to isolate potential bugs and regressions. Never pull\nlatest\nbut pin the dependencies to a specific released version.\nhugo mod get server.com/project-name@version\nGoogle Docsy\nhugo mod get github.com/google/docsy@v0.9.1\nDo not bump Docsy versions without testing them extensively in MR review apps.\nRedirects\nYou can add redirects to the\nlayouts/index.redirects\nfile in the relevant repository.\nRefer to the\nGitLab Pages redirect documentation\nfor how these are formatted.\nPlease add your redirect in chronological order with a removal date of:\n3 months for within a single handbook, from one relative path to another relative path,\n3-6 months when linking from one handbook to another (such as linking from\nhandbook.gitlab.com\nto\ninternal.gitlab.com\n), or\n3-12 months for external links, meaning not part of the\nhandbook.gitlab.com\nor\ninternal.gitlab.com\ndomains.\nCI/CD Pipelines\nHandbook & Internal Handbook\nThe CI/CD pipelines for the\nhandbook\nand\ninternal-handbook\nprojects are roughly the same, and should remain that way.\nbuild\nstage\nThe\nbuild\nstage performs a few linter and security jobs (\nhandbooklint\n,\nhugolint\n,\nmarkdownlint\n, and\nsecret_detection\n), and a\nbuild\njob which builds the whole site and saves it as CI artifacts.\ndeploy\nstage\nThe\ndeploy\nstage uses the artifacts generated in the\nbuild\nstage to deploy the production site for changes to the\nmain\nbranch or review apps which can be deployed for MRs.\nnotify\nstage\nThe\nnotify\nstage has two jobs that are triggered on specific events:\npost_comment_on_failure\nposts a comment to the MR when the\nmarkdownlint\nor\nhandbooklint\njobs fail.\nnotify_slack_on_build_failures\npost a message to the #handbook-escalation Slack channel when there is a build failure on the\nmain\nbranch. This type of failure would indicate a broken CI pipeline.\nmode\nThe pipelines can be triggered to run in\nmode which means they will run all the test and build jobs, but none of the deploy or notify jobs. A pipeline can be triggered in\nmode by setting the\nCI variable to\ntrue\n. This is used primarily by the downstream pipelines triggered from the\nwww-gitlab-com\nproject.\nTools or scripts that need to interact with the repositories to perform handbook tasks should use the\nCI variable. This is\ngroup level access token\ncalled\nDocsy GitLab Release\nwith a\ndeveloper\nrole and has\napi\nand\nwrite_repository\nscopes. This token will expire after a year and will need to be refreshed. Follow the steps below to refresh the token:\nCreate a new developer group level access token in <https://gitlab.com/groups/gitlab-com/content-sites/-/settings/access_tokens with api> and\nwrite_repository\nscopes. Give it the name\n(replace the\nportion with the current date).\nUpdate the value of GITLAB_TOKEN in\ndocsy-gitlab\n,\nhandbook\n, and\ninternal-handbook\nwith the new token value.\nCreate a new release of the Docsy GitLab Theme and ensure the pipeline works correctly.\nDelete the old token.\nSee above for more on\ngeneral management of access tokens\n.\nGitLab Pages Deployment\nThe deploy and review apps are configured in the\npages\njob in the\n.gitlab-ci.yml\nconfiguration file.\nReview app deploys can be run for merge requests by running the manual\npages\njob, or by adding the\n~\"deploy-review-app-always\"\nlabel to the MR.\nProduction deploys are only run from the\nmain\nbranch.\nConditional CI variables are used to configure the environment for review apps using\nGitLab Pages Multiple Deployments\n.\nvariables\n:\n'mr$CI_MERGE_REQUEST_IID'\n:\n'mr$CI_MERGE_REQUEST_IID'\n:\nThe\nroute map\nis configured in the\n.gitlab/route-map.yml\n.\nDocsy GitLab\nThe CI/CD pipeline for\ndocsy-gitlab\nis responsible for building, testing, and releasing the Docsy GitLab theme used by both\nhandbook\nand\ninternal-handbook\n.\ntest\nstage\nThe\ntest\nstage performs the\nmarkdownlint\n, and\nsecret_detection\njobs.\nbuild\nstage\nThe\nbuild\nstage performs runs the\nhugo\ncommand to ensure the theme builds successfully.\nrelease\nstage\nThe\nrelease\nstage performs one manual job to create a new release of the theme and merge requests to both\nhandbook\nand\ninternal-handbook\n. See the\nReleases\nsection for more details.\nwww-gitlab-com\nThe CI/CD pipeline for\nwww-gitlab-com\nis responsible for triggering downstream builds of both\nhandbook\nand\ninternal-handbook\nin\nmode. This ensures that any changes to dependent data files in\nwww-gitlab-com\nwill build successfully for both\nhandbook\nand\ninternal-handbook\n.\nDanger review and reviewer roulette\nRight now the handbook projects doesn‚Äôt use the\nReviewer Roulette\nfeature of the\ndanger-review\nCI/CD component\n. See\nissue\n.\nWe use the\narchitecture\nplugin to provide guidance on how to review MRs that contain changes to\narchitecture evolution design documents\n.\nIn order to make Danger post message to MRs we need to setup a project token (\napi\nscope with\nDeveloper\nrole) and\na CI/CD variable called\nto contain this project token (\nMasked\nbut not\nProtected\n).\nSee above for more on\ngeneral management of access tokens\n.\nFor more details, follow the\nDanger documentation\nand inspect the\nMR adding the reviewer roulette to the public handbook\n.\nCode quality report MR commenter\nThe CI/CD linting jobs generate code quality report artifacts for MR widget integration. If there are errors detected,\na custom CI/CD job posts a Markdown table summary as MR comment, linking to helpful handbook editing resources.\nThe\nparse-codequality-report.sh\nscript in the\nhandbook\nand\ninternal-handbook\ngenerates the code quality report posted in the MR. Changes to these reports need to be applied to both projects.\nThe code quality report relies on the\nto perform the reporting actions on any MRs.\nCI/CD maintenance tasks\nSee\nmaintenance tasks\n.\nTriage bot\nThe\ntriage-bot\nproject is meant to help triage issues in the handbook, internal-handbook, and docsy-theme projects.\nIt has two main goals:\nEnsure issues are triaged.\nClose stale issues and merge requests.\nPlease see the\n.triage-policies.yml\nfor rules.\nYou can find more about how to create policies in the\nGitLab triage gem project readme\n.\nThe triage bot is scheduled to run 3 times a week. See the project‚Äôs pipeline schedule for details.\nTriage uses the\naccess token to perform tasks. This must have the Developer role to take actions on merge requests.\nSee above for more on\ngeneral management of access tokens\n.\nHandbook Maintenance\nDocumentation on how to carry out maintenance tasks.\nRunning the Handbook in Docker\nInstructions for running the Handbook projects in Docker\nRunning the Handbook Locally\nInstructions for running the Handbook projects locally\nView page source\n-\nplease\ncontribute\n.", "num_words": 3086}
{"doc_id": "7e97630cf2a4989d", "url": "https://handbook.gitlab.com/handbook/alliances", "title": "GitLab Alliances Handbook | The GitLab Handbook", "text": "The Handbook\nGitLab Alliances Handbook\nWe invite organizations interested in becoming a GitLab Partner to\n.\nAlliance Mission\n‚ÄúTo go fast, go alone. To go far, go together.‚Äù\n- Proverb\nAt GitLab, we collaborate with well-respected, industry-leading\ncloud, platform and technology providers\nacross all major industries to deliver the best curated modern devops platform.¬† Our partners are a critical element of GitLab‚Äôs mission:\nto enable our customers with modern software-driven experiences, and to ensure ‚ÄúEveryone Can Contribute‚Äù through a robust and thriving partner ecosystem that cultivates innovation and stimulates transformation.\nTogether, we can help enterprises lead the digital transformation necessary to compete effectively in the market today.\nThe commitment to helping customers and partners succeed - how we contribute our time, technology and know-how to improve the communities where we work and live and grow our business - is a journey that is transparent, ethical and honorable.¬† We demand high performance and high standards from ourselves and our partners.\nWe look forward to working with you - to build and deliver the solutions that delight customers.\nGitLab Team Members: Please visit the internal*\nAlliance Handbook Page\nfor additional information.\nAlliance Partner Program\nWe are firm believers that partnership is the foundation from which collaboration and innovation is built upon. As a GitLab Alliance Partner, you‚Äôll have access to the resources, tools, and support you need to accelerate business growth providing greater customer value through solution offerings that are integrated and interoperable with GitLab.\nWe recognize that not all partners have the same needs or goals, and as such, our program is designed with three Alliance Partner types in mind.\nCloud Partners\nPlatform Partners\nTechnology Partners\nPartners that provide public cloud computing services and software marketplaces where customers can procure and deploy GitLab\nPartners that provide modern cloud / cloud-native application platforms which increase the modularity and extensibility of GitLab across enterprises and architectures\nIndependent Software Vendors (ISV) Partners with complementary technologies that seamlessly integrate / interoperate with GitLab for more complete customer solutions\nPillars for Successful Partnerships\nMutually beneficial value exchange drives mutual partner success. We believe these pillars ensure a more sustainable future.\nExposure\n-¬†Partnerships that generate exposure to new markets, segments, and users.\nProduct Knowledge\n-¬†Partnerships that have product familiarity provide greater advocacy.\nAdoption\n-¬†Partnerships, both upstream and downstream, that increase feature adoption and product/platform utilization.\nRevenue\n- Partnerships that have a material effect on revenue growth.\nResults\n-¬†Partnerships that align on objectives and outcomes.\nCollaboration\n-¬†Partnerships that are committed to building reciprocal relationships between organizations and teams.\nEngagement Models\nThere are a variety of ways to partner together to develop solutions. Partner type, solution and/or services offering, and route to market are all considerations when determining the best option, resale or co-sell.¬† Below are a few examples of how GitLab works with Alliance Partners to deliver consumable customer solutions.\nMarketplace\n(resale)\nSolution listings sold through partner software marketplaces and other digital storefronts\nOEM/Embedded\n(resale)\nIntegrated or bundled solution offerings sold through direct and indirect channels\n(co-sell)\nCollaborative selling motions that stimulate sales of our respective products, independently\nProgram Benefits\nGitLab Alliance Partners are a key part of GitLab‚Äôs commitment to the DevOps community. Alliance Partnerships help customers get more value by uniting the capabilities of our products and technologies to provide end-to-end customer solutions. The GitLab Alliance Partner Program provides partners with the following program benefits:\nBrand Recognition\nPartner logo displayed on GitLab Alliance Partner Program webpage. Partners benefit from the association and increased exposure to the rapidly DevOps community\nGitLab brand use. Leverage for marketing purposes on websites, social media channels, and marketing and sales collateral\nSolution Validation\nResources to enable our partners to develop partner solutions that integrate/interoperate with GitLab. GitLab validated solutions help build confidence and trust with customers and channel partners by providing assurance of solution readiness.\nSales & Marketing\nSales awareness and engagement. Promoting partners and solutions to stimulate sales\nGo To Market assets and collateral. Equipping partners with resources designed to market and sell our joint solutions to prospects and customers.\nAdditional Resources\nAlliance Partner Onboarding\nIf you are interested in becoming a GitLab Alliance Partner, you can learn more on our\nAlliance Partner Onboarding\npage.\nLicense Requests\nAlliance Partners may be eligible for NFR (not for resale) licenses to develop and test integrations with GitLab. You can learn more about the NFR program\nhere\n.\nAcquisitions\nIf you are a Partner interested in inquiring about a potential acquisition of your company please visit our\nacquisition handbook\n.\nGitLab Integration Instructions\nLearn about integrating with GitLab, as well as partnership, marketing, and licensing opportunities.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 787}
{"doc_id": "3d3082a769a1dd1c", "url": "https://handbook.gitlab.com/handbook/marketing/blog", "title": "Blog Handbook | The GitLab Handbook", "text": "The Handbook\nMarketing\nBlog Handbook\nEverything you need to know about suggesting and publishing a post on the GitLab Blog.\nWelcome to the GitLab Blog handbook! The\nGitLab Blog\nis managed by the Content Marketing team. The managing editor of the blog is Sandra Gittlen (@sgittlen).\nWhat is a blog post?\nAt GitLab, blog posts largely focus on sharing helpful information with the audience (\nDevSecOps professionals\n). When you suggest or write a blog post, always consider what it offers the reader. If the post is more internal-focused or a personal essay of sorts, it is likely not a fit for the blog (but could go on your personal LinkedIn page).\nBlogs fall into the following categories:\nTechnical tutorials/how-tos\nPoint of view/thought leadership\nIntroduction to features and capabilities\nOpen source community\nCustomer case studies/interviews\nCompany announcement (done in partnership with Executive comms team)\nFeature/change/etc. announcement\nGuest blog to highlight partnerships/alliances\nWho can publish content to the GitLab Blog?\nEveryone can contribute at GitLab\n. For the blog, this means we welcome your blog suggestions, ideas, and drafts. However, the\nmain blog\nis one of the many official voices of GitLab ‚Äì meaning content that is published there must be carefully vetted to ensure we are accurately representing GitLab ‚Äì both the company and the product. The Blog Managing Editor and the Director of Global Content Marketing are the\ndirectly responsible individuals (DRIs) for the official GitLab blog\nand are tasked with this responsibility.\nIf you have questions about the GitLab Blog, please reach out to\nsgittlen@gitlab.com\n.\nHow to suggest a blog idea - NEW PROCESS\nPlease create an issue using the\nblog submission template\n.\nAnswer all the questions on the template. They help us provide feedback on your idea.\nSubmit your idea at least two weeks before your targeted publication date.\nFor corporate/comms requests or blogs on a tight turnaround, please submit an issue and reach out to @sgittlen directly.\nThe blog editor will review the pitch and either a) greenlight the post, b) offer suggestions for improvements, or c) explain why the idea might not be a fit for the blog and offer other ideas for getting the message out.\n**Note: You can also notify the Blog team of a typo or request a change via the\nblog submission template\n.\nExternal contributions\nNote:\nGitLab does not accept unsolicited blog submissions. If you are a GitLab partner and would like to pitch a blog post idea for consideration, please\nemail sgittlen@gitlab.com\n. If you are a GitLab community member and would like to pitch a blog post idea for consideration, please\nemail contributors@gitlab.com\n. Please DO NOT SEND drafts of your blogs with your pitch.\nPitch ideas must be relevant to the GitLab Blog and our readers and include the following information:\nWhat will your blog be about? Please be as specific as possible.\nWhich of the following best describes your blog? (Please check at least one box.)\ntutorial/how-to on how best to use a feature/capability\nbest practices for how to use the GitLab platform\nthe open source community and GitLab\npartner/alliance integration\nother - please explain\nAll blog pitch ideas and submissions will be vetted and reviewed by GitLab team members.\nBlog editors, please add the following two sentences at the beginning of contributed articles:\nEditor‚Äôs note: From time to time, we invite members of the community to contribute to the GitLab Blog. Thanks to [entity name] for co-creating with us.\nExternal contributions are subject to the\nExternal Blog Submissions Terms\n. Please read this document and agree to terms before submitting material to GitLab.\nHow to submit a blog draft once your idea is approved\nOnce a blog pitch is approved,\nthe author will use one of the following options to submit their draft:\nSubmit via a merge request in GitLab. To do this,\nplease follow these steps to do so from the repo\nor\nfor the IDE\n. Please follow them CAREFULLY! Reach out to @sgittlen with any questions.\nSubmit via Decap, our basic content management system,\nusing these steps\n. Please follow them CAREFULLY! Reach out to @sgittlen with any questions.\nSubmit via Google Docs using the\nBlog Submission template\n(Google Doc) to write the blog, ensuring the Google Doc is linked in the issue.\nAll fields in the template will have to be completed for the blog team to accept the submission.\nThe author will tag @sgittlen in the issue, put the doc link in a comment, and share the Google Doc once it is ready to be edited (after all necessary approvals and reviews have been completed).\nNote:\nAll images must be included inline in the Google Doc.\nNote:\nAll blog submissions now require a\ncall to action\nor CTA and you will be asked to provide one in the blog draft template. A CTA is what you want the reader to do next after reading your blog. Do you want them to go to another page and learn more, sign up for a trial, register for a webinar, view a demo, etc.? We will be able to track the CTA as part of our overall blog metrics.\nWhatever way you choose to submit your blog, please ensure that @sgittlen is tagged.\nBLOGS CANNOT BE PUBLISHED WITHOUT REVIEW/APPROVAL FROM THE BLOG TEAM.\nGuide to the frontmatter in the MR\nThe MR will include the following frontmatter. Please see the comments after each section\nseo:\ntitle: the blog post title\ndescription: the blog post description\n<!-- Blog team will fill this area in -->\nconfig:\nslug: blog-post-slug\nfeatured: false\ntemplate: BlogPost\n<!-- blog team will fill this in -->\ncontent:\ntitle: the blog post title\n<!-- ideal length - 55-60 characters -->\ndescription: the blog post description\n<!-- ideal length - no more than 155 characters -->\nauthors:\n- Blog post author\n<!-- Format: Sandra Gittlen (if this is your first time contributing, leave blank, and if there are multiple authors, add a comma no space between)-->\nheroImage: images/blog/hero-images/logoforblogpost.jpg\n<!-- blog team will fill this in -->\ndate: '2021-03-31'\ncategory: engineering\n<!-- blog team will fill this in -->\ntags:\n- community\n<!-- blog team will fill this in -->\nadd the blog post body text in markdown\nThe blog edit process\nThe blog team will communicate initial edits/questions for the author using the issue and Google Doc. The blog team will then put the blog into the CMS and, if necessary, share a preview link with the author/DRI. Note: The blog will be published from Contentful.\nThe blog team will share the blog‚Äôs URL with the author once it is published.\nPublishing of blog posts occurs according to an editorial calendar. However, that is subject to change based on blogs that are urgent. The blog team will update authors as to their expected publish dates.\nLegal review process\nSome blog posts must be reviewed by legal, in accordance with our\nMaterials Legal Review Process/SAFE program\n. Authors are responsible for reviewing SAFE guidelines and getting Legal approval before sharing the Google Doc with the blog team. This process can take time, so please plan target publication dates accordingly.\nGitLab has a bias for action, and the Blog team is no different. However, the GitLab Blog is a public-facing asset and represents the company. If the Blog team has concerns or questions about the information contained in the blog post, the Blog team has the authority to hold a blog post until Legal, Corporate Commmunications, Partner Marketing, the CMO, etc., can review the blog post to mitigate any potential risk for the company.\nLearn more about the\nSAFE Guidelines by reading the handbook page\nand following the\nMaterials Legal Review Process\n.\nHow to suggest a change to a published blog\nIf you are internal to GitLab and want to suggest a change to a published GitLab blog, please post the change you need in detail with the URl in the\n#content\nIf you are external to GitLab, please email Sandra Gittlen at\nsgittlen@gitlab.com\nCommunication with Blog team\nChat channels:\nUse\n#content\nfor questions (also tag @sgittlen)\nUse\n#content-updates\nto see updates on recently published articles\nSlack @sgittlen directly\nAdd newsletter content requests to\nthis issue\nOther related pages\nEditorial style guide\nBrand guidelines\nMonthly release post\nConsiderations when drafting a blog\nDiversity, Inclusion, and Belonging (DIB) checklist for blog writers\nIt is important that our blog content represents our company values of diversity, inclusion, and belonging. Not all of these points will be relevant to your blog post, but they are important values and practices to be mindful of throughout the writing process. The blog editorial team tries to check for these things, but it is better if all content is created with these values and practices in mind. Tag us or a member of the\nDIB team\nif you have questions!\nInclusive writing\nWrite short and concise sentences. Clear writing with short sentences makes it easier for the reader to follow along.\nLimit your use of jargon, and if you must use a jargon-y term, define it on the first instance.\nGitLab is a global team with a global community, so you want to write for a global audience. This means limiting your use of regional metaphors and not writing in a manner that is United States-centric.\nDoes the post use\ninclusive language\n?\nIs every individual in the blog post quoted using their\npreferred pronoun\n? Tip: If you don‚Äôt know someone‚Äôs preferred pronoun, just ask them. They should also be included on the\nteam page profile\nand Slack profile.\nMore DIB writing tips\nIs your blog post biased? We all have unconscious biases. Check the\nlist of unconscious biases in our DIB handbook page\nand practice strategies for\nrecognizing and managing yours\n.\nIf you still have questions, don‚Äôt hesitate to tag the editorial team lead @sgittlen, leads of the appropriate\nteam member resource group (TMRG)\nin your blog issue, or email\ndiversityinclusionandbelonging@gitlab.com\nwith your questions.\nBlog categories and tags\nCategories\nUse only\none\nof the following categories per post.\nDo not\nchange the capitalization, spelling, or anything else,\notherwise you‚Äôll create another category, which is something we don‚Äôt want to do accidentally.\nIf you‚Äôre not sure which category your post belongs in, just put a placeholder in your MR and leave a comment for your reviewer noting that.\nagile planning\n- posts about AgiLe planning\nai-ml\n‚Äì posts that focus directly on AI/ML in the platform or in the industry as a whole\ncustomer stories\n- posts about how our customers are using GitLab DevSecOps platform\nbulletin board\n- where shorter blogs/announcements go\nDevSecOps\n- posts more generally about DevSecOps\nengineering\n‚Äì technical, actionable content. Anything covering how to do something, use something, or solve a problem should fall under this category\nopen source\n‚Äì stories from or about our community, users, or the wider open source community\nproduct\n- details about features, roadmaps, and strategy\nnews\n‚Äì company or product announcements (including policy changes, operational announcements, and breaking changes), news, or events\nsecurity\n‚Äì security-related posts\nreleases\n- release posts, security and patch releases. Posts in the\nreleases\ncategory need to be in the\nsites/uncategorized/source/releases/posts\ndirectory, not\nsites/uncategorized/source/blog/blog-posts\n. Please see the\nRelease Post handbook\nfor more.\nTags\nThese are included to help readers find similar posts if they are interested in a particular subject. Tags appear at the top of each blog post, and clicking on a tag takes you to the specific\n/blog/tags/specific-tag\nwhere you can view all posts with the specified tag.\nYou can include as many tags as you like, separated by commas. Please only include tags from the following list, and note that they are case sensitive.\nagile\nautomotive\nbug bounty\ncareers\ncloud native\ncode review\ncollaboration\ncommunity\ncontributors\ncustomers\ndemo\ndesign\ndeveloper survey\nDevSecOps\nDevSecOps platform\nembedded development\neducation (articles about the education sector)\nevents\nfeatures\nfinancial services\nfrontend\ngit\nGitOps\ngoogle\ngrowth\ninside GitLab\nintegrations\nkubernetes\nnews\nopen source\npartners\npatch releases\nperformance\nproduct\nproduction\npublic sector\nreleases\nremote work\nresearch\nsecurity\nsecurity releases\nsecurity research\nsolutions architecture\nstartups\ntesting\ntutorial\nuser stories\nwebcast\nworkflow\nzero trust\nMedia embeds\nInstructions for including video\n.\nAdding code blocks\nInstructions for adding code blocks\n.\nMermaid charts\nHow to embed mermaid charts into MR\n. Please read as there are nuances that might prevent your chart from rendering properly.\nPreparing images\nIf creating an original cover image, the dimensions should be 1800px x 945px for optimal quality on all displays.\nAll images should aim to be less than 1MB. JPEGs tend to be smaller than PNGs so use JPEGs when possible.\nTo resize in Preview go to\nTools\n,\nAdjust size\nand adjust the entry in the\nResolution\nfield. Preview will estimate what the resulting image size will be before you click\nto confirm.\nKeep all the images the same width.\nScreenshots\nFor technical/tutorial posts, please illustrate your examples with\ncode blocks\nor screenshots. Be consistent with your examples. E.g., if you are using a generic URL\nto exemplify your steps\ndomain.com\n, be consistent and keep it\ndomain.com\n, throughout the post.\nStatic images should be used to illustrate concepts, provide diagrams, elements of the UI or orient the reader.\nImages should not be used to render commands or configuration which would prevent someone being able to copy and paste.\nAnimated GIFs can be used sparingly where you need to show a process or some event happening over the course of time or several actions, though they should not replace text descriptions or instructions.\nUse screenshots to identify and localize specific parts of the screen. There are great tools for doing so. For example, Nimbus Screenshot (browser extension), Mac screenshot, Snipping Tool for Windows, and Screenshot Tool for Ubuntu.\nImportant security point:\nDo not expose your personal details by using your real tokens or security credentials. Use placeholders such as\n[project's CI token]\nstub instead. Or blur them if displayed on screenshots.\nEmbedding tweets or Instagram posts\nPlease see the\nMarkdown guide for instructions for embedding posts from social media\n.\nCreating GIFs\nAnimated GIFs are very useful to illustrate short dynamic processes, which might be easier to understand with this kind of resource.\nThere are a few ways to create animated GIFs, one of them is using [Giphy Capture], a light-weight app for Mac.\nAvoid GIFs with a huge file size, they will be difficult to load for users with bad internet connection. In those cases, you can either cut the GIFs in smaller pieces, or record a video, or use a sequential image.\nCreating\nAuthor\nentries in the CMS\nHere‚Äôs a set of recommendations\nwhen creating\nan\nAuthor\nentry in the CMS (Decap).\nName\nfield\nThis is a required field. It is also a unique field.\nAuthor‚Äôs name should be a combination of first and last name only, including composed names. Please avoid adding a job description (use the\nRole\nfield for this task) or alpha-numeric combinations into this field.\nNo double authors (eg.\n/authors/<author1>-<author2>\n). We can add multiple single authors to blog posts. We should create individual authors and then add them all to other content types as a one-to-many relationship.\nSame as above, no multiple authors for a single blog post (eg.\n/authors/<author1>-<author2>-<author3>-and-<author4>\n).\nRole\nfield\nCurrent working position or job description.\nBio\nfield\nBiography of the Author.\nGitLab handle\nfield\nIt corresponds to Author‚Äôs GitLab username in lowercase format. This field has to be unique.\nSocial media handles\nfields\nOptional fields for social media handles.\nLocalizing blog posts in the CMS\nWe can publish blog posts in languages other than English. We currently support the following languages:\nLanguage\nURL structure\nFrench\n/fr-fr/blog/YEAR/MONTH/DAY/Title/\nGerman\n/de-de/blog/YEAR/MONTH/DAY/Title/\nJapanese\n/ja-jp/blog/YEAR/MONTH/DAY/Title/\nPlease contact the GitLab localization team for more information.\nHow to kick off translations\nStarting the process of getting a blog post translated is easy. Follow these steps:\nCreate a translation request issue in the Localization project. Pro tip - add the URL for the blog post and a direct link to the Contentful entry. It will be super helpful to you as you track the project.\nArgo will export the English blog post as JSON and import the translated JSON back into Contentful. Then you‚Äôll be pinged in the issue when it‚Äôs ready for review.\nHop into the entry for the blog post and review the translated content.\nCoordinate with @sgittlen on publishing the translated post.\nOnce published, always verify that it‚Äôs working as expected on about.gitlab.com/blog/.\nCelebrate your translated blog post by posting it in Slack.\nHere‚Äôs a video walkthrough of the full process from creating the translation request to publishing on production.\nVideo recording comming soon that demonstrates the following\nCreate issue\nArgo roundtrip\nTranslation show up in Contentful\nReview the translations\nLive previews/changing languages\nPublish\nGotchas When localizing an EN blog post\nThings to be careful about when localizing an EN blog post.\nDon‚Äôt change the slug!\nTags to keep organized\nIf a post in process of being translating, put the ‚Äútranslation-in-progress‚Äù label on it. This enables the team to easily find all blog posts in Contentful that are in progress of being translated and reviewed.\nRemove and apply local label to languages the post is translated into.\nTag\nDefinition\nHow to use\ntranslation-in-progress\nNotes when a blog post is currently be translated and reviewed\nApply when translation request is opened. Remove when post is published\nlanguage_de-DE\nMarks entry that is in German\nApply to blog post that is translated into German\nlanguage_fr-FR\nMarks entry that is in French\nApply to blog post that is translated into French\nlanguage_ja-JP\nMarks entry that is in Japanese\nApply to blog post that is translated into Japanese\nBlog dashboard\nHow to use the GitLab blog performance dashboard.\nGit Guide for Blog Contributors\nA guide for working with Git, terminal, and the www-gitlab-com repository\nGitLab Release Posts\nGuidelines to create and update release posts\nLast modified June 30, 2025:\nadded in a section on the frontmatter (\n8a8788ca\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2999}
{"doc_id": "edc58472cb6a1822", "url": "https://handbook.gitlab.com/handbook/finance/spending-company-money", "title": "Spending Company Money | The GitLab Handbook", "text": "The Handbook\nFinance\nSpending Company Money\nAll team members and contractors must protect our Company assets, such as equipment, supplies, cash, and information. Treat Company assets with the same care you would if they were your own. No team member or contractor may commit theft, fraud or embezzlement, or misuse Company property.\nGuidelines\nAs a public company, GitLab has an obligation to act in the best interests of the corporation and its shareholders. This obligation is shared by all team members and is the basis of our global travel and expense policy as a public company; team members must be thoughtful in spending the Company‚Äôs money.\nSpending Company money includes travel and expenses.\nYou may privately use GitLab property, a MacBook for example, to check your private e-mails or watch a movie as long as it does not violate the law, harm GitLab, or interfere with Intellectual Property. More details can be found in the\nInternal Acceptable Use Policy\n.\nFile your expense report in a timely manner, as expense claims over 90 days from purchase date will not be reimbursed unless approved by your Manager.  The sooner it is submitted, the sooner you will get reimbursement.\nIf team members knowingly submit expenses for reimbursement for personal purchases that are not covered in the expense policy, this is a violation of our\nCode of Business Conduct & Ethics\n.\nPolicy Links and Resources\nThis table captures all of the links for different policies that are documented around using Company money. This includes information of when to use our expense tool Navan, when to use a virtual credit card and when to get a PO from Zip.\nPolicy Name\nOwner\nDescription\nGlobal Travel and Expense Policy\nPolicy and procedures by which reimbursable expenses are reimbursed\nProcurement Process (PO)\nVP Finance\nProcess to engage the procurement team\nSpending Company Money\nOur policy on spending Company money; Links to resources\nGitLab Internal Acceptable Use Policy\nRequirements related to the use of GitLab computing resources and data assets by GitLab team members\nGrowth and Development Benefit\nAccess external resources to develop their career\nNavan Physical Card Policy\nGuidelines for acceptable use of physical corporate cards\nGitLab Related Party Transactions\nRelated Party Transactions Policy\nWays to spend company money\nIndividual expenses that meet the expense policy on your personal credit card: Please see our\nGlobal Travel and Expense Policy\nto see what we will reimburse and how to get reimbursement.\nIndividual expenses using a virtual card: Please see our\nGlobal Travel and Expense Policy\n.\nIndividual expenses using a Navan physical card. Please see our\nNavan Physical Card Policy\n.\nCompany expenses using a Coupa virtual card:\nCoupa Virtual Card\n.\nCompany expenses using a purchase order: Please see our\nProcurement Process (PO)\n.\nLast modified January 30, 2025:\nReplace ref links with regular links (\nc4c9b3d1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 480}
{"doc_id": "314cb8f17db74cfc", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/production-engineering/ops/roadmaps/fy26/disaster-recovery", "title": "FY26 - Disaster Recovery | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nProduction Engineering\nProduction Engineering Ops Team\nProduction Engineering Ops Team Roadmaps\nFY26 Production Engineering Ops Team Roadmaps\nFY26 - Disaster Recovery\nReferences\nRTO High-Level Overview\nBackground\nDisaster Recovery covers the tools and processes needed to restore GitLab.com to a working state with all customer data in a disaster event. It is a controlled activity that is reported on for compliance purposes. We must have confidence in our ability to recover from a disaster event, and we must be able to communicate that confidence to our customers through consistent, measurable results.\nNorth Star\nDisaster Recovery is hands-off and built-in to our system. It is tested in an automated way to validate our ability to recover from disaster events. We use automated testing results to demonstrate our recovery capabilities to our customers. This is consistent for both .com and Dedicated.\nGoals for FY26\nPush gamedays from process reaction to verification\nRight now, gamedays for disaster recovery have mostly been focused on areas in GitLab.com that require manual intervention for zonal degradations. This is important, but there are areas in GitLab.com and the new Cells infrastructure that should be resilient by design, and we should test and verify that design.\nThis also includes providing feedback for service owners about how improvements could help move from reactive response to a more proactive service implementation.\nPush gamedays into production\nGamedays have been targeted on our staging environment (GSTG) to avoid disruptions and to gain confidence. Verification type gamedays that test resilience should be conducted in production to better inform our timing data and to verify that production is ready to handle degradations.\nConstant gameday improvement\nContinue to execute gamedays regularly. Collect feedback to improve services tested, and the gamedays themselves. Improve automation to help minimize toil and look for opportunities to use automation to perform DR verification. Use gameday measurement to inform RTP/RPO values. Leverage instance management tooling to help disaster recovery related responses be performed quicker and with confidence.\nDocument and communicate disaster recovery ownership\nUpdate our Ops handbook and processes to clearly outline what the team‚Äôs goals are in testing and verifying disaster recovery capabilities. This should include how we interface with other teams and provide feedback on improving disaster recovery response and capability.\nExploring DR in Cells\nFigure out how to enable Geo for GCP dedicated, and make that a default configuration for new cell creation. Re-configure the existing cell to make sure that Geo is enabled. Configure Backups/snapshots for each Cell‚Äôs GitLab instance so we can perform data recovery.\nLast modified June 13, 2025:\nMoving Ops team pages (\n1cc4124d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 442}
{"doc_id": "4b5db9fe0b5afc90", "url": "https://handbook.gitlab.com/handbook/engineering/development/sec/secure/secret-detection/runbooks/secret-push-protection-troubleshooting", "title": "Secret push protection troubleshooting | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nSec Section\nApplication Security Testing Sub-Department\nSecret Detection Group\nSecret Detection Runbooks\nSecret push protection troubleshooting\nWhen to use this runbook?\nUse this runbook for troubleshooting Production issues related to the\nsecret push protection\nfeature.\nRelevant settings\nSetting\nType\nLevel\nVisibility\npre_receive_secret_detection_beta_release\nFeature Flag\nInstance\nNot visible, has to be toggled via\nChatOps\n.\npre_receive_secret_detection_enabled\nDatabase Setting\nInstance\nOnly in a\nDedicated instance\n, or with\npre_receive_secret_detection_beta_release\nenabled\nand only when the feature is\nlicensed (in Ultimate)\n.\npre_receive_secret_detection_push_check\nFeature Flag\nProject\nNot visible, has to be toggled via\nChatOps\n.\npre_receive_secret_detection_enabled\nDatabase Setting\nProject\nOnly in a\nDedicated instance\n, or with\npre_receive_secret_detection_enabled\nenabled\nand only when the feature is\nlicensed (in Ultimate)\n.\nMonitoring\nSecret push protection monitoring\nis the preferred dashboard for monitoring the feature to help identify and mitigate any reliability issues or performance regressions that may occur when it is enabled on GitLab.com.\nGitaly Latency Dashboard for the PreReceiveHook method\nmay be used as a supplement.\nEnabling/Disabling\nEnabling/Disabling for GitLab.com\nTo\ndisable the feature across all of GitLab.com\n, there are two options.\nThe first option, and most likely quickest, is to disable the feature via ChatOps. Use the following command:\n/chatops run feature set pre_receive_secret_detection_push_check false\nThe second option is to disable pre-receive\nsecret detection,\nas described in the docs\n. This will require a change access request (\nproduction example\n), as it requires administrator access.\nEither of these options will disable the feature for all GitLab.com users and should be\nused in cases where the feature is causing significant performance degradation.\nOther properties that can be enabled/disabled\nEnabling/Disabling for a project\nThis can only be changed by a Maintainer, or above, for the project and is the preferred method for disabling a project.\nWith the\npre_receive_secret_detection_push_check\nfeature flag on for a\ngiven project, secret push protection can be toggled for the\nproject through the security configuration page for the project.\nInstructions can be found in this\nin-progress documentation MR\n,\nbut will eventually be added to the docs.\nWhen both the feature flag and the setting are on, git pushes to the\nproject should be stopped when they contain a secret. As a test,\nglpat-12345678901234567890\nshould be prevented when pushing\n(from the terminal, the Web IDE, etc.)\nThe\npre_receive_secret_detection_push_check\nfeature flag\nThe\npre_receive_secret_detection_push_check\nfeature flag will be used\nto enable/disable secret push protection for a given project.\nIt will also be used in conjunction with the secret push\nprotection setting in a project‚Äôs Security Configuration. Both the\nfeature flag and the setting will need to be on for  secret push\nprotection to work for a given project.\nCheck status:\n/chatops run feature get pre_receive_secret_detection_push_check\nEnable for a project:\n/chatops run feature set --project=the-namespace/of-the-project pre_receive_secret_detection_push_check true\nDisable for a project:\n/chatops run feature set --project=the-namespace/of-the-project pre_receive_secret_detection_push_check false\nThe\npre_receive_secret_detection_beta_release\nflag\nThe\npre_receive_secret_detection_beta_release\nflag will be used to\nenable the\nSecret Detection section in the Security and Compliance Admin section\n(\nhttps://gitlab.com/admin\n-> Settings -> Security and Compliance)\n, but\nturning the flag on does not turn on pre-receive secret\ndetection\n. Conversely, turning the flag off does not turn\nthe feature off.\nCheck the status of the\npre_receive_secret_detection_beta_release\nfeature flag:\n/chatops run feature get pre_receive_secret_detection_beta_release\nEnable the feature flag:\n/chatops run feature set pre_receive_secret_detection_beta_release true\nDisable the feature flag:\n/chatops run feature set pre_receive_secret_detection_beta_release false\nResolving and skipping blocked pushes\nResolving a blocked push\nand\nSkipping secret detection\nare both documented in the in-progress documentation MR.\nViewing logs\nSecret Detection audit log events are documented\nhere\n.\nFor GitLab.com, all logged events can be viewed\nhere\n, and logs of just blocked push events due to detected secrets can be viewed\nhere\n.\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 635}
{"doc_id": "69f3837b794f2b4f", "url": "https://handbook.gitlab.com/handbook/support/support-pods/ci-cd", "title": "CI/CD Support Pod | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Pods\nCI/CD Support Pod\nDiscuss CI/CD related tickets/issues, learn about CI/CD features and improve related documentation.\nPurpose\nDiscuss CI/CD related tickets/issues, learn about CI/CD features and improve related documentation.\nScope\nTopics in this pod will ideally align with these product groups:\nPipeline Authoring\nPipeline Execution\nPipeline Security\nIn the context of ‚ÄúCI/CD‚Äù it can be hard to pinpoint where exactly a problem fits in. This list is not meant to discourage anyone from seeking help in the pod ‚Äì when in doubt, ask away! The worst that could happen is that someone suggest a better place for the question.\nCurrent objectives\nKeep regular meetings going\nStay updated on all things CI/CD\nHelp each other with CI/CD tickets!\nSupport Pod members\nLead:\nManuel Grabowski\n(\n@manuelgrabowski\n) (Interested in co-leading? Let me know!)\nCleveland Bledsoe Jr\n(\n@cleveland\n)\nRyan Kelly\n(\n@rkelly\n)\nElif Munn\n(\n@e_munn\n)\nEdward Hilgendorf IV\n(\n@edwardhilgendorf\n)\nDuncan Harris\n(\n@duncan_harris\n)\nAlejandro Guerrero de Alba\n(\n@alejguer\n)\nSegolene Bouly\n(\n@sbouly\n)\nCharl Marais\n(\n@cmarais\n)\nSarah Crowle\n(\n@sacrowle\n)\nHow to get involved\nTalk with your manager.\nAdd CI to your knowledge areas in the\nSupport Team data\n. If it already exists, adjust your level accordingly.\nLet your teammates and groupmates know about your new focus area.\nJoin the\n#spt_pod_cicd\nSlack channel.\nAdd yourself to this page.\nAttend CI/CD pairing sessions if we can ever figure out how to work a calendar. See\nRegular meetings\nand check the GitLab Support calendar for up to date meeting times\nRegular meetings\nCI/CD Pod pairing session:\nMondays, 11:00 CET (09:00 / 10:00 UTC depending on DST, check the\nGitLab Support\ncalendar)\nThursdays, 15:30 CET (13:30 / 14:30 UTC depending on DST, check the\nGitLab Support\ncalendar)\nCollaboration channels\nSlack channel:\n#spt_pod_cicd\nSet up a CI/CD View in Zendesk\nIt‚Äôs recommended to set up a personal view for all CI/CD related tickets.\nGo to\nManage Views\nClick Add View\nSet up a view with the following parameters:\nTitle\n: CI/CD Pod\nConditions\n:\nTickets must meet all of these conditions to appear in the view:\nStatus is not Closed\nStatus is not Solved\nStatus is not pending\nTickets can meet any of these conditions to appear in the view:\nTags contains at least one of the following:\nAdd all\nsupport_cicd_*\ntags\nAdd\nsupport_category_cicd\nColumns\n(Recommended but you can choose what you‚Äôd like):\nNext SLA breach\nSubject\nRequester\nRequest date\nAssignee\nPriority\nOrganization\nOrder by\n:\nNext SLA breach - Ascending\nLast modified November 12, 2024:\nMove Monday CI/CD Pod pairing (\nf68724aa\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 445}
{"doc_id": "a2f6486b9d1d9926", "url": "https://handbook.gitlab.com/handbook/security/corporate/end-user-services/how-to-articles/google-workspace/google-calendar-delegation", "title": "How To Use Google Calendar Delegate | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec End User Services (EUS)\nHow To Use Google Calendar Delegate\nIntroduction\nThe purpose of this handbook page is to describe how to utilize\nGoogle Calendar Delegation\n. Google Calendar delegation gives the ability to for a team member to access\nanother team member‚Äôs Google Calendar.\nThere are different\nLevels of Permissions\nthat can be assigned to Google Calendar Delegation.\nHow to Add A Google Calendar Delegate\nUsing\ncalendar.google.com\nLog into\ncalendar.google.com\nwith your GitLab email address\nIn the top right click on the\nGear\nicon to go into the\nGoogle Calendar Settings\nSelect your calendar under the\nSettings for my calendars\nUnder your calendar settings drop down menu select\nShare with specific people\nSelect\n+ Add People\nAdd the email addresses of the individual to share your calendar with.\nSelect the\nPermissions\ndrop down menu and give the individual the appropriate access. Please refer to\nCalendar Permission Levels\nSelect\nSend\nCalendar Permission Levels\nSee only free/busy (hide details)\n- The team member will only be able to see if you are free or busy on the calendar\nSee all event details\n- The team member will be able to see all of your calendar events, but will not be able to edit them\nMake changes to events\n- The team member will be able to edit your calendar events. They will also gain the ability to edit the event details.\nMake changes and manage sharing\n- The team member will be able to edit your calendar events. They will also gain the ability to edit the event details. They will also gain the ability to change your calendar sharing settings.\nHow To Access Google Calendar Delegation\nUsing\ncalendar.google.com\nLog into\ncalendar.google.com\nwith your GitLab email address\nOn the left-hand side menu bar navigate to\nOther calendars\nand click on the\n+\nsymbol to\nSubscribe to calendar\nSearch for the team member whose calendar you want to subscribe to\nNow when you go back to your calendar you will see the team members calendar under\nMy calendars\nDepending on the permissions the team member has given you, you will be able to either\nview\nor\nview and edit\ntheir calendar events\nLast modified June 13, 2025:\nMove IT under CorpSec (\n5b5a36c1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 388}
{"doc_id": "27979e83ec7ba57d", "url": "https://handbook.gitlab.com/handbook/company/e-group-weekly", "title": "E-Group Weekly | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nE-Group Weekly\nFor executives to connect on a weekly basis in order to get timely input from E-Group, align on key initiatives, inform about key business happenings and celebrate company successes.\nPurpose\nFor\nexecutives\nto connect on a weekly basis in order to:\nGet timely input from E-Group\nAlign on key initiatives\nInform about key business happenings\nCelebrate company successes\nTiming\nScheduled for 80 minutes on Mondays. These don‚Äôt occur during\nE-Group Offsite\nweeks and may occasionally be rescheduled for another day due to calendar conflicts or holidays.\nAttendees\nExecutives\nChief of Staff to the CEO\n; when not possible, the\nDirector, Strategy and Operations\nCEO Shadows\nExecutive Business Admin\nto the CEO (optional)\nInvited participants: folks invited to participate in one or more specific session\nThe slack channel #e-group-waiting-room is used to ping participants if the start time changes\nScheduling\nThe\nEBA to the CEO\nis responsible for scheduling these meetings.\nChief of Staff to the CEO\nis responsible for managing to the agenda and ensuring that meetings don‚Äôt exceed the allocated time.\nMeeting Details\nE-Group members add topics to the agenda\nThe\nCoS to the CEO\nwill organize agenda suggestions and allocate discussion times by 3pm PT on the business day immediately before the meeting\nThe CoS to the CEO will manage time within the meeting\nAdding items to the agenda\nBefore adding to the agenda, E-Group members should consider whether topics are best suited for the meeting agenda or can be covered as FYIs in Slack\nAll agenda items including any pre-read material should be added to the agenda by 5pm PT\ntwo business days\nbefore the meeting unless something unexpected happens between the end of normal submissions and when the meeting occurs. If something unexpected occurs after this time, please add the topic at the bottom of the agenda and flag to E-Group in the #e-group or #e-group-confidential Slack channels\nSubmissions should include:\nHow much time would ideally be allocated for a specific topic\nAny attendees, beyond E-Group, the CoS to the CEO, and the EBA to the CEO, who should be included in the discussion\nA priority label\nP1: this topic is time sensitive and of great importance to the business. It must be discussed today\nP2: this topic is important, but does not meet the P1 criteria\nDesired outcome: a clear statement around what should be achieved within this meeting\nIf pre-work is strongly encouraged, it should be flagged as early possible in the week before in #e-group or another appropriate Slack channel\nIf you are inviting external folks to a specific session, please notify the EBA to the CEO at least two business days before the meeting\nAgenda structure\nThe agenda for each E-Group Weekly has a single section for each meeting. Each agenda item should\ninclude a tag\n. Three of the most often used tags are:\nFYI: informational, no action needed\nTODO: may not require significant discussion time, but there is an ask for all or a subset of E-Group team members\nDISCUSS: cover in this meeting\nThe Office of the CEO will order agenda topics. FYIs and TODOs will usually appear at the start of a meeting.\nLast modified August 16, 2024:\nReplace aliases with redirects (\naf33af46\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 550}
{"doc_id": "7b891cb8164e5032", "url": "https://handbook.gitlab.com/handbook/product/ux/ux-research/when-to-conduct-ux-research", "title": "When to conduct UX Research | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nUX Research at GitLab\nWhen to conduct UX Research\nLearn when it is appropriate to conduct UX Research for your team.\nUX Research plays an important role when it comes to developing products that are addressing real user needs and matching their expectations. It is important to know when doing research could be\nmost\neffective and what questions need to be answered at what time during product development.\nWhen is it\nideal\nto conduct UX Research? Quick answer: UX Research can and should be applied whenever possible within the product development process.\nThe content in the following sections is covered in more depth in a 20 minute, self paced\nLevelUp course (internal link)\n.\nWhere UX Research fits into the product life cycle\nIn general, UX Research can be inserted\nat any stage\nof the product development life cycle. However, the types of research can vary depending on where teams are in the life cycle. As you continue to read through this page, you will learn more about what kinds of research you can do and\nwhen it is (or isn‚Äôt)\nappropriate.\nDouble Diamond model and GitLab‚Äôs product development flow\nThe British Design Council developed the\nDouble Diamond model\n, a process model for UX design. It consists of two diamonds representing two distinct phases:\nPhase 1: Design the right thing\nPhase 2: Design things right\nSource:\nWikipedia\nThese two phases map to\nGitLab‚Äôs product development flow, specifically the Validation track\n, where ‚ÄúPhase 1: Design the right thing‚Äù equals ‚Äú\nProblem Validation\n‚Äù and ‚ÄúPhase 2: Design things right‚Äù equals ‚Äú\nSolution Validation\n‚Äù.\nIn theory, you should do research to fit wherever you are in the product development workflow. However, in practice, if you already have a solution in place, but haven‚Äôt done any research, there‚Äôs still time to learn from your users.\nConduct research often because you can improve the product many times over whenever research is utilized. The goals for any research will evolve as the product begins to take shape.\nDesign the right thing/Problem Validation\nUsually this phase starts when there is an initial problem statement about users that we aim to solve. For example, we may have heard something in a customer call or have seen customer feedback that shapes these initial problem statements. It‚Äôs also common that there is an assumption or hypothesis of what users may be experiencing without them having it shared directly.\nEither way, what follows next is a phase of discovery research where we aim to understand users‚Äô experiences in depth. This is the time to collect as much data as possible to thoroughly understand nuances and details. It‚Äôs about going broad, diverging, and embracing the complexity that comes with it. This phase is referred to as ‚ÄúDiscover‚Äù.\nOnce enough data is gathered a phase of convergence begins, the second half of the first diamond. This is when we aggregate learnings and revise the initial problem statement or create one if the discovery research started with an hypothesis or assumption. This phase is referred to as ‚ÄúDefine‚Äù.\nFor any problem validation research, we have the same goal:\n\"\nA thorough understanding of the problem\n: The team understands the problem, who it affects, when and why, and how solving the problem maps to business needs and product strategy.\"\nDesign things right/Solution Validation\nThe solution validation phase starts once the problem statement is clearly defined. At the beginning is again a divergent phase where Product Designers explore a lot of different solutions and iterate on them. It‚Äôs helpful to conduct solution validation during this time to inform and influence the different design iterations. At the end of the phase, there is one design solution to move forward with for implementation.\nThe goals of solution validation align with these goals:\n\"\nHigh confidence in the proposed solution\n: Confidence that the jobs to be done outlined within the problem statement can be fulfilled by the proposed solution.\"\nDon‚Äôt stop here - there‚Äôs more UX Research to do\nOnce the feature is released to users, it‚Äôs important to continue to gather qualitative and quantitative feedback from them in order to continuously improve the experience. This is what the ‚ÄúImprove Phase‚Äù of GitLab‚Äôs Development workflow, specifically the\nBuild track\n, encapsulates.\nGoals of the Improve Phase:\nUnderstand Qualitative Feedback\n: To know how to improve something, it‚Äôs important to understand the qualitative feedback that we‚Äôre hearing from users and team members. User interviews, survey verbatims, and customer comments left within GitLab issues can all help inform teams of how well a new feature is being received.\nMeasure Quantitative Impact\n: Qualitative data is great in helping us understand in detail the\nWhy, How or What of users‚Äô behaviors\n. Going a step further and coupling it with quantitative data can help to paint the full picture of what is going on at scale. During implementation, set up dashboards in Tableau to be able to review the performance and engagement of your change.\nInsights from the Improve phase may initiate a new round of Problem Validation or Solution Validation.\nWhen should research be conducted?\nWhile research tends to be the most useful towards the beginning of the double diamond, it can be beneficial to conduct research at every stage along the way.\nAdditional considerations: Weighing confidence vs. risk\nWhen considering the level of confidence you may have on a solution or any foundational research, risk needs to also be taken into account. To help with that, let‚Äôs walk through how each are defined and pose some questions that should be thought about.\nConfidence\n-\nhow confident you are that your design won‚Äôt negatively impact the UX?\nSome questions to ask yourself to help gauge your level of confidence:\nCan you demonstrate why you have a high level of confidence? (ex: This could be the result of a Solution Validation study, looking at past related research, etc. Mainly, you‚Äôll want to identify some concrete justification vs. a gut feeling. Referring to competitor solutions as a justification can be tempting, yet risky, as it‚Äôs unclear to what extent competitors conducted research themselves to inform their solution.)\nDoes your design follow the design\nguidelines\nand\ntenets\n? Have you reviewed the\ndesign and UI changes checklist\n?\nHave you conducted a\nUX Scorecard\n? If so, what was the outcome and what was done as a result of it?\nWhy do you think your design won‚Äôt result in a negative user experience?\nRisk\n-\nwhat would happen if the design negatively impacted the UX?\nSome questions to ask yourself to help weigh risk:\nIs the design or research associated with an experience that‚Äôs critical to a workflow/JTBD?\nIs this workflow viewed as a high-traffic workflow/JTBD?\nWhat would happen if our users ran into usability issues during the workflow/JTBD? (ex: How severe would that be for them?)\nIf the design went out the door and our users felt it was a negative UX, what‚Äôs the likelihood the UX would be addressed in a timely manner? (ex: How feasible is it to go back and address the design issues, given the other priorities the team has planned?)\nHow much additional time would it take to run research to increase confidence? (ex: Is that a risk to the project timeline?)\nObtaining answers to the above questions isn‚Äôt a hard requirement, but more of a best practice when weighing confidence vs. risk in determining if research is needed on a particular topic. Note that this exercise can apply to both Problem Validation and Solution Validation.\nWhen you shouldn‚Äôt do UX Research\nThere are many times where research is appropriate, but oftentimes we fail to consider reasons to NOT conduct research:\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart TB\nnode1[\"`Consider whether to do UX Research`\"] --> node2{\"`Do you have enough time and/or resources?`\"}\nnode5 --> |No| node5no{{\"`Leverage internal data or past research to determine what user personas to target. If no internal data exists, collaborate with other team members to make a 'best guess'.`\"}}\nTime or resource constraints\n: Situations where studies have very tight due dates, adequate funds are not available to answer research questions, or team members are at capacity. That being said, scrappy research (for example: fewer participants/data than desired, getting feedback from team members instead of recruiting users) when these kinds of limitations happen is always better than no research at all.\nResearch questions are too broad\n: In some cases, research questions can be too complex to undertake (example: what do our customers want in a DevOps platform). UX Researchers should determine whether the questions can be distilled into ones they can feasibly answer.\nUnclear goals or action plans\n: When there are no plans to respond to user feedback to make meaningful changes to the product or decisions about the direction to take the product. Research findings should have a pathway into some kind of identified impact prior to the project kicking off. You should be able to clearly answer the question ‚ÄòWhat are the expected outcomes of this research?‚Äô.\nUsing research to check a box\n: These are cases where UX Researchers are brought in after a decision has already been made and are asked to conduct research to back up the decision. In these situations, there is little opportunity to make any changes based on research.\nWhen past research or internal data on the topic already exists\n: Either teams aren‚Äôt aware that internal data is available or haven‚Äôt tried to look before requesting to do research on a given topic.\nConfusion around who the target user is or how to find them\n: These are situations where the problem is not well understood enough to know which kinds of users could be impacted or the type of users sought is too narrow to recruit.\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1659}
{"doc_id": "73663b846aa76f2b", "url": "https://handbook.gitlab.com/handbook/company/working-groups/fedramp-execution", "title": "FedRAMP Execution Working Group | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nWorking Groups\nFedRAMP Execution Working Group\nThe charter of this working group is to drive execution of FedRAMP compliance.\nAttributes\nProperty\nValue\nDate Created\nNovember 25, 2021\nEnd Date\nSlack\n#wg_fedramp\n(only accessible from within the company)\nGoogle Doc\nWorking Group Agenda\n(only accessible from within the company)\nEpic\nMain Project Epic\n(only accessible from within the company)\nPublic Handbook Page\nGitLab‚Äôs FedRAMP Authorization Program\nInternal Handbook Page\nFedRAMP Compliance\nExit Criteria\nGitLab achieves FedRAMP Moderate Authorization (Authority to Operate - ATO) for a new SaaS offering.\nRoles and Responsibilities\nTeam Member Name\nRole\nWorking Group Role\nJosh Lemos\nExecutive Sponsor\nMike Flouton\nVP of Product\nFedRAMP DRI\nMek Stittri\nVP of Infrastructure\nInfrastructure DRI\nFabian Zimmer\nDir, Product Management\nSaaS Platforms Product Leadership\nChris Balane\nSr. Product Manager\nPubSec PM / Product DRI\nMarin Jankovski\nSr. Dir Engineering\nSaaS Platforms Infrastructure Leadership\nCorey Oas\nCompliance Manager\nFedRAMP SME\nWill Szabo\nSr. Sec. Program Manager\nSecurity Program Manager\nSteve Manzuik\nDir. Threat Management\nVulnerability Remediation DRI\nStephen Dumesnil\nEM US Public Sector Services\nUSPS Team DRI\nCynthia Miller\nSr. Dir. Security Assurance\nSecurity DRI\nDirection\nGitLab is pursuing FedRAMP authorization at the\nModerate Impact Level\n.\nWe will evaluate demand for High once we attain Moderate.\nFurther details of the FedRAMP plan, including anticipated or actual dates, cannot be shared publicly at this time.\nTeam members can view details\nin the internal handbook\n. This\npublic handbook page\ncontains information about the FedRAMP Authorization process as it pertains to GitLab.\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 272}
{"doc_id": "694de1b4f11924ac", "url": "https://handbook.gitlab.com/handbook/security/security-operations/trustandsafety/intellectual-property-on-gitlab-com", "title": "Intellectual property on gitlab.com | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Operations\nTrust & Safety Team\nIntellectual property on gitlab.com\nOverview\nDMCA - Digital Millennium Copyright Act\nGitLab takes the intellectual property rights of others seriously and require that our users do the same. The Digital Millennium Copyright Act (DMCA) established a process for addressing claims of copyright infringement. If you own a copyright or have authority to act on behalf of a copyright owner and want to report a claim that a third party is infringing that material on or through GitLab‚Äôs services, review the\nSubmitting a DMCA Notice\nsection further below.\nTrademark Policy\nGitLab.com namespaces are available on a first come, first served basis. No one can claim priority rights to any namespace on GitLab.com based on a trademark registration. For example, owning the trademark for ‚ÄúGreatCompany‚Äù does not mean the trademark owner will be granted the namespace name ‚Äúgitlab.com/GreatCompany‚Äù if it is already registered.\nGitLab is not in a position to investigate, assess or adjudicate complicated trademark disputes between third parties. In these instances, contact the third party that you believe is infringing your rights to resolve the matter, or seek resolution by available legal means. GitLab cannot intervene in such matters without a valid legal order.\nGitLab will only review a trademark infringement claim related to a namespace registered to a third party, and may intervene, where both of the below criteria are satisfied:\nyou provide evidence to GitLab‚Äôs satisfaction that you are holder of a relevant trademark registration, and\nyou provide clear evidence to GitLab‚Äôs satisfaction showing that unauthorized use is being made of your trademark such that there is an obvious intent to mislead others into believing that the relevant namespace is affiliated with your trademark.\nReports can be submitted to\ndmca@gitlab.com\n, and GitLab will review the evidence provided, and if it satisfies the above criteria, GitLab will take any action it deems appropriate.\nNamespace Policy\nGitLab.com namespaces are available on a first come, first served basis and cannot be reserved. No brand, company, entity, or persons own the rights to any namespace on GitLab.com and may not claim them based on the trademark. Owning the brand ‚ÄúGreatCompany‚Äù does not mean owning the namespace ‚Äúgitlab.com/GreatCompany‚Äù. Disputes regarding namespaces and trademarks must be resolved by the parties involved. GitLab will never act as arbitrators or intermediaries in these disputes, and will not take any action without the appropriate legal orders.\nAccount and Group Ownership Disputes\nGitLab will not act as an arbitrator of Group or Account ownership disputes. Each user and group owner is responsible for ensuring that they are following best practices for data security.\nAs GitLab subscriptions are generally business-to-business transactions, in the event that a former employee has revoked company access to a paid group, please contact GitLab Support for recovery options.\nName Squatting Policy\nPer the GitLab Terms of Service:\nAccount name squatting is prohibited by GitLab. Account names on GitLab are administered to users on a first-come, first-serve basis. Accordingly, account names cannot be held or remain inactive for future use.\nThe GitLab.com Support Team will consider a\nnamespace\n(user name or group name) to fall under the provisions of this policy when the user has not logged in or otherwise used the namespace for an extended time. For more information, see the\nName Squatting\nsection further below.\nSubmitting a Notice\nSubmitting a DMCA Notice\nIf you believe that someone is infringing on your copyright as the copyright owner, you can send a DMCA notice to\ndmca@gitlab.com\n.\nA DMCA notice is a legal document, therefore GitLab requires you to submit a notice in the following format.\nA description of the copyrighted work that you claim is being infringed;\nA description of the material you claim is infringing and that you want removed or access to which you want disabled, and the URL or other location of that material;\nYour name, title (if acting as an agent), address, telephone number, and email address;\nThe following statement:\n\"I have a good faith belief that the use of the copyrighted material I am complaining of is not authorized by the copyright owner, its agent, or the law (e.g., as a fair use)\"\n;\nThe following statement:\n\"The information in this notice is accurate and, under penalty of perjury, I am the owner, or authorized to act on behalf of the owner, of the copyright or of an exclusive right that is allegedly infringed\"\n; and\nAn electronic or physical signature of the owner of the copyright or a person authorized to act on the owner‚Äôs behalf.\nAfter your submission to\ndmca@gitlab.com\n, you should receive an automated confirmation of receipt.\nWhat happens Next?\nOnce your request is received, a member of our Trust and Safety Team will verify and process your notice.\nNotices with missing or inaccurate information cannot be processed. A member of the Trust and Safety team will reach out to you for more information.\nShould we verify that you have submitted the required information, you will receive a confirmation email from our team that your request has been processed.\nIf you have not heard from us, you are welcome to send a follow-up email requesting an update.\nValid notices will be forwarded to the reported account owner, allowing them to submit a counter notice or remove the content from gitlab.com\nGitLab users, implicated by the notice, have the right to submit a counter-notice. If the counter-notice is deemed valid, we will forward it to you for further action.\nFor more information on counter complaints, see the\nResponding to a DMCA notice\nResponding to a DMCA Notice\nSubmitting a DMCA Counter Notice\nIf it is not possible to come to an agreement with the reporting copyright owner, the content owner may submit a DMCA Counter-Notice to\ndmca@gitlab.com\nwithin ten (10) business days of the date of receiving our notice.\nIf we receive a valid counter-complaint, we will email a copy of the notice to the copyright owner.\nThe Counter complaint is a legal document and must comply with the requirements of the DMCA and must include the following:\nContact Information: Your name, title (if acting as an agent), physical address, email address, and phone number;\nContent Identification: A reasonable identification of the material that has been removed or to which access has been restricted;\nStatement under Perjury: A statement under penalty of perjury that you have\n\"a good faith belief that the material was removed or disabled as a result of mistake or misidentification of the material to be removed or disabled.\"\n;\nConsent to Jurisdiction: A statement that you\nconsent to the jurisdiction of Federal District Court for the judicial district in which your provided address is located, or if your address is outside of the United States, for any judicial district in which GitLab may be found\n.\nConsent to service of process: A statement that you will\naccept service of process from the person who provided the original notification or an agent of such person\n.\nSignature: An\nelectronic\nor\nphysical\nsignature of the owner of the copyright or a person authorized to act on the owner‚Äôs behalf.\nClick to expand\nShould you receive a gitlab.com DMCA notice for content that is in your control;\nYou can respond to the notice by removing the reported content from gitlab.com.\nIf you believe your content is mistakenly the subject of a DMCA take down request, you have the right to contest the take down request by submitting a counter complaint.\nIn the event that we\ndo not\nsee that any actions has been taken and no response to the DMCA notice has been received;\nThe reported content will be made private.\nDepending on where the content is located, access to the group/project can be restricted.\nAccess to the gitlab.com account is restricted.\nTrademark Infringement\nSubmitting a Trademark Infringement Notice\nTo submit a trademark infringement report under the\nTrademark Policy\n, please provide:\nEvidence that you are holder of a relevant trademark registration, such as a scanned copy of the trademark registration certificate(s) or screenshot of the registration on the website or database of the applicable national intellectual property office(s).\nA declaration of the following statement: ‚ÄúBy submitting this trademark infringement notice, I state that I have a good-faith belief that the reported use, in the manner that I have complained of, is not authorized by the intellectual property rights owner, its agent or the law; that the information contained in this notice is accurate; and, under penalty of perjury, that I am authorized to act on behalf of the owner of the intellectual property rights at issue‚Äù.\nYou can send this information to\ndmca@gitlab.com\n, you should receive an automated confirmation of receipt.\nName Squatting\nRequesting a dormant namespace\nThe GitLab.com Support Team will consider a\nnamespace\n(user name or group name) to fall under the provisions of this policy when the user has not logged in or otherwise used the namespace for an extended time.\nSpecifically:\nUser namespaces can be reassigned if both of the following are true:\nThe user‚Äôs last sign in was at least two years ago.\nThe user is not the sole owner of any active projects.\nGroup namespaces can be reassigned if one of the following is true:\nThere is no data (no project or project(s) are empty).\nThe owner‚Äôs last sign in was at least two years ago.\nIf the namespace contains data, GitLab Support will attempt to contact the owner over a two-week period before reassigning the namespaces. If the namespace contains no data (empty or no projects) and the owner is inactive, the namespace will be released immediately.\nNamespaces associated with unconfirmed accounts over 90 days old are eligible for immediate release. Group namespaces that contain no data and were created more than 6 months ago are likewise eligible for immediate release.\nAccount and Group ownership disputes should contact\nGitLab Support\nto see if namespaces are eligible.\nLast modified November 7, 2024:\nTrademark Policy update (\n78199e2c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1670}
{"doc_id": "d036e91d10c8ce61", "url": "https://handbook.gitlab.com/handbook/engineering/workflow", "title": "Engineering Workflow | The GitLab Handbook", "text": "The Handbook\nEngineering\nEngineering Workflow\nThis document explains the workflow for anyone working with issues in GitLab Inc.\nFor the workflow that applies to the wider community see the\ncontributing guide\n.\nGitLab Flow\nProducts at GitLab are built using the\nGitLab Flow\n.\nWe have\nspecific rules around code review\n.\nReverting a merge request\nIn line with our values of\nshort toes\n,\nmaking two-way-door decisions\nand\nbias for action\n, anyone can\npropose to revert a merge request. When deciding whether an MR should be reverted,\nthe following should be true:\nSomething broke and there is no acceptable work around. Examples of this include:\nA feature broke and is categorized as\n~severity::1\nor\n~severity::2\n.\nSee severity labels\nMaster broken\nThere are failing migrations\nThere are no dependencies on the change. For example, a database\nmigration has not been run on production.\nReverting merge requests that add non-functional changes and don‚Äôt remove any existing capabilities\nshould be avoided in order to prevent designing by committee.\nThe intent of a revert is never to place blame on the original author. Additionally, it is helpful\nto inform the original author so they can participate as a DRI on any necessary follow up actions.\nThe\npipeline::expedited\nlabel, and\nmaster:broken\nor\nmaster:foss-broken\nlabel must be set on merge requests that fix\nmaster\nto skip some non-essential jobs in order to speed up the MR pipelines.\nBroken\nmaster\nIf you notice that pipelines for the\nmaster\nbranch of\nGitLab\nor\nGitLab FOSS\nare failing, returning the build to a passing state takes priority over everything else development related, since everything we do while tests are broken may:\nbreak existing functionality\nintroduce new bugs and security issues\nimpede productivity for all of engineering and our release processes\nWhat is a broken\nmaster\n?\nA broken master is an event where a pipeline in\nmaster\nis failing.\nThe cost to fix test failures increases exponentially as time passes due to\nmerged results pipelines\nused. Auto-deploys, as well as monthly releases and security releases, depend on\ngitlab-org/gitlab\nmaster being green for tagging and\nmerging of backports\n.\nOur aim should be to keep\nmaster\nfree from failures, not to fix\nmaster\nonly after it breaks.\nAny question or suggestion is welcome in the\n#g_development_analytics\nchannel who owns the broken\nmaster\nautomation proceess.\nBroken\nmaster\nservice level objectives\nThere are two phases for fixing a broken\nmaster\nincident which have a target SLO to clarify the urgency. The resolution phase is dependent on the completion of the triage phase.\nPhase\nService level objective\nTriage\n4 hours from the 2nd occurrence of a broken\nmaster\nincident creation until assignment\ngroup labeled on the incident\nResolution\n4 hours from assignment to DRI until incident is resolved\nMerge request author or team of merge request author or dev on-call engineer\nNote: Recurring incidents are negatively impacting master pipeline stability and development velocity. Any untriaged, recurring incident will be automatically escalated to\n#dev-escalation\nfollowing this timeline:\ntimeline\ntitle Pipeline incident escalation\nsection Pipeline failure incident #1\nnot recurring in 24 hours and no human activity : Auto closed\nany human update on incident #1\n: labels incident #1 with escalation skipped\n: does not trigger any group ping or escalation\nsame job failures recurring in incident #2\n: closes incident #2 as duplicate of incident #1\n: labels incident #1 with escalation needed\n: pings attributed group channel after 10 minutes of inactivity\n: 2nd ping to group channel after 30 minutes of inactivity\n: pings stage channel in after 3 hours 40 minutes of inactivity\n: escalates to dev-escalation after 4 hours of inactivity\n: labels incident #1 is escalated\nIf an incident becomes a blocker for MRs and deployments before being auto-escalated, the team member being impacted should refer to the\nbroken\nmaster\nescalation\nsteps to request help from the current\nengineer on-call\nas early as needed.\nAdditional details about the phases are listed below.\nBroken\nmaster\nescalation\nRecurring broken\nmaster\nincidents are automatically escalated to\n#dev-escalation\nunless it is triaged within 4 hours.\nIf a broken\nmaster\nis blocking your team before auto-escalation (such as creating a security release) then you should:\nSee if there is a non-resolved\nbroken\nmaster\nincident\nwith a DRI assigned and check discussions there.\nCheck discussions on the failure notification in the triage DRI‚Äôs group Slack channel to see if anyone is investigating the incident you are looking at. See\nTriage broken master\nfor information on who the triage DRI is.\nIf there is not a clear DRI or action to resolve, use the\ndev escalation\nprocess to solicit help in the broken\nmaster\nincident.\nEscalation on weekends and holidays\nMaster broken incidents must be manually escalated to\n#dev-escalation\non\nweekends and holidays\nif necessary. Without a manual escalation, the service level objective can extend to the next working day; that is, triage DRI is expected to triage the incident on the next working day. Regardless of when the label was applied, we always consider an incident to be in an\nescalated\nstate as long as it has the ~‚Äúescalation::escalated‚Äù label, until the incident is resolved.\nTriage broken master\nDefinitions\nFlaky test: A test that fails, then succeeds when the CI job running the test is retried.\nBroken master:\nA test that fails even when the CI job running the test is retried.\nA failing test that can be reproduced locally on the\nmaster\nbranch.\nAttribution\nIf a failed test can be traced to a group through its\nfeature_category\nmetadata, the broken\nmaster\nincident associated with that test will be automatically labeled with this group as the triage DRI through\nthis line of code\n. In addition, Slack notifications will be posted to the group‚Äôs Slack channel to notify them about ongoing incidents. The triage DRI is responsible for monitoring, identifying, and communicating the incident.\nA notification will be sent to the attributed group‚Äôs Slack channel and\n#master-broken\n.\nTriage DRI Responsibilities\nMonitor\nPipeline failures are sent to the triage DRI‚Äôs group channel, if one is identified, and will be reviewed by its group members. The failures will also be sent to\n#master-broken\nfor extra communication. If an incident is announced in a DRI group‚Äôs Slack channel, the channel member should acknowledge it and assume the triage DRI responsibilities.\nIf the incident is a duplicate of an existing incident, use the following quick actions to close the duplicate incident:\n/assign me\n/duplicate\n#<original_issue_id>\n/copy_metadata\n#<original_issue_id>\nIf the incident is not a duplicate, and needs some investigation:\nAssign the incident to yourself:\n/assign me\nChange the incident status to\nAcknowledged\n(in the right-side menu).\nIn Slack, the\n:ack:\nemoji reaction should be applied by the triage DRI to signal the linked incident status has been changed to\nAcknowledged\nand the incident is actively being triaged.\nIdentification\nReview non-resolved\nbroken\nmaster\nincidents\nfor the same failure. If the broken\nmaster\nis related to a test failure,\nsearch the spec file in the issue search\nto see if there‚Äôs a known\nfailure::flaky-test\nissue.\nIf this incident is\ndue to non-flaky reasons\n, communicate in\n#development\n,\n#backend\n, and\n#frontend\nusing the Slack Workflow.\nAnnounce that\nmaster\nis fixed by enter\n/broadcast master fixed\nin the chat bar of the\n#master-broken\nchannel to invoke this workflow, and then click\nContinue the broadcast\n.\nCreate a revert MR directly\nto save some time in case we need to revert down the line.\nIf you are reverting an MR that performs a database migration, you need to follow the\nDeployment blockers process\nto prevent the migration from proceeding to deploy and running on staging and production.\nIf the migration is executed in any environments, communicate to the release managers in\n#releases\nchannel and discuss whether it‚Äôs appropriate to create another migration to roll back the first migration or turn the migration into a no-op by following\nDisabling a data migration steps\n.\nIf you identified that\nmaster\nfails\nfor a flaky reason\n, and it cannot be reliably reproduced (i.e. running the failing spec locally or retrying the failing job):\nQuarantine\nthe failing test to restore pipeline stability within 30 minutes if the flakiness is continuously causing master pipeline incidents.\nAlternatively, if the failure does not seem disruptive, and you have a fix that you are confident with, submit the fix MR with the ~‚Äúmaster:broken‚Äù label to ensure your pipeline is expedited.\nIf a flaky test issue already exists, add a comment in it with a link to the failed broken master incident and/or failed job. We have automation in place to create test failure issues automatically. The issue is named after the spec path, which can be a search keyword.\nIf a flaky test issue doesn‚Äôt exist, create an issue from the\nNew issue\nbutton in top-right of the failing job page (that will automatically add a link to the job in the issue), and apply the\nBroken Master - Flaky\ndescription template.\nAdd the appropriate labels to the main incident:\n# Add those labels\n/label ~\n\"master-broken::flaky-test\"\n/label ~\n\"failure::flaky-test\"\n# Pick one of those labels\n/label ~\n\"flaky-test::dataset-specific\"\n/label ~\n\"flaky-test::datetime-sensitive\"\n/label ~\n\"flaky-test::state leak\"\n/label ~\n\"flaky-test::random input\"\n/label ~\n\"flaky-test::transient bug\"\n/label ~\n\"flaky-test::unreliable dom selector\"\n/label ~\n\"flaky-test::unstable infrastructure\"\n/label ~\n\"flaky-test::too-many-sql-queries\"\nClose the incident\nAdd the stacktrace of the error to the incident (if it is not already posted by gitlab-bot), as well as Capybara screenshots if available in the job artifacts.\nTo find the screenshot: download the job artifact, and copy the screenshot in\nartifacts/tmp/capybara\nto the incident if one is available.\nIdentify the merge request that introduced the failures. There are a few possible approaches to try:\nCheck the commit in the failed job, and find the associated MR, if any (it‚Äôs not as simple most of the times though).\nLook at the project activity\n, and search for keywords in the recent merged events.\nLook at the recent commits on master\nand search for keywords you might see in the failing job/specs (e.g. if you see a\ngeo\nspec file is failing, specifically the\nshard\nspec, search for those keywords in the commit history).\nYou can\nfilter with the\nMerge branch\ntext\nto only see merge commits.\nLook at the spec file history or blame views, by clicking respectively the\nHistory\nor\nBlame\nbutton at the top of a file in the file explorer, e.g. at\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/backup.rb\n.\nIf you identified a merge request, assign the incident to its author if they are available at the moment. If they are not available, assign to the maintainer that approved/merged the MR. If none are available, mention the team Engineering Manager and seek assistance in the\n#development\nSlack channel.\nYou can find the team somebody is in and who‚Äôs the manager for that team by searching in\nhttps://handbook.gitlab.com/handbook/product/categories/\n.\nIf no merge request was identified, ask for assistance in the\n#development\nSlack channel.\nPlease set the appropriate\n~master-broken:*\nlabel from the list below:\n/label ~\n\"master-broken::caching\"\n/label ~\n\"master-broken::ci-config\"\n/label ~\n\"master-broken::dependency-upgrade\"\n/label ~\n\"master-broken::external-dependency-unavailable\"\n/label ~\n\"master-broken::flaky-test\"\n/label ~\n\"master-broken::fork-repo-test-gap\"\n/label ~\n\"master-broken::pipeline-skipped-before-merge\"\n/label ~\n\"master-broken::test-selection-gap\"\n/label ~\n\"master-broken::need-merge-train\"\n/label ~\n\"master-broken::gitaly\"\n/label ~\n\"master-broken::state leak\"\n/label ~\n\"master-broken::infrastructure\"\n/label ~\n\"master-broken::infrastructure::failed-to-pull-image\"\n/label ~\n\"master-broken::infrastructure::frunner-disk-full\"\n/label ~\n\"master-broken::infrastructure::gitlab-com-overloaded\"\n/label ~\n\"master-broken::job-timeout\"\n/label ~\n\"master-broken::multi-version-db-upgrade\"\n/label ~\n\"master-broken::missing-test-coverage\"\n/label ~\n\"master-broken::undetermined\"\n(Optional) Pre-resolution\nIf the triage DRI believes that there‚Äôs an easy resolution by either:\nReverting a particular merge request.\nMaking a quick fix (for example, one line or a few similar simple changes in a few lines).\nThe triage DRI can create a merge request, assign to any available maintainer, and ping the resolution DRI with a\n@username FYI\nmessage.\nAdditionally, a message can be posted in\n#backend_maintainers\nor\n#frontend_maintainers\nto get a maintainer take a look at the fix ASAP.\nIf the failures occur only in\ntest-on-gdk\njobs, it‚Äôs possible to stop those jobs from being added to new pipelines while the cause is being fixed. See the\nrunbook\nfor details.\nPro-tips for Triage DRI\nFor an initial assessment of what might have contributed to the failure, we can try the experimental AI-assisted\nroot cause analysis\nfeature following\nthis documentation\n.\nTo confirm flakiness, you can use the\n@gitlab-bot retry_job <job_id>\nor the\n@gitlab-bot retry_pipeline <pipeline_id>\ncommand to retry the failed job(s), even if you are not a project maintainer.\nNote\n, The\nretry_job\ncommand can fail for the following reasons:\nRetrying the same job twice with the\nretry_job\ncommand will result in a failure message because each failed job can only be retried once.\nIf there is no response to either of the\nretry\ncommands, you are likely invoking them in non-supported projects. If you‚Äôd like to request for the commands to be added to your project, please\nmake an issue\nand inform\n#g_development_anallytics\n. You are encouraged to self-serve the MR following\nthis example\nand submit it for review for maximum efficiency.\nResolution of broken master\nThe merge request author of the change that broke\nmaster\nis the resolution DRI.\nIn the event the merge request author is not available, the team of the merge request author will assume the resolution DRI responsibilities.\nIf a DRI has not acknowledged or signaled working on a fix, any developer can take assume the resolution DRI responsibilities by assigning themselves to the incident.\nResponsibilities of the resolution DRI\nPrioritize resolving recurring broken\nmaster\nincidents over new bug/feature work. Resolution options include:\nDefault\n: Revert the merge request which caused the broken\nmaster\n. If a revert is performed,\ncreate an issue to reinstate the merge request and assign it to the author\nof the reverted merge request.\nReverts can go straight to maintainer review and require 1 maintainer approval.\nThe maintainer can request additional review/approvals if the revert is not trivial.\nThe\npipeline::expedited\nlabel, and\nmaster:broken\nor\nmaster:foss-broken\nlabel must be set on merge requests that fix\nmaster\nto skip some non-essential jobs in order to speed up the MR pipelines.\nQuarantine\nthe failing test if you can confirm that it is flaky (e.g. it wasn‚Äôt touched recently and passed after retrying the failed job).\nAdd the\nquarantined test\nlabel to the\nfailure::flaky-test\nissue you previously created during the identification phase.\nCreate a new merge request to fix the failure if revert is not possible or would introduce additional risk. This should be treated as a\npriority::1\nseverity::1\nissue.\nTo ensure efficient review of the fix, the merge request should only contain the minimum change needed to fix the failure. Additional refactor or improvement to the code should be done as a follow-up.\nThe resolution DRI must address all failures in the pipeline. Be mindful that the initial opened issue for the incident will only announce the jobs that failed so far. But after you fix those jobs, other subsequent jobs could fail on the same pipeline that you‚Äôre triaging. The triage DRI is responsible for this whole pipeline, and not only for the initial failed jobs.\nApply the\nPick into auto-deploy\nlabel (along with the needed\nseverity::1\nand\npriority::1\n) to make sure deployments are unblocked.\nIf the broken\nmaster\nincident affects any stable branches (e.g.\nhttps://gitlab.com/gitlab-org/gitlab/-/merge_requests/25274\n) or is caused by a flaky failure,\nopen new merge requests\ndirectly against the active stable branches\nand ping the current release manager in the merge requests to avoid\ndelays in releases / security releases.\nSee\nHow to fix a broken stable branch guide\nfor more details.\nCommunicate in\n#master-broken\nwhen the fix was merged\nOnce the incident is resolved, select the\nBroadcast Master Fixed\nworkflow in the\n#master-broken\nchannel, and click\nContinue the broadcast\nto communicate it.\nWhen\nmaster\nbuild was failing and the underlying problem was quarantined /\nreverted / temporary workaround created but the root cause still needs to be\ndiscovered, the investigation should continue directly in the incident.\nCreate an\nissue\nfor the\nDevelopment Analytics group\ndescribing how the broken\nmaster\nincident could have been prevented in the Merge Request pipeline.\nWhen resolution steps are completed and all of the required fixes are merged, close the incident.\nResponsibilities of authors and maintainers\nOnce the resolution DRI announces that\nmaster\nis fixed:\nMaintainers should start a new merged results pipeline (for canonical MRs)\nand enable ‚ÄúAuto-merge‚Äù.\nThere‚Äôs no need to rebase once\nmaster\nhas been fixed since we use\nmerged results pipelines\n.\n(For forks only) Authors should rebase their open merge requests (since\nmerged results pipelines\nisn‚Äôt supported in these cases).\nMerging during broken master\nMerge requests\ncan not be merged\nto\nmaster\nuntil the incident status is changed to\nResolved\n.\nThis is because we need to try hard to avoid introducing\nnew\nfailures,\nsince it‚Äôs easy to lose confidence if it stays red for a long time.\nIn the rare case where a merge request is\nurgent\nand must be merged\nimmediately\n, team members can follow the process below to have a merge\nrequest merged during a broken\nmaster\n.\nCriteria for merging during broken master\nMerging while\nmaster\nis broken can only be done for:\nMerge requests that need to be deployed to GitLab.com to alleviate an ongoing production incident.\nMerge requests that fix broken\nmaster\nissues (we can have multiple broken\nmaster\nissues ongoing).\nHow to request a merge during a broken\nmaster\nFirst, ensure the latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to\ngitlab-org/gitlab\nusing\nmerged results pipelines\n).\nNext, make a request on Slack:\nPost to either the\n#frontend_maintainers\nor\n#backend_maintainers\nSlack\nchannels (whichever one is more relevant).\nIn your post outline\nwhy\nthe merge request is\nurgent\n.\nMake it clear that this would be a merge during a broken\nmaster\n, optionally add a link to this\npage in your request.\nInstructions for the maintainer\nA maintainer who sees a request to merge during a broken\nmaster\nmust follow this process.\nNote, if any part of the process below disqualifies a merge request from being merged\nduring a broken\nmaster\nthen the maintainer must inform the requestor as to\nwhy\nin the\nmerge request (and optionally in the Slack thread of the request).\nFirst, assess the request:\nAdd the\n:eyes:\nemoji to the Slack post so other maintainers know it is being assessed.\nWe do not want multiple maintainers to work on fulfilling the request.\nAssess whether the merge request\nis urgent or not\n. If in doubt, ask the requestor for more\ndetails in the merge request about why it is urgent.\nNext, ensure that all the following conditions are met:\nThe latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to\ngitlab-org/gitlab\nusing\nmerged results pipelines\n).\nAll of the latest pipeline failures also happen on\nmaster\n.\nThere is a corresponding non-resolved\nbroken\nmaster\nincidents\n.\nSee the ‚ÄúTriage DRI Responsibilities‚Äù steps above for more details.\nNext, add a comment to the merge request mentioning that the merge request will be merged\nduring a broken\nmaster\n, and link to the broken\nmaster\nincident. For example:\nMerge request will be merged while\n`master`\nis broken.\nFailure in\n<\n>\nhappens in\n`master`\nand is being worked on in\n<\n>\n.\nNext, merge the merge request:\nIf the ‚ÄúMerge‚Äù button is enabled (this is unlikely), then click it.\nOtherwise, you must:\nUnset the\n‚ÄúPipelines must succeed‚Äù setting\nfor the\ngitlab-org/gitlab\nproject\n.\nClick the ‚ÄúMerge‚Äù button.\nIf the merge train is enabled, a warning will be displayed stating the code changes won‚Äôt be validated by the merge train. Considering the criticality of the merge request it is acceptable to dismiss the warning.\nSet the ‚ÄúPipelines must succeed‚Äù setting to be on again.\nBroken\nmaster\nmirrors\n#master-broken-mirrors\nwas created to remove duplicative notifications from the\n#master-broken\nchannel which provides a space for\nRelease Managers\nand the\nDeveloper Experience teams\nto monitor failures for the following projects:\nhttps://gitlab.com/gitlab-org/security/gitlab\nhttps://dev.gitlab.org/gitlab/gitlab-ee\nThe\n#master-broken-mirrors\nchannel is to be used to identify unique failures for those projects and flaky failures are not expected to be retried/reacted to in the same way as\n#master-broken\n.\nBroken JiHu validation pipelines\nWe run JiHu validation pipelines in some of the merge requests, and it can be\nbroken at times. When this happens, check\nWhat to do when the validation pipeline failed\nfor more details.\nSecurity Issues\nSecurity issues are managed and prioritized by the security team. If you are assigned to work on a security issue in a milestone,\nyou need to follow the\nSecurity Release process\n.\nIf you find a security issue in GitLab, create a\nconfidential issue\nmentioning the relevant security and engineering managers, and post about it in\n#security\n.\nIf you accidentally push security commits to\ngitlab-org/gitlab\n, we recommend that you:\nDelete the relevant branch ASAP\nInform a release manager in\n#releases\n. It may be possible to execute a garbage collection (via the Housekeeping task in the repository settings) to remove the commits.\nFor more information on how the entire process works for security releases, see the\ndocumentation on security releases\n.\nRegressions\n~regression\nimplies that a previously\nverified working functionality\nno longer works.\nRegressions are a subset of bugs. The\n~regression\nlabel is used to imply that the defect caused the functionality to regress.\nThe label tells us that something worked before and it needs extra attention from Engineering and Product Managers to schedule/reschedule.\nThe regression label does not apply to bugs for new features for which functionality was\nnever verified as working\n.\nThese, by definition, are not regressions.\nA regression should always have the\n~regression:xx.x\nlabel on it to designate when it was introduced. If it‚Äôs unclear when it was introduced, the latest released version should be added.\nRegressions should be considered high priority issues that should be solved as soon as possible, especially if they have severe impact on users. When identified in time, for example in a SaaS deployment, fixing them within the same milestone avoids their being included with that release.\nUse of the ~regression label on MRs\nFor better efficiency, it‚Äôs common for a regression to be fixed in an MR without an issue being created, either through reversion of the original MR or a code change. Regardless of whether there is an issue or not, the MR should also have the\n~regression\nand\n~regression:xx.x\nlabels. This allows for trends to be accurately measured.\nBasics\nStart working on an issue you‚Äôre assigned to. If you‚Äôre not assigned to any issue, find the issue with the highest priority and relevant label you can work on, and assign it to yourself.\nYou can use this query, which sorts by priority for the started milestones\n, and filter by the label for your team.\nIf you need to schedule something or prioritize it, apply the appropriate labels (see\nScheduling issues\n).\nIf you are working on an issue that touches on areas outside of your expertise, be sure to mention someone in the other group(s) as soon as you start working on it. This allows others to give you early feedback, which should save you time in the long run.\nIf you are working on an issue that requires access to specific features, systems, or groups, open an\naccess request\nto obtain access on staging and production for testing your changes after they are merged.\nWhen you start working on an issue:\nAdd the\nworkflow::in dev\nlabel to the issue.\nCreate a merge request (MR) by clicking on the\nCreate merge request\nbutton in the issue. This creates a MR with the labels, milestone and title of the issue. It also relates the just created MR to the issue.\nAssign the MR to yourself.\nWork on the MR until it is ready, it meets GitLab‚Äôs\ndefinition of done\n, and the pipeline succeeds.\nEdit the description and click on the\nRemove the Draft: prefix from the title\nbutton.\nAssign it to the suggested reviewer(s) from\nReviewer Roulette\n. If there are reviewers for multiple categories, for example: frontend, backend and database, assign all of them. Alternatively, assign someone who specifically needs to review. When assigning, also @mention them in the comments, requesting a review.\n(Optionally) Unassign yourself from the MR. Some may find leaving the MR assigned to themselves easier to track the MRs they are responsible for by using the built in MR button/notification icon in the GitLab navigation bar.\nChange the workflow label of the issue to\nworkflow::in review\n. If multiple people are working on the issue or multiple workflow labels might apply, consider breaking the issue up. Otherwise, default to the workflow label farthest away from completion.\nPotentially, a reviewer offers feedback and assigns back to the author.\nThe author addresses the feedback and this goes back and forth until all reviewers approve the MR.\nAfter approving, the reviewer in each category unassigns themselves and assigns the suggested maintainer in their category.\nMaintainer reviews take place with any back and forth as necessary and attempts to resolve any open threads.\nThe last maintainer to approve the MR, follows the\nMerging a merge request\nguidelines.\n(Optionally) Change the workflow label of the issue to\nworkflow::verification\n, to indicate all the development work for the issue has been done and it is waiting to be deployed and verified. We will use this label in cases where the work was requested to be verified by product OR we determined we need to perform this verification in production.\nWhen the change has been verified, change the workflow label to\nworkflow::complete\nand close the issue.\nYou are responsible for the issues assigned to you. This means it has to ship with the milestone it‚Äôs associated with. If you are not able to do this, you have to communicate it early to your manager and other stakeholders (e.g. the product manager, other engineers working on dependent issues). In teams, the team is responsible for this (see\nWorking in Teams\n). If you are uncertain, err on the side of overcommunication. It‚Äôs always better to communicate doubts than to wait.\nYou (and your team, if applicable) are responsible for:\nEnsuring that your changes\napply cleanly to GitLab Enterprise Edition\n.\nThe testing of a new feature or fix, especially right after it has been merged and packaged.\nCreating any\nrelevant feature or API documentation\nShipping secure code, (see\nSecurity is everyone‚Äôs responsibility\n).\nOnce a release candidate has been deployed to the staging environment, please verify that your changes work as intended. We have seen issues where bugs did not appear in development but showed in production (e.g. due to CE-EE merge issues).\nBe sure to read general guidelines about\nissues\nand\nmerge requests\n.\nUpdating Workflow Labels Throughout Development\nTeam members use labels to track issues throughout development. This gives visibility to other developers, product managers, and designers, so that they can adjust their plans during a monthly iteration. An issue should follow these stages:\nworkflow::in dev\n: A developer indicates they are developing an issue by applying the\nin dev\nlabel.\nworkflow::in review\n: A developer indicates the issue is in code review and UX review by replacing the\nin dev\nlabel with the\nin review\nlabel.\nworkflow::verification\n: A developer indicates that all the development work for the issue has been done and is waiting to be deployed, then verified.\nworkflow::complete\n: A developer indicates the issue has been verified and everything is working by adding the\nworkflow::complete\nlabel and closing the issue.\nWorkflow labels are described in our\nDevelopment Documentation\nand\nProduct Development Flow\n.\nWorking in Teams\nFor larger issues or issues that contain many different moving parts, you‚Äôll be likely working in a team. This team will typically consist of a\nbackend engineer\n, a\nfrontend engineer\n, a\nProduct Designer\nand a\nproduct manager\n.\nTeams have a shared responsibility to ship the issue in the planned release.\nIf the team suspects that they might not be able to ship something in time, the team should escalate / inform others as soon as possible. A good start is informing your manager.\nIt‚Äôs generally preferable to ship a smaller iteration of an issue, than ship something a release later.\nConsider starting a Slack channel for a new team, but remember to write all relevant information in the related issue(s). You don‚Äôt want to have to read up on two threads, rather than only one, and Slack channels are not open to the greater GitLab community.\nIf an issue entails frontend and backend work, consider separating the frontend and backend code into separate MRs and merge them independently under\nfeature flags\n. This will ensure frontend/backend engineers can work and deliver independently.\nIt‚Äôs important to note that even though the code is merged behind a feature flag, it should still be production ready and continue to hold our\ndefinition of done\n.\nA separate MR containing the integration, documentation (if applicable) and removal of the feature flags should be completed in parallel with the backend and frontend MRs, but should only be merged when both the frontend and backend MRs are on the master branch.\nIn the spirit of\ncollaboration\nand\nefficiency\n, members of teams should feel free to discuss issues directly with one another while\nbeing respectful of others‚Äô time\n.\nConvention over Configuration\nAvoid adding configuration values in the application settings or in\ngitlab.yml\n. Only add configuration if it is absolutely necessary. If you\nfind yourself adding parameters to tune specific features, stop and consider\nhow this can be avoided. Are the values really necessary? Could constants be\nused that work across the board? Could values be determined automatically?\nSee\nConvention over Configuration\nfor more discussion.\nChoosing Something to Work On\nStart working on things with the highest priority in the current milestone. The priority of items are defined under labels in the repository, but you are able to sort by priority.\nAfter sorting by priority, choose something that you‚Äôre able to tackle and falls under your responsibility. That means that if you‚Äôre a frontend developer, you work on something with the label\nfrontend\n.\nTo filter very precisely, you could filter all issues for:\nMilestone: Started\nAssignee: None (issue is unassigned)\nLabel: Your label of choice. For instance\n,\nDiscussion\n,\nQuality\n,\nfrontend\n, or\nPlatform\nSort by priority\nUse this link to quickly set the above parameters\n. You‚Äôll still need to filter by the label for your own team.\nIf you‚Äôre in doubt about what to work on, ask your lead. They will be able to tell you.\nTriaging and Reviewing Code from the rest of the Community\nIt‚Äôs every\ndevelopers‚Äô responsibilities\nto triage and review code contributed by the rest of the community, and work with them to get it ready for production.\nMerge requests from the rest of the community should be labeled with the\nCommunity contribution\nlabel.\nWhen evaluating a merge request from the community, please ensure that a relevant PM is aware of the pending MR by mentioning them.\nThis should be to be part of your daily routine. For instance, every morning you could triage new merge requests from the rest of the community that are not yet labeled\nCommunity contribution\nand either review them or ask a relevant person to review it.\nMake sure to follow our\nCode Review Guidelines\n.\nWorking with GitLab.com\nGitLab.com is a very large instance of GitLab Enterprise Edition. It runs release candidates for new releases, and sees a lot of issues because of the amount of traffic it gets. There are several internal tools available for developers at GitLab to get data about what‚Äôs happening in the production system:\nPerformance Data\nThere is extensive\nmonitoring\npublicly available for GitLab.com. For more on this and related tools, see the\nmonitoring handbook\n.\nError Reporting\nSentry\nis our error reporting tool\nlog.gprd.gitlab.net\nhas production logs\nprometheus.gitlab.com\nhas alerts for the\nproduction team\nScheduling Issues\nGitLab Inc has to be selective in working on particular issues. We have a limited capacity to work on new things. Therefore, we have to schedule issues carefully.\nProduct Managers are responsible for scheduling all issues in their respective\nproduct areas\n, including features, bugs, and tech debt. Product managers alone determine the\nprioritization\n, but others are encouraged to influence the PMs decisions. The UX Lead and Engineering Leads are responsible for allocating people making sure things are done on time. Product Managers are\nnot\nresponsible for these activities, they are not project managers.\nDirection issues are the big, prioritized new features for each release. They are limited to a small number per release so that we have plenty of capacity to work on other important issues, bug fixes, etc.\nIf you want to schedule an issue with the\nSeeking community contributions\nlabel, please remove the label first.\nAny scheduled issue should have a team label assigned, and at least one type label.\nRequesting Something to be Scheduled\nTo request scheduling an issue, ask the\nresponsible product manager\nWe have many more requests for great features than we have capacity to work on.\nThere is a good chance we‚Äôll not be able to work on something.\nMake sure the appropriate labels (such as\ncustomer\n) are applied so every issue is given the priority it deserves.\nProduct Development Timeline\nTeams (Product, UX, Development, Quality) continually work on issues according to their respective workflows.\nThere is no specified process whereby a particular person should be working on a set of issues in a given time period.\nHowever, there are specific deadlines that should inform team workflows and prioritization.\nWith the monthly\nrelease date\nbeing the third Thursday of the release month, the\ncode cut-off\nis the Friday prior.\nThe\nnext milestone begins\nthe Saturday after code cut-off.\nAll other important dates for a milestone are relative to the release date:\nMonday, 19 days before the milestone begins\n:\nDraft of the issues that will be included in the next release (released next month).\nStart capacity and technical discussions with engineering/UX.\nAssess error budgets to determine feature/reliability balance.\nDevelopment engineering manager provides product manager with prioritization input for\n~type::maintenance\nissues per\ncross-functional prioritization\nQuality\nprovides product manager with prioritization input for\n~type::bug\nissues per\ncross-functional prioritization\nMonday, 12 days before the milestone begins\n:\nProduct manager, taking into consideration prioritization input from development EM, Quality, and UX to create a plan of issues for the upcoming milestone.\nRelease scope is finalized. In-scope issues marked with milestone\n%x.y\n; label\n~deliverable\napplied.\nKickoff document is updated with relevant items to be included.\nMonday, 5 days before the milestone begins\n:\nRelease scope is finalized. In-scope issues marked with milestone\n%x.y\n; label\n~deliverable\napplied.\nKickoff document is updated with relevant items to be included.\nMonday immediately after the milestone begins\n:\nKick off!\nüì£\nCompany Kickoff\ncall live streamed.\nDevelopment on milestone begins.\nMonday, 9 days after the milestone begins\n:\nThe development lead for each stage/section coordinates a stage/section level review with the quad\ncross-functional dashboard review process\n. After the stages/section level reviews are complete, the VP of Development coordinates a summary review with the CTO, VP of Product, VP of UX, and VP of Quality.\nWednesday, 11 days after the milestone begins\n:\nGitLab Bot opens\nGroup Retrospective\nissue for the current milestone.\nFriday, the day the milestone ends\n:\nIssues for milestone completed, with docs, and have been merged into master.\nFeature flags should be flipped from default off to default on after verification to be in the release. See\nfeature flags\n.\nMerging by the milestone code cut-off (Friday)\ndoes not guarantee\nthat the feature will be in the release. See\nrelease timelines\n.\nIndividual\nrelease post entries\nmerged for all relevant issues.\nBy end of the day, milestone\n%x.y\nis expired.\nOn or around Wednesday, the day before the release date\n:\nGroup Retrospective issues\nare updated with shipped and missed deliverables and team-members are tagged in the discussion.\nWednesday, the day before the release date\n:\nMilestone Cleanup\nruns on the schedule at\nMilestone cleanup schedule\n.\nThird Thursday of the release month\n:\nRelease Day!\nüöÄ\nRelease shipped to production.\nRelease post published.\nFriday immediately after release day\n:\nThe patch release process for the milestone starts. This includes regular and security patch releases.\nAll of the milestone‚Äôs unfinished issues and merge requests are automatically moved to the next milestone, with the exception of\n~security\nissues.\nOn or around the Wednesday immediately following the release day\n:\nProduct plans\nare updated to reflect previous and current releases, including category epics and direction pages.\nOn or around the second Monday following the release day\n:\nNon-critical security patches are\nreleased\n.\nRefer to\nrelease post content reviews\nfor additional deadlines.\nNote that deployments to GitLab.com are more frequent than monthly major/minor releases.\nSee\nauto deploy transition\nguidance for details.\nKickoff\nAt the beginning of each release, we have a kickoff meeting, publicly livestreamed to YouTube. In the call, the Product Development team (PMs, Product Designers, and Engineers) communicate with the rest of the organization which issues are in scope for the upcoming release. The call is structured by\nproduct area\nwith each PM leading their part of the call.\nThe\nProduct Kickoff page\nis updated each month, which follows the content on the livestream.\nMilestone Cleanup\nEngineering Managers are responsible for capacity planning and scheduling for their respective teams with guidance from their counterpart Product Managers.\nTo ensure hygiene across Engineering, we run scheduled pipelines to move\nunfinished work (open issues and merge requests) with the expired milestone to\nthe next milestone, and label\n~\"missed:x.y\"\nfor the expired milestone.\nAdditionally, label\n~\"missed-deliverable\"\nwhenever\n~\"Deliverable\"\nis\npresented.\nThis is currently implemented as part of our\nautomated triage operations\n. Additionally, issues with the\n~Deliverable\nlabel which have a milestone beyond current +1, will have the\n~Deliverable\nlabel removed.\nWe keep the milestone open for 3 months after it‚Äôs expired, based on the\nrelease and maintenance policy\n.\nThe milestone cleanup is currently applied to the\nfollowing groups and projects\n:\nGitLab\n,\nschedule\nGitLab Runner\n,\nschedule\nGitLab Gitaly\n,\nschedule\nGitLab charts\n,\nschedule\nGitLab QA\n,\nschedule\nOmnibus GitLab\n,\nschedule\n(only moving milestone for now, not labelling)\nMilestones closure is in the remit of\nthe Delivery team\n. At any point in time a release might need to be created for an active milestone,and once that is no longer the case, the Delivery team closes the milestone.\nMilestone cleanup schedule\nThe milestone cleanup will happen on the milestone due date.\nThese actions will be applied to open issues:\nOpen issues and merge requests will be moved to the next milestone, and\nlabeled with\n~\"missed:x.y\"\n.\n~\"missed-deliverable\"\nwill also be added whenever\n~\"Deliverable\"\nis presented.\nMilestones are closed when the Delivery team no longer needs to create a backport release for a specific milestone.\nUse Group Labels and Group Milestones\nWhen working in GitLab (and in particular, the GitLab.org group), use group labels and group milestones as much as you can. It is easier to plan issues and merge requests at the group level, and exposes ideas across projects more naturally. If you have a project label, you can promote it to a group milestone. This will merge all project labels with the same name into the one group label. The same is true for promoting group milestones.\nTechnical debt\nWe definitely don‚Äôt want our technical debt to grow faster than our code base. To prevent this from happening we should consider not only the impact of the technical debt but also consider the impacts spreading like a contagion. How big and how fast is this problem going to be over time? Is it likely a bad piece of code will be copy-pasted for a future feature? In the end, the amount of resources available is always less than amount of technical debt to address.\nTo help with prioritization and decision-making process here, we recommend thinking about contagion as an interest rate of the technical debt. There is\na great comment\nfrom the internet about it:\nYou wouldn‚Äôt pay off your $50k student loan before first paying off your $5k credit card and it‚Äôs because of the high interest rate. The best debt to pay off first is one that has the highest loan payment to recurring payment reduction ratio, i.e. the one that reduces your overall debt payments the most, and that is usually the loan with the highest interest rate.\nTechnical debt is prioritized like\nother technical decisions\nin\nproduct groups\nby\nproduct management\n.\nFor technical debt which might span, or fall in gaps between groups they should be brought up for a\nglobally optimized\nprioritization in\nretrospectives\nor directly with the appropriate member of the\nProduct Leadership team\n. Additional avenues for addressing technical debt outside of product groups are\nRapid Action issues\nand\nworking groups\n.\nDeferred UX\nSometimes there is an intentional decision to deviate from the agreed-upon\n, which sacrifices the user experience. When this occurs, the Product Designer creates a follow-up issue and labels it\nDeferred UX\nto address the UX gap in subsequent releases.\nFor the same reasons as technical debt, we don‚Äôt want Deferred UX to grow faster than our code base.\nThese issues are prioritized like\nother technical decisions\nin\nproduct groups\nby\nproduct management\n.\nAs with\ntechnical debt\n, Deferred UX should be brought up for\nglobally optimized\nprioritization in\nretrospectives\nor directly with the appropriate member of the\nProduct Leadership team\n.\nUI polish\nUI polish issues are visual improvements to the existing user interface, touching mainly aesthetic aspects of the UI that are guided by\nPajamas\nfoundations. UI polish issues generally capture improvements related to color, typography, iconography, and spacing. We apply the\nUI polish\nlabel to these issues. UI polish issues don‚Äôt introduce functionality or behavior changes to a feature.\nExamples of UI polish\nAesthetic improvements\n(\nexample\n): removing unnecessary borders from a UI, updating the background color of an element, fixing the font size of a heading element.\nMisalignment of text, buttons, etc\n(\nexample\n): although because many times something isn‚Äôt broken, these improvements are considered UI polish. These could also be considered a bug.\nIncorrect spacing between UI elements\n(\nexample\n): when two interface elements are using inconsistent spacing values, such as 10px instead of 8px. It could also be considered technical debt. Note that if two interface elements have zero space between them, its an obvious bug.\nVisual inconsistencies across different product areas\n(\nexample\n): visual inconsistencies could occur when we have a series of buttons on a particular view. For example, when 3/4 of them have been migrated to use the Pajamas component, and 1/4 of them are still using a deprecated button, resulting in a visual inconsistency. This is considered a UI polish.\nWhat is not UI polish\nFunctional inconsistency related to the experience\n: for example, using a manual action to add an assignee automatically shows the assignee in the sidebar but using a manual action to add a weight to an issue does not automatically show the weight in the sidebar. This is not currently considered UI polish. It would be considered a UX issue.\nImproving visibility of system status\n: status indicator improvements are experience improvements and are not classified as UI polish.\nEven when updating something that is purely visual, such as a status icon, to improve the meaning the user has of what they are viewing, we are trying to improve the experience of that user.\nMonitor Merge Request Trends\nOpen merge requests sometimes become idle (not updated by a human in more than a month). Once a month, engineering managers will receive an\nMerge requests requiring attention triage issue\nthat includes all (non-WIP/Draft) MRs for their group and use it to determine if any action should be taken (such as nudging the author/reviewer/maintainer). This assists in getting merge requests merged in a reasonable amount of time which we track with the\nOpen MR Review Time (OMRT)\nand\nOpen MR Age (OMA)\nperformance indicators.\nOpen merge requests may also have other properties that indicate that the engineering manager should research them and potentially take action to improve efficiency. One key property is the number of threads, which, when high, may indicate a need to update the plan for the MR or that a synchronous discussion should be considered. Another property is the number of pipelines, which, when high, may indicate a need to revisit the plan for the MR. These metrics are not yet included in an automatically created a triage issue.\nSecurity is everyone‚Äôs responsibility\nSecurity\nis our top priority. Our Security Team is raising the bar on security every day to protect users‚Äô data and make GitLab a safe place for everyone to contribute. There are many lines of code, and Security Teams need to scale. That means shifting security left in the\nSoftware Development LifeCycle (SDLC)\n. Each team has an\nApplication Security Stable Counterpart\nwho can help you, and you can find more secure development help in the\n#sec-appsec\nSlack channel.\nBeing able to start the security review process earlier in the software development lifecycle means we will catch vulnerabilities earlier, and mitigate identified vulnerabilities before the code is merged. You should know when and how to proactively\nseek an Application Security Review\n. You should also be familiar with our\nSecure Coding Guidelines\n.\nWe are fixing the obvious security issues before every merge, and therefore, scaling the security review process. Our workflow includes a check and validation by the reviewers of every merge request, thereby enabling developers to act on identified vulnerabilities before merging. As part of that process, developers are also encouraged to reach out to the Security Team to discuss the issue at that stage, rather than later on, when mitigating vulnerabilities becomes more expensive. After all, security is everyone‚Äôs job. See also our\nSecurity Paradigm\n.\nRapid Engineering Response\nFrom time to time, there are occasions that engineering team must act quickly in response to urgent issues. This section describes how the engineering team handles certain kinds of such issues.\nScope\nNot everything is urgent. See below for a non-exclusive list of things that are in-scope and not in-scope. As always, use your experience and judgment, and communicate with others.\nIn Scope\nLast-minute release blocking bug or security patch before an imminent release.\nHigh severity (severity::1/priority::1) security issues. Refer to\nsecurity severity and priority\n.\nHighest priority and severity customer issues based on the\npriority and severity definitions\n.\nNot In Scope\nAn operational issue of GitLab.com or a self managed customer environment. This falls under the\non-call\nprocess.\nSelf developed and maintained tools that are not officially supported products by GitLab.\nFeature request by a specific customer.\nProcess\nPerson requesting Rapid Engineering Response creates an issue supplying all known information and applies\npriority and severity\n(or\nsecurity severity and priority\n) to the best of their ability.\nPerson requesting Rapid Engineering Response raises the issue to their own manager and the\nsubject matter domain\nengineering manager (or the delegation if OOO).\nIn case a specific group cannot be determined, raise the issue to the Director of Engineering (or the delegation if OOO) of the\nsection\n.\nIn case a specific section cannot be determined, raise the issue to the Sr. Director of Development (or the delegation if OOO).\nThe engineering sponsor (subject matter Manager, Director, and/or Sr. Director) invokes all stakeholders of the subject matter as a rapid response task force to determine the best route of resolution:\nEngineering manager(s)\nProduct Management\nDocs\nSecurity\nSupport\nDistribution engineering manager\nDelivery engineering manager (Release Management)\nAdjust\npriority and severity\nor\nsecurity severity and priority\nif necessary, and work collaboratively on the determined resolution.\nPerformance Refinement\nA bi-weekly performance refinement session is held by the Development and QE teams jointly to raise awareness and foster wider collaboration about high-impact performance issues.\nA high impact issue has a direct measurable impact on GitLab.com\nservice levels or error budgets\n.\nScope\nThe\nPerformance Refinement issue board\nis reviewed in this refinement exercise.\nProcess\nTo participate in the bi-weekly refinement, ask your engineering director to forward the invite of the\nPerformance Refinement\nmeeting which is at 15:00 UTC every other Thursday. Here is the\nmeeting agenda\n.\nTo nominate issues to the board:\nAssign\na performance severity\non the issue to help asses the priority assignment for the refinement session.\nEnsure that the issue clearly explains the problem, the (potential) impact on GitLab.com‚Äôs availability, and ideally, clearly defines a proposed solution to the problem.\nUse the label\nbug::performance\n.\nFor the issues under the\nOpen\ncolumn:\nAn engineering manager will be assigned if either the\nMilestone\nor the label\nworkflow::ready for development\nis missing.\nEngineering manager brings assigned issue(s) to the Product Manager for prioritization and planning.\nEngineering manager unassigns themselves once the issue is planned for an iteration, i.e. associated with a\nMilestone\nand the label\nworkflow::ready for development\n.\nTo highlight high-impact issues which need additional discussion, please add an agenda item.\nIf a guest attendee would be helpful for collaboration, please forward the invite. For example, a CSM or Support Engineer may have information that would be helpful for an upcoming topic.\nInfradev\nThe infradev process is established to identify issues requiring priority attention in support of SaaS availability and reliability. These escalations are intended to primarily be asyncronous as timely triage and attention is required. In addition to primary management through the Issues, any gaps, concerns, or critical triage is handled in the\nSaaS Availability weekly standup\n.\nScope\nThe\ninfradev issue board\nis the primary focus of this process.\nRoles and Responsibilities\nInfrastructure\nNominate issues by adding\nInfradev\nlabel.\nAssess\nSeverity\nand\nPriority\nand apply the corresponding label as appropriate.\nProvide\nas much information as possible\nto assist development engineering troubleshooting.\nDevelopment\nDevelopment directors are responsible for\ntriaging Infradev issues\nregularly by following the\ntriage process\nbelow.\nDevelopment managers are encouraged to\ntriage issues\nregularly as well.\nDevelopment managers collaborate with their counterpart Product Managers to refine, schedule, and resolve Infradev issues.\nUsually, issues are nominated as Infradev issues by SREs or Managers in the Infrastructure Department. Development engineers/managers are not expected to nominate Infradev issues.\nHowever, when it‚Äôs necessary to spin off new issues from an existing Infradev issue, development engineers and managers may also apply\nInfradev\nlabel to the new issues.\nWhen development engineers and managers split off new Infradev issues, they must have a\nSeverity\nand\nPriority\nlabels to the new issues.  The labels should correspond to the importance of the follow-on work.\nProduct Management\nProduct Managers perform holistic prioritization of both product roadmap and Infradev issues as one unified backlog.\nProduct Managers collaborate with their counterpart Development Managers to refine, schedule, and resolve Infradev issues.\nTriage Process\n(To be completed primarily by Development Engineering Management)\nIssues are nominated to the board through the inclusion of the label\ninfradev\nand will appear on the\ninfradev board\n.\nReview issues in the Open column. Look for issues within your Stage/Group/Category, but also for those which lack a clear assignment or where the assignment may need correction.\nReview the\nseverity\non the issue to validate appropriate prioritization.\nEnsure that the issue clearly explains the problem, the (potential) impact on GitLab.com‚Äôs availability, and ideally, clearly defines a proposed solution to the problem.\nAssign a Development Manager and a Product Manager to any issue where the\nMilestone\nor the label\nworkflow::ready for development\nis missing.\nDevelopment Manager and Product Manager collaborate on the assigned issue(s) for prioritization and planning.\nDevelopment Manager and Product Manager unassign themselves once the issue is planned for an iteration, i.e. associated with a\nMilestone\nand the label\nworkflow::ready for development\n.\nAll Issues should be prioritized into the appropriate workflow stage. It is the intent to maintain no Open (un-triaged) items.\nIssues with\n~infradev ~severity::1 ~priority::1 ~production request\nlabels applied require immediate resolution.\n~infradev\nissues requiring a ~‚Äúbreaking change‚Äù should not exist.  If a current\n~infradev\nissue requires a breaking change then it should split into two issues.  The first issue should be the immediate\n~infradev\nwork that can be done under current SLOs.  The second issue should be  ~‚Äúbreaking change‚Äù work that needs to be completed at the next major release in accordance with\ndeprecation guidance\n. Agreement from development DRI as well as the infrastructure DRI should be documented on the issue.\nInfradev issues are also shown in the monthly\nError Budget Report\n.\nA Guide to Creating Effective Infradev Issues\nTriage of infradev Issues is desired to occur asynchronously. These points below with endure that your infradev issues gain maximum traction.\nUse the\nInfraDev issue template\nto create the issue on the gitlab-org/gitlab issue tracker.\nClearly state the scope of the problem, and how it affects GitLab SaaS Platforms\n. Examples could include:\nReliability issues: the problem could cause a widespread outage or degradation on GitLab.com.\nexample\nSaturation issues: the problem could leave to increased saturation, latency issues due to resource over-utilization.\nexample\nService-level degradation: the problem is causing our service-level monitoring to degrade, impacting the overall SLA of GitLab.com and potentially leaving to SLA violations.\nexample\nUnnecessary alerts: the problem does not have a major impact on users, but is leading to extraneous alerts, impacting the ability of SREs to effectively triage incidents due to alerting noise.\nexample\nProblems which extend the time to diagnosis of incidents: for example, issues which degrade the observability of GitLab.com, swallow user-impacting errors or logs, etc. These could lead to incidents taking much longer to clear, and impacting availability.\nexample\nDeficiencies in our public APIs which lead to customers compensating by generating substantially more traffic to get the required results.\nexample\nQuantify the effect of the problem\nto help ensure that correct prioritization occurs.\nInclude costs to availability. The\nIncident Budget Explorer\ndashboard can help here.\nInclude the number of times alerts have fired owing to the problem, how much time was spent dealing with the problem, and how many people were involved.\nInclude screenshots of visualization from Grafana or Kibana.\nAlways include a permalink to the source of the screenshot so that others can investigate further\n.\nProvide a clear, unambiguous, self-contained solution to the problem\n. Do not add the\ninfradev\nlabel to architectural problems, vague solutions, or requests to investigate an unknown root-cause.\nEnsure scope is limited\n. Each issue should be able to be owned by a single stage group team and should not need to be broken down further. Single task solutions are best.\nEnsure a realistic severity is applied\n: review the\navailability severity label guidelines\nand ensure that applied severity matches. Always ensure all issues have a severity, even if you are unsure.\nIf possible, include ownership labels\nfor more effective triage. The\nproduct categories\ncan help determine the appropriate stage group to assign the issue to.\nCross-reference links to Production Incidents, PagerDuty Alerts, Slack Alerts and Slack Discussions\n. To help ensure that the team performing the triage have all the available data.\nBy adding ‚ÄúRelated‚Äù links on the infradev issue, the\nInfradev Status Report\nwill display a count of the number of production incidents related to each infradev issue, for easier and clearer prioritization.\nEnsure that the issue title is accurate, brief and clear\n. Change the title over time if you need to keep it accurate.\nBy adding an infradev label to an issue, you are assuming responsibility and becoming the sponsor/champion of the issue\n.\nProvide a method for validating that the original issue still exists\nSometimes infradev issues will resolve on their own, or are resolved as a side-effect of an unrelated change.\nIn the infradev issue description, provide a clear way of checking whether the problem still exists.\nHaving a way of checking validity can save on a great deal of back-and-forth discussion between Infradev Triage participants including Engineering Managers, Directors and Product Managers and make space for other non-resolved issues to get scheduled sooner.\nIdeally, provide a link to a Grafana query or an ELK query and clear instructions on how to interpret the results to determine whether the problem is still occurring.\nCheck the ‚ÄúVerfication‚Äù section in this issue as an example of this\n.\nAlternatively, provide clear instructions on how to recreate or validate the problem.\nIf an issue has been resolved, use the following process:\nReassign the issue back to the author, or an appropriate owner, requesting that they confirm the resolution, and close the issue  if they concur. If not, they should follow up with a note and unassign themselves.\nCode Review Guidelines\nCode reviews are mandatory for every merge request, you should get familiar with and follow our Code Review Guidelines.\nCode Review Values\nGitLab team members' code review values\nIteration\nIn order to provide changes in an iterative and incremental manner, we should always seek to create ‚Ä¶\nRelated Engineering Workflows\nAt GitLab we have a number of engineering processes that we use on a daily basis.\nRelease/Feature Determination Workflow\nThis document explains the workflow for determining if a feature will be included in a milestone ‚Ä¶\nLast modified July 7, 2025:\nExpand infradev process to reference all SaaS platforms rather than just GitLab.com (\n09694d48\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 9544}
{"doc_id": "8645bf4ca039f626", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/cocreate", "title": "GitLab Co-Create Initiative | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nGitLab Co-Create Initiative\nGoal\nThe Co-Create Program is designed to provide our customers with the necessary support and resources to drive innovation together. This could involve developing new features, enhancing existing ones, or fixing bugs.\nOffer\nTo ensure effective use of this collaborative period, GitLab will\nco-locate 1 engineer for 1 week\nto kick off the co-development efforts. Before the onsite engagement, Developer Relations will conduct an interactive workshop to identify collaboration opportunities, ensure their engineers are adequately enabled to contribute to GitLab, and ensure all required legal requirements are met between our customer, and GitLab.\nCustomer Benefits\nDevelop a deeper understanding of GitLab‚Äôs platform beyond its use, understanding how to develop new features, product enhancements, or custom integrations on GitLab.\nDeeper relationship with GitLab product engineers and insights into GitLab‚Äôs codebase and GitLab‚Äôs own development and contributions processes.\nDedicated support for contributions made by their organizations through the Contributor Success team.\nGitLab Benefits\nIncreased trust and ownership from participating customers\nImproved customer empathy for the participating engineer.\nContinuous contributions to fuel our dual fly-wheel approach\nGetting Started\nGitLab has\na list of smaller issues\nready to work on. Identifying and resolving a common problem together while learning the process is the quickest way to get started.\nIdentify areas that are of high priority to the customer together with the Solutions Architect & Contributor Success. Alignment with Product & Engineering is a required prerequisite.\nIdentify the opportunity and create a Slack channel with the following pattern\n#cocreate-initiative-CUSTOMERNAME\n.\nDetermine the level of willingness and ability of the customer to\ncontribute to GitLab\n.\nInvite the CSM, SA, AE, Nick Veenhof & Raimund Hook.\nShare your understanding of what we could work on with the customer. Contributor Success will qualify that the opportunity meets the requirements of the co-create program.\nContributor Success will lead the triage process and partner with the appropriate PMs. We will invite the PMs and other stakeholders of the problem-space to get their buy-in. This will result in 3 pathways:\nThe opportunity is not aligned with our roadmap or product strategy.\nThe opportunity is considered a ‚Äòminor‚Äô contribution and can entirely be handled by contributor success like any other community contribution.\nThe co-create opportunity is considered a major/relevant contribution, aligned with our roadmap and product strategy.\nCSM and Contributor Success present the co-create program and identified pathway & align with the customer. Don‚Äôt make any commitments to the customer until engineering & contributor success has aligned and allocated.\nInvolve Contributor Success (Raimund Hook) to schedule an onboarding session with the customer‚Äôs engineers.\nOnly in case of a major/relevant contribution: as outlined above, we will proceed with going on-site. Invite Shekhar Patnaik into the channel & collaborate with engineering to find the right engineer we can send on-site to co-create together.\nOnly in case of a major/relevant contribution: Have the on-site with the GitLab engineer & the customer‚Äôs engineer(s) to work on the identified problem together.\nRoles & Responsibilities\nOpportunity Identification\n: Solution Architects (SAs) and Customer Success Managers (CSMs) will collaborate with their technical counterparts within the customer‚Äôs organization to introduce the program and identify opportunities for collaboration. They will also work with internal stakeholders such as Product managers.\nEnablement\n: Upon identifying a viable opportunity and the right stakeholders, Developer Relations will conduct an interactive workshop to identify specific co-create opportunities and enable technically the customer‚Äôs engineers to contribute to GitLab.\nCollaborative Development\n: GitLab‚Äôs engineering team will take the lead in pairing engineers with the customer‚Äôs team to support the development effort.\nNominate an Issue for Co-Create\nIs there an issue that should be considered for the curated Co-Create\nissue list\n? Reach out to the\nappropriate PM\nand ask for their approval to add the ~co-create label to the issue. You can refer the PM to the assessment criteria below to help with their evaluation.\nAssessing Issue Compatibility with Co-Create\nPurpose\nThe Co-Create program aims to create long-term contributors by enabling customers to work directly on GitLab. Both simple and complex issues are welcome - simple issues provide great learning opportunities, while complex issues can be broken down into smaller chunks for sustained contribution.\nAssessment Criteria\nProduct Alignment\nAligns with GitLab‚Äôs product vision and roadmap\nBenefits the broader GitLab community\nHas Product Manager awareness and approval\nRed Flags\nConflicts with planned GitLab features or architectural decisions\nChanges to core security or performance-critical systems (requires extra caution and assessment)\nDecision Framework\nPrimary Question\n: Will working on this issue help the customer become a long-term GitLab contributor?\nSecondary Questions\n:\nDoes this align with our product direction?\nIs there a GitLab engineer available with domain expertise?\nResources\nContribute to GitLab\n- this webpage provides a high-level overview of the benefits related to contributing to GitLab‚Äôs open-source community, as well as contribution guidelines and tutorials aimed at helping you better understand and visualize the process.\nOur stewardship of open source\n- this webpage discusses GitLab‚Äôs open-core business model and promises related to open-source stewardship.\nNavigating Project License Requirements\n- A Compatibility Guide for Corporate Contributors.\nGitLab‚Äôs Corporate Contributor Agreement\n- this Agreement covers all contributions made on behalf of a corporate contributor by the corporation‚Äôs authorized contributors. Please email\ncla_managers@gitlab.com\nto start the process of signing this agreement.\nInternal Slack Channel\n#cocreate-initiative\nNick Veenhof\nOther stakeholders & people who were involved during the creation phase\nAlex Cohen\nEmilio Salvador\nSabrina Farmer\nSid Sijbrandij\nDavid Tuan\nAshley Kramer\nA Compatibility Guide for Corporate Contributors: Navigating Project License Requirements:\nUnderstanding Contribution License Agreements at a Glance Type of Contribution Who‚Äôs ‚Ä¶\nCo-Create Action Plan - FY26Q1\nOverview This action plan outlines our strategy to launch 7 new Co-Create projects in FY26Q1. The ‚Ä¶\nCo-Create On-Site Engineer Guide\nOverview The Co-Create Program enables our customers to collaborate directly with GitLab engineers ‚Ä¶\nLast modified June 27, 2025:\nAdding Assessing Issue Compatibility with Co-Create section to the co-create page (\n03963d1d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 994}
{"doc_id": "37c90a39039f011a", "url": "https://handbook.gitlab.com/handbook/company/culture/all-remote/remote-work-glossary", "title": "Remote Work Glossary | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nAll Remote\nRemote Work Glossary\nWhile we strive to use\nlow-context communication\nthat doesn‚Äôt require special knowledge to understand, at times we still rely on industry or GitLab-specific terminology for key concepts. Here is a glossary of terms you may encounter in the handbook.\nLike the\nrest of the handbook\nAsynchronous (async) work/communication\nAsynchronous\nliterally means ‚Äúnot at the same time.‚Äù It‚Äôs a term widely used in development, indicating a process where information can be sent at any time and processed at any time. In other words, the recipient of a message doesn‚Äôt have to be present when the message is sent.\nMaking async communication work requires good processes. Read how we do it\nhere\n.\nColocated environment\nIn contrast to remote work, a colocated work environment is one where people inhabit the same space. A traditional office is a colocated environment. ‚ÄúCo-located‚Äù literally means ‚Äúshared location.‚Äù\nForcing function\nA forcing function is any task, activity, or event that forces you to take action and produce a result. This term comes from interaction design, where it refers to a constraint that shapes behavior. At GitLab, we use\nforcing functions\nto empower and encourage team members to use best practices and to reinforce our\nvalues\n.\nHandbook-first\nMany organizations have a handbook for team members to access shared information on best practices, policies, and resources. GitLab has a ‚Äú\nhandbook-first\n‚Äù approach, which means that we treat our company handbook as a living document, constantly updated to remain the most current, single source of truth. GitLab team members are encouraged to\nlook for answers\nand information in the handbook first, before asking.\nNon-linear workday\nRemote work enables employees to create their own schedules. As a result, remote teams may have individuals working nontraditional hours; taking breaks for family duties, exercise, entertainment, or errands; and having varying schedules from person to person, day to day, or week to week. This allows individuals to be more productive during their preferred working hours, while empowering them to be fulfilled in their personal lives.\nis less predictable than a traditional workday. For a team to function well and permit non-linear workdays, it‚Äôs important to have strong asynchronous communication practices.\nRemote work\nWork that can be done from any location. A ‚Äúremote job‚Äù is a job that doesn‚Äôt require the worker to go to an office or workplace. Remote work typically requires a reliable, fast Internet connection, appropriate equipment, and most importantly, good processes to empower the employee and organization to be effective without relying on physical proximity.\nSee the\nstages of remote work\n: no remote, remote allowed, hybrid remote, and all-remote.\nSingle source of truth (SSoT)\nThis term comes from information systems architecture, but it‚Äôs applicable in any environment where information is distributed. The concept is simple: there should be one central, accessible place where information is kept, and that source should be kept up to date. At GitLab,\nour primary SSoT is the handbook\n. We avoid creating new places to store information, so that when things change, only one document needs to be updated.\nWorking from home\nThis term is mostly self-explanatory, but it‚Äôs important to distinguish from ‚Äúremote work.‚Äù Working from home is often a temporary or intermittent thing; some organizations permit team members to work from home one day per week, or to remain home during a crisis such as the 2020 pandemic. While\nremote work\nusually includes working from home, not all remote workers are always at home.\nLow-context communication\nAt GitLab, we\ncommunicate with low context\n. We provide as much context as possible to avoid confusion.\nHybrid-remote\nHybrid-remote (which can be referred to as part-remote), is\ndifferent than all-remote\n. In an all-remote company, there is no single headquarters, and each team member is free to live and work in any place they choose. Everyone, including executives, is remote, as there are no offices to come to.\nAll-remote\nmeans that each individual in an organization is empowered to\nwork and live\nwhere they are most fulfilled. By including the word ‚Äúall‚Äù in ‚Äúall-remote,‚Äù it makes clear that every team member is equal. No one, not even the executive team, meets in-person on a daily basis.\nInformal communication\nIn colocated environments,\ninformal communication\nis naturally occurring. When individuals are physically located in the same space, there are ample opportunities to chitchat and carry on conversations outside of formal business settings.\nMaking social connections with coworkers is important to building trust within your organization. One must be\nintentional\nabout designing\ninformal\ncommunication when it cannot happen more organically in an office.\nPhases of remote\nAs teams grapple with\ntransitioning\nfrom a colocated environment to a remote one, it‚Äôs common to see differing levels of\nadaptability\n. For some, the transition is fairly smooth, as a\nremote-first infrastructure\nwas already established. For others, the shift is thoroughly disruptive.\nLearn more on the phases of remote adaptation\nhere\n.\nReturn to the main\nall-remote page\n.\nLast modified April 11, 2025:\nFix broken links (\nff74946e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 849}
{"doc_id": "730e23b9b1e083f5", "url": "https://handbook.gitlab.com/handbook/customer-experience/about-cx", "title": "About Customer Experience (CX) | The GitLab Handbook", "text": "The Handbook\nCustomer Experience (CX)\nAbout Customer Experience (CX)\nDeep dive into Customer Experience (CX)\nUnderstanding how this critical practice drives customer-centricity in GitLab\nWhat is Customer Experience (CX)?\nCustomer Experience (CX) encompasses the entire customer journey, from initial awareness, evaluation and purchase to post-sales adoption and expansion, focusing on creating positive, seamless, and meaningful interactions to build loyalty and satisfaction. CX focuses on understanding customer needs, expectations, and emotions to create meaningful, seamless experiences that foster loyalty and advocacy.\nWhat Customer Experience (CX) is not\nJust customer service:\nCustomer service is one component of the overall customer experience\nLimited to UX:\nUX is an important\nelement\nof the customer experience, but it is not the totality of the experience.\nA one-time fix:\nCX is not a one-time project but rather an ongoing strategic approach\nA department-specific initiative:\nCX requires a cross-functional approach, with all departments working together to create a consistent and positive experience.\nGoals of Customer Experience (CX)\nIncrease customer satisfaction, loyalty, and retention\nthrough delivering exceptional experiences and building strong customer relationships to drive repeat business\nReduce customer effort and friction across touchpoints\nby identifying top areas of friction to remediate cross-functionally.\nBuild a positive brand.\nDrive positive word-of-mouth and advocacy, and differentiate from competitors in crowded markets.\nIncrease customer lifetime value\nand reduce acquisition costs by retaining customers and encouraging repeat purchases to increase the long-term value for each customer.\nAlign organizational processes and culture around customer needs\n, creating customer-first organization and product.\nCommon Customer Experience (CX) Deliverables\nCustomer Journey Maps\n. Visual representations of a customer‚Äôs end-to-end experience with a company, highlighting touchpoints, emotions, pain points, and opportunities.\nVoice of Customer (VoC) Programs\n. Systematic collection and analysis of customer feedback through surveys, interviews, social media monitoring, and other channels.\nCustomer Personas\n. Detailed, research-based profiles of typical customer segments that help teams understand and empathize with different user needs and behaviors to drive more personalized experiences.\nExperience Design Frameworks\n. Structured approaches for designing new experiences or improving existing ones based on customer insights.\nCX Data Analytics & Reporting\n. Define and track CX metrics and KPIs like Customer Satisfaction (CSAT), Customer Lifetime Value (CLV), and churn rate to track CX performance and more.\nService Blueprints\n. Operational diagrams that visualize service processes, including front-stage customer interactions and backstage support activities.\nReal-World Examples\nZappos\n: Built their entire business model around exceptional customer experience, with policies like 365-day returns and 24/7 customer service.\nApple\n: Created seamless integration across products, services, and physical retail spaces with the Genius Bar to provide consistent, high-quality experiences.\nAmazon\n: Pioneered one-click ordering, personalized recommendations, and efficient delivery options to make shopping effortless.\nThe most successful CX initiatives align customer needs with business objectives and transform insights into meaningful improvements across all touchpoints in the customer journey.\nLast modified April 10, 2025:\nminor typo (\n5d453d86\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 487}
{"doc_id": "88f20a8adb7713be", "url": "https://handbook.gitlab.com/handbook/security/security-and-technology-policies/audit-logging-policy", "title": "GitLab Audit Logging Policy | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nGitLab Audit Logging Policy\nThis is a Controlled Document\nIn line with GitLab‚Äôs regulatory obligations, changes to\ncontrolled documents\nmust be approved or merged by a code owner. All contributions are welcome and encouraged.\nPurpose\nTo ensure the proper operation and security of GitLab.com, GitLab logs critical information system activity.\nScope\nThe audit logging policy applies to all systems within our production environment. The production environment includes all endpoints and cloud assets used in hosting GitLab.com and its subdomains. This may include third-party systems that support the business of GitLab.com.\nRoles & Responsibilities\nRole\nResponsibility\nGitLab Team Members\nResponsible for following the requirements in this policy\nSecurity Team\nResponsible for implementing and executing this policy\nSystem Owners\nDefinition of individual audit log criteria; Definition and execution of system audit log procedures\nSecurity Management (Code Owners)\nResponsible for approving significant changes and exceptions to this policy\nPolicy\nGitLab shall log and monitor critical information system activity.\nLogs must be retained for a defined period of time.\nLogs must not be modified and or deleted.\nAccess to audit log data must be limited based on the principle of least privilege.\nInline with GitLab‚Äôs Continuous Monitoring Controls\nSystem Owners are responsible for determining what constitutes ‚Äúcritical information system activity‚Äù in their respective system based on their experience and professional judgement\nSuch activity is then documented either in the handbook or a runbook, whichever is found to be appropriate.\nAudit logging process must be created and implemented by the department(s) or team(s) responsible for a given system.\nExceptions\nExceptions to this policy will be tracked as per the\nInformation Security Policy Exception Management Process\n.\nReferences\nWhat is considered production\nProduction Architecture\nConfiguration Management\nLast modified February 14, 2025:\nRemove references to Information Security Policy (\nca0a08d2\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 306}
{"doc_id": "fe824eebe46a710c", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/data-access/database-framework", "title": "Database Framework Group | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nData Access Sub Department\nDatabase Framework Group\nVision\nDeveloping solutions for scalability, application performance, data growth and\ndeveloper enablement especially where it concerns interactions with the\ndatabase.\nMission\nFocusing on the database, our mission is to provide solutions that allow us to\nscale to our customer‚Äôs demands.  To provide tooling to proactively identify\nperformance bottlenecks to inform developers early in the development lifecycle.\nTo increase the number of database maintainers and provide database best\npractices to the community contributors and development teams within GitLab.\nTeam Members\nThe following people are permanent members of the Database Team:\nName\nRole\nAlex Ives\nBackend Engineering Manager, Database\nBackend Engineer\nBackend Engineer, Database\nJon Jenkins\nSenior Backend Engineer, Database\nKrasimir Angelov\nStaff Backend Engineer, Database\nLeonardo da Rosa\nBackend Engineer, Database\nMatt Kasa\nStaff Backend Engineer, Database\nMaxime Orefice\nSenior Backend Engineer, Database\nPrabakaran Murugesan\nSenior Backend Engineer, Database\nSimon Tomlinson\nStaff Backend Engineer, Database\nStable Counterparts\nThe following members of other functional teams are our stable counterparts:\nName\nRole\nMark Wood\nGroup Product Manager, Data Access\nMark Nagle\nSupport Engineer\nChris Nightengale\nSupport Engineer\nStable Counterparts to other teams\nThe Database Group is often called upon to provide consulting to other groups.\nTo more efficiently support these requests we have created this\nstable counterparts table\n.\nMeetings\nWhenever possible, we prefer to communicate asynchronously using issues, merge\nrequests, and Slack. However, face-to-face meetings are useful to establish\npersonal connection and to address items that would be more efficiently\ndiscussed synchronously such as blockers.\nDatabase Group Sync every Tuesday and Thursday at 1:00 PM UTC\nTuesdays - we start with any\n~infradev\nissues requiring reviews, then we\nfocus on weekly priorities.\nThursdays - are optional and open agenda. Anyone can bring topics to the\nteam to discuss. Typically we reserve the first Thursday after the milestone\ncloses to hold a synchronous retrospective.\nDatabase Office Hours\n(internal link);\nYouTube recordings\nWednesdays, 3:30pm UTC (bi-weekly)\n(APAC) Thursdays, 3:30am UTC (bi-weekly, alternating)\nWork\nWe follow the GitLab\nengineering workflow\nguidelines.  To bring an issue to our attention please create an issue in the\nrelevant project.  Add the\n~\"group::database\"\nlabel along with any other\nrelevant labels.  If it is an urgent issue, please reach out to the Product\nManager or Engineering Manager listed in the\nStable Counterparts\nsection above.\nWhat we do\nThe team is responsible for the PostgreSQL application interactions to enable\nhigh performance queries while offering features to support scalability and\nstrengthen availability.  PostgreSQL is the heart of Rails application, and\nthere is no shortage of work to make GitLab more performant, scalable, and\nhighly available from database perspective.  Some of the current priorities\ninclude implementing partitioning to improve query performance and creating\ntooling to enable development teams to implement their own partitioning\nstrategies more easily.  We are working on tools that will help developers\n‚Äúshift left‚Äù in their migration testing prior to deployment.  We are always\nlooking for ways to continuously care for the performance of our databsae and\nimprove our developer documentation.  For more in-depth details of what we are\nworking on please review our\nRoadmap\nsection below.\nIn order to follow what the database group is currently working on, we recommend\nwatching our\ngroup‚Äôs kickoff presentations for new milestones\nand\nthe respective milestone planning issues\n.\nActivity Log\nSince end of 2021, we maintain an\nactivity log\nto keep\ntrack of past projects and outcomes.\nPlanning\nWe use a\nplanning issue\nto discuss priorities and commitments for the milestone.  This happens largely\nasynchronously, but when we do need to discuss synchronously we discuss during\nthe Tuesday team\nmeeting\ntimeslot.\nIssue Weights\nThe database group is experimenting with using expected merge request count as\nan issue weight. Before each milestone starts, we‚Äôll ping each assigned issue\nwithout a weight and ask folks to add weights to them.\nWe decided to use merge request count as an issue weight for a few reasons:\nThe process encourages folks to consider ahead how an issue could be broken\ndown more and enumerate it in advance\nIt‚Äôs easy to describe and learn, making it easier for the team to come to a\nshared understanding\nMerge request rate is one of the main ways our team is measured\nProcess for weighting Issues\nWith an emphasis towards smaller more iterative changes rather than large\nchanges that may take longer to review and merge, consider how many merge\nrequests could this be broken into.\nAdd a comment enumerating the expected merge requests. For example:\nJust one merge request to documentation\nOne to gitlab for database changes, one for new functionality, one for\ndocumentation changes, and one to omnibus\nAdd the count as a weight. For example, if you think there could be one to\ngitlab for database changes, one for new functionality, one for documentation\nchanges, and one to omnibus - you would assign\n/weight 4\nTimeline for implementation\n15.4 - 15.7: We‚Äôll ping each issue in the milestone without a weight and ask\nfolks to add one to collect data\nTriage rotation\nWe have a fairly simple triage rotation. Each week one team member is dedicated\nto triaging incoming issues for the database group. This allows for the rest of\nthe team to focus on their current priorities with fewer interruptions. Each\nweek, a bot will file an issue that gets automatically assigned to next team\nmember in the rotation. We order the triage rotation by alpha-order based on\nfirst name to keep it very simple. If a team member is on PTO the week they are\nassigned, the issue will be re-assigned to the next person.\nIssues needing triage can come in through many different paths. Some common\nareas to monitor while on triage:\nNewer issues (< 7 days old) with the\n~database\nlabel that are not assigned\nto a group.\nExample search\nNewer issues that were assigned\n~group::database\nbut do not have a\nthroughput label or\n~database::triage\nlabels.\nExample search\nNewer issues that were assigned\n~database::triage\nand have not previously\nbeen reviewed\nWhen we get pinged on the #g_database slack channel for assistance\nWhen the triage team member discovers an issue requiring team attention some of\nthe possible outcomes are:\nDirectly address the issue if it is a simple fix\nDirect to our customer support counterparts as appropriate\nAdd the\n~database::triage\nlabel and review during team sync meeting\nAdd a milestone and ping the manager, or label the issue\n~workflow::scheduling\nClose as duplicate and link to the duplicate issue\nThe goal is to keep the number of issues for triage low and manageable.\nTip: In order to remove closed issues from the triage board, use\nthis search\nand edit multiple issues at once to remove the\n~database::triage\nlabel.\nBoards\nDatabase by Milestone\nThe Milestone board gives us a ‚Äúbig picture‚Äù view of issues planned in each\nmilestone.\nDatabase: Build ¬∑ Boards ¬∑ GitLab.org ¬∑ GitLab\nThe build board\ngives you an overview of the current state of work for\ngroup::database\n. These\nissues have already gone through validation and are on the\nProduct Development Build Track\n. Issues are added\nto this board by adding the current active milestone and\ngroup::database\nlabels. Issues in the\nworkflow::ready for development\ncolumn are ordered in\npriority order (top down). Team members use this column to select the next item\nto work on.\nDatabase: Validation\nThe validation board is a queue for incoming issues for the Product Manager to\nreview. A common scenario for the Database Team validation board is when an\nissue is created that requires further definition before it can be prioritized.\nThe issue typically states a big picture idea but is not yet detailed enough to\ntake action. The Database Team will then go through a refinement process to\nbreak down the issue into actionable steps, create exit criteria and prioritize\nagainst ongoing efforts. If an issue becomes too large, it will be promoted to\nan epic and small sub-issues will be created.\nDatabase: Triage\nThe triage board is for incoming issues that require further investigation for\nteam assignment, prioritization, previously existing issues, etc. Within the\nDatabase Group we have implemented a weekly triage rotation where one team\nmember is responsible for monitoring this board for timely responses.\nSay/Do Ratio\nWe use the\n~Deliverable\nlabel to track our Say/Do ratio.  At the beginning of\neach milestone, during a Database Group Weekly meeting, we review the issues and\ndetermine those issues we are confident we can deliver within the milestone.\nThe issue will be marked with the\n~Deliverable\nlabel.  At the end of the\nmilestone the successfully completed issues with the\n~Deliverable\nlabel are\ntracked in two places.  We have a dashboard in Tableau that will calculate how\nmany were delivered within the milestone and account for issues that were moved.\nAdditionally, our milestone retro issue lists all of the\n~Deliverable\nissues\nshipped along with those that missed the milestone.\nRoadmap\nThe Database Group\nRoadmap\ngives a view of what is currently in flight as well as projects that have been\nprioritized for the next 3+ months.\nWeekly Team Updates\nThe enablement section is using status issues in order to provide regular status\nupdates. Each week, the team‚Äôs engineering manager posts general announcments,\nand members of the team post updates on their in progress projects.\nThese issues can be found\nhere (internal)\n.\nDocumentation\nWe document our insights, road maps and other relevant material in this section.\nDatabase Lexicon - terms and definitions relating to our Database\nDatabase Strategy: Guidance for proposed database changes\nOn table partitioning\n(February 2020)\nPostgres: Sharding with foreign data wrappers and partitioning\nSharding GitLab by top-level namespace\nSharding with CitusDB\n(April 2020)\nTable partitioning: Issue group search as an example\n(March 2020)\nWorking with the GitLab.com database for developers\nDatabase schema proposals for Container Registry\n(September 2020)\nWorkload analysis for GitLab.com\n(October 2020)\nMulti-database Background migrations\n(October 2021)\nPerformance Indicators (Internal)\nEnablement::Database - Performance Indicators Dashboard\nAverage Query Apdex for GitLab.com\nMaster\nTarget: 100ms - Tolerable 250ms\nTarget: 50ms - Tolerable 100ms\nReplicas\nTarget: 100ms - Tolerable 250ms\nTarget: 50ms - Tolerable 100ms\nSlack Channel\n#g_database\n-\nOfficial Business\nSlack Channel\n#db-lounge\n- Team Chat\nDatabase Epics\nDatabase Subgroup\n- Issues and\ntemplates related to team processes.\nProduct Development Timeline\nYouTube: Database Team Playlist\nYouTube: Database Office Hours Playlist\nContainer Registry on PostgreSQL\nThis page is meant to track the discussion of different database design approaches for the Container ‚Ä¶\nCrafting Queries with Postgres Ai Plans\nThis is a placeholder document for our upcoming training article on query plans.\nDatabase Group Activity Log\nOverview This page captures the database group‚Äôs activity and documents the outcomes, key ‚Ä¶\nDatabase Group Stable Counterparts\nOverview A central tenet of the Core Platform department is to enable other teams to be more ‚Ä¶\nDatabase Lexicon - terms and definitions relating to our database\nThis is not a comprehensive list of all of the commonly used terms, but rather it is a list of terms that are commonly confused or conflated with other terms.  In each section we will identify common phrases, define our specific usage and list external references for the term in question.\nDatabase Partitioning\nIntroducing PostgreSQL table partitioning to GitLab‚Äôs database This is a working document to ‚Ä¶\nDatabase Strategy\nDatabase Strategy: Guidance for proposed database changes GitLab is offered as a Single Application ‚Ä¶\nIdentifying Database Issues\nA basic guide to identifying the DRI for a database issue\nIntroduction to Background Migrations\nThis is a placeholder document for our upcoming training article on batched background migrations.\nIntroduction to Database Review\nThis is a placeholder document for our upcoming training article on database review.\nMulti-database Background migrations\nBackground migration design for multiple databases This is a working document to specify the design ‚Ä¶\nPartitioning - Issue group search\nDatabase Partitioning: Issue group search We have motivated database partitioning by looking at a ‚Ä¶\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nPostgreSQL 11 sharding with foreign data wrappers and partitioning This document captures our ‚Ä¶\nPostgreSQL Upgrade Cadence\nPostgreSQL yearly upgrade cadence Starting with GitLab 16.0, we follow a yearly upgrade cadence for ‚Ä¶\nSharding GitLab by top-level namespace\nSharding GitLab by top-level namespace This document summarizes the idea of sharding GitLab by ‚Ä¶\nSharding GitLab with CitusDB\nSharding GitLab with CitusDB This is a working document to outline the decision making process with ‚Ä¶\nUnderstanding how Indexes Impact Performance on GitLab.com\nThis is a placeholder article on how indexes impact performance on gitlab.com\nWorking with the GitLab.com database for developers\nA developer‚Äôs guide to working with the GitLab.com database GitLab.com is powered by a large ‚Ä¶\nWorkload analysis for GitLab.com\nWorkload Analysis for GitLab.com This document discusses several approaches to understand the ‚Ä¶\nLast modified July 7, 2025:\nUpdate database frameworks group stable counterparts (\n6305cf38\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2134}
{"doc_id": "8ad64ecc7e28b50e", "url": "https://handbook.gitlab.com/handbook/enterprise-data/organization/programs/data-for-product-managers", "title": "Data For Product Managers | The GitLab Handbook", "text": "The Handbook\nEnterprise Data Team\nData Team Organization\nData Team Programs\nData For Product Managers\nThis page is intended to help Product Managers at GitLab understand what data is available to them and how they can use it to understand how their product is used. This page primarily covers two topics:\nhow\nto consume data, and\nwhat\ndata is available.\nHow to Consume Data at GitLab\nThe user-facing end of GitLab‚Äôs data stack consists of our BI Tool, Tableau, which is connected to our Snowflake data warehouse. The\nTableau handbook page\nof the Data team handbook has general information about Tableau aimed for a wider GitLab audience.\nUseful links for Product Managers\nHere are some useful links that we recommend for you to bookmark:\nData Catalog\n: Helpful guides on how to use our data\nDBT documentation\n: Data model documentation\nService Ping Metrics Dictionary\n: Service Ping metric definitions and metadata\nService Ping documentation\nSnowplow Event Dictionary\n: Snowplow event definitions and metadata\nProduct Data Insights handbook\n: Information about the Product Data Insights team\nTableau documentation\n: Information and guides on how to use Tableau\nQuick Start Guide for Internal Event Tracking\n: Comprehensive instructions on how to instrument event tracking and context around GitLab‚Äôs internal tracking system.\nUsage Data Instrumentation Issue Template\n: Issue template for product managers or engineering teams looking to track usage of their features.\nGetting Tableau Access\nIn order to gain access to Tableau, you will need to follow the instructions\nhere\nand open an access request.\nTo create your own charts and dashboards, you need to have a Creator or Explorer license. You can read more about the Tableau license types\nhere\n.\nPublished Data Sources\nPublished data Tableau sources are great ways to allow Tableau users to build charts without writing any SQL or modeling. The Data team has created several Published Data Sources in Tableau that have the official ‚ÄúCertified‚Äù badge.\nFor example,\nMart Ping Instance\ncan be used to look at Service Ping ping-level details.\nHow do I know what tables are available?\nThe Data team uses a tool called\ndbt\nfor our data transformation layer. A nice feature of dbt is dbt docs, which automatically creates documentation for all of the models in our schema. Our dbt docs instance can be found\nhere\n.\nTableau will show a list of all tables available for querying when you form a connection to Snowflake in the Data Source pane.\nEach data source has a distinct naming convention for tables (see more about\nKey Data Sources below\n).\nService Ping models contain\nping_instance\nin the name (ex:\ndim_ping_instance\n,\nmart_ping_instance_metric_monthly\n)\nGitLab.com Postgres db event models start with\nfct_event\nor\nmart_event\n(ex:\nfct_event_user_daily\n,\nmart_event_namespace_monthly\n)\nGitLab.com Postgres db table replicas are named after the source table/content (ex:\ndim_merge_request\n,\ndim_namespace\n)\nSnowplow models contain\nbehavior\nin the name (ex:\nmart_behavior_structured_event\n,\nfct_behavior_website_page_view\n)\nHow can I update or add more information to the dbt docs?\nYou will need to locate the file you wish to update or create in the\ngitlab-data analytics project\n. Please be sure to read and follow the\nSQL style guide\nwhen creating the changes. If you wish to update only the descriptions or information about tables you will be looking for a\nschema.yml\nfile. If you wish to actually change the structure of tables it will be a\n*.sql\nfile.\nNext, create a branch and then submit an MR using the\ndbt Model Changes\ntemplate to the\ngitlab-data analytics project\n. When creating your branch and MR please follow the\nData team workflow\nand use the appropriate\nData team labels\n.\nHow can I get help?\nIf you ever get stuck or have a question, please ask for help in the\n#data slack channel\n. It is recommended to also cross-post questions in your #g_, #s_, or #product channels because many PMs have data related expertise and can provide you quick assistance for common product data questions.\nRemember, it‚Äôs helpful for us to know the context behind your question. Don‚Äôt just say\nwhat\nyou want to know but also\nwhy\nso others can point you to a more efficient way to get your answer.\nThis document is meant to serve as a guide of best practices. Please add what you learn when you need help with this content.\nIf needed, you may create an issue in the\nProduct Data Insights project\nand assign it to a\nproduct data analyst\n. You can read more about working with the PDI team\nhere\n.\nGuidance for Instrumenting Feature Tracking\nAs a GitLab PM, you‚Äôre responsible for defining and tracking metrics for your team‚Äôs features. This guide will walk you through the process, tools, and resources available to help you succeed.\nCLI generator to automatically create event and metric definition files\n: An interactive CLI that gathers your requirements, automatically generates event and metric definition files, and produces ready-to-use instrumentation code for engineers to implement and test\nQuick Start Guide for Internal Event Tracking\n: Comprehensive instructions on how to instrument event tracking and context around GitLab‚Äôs internal tracking system\nGetting Started Standard Context Fields\n: Documentation on each standard context field included in Internal Event Tracking and descriptions of their intent\nUsage Data Instrumentation Issue Template\n: Issue template for product managers or engineering teams looking to track usage of their features\nProduct Data Insights Performance Indicator Chart Issue Template\nProduct Data Insights Ad Hoc Analysis Issue Template\nSelf-Service Feature Tracking Dashboards\nIf your analytics needs for your new or recently modified feature are met by these dashboards, you can skip creating a Product Data Insights (PDI) Issue:\nPD: Centralized Product Usage Metrics\nPD: Product Usage Metrics (.com & Service Ping)\nPD: Firmographic Product Metric Usage\nPD: Subscription Feature Usage Trends\nAI Gateway Reporting\nProcess for Instrumenting Feature Tracking\nPlan Your Analytics Requirements\nOwner: Product Manager\nStart by determining what you need to measure:\nWhat user behaviors indicate feature success?\nWhat metrics will help you make product decisions?\nWhat data points do you need for your team‚Äôs KPIs?\nIf existing dashboards don‚Äôt meet all of your needs, create a Product Data Insights (PDI) Issue to request additional analytics.\nProduct Data Insights (PDI) Issue\nCreate Instrumentation Issue\nOwner: Product Manager\nOption A: Use the CLI Generator to generate requirements for your Instrumentation Issue\nUse the\nCLI generator tool\nBenefits:\nAutomatically generates event and metric definition files\nProduces ready-to-use instrumentation code\nReduces implementation time for engineers\nEnsures consistency with GitLab‚Äôs tracking standards\nOption B: Use Usage Data Instrumentation Issue Template to outline metric requirements\nUse the\nUsage Data Instrumentation Issue Template\nTag your\nassigned product analyst\nto review metric properties\nImplement Tracking\nOwner: Engineer\nCreate an Internal Events Tracking Merge Request (MR)\nImplement new metrics according to specifications defined in Usage Data Instrumentation Issue\nTest and Validate\nOwner: Engineer\nPerform\nlocal testing\nRequest review from Analytics Instrumentation team member\nVerify test events match properties defined in the Issue\nCreate Analysis\nOwner: Product Analyst\nFor analyses requiring user and event grain GitLab.com data (Snowplow), data collection will be sufficient for analysis 1-2 weeks after MR merge\nFor analyses requiring aggregated SM and Dedicated data (Service Ping), data collection will be sufficient for analysis 6-8 weeks after MR merge due to minimum version adoption requirement for Service Ping metrics\nComplete requirements specified in PDI Issue (if applicable)\nSpecial Considerations for AI Gateway Features\nWhen instrumenting features routed through the AI Gateway, follow these guidelines:\nRepresent new features routed through the AI Gateway as unit primitives\nNew distinct features should be represented as a\nunit primitive\nTo add a new unit primitive, reach out to ~‚Äúgroup::cloud connector‚Äù\nSet up tracking for the new unit primitive\nContact ~‚Äúgroup::analytics instrumentation‚Äù with the necessary fields to be tracked\nFor more information on AI Gateway instrumentation, see the\ndocumentation\nOnce instrumented, AI Gateway events using the unit primitive framework:\nCannot be blocked by users\nAre tracked at the event grain for all deployment types\nFor more granular reporting\nIf you need more detail than a ‚Äòrequest‚Äô of the AI Gateway at the broad feature grain, use\nInternal Events Tracking\nInternal events can be connected to unit primitive events using a\ncorrelation_id\nfor behavior funnel or more granular reporting use cases (GitLab.com only)\nViewing AI Gateway data\nAI Gateway Reporting\nautomatically displays new unit primitive requests once they have been instrumented by ~‚Äúgroup::analytics instrumentation‚Äù\nAdditional analytics can be requested by creating a\nProduct Data Insights (PDI) Issue\nKey Contacts and Resources\nFor questions about the feature tracking process, reach out to #g_monitor_analytics_instrumentation.\nThe Analytics Instrumentation team owns our internal product feature tracking system.\nBy following this process and understanding the roles involved, PMs can effectively instrument and track metrics for their features, enabling data-driven decision-making and product improvement.\nKey Data Sources for Product Managers at GitLab\nWe have three primary data sources for product usage data:\nService Ping\n(for Self-Managed, Dedicated, and GitLab.com)\nGitLab.com Postgres Database\n(for GitLab.com)\nSnowplow\n(for GitLab.com and the AI Gateway)\nEach data source comes with its own caveats, capabilities, and limitations. The first question we on the Data or PDI teams ask product managers is usually ‚Äúare you interested in knowing this for Self-Managed or GitLab.com?‚Äù Our approach to answering your question and the data source(s) available differ greatly between the two. Although our Self-Managed offering has many more active customers, our GitLab.com offering has much more granular data available to analyze.\nService Ping (Version App)\nService Ping\nis a custom tool that GitLab built to collect weekly aggregated information from our customers across various deployment options:\nSelf-Managed: Customers who host our product on their own hardware.\nGitLab Dedicated: Our fully-managed, single-tenant SaaS offering where each customer gets their own isolated instance of GitLab, hosted and managed by GitLab‚Äôs team.\nGitLab.com: Our multi-tenant SaaS offering.\nKey Concepts\nService Ping collects and reports data at an installation level. For Self-Managed and GitLab Dedicated customers, this means one ping per installation per week. For GitLab.com, which is a single, large-scale installation, Service Ping reporting\nstill\noccurs as a single ping within our Service Ping framework, representing the entire GitLab.com ecosystem. (In other words, despite the deployment type or installation size, we still receive data at the installation level).\nService Ping provides pre-aggregated counts of specific events/actions (aka metrics). We are unable to do any analysis at a more granular level (ex: user-level, project-level, etc) since the metrics are already aggregated.\nSending Service Ping is optional but defaults to being on.\nYou can see the percent of paid subscriptions that successfully send a ping every month on\nthis chart\n. We do not know about the opt-in rate of unlicensed (Core/Free) users but assume the same rate. Here is more\ninformation\non why some installations block data from being sent.\nSince we do not receive pings from every customer, we apply an estimation in monthly reporting to fill in the gaps. You can read more about the estimation methodology in the internal handbook\nhere\n.\nCustomers must adopt a version of GitLab with a metric instrumented in order to report the metric. For example, if a metric is added in 17.3, only customers on versions >= 17.3 will report the metric. This means that it can take months to have a sufficient number of customers reporting the metric.\nYou can track GitLab version adoption on\nthis dashboard\n.\nPings are added to Snowflake daily. By the 2nd of the month all the data should be available from the previous month.\nKey Columns\nping_deployment_type\nis the best column to use in order to differentiate Self-Managed, Dedicated, and GitLab.com usage.\nIf using\nping_delivery_type\n, know that both Dedicated and GitLab.com are included in\nSaaS\n.\nUse the\nmetrics_path\ncolumn to filter to the metric of interest. You can find more metric-level details and metadata in the\nService Ping Metrics Dictionary\n.\nFor monthly reporting, we limit to the last ping we receive each month per installation. You can filter your queries to\nis_last_ping_of_month = TRUE\nWe often talk about ‚Äúinstallations‚Äù or refer to the\ndim_installation_id\ncolumn. An ‚Äúinstallation‚Äù is the unique combination of\ndim_instance_id\n/\nuuid\nand\ndim_host_id\n.\nWe use ‚Äúinstallations‚Äù since a single ‚Äúinstance‚Äù (\ndim_instance_id\n/\nuuid\n) can have multiple hosts.\nExamples\nHere is an example of a query that provides ping-level details, filters out GitLab.com, and limits to the last ping of the month:\nSelf-Managed and Dedicated Ping-Level Details\n*\ncommon_mart\n.\nmart_ping_instance\nping_created_at\n>=\n-\n30\nping_deployment_type\n!=\n'GitLab.com'\nis_last_ping_of_month\n=\n1000\n;\nHere is an example of a query that provides metric-level reporting by month and deployment type:\nService Ping Metric by Month and Deployment Type\nping_created_date_month\n,\nping_deployment_type\n,\nmetrics_path\n,\n(\nmonthly_metric_value\n)\nmonthly_metric_value\n,\n(\nmonthly_metric_value\n>\n0\n,\ndim_installation_id\n,\n))\ninstallation_count\n--count of installations reporting usage that month\ncommon_mart\n.\nmart_ping_instance_metric_monthly\n--this model already filters to the last ping of the month\nping_created_date_month\n>=\n'2024-06-01'\nmetrics_path\n=\n'usage_activity_by_stage_monthly.secure.sast_scans'\n--arbitrary metric, switch this out for metric of interest\n1\n,\n2\n,\n3\n1\n,\n2\n;\nGitLab.com Postgres Database\nBecause GitLab.com is a GitLab instance hosted by GitLab, we have access to the instance‚Äôs postgres database and can load parts of it into our Snowflake data warehouse. This means we can get a very detailed look into how our product is used on GitLab.com.\nAny part of the product that creates a table on the backend (see the\nschema\nfile) can be added to the ELT job which will sync 3x a day to the warehouse. From there, all we need to do is build a dbt base model to make them accessible in Tableau.\nWhat if the table or column I want isn‚Äôt in the data warehouse?\nOur ELT process works by explicitly stating which columns and tables we want to import into the data warehouse. This means we might be missing a column or whole table that you want to have in the data warehouse for analysis. When this is the case, please create a Data issue letting us know what you want us to import using the\nNew Data Source template\n. Before doing so, please confirm that the table/column is truly part of the\nproduction schema\n.\nReplicating Service Ping using GitLab.com Data\nBecause Service Ping only aggregates data at an\ninstallation\nlevel, it is not super useful for GitLab.com since we often want to see information at the\nnamespace\nlevel. For example, knowing that 40K people used your stage on GitLab.com is somewhat useful, but you‚Äôll probably want to know more context (Are they free or paid? What plan are they on? Do I have any power users or is usage equally distributed?)\nBut since we have access to the GitLab.com Postgres database, we are capable of replicating many Service Ping metrics at the namespace level or even the user level.\nThis model\nexemplifies how some Service Ping metrics could be replicated for GitLab.com at the namespace level. This model is available as a Published Data Source in Tableau as\nMart Event Valid\n.\nExamples\nHere is an example of a query that will generate GitLab.com UMAU by day:\nGitLab.com UMAU by Day\nevent_date\n,\n(\ndim_user_id\n)\numau\ncommon_mart\n.\nmart_event_user_daily\nevent_date\n>=\n-\n30\nis_umau\n=\n1\n;\nHere is an example of a query that will generate paid GitLab.com GMAU by month:\nPaid GitLab.com GMAU by Month\nevent_calendar_month\n,\ngroup_name\n,\nuser_count\ncommon_mart_product\n.\nrpt_event_xmau_metric_monthly\nevent_calendar_month\n>=\n'2024-06-01'\nis_gmau\n=\nuser_group\n=\n'paid'\n2\n,\n1\n;\nSnowplow\nSnowplow Analytics is an open-source enterprise event-level analytics platform that enables data collection from multiple platforms for advanced data analysis.\nWe pseudonymize\nuser_id\non all Snowplow events, meaning that we are unable to connect an event to a specific user (or the GitLab.com Postgres db).\nWe also pseudonymize page URLs to remove any potential PII or RED data.\nSelf-Managed and Dedicated installations do not send Snowplow data to GitLab.\nThe one exception is the AI Gateway where we receive events from all deployment types (Self-Managed, Dedicated, and GitLab.com).\nKey Concepts\nBecause Snowplow does not rely on Service Ping, we do not need to wait for a version of GitLab to be adopted to start receiving data. We can collect and visualize data as soon as the instrumentation is deployed.\nEven though the pseudonymization of\nuser_id\nof Snowplow events is a limitation, with the fast feedback, Snowplow is an effective source of data to measure feature adoption and usage.\nNote: We are still able to count the number of users who engage with a feature, which is sufficient for most use cases. We just do not know who those users are.\nSnowplow events can be blocked by the user.\nInstrumentation\nAnalytics Instrumentation has built\nInternal Event tracking\n, which will guide you on how to instrument Snowplow events. To get started, use the\nQuick Start Guide to Internal Event Tracking\n.\nOnce your Snowplow events have been instrumented, as part of the validation process, the newly instrumented event should be tested to ensure it is working properly. While you as the PM probably won‚Äôt be doing the validation yourself every time, it is nice to know how it works. You can learn more about testing Snowplow events in the\nInternal Event documentation here\n.\nVisualize your events in Tableau\nThe data you have instrumented is most useful if it can be visualized in a chart. Refer to the\nTableau section\nof the handbook for information on creating charts.\nFirst, check if they are correctly stored in Snowflake in the\nSnowplow Event Exploration Dashboard\n(note: the data volume is quite large, so please be patient with dashboard load time). You can use the filters to find your events. If you are not sure of the value of the different attributes, they should have been captured in the\nevent definition\n. If not, check with your engineering manager.\nOnce you have verified that your events are properly stored, you are ready to query and visualize the data! Please be aware that we are collecting several millions of events (page views, structured events) per day, so the whole dataset is quite slow to query. In order to make it easier to explore this data source, we have created several smaller tables:\ncommon_mart.mart_behavior_structured_event\n: contains ALL structured events (these are what is instrumented with Internal Event tracking)\ncommon.fct_behavior_website_page_view\n: contains ALL page views\ncommon.fct_behavior_unstructured_event\n: contains ALL unstructured events (including click events, form submissions, etc)\nExamples\nPRO TIP: Optimizing queries\nThe Snowplow models are quite large and can be slow to query. To make your query faster, use a date (\nbehavior_at\n) filter in your\nstatement.\nHere is an example of a query that will look at the top 100 Snowplow events from the last several days:\nTop 100 Snowplow Events\nevent_action\n,\n(\n*\n)\nevent_count\ncommon_mart\n.\nmart_behavior_structured_event\nbehavior_at\n>=\n-\n3\n1\n2\n100\n;\nHere is an example of a query that will look at top 100 pages viewed in the last several days (note how the URLs are pseudonymized):\nTop 100 Pages Viewed\npage_url\n,\n(\n*\n)\npage_view_count\ncommon\n.\nfct_behavior_website_page_view\nbehavior_at\n>=\n-\n3\n1\n2\n100\n;\nOther data sources**\nZuora\nZuora is our SSOT for subscription information and key metrics like ARR and Seat Count.\nCustomers Dot (CDot) database\nCDot is our SSOT for Fulfillment-related data, including trials.\nSheetload\nYou can load your own Google Sheets into the data warehouse. Read more\nhere\n.\nAnalytics Instrumentation\nis part of the product org and is completely separate from the Data and Product Data Insights teams. However, these teams collaborate closely as the Customer Product Adoption pod.\nThe Analytics Instrumentation team members are the\ns for data collection across both GitLab.com and Self-Managed. They own Service Ping and Snowplow. They are the ones to go to for questions like:\nHow do I instrument a new metric for Self-Managed?\nWhat are the best practices for adding to Service Ping?\nHow can I use Snowplow/Internal Events to track a frontend interaction on GitLab.com?\nCan I utilize Snowplow/Internal Events to track events on the server-side?\nLast modified March 28, 2025:\nUpdate links from public handbook to internal handbook impacted by Enterprise Data section reorganization (\n2b66c7af\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3375}
{"doc_id": "0eb17eb7f7946df4", "url": "https://handbook.gitlab.com/handbook/labor-and-employment-notices", "title": "Labor and Employment Notices | The GitLab Handbook", "text": "The Handbook\nLabor and Employment Notices\nIntroduction\nSince GitLab is an\nall remote\ncompany we don‚Äôt have a physical worksite or breakroom wall upon which to post important labor and employment notices, so this page is our version of that.\nGitLab, Inc. & GitLab Federal LLC\nAlabama\nChild Labor Law\nYour Job Insurance - Unemployment Insurance\nWorkers‚Äô Compensation  Poster - Inc.\nAlaska\nSafety and Health Protection on the Job\nEmergency Information\nHuman Rights Law - Sexual Harassment\nUnemployment Insurance\nSummary of Alaska Child Labor Law\nSummary of Alaska Wage and Hour Act\nAlaska - Americans with Disabilities Act\nAlaska - Alcohol and Drug-free Workplace Policy\nState of Alaska Whistleblower Act\nArizona\nConstructive Discharge Notice\nDiscrimination is Prohibited in Employment\nEarned Paid Sick Time\nEmployee Safety and Health Protection\n2024 Minimum Wage\nUnemployment Insurance\nWorkers‚Äô Compensation - Inc.\nBodily Fluids Work Exposure\nand\nWork Exposure to MRSA, Spinal Meningitis, or Tuberculosis\nArkansas\nMinimum Wage, Overtime, Child Labor, Wage Collection Notice\nHow to Claim Unemployment Insurance\nWorkers‚Äô Compensation Notice - Inc.\nCalifornia\nCalifornia Law Prohibits Workplace Discrimination and Harassment\nTransgender Rights in the Workplace\nYour Rights and Obligations as a Pregnant Employee\nFamily Care & Medical Leave & Pregnancy Disability Leave\nIndustrial Welfare Commission Wage Order\nCalifornia Minimum Wage\nPaid Sick Leave\nSafety and Health Protection on the Job\nNotice to Employees - Injuries Caused by Work\nWhistleblower Protections\nNotice to Employees - Unemployment, Disability, and Paid Family Leave insurance\nNotice to Employees - Unemployment Insurance Benefits\nSexual Harassment Fact Sheet\nSupplemental Paid Sick Leave - COVID-19\nPayday Notice\nRight to Vote Notice\nVictims of Domestic Violence Leave Notice\nWorkers‚Äô Compensation Notice - Inc.\nEmployee Polygraph Protection Act\nCity of Berkeley\nMinimum Wage Poster\nCity of Daly City\nMinimum Wage Poster\nCity of Emeryville\nMinimum Wage and Paid Sick Leave\nCOVID-19 Paid Sick Leave\nCity of Los Angeles\nFair Chance Initiative for Hiring Ordinance to Applicants and Employees\nMinimum Wage and Paid Sick Leave\nLos Angeles County\nFair Chance Notice for Employers\nMinimum Wage Ordinance\nCity of Oakland\nMinimum Wage/Paid Sick Leave/Service Charge\nCity of San Diego\nEarned Sick Leave\nMinimum Wage\nCombination Poster\nCity of San Jose\nMinimum Wage Bulletin\nOpportunity to Work Notice\nCity of San Francisco\nMinimum Wage Poster\nPaid Sick Leave\nFair Chance Ordinance\nHealth Care Security Ordinance\nFamily Friendly Workplace Ordinance\nPaid Parental Leave Ordinance\nSalary History Ordinance\nCOVID-Related Employment Protections\nPublic Health Emergency Leave\nCity of Santa Monica\nMinimum Wage, Paid Sick Leave and Service Charge Law\nCity of West Hollywood\nMinimum Wage - English\nMinimum Wage - Spanish\nColorado\nEmployment Anti-Discrimination Poster\nHousing Anti-Discrimination Poster\nPublic Accommodations Anti-Discrimination Poster\nEmployment Security Act\nOvertime & Minimum Pay Standards\nNotice to Employer of Injury\nNotice of Paydays\nWorkers‚Äô Compensation Act\nPaid Family and Medical Leave Insurance\nPaid Leave, Whistleblowing, and Personal Protective Equipment\nConnecticut\nSexual Harassment is Illegal\nPaid Sick Leave\nPaid Leave poster\nDiscrimination is Illegal\nMinimum Wage\nWorker‚Äôs Compensation Notice\nElectronic Monitoring Notice\nOffice of the Healthcare Advocate\nPregnancy Discrimination and Accommodation in the Workplace\nDelaware\nLabor Law Poster\nSexual Harasment Notice\nRespectful Workplace and Anti-Discrimination Policy\nDistrict of Columbia\nPaid Family Leave Employee Notice\nCOVID-19 Leave Notice\nEqual Employment Opportunity\nDC Family and Medical Leave Act\nRight to Breastfeed\nProtecting Pregnant Workers Fairness Act\nParental Leave Act\nMinimum Wage and Overtime\nUnemployment Compensation\nAccrued Sick and Safe Leave Act of 2008\nLiving Wage Act\nFlorida\nMinimum Wage\nFlorida Law Prohibits Discrimination\nEqual Opportunity is the Law\nUnemployment Compensation Benefits\nWorkers‚Äô Compensation\nGeorgia\nUnemployment Insurance\nVacation - Unemployment Insurance\nWorkers‚Äô Compensation\nBill of Rights for the Injured Worker\nWorkers‚Äô Compensation Fraud\nHuman Trafficking\nEqual Pay for Equal Work Act\nHawaii\nLabor Law Poster\nDisability Compensation Law\nLaws Prohibiting Employment Discrimination\nOccupational Health and Safety Laws\nUnemployment Insurance Law\nRequired Notice to Dislocated Workers/Plant Closings\nIdaho\nEqual Opportunity is the Law\nIdaho Law Prohibits Discrimination in Employment\nMinimum Wage\nUnemployment Insurance Benefits\nWorkers‚Äô Compensation Notice - Inc.\nIllinois\nYour Rights Under Illinois Employment Laws\nVictims‚Äô Economic Security and Safety Act (VESSA)\nPregnancy Rights Notice\nYour Rights Under the Illinois Service Member Employment and Reemployment Rights Act\nRight to Employment Free from Discrimination and Sexual Harassment\nWorkers‚Äô Compensation Notice - Inc.\nCity of Chicago\nMinimum Wage, Paid Sick Leave, Wage Theft and Human Trafficking\nCook County\nEarned Sick Leave Ordinance\nIndiana\nUnemployment Insurance Claimant Handbook\nJob Safety and Health\nMinimum Wage\nEqual Employment Opportunity is the Law\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nIowa\nAll in One\nUnemployment Insurance\nSafety and Health Protection on the Job\nYour Rights Under Iowa‚Äôs Minimum Wage\nEqual Employment Opportunity\nWorkers‚Äô Compensation Notice - Inc.\nSummary of Work-Related Injuries and Illnesses\nKansas\nUnemployment Insurance\nKansas Law Provides Equal Opportunity\nWorkers‚Äô Compensation Notice - Inc.\nKentucky\nSafety and Health on the Job\nWage and Hour Laws\nWage Discrimination Because of Sex\nEqual Employment Opportunity\nUnemployment Compensation Benefits\nWorkers‚Äô Compensation Notice - Inc.\nLouisiana\nAge Discrimination\nGenetic Discrimination\nMinor Labor Law Placard\nOut-of-State Motor Vehicles\nNational Guard (ESGR) State Poster\nPregnancy Rights of Employees\nSickle Cell Trait Discrimination\nTimely Payment of Wages\nUnemployment Insurance\nEarned Income Credit\nEqual Opportunity of All\nIndependent Contractor or Employee\nWorkers‚Äô Compensation Notice - Inc.\nMaine\nMinimum Wage\nSexual Harassment\nWhistleblower‚Äôs Protection Act\nWorkers‚Äô Compensation\nVideo Display Terminals\nChild Labor Laws\nRegulation of Employment\nMaine Employment Security Law\nMaryland\nEmployment Discrimination is Unlawful\nMaryland Job Safety and Health\nMinimum Wage and Overtime Law\nEqual Pay for Equal Work\nEarned Sick and Safe Leave\nUnemployment Insurance Law\nHealth Insurance Coverage\nPregnancy Rights\nEmployment of Minors\nMontgomery County\nMinimum Wage and Overtime Law\nEarned Sick and Safe Leave\nMassachusetts\nPaid Family and Medical Leave\nEarned Sick Time\nMassachusetts Wage and Hours Laws\nFair Employment Law\nSexual Harassment\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nMichigan\nUnemployment Benefits\nMichigan Law Prohibits Discrimination\nMinimum Wage and Overtime\nPaid Medical Leave\nChild Labor\nSafety and Health Protection on the Job\nWhistleblower Protection\nMinnesota\nAge Discrimination\nMinimum Wage\nSafety and Health Protection on the Job\nUnemployment Insurance\nWorkers‚Äô Compensation Notice - Inc.\nLabor and Employment Rights\nEarned Sick and Safe Time\nNursing Mothers, Lactating Employees, and Pregnancy Accommodations Notice\nCity of Duluth\nEarned Sick and Safe Time\nCity of Minneapolis\nLabor and Employment Rights\nCity of Saint Paul\nEarned Sick and Safe Time and Minimum Wage\nCity of Bloomington\nEarned Sick and Safe Time\nMississippi\nUnemployment Insurance\nWorkers‚Äô Compensation Notice - Inc.\nMissouri\nDiscrimination in Employment\nNotice to Victims of Domestic and Sexual Violence - Leave Time Allowed\nMissouri Minimum Wage Law\nWorkers‚Äô Compensation Notice - Inc.\nMontana\nMontana Wage & Hour - English\nMontana Wage & Hour - Spanish\nWorkers‚Äô Compensation Notice - Inc.\nNebraska\nNebraska Minimum Wage\nDiscrimination in Employment\nUnemployment Insurance Advisement of Benefit Rights\nJob Safety and Health\nWorkers‚Äô Compensation Notice - Inc.\nNevada\nRules to be Observed by Employers - English\nReglas para ser Observadas por Los Empleadores\nAB 190 - English\nAB 190 - Spanish\nAB 307 - English\nAB 307 - Spanish\nSB 209 - English\nSB 209 - Spanish\nNotice of Limitations Affecting the Application of Lie Detector Tests\nAviso de Limitaciones que Afectan La Aplicacion de Pruebas de Deteccion de Mentiras\nDomestic Violence Bulletin\nBolet√≠n de V√≠ctimas de Violencia Dom√©stica\nSB 312 Paid Leave - English\nSB 312 Permiso Remunerado\nAnnual Minimum Wage Bulletin\nBolet√≠n Anual Salario Minimo\nAnnual Bulletin - Daily Overtime\nBolet√≠n Anual Tiempo Extra Diario\nInformation for the Unemployed Worker\nNevada Law Prohibits Discrimnation\nLa Ley de Nevada Prohibe La Discriminaci√≥n\nNotice to Employer that Employee is Sick or Sustained Injury\nAviso al empleador de enfermeadad o lesi√≥n del empleado\nNursing Mothers Accommodation Act\nLey de Acomodamiento para Madres que Amamantan\nPregnant Workers Fairness Act\nLey de Equidad de Trabajadoras Embarazadas\nWorkers‚Äô Compensation\nNew Hampshire\nProtective Legislation Law\nCriteria to Establish an Employee or Independent Contractor\nMinimum Wage Law\nWhistleblowers Protection Act\nWorkers‚Äô Right to Know\nEqual Pay Law\nUnemployment Notice\nEmployment Discrimination is Against the Law\nWorkers‚Äô Compensation Notice - Inc.\nOptional Paid Family and Medical Leave Insurance\nNew Jersey\nNew Jersey Earned Sick Leave\n-Employers benefit year is Jan 1 - Dec 31\nWage and Hour Law Abstract\nChild Labor Law\nEmployer Obligation to Maintain and Report Records\nPayment of Wages\nFamily Leave Insurance\nUnemployment & Temporary Disability Insurance\nCEPA Whistleblower Act\nNew Jersey Safe Act\nGender Equity Notice\nPublic Employees Occuptional Safety and Health\nNew Jersey Misclassifiation Notice\nThe Law Against Discrimination (LAD) Prohibits Discrimination and Harassment\nThe New Jersey Family Leave Act (NJFLA)\nWorkers‚Äô Compensation Notice - Inc.\nWorkers‚Äô Compensation Notice - Federal\nNew Mexico\nMinimum Wage\nHuman Rights Act\nHuman Trafficking Poster\nJob Safety and Health Poster\nNotice of Accident or Occupational Disease Disablement\nPaid Sick Leave\nBernalillo County\nEmployee Wellness Act\nNew York\nNew York Correction Law, Article 23-A\nNew York State Human Rights Law\nEqual Pay Provision\nMinimum Wage\nWage Theft Prevention\nNew York State Disability Statement of Rights (DB217S)\nRights of Nursing Mothers to Express Breast Milk in the Work Place\nChild Labor Law - permitted working hours\nProhibition of Employer Retaliation\nTime Off and Work Hours Notice\nTime Off to Vote Poster\nWorkers‚Äô Compensation Notice - Inc.\nWorkers‚Äô Compensation Notice - Federal\nCity of New York City\nWorkers‚Äô Bill of Rights\nSafe and Sick Leave\nand Notice(\nhttps://www.nyc.gov/assets/dca/downloads/pdf/about/PaidSafeSickLeave-MandatoryNotice-English.pdf\n)\nEmployers calendar year is Jan 1 - Dec 31st.\nNorth Carolina\nCertificate of Coverage and Notice to Workers as to Benefit Rights\nWage and Hour Notice to Employees\nNorth Dakota\nMinimum Wage Work Conditions Summary\nOhio\nChild Labor Poster\nEqual Employment Opportunity Poster\nMinimum Wage\nUnemployment Compensation - Notice to Employees\nWorkers‚ÄôCompensation Rebuttal Presumption of Drug/Alcohol Use\nOklahoma\nChild Labor Law\nOklahoma Law Prohibits Discrimination in Employment\nMinimum Wage Act\nUnemployment Insurance Benefits\nWorkers‚Äô Compensation Notice - Inc.\nOregon\nBreaks and Overtime\nEqual Pay\nFamily Leave Act\nMinimum Wage\nOregon Occupational Safety and Health Administration\nProtections for Victims of Domestic Violence, Harassment, Sexual Assault and Stalking\nSick Time\nOregon OSHA‚Äôs COVID-19 Standard for all Workplaces\nWorkplace Accommodations Notice\nPaid Leave Notice Poster\nPennsylvania\nMinimum Wage Law\nAbstract of Equal Pay Law\nEmployment Provisions of the PA Human Relations Act\nAbstract of the PA Child Labor Act\nKnow Your Rights\nWorker‚Äôs Compensation Poster\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nAllegheny County, PA\nPaid Sick Leave Ordinance\nCity of Philadelphia\nPromoting Healthy Families and Workplaces\nFair Chance Hiring Law\nPaid or Unpaid Sick Leave\nPaid or Unpaid Sick Leave in Various Languagues\nCity of Pittsburgh\nPaid Sick Days Act\nPuerto Rico\nEl Discrimen es Ilegal\nCarta de Derecgis de ka Mujer Trabajadora\nNormas del Trabajo\nSeguro Social\nLey de Seguridad y Salud en el Trabajo en Puerto Rico\nRhode Island\nRhode Island Combination Poster\nDiscrimination is Illegal\nNotice of Right to be Free From Discrimination Because of Pregnancy, Childbirth and Related Conditions\nSexual Harassment\nWorkers‚Äô Compensation Notice - Inc.\nSick and Safe Leave\nSouth Carolina\nSC Labor Law Abstract\nSC Workplace Laws: Notice to Employees\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nSouth Dakota\nTennessee\nTOSHA Safety and Health Poster\nSpanish\nUnemployment Insurance Poster\nSpanish\nWage Regulation/Child Labor Poster\nSpanish\nDiscrimination in Employment is Illegal\nHuman Trafficking Poster\nRight to Work Poster\nFraud Free Workplace\nWorkers‚Äô Compensation Notice - Inc.\nWorkers‚Äô Compensation Notice - Federal\nTexas\nPayday Law Poster\nUnemployment Compensation Act\nEqual Employment Opportunity\nChild Labor Laws\nWage Claims\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nUtah\nPregnancy and Related Conditions Poster\nWorkplace Safety and Health\nUnemployment Notice\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nVermont\nUnemployment Benefits\nAccommodations for Pregnant Employees\nChild Labor Poster\nEarned Sick Time\nHealthcare Whistleblower Poster\nMinimum Wage\nParental and Family Leave\nSexual Harassment Poster\nWorkers Compensation Reinstatement Rights\nGitLab has complied with the provisions of Title 21 of the Vermont Statutes, Annotated ¬ß687, by obtaining Workers‚Äô Compensation Insurance coverage through The Hartford.\nEmployment Protections for Victims of Crime\nVirginia\nVirginia Unemployment Compensation Act\nVirginia Occupational Safety and Health Act\nEarned Income Tax Credit\nVirginia CLI\nWorkers‚Äô Compensation Notice\nSeizure First Aid Poster\nWorkers‚Äô Compensation Notice - Federal\nWorkers‚Äô Compensation Notice - Inc.\nWashington\nPaid Family and Medical Leave\nJob Safety and Health Law\nYour Rights as a Worker\nNotice to Employees if a Job Injury Occurs\nUnemployment notice\nCity of Seattle\nSeattle Labor Standard Ordinances\nCity of Tacoma\nPaid Sick Leave\nWashington D.C\nAccrued Sick and Safe Leave Act of 2008\nPaid Family Leave\nMinimum Wage\nLiving Wages Act\nBuilding Services Act\nUniversal Wage Law\nWest Virginia\nMinimum Wage Requirements\nWage Payment and Collection Act\nWV Human Rights Act\nUnemployment Benefits Claimant Handbook\nWisconsin\nEmployee Rights Under Wisconsin‚Äôs Business Closing/Mass Layoff Notification Law\nHours and Times of Day Minors May Work in Wisconsin\nEmployee Protections Against Use of Honesty Testing Devices\nFair Employment Law\nFamily and Medical Leave Act\nBone Marrow and Organ Donation Leave Act\nMinimum Wage Rates\nNotification Required for Cessation of Health Care Benefits\nNotice to Employees about Applying for Unemployment Benefits\nWorkers‚Äô Compensation Notice - Inc.\nWyoming\nConsolidated Labor Law Posters\nEEOC (U.S. Equal Employment Opportunity Commission) Notices\n‚ÄúEEO is the Law - Know Your Rights: Workplace Discrimination is Illegal‚Äù English poster for screen readers\n‚ÄúEEO is the Law - Know Your Rights: Workplace Discrimination is Illegal‚Äù English poster for printing\n‚ÄúEEO is the Law - Know Your Rights: Workplace Discrimination is Illegal‚Äù Spanish poster for printing\n‚ÄúEEO is the Law‚Äù English Poster Supplement\n‚ÄúEEO is the Law‚Äù Spanish Poster Supplement\nAll\n‚ÄúEEO is the Law - Know Your Rights: Workplace Discrimination is Illegal‚Äù poster links\nposter links.\nE-Verify\nNotice of E-Verify Participation Poster\nRight to Work Poster\nEmployee Polygraph Protection Act\nEPPA Poster\nEmployee Rights on Government Contracts\nEmployee Rights on Government Contracts (SCA, PCA, CWHSSA, Walsh- Healey)\nEmployee Rights under NLRA\nEmployee Rights Under the National Labor Relations Act (one-page Poster)\nEmployee Rights Under the National Labor Relations Act (two-page Poster)\nFair Labor Standards Act (FLSA) Minimum Wage\nFair Labor Standards Act Poster\nEmployee Rights for Workers with Disabilities Paid at Special Minimum Wages\nLactation Accommodation Policy\nFamily First Coronavirus Act (FFCRA)\nEmployee Rights: Paid Sick Leave and Expanded Family and Medical Leave under the Family First Coronavirus Act\nEssential Protections During the COVID-19 Pandemic\nFamily and Medical Leave Act\nFamily and Medical Leave Act (FMLA) Poster\nFederal Minimum Wage for Contractors Poster\nWorker Rights Under Executive Order 13658: Federal Minimum Wage for Contractors Poster\nOSHA Job Safety and Health\nJob Safety and Health: It‚Äôs the Law Poster\nPay Transparency Nondiscrimination Provision\nPaid Sick Leave for Federal Contractors\nWorker Rights Under Executive Order 13706: Paid Sick Leave for Federal Contractors\nService Contract Act\nYour Rights Under USERRA\nYour Rights Under the Uniformed Services Employment and Reemployment Rights Act\nGitLab Canada Corp.\nOntario\nEmployment Standards in Ontario\nOccupational Health & Safety Poster\nOccupational Health & Safety Act\nBritish Columbia\nWorking in B.C.\nOccupational Health and Safety Regulation\nWorkers Compensation Act\nAlberta\nWorkers Compensation Act\nEmployment Standards Code\nManitoba\nSafe Work Manitoba\nGitLab BV\nNetherlands\nEuropean Agency for Safety and Health at Work - Netherlands\nOSH - Netherlands\nHealth and Safety at Work - Netherlands\nFinland\nMehil√§inen Occupational Health Service Provider\nOmaMehil√§inen mobile application and online service.\nGitLab GmbH\nGermany\nEuropean Agency for Safety and Health at Work\nWorking Hours Act\nOffboarding Documents & Notices\nInformation on required offboarding documents & notices\nLast modified April 22, 2025:\nfix: Update Links in HandBook (\nab16e1e5\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2566}
{"doc_id": "863f9758a45555ee", "url": "https://handbook.gitlab.com/handbook/customer-success/csm/workshops", "title": "Workshops and Enablement Sessions | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nCustomer Success Management Handbook\nWorkshops and Enablement Sessions\nView the\nCSM Handbook homepage\nfor additional CSM-related handbook pages.\nOverview\nThe CSM team‚Äôs primary focus is to align with a customer‚Äôs desired business outcomes, enable the customer in their current use cases, and expand their platform adoption.\nCustomers who adopt additional DevOps use cases with GitLab see an increased return on investment (ROI). They receive this ROI by increasing operational efficiencies, delivering better products faster, and reducing security and compliance risks.\nOne of the tools CSMs have to speed customer onboarding, increase user adoption, and drive stage adoption is to offer their customers\nWorkshops or Lunch-and-Learns\n(generically referred to as enablement sessions).\nCSM-led Enablement and Expansion\nUse-case Enablement\n: Enabling the use cases into which a customer expresses readiness to adopt as a part of their desired business outcome. CSMs enable customers by creating quick time to value, overcoming technical roadblocks, and ensuring stickiness. The CSM provides the customer with guidance on adopting use cases to maximize value attribution and to align adoption to the customer‚Äôs desired positive business outcomes. CSM-led enablement can occur via workshops as listed below and is a part of the CSM-led customer success plan.\nUse-case Expansion\n: Driving expansion into new use cases as a part of an account planning motion, in line with the SAE or AE, to ensure the customer receives increasing ROI and creates happy customers that grow. This motion starts with a discovery process to open the door to a more in-depth discovery, with demos and workshops focused on value-positioning that lead to the customer saying ‚Äòyes‚Äô and agreeing to adopt that use case.\nThe CSM can track this expansion within an existing success plan objective\nor create a different objective to track this expansion initiative.\nWhere do I track the use-case enablement and expansion?\nThe steps to expand or enable on a use case are a part of the success plan, and are a part of a larger motion to drive towards a customer‚Äôs desired business outcome\n(leading to product adoption milestones being realized)\nFrequency of Enablement Sessions\nAs often as needed.  For PR1 Customers, we look to see an enablement session at a minimum  every 6 months. For PR2, every 12 months.\nThe CSM first offers enablement sessions during onboarding so the customer is aware that they are available and the list of typical sessions that can be done.  Additionally, the CSM should offer a specific session when working with a customer on a use case enablement. The customer collaboration project now has a default issue that has the list of current offerings with a brief description.\nSessions should be\ncaptured in Gainsight\n, which\ndrives the Engagement scorecard metric\n.  Record the date and type of session it was as well as an approximate number of attendees.\nType of sessions\nThere are two main types of sessions that can be offered.  Workshops are generally 1.5-2 hours and include the presentation, demo, and Q&A. These require more preparation and planning and are usually organized by the CSM in collaboration with other CSMs and SAs.\nEnablement sessions are generally 1 hour and involve presentation, demo, and Q&A and are usually given by the CSM themselves.\nCurrently available sessions\nThe following are already developed, have been given to multiple customers and are\navailable\n:\nIntro to GitLab\n(for teams just starting with GitLab)\n- General intro session that gives a high-level overview of GitLab\nDeveloper Journey - Idea to Production\n(for developers, operations, security)\n- Covers a typical workflow for a developer from getting assigned an issue to work on through creating the merge request, making changes and reviewing the pipeline results, and participating in code reviews\nWebIDE and Markdown\n(for anyone looking to make changes to code or Pages)\n- Covers what you can do with the built-in GitLab WebIDE to make changes to code, files, Pages directly from the GitLab web UI, as well as tips & tricks you can do with GitLab markdown in issues, merge requests, epics, Pages, etc.\nGit Basics\n(for those who want to contribute on their local machine)\n- Focuses on the command line interface into GitLab that a developer may need to pull/push code to/from the GitLab server\nCI/CD Basics\n(for those who want to learn about automated build/test/deploy pipelines)\n- Covers the basics of how to set up a pipeline to build, test, and deploy your code\nAdvanced CI/CD\n(for those interested in learning more about CI/CD)\n- Requires basic CI/CD knowledge and covers advanced topics such as includes/extends, rules, child pipelines, and more (specific content will be curated)\nGitLab Security and Compliance\n(for security, developers, managers, and PMs)\n- Covers an overview of the security features including how developers see the scan results in the merge request and how security teams can review the results in the Security Dashboard\nDevSecOps Adoption Path\n(for security & developers)\n- A prescriptive and curated route to adopting GitLab Secure scanners to get the most ROI as quickly as possible with Secure. This is a great workshop for customers who are struggling with Secure adoption or are just beginning their journey on Ultimate and using GitLab Secure.\nGitLab as a PM tool\n(for PMs, scrum masters, team leads, developers)\n- Focuses on organization and use of epics, sub-epics, roadmaps, issues, labels, milestones, and boards\nIssue, labels, and boards\n(for those interested in learning more about GitLab PM)\n- Covers more tips & tricks on issues, labels, and boards and is good follow-on after the PM session\nDevOps Metrics with GitLab\n(for managers, PMs, team leads)\n- Goes over what the DORA4 metrics are, why it is useful to track them, and what is available in GitLab\nInnersourcing with GitLab\n(for teams interested in starting code-sharing initiatives internally)\n- Goes over what is innersourcing, why it is useful, and what are the key things needed for success, followed by how to get started in GitLab\nGitOps with GitLab\n(for teams looking to use GitLab for Infrastructure as Code)\n- Goes over what is GitOps, how it is more than just Infrastructure as Code, what are the benefits, and how to get started with GitLab\nGitLab Administration\n(for GitLab Admins of self-managed instances)\n- Goes over GitLab components and architecture, installs, upgrades, admin area of the UI, common CLI commands, and back-ups\nPermissions & Access with GitLab\n(for GitLab Admins of self-managed instances)\n- Goes over permission access at the Group, Subgroup, Project, and Member levels, and discusses how to effectively tie access in with supported authentication protocols for on and offboarding\nAdministration on GitLab SaaS\n*(for GitLab Admins on GitLab.com)* - Goes over permissions, access, visibility, licensing, SaaS vs. Self Hosted, audit events and streaming, support, user activity, the future of GitLab Workspace, and all things that help admin roles using SaaS do their jobs\nReleases Environments & Deployments with GitLab\n(for anyone looking to do releases, use environments and create deployments in GitLab)\n- Covers the basics for creating releases in GitLab including deployments and the use of environments within GitLab.  Includes dynamic and static environments and deployments.\nIf you have additional sessions you want to contribute, please follow these instructions:\nSave the template deck to the\nLunch and Learns Google Drive folder\n(eventually these will move to Highspot as our single source of truth)\nUpdate this handbook page to include the name of the session, intended audience, and a summary of the content/goals\nUpdate the\ncollaboration project template issue\nto include the same\nIf you are interested in a session that doesn‚Äôt exist yet, but you‚Äôre not able or comfortable creating it, please post a message in\n#tim-tams\nabout what you would like to see!\nOffering the session\nCSMs should offer sessions early during onboarding, and whenever working on a stage enablement. If the customer wants a session on a topic we do not already have slides for, request more time to prepare, and then work with the Customer Success team to help pull together some slides for the session. Then the newly created session can be added to the list of existing sessions available to other CSMs.\nIt is recommended to invite another GitLab team member to the session to help with notes, audience management (including obtaining screenshots of audience participants), and Q&A. This helper could be the Solutions Architect or Account Executive for the account, or it could be a fellow CSM.\nConsider the typical length of the session when scheduling. It is recommended to coordinate with your champion on the following information:\nWho is hosting the session\nWill it be recorded\nWho is kicking it off\nIt is highly recommended to have someone from your regular cadence calls on the session, as some questions asked during the session may be specific to their instance configuration and they will need to answer those questions.\nPreparation for the session\nThe CSM should review the available content for\nWorkshops\nand\nLunch-and-Learns\nfor the topic requested. CSMs can use the content as-is if they feel it will meet their needs or they can make a copy of the slides and customize it for their customer‚Äôs needs.\nCSMs should review the speaker notes to ensure they understand each slide, and add clarifications and notes to them as needed. Ensure you have a plan for what you want to communicate for each slide, but don‚Äôt try to memorize what you are going to say.\nRecordings of sessions that CSMs have previously run can be found\nhere\nand may also be helpful to review as part of the preparation process.\nConducting the session\nHave your champion introduce you if possible. Use Presenter View in Google Slides to have the speaker notes available in a separate window. Run your slides off of your smaller monitor or on your MacBook screen if possible so the screen resolution is not an issue for participants with lower resolutions.\nIntroduce yourself and make sure you set ground rules if your champion did not.\nFor smaller groups (40), you can offer to allow them to come off mute to ask their questions.\nFor larger groups, it is recommended they put their questions in chat so you can address them at the appropriate time. It is recommended to pause periodically to take questions and also to ensure you stay hydrated during the session.\nIf you get lost or forget what to say, refer to your speaker notes. It is OK to read directly from them until you get back on track.  Feel free to reference other sessions that may cover a topic in more detail, even if you don‚Äôt have that session planned, as this can generate demand for those sessions and lead to further user adoption and stage enablements. Also, if your customer is on Premium, don‚Äôt shy away from mentioning Ultimate features during your presentation.\nWhen you do pause for questions, try to answer them but it is OK to say you don‚Äôt know and will research it and get the answer back to your champion. It is also OK if the question is answered in more detail in another session to simply refer to that session instead of taking too much time during the current one. It is not advised to give out your direct contact information to the audience and instead have them direct future questions to your champion.\nAfter the session\nSend a copy of the slides used, and a link to the recording to your champion so they can share it with the participants and with those that could not attend the live session. Follow up on any question that could not be answered. Add a follow-up item to your next cadence call agenda to see what they thought went well and what could be improved for future sessions. Work to schedule other sessions based on demand. **IF there are participants you are not familiar with who attended the webinar, please follow up with your day to day contact to better understand if/how additional teams are using GitLab and what/if any trainings are needed.\nSession Notes\nSimilar to taking notes in a cadence call, it is useful to add to your running notes doc in each enablement session you run for the customer. Include a list of attendees, max participant count, record of questions and answers provided, and any follow-up items that were not addressed during the session\nBest Practices for Note-Taking & Planning\nWrite down your\nagenda\n(including questions you want to ask). This way you can quickly add your notes for the specific context.\nIf you‚Äôre comfortable writing in\nMarkdown format\n, use it to quickly structure your notes in real time.\nAllow yourself time directly after the call to clean up your notes. Avoid scheduling back-to-back meetings.\nPractice slowing down call conversations. Stopping the dialog for a few seconds to say ‚Äúlet me write that down‚Äù tells the customer what they said is important to you.\nAsk your SAE/AE/SA to take notes with you. After the meeting combine and add detail.\nUse\nGong\nto record your calls so there‚Äôs less pressure for you to take note of everything.\nSometimes it makes sense for somebody on the\naccount team\nto go back through the call in Chorus to transcribe it.\nWrite notes in whatever is easiest and always copy them to your best source of truth. If you can write them in the source of truth in the first place, you‚Äôll be more efficient and consistent\nLeverage the\nWorkshop Planning Checklist\nfor planning calls with the customer\nLast modified July 21, 2025:\nUpdate file workshops.md (\ne72c9d37\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2271}
{"doc_id": "494bc32911377996", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/workflows-tools/forum", "title": "Forum workflow | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nDeveloper Relations Workflows and Tools\nForum workflow\nThe GitLab community forum (forum.gitlab.com) is a platform for users to register, ask questions, and collaborate, embodying GitLab‚Äôs values of transparency and community contribution. It features a trust-based system, moderation workflows, and various tools for organizing discussions, such as categories and tags. The forum encourages engagement from both the wider community and GitLab team members, aiming to build a knowledge-sharing environment while maintaining a code of conduct and clear administrative processes.\nUsers\nRegistration and Login\nWider community members can register for an account on the\ncommunity forum\nby using the\nSign up\nbutton and choosing their preferred method (email, oauth, etc.).\nFor GitLab team members it is recommended to use the\nwith GitLab\noauth method. This will authenticate against GitLab.com as oauth provider, prefill the profile being created, and later serve as oauth login. This method also grants additional permissions, see the administration section for\nusers\nbelow. Alternatively, manual sign-up using the\ngitlab.com\naddress and setting up 2FA will work as well.\nCode of Conduct and FAQ\nOur\nCommunity Code of Conduct\napplies to the forum platform. When in doubt,\nflag posts\nwhich violate the Code of Conduct or are inappropriate in other ways (spam, advertising, etc.). Moderators can review the posts and take action while the posts are hidden from public viewing.\nDiscourse provides a general\nfor users.\nHow to respond in the GitLab Forum\nVisit the\nforum\nand navigate into the categories. Alternatively, use\nNew\n,\nLatest\nand\nUnread\nsearch filters.\nWrite a response if you can, or involve a team member for assistance on the issue if you don‚Äôt know how to engage or proceed. Troubleshooting questions and asking for details counts as a reply! Don‚Äôt feel like you have to answer fully in one go.\nConsider using some of the following resources to help get answers to questions:\nSearch the forum for related topics - you may find a community member who has already solved something similar. You can loop them into the conversation or point the user to a thread that might be helpful\nSearch\nGitLab‚Äôs documentation\nfor helpful information to aid in troubleshooting\nWorking alongside the wider community\nIn the GitLab Community Forum, most tech support and troubleshooting assistance comes from community members volunteering their time and knowledge to help others.\nIf you see a community member volunteering their time to help another community member, give their reply a ‚ù§Ô∏è to show appreciation for their contribution.\nFlagging Inappropriate Content\nIf any GitLab team member sees a forum post that is inappropriate, abusive, spam, or a violation of our code of conduct, please flag the post by clicking the flag icon. The post is automatically hidden from public viewing and added to the\nmoderation\nqueue for review. If the flagging action requires more context or immediate actions, contact\nadmins\nin the\n#developer-relations\nSlack channel.\nIf immediate action to hide or redact private information is required, flag the post and then ping one of the\nadmins\nin the\n#developer-relations\nSlack channel.\nBest Practices\nAlways be courteous and generous, especially when a user is new to the forum. You can recognize new users (and dormant users) by the blue, temporary banner at the top of their posts.\nAdd a welcome message when replying to new users. It could be as simple as ‚ÄúHi, and welcome to the forum! üòÑ‚Äù at the start of your post.\nUse the like button (the heart icon) as much as you can, to thank users for their input and to inspire other users to do the same.\nUse the solution checkbox button as much as you can, to indicate to others when a forum topic has an answer.\nThank users publicly for providing answers to questions, especially when they are not in the GitLab Staff group.\nModeration\nThe moderation privileges should only be used to pin topics or make (global) announcements.\nModerators\nshare different responsibilities, and categories. If you need help or guidance, please reach out in the\n#developer-relations\nSlack channel.\nReviews\nDiscourse implements an intelligent spam prevention system, which leads to users and posts behind hold for review. The same workflow applies when users flag a post manually. Items for review are indicated with a red count in the upper right menu, and can be access directly with the\nReview\nsection.\nTopics unrelated to GitLab, DevOps, etc. and text with many external URLs often is spam.\nTake action with\nDelete User > Delete and Block User\n. This also deletes the post.\nThere are bots which copy the body text of another topic or reply, and create their own new topic with a new URL. Discourse detects them as\nNew user typed their first post suspiciously fast, suspected bot or spammer behavior.\nTake action with\nDelete User > Delete and Block User\n.\nFalse positives\nShort replies such as\nMe too.\nA copy-pasted question from a different platform.\nA user without posts but a profile picture and a personal biography/website\nSuggested action: Approve the posts/users.\nA post was flagged as CoC violation.\nReview the post. When in doubt, ask in\n#coc-violations\nin Slack.\nEdit\nthe post and follow the\nCode of Conduct Templates\nto replace the text.\nUser Review Tips\nWhen the user account looks suspicious, these tips can help with verification:\nSearch the user avatar picture to verify it is not a stock photo.\nTinEye\nprovides a reverse image search.\nCompare username, real name, GitLab username (when provided), email address, biography for human input.\nBots and spam users often add URLs and text to their biography.\nDifferent used names may indicate a fake profile.\nWith admin permissions:\nOn the user profile, open the admin interface. Inspect the user profile‚Äôs IP address with the Discourse built-in Whois lookup including geo location. When in doubt, use a search engine with\nwhois <IP address>\nand also verify the ASN and its ISP. Sometimes a google search unveils them belonging to a fraud friendly environment, or other insightful details.\nModerator Specific Permissions\nClick this link to view the Moderator Quick Start guide.\nThis guide explains Moderator permissions, expectations, and best practices.\nModerator Specific Non-Technical Contributions\nWelcome new members\nCheck forum threads for an existing answer: if there is an answer already, consider liking it or marking as solved\nReassign categories on the forum\nAdd or create appropriate tags\nLook in the forum for answers that may have already been supplied in an existing thread\nLook in the Support Zendesk instance for answers that may have already been supplied in a ticket from Support\nAsk the poster initial troubleshooting questions like screenshots, error messages, etc.\nGeneral Moderator Best Practices\nLeave all interactions and replies open-ended. We want our forum users to feel like they can always come back and pick up the conversation.\nConsider gifting swag\nto forum users that contribute a lot or in a really exceptional way! Do this via a DM/private message.\nModerator Only Access\nBelow is a list of actions only forum Moderators can take in the Discourse platform. For this reason, at this time only GitLab Staff members are granted Moderator status.\nMarking accepted solutions\nMark a response as an ‚Äúaccepted solution‚Äù in a situation where a single reply effectively answers or resolves a forum thread. Only the original poster and moderators have the ability to mark an answer in a forum thread. Please do this freely! It helps with SEO, and it helps our users know what questions have been answered.\nInstructions\nClick the ellipsis in the small grey toolbar on the post > click the checkbox.\nEditing topics and posts\nSometimes users will accidentally post private information like license or API keys, emails addresses, etc. Publicly identifiable information needs to be redacted from the forum. You can also use this tool to redact inappropriate language or other Code of Conduct violations.\nInstructions\nIf you need to edit a user‚Äôs post for whatever reason, please private message the user in the forum letting them know that you have done so, and the reason why.\nClick the ellipsis in the small grey toolbar on the post > click the pencil icon.\nInstructions For Sending a Private Message\nClick the user‚Äôs avatar icon, user card will appear\nClick the\nmessage\nbutton on the user card to draft private message\nThe edit history diff is only visible to moderators.\nViewing email addresses\nFor the sake of anonymity, only Forum Moderators can see the email address associated with a forum user‚Äôs account.\n*\nInstructions\nClick the user‚Äôs avatar icon, user card will appear\nClick the avatar icon on the user card to navigate to the user‚Äôs profile\nClick the\nshow\nbutton in the user‚Äôs profile\nDrafting in/using the private Staff Category\nThis is not exclusive to Moderators, but you can use the Staff Category to draft new knowledge share articles, initiatives, whatever you need! You will notice the little lock symbol next to private categories.\nDeleting topics and posts\nWe do not delete topics and posts in the forum, mainly due to the fact that this action can destroy trust. There are always exceptions to this rule - a good example is when spam posts sneak in. If you feel something needs to be deleted, you can always reach out to\nadmins\nin private or in the\n#developer-relations\nSlack channel and we can talk it through!\nInstructions\nClick the ellipsis in the small grey toolbar on the post > click the trash can icon.\nMoving Posts To a New Thread\nIt‚Äôs not uncommon that moderators will feel the need to move new posts out of old threads, or move posts to their own topic altogether. Please move new posts out of old topics when users try to bring topics a year or older back to life.\nInstructions\nClick wrench icon on right side of UI\nClick\nselect post\nin dropdown\nChoose either\nselect+below\nor\nselect\ndepending on how much of the conversation you want to move\nChoose\nmove\nto Fill out the popover accordingly\nClick\nmove to new topic\nWorkflow\nModerator and Admin Workflow\nHow and when to edit forum posts.\nGenerally, we do not edit other peoples‚Äô posts. If we see something that can be improved, we should reach out to them privately to ask them to change it. This helps us build trust with our community and with the GitLab team, since it shows them that they have the creative freedom and autonomy to post what they like on our forum.\nThat being said, there are instances when moderators can edit posts directly. Here are some examples and how to do it:\nViolation of GitLab‚Äôs\nCode of Business Conduct & Ethics\nand\nEvents Code of Conduct\n(Ex. redacting swear words, if they are unable or unwilling to edit it themselves)\nRedact private information (Ex. license keys, account info, email addresses, etc.) reported in\nGDPR requests\nEditing can be achieved via the grey pencil icon in the post toolbar (‚Ä¶ > pencil)\nHow and when to mark a solution in a thread.\nWhen there is a clear answer to the topic and/or question\nMarking the solution can be done via the grey checkbox icon in the post toolbar (‚Ä¶ > checkbox)\nHow and when to delete a forum post or topic.\nPlease do not delete other‚Äôs posts. When necessary, message the user first, and let them have a chance to delete it themselves\nDeleting content for any reason is a breach of trust, which is something we are working hard to build in our forum community. If you feel like a post needs to be deleted, please reach out to an Admin, so the situation can be discussed.\nFollow the relevant workflow depending on the question:\ngraph TD\nA((Non-support)) --> B\nA --> J(\"GitLab vs Competitor\")\nA --> M(\"Feature Proposal\")\ngraph TD\nA((Support)) --> B(\"What level of GitLab are they on?\")\nL --> M(\"What version are they on?\")\nM --> N(\"Has this happened on a previous version?\")\nN --> O(\"How long have they been experiencing it?\")\nO --> P(\"What integrations do they have, if relevant?\")\nForum Community Response Workflow\nCommunity response situations\ninclude preparing a forum topic as a draft in the\nInternal\ncategory.\nTeam members need to sign-up for a\nforum account\nin order to create a topic. The Internal category allows team members review and edit the draft together without it being available to the public.\nAfter a forum topic is created in the Internal category, team members have the ability to edit the title, tags, description, post timestamp, and category.\nTo edit the title, category, or tags of the topic, click the pencil icon on the top.\nTo edit the description, use the pencil icon at the bottom of the topic next to ‚ÄòReply‚Äô. Note that the pencil icon may be collapsed within the ellipsis menu.\nEditing a topic description only is available for\ntrust level 4\nand moderators. Ask an administrator to update the\nteam member trust level\nif necessary.\nA sandbox topic to test editing is available\nhere (internal)\n.\nForum Banner Announcements\nSteps for bannering on Discourse:\nDownload design component to your computer\nIn Discourse navigate to Admin Panel > Customize > Themes > Top Navbar\nUnder uploads, click the\nAdd+\nbutton\nAdd your design\nClick\nEdit CSS/HTML\nAdd mini banner CSS:\n.\nmini-banner__image\n{\nheight\n:\n60.5\npx\n;\nwidth\n:\n720\npx\n;\nbackground-image\n:\nurl\n(\n$mini-banner\n);\nbackground-size\n:\n100\n%\n100\n%\n;\nmargin\n:\n0\nauto\n;\n}\nClick\nAfter Header and add this div to make CSS work\n<\ndiv\nclass\n=\n\"main-banner\"\n>\n<\na\nhref\n=\n\"https://forum.gitlab.com\"\n>\n<\ndiv\nclass\n=\n\"main-banner__image\"\n></\ndiv\n>\n</\na\n>\n<\na\nhref\n=\n\"https://forum.gitlab.com/t/ci-cd-minutes-for-free-tier/40241\"\ntarget\n=\n\"__blank\"\n>\n<\ndiv\nclass\n=\n\"mini-banner__image\"\n></\ndiv\n>\n</\na\n>\n</\ndiv\n>\nSlight modifications may be needed depending on the size of the image\nAdministration\nDeveloper Relations DRIs: @sugaroverflow @dnsmichi\nTech stack owners\n: @sugaroverflow @dnsmichi\nForum staff members\nDiscourse Platform\nThe Discourse instance\nforum.gitlab.com\nis operated by the Discourse team on\ntheir SaaS platform\n. The Discourse platform was started as self-hosted instance in 2015, and later\nmigrated to Discourse SaaS in February 2020\n. The domain is managed by the GitLab infrastructure team.\nUpdates and important security fixes are applied by the\nDiscourse hosting team\n. Technical owners can reach out to their support team. For business organization and subscription updates, please open\na confidential issue in the Developer Advocate Meta Project\n.\nIn October 2021, the Discourse forum exceeded 1 million monthly page views. More metric reports can be created using the\nAdmin dashboard\n.\nUser Trust Levels\nDiscourse uses\ntrust levels\nto grant more trust permissions to users as they evolve on using and engaging on the forum platform. This trust system also helps to keep spam users away, ensuring a safe place to discuss and help each other.\nNew users start at level 0, and can only post a few topics and replies, and need to engage by reading topics to earn trust level 1.\nTrust level 1 grants the permission to send DMs, upload images, flag posts, etc. as basic user.\nMembers with trust level 2 have spent time on the forum, helped users with responses, receive and give likes, and read more about GitLab topics.\nTrust level 3 as a regular user means becoming a GitLab community evangelist with visiting often, leading the path with helpful responses, engaging with likes and feeling energized.\nLeaders with trust level 4 have earned their trust by staff team member nomination, helping with questions, engaging with likes, flagging posts to moderators, lending a hand to new users, and overall collaborate closely with GitLab team members.\nNomination for Trust Level 4\nPlease open a\nnew issue in the Developer Advocate Meta Project\nand share the user profile URL and a detailed reason why they should be promoted to trust level 4. Assign the issue to technical owners using this quick action:\n/assign @dnsmichi @sugaroverflow\n. Administrators will review and reach out to nominated community members.\nTeam Member Trust Level\nGitLab team members who signup using oauth, will automatically be added to the\ngitlab-team\ngroup, granting\ntrust level 3\n. This group does not trigger any @-mention notifications in forum posts.\nAdministrators can promote team members to trust level 4 manually, for example when needed for\ncommunity response workflows\n.\nCore team members trust level\nCore team members can be added to the\ncore-team\ngroup through the\nCore team onboarding process\n. This action grants\ntrust level 3\n. This group does not trigger any @-mention notifications in forum posts.\nCategories\nThe\nforum categories\nallow to group posts by sections and topics. Users can also subscribe to category notifications. The top-level categories are inspired by the DevSecOps lifecycle, common questions about GitLab features, and community activities.\nCategories are also shown in a dropdown when users follow the\nNew topic\naction on the forum landing page. We try to keep the category list short and concise.\nThere are two categories serving a special purpose, they must not be removed:\nInternal\nis required for the\ncommunity response workflow\nStaff\nis used by Discourse to manage site content and permissions (example:\n.\nFor requesting a new category, please review the following steps:\nDo you want to filter specific topics, or subscribe to notifications? If yes, please consider using\ntags\ninstead.\nNew categories should fit as subcategory into the existing top-level categories. We try to avoid bigger layout changes to avoid breaking contributor workflows.\nCreate a\nnew issue in the Developer Advocate Meta Project\nto discuss, and add details about forum DRIs, expected topic count, and impact. Assign the issue to technical owners using this quick action:\n/assign @dnsmichi @sugaroverflow\n.\nCategory Topic Templates\nDiscourse supports\ncategory topic templates\n, similar to GitLab description templates in issues/epics/MRs. Templates are used to guide users in providing all details for  questions (configuration, steps to reproduce, versions, etc.) which enables forum contributors to help more efficiently. The categories focus on support (‚ÄúHow to use GitLab‚Äù, etc.), community engagement and programs, GitLab University. A general catch-all category guides users to select specific categories as default template.\nAdministrators can edit each category, and navigate into\nTemplates\nto modify the templates. Sub categories require a copy of the top-level templates, ensuring that all categories use templates by default. In the past, we had users specifically selecting categories without templates, creating new topics in the wrong place.\nAll templates are persisted in the\ndiscourse-assets Git repository\n, and provide templates for the top level categories.\nSteps to update a category topic template:\nNavigate into the category settings, and choose\nTemplates\n.\nEdit the template and preview the changes.\nSave the template and test to create a new topic in the category.\nPersist the changes in the\ndiscourse-assets Git repository\n.\nTags\nUsers can add tags to topics; higher trust levels also allow tag creation. Users can filter topics by tag, and subscribe to tag notifications too. This helps with specific workflows for docs and blog teams.\nThe tag group\nfeedback\nincludes the following tags:\ndocs-feedback\nis used by the technical writing team to invite for docs.gitlab.com feedback.\nblog-feedback\nis embedded on the GitLab blog footer as CTA for feedback.\nSettings\nAdministrators can modify the\nDiscourse settings\n. Please open a\nnew issue in the Developer Advocate Meta Project\nto suggest, discuss and document changes. Note that plugins are installed by contacting Discourse Support.\nThe\nOnly show overridden\ncheckbox can be helpful to see modified settings. The most notable changes are documented below.\nRequired: Title, site description, contact email, company name\nBranding: logo, favicon, etc.\nBasic setup: allow user locale, ga universal tracking code, top menu, category colors, fixed category positions, enable whispers, short title\nLogin: GH login, oauth2 enabled (GitLab oauth via\ndiscourse-oauth2-basic\n)\nUsers: reversed usernames, hide suspension reasons, use email for username and name suggestions\nPosting: min post/topic title length, do not allow uncategorized topics, post edit time limit, do not show edit history to public, max reply history, newuser max replies/mentions per topic, newuser max links/embedded media/max attachments\nEmail: alternative reply by email addresses\nFiles: authorized extensions, do not download remote images to local, purge deleted uploads grace period days\nSecurity: Allow moderators to manage categories and groups, allowed iframes, enforce second factor for staff\nSpam: Hide post sensitivity, newuser spam host threshold, max new accounts per registration ip\nRate Limits: rate limit new user create post\nUser Preferences: Enable mailing list mode\nPlugins: allow solved on all topics, assign allowed on groups, data explorer enabled\nUser Admin\nAdmins can search for users, and verify the profiles when reviewing the moderation queue.\nThe groups are also managed in this section. Next to the default groups for trust levels and staff, custom groups have been created.\nBadges\nDiscourse uses a gamification system where users can earn badges from forum activity, likes, and engaging with replies. The\ndisco bot tutorial\nstarts automatically for newly signed up users by sending them a direct message.\nThe\ntrust levels\nalso grant more forum permissions, and help prevent spam by limiting new users to a limited set to interactions.\nForum Spelunker\nis a custom badge which was granted to everyone helping answer and solve old forum topics in May 2020.\nCustomizations\nRequires an administrative login. Open an issue with mockup design before changing the design.\nThemes\n: Top navbar menu navigation\nColors\nUser Fields\nasked during user registration:\nGitLab Username\nWorkflow for applying customizations:\nCreate a\nnew issue in the Developer Advocate Meta Project\nto propose changes, including design mockups, screenshots, etc.\nApply the changes to the custom theme, colors, etc.\nPersist the changes for the custom theme in the\ndiscourse-assets\nproject.\nChanges to the loaded script URLs may require updates to the\nContent-Security-Policy settings\n. Please ask a forum admin.\nTop navigation\nThe top navigation is managed in a\ncustom theme\nwith updated\nAfter header\n,\nHeader\n,\nHead\nand\nsections.\nOneTrust\nThe OneTrust cookie banner is added as a\ntheme component with custom CSS/HTML\nin the\nHead\nsection.\nGoogle Analytics\nGoogle Analytics is configured using the\nGTM container ID\nsetting in the\nBasic Setup\nsection\n. Walkthrough for GA4 in\nthis issue (internal)\nUsed by integrations, such as the\nGitLab Blog Bot\n.\nPlugins\nThe Discourse subscription plan includes many\nplugins\nby default. The most common workflows are questions with answers, allowing to select one as solution, solving the topic (discourse-solved plugin).\nGeneral Administration Workflow\nMost administrative tasks will be done from the\nDiscourse Admin Dashboard\n. The dashboard provides metrics and dashboards for page views, user engagements, and community health stats.\nCreate a\nnew issue in the Developer Advocate Meta Project\nto document changes in settings, handle abusive behavior and other administrative tasks.\nThe\nLogs section\nprovides an audit log of all actions.\nHow to Grant Admin Permissions\nTo add an Admin:\nGo to the\nlist of forum users\nUse the search box to find the user you want to grant admin permissions to\nClick on the user to modify their profile\nVerify that the user has\nTwo-Factor Authentication\nenabled. If not, ask them to enable it in\nProfile > Preferences > Security > Two-Factor Authentication\nas this is a requirement for all\nstaff members\n.\nScroll down to the\nPermissions\nsection\nClick on the\nGrant Admin\nbutton\nAn e-mail confirmation will be sent to the Admin that granted the permission (i.e. you). Go to your inbox and click on the link to confirm granting Admin permission to the user\nIf all went well, the\nPermissions\n>\nAdmin?\nsection on the user‚Äôs profile admin should read\nYes\nNote: we would like to reserve only two or three Staff spots for forum Admins within our existing 15 total Staff spots.\nHow to Grant Moderator Permissions\nIf you want to add an Moderator:\nGo to the\nlist of forum users\nUse the search box to find the user you want to grant moderator permissions to\nClick on the user to modify their profile\nVerify that the user has\nTwo-Factor Authentication\nenabled. If not, ask them to enable it in\nProfile > Preferences > Security > Two-Factor Authentication\nas this is a requirement for all\nstaff members\n.\nScroll down to the\nPermissions\nsection\nClick on the\nGrant Moderation\nbutton\nImmediately the\nPermissions\n>\nAdmin?\nsection on the user‚Äôs profile admin should read\nYes\nNote: we only have 15 Staff spots available with our current Discourse subscription. Please check with an\nAdmin\nif you want to grant, or want to receive, moderator status.\nDeprovisioning\nAs a provisioner, follow these steps to deprovision a GitLab team member who is being offboarded:\nRevoke permissions and disable user\nGo to the\nlist of forum users\nUse the search box to find the user you want to grant moderator permissions to\nClick on the user to modify their profile\nReset trust level to 0 (new user)\nRevoke moderator or admin permissions (if applicable)\nRemove custom staff title (if applicable)\nRemove from the\ngitlab-team\ngroup\nIf user account is authenticated with GitLab or uses a gitlab.com email address, suspend user.\nRevoke permissions and keep account\nIf the team member wants to keep their account as a wider community member, follow these steps:\nGo to the\nlist of forum users\nUse the search box to find the user you want to grant moderator permissions to\nClick on the user to modify their profile\nAsk them to change the email address to their private email.\nNavigate to their user profile and select the\nAdmin\nbutton on the right.\nVerify that\nPrimary Email / Secondary Emails\ndo not contain a\n@gitlab.com\nemail address.\nRevoke Admin (if they were admins)\nRevoke Moderator\nRemove from all groups\nTrust Level:\n2: member\nOffboarding core team members\nRemove the user from the\ncore team\ngroup.\nOffboarding automation help\nFollow the README in the\ninternal\nteam-member-offboarding-discourse\nproject\n.\nGDPR requests\nUsers with personal data requests must follow the\nGDPR workflow in the legal handbook\n. This workflow is also linked in the\nforum FAQ\n.\nTeam members who handle the personal data request can reach out to\nforum admins\nfor data or account deletion requests. Forum admins can then take action.\nForum users with more than one post cannot delete their account themselves. Trust level 0 and 1 users cannot edit their posts after a grade period. Forum admins must anonymize, redact, and delete posts manually in these cases. These settings are to preserve the forum and discussion integrity, and\nfighting spam on Discourse\n.\nDiscourse provides different paths to handle GDPR requests.\nUser account deletion:\nOption 1, default: Since profile posts might include personal data as well, admins can decide delete all posts, and then delete the user account too.\nOption 2, for many posts and topics: Anonymize the account in the admin user profile view. This resets the user profile, removing personal data (email, name, etc.). Redact all personal information in the posts and keep the topic history intact.\nTopic deletion or edits:\nNavigate into the topic from the requestor, and use the edit button to modify the post.\nAlternatively, delete the entire topic.\nProjects\nFighting spam on Discourse\nSee the\ninternal handbook\nfor analysis, strategies and actions.\nConnect with us in Slack\nJoin\n#developer-relations\n.\nLast modified June 30, 2025:\nForum workflow: Document how to handle GDPR personal data requests (\na9e55b81\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4562}
{"doc_id": "4b8658a3b6deb8e5", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing", "title": "Brand and Product Marketing | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nGitLab Brand and Product Marketing Handbook\nWelcome to the GitLab Brand and Product Marketing Handbook\nThe Brand and Product Marketing\nteam‚Äôs goal is to accelerate GitLab‚Äôs path to market.\nWe tell the GitLab story at the brand, corporate, solution, and product levels.\nWe develop market insights, leadership positioning, messaging, and narratives that elevate our brand, show value in our solutions, and fuel demand for our platform.\nWe activate brand ambassadors and customer advocates to show GitLab‚Äôs momentum and trust in the market.\nTeam Disciplines ‚Äì What We Do, Why We Do It\nBrand\n: We create awareness, trust, and affinity for the GitLab brand.\nWe develop umbrella, corporate-level messaging to establish GitLab as market and category leader. We conduct research to define, evolve, and measure the health of the GitLab brand. We provide brand stewardship and governance, empowering internal and external advocates to become brand champions.\nProduct and Solution Marketing\n: We develop insights, positioning, and messaging that communicate the value of our platforms and solutions.\nProduct and Solution Marketing consists of several specialities including\ncore product marketing\n,\ncustomer advocacy\n,\nmarket insights\n,\nanalyst relations\n, and\ncompetitive intelligence\n.\nWe create positioning and messaging to fuel demand and adoption of GitLab‚Äôs solutions and products. We develop market and competitive intelligence in order to develop actionable insights on market trends, customer needs, and competitive insights that guide go-to-market and product strategy. We identify, recruit, and activate customer advocates to demonstrate momentum and trust in the market.\nCreative\nDesign\nand\nvideo\n- Deliver creative content and experiences that elevate our brand and fuel demand.\nWe develop our brand visual identity design to ensure it stays relevant in the market and reflects the benefits and quality of our product. We are the creative partners for GitLab marketing. We create, conceptualize, and design high quality brand experiences.\nContent\n- Showcase our leadership through easy-to-find content that is educational, thought-provoking, and market-defining.\nWe create, review, and improve content to establish GitLab as the leader in modern software development and DevOps, while also sharing the company‚Äôs vision for the future. We create content that maintains and improves our search rankings around key terms. We create content for go-to-market campaigns that drive awareness, growth, engagement, and conversion.\nOur core capabilities\nThe Brand & Product Marketing team operates at the intersection of marketing, sales, customer success, and product management. As a team, we measure our impact through the following capabilities:\nBrand\nGitLab Brand Handbook\nBrand Creative Handbook\nGitLab Brand Creative Handbook:\nBrand Video\nGitLab Brand Creative - Brand Video Handbook\nGitLab Content Strategy & Ops\nAn overview of the strategy and processes for the Content Strategy & Ops team.\nProduct and Solution Marketing\nGitLab Product and Solution Marketing: Core product marketing, competitive marketing and intelligence, market research and insights, analyst relations and customer advocacy\nLast modified July 7, 2025:\nChange design to create and add brand video (\ndc19d90e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 499}
{"doc_id": "0d83e83c914ab042", "url": "https://handbook.gitlab.com/handbook/company/working-groups/webpack", "title": "webpack | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nWorking Groups\nwebpack\nGitLab Webpack increases engineer productivity by fixing and improving our frontend build tooling, and put both guidelines and automated processes in place\nAttributes\nProperty\nValue\nDate Created\nJune 24, 2019\nDate Ended\nFebruary 20, 2020\nSlack\n#wg_webpack\n(only accessible from within the company)\nGoogle Doc\nWebpack Working Group Agenda\n(only accessible from within the company)\nEpic\nWebpack Working Group\nBackground\nGitLab has been using\nwebpack\nto bundle its frontend assets for three years now, and it has enabled us to do some great things, but at the same time we are not taking full advantage of its strengths (e.g.\ncode splitting\nand\nperformance improvements\n) and we are letting it get in the way of developer productivity (\nhigh resource consumption\n,\ncrashes\n,\nbroken debug tooling\n, etc) by not adequately addressing issues as we scale. This working group aims to both fix the most glaring issues with our frontend build tooling and to re-align the frontend development guidelines to promote best practices for performance and maintainability using webpack‚Äôs underutilized features.\nBusiness Goal\nIncrease engineer productivity by fixing and improving our frontend build tooling, and put both guidelines and automated processes in place to ensure best practices are followed for performance and maintainability.\nExit Criteria\nImprove GitLab‚Äôs development environment.\nReduce the GDK‚Äôs node process overall memory requirements 30% by improving the webpack/sprockets build process, and put measures in place to track this consumption over time, ensuring it does not grow unchecked. => Reduced by 22% so far\nImprove GitLab‚Äôs overall frontend performance.\nImplement targeted builds for modern and legacy browsers (defined as those which\ndo and do not support\n<script type=\"module\">\nrespectively) with only the code transformations and polyfills needed by each target.\nDocument code-splitting policies and put together a training workshop for frontend engineers and upload to youtube.\nUse webpack output stats to drive performance improvements\nDetermine which webpack output stats should be tracked and monitored (entrypoint bundle sizes, number of entrypoints, initial page load code coverage, duplicate modules across bundles)\nImplement measures to track webpack output stats. (\ngitlab-ce!31537\n)\nPrescribe limits to these metrics, and goals for reducing them.\nPut CI jobs in place to warn developers when these increase and enforce best practices.\nConclusion\nThis effort is now looked after by the\nManage:Foundations group\n.\nRoles and Responsibilities\nWorking Group Role\nPerson\nTitle\nFrontend Lead\nMike Greiling\nSenior Frontend Engineer\nFacilitator\nLukas ‚ÄòEipi‚Äô Eipert\nSenior Frontend Engineer\nMember\nJake Burden\nFrontend Engineer\nMember\nTristan Read\nSenior Frontend Engineer\nMember\nDavid ‚ÄòDJ‚Äô Mountney\nSenior Distribution Engineer\nExecutive Stakeholder\nChristopher Lefelhocz\nVP of Development\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 455}
{"doc_id": "5a0815281066d5d1", "url": "https://handbook.gitlab.com/handbook/company/amas", "title": "AMAs | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nAMAs\nWhat you need to know about Ask Me Anything (AMA)\nAn AMA (Ask Me Anything) is a session for team members to ask a specific individual or group of individuals questions either generally or on a specific topic.\nExamples include a specific executive member, a particular project, quarterly report follow-up, and regarding a significant policy change at GitLab.\nReoccurring AMAs & DRI\nWhile most AMAs only occur once or as requested, some AMAs are scheduled regularly.\nAMAs\nAMA Frequency\nAlternate Hosts\nScheduling DRI\nAMA with the CEO\nEBA to CEO\nMonthly\nEBA to CEO\nRequest an AMA\nThe EBA Team manages the GitLab Team Meetings calendar and their events.\nThe EBA Team moderate Group Conversations and AMAs.\nAs part of designated Bring Your Family and Friends to Work events, some AMAs will be open to family members (including kids) and friends. These AMAs will be a subset of AMAs that do not contain sensitive data (sensitive data includes: information we usually don‚Äôt share publicly). These events will be publicized ahead of time through #whats-happening-at-gitlab. The calendar invite for these AMAs will specify that they are ‚Äúopen to family and friends.‚Äù To arrange this, reach out to your EBA team member and ask them to update the calendar invite to show ‚Äúopen to family and friends‚Äù. In the event your EBA is OOO, please reach out in slack to ‚Äò@exec-admins‚Äô to add it.\nWe suggest each person attend via their own device to avoid\nhybrid meetings\n. We encourage you to follow up with your guest after to debrief and share call impressions. For this it might be good to be in the same room but only if you are sure not to get echo‚Äôs.\nSteps to Request an AMA\nTo request an AMA be put on the GitLab team meetings calendar, the requestor should find a date and time on the GitLab Team Meetings calendar that works for the AMA host.\nThe requestor will slack\nthe EBA\nfor their department in the\n#eba-team\nSlack Channel and provide the following information:\nTitle of AMA\nPublic or Private Livestream\nDate & Time (YYYY-MM-DD PST)\nHost\nModerator\nAgenda Link\nAttendees (specify if calendar invitations go to specific teams or to\ngitlab-team-members@gitlab.com\n)\nConfirm if this call is ‚Äúopen to friends and family‚Äù\nThe EBA will create the event in the EBA Zoom account and add it to the GitLab team meetings calendar.\nThe EBA will add the AMA document link in the description and invite the specified attendees to the meeting.\nIn order to limit traffic in the document during the call, the link for the AMA document in the meeting invitation should contain ‚Äú/preview‚Äù at the end of the address to direct attendees to the preview version, with instructions in the body of the document directing those who have questions to editable version.\nThe EBA will add Alternate Hosts if applicable.\nDefining Terms\nHost\nThe Host of a Zoom call is the person leading the conversation, usually the DRI, subject matter expert, and overseer of any slides created for a call (another term for the role is Presenter).\nQuestions will generally be directed to the Host, and they will usually answer them unless they feel that another team member has more information or expertise to offer. The Host/Presenter makes sure that questions are asked in the order they are listed in the agenda document.\nThe ‚ÄúHost‚Äù term can be confusing as Zoom has a specific definition for Host pertaining mainly to a permission level, which in practice GitLab does not assign to the term.\nMore information on Zoom‚Äôs definition of ‚Äúhost‚Äù is explained in the Moderator section below\n.\nModerator\nThe Moderator of a Zoom call is the person that has Zoom‚Äôs\nHost\nlevel permission. Host level permission in Zoom permits streaming a call to YouTube, starting or ending a recording and giving co-hosting permissions to others.\nThe Moderator of a Zoom call is the person who is in charge of starting the call i.e. initiating the streaming to YouTube; updating the stream from public to private if a sensitive topic is mentioned, and keeping the meeting running efficiently and on time so that it does not go over the Quick Meeting time frame.\nFor Attendees\nAttendance is optional - if you are unable to attend an AMA at its scheduled time, don‚Äôt let that hold you back!\nPlease enter your questions or comments on the linked Google Doc. Preface your question with your full name (first and last name) because there might be other people with your first name on the call and it‚Äôs helpful to newcomers if they are distinguished. Remember\nFirst Post is a Badge of Honor\n.\nKeep in mind that an AMA may be live streamed and shared publicly and that it‚Äôs okay to opt out of using your name due to safety and privacy concerns.\nPlease do not include customer names in your questions/comments.\nBe ready to ask your question out loud as it comes up in the queue.\nWhen speaking on the call, please say your name first, to help others know who is speaking.\nPlease don‚Äôt use the Zoom chat to add information but add them to the doc so people reading the agenda after the call can also benefit.\nNot everything has to be a question. If you have a comment, bias to putting it into the Google Doc so that those who weren‚Äôt able to attend the meeting live can see what you had to say (and any responses that arose from it).\nThanking and recognizing people is very important.\nIt‚Äôs okay to add a question to the end of the queue in the Google Doc as the conversation is taking place.\nYou can contribute by taking notes to transcribe the answers during the conversation. Thanks!\nMake sure there are at least 10 empty items in the list (that just contain a space) for people to add new questions.\nFor Moderators\nThe\nteam is responsible for moderating the following calls on a rotational basis:\nAMAs (If requested with sufficient notice as per the instructions in the\nrequest an AMA section\n).\nThe teams will assist with moderating calls where the audience is applicable to all GitLab team members. In the event that a separate meeting needs to be scheduled on the team calendar with only a specified invitee list, the host or the EBA for the host‚Äôs organization will be responsible for moderating the call.\nRecording or commencement of live stream should not be started without alignment with the host. Moderator should check with host for readiness at the scheduled start time before hitting record.\nLast modified May 15, 2025:\nRemove group conversations (\n1e0654f2\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1126}
{"doc_id": "f84d9ae1d7ba434f", "url": "https://handbook.gitlab.com/handbook/marketing", "title": "Marketing | The GitLab Handbook", "text": "The Handbook\nMarketing\nGitLab Marketing Handbook: Brand and Product Marketing, Integrated Marketing, Sales Development, Marketing Strategy and Platforms, Enterprise Data, Developer Relations, and Corporate Communications\nWelcome to the GitLab Marketing Handbook\nThe GitLab Marketing team operates as one team and is organized by the following departments:\nIntegrated Marketing\n,\nBrand and Product Marketing\n,\nMarketing Operations and Analytics\n,\nSales Development\n,\nEnterprise Data\n,\nCorporate Communications\n, and\nDeveloper Relations\n. This page documents our shared team philosophy and processes, while the individual department handbooks contain more detailed information.\nMarketing Purpose\nGitLab is the leading DevSecOps Platform that empowers organizations to deliver quality software faster and more efficiently while strengthening security and compliance. The marketing team‚Äôs purpose is to amplify the value of the GitLab platform, authentically and transparently, by putting customers and the community at the center of everything we do.\nMarketing Alignment\nAs the GitLab Marketing team puts customers at the center of everything we do, the marketing strategy aligns with the customer journey. The journey‚Äôs purpose is to provide a clear and cohesive experience to a prospect/customer from the minute they become\nAware\nof GitLab, to\nConsidering\nthe platform and\nConverting\ninto a happy customer, and then of course\nExpanding\nover time and becoming an\nEvangelist\n.\nEach stage has a purpose which is the guiding indicator for the marketing team to measure our success. Everything the team plans and executes in the short and long term will revolve around the customer journey, and we will also measure our success along each step to hold ourselves accountable.\nMarketing Strategy\nOur FY25 Marketing Strategy and Plan can be found in\nthe internal handbook\n.\nMarketing OKRs\nEach quarter, the Marketing team creates\nOKRs (Objectives and Key Results)\n.\nEach department within the Marketing team manages their own cascading OKRs. Team members can access the\nfiltered OKR search\n.\nHow we work\nValue-driven Marketing Team\nHow we work as one team aligns with the\n.\nResults\n- The team measures success together along the customer journey. Each quarter, we align CMO OKRs based on company goals set in the company OKRs. This helps us stay aligned with company-level goals while also understanding if what we are doing quarter over quarter is moving the needle on our marquee metrics along the customer journey. Being data-driven as a team is essential for team success.\nIteration\n- Like the rest of the company, we aspire to be agile and experimental where possible.  In every area possible, we roll out campaigns, brand updates, messaging, etc. in small iterations, measure the success, and take next steps accordingly.\nTransparency\n- We strive to be as transparent as possible in all areas of marketing. We welcome thoughts and feedback from each other, other GitLab team members, and the community at all times.\nCollaboration\n- A major key to success is operating as one team. Leveraging the different backgrounds, cultures and, skill sets of an entire company and community, the marketing team operates in a way where everyone can contribute. Collaboration is key to taking Marketing to the next level.\nDiversity, Inclusion and Belonging (DIB)\n- With GitLab team members being located across the world, we strive to always keep DIB at the core of everything we do. Like the rest of GitLab, we follow asynchronous meeting principles, welcome diverse perspectives, and as marketers, foster an environment where quirkiness is welcomed.\nEfficiency\n- We keep efficiency at the forefront of everything we do. Whether it is bringing in marketing technology to automate menial tasks and foster collaboration, finding ways to save cost, or simply doing the right things to be respectful of others‚Äô time, efficiency drives faster results for marketing.\nTeam Meeting Cadence\nMonthly Marketing All Hands (All Marketing team members)\nGoal\n: Align all Marketing team members on activities in progress to achieve our goals, and update the team on cross-functional items.\nThe meeting is 50 minutes and runs as follows:\nAlways begin by welcoming our newest GitLab Marketing Team Members\nCelebrate well-deserved promotions\nCMO Top of Mind (5 items per month)\n~20 minutes of CMO Leadership sharing updates\n~20 of either marketing team member updates (to be added during the call for items announcement prior) or special guest from another GitLab org\nThe remaining time for Q&A and most importantly‚Ä¶recognition!\nAll team members are encouraged to bring forward discussion topics that they want to share with the team or to have covered during the call.\nQuarterly CMO Q&A (one session for each department)\nGoal\n: Provide the team a smaller forum to ask any questions they may have, offer feedback, and brainstorm ideas directly with the CMO\nWeekly CMO Leadership Direct Reports Team Meetings (Each manager with their direct team)\nGoal\n: Foster an environment to empower managers overseeing different functions to collaborate and share ideas and feedback.\nWeekly Direct Reports Meetings (Each manager with their direct reports)\nGoal\n: For managers to work with direct reports on removing roadblocks, brainstorming, coaching, and providing/receiving feedback.\nContacting Marketing\nGetting Help by Common Topics\nTopic\nWhere to reach out\nSub-Team\nBlog posts, webcasts, the newsletter or other marketing content\n#content\nContent\nSwag\n#swag\nBrand\nDesign requests, logo usage questions\n#marketing-design\nBrand\nExternal PR (public relations) agency, discuss GitLab media mentions, and evaluate speaking/podcasting/commentary opportunities\n#external-comms\nCorporate Communications\nAnything regarding the marketing website and website development\n#digital-experience-team\nDigital experience\nQuestions about tools in the\nmarketing tech stack\n, evaluating new marketing tools, marketing system process improvement\n#mktgops\nMarketing Operations\nRules on\nlegally compliant language\nfor marketing communications (\ninternal only\n)\n#mktgops\nMarketing Ops\nSalesforce\n#sfdc-users\nSales Operations (not marketing)\nA complete list of marketing slack channels can be found\nhere\n.\nGeneral Questions and Feedback\nGitLab Marketing public issue tracker\n; please use confidential issues for topics that should only be visible to team members at GitLab\nSlack channel\n; please use the\n#marketing\nSlack channel for questions that don‚Äôt seem appropriate to use the issue tracker\nCMO Requests\nPlease follow the\nCMO handbook\nfor review request workflows, and communication guidelines.\nSocial Requests\nAll teams are responsible for requesting social posts themselves. If you are not the DRI on a specific category or campaign and want to request a social post, please reach out to the teams‚Äô point person identified below as a first step. Team Members in these roles reserve the right to say no to your request. If they say yes, coordinate with them to\ncreate a new social request issue\nso that the social team can process the request and schedule the post(s). The point person on the team or a member of the marketing or social teams may adjust copy to ensure consistency in brand voice.\nEvents: Jr. Content Editor\nRelease & technical posts/product updates:\nTechnical writing\nUser questions/comments on Twitter/X:\nSocial Marketing\nor\nDeveloper Relations\nteam\nLeadgen campaigns:\nContent\nteam\nUX Design: UX Lead\nPress/media coverage: Post in\n#external-comms\nfor assistance from the\nCorporate Communications\nteam\nSocial media, reshares of mentions, CEO Statements/posts: Post in\n#social_media_action\nfor assistance\nCompany Spokesperson\nSpeaking on behalf of GitLab at a conference, to media or on a podcast as a GitLab team member is a significant responsibility. Please see the\nCorporate Communications Handbook Page\nfor guidelines and trainings.\nBlog post editing\nProduct release posts:\nProduct team\nTechnical community posts/tutorials:\nDeveloper Advocacy\nand\nBlog editorial\nteam\nCEO statements/updates:\nAll other blog posts:\nBlog editorial team\nGuidelines for how to pitch and submit a blog, including templates and formatting, can be found in the\nBlog Handbook\n.\nNewsletter\nMarketing Newsletter\nMarketing and the Editorial team send out a monthly developer newsletter, called ‚ÄúDevSecOps Download‚Äù, to our\nnewsletter subscribers\n. The newsletter always includes information about the latest release post, links to our latest blogs, plus additional content for DevSecOps teams. The goal for this newsletter is thought leadership and awareness.\nTo add a content suggestion, please create an issue with ‚ÄúDevSecOps Download Content: [subject]‚Äù in the title (no template necessary) and tag @sgittlen (Sandra Gittlen, Blog Managing Editor). Anyone in the company can add suggestions, but the Blog Managing Editor will determine the final content.\nOther Newsletter\nTo request a newsletter to be sent to an audience outside the\nnewsletter subscribers\n, please create an issue in the\nCampaigns project\n, using the\nrequest_email_newsletter\nissue template.\nNewsletter requests should be submitted no less than 5 business days before the intended send date to ensure there is enough time for Content and Marketing Programs Manager‚Äôs (MPM) review and set up workflow.\nCommunity Newsletter\nThe community newsletter is managed by the\nDeveloper Relations\nteam, dedicated to sharing relevant developer content, highlighting contribution opportunities, and updating community members on upcoming events. We aim to keep our contributors involved and connected with the wider community. This newsletter will not be used to drive or generate leads.\nTo submit to the newsletter, please follow the\nhandbook instructions\n.\nSponsorship\nWe are happy to sponsor events and meet-ups where a marketing benefit exists, subject to approval by\nField Marketing\nManagers. These sponsorships may be in cash or in kind, depending on individual circumstances.\nOrganizational or project sponsorships may also be considered where a marketing benefit exists. Typically, these sponsorships will be in kind - e.g., developer time commitments, or\nsubsidized / free GitLab licenses\n.\nCash sponsorship of projects or organizations may be considered only in exceptional cases - for example, if a project or organization that GitLab depends on is struggling to survive financially.\nMarketing Slack Channels\nWe use Slack internally as a communication tool. The Marketing channels are as follows:\n#marketing\n: General marketing channel. Don‚Äôt know where to ask a question? Start here.\nmarketing-team-internal\n: (Private) Read-Only channel for marketing team members, with the ability to post comments. CMO staff has the ability to post. Should a team member want to make a post, please reach out to our Marketing EBA with your written statement and as much as possible, provide an issue or MR with more details.\n#brand\n: Connect with Brand Strategy, Brand Marketing, and Brand Design here.\n#brand_video\n: Video production and marketing support.\n#cfp\n: All event call for papers will be posted here. Learn more in the\nspeaking resources\nhandbook.\n#cmo\n:\nCMO review requests\nand content shares.\ncmo-staff\n: (Private) CMO‚Äôs private staff discussion room\n#content\n: Questions about blog posts, webcasts, the newsletter or other\nmarketing content\n? This is the place to ask.\n#developer-relations\n: A channel for the\ndeveloper relations\nteam to collaborate.\n#dev-advocacy-team\n: Discuss the latest tech in DevSecOps and Cloud-Native with the\nDeveloper Advocacy\nteam. You can request speakers, customer consultancy and technical content collaboration and guidance.\n#digital-experience-team\n: Channel for connecting with the\nwebsite development and design teams\n#digital-marketing\n: Channel for all advertising, website analytic and general digital programs.\n#external-comms\n: To collaborate with our external PR (public relations) agency, discuss GitLab media mentions, and evaluate speaking/podcasting/commentary opportunities.\n#marketing-design\n: Discuss, feedback, and share ideas on\nMarketing Design\nhere.\n#marketing-campaigns\n: Discuss, ask questions, stay up-to-date on\ncampaigns\nand events that are being organized by the Marketing Program Managers\n#mktgops\n:\nMarketing Ops\ncommunication channel for questions and project updates\nmktg-budget-holders\n: (Private) Discussion among all Marketing team members with budget responsibility\n#product-marketing\n: Discuss, feedback related to product news, features and vision\n#regional-partner-marketing\n: Discuss, ask questions, stay up-to-date on events that are being organized by Regional Field Marketing, and Channel Marketing\n#remote\n: Discuss and share impressions on remote work experience, playbook and strategy.\n#sales_dev_global\n: Place for the sales development team to brainstorm amd share ideas. Please refer to the\nregional Slack channel list\nto reach SDR/BDR teams in AMER, EMEA, APAC.\n#sfdc-users\n: Having issues with SFDC? Ask here first.\n#social_media_action\n: Use this channel to communicate and coordinate with the\nSocial Marketing\nteam. You can ask for amplification help and share cool tweets, posts, etc.\n#swag\n: Request or question regarding swag.\n#website\n: Discuss topics related to website redesign project\nAutomated channels with feeds from different sources:\n#developer-advocacy-updates\n:\nZapier workflows\nautomatically post GitLab blog posts, Developer Relations social shares, competitive insights, Common Room updates, etc.\nhn-mentions\n: Hacker News post feed, automated with\nZapier\nand maintained by the Developer Relations team.\nsocial_media_posts\n: Automated social media post feed.\nMarketing email alias list\nAnalysts@ company domain: external email address for contacting Analyst Relations at GitLab. Replies are forwarded to Analyst Relations manager and VP Product and Product Marketing\nCommunity@ company domain: external email address for sending confirmation emails related to GitLab products. Replies are forwarded to Zen Desk support\nContent@ company domain: external email address associated with management of our SlideShare account. Replies are forwarded to Content Marketing team and Marketing OPS Manager\nEvents@ company domain: external email address for sending live, VIP & in-person training related emails. Replies go to Field Marketing Managers and Marketing OPS Manager\nFieldmarketing@ company domain: external email address for requests to the worldwide Field Marketing team\nGiveaways@ company domain: external email address for receiving content & social media related promotional giveaways. Replies go to Content Marketing Team and Marketing OPS Manager\nLeads@ company domain: external email address for internal Lead alerts. Replies go to Marketing OPS Manager\nNews@ company domain: external email address used to send newsletter. Replies go to Marketing OPS Manager and Manager, Content Marketing\nMPM@ company domain: external email address used to send direct generic requests to the Marketing Program Managers\nMarketingOPS@ company domain: external email address used to direct generic operational requests to Marketing OPS Manager\nMarketingSFDC@ company domain: external email address associated with management of Salesforce. Replies forward to Manager, Digital Marketing Programs; Field Marketing Manager; Product Marketing Manager; and Manager, Content Marketing\nSecurityAlerts@ company domain: external email address used to send security alerts. Replies go to Marketing OPS Manager\nSponsorships@ company domain: external email address used to manage sponsor requests from community. Replies forward to Developer Relations Team\nSupport@ company domain: external email address for sending Breaking Change and/or support related customer communications. Replies go to Zen Desk support\nSurveys@ company domain: external email address for sending the Developer Survey and/or related surveys. Replies go to Content Team and Product Marketing Manager\nWebcasts@ company domain: external email address for sending webcast related emails. Replies go to Marketing OPS Manager and Marketing Program Managers\non24questions@ company domain: external email address used for collecting privately asked questions in On24 webinars\nGet to Know the Marketing Team\nMarketing Team READMEs\nGet to know the people who work in GitLab‚Äôs marketing team by visiting our\nREADMEs\n.\nLearn about the Marketing Departments\nMarketing Functional Conversations are modeled after Group conversations. While Group Conversations offer high-level insights, Marketing Functional Conversations are meant to drill deeper into the various functions within the Marketing Department. The goal of Marketing Functional Conversations is to create increased awareness and mutual understanding of the functions within Marketing. Awareness and understanding is an essential building block for effective collaboration.\nRecordings of the Marketing Functional Conversations can be found on the\nGitLab Unfilitered YouTube Channel\nBrand and Product Marketing\nProduct and Brand Marketing represents the GitLab story at the brand, solution, product, and technical levels. We accelerate GitLab‚Äôs path to market by developing market insights, leadership positioning, messaging, and narratives that elevate our brand, show value in our solution, and fuel demand for our platform. We activate brand ambassadors and customer advocates to show momentum and trust in the market. The team includes Solutions & Product Marketing, Brand Marketing, Design, and Content.\nHandbook\nHandbook Links\nBrand\nMerchandise Handling (Swag)\nProduct and Solution Marketing\nCore Product Marketing\nCompetitive Intelligence\nAnalyst Relations\nCustomer Advocacy\nDesign\nContent\nIntegrated Marketing\nThe Integrated Marketing team is focused on creating awareness, generating demand and collaborating with the broader ecosystem globally, through a co-ordinated and unified approach.  We connect the dots and bring content and messaging to life by leveraging various channels as our levers to communicate across segments, regions and personas.\nThe team includes\nField Marketing\n,\nGlobal Channel Marketing\n,\nCorporate Events\n,\nAccount Based Marketing\n,\nIntegrated Campaigns\n,\nLifecycle Marketing\n,\nDigital Strategy\nand\nDigital Experience\n.\nHandbook\nHandbook Links\nField Marketing\nChannel Marketing\nCorporate Events\nAccount Based Marketing\nIntegrated Campaigns\nLifecycle Marketing\nDigital Strategy\nDigital Experience\nMarketing Website\nSales Development\nThe\nSales Development\norganization is focused on serving the needs of prospective customers during the beginning of their buying process.\nThe Sales Development department is composed of 2 groups: the SDR team who handles all the inbound interest and the BDR team who specializes in outreach of prospective customers.\nWhen prospective customers have questions about GitLab, the SDRs assist them or connect them to a technical team member as needed. During the initial exploration, if the prospective customer is interested in continuing their exploration of GitLab, SDRs will connect them to an Account Executive (AE) or Strategic Account Executive (SAE).\nBDRs contact people who work at large organizations to uncover or create early-stage sales opportunities for GitLab SAEs. The BDR team will plan with their paired Sales counterpart to approach interesting accounts and develop a plan for prospecting including contact discovery, understanding enterprise-wide initiatives that GitLab could assist with, and ensuring accurate data quality of accounts and contact in salesforce.com.\nHandbook\nMarketing Operations and Analytics\nincludes Marketing Operations, Marketing Analytics, and Globalization and Localization. The team focuses on enabling efficient operations and actionable analytics insights, working across all Marketing teams. The team also owns the MarTech stack used by Marketing.\nHandbook\nHandbook Links\nMarketing Operations\nMarketing Strategy & Analytics\nGlobalization & Localization\nEnterprise Data\nThe GitLab Enterprise Data Team is responsible for empowering every GitLab team member to contribute to the data program and generate business value from our data assets.\nHandbook\nDeveloper Relations\nDeveloper Relations drives platform awareness and adoption by reaching deep into wider communities and engaging developers where they are. GitLab currently engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors.\nHandbook\nHandbook Links\nContributor Success\nDeveloper Advocacy\nCommunity Programs\nEducation Program\nOpen Source Program\nCorporate Communications\nThe mission of GitLab‚Äôs Corporate Communications team is to amplify GitLab‚Äôs product, people and partnerships in the media, via social media channels and through award wins. This team is responsible for global public relations (PR), social media, and executive communications (speaking).\nHandbook\nHandbook Links\nSocial Marketing\nSpeaking Resources\nIncident Communications Plan\nMarketing Calendar\nFY25 All-Marketing SSoT Calendar\nThe marketing team utilizes a\nsingle all-marketing calendar\nwhere everyone can contribute, and we can answer key questions (using pre-set filter views) related to upcoming marketing plans. Note: this calendar links to our internal handbook page.\nPlease do not filter the entire doc. Instead, you may use pre-set filter views (click down arrow selector next to the filter icon on the bookmark bar) to see activities grouped by GTM Motion, segment, region, team, language, and more.\nIf there are other views you would find helpful, please feel free to duplicate an existing filter view, and include some sort of categorization (i.e. team, segment, etc.). You can do this by going to a similar filter view, and clicking on the top right gear icon, then selecting\nDuplicate\n.\nFor more information about adding events to All-Marketing SSoT Calendar, please\nclick here\n.\nMarketing Team Processes\nThis front page of the Marketing Handbook is intended to serve as the external face of the marketing team. We‚Äôve created a dedicated\nTeam Processes page\nthat is intended to house our internal processes, workflows, and guidances relevant internally to the marketing team.\nVisit the Page\nAccount Based Marketing\nAccount Based Marketing Handbook\nBlog Handbook\nEverything you need to know about suggesting and publishing a post on the GitLab Blog.\nBrand and Product Marketing\nGitLab Brand and Product Marketing Handbook\nChief Marketing Officer\nGitLab CMO Handbook: Review requests and communication guidelines\nCI/CD GTM Sales Plays\ndescription to add\nCMO Shadow Program\nGitLab Marketing Handbook: CMO Shadow\nCore DevOps Solutions\nCore DevOps Solution Definition A DevOps solution is:\nA customer problem or initiative that needs a ‚Ä¶\nCorporate Communications Handbook\nMission Statement, What We do, Team Norms, Contact Info and Resources for Corporate Communications at GitLab\nDemand Generation\nDemand Generation at GitLab, including Marketing Campaigns, Digital Marketing, and Partner & Channel Marketing.\nDeveloper Relations\nThe Developer Relations team supports GitLab's mission by working with our community to ensure they receive support and recognition for contributing to GitLab.\nDigital Experience Handbook\nLearn more about the Digital Experience purpose, vision, mission, objective and more in this handbook.\nField Marketing\nThe role of Field Marketing at GitLab is to work closely with sales to support marketing messages & pipeline building at a regional level through in-person and virtual interactions.\nFY22 Marketing Plan\nFY23 Marketing Plan\nGitLab Event Information\nEvents at GitLab This page outlines details for in-person events. For virtual event information, ‚Ä¶\nGitLab Marketing Team READMEs\nLearn more about working with various members of the marketing team\nGitLab Positioning FAQs\nWhat is GitLab? GitLab is an open-source, complete DevOps platform, delivered as a single ‚Ä¶\nGlobal Channel Marketing\nGlobal Channel supports global channel sales objectives and provides support to the GitLab channel partner community and customers.\nGrowth Direction\nGrowth Section Overview The GitLab Growth section is dedicated to making it easier for teams to find ‚Ä¶\nInbound Marketing Handbook\nIntegrated Campaigns\nGitLab Marketing Handbook: Integrated Campaigns\nIntegrated Marketing\nIntegrated Marketing at GitLab\nIntra-Department Learning: Marketing Functional Conversations\nThe goal of Intra-Department Learning is to create, conduct, and host cross-department learning sessions to drive collaboration and understanding of marketing functional team priorities.\nJourneys\nIntroduction As a company we have to be great at providing multiple journeys. The contributor, user, ‚Ä¶\nLifecycle Marketing\nLifecycle Marketing Handbook\nLocalization\nLearn more about the Localization team's vision and processes.\nMarketing - Emergency Response\nGitLab's email response process for marketing emergencies\nMarketing Analytics\nMarketing Analytics supports the entire Marketing team to develop and execute a Global Marketing Strategy by working with Marketing Leadership and GTM teams as well as owning the overall measurement strategy for GitLab marketing.\nMarketing Career Development - Overview\nThis page details the marketing career development program.\nMarketing Department Efficiency Working Group - FY24\nThe Efficiency Working Group aims to identify and solution 3-5 key areas for efficiency improvement within the Marketing Department.\nMarketing Operations\nMarketing Operations (MktgOps) supports the entire Marketing team to streamline processes and manage related tools. Due to those tools, we often support other teams at GitLab as well.\nMarketing Project Management Guidelines\nThis is a work in progress for the Marketing Project Management Simplification project. Sub Pages ‚Ä¶\nMarketing Strategy & Platforms\nLearn more about the Marketing Strategy & Platforms.\nMarketing Team Processes - How We Work\nThis page is meant to house resources and processes for the marketing team.\nPrescriptive Buyer Journeys\nSales Development\nThe purpose of this page is to act as the homepage of the sales development org's handbook presence.\nSales Plays\nSales plays are designed to improve the quantity of opportunities and closed business with defined Land and Expand sales motions\nSMB Marketing\nWho we are SMB Marketing addresses the SMB Segment in support of SMB Sales, Sales Development (SDR) ‚Ä¶\nTeam Member Social Media Policy\nThis is the GitLab employee social media policy\nThe Source Handbook\nEverything you need to know about The Source, GitLab‚Äôs thought leadership portal.\nUser Engagement\nUser Engagement is one of GitLab's top 12 cross-functional initiatives. The goal is to strengthen our developer brand and increase contributors per month to GitLab.\nUTM Strategy\nEverything you need to know about our UTM strategy, which enables insights through the connected/resulting Tableau dashboards.\nVirtual Events\nAn overview of virtual events at GitLab including webcasts, virtual workshops, and external virtual events.\nLast modified June 27, 2025:\nRemove company OKR process (\n99161f51\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4000}
{"doc_id": "00ff475ef529bb29", "url": "https://handbook.gitlab.com/handbook/finance/growth-and-development", "title": "Finance Growth and Development | The GitLab Handbook", "text": "The Handbook\nFinance\nFinance Growth and Development\nWelcome to the GitLab Finance Growth and Development Page\nThe GitLab Finance Department is dedicated to the growth and development of our team members. To ensure that this is a focus area, we have come up with five programs for FY22.\nOn-Boarding Growth and Development\nFinance Team Member on-boarding will include specific tasks and information to foster a culture of continued development. This will include:\na list of ‚ÄúMust Meet‚Äù for onboarding coffee chats, to be provided by the team member‚Äôs manager\na working style assessment using Simpli5\na view into the Finance Career Ladders and a view of the\nOrg Chart\na link to read GitLab‚Äôs take on\nCareer Development\nan overview of the mentorship programs, shadowing opportunities and\ninternship programs\nlinks to the GitLab training tools available from the People group :\nExternal Resources (with no cost)\n&\nInternal Resources\nWork Style Assessment\nWe will use\nSimpli5\nassessments to help us develop a standardized set of terms for us to all communicate more efficiently. Simpli5 gives you the power to understand YOUR natural tendencies as well as the natural tendencies of your co-workers. This awareness will help you gain a new perspective of yourself and your teammates.\nCareer Plans and Growth Ladders\nEvery individual is ultimately responsible for their career plan and managers are responsible for providing an environment to develop a plan. We will work on a structure that clearly lays out a career plan progression and tools to communicate a plan by aligning to the GitLab Career Development\nhandbook page\n.\nCross Training, Mentorship and Shadow Programs\nTo align with career development plans, we will create opportunities for cross training with other team members. This will not only allow for knowledge transfer for growth, it will also allow leadership opportunities for team members that wish to train.\nWith the success of several mentorship programs at GitLab, we will create a\nsimilar program for the Finance Org\n.\nWe will create opportunities to shadow finance leaders for team members to gain perspective and business acumen.\nCFO Shadow Program\nIn FY23Q1, we are implementing a CFO Shadow Program which will initially by available to Finance Division team members. The CFO Shadow Program will be modeled off of the\nCEO Shadow Program\nwhich has proven to be a differentiated and impactful development opportunity for GitLab team members. The goal of the CFO Shadow Program is to extend that opportunity to team members with an interest and background in Business and/or Finance who are interested in learning more about what it means to be a CFO at a publicly traded company. The exposure from this experience is intended to support both the long and short term career development of the shadow.\nThe CFO Shadow Program is a rotation that runs over the course of 2 weeks, with the shadow attending meetings with the CFO for 3 days per week (Tuesday - Thursday) during each week (aligned with EST). More information about the program logistics can be found in our\nCFO Shadow Program page\nTraining Aligned to GitLab L&D\nTogether with GitLab L&D, we created the\nFinance Learning Hub\n, a curated learning channel in Level Up.\nTo align and support the broader GitLab L&D efforts, we will promote the training made available by the People team. This will allow us to give back and contribute in a way that makes this program even stronger. We will continue to look for ways to create a curriculum that fits the different areas of the finance org.\nCFO Shadow Program\nOverview The CFO Shadow Program is an immersive 1 or 2 week assignment where team members can apply ‚Ä¶\nFinance Learning and Development\nWelcome to Learning and Development for the Finance Department at GitLab! The resources in this page ‚Ä¶\nFinance Learning and Development\nWelcome to Learning and Development for the Finance Department at GitLab! The resources in this page ‚Ä¶\nFinance Mentorship Program\nUpdate: The Finance Mentorship Program is not currently active. We will update this page in the ‚Ä¶\nUnder Construction - FinBT Mentorship Program\nFinBT Mentorship at GitLab\nMentorship is an opportunity to learn from personal experience, ‚Ä¶\nLast modified January 30, 2025:\nReplace ref links with regular links (\nc4c9b3d1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 716}
{"doc_id": "f61b6dcd40758af3", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/developer-advocacy", "title": "Developer Advocacy | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nDeveloper Advocacy\nDeveloper Advocates build GitLab‚Äôs technical brand with deep, meaningful conversations on engineering topics relevant to our community.\nWelcome to the Developer Advocacy Handbook\nQuickLinks\nTeam Workflow\nIssue Templates\nNew Content Issue\nNew Event Issue\nNew Activity Issue\nCFP Issue Template\nIssue Boards\nTeam Workflow\nContent by Assignee\nContent by Quarter\nContent by Types\nEvents\nTeam Resources\nTeam Calendar\nContent Effectiveness\nTeam Projects\nOSS Contributions\nCFPs\nContent creation\nTeam Shared Drive\nWant to work with the team?\nLearn about Developer Advocacy\nRequest a Developer Advocate Issue Template\nRequest Community Response support\nRequest Content\nMission\nTo support, grow, and engage the wider\nGitLab community\nthrough collaboration, content, and conversations.\nStrategy\nDeveloper relations and developer advocacy is an evolving, complex field.\nOur team focuses on areas aligning with the company‚Äôs areas of interest including:\nDevSecOps: We want our work to speak to not only developers but all team members involved in the DevSecOps lifecycle to deliver working code to production: Product Managers, software engineers, system and DB administrators, designers, test engineers, security engineers, operations engineers, platform engineers, SREs, development managers and executives, etc.\nEnterprise: Developers and DevSecOps professionals in the enterprise have special constraints and needs.  Often these are glossed over with easy ‚Äúthrow out your architecture and use this new shiny thing‚Äù - we won‚Äôt do that, we‚Äôll acknowledge real-world challenges, legacy code, and enterprise constraints and help people solve those problems as well. When applicable, we switch roles into consulting and support.\nKPIs\nThe\nFY25 Marketing Strategy\n(internal only) shows a Customer Journey with five stages: Awareness, Consideration, Conversion, Expansion, and Evangelism.\nWhile our team can influence people at each stage, our focus is on Awareness, Consideration, and Evangelism. The KPIs we use to measure our impact on these stages are:\nviews from content published across owned and earned channels\ndevelopers engaged through webinars, workshops, and industry events\nDeveloper Relations influenced pipeline (pipeline influenced by campaigns that are leveraging DevRel‚Äôs content) and\nactive community members\nWe recognize these KPIs don‚Äôt capture the impact of the diverse range of work that our team does but understand that tradeoffs can be necessary to effectively communicate our impact within GitLab.\nWhat fits in our strategy\nWhen we are reviewing opportunities or requests for support, we must be able to answer yes to each of these questions to move forward with the work:\nWill this work support, grow, and/or engage GitLab customers and community members?\nIs there a measurable impact against one of our team‚Äôs KPIs? Because of GitLab‚Äôs\nglobal optimization subvalue\n, we‚Äôll also consider requests that influence a company KPI or contribute to progress on an OKR.\nHas an issue been created to define the work and assign a DRI?\nIf the answer to any of the above questions is ‚Äúno‚Äù, we ask the requestor to take one of the following actions:\nMake adjustments so we can take on the work.\nFind another team that is better suited to deliver the work.\nCome to an agreement that the work should not be done.\nTeam members and focus areas\nWe are members of the\nDeveloper Relations team\n.\nTeam member\nFocus areas\nLanguages\nProjects\nTechnologies\nResources\nCesar Saavedra\nStaff Developer Advocate\nDevSecOps with a focus on CD, GitOps, Kubernetes, GitLab Flow, Feature flags, GitLab Duo\nEnglish, Spanish\nGitLab demos on YouTube\n, Analyst relations demos, Competitive Research, CD Overview, Feature Flags, GitLab Flow\nKubernetes, GitOps, CI/CD, Java, AI\nDaniel Helfand\nDeveloper Advocate\nDevSecOps\nEnglish\nCI/CD, Kubernetes, Go\nFatima Sarah Khalid\nDeveloper Advocate\nCommunity Engagement, DevSecOps\nEnglish\nLinkedIn Live\n,\nCommunity Engagement\nCI/CD, C++, PHP, JavaScript\nFernando Diaz\nStaff Developer Advocate\nDevSecOps with a focus on Security and Compliance\nEnglish, Spanish\nGitLab demos on YouTube\n, Analyst relations demos,\nevent support\n,\nSecurity and Governance tutorials\nSecurity, Kubernetes, CI/CD, Python\nItzik Gan-Baruch\nStaff Developer Advocate\nDevSecOps with a focus on CI/CD, CI/CD Catalog, Security\nEnglish, Hebrew\nProduct tours\n,\nClick-through demos\n,\nCI/CD components\nRemote Development, CI/CD, Value Stream Management\nJohn Coghlan\nDirector, Developer Advocacy\nStrategy and Planning in Developer Advocacy\nEnglish\nWebsite\nMichael Friedrich\nStaff Developer Advocate\nDevSecOps with a focus on  efficiency with AI\nEnglish, German, Austrian\nGitLab Duo Adoption\n,\nCI/CD components\nDevSecOps, AI, CI/CD, Python, Go, C/C++, Rust\n,\nTalks\n,\nPortfolio\nWilliam Arias\nStaff Developer Advocate\nDevSecOps with a focus on AI/ML, Sec and Data\nEnglish, Spanish\nSupport Ticket Sentiment Analysis, Competitive Research, Analyst relations demos,\nEnd-to-end DevSecOps Platform\nCI/CD, AI/ML, Kubernetes, Security, Python, C\nWhat we do\nOur developer advocate team can be summarized by the ‚ÄúThree Cs‚Äù:\nContent creation:\nThis is what many often think of when thinking of the traditional role of developer relations: writing blog posts, delivering technical talks, participating in podcasts or panels, and sharing ideas and thoughts on social media. Content creation also includes assets co-created with other GitLab teams, inside and outside of Marketing.\nCustomer and community engagement:\nOur team regularly engages with GitLab customers and the wider GitLab community when they have questions, concerns, and feedback. This happens during in-person and virtual events, webinars, and meetings and online via GitLab issues, the GitLab Forum, Hacker News, and other social media sites.\nConsulting:\nWithin GitLab, our team represents the voice of the community. When other teams are working on changes or decisions that will impact customers and the community, we will educate them on our customers and community, advocate for their interests, and work to ensure that any potential impacts are clearly understood and addressed when communicating such changes. Our team also shares our knowledge of industry trends, emerging tools, social media strategy, and other skills to support our teammates in achieving their goals in alignment with GitLab‚Äôs\nCross-functiona Optimization\nsubvalue.\nContent creation\nWe build out content to help educate developers around best practices related to DevOps, GitLab, remote work, and other topics where we have expertise. Content includes presentations, demos, workshops, blog posts, and media engagements. Content creation also includes assets co-created with other GitLab teams, inside and outside of Marketing.\nPlease read the\nContent\nhandbook to learn more about the content workflow, library and distribution with UTM tracking.\nCustomer and Community Engagement\nOur team regularly engages with GitLab customers and the wider GitLab community.\nThe Developer Advocate team is the DRI for questions and strategy on the platforms below:\nPlatform\nDescription\nWorkflows\nDiscourse\nThe\nGitLab Forum\nis a place to ask and respond to questions and share projects or snippets of code.\nForum Workflows\nReddit\nThe\nGitLab Subreddit r/gitlab\nis a place to ask questions and share interesting use cases of GitLab and related workshops and tools.\nr/gitlab Workflows\nDiscord\nGitLab Community Discord\nis a place to connect with the community, join pair coding sessions and live streams, and discuss all things GitLab and contribution.\nCommunity Discord Workflows\nCommon Room\nWe use\nCommon Room\nto aggregate and review insights from our community engagement.\nCommon Room Workflows\nCommunity Response\nGiven the Developer Advocate team‚Äôs understanding of our community and broad knowledge of GitLab, we will engage in the response of situations that require intervention to address urgent and important concerns of our community members. We have a documented process for how we\nmanage these situations\n.\nConsulting\nDeveloper Advocates serve as consultants and subject matter experts (SMEs), leveraging their expertise and experience to support teams and customers with product features, new SKUs, and other topics.\nPlease read the\nConsultancy\nhandbook to learn more about consultancy requests, decision matrix, and examples with GitLab Duo / AI adoption.\nOther activities\nEvent support\nThe Developer Advocate team plays a key role in supporting events. We work closely alongside\nCorporate Event Marketing\nto provide strategic content and assistance for both corporate and third-party sponsored events. This collaboration ensures the success and seamless execution of various gatherings. To learn more please refer to the\nEvents page\n.\nWe also help team members prepare for speaking opportunities at local tech events and meetups. If you‚Äôd like help preparing for such an event, please reach out to us in the\n#dev-advocacy-team\nSlack channel or create an issue using the\nDeveloper Advocate Request template\n.\nRelease Advocacy\nDeveloper Advocates should always be prepared to promote our\nmonthly release\nand engage in\ncommunity response on release days\ngiven the historical performance of release posts on Hacker News.\nSocial media\nWe build our thought leadership and\ndistribute our content\non social media. See\nDeveloper Advocacy on Social Media\nto learn more about our strategies and become a GitLab advocate yourself.\nSpokespersons\nDeveloper Advocates are subject matter experts (SMEs) in their focus areas, and collaborate with the\nCorporate Communications team\nto provide media coverage in the form of interviews, podcasts, content by-lines, etc. Developer Advocates are\nGitLab spokespersons\nand are required to take relevant training as determined by the\nCorporate Communications team\n.\nProjects\nOur team maintains projects to provide GitLab use cases for content creation (demos, recordings, blog posts, workshops, talks, etc.), help showcase technical concepts and research to customers, and automate our team processes. We work in\npublic by default\n, so that everyone can learn and contribute. See\nDeveloper Advocate Projects\nfor a list of all of those projects.\nHow we work\nFind us on Slack\nGitLab team members can also reach us at any time on the\n#dev-advocacy-team\nSlack channel where we share updates, ideas, and thoughts with each other and the wider team.\nWe use\ndeveloper-advocacy-updates\nfor content shares and other updates that don‚Äôt warrant generating noise in the larger channel. Many updates are automated using\nZapier workflows\nTeam meetings\nDev Advocacy team meeting (bi-weekly) - Agenda: search for\nDeveloper Advocacy Bi-Weekly\nin GDrive.\nDeveloper Relations all-hands (monthly) - Agenda: search for\nin GDrive.\nDev Advocacy Showcase (monthly) - Agenda: search for\nDeveloper Advocacy Showcase [monthly]\nin GDrive.\nReporting\nWe organize our work through documented\nteam workflows\n, ensuring transparency and efficiency. Most of our results reporting is automated through triage bots and metrics collection.\nAdditional reporting is provided in the weekly Developer Relations report, search for\nDeveloper Relations - End of Week updates\nin GDrive.\nCalendar\nThe Developer Advocate calendar provides insights into speaking engagements, important events, CFP timelines, and other dates. Learn more in our\nCFP handbook\n.\nCommunity Newsletter\nOverview of the Community Newsletter We run a monthly Community Newsletter to share ‚Ä¶\nConsultancy workflows for Developer Advocates\nLearn about the Developer Advocacy team's consultancy workflows and requests.\nContent library and workflows for Developer Advocates\nLearn about the Developer Advocacy team's content library, and content creation and distribution workflows.\nDeveloper Advocacy CFPs\nCFP Resources Event call for paper submission forms differ: Some require 1000 character abstracts, ‚Ä¶\nDeveloper Advocacy Community Response Process\nHow to engage developer advocates in community response Given the developer advocacy team‚Äôs ‚Ä¶\nDeveloper Advocacy on Social Media\nIntroduction Developer Advocacy builds out their thought leadership through social media and ‚Ä¶\nDeveloper Advocacy Team Calendar\nTeam Calendar The Developer Advocacy Team calendar contains team member speaking engagements, ‚Ä¶\nDeveloper Advocacy: Mentoring and Coaching\nIntroduction This handbook page documents best practices how Developer Advocates can help wider ‚Ä¶\nDeveloper Advocate Team Workflow\nTeam Workflow Welcome to the Developer Advocate team workflow page. Learn how the team works and how ‚Ä¶\nHacker News\nOverview Hacker News is an important social channel. Threads that mention GitLab‚Äôs structure, ‚Ä¶\nLearn Developer Advocacy\nWhat is advocacy? Advocacy creates a human connection with buyers and consumers to technology way ‚Ä¶\nOSS Contributions\nContributions to OSS The Developer Advocacy team believes in Open Source and wants to lead by ‚Ä¶\nProjects\nIntroduction We maintain our projects in the public gitlab-da group. This group has access to an ‚Ä¶\nLast modified July 10, 2025:\nDev Advocacy: Remove internal deprecated GDoc URLs (\ndf649b4d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1948}
{"doc_id": "6abff9418e48a1f6", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/data-access/database-framework/doc/fdw-sharding", "title": "PostgreSQL 11 sharding with foreign data wrappers and partitioning | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nData Access Sub Department\nDatabase Framework Group\nPostgreSQL 11 sharding with foreign data wrappers and partitioning\nThis document captures our exploratory testing around using foreign data wrappers in combination with partitioning. The idea is to implement partitions as foreign tables and have other PostgreSQL clusters act as shards and hold a subset of the data.\nBackground\nWith\nPostgreSQL 11 declarative partitioning\n, we can slize tables horizontally. That is, we keep working with the top-level table as usual but underneath we organize the data in multiple partitions. Those can be thought of as regular tables that are being attached to the top-level table (much like table inheritance in PostgreSQL).\nIn order to implement partitioning, we choose a partitioning key and a partitioning method (hash or range based - read more about it in the\ndocs\n). With any of the methods, a partition contains data only for a subset of the partitioning key‚Äôs values. Queries benefit from this only if they contain a filter on the partitioning key. In that case, the query planner statically derives which partitions have to be scanned for a particular query. Best case it only scans one partition to satisfy the query and excludes all other partitions.\nStandard PostgreSQL partitioning creates all partitions equal and on the same physical cluster. Therefore, partitioning is not a built-in way to distribute data across multiple clusters. Instead, it implements logical data organization and splitting but does not natively support distributing data. This is where\nPostgreSQL foreign data wrappers\ncome in and provide a way to access a foreign table just like we are accessing regular tables in the local database. In our exploratory scheme, each partition is a foreign table and physically lives in a separate database. We call this a ‚Äúshard‚Äù, which can also live in a totally separate database cluster.\nThe PostgreSQL community has a\nroadmap to build sharding capabilities\ninto native PostgreSQL in upcoming versions.\nInitial setup\nIn this demo, we go through the process of setting up the schema.\nIn our example, we picked\nissues\ntable as we did in previous examples. Choosing the\nproject_id\nas the partitioning key (because that is already available), we\nre-create the top-level table\nwith HASH(project_id) based partitioning:\npublic\n.\nissues\n(\nid\ninteger\n,\ntitle\ncharacter\nvarying\n-- ...\nproject_id\ninteger\n,\n-- ...\n)\n(\nproject_id\n);\nAs a next step, we\nprepare two shards\nto contain the actual partitioned data: Two local databases\nshard1, shard2\n- which could also live on a separate PostgreSQL cluster.\npostgres_fdw\n;\nshard1\npostgres_fdw\n(\ndbname\n'shard1'\n,\nhost\n'...'\n);\nshard2\npostgres_fdw\n(\ndbname\n'shard2'\n,\nhost\n'...'\n);\nWe then proceed and\ncreate partitions on the local database\n. Note that we are creating those as foreign tables and distribute them across\nshard1, shard2\n:\nparts\n.\nissues_0\npublic\n.\nissues\n(\nmodulus\n8\n,\nremainder\n0\n)\nshard1\n;\nparts\n.\nissues_1\npublic\n.\nissues\n(\nmodulus\n8\n,\nremainder\n1\n)\nshard2\n;\n-- ...\nNow the local database is prepared but we still have to\ncreate the actual tables in the shards\n. For each of the partitions, we create a regular table along with indexes in the\nshard1, shard2\ndatabases.\nA limitation at this point is that we cannot add foreign keys on these tables to any table that does not reside in the same shard.\nWith this setup, we can now run queries like the following and see them accessing one partition only which lives on the remote shard:\n*\nissues\nproject_id\n=\n?\nWe can continue to work with the\nissues\ntable as usual. If we added more immutable conditions to the query, those would be pushed down on the shard.\nSchema migrations\nIn order to change the existing schema, we‚Äôve discussed two examples:\nAdding\nand\ndropping\na column.\nThe example migrations need coordination in a sense that the foreign table‚Äôs schema needs to be a subset of the actual table. For adding a column, we would first add the column to all the actual tables on the shards and only later make this visible by adding the column to the foreign tables (the other way around for dropping columns).\nReference tables\nSo far, the shards only contain regular tables for partitioned data. That data cannot reference data that does not reside on the shard. For example, we might have a\nusers\ntable that isn‚Äôt sharded and we want it to be available globally across shards.\nIn this step, we explore using logical replication to replicate selected tables across shards and make them available locally. This allows us to connect to a shard directly and work with the reference table and one of the partitions directly. However, this requires knowledge of which shard holds the partition of data we are actually interested in.\nIn this example, we setup logical replication slots for both shards and publish two tables: `user, projects`. On the shards, we subscribe to the publication and start replicating the reference tables locally.\nThis will allow us to run queries like the following:\n*\nusers\nissues_0\nas\nissues\n-- note this is a single partition!\nusers\n.\nid\n=\n?\nissues\n.\ntitle\n~*\n?\nThis is also possible on the main database of course. We‚Äôve been exploring this as an option to run more queries directly on the shard. It remains to be seen how useful this is really.\nSummary\nThis has been an exploration of combining foreign data wrappers with partitioning. PostgreSQL does not natively support sharding and distributing data across multiple physical clusters (yet). Foreign data wrappers serve as a tool to read data from remote servers and can be used to distribute data.\nHowever, this setup comes with a lot of complexity and limitations compared to a classic PostgreSQL setup:\nNeed to maintain connection details to foreign servers.\nDifficult to maintain consistent schema across a set of clusters.\nForeign keys are only supported locally.\nOverhead risk when partitioning key is not available is higher when data is remote.\nRisk of certain suboptimal joins and filters if not being pushed down to foreign table.\nPerformance degradation if multiple shards need to be accessed for a query.\nBalancing increase in query planning times with execution times.\nEach shard requires its own HA cluster.\nNo parallel scans of foreign tables.\nUpdates to reference tables still need to go to the main cluster creating a bottleneck for write-scalability and a single-point of failure.\nNo global transaction management.\nIn order to really benefit from this approach, we‚Äôd have to shard relevant tables by the same dimension and make it possible to execute queries directly on shards.\nWith a lot of different access patterns in GitLab, this seems not feasible before we agree on an application-wide sharding key and deal with conflicting access patterns (e.g. by means of service extraction or isolation).\nFortunately, partitioning is the groundwork that allows us to tackle the same set of problems without introducing much of the complexity coming from distributing the data physically. As such, introducing partitioning throughout the application is an iterative way of working towards a more scalable database solution in general.\nWe are going to tackle the\naudit log database design\nas a first step to introduce the groundwork for partitioning and prepare the application to make wider use of this pattern.\nAuthor:\nAndreas Brandl\nLast modified November 13, 2024:\nMove gitaly pages over to data access (\nc16c2006\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1248}
{"doc_id": "196e608a1a5a33a8", "url": "https://handbook.gitlab.com/handbook/product/ux/ux-research/ux-cloud-sandbox", "title": "UX Cloud Sandbox | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nUX Research at GitLab\nUX Cloud Sandbox\nHow to sign up and use the UX department‚Äôs cloud sandbox for usability testing.\nTesting environment for UX research studies\nThe User Experience (UX) team has developed resources for usability and workflow testing using a ‚Äòsandbox‚Äô area provisioned by the Infrastructure team. This allows for tightly controlled testing on a real GitLab instance without the risk of critical data loss or a security breach to gitlab.com. This page details the steps needed to access the sandbox and guidelines on how to structure a study within the sandbox.\nWhat‚Äôs a UX Cloud Sandbox?\nThe UX Cloud Sandbox is a reserved instance of GitLab running in its own ‚Äòprivate‚Äô space. Essentially, it acts as a completely separate installation of GitLab, similar to that of a self-managed client. That space is currently at\nhttps://ux.gitlabdemo.cloud/\n.\nThe UX team uses this space for usability testing, workflow studies, and usability benchmarking. The sandbox solves two problems: 1) it creates a safe environment for external participants to be able to share their screens without violating security or privacy concerns, and 2) it allows us to test Admin and Ultimate plan features not easily accessible through gitlab.com.\nYou may wish to use the UX Cloud Sandbox if you are interested in:\nEvaluating current workflows, JTBD, user journey maps, and so on‚Ä¶\nConducting user studies that require Admin privileges, Ultimate plan features, or more complex functionality (CI/CD pipelines, threat monitoring, and so on)\nConducting studies geared towards self-managed users\nPerforming\nCategory Maturity Scorecard\nstudies\nPerforming\nusability benchmarking\nstudies\nValidating solutions\nthat have already been released into the product\nRunning\nproblem validation studies\nAccess to the UX Cloud Sandbox\nTo gain access to the UX Cloud Sandbox, the first step is to generate credentials. You can self-serve on that by\nfollowing the steps on this handbook page\nunder ‚ÄòAccess Shared Omnibus Instances‚Äô.\nOnce you have generated credentials and accessed\nthe sandbox instance\n, you will be automatically granted your own group space with your name on it (see picture below). This group is like any other group in GitLab, it just has your name on it, and will act as the container for all of the work you do in the sandbox.\nStructuring your study\nAgain, everything you do should be within your own group.\nYour group will have your name on it, and it lives at the ‚Äòroot‚Äô of all of your work. To preserve this structure, please try to avoid creating any other top-level group (at the same level as the group with your name) on the shared instance.\nWithin your group, you can structure sub-groups and projects however you see fit. One good way to think about it is as a file system: groups are ‚Äòfolders‚Äô and projects are ‚Äòfiles‚Äô. Your structure may end up looking something like this:\nIf you find that you need to make adjustments to the group/subgroup structure, you can move subgroups around by following these steps:\nGo to the group page you wish to change.\nGo to\nSettings\n->\nGeneral\nUnder the\nAdvanced\nsection, find\nTransfer group\nUse the\nSelect parent group\ndropdown to find the parent group where you want this group to live\nClick\nTransfer group\nThe group you edited should now be a subgroup of the folder/parent group you selected in the dropdown. (Note: this is recursive, so anything under the group you move also moves)\nCreating a project with sample data\nThere are several reasons you might wish to generate sample data within your group or projects. These projects are empty by default, and testing user behavior on an empty project is not very accurate or realistic. It can be time consuming and tedious to handcraft an entire project‚Äôs worth of sample data, so we‚Äôve created a few options to populate your projects with sample data through Ruby scripts.\nNote:\nNot every type of data can be generated, especially in more complex setups. To get an idea of what is and isn‚Äôt possible, check the\nGitLab Ruby gem documentation\n.\nFor questions or troubleshooting, reach out to @leducmills on Slack.\nOption 1: If you have the GDK and are comfortable with some light code editing\nNote: It is easier to create a project and populate it with sample data than to populate an already existing project. However, you can edit the sample data ruby scripts (linked below), if you feel comfortable.\nGo to the\nsample data scripts repository\n. This project has several ruby scripts that show how different types of data might be populated. Request access if needed.\nClone it locally to your machine (not in your GDK directory).\nIf you don‚Äôt have it installed already, install the\n‚ÄòFaker‚Äô Ruby gem\n.\n$ gem install gitlab faker\nFrom your local GDK instance, create an access token with API scope (if you don‚Äôt have one already).\nLook through the different Ruby scripts, and copy the one that most closely matches your use case to a new file.\nAdd your local endpoint and access token at the top of the script:\n#this sets up our connection to our gitlab instance\nclient\n=\nGitlab\n.\nclient\n(\nendpoint\n:\n'Add the endpoint URL here'\n,\nprivate_token\n:\n'Add your token here'\n)\nFind the section in your Ruby file called\n# Global Variables for instance setup\n(probably around line 95 or so)\nChange the variables to meet your requirements (for example, how many issues, labels, branches, etc. you want)\nFrom your terminal, run your file:\nruby your_file_name.rb\n. You will see a number of status messages print to the terminal informing you of the status. Once the script stops, the data creation is complete.\nCheck the result on your local instance. If you are happy with the result, go to\nSettings\n, and export the project.\nBack in the UX Cloud Sandbox, create a new project in the directory for your project, select\nImport project\nfrom the options, and then select the exported file from your local project.\nCheck the uploaded project to ensure that the data you expect to be there is present and correct. Reminder: not all data gets exported.\nIf everything has worked properly, you should see your imported project, with all of the sample data intact, within the sandbox.\nImportant:\nForking a project is the quickest way to copy a project to a new space (or create your ‚Äòsession‚Äô projects). However, it does not copy over data like merge requests, labels, or issues. It does copy branches, commits, files, and commit messages, though, so if that‚Äôs all you need, fork away.\nIf you do need MR, issue, and label data, you must repeat the import process for each session you wish to run by creating a new project, selecting import, importing from gitlab export, and selecting your .tar.gz file for each upload.\nOption 2: Create a sample data request\nIf you would like a project (or projects) with sample data to be created for you, please create a new\nUX Research issue\nusing the ‚ÄòSample Data Request‚Äô template.\nNote: It is easier for the team if you do not create your project before opening the issue, as it is easier to create and populate the project at the same time.\nThe following information is required to fulfill a request to create these projects:\nGroup and study name (for example, Q1FY23 Create Stage Benchmarking)\nDates your study will run\nNumber of projects and sub-groups you need\nHow many of the following you would like in your project(s):\nLabels\nMilestones\nIssues\nBranches\nFiles\nMerge requests (limit 1 per branch)\nAny specific names or values for the above data types (for example, a branch named ‚Äòstaging‚Äô)\nFeature flags you need enabled (note that only those which have been release into production are available)\nExample defaults for the various content types can be found in\nthis sample project\n.\nPlease note, the following items are NOT exported when a test project is created and imported into the research sandbox:\nJob logs and artifacts\nContainer registry images\nCI variables\nPipeline triggers\nWebhooks\nAny encrypted tokens\nWhile you\ncan\ncreate users and user credentials through the scripts, it is generally discouraged, as we do not want the sandbox to be bloated with fake user accounts. Luckily, the UX Research team has a set of user accounts specifically for testing that you can use.\nAccessing Test User Accounts\nOnce you are logged into the sandbox, navigate to a group called\nUser Test Accounts\n. There is a project in that group named\ntesting accounts\n. On the main branch of this project is a file called\naccounts.md\n. This file contains the credentials for all the user test accounts, as well as instructions on how to create more accounts if needed.\nWhen using test accounts for your study\nyou will be responsible for changing the password after each participant session to protect our environment.\nThe last updated password (after your final user) will need to be recorded in the\naccounts.md\nfile for the next person to use.\nDos and don‚Äôts\nDo:\nKeep the space organized according to the guidelines laid out in the\nStructuring your Study\nsection. This means putting your studies in the correct location with appropriate naming conventions.\nClean up your mess. Delete studies and projects that are not going to be used, were created incorrectly, are outdated, and so on.\nRemember to change passwords for the test accounts you‚Äôre working with after every participant. This is critical for maintaining the safety and accuracy of the data on the sandbox.\nDon‚Äôt:\nMess with any projects, studies, or settings, unless you are absolutely sure you know what you‚Äôre doing. If you have any doubts, please post to the\nux_research Slack channel\n, or contact @leducmills directly on Slack.\nClean up other peoples‚Äô messes. Don‚Äôt delete or move other projects, unless you know for sure that no one is currently using them or will need to access them in the future.\nQ: How do you change the user password in the UX sandbox so that you can use a different password for each participant in a usability study?\nA: Follow the steps on how to change the passwords on user profiles outlined in this\nvideo\nQ: Is it possible to use the UX sandbox for unmoderated usability tests? If so, how?\nA: Yes! Once you have a sample project and a test account with the correct permissions set up, you can use UserTesting to run each test 1 by 1. Make sure to include login credentials for users and the link to the UX sandbox environment. Once the test is complete, make any updates necessary for the test project, update the password for the test user, and finally, update the login credentials in the test script. Continue following those steps until you reach the target number of participants for your study.\nLast modified January 6, 2025:\nMove product images to static folder (\n9b1952da\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1833}
{"doc_id": "3e172c657788c116", "url": "https://handbook.gitlab.com/handbook/legal/api-terms", "title": "GitLab API Terms of Use | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nGitLab API Terms of Use\nUnderstand your rights and obligations when using GitLab‚Äôs publicly-available APIs\nA. These API Terms of Use (\"\nAPI Terms\n\") form a binding contract between you and GitLab and explain your rights and obligations when using GitLab‚Äôs publicly-available application programming interfaces (the ‚Äú\nGitLab APIs\n‚Äù).\nWe\n‚Äù, ‚Äú\nour\n‚Äù\nand\n‚Äú\nus\n‚Äù refers to GitLab Inc. and ‚Äú\nyou\n‚Äù and ‚Äú\nyour\n‚Äù refers to the individual, or company or other legal entity, on behalf of which the GitLab APIs are used.\nC. If you are using the GitLab APIs on behalf of a company or other legal entity, you represent that you have the authority to bind such entity to these API Terms. If you do not have such authority, or do not agree with these API Terms, you must not use the GitLab APIs.\nD. These API Terms do not apply to your use of the software, and other products and services, made available by GitLab (the ‚Äú\nGitLab Software\n‚Äù), including without limitation, the self-managed and SaaS versions of GitLab‚Äôs DevOps Lifecycle Application Platform. Your use of the GitLab Software is subject to a separate written agreement between you and GitLab or one of its affiliates entered into prior to such use.\nE. We may revise these API Terms from time to time at our sole discretion. All changes are effective immediately when posted. Your continued use of the GitLab APIs following the posting of revised API Terms signifies your acceptance of the revised API Terms.\nF. In the event of an inconsistency between these API Terms and those of an agreement governing (i) your use of the GitLab Software; or (ii) your partnership with GitLab, the provisions of such other agreement(s) will prevail to the extent of such inconsistency.\n1. License and Use\n1.1. Provided that you comply with these API Terms, all documentation relating to the GitLab APIs at\ndocs.gitlab.com\nand\ndeveloper.gitlab.com\n, and all applicable laws, we grant you a non-exclusive, non-transferable, non-sublicensable, revocable, limited right to access and use the GitLab APIs to:\n1.1.1. Develop, test and support any application or integration developed by you which interacts with the GitLab APIs (each, an ‚Äú\nIntegration\n‚Äù) and;\n1.1.2. Distribute, or allow third parties to access, your Integration.\n1.2. You acknowledge that there are no implied licenses granted under these API Terms, and we reserve all rights not expressly granted.\n1.3. When using, or attempting to use, the GitLab APIs, you agree:\n1.3.1. To adhere to the applicable access requirements set out in the GitLab API Documentation;\n1.3.2. Not to share any API keys or authentication tokens for the GitLab APIs with any third party, and to keep these secure at all times;\n1.3.3. Not to misrepresent or mask either your identity or your systems‚Äô identity;\n1.3.4. Not to remove any proprietary notices from the GitLab APIs;\n1.3.5. That to protect the security, integrity, and operability of the GitLab APIs, GitLab may place limits on your use of the GitLab APIs (like limits on call volumes or requests that can be sent and received by the GitLab APIs during a defined period of time). You accept that:\n1.3.5.1. GitLab, in its sole discretion, will determine what constitutes abuse or excessive usage of the GitLab APIs;\n1.3.5.2. You will not use, or attempt to use, the GitLab APIs in a manner that exceeds such limitations, including rate limits, or in a manner that constitutes excessive or abusive usage; and\n1.3.5.3. GitLab may monitor the volume of requests sent to the GitLab APIs for compliance with these API Terms;\n1.3.6. Not to use the GitLab APIs in any manner that poses a security risk to other users of the GitLab APIs or GitLab Software, or tests the vulnerability of our systems or networks or those of any third party;\n1.3.7. Not to use the GitLab APIs for competitive analysis, or to disseminate performance information (including uptime, response time, and benchmarks), relating to the GitLab APIs or the GitLab Software;\n1.3.8. Not to use the GitLab APIs in any manner or for any purpose that infringes, misappropriates, or otherwise violates the rights of any third party;\n1.3.9. Not to use the GitLab APIs for the bulk collection or scraping of information.\n1.4. We reserve the right to terminate your access to the GitLab APIs at any time and at our discretion, if you are, or are suspected of being, in violation of these API Terms.\n2. Intellectual Property\n2.1. We own all rights, title, and interest in the GitLab APIs and the GitLab Software. By using the GitLab APIs, you do not acquire ownership of any rights in them, or the content that is accessed through them.\n2.2. Subject to section 2.1, you own all rights, title, and interest in any Integrations.\n2.3. GitLab will retain all intellectual property rights relating to any suggestions, ideas, enhancement requests, feedback, or other recommendations you provide relating to the GitLab APIs and GitLab Software (\"\nFeedback Materials\n\"), which are hereby assigned to GitLab. Feedback Materials will not include any intellectual property owned by you.\n2.4. Your use of any registered or unregistered GitLab trademarks is subject to the GitLab\nTrademark Guidelines\nand\nBranding Standards\n, as updated from time to time.\n3. Processing of Personal Data\nAny personal data processed related to your use of the GitLab APIs will be processed in accordance with GitLab‚Äôs\nPrivacy Policy\n.\n4. Export\nThe GitLab APIs are subject to US global trade control laws and regulations, including the U.S. Export Administration Regulations and various sanctions programs administered by the U.S. Office of Foreign Assets Control. You will not, directly or indirectly, export, re-export, release, or make the APIs available for use, in contravention with these laws and regulations.\n5. Warranty and Indemnification\n5.1. EXCEPT AS EXPRESSLY STATED HEREIN, ANYTHING PROVIDED IN CONNECTION WITH THESE API TERMS, INCLUDING, WITHOUT LIMITATION, THE GITLAB APIS, IS PROVIDED ‚ÄúAS-IS‚Äù, WITHOUT ANY WARRANTIES OF ANY KIND. EACH PARTY DISCLAIMS ANY IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n5.2. You will indemnify, defend (at GitLab‚Äôs request) and hold harmless GitLab and its affiliates and their respective directors, officers, employees, agents, contractors, end users, and licensees from and against any claims, losses, costs, expenses (including reasonable attorneys‚Äô fees), damages or liabilities based on or arising from (a) your Integration and any derivatives / combination of your Integration with the GitLab APIs (b) your relationships or  interactions with any end users, or third-party distributors, of your Integration, or (c) your infringement of GitLab‚Äôs or any third party‚Äôs intellectual property rights. GitLab may at its own expense participate in the defense and settlement of any claim with its own counsel, and you may not settle a claim without GitLab‚Äôs prior written consent (not to be unreasonably withheld).\n6. Limitation of Liability\n6.1. WITH THE EXCEPTION OF YOUR (A) INDEMNIFICATION OBLIGATIONS UNDER SECTION 5.2; AND (B) OBLIGATIONS UNDER SECTION 4 (EXPORT), TO THE MAXIMUM EXTENT PERMITTED BY LAW:\n6.1.1. IN NO EVENT SHALL EITHER PARTY BE LIABLE TO THE OTHER FOR LOST PROFITS OR REVENUE OR LOSS OF USE OR DATA, COSTS OF COVER OR SUBSTITUTE GOODS OR SERVICES, OR FOR INCIDENTAL, CONSEQUENTIAL, PUNITIVE, SPECIAL OR EXEMPLARY DAMAGES, OR INDIRECT DAMAGES OF ANY TYPE OR KIND, HOWEVER CAUSED, RELATED TO OR ARISING OUT OF THESE API TERMS OR THE RIGHTS, LICENSES, PRODUCTS OR SERVICES PROVIDED UNDER THESE API TERMS WHETHER BY BREACH OF WARRANTY, BREACH OF CONTRACT, NEGLIGENCE, TORT, OR ANY OTHER LEGAL THEORY, AND WHETHER OR NOT THE PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; AND\n6.1.2. THE TOTAL, CUMULATIVE LIABILITY OF EACH PARTY ARISING OUT OF OR RELATED TO THESE API TERMS OR THE RIGHTS, LICENSES, PRODUCTS OR SERVICES PROVIDED UNDER THESE API TERMS, WHETHER BASED ON CONTRACT, TORT (INCLUDING NEGLIGENCE), OR ANY OTHER LEGAL THEORY, SHALL BE LIMITED TO FIVE HUNDRED U.S. DOLLARS ($500.00).\n7. Term and Termination\n7.1. These API Terms shall remain in effect until terminated.\n7.2. You may terminate these API Terms at any time by ceasing all use of the GitLab APIs and any relevant credentials.\n7.3. GitLab reserves the right to terminate these API Terms or your use of the GitLab APIs with immediate effect for any reason and at any time without liability or other obligation to you.\n7.4. Upon termination:\n7.4.1. All licenses granted herein immediately expire and you must cease use of the GitLab APIs;\n7.4.2. The terms of these API Terms that by their nature are intended to continue indefinitely will continue to apply.\n8. Governing Law\nThese API Terms shall be construed and enforced in accordance with the laws of California, U.S.A., and you and GitLab submit to the jurisdiction of the State and Federal courts in San Francisco, California, without giving effect to any conflicts of laws principles.\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1509}
{"doc_id": "7cf5b7b00334a126", "url": "https://handbook.gitlab.com/handbook/company/culture/all-remote/all-remote-vs-hybrid-remote-comparison", "title": "All-Remote Benefits vs. Hybrid-Remote Benefits Checklist | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nAll Remote\nAll-Remote Benefits vs. Hybrid-Remote Benefits Checklist\nNot all forms of remote work are created equal. While hybrid may appear to offer the best of both worlds on the surface, many leaders underestimate its\ncomplexities and embedded inequality\nThis page is designed to clarify the differences in workplace experience by individuals who are\nremote by default\nin an all-remote setting vs. a hybrid-remote setting. This page is\nnot\ndesigned to compare the in-person experience with the remote experience within a hybrid-remote organization.\nIt is becoming more common for\njob seekers\nto weigh\nmultiple competing offers\n. Understanding the\nnuanced differences\nin operating within a single-tier environment (all-remote) vs. a multi-tier environment (hybrid-remote) is critical for expectation alignment. Be careful to not assume that all remote offers are equal, thereby simplifying job selection to metrics such as compensation and job title. The job selection process is\nintensely personal\n, and this guide intends to help those in the process put a more\nmeaningful value on all-remote benefits\n(and conversely, arm candidates with data if negotiating a higher salary to compensate for the inbuilt\ndysfunction\nand inequity present in many hybrid environments).\nLanguage and terminology\nFor the purpose of this compare and contrast exercise, we define hybrid-remote as an environment where optionality and flexibility is limited.\nThe moment you force a subset of people back into the office, with another subset that is always remote, you have two playing fields to administrate. This two-tier arrangement is extremely difficult to administrate and is unequal by design.\nThose who are never remote will default to working\noffice-first\n(e.g. using a\nphysical whiteboard\nthat cannot support remote contribution) and those who are never in the office will miss out on non-transparent work conversations and promotion opportunities.\nFor deeper dives on this topic, read our guides below.\nHow to evaluate a remote job\nThe stages of remote work\nHybrid-Remote: understanding nuances and pitfalls\nWhy GitLab uses the term all-remote to describe its 100% remote workforce\nAll-Remote vs. Hybrid-Remote benefits checklist\nBenefit\nAll-Remote\nHybrid-Remote\nNo commute\nYes\nNon-linear workday\nYes, for roles which allow\nNo; fixed to office schedule of colleagues\nAbility to\nrelocate for personal reasons\nYes\nLimited\nAbility to\noptimize location\nfor something other than a commutable distance to an office\nYes\nLimited\nAvoid\nphysiological stress of open-plan offices\nYes\nDepends\nEqual footing by default\non access to executives and senior leaders\nYes\nNo\nPraise and promotion based on\nwork output\nvs. ‚Äúface time‚Äù with the right people\nYes\nNo\nIT/support applied to everyone equally\nYes\nNo\nAll team members use\ndigital tools to work, collaborate, and communicate\nYes\nNo\nFreedom from manually chasing information shared during siloed, in-person meetings\nYes\nNo\nFreedom from ‚ÄúFOMO‚Äù ‚Äî the fear of missing out on in-person perks, meetings, social gatherings, etc.\nYes\nNo\nTravel burden for\nin-person culture and rapport building\nis on the\ncompany\n, not the\nindividual\nYes\nDepends\nFreedom from managing guilt (e.g. you don‚Äôt commute; your colleagues do)\nYes\nNo\nFreedom from justifying one‚Äôs remote work arrangement to managers who aren‚Äôt naturally supportive of flexibility\nYes\nNo\nFreedom from demands for overperformance by in-office colleagues\nYes\nNo\nFreedom from concerns of being overlooked, forgotten, or dehumanized by in-office\nmanagers\nYes\nNo\nFreedom (and likely reimbursement) to work in a ‚Äúthird space‚Äù (e.g. coworking center,\nCodi\n, coffee shop, etc.)\nYes\nDepends\nFreedom from\nsubpar hybrid video calls\nwhere select participants are huddled in a physical room on one camera\nYes\nNo\nEqual footing in\njob interviews\n(e.g. no advantage/disadvantage from in-person interviews)\nYes\nNo\nLearning and development\nis applicable to all team members, regardless of location\nYes\nNo\nCareer growth is not dependent on willingness/ability to transfer to in-person by default\nYes\nNo\nFreedom from last-minute demands to fly to an office for an in-person meeting\nYes\nNo\nBusiness operations team\nis fully focused on upleveling tools and technology which positively impact all team members (vs. catering to one subset over another)\nYes\nNo\nFreedom from being transferred to a manager or department who is in-person and/or isn‚Äôt supportive of remote arrangements\nYes\nNo\nEclectic mix of company-wide\nin-person gatherings\n(vs. congregating at a standard office)\nYes\nNo\nHearing about water cooler chitchat and perpetual cubical drop-ins from your in-office colleagues\nNo\nYes\nLearn more through\nLife at GitLab\nand our\nOut of the Office\nreport. If this page resonates with you, visit GitLab‚Äôs\nCareer Opportunities\n.\nAssessing the remote workplace experience\nWhile\nGlassdoor\ndoes not yet offer a dedicated\nRemote Experience\nfilter in reviews, you are able to sort by\nCOVID-19 Related\n. This filter increases the chances of reading reviews relevant to one‚Äôs remote work experience at an organization. It‚Äôs also helpful to search for\nremote\nwithin an organization‚Äôs Review section. Glassdoor also offers\nremote-related content on its blog\n.\nIs this advice any good?\nGitLab is one of the world‚Äôs largest all-remote companies. We are 100% remote, with no company-owned offices\nanywhere\non the planet. We have over 1,500 team members in more than 65 countries. The primary contributor to this article (Darren Murph, GitLab‚Äôs Head of Remote) has over 15 years of experience working in and reporting on colocated companies,\nhybrid-remote\ncompanies, and all-remote companies of various scale.\nJust as it is valid to\nask if GitLab‚Äôs product is any good\n, we want to be transparent about our expertise in the field of remote work.\nComplete ‚ÄòHow to Manage a Remote Team‚Äô course\nGitLab built a comprehensive course on remote work leadership which is hosted on a leading online learning platform,\nCoursera\n. The course, titled ‚Äú\nHow to Manage a Remote Team\n,‚Äù provides a holistic, in-depth analysis of remote team structures, phases of adaptation, and best practices for managers, leaders, and human resources professionals. It is offered free of charge, with an optional certificate available for $49.\nThis course is ideal for current managers, executives, and human resources professionals who want to learn how to lead and support a high-functioning, scalable remote team. GitLab is one of the world‚Äôs largest all-remote organizations; experts from throughout the company will guide you through in-depth lessons for leaders, people managers, and HR professionals to build, manage, and scale.\nBy the end of this course, you will be able to:\nLead in a remote environment\nBuild a remote organizational culture and practices\nAssess teams‚Äô and managers‚Äô readiness and preparation for remote work\nCreate a foundational strategy for executing a remote transformation\nFor the final project in this course, you will create a real or hypothetical strategic plan to transition a team to remote operation. You will assess your organization‚Äôs remote maturity and infrastructure, and identify the best team structure for remote operation ‚Äî including determining whether to use an all-remote or remote-friendly model. You‚Äôll outline plans for documentation, education, leadership, and equipment or resource needs for your unique organization.\nThis is an intermediate-level course, intended for learners who have previous experience managing or leading people. To succeed in this course, you should have at least one year of management experience. No remote experience is required.\nContribute your lessons\nGitLab believes that all-remote is the\nfuture of work\n, and remote companies have a shared responsibility to show the way for other organizations who are embracing it. If you or your company has an experience that would benefit the greater world, consider creating a\nmerge request\nand adding a contribution to this page.\nReturn to the main\nall-remote page\n.\nLast modified April 10, 2025:\nFix broken links (\n7fbeab40\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1263}
{"doc_id": "c8af72f1bb349932", "url": "https://handbook.gitlab.com/handbook/eba/vp-scheduling", "title": "VP Scheduling | The GitLab Handbook", "text": "The Handbook\nExecutive Business Administrators (EBAs)\nVP Scheduling\nDiscover how to schedule meetings with VPs at GitLab\nWhen scheduling for VPs or Directors at GitLab, please check the scheduling preferences below.\nScheduling for Rob Allen, VP, Talent Acquisition\nPlease schedule all meetings through the People Function‚Äôs EBA, Julia Nishioki\nKeep meetings to 25 or 50 minutes unless otherwise specified\nDirect Report 1:1‚Äôs occur weekly\nSkip level 1:1‚Äôs occur every other month\nCalendar color coding: Confirmed meetings- Dark green, Manager meetings- light green, Important meetings NOT to be moved are in red, Personal meetings- Orange\nDo not schedule over DNB: Focus Time blocks without consulting the EBA of the People Group.\nScheduling should ideally be kept between 8:00 am and 4:00 pm PT\nScheduling for Sherida McMullan VP, Diversity, Inclusion and Belonging\nPlease schedule all meetings through the People Function‚Äôs EBA, Julia Nishioki\nKeep meetings to 25 or 50 minutes unless otherwise specified\nDirect Report 1:1‚Äôs occur weekly\nCalendar color coding: Confirmed meetings- Dark green, Manager meetings- light green, Important meetings NOT to be moved are in red, Personal meetings- Brown or Purple\nDo not schedule over DNB: Focus Time blocks without consulting the EBA of the People Group.\nScheduling should ideally be kept between 8:00 am and 4:00 pm PT\nScheduling for Sales VPs\nDavid Sakamoto, Mike Pyle, Ryan O‚ÄôNell, & Nima Badiey\nPlease reach out to Victoria Reinhardt (Sr. EBA) to schedule or reschedule any meetings for Ryan O‚ÄôNell and Mike Pyle\nPlease reach out to Becky Piccone (Sr. EBA) to schedule or reschedule any meetings for David Sakamoto and Nima Badiey\nDon‚Äôt schedule over DNB or any CRO calls without reaching out for approval from VP and EBA\nFor interviews: CES should tag EBA on Greenhouse to review times submitted by the candidate, or to provide times for the VP\nIf you add any meetings to calendar directly, tick the box ‚ÄúAttendees can modify‚Äù so EBA can change if necessary\nExternal meeting requests (with those outside of GitLab): email EBA and VP and loop them in with external parties. EBA will then schedule directly with external parties.\nInternal meeting requests (with other GitLab Team Members)\nPlease slack EBA in #sales-vp channel\nIf the meeting is confidential (ex: interviews), please slack EBA directly\nPlease include the following in your slack/email\nMust have/optional attendees\nMeeting type: internal prep, client facing/customer, prospective customer, etc\nUrgency/ Desired timeframe: in the next two days, in the next week or two, etc\nDuration: 25 mins, 50 mins, etc.\nSubject of the meeting\nProvide context: include agenda to be covered. Share google doc if available to be included in invite or link relevant issues, slides, etc.\nScheduling for Finance VPs and Sr. Leadership\nJames Shen, VP of Finance - Nabitha Rao, VP of EntApps - Kelsey Turcotte, VP of Investor Relations - Jim Gladen, VP of Tax - Julie Malloy, VP Accounting Operations - Simon Mundy, VP Controller\nPlease reach out to Anita Mall (Sr. EBA) to schedule or reschedule any meetings with James Shen, Nabitha Rao, or Kelsey Turcotte\nPlease reach out to Sarah Hobbs (EBA) to schedule or reschedule any meetings with Jim Gladen, Julie Malloy or Simon Mundy\nDon‚Äôt schedule over DNB blocks\nFor interviews: CES should tag EBA on Greenhouse to review times submitted by the candidate, or to provide times for the VP\nIf you add any meetings to calendar directly, tick the box ‚ÄúAttendees can modify‚Äù so EBA can change if necessary\nWorking blocks on the calendar are OK and can be moved to prioritize other meeting requests, team members should check in with the EBA to request a meeting using the meeting request requirements as a guideline\nExternal meeting requests (with those outside of GitLab): email EBA and VP / Sr. Leadership and loop them in with external parties. EBA will then schedule directly with external parties.\nFor internal meeting requesting please tag the EBA on #eba-team slack channel, include the following in your slack/email:\nMust have/optional attendees\nUrgency/ Desired timeframe: in the next two days, in the next week or two, etc\nDuration: 25 mins, 50 mins, etc.\nSubject of the meeting\nProvide context: include agenda to be covered, share google doc if available, include a link to any relevant issues, slides, etc.\nScheduling for Product Leadership\nMike Flouton, VP of Product Management - Justin Farris, VP Product Management - Angela Pesta, VP UX - Hillary Benson, Sr Director of Product Management - Steve Evangelista, Sr Director of Product Management\nPlease reach out to Jennifer Garcia (EBA) to schedule or reschedule any meetings for Justin Farris, and Angela Pesta\nPlease reach out to Lindsey Beyl (EBA) to schedule or reschedule any meetings for Mike Flouton, Hillary Benson and Steve Evangelista\nDon‚Äôt schedule over DNB and Work Block‚Äôs without reaching out to Jennifer and Lindsey (EBA)\nFor internal and external (with those outside of GitLab) meeting requesting please contact Product EBAs in #eba-team, including the following in your slack:\nMust have/optional attendees\nUrgency/ Desired timeframe: in the next two days, in the next week or two, etc\nDuration: 25 mins, 50 mins, etc.\nSubject of the meeting\nProvide context: include agenda to be covered, share google doc if available, include a link to any relevant issues, slides, etc.\nPlease ensure the leader and EBA have access to view the materials\nFor customer meetings please create an issue request using\nthis template\nand tag Jennifer Garcia (Product EBA) and Lindsey Beyl (Product EBA) for review and availability\nIf you add any meetings to calendar directly, tick the box ‚ÄúAttendees can modify‚Äù so EBA can change if necessary\nScheduling for Engineering Leadership\nAudrey Van Belleghem, Chief of Staff - Michelle Gill, Director of Devops Engineering - Tim Zallmann, VP AI Engineering - Maw Wildpaner, VP of Sec & Monetization - Marin Jankovski, VP of Infrastructure Platforms - Johnny Scarborough Jr., VP of Support\nPlease reach out to Liki Simonot (EBA) to schedule or reschedule any meetings for Tim Zallmann, Marin Jankovski, or Maw Wildpaner\nPlease reach out to Vange Ingan (EBA) to schedule or reschedule any meetings for Audrey Van Belleghem\nPlease reach out to Kyra Wright (EBA) to schedule or reschedule any meetings for Michelle Gill, or Johnny Scarborough Jr.\nLast modified June 16, 2025:\nUpdate file vp-scheduling.md (\n95a0dcc2\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1049}
{"doc_id": "6ffcfcd0fde76c81", "url": "https://handbook.gitlab.com/handbook/engineering/development/performance-indicators", "title": "Development Department Performance Indicators | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nDevelopment Department Performance Indicators\nExecutive Summary\nHealth\nStatus\nPast Due InfraDev Issues\nOkay\nWe are now below 5. We did have a small spike earlier this quarter which was addressed.\nWe will continue to work to reduce this 0.\nPast Due Security Issues\nAttention\nSecurity issues continue to be an area of focus as requirements have become more stringent.\nLarge increases due to new evaluation plus some automation that wasn't addressing issues properly (composition analysis).  We are in process of remediating that.\nThe due date of issues is set to the latest date that can be included in a release that will go out before the SLA expires\nOpen MR Review Time (OMRT)\nAttention\nHave broken out by community vs. company.   We are keeping company review times stable.\nSummer months have seen a slight increase which should be monitored moving forward.\nLooking at reducing the tail (stale MRs) is still an option to be explored.\nDevelopment Team Member Retention\nOkay\nabove target and monitoring as retention remains a concern\nDevelopment Average Age of Open Positions\nOkay\nOpen age has been stable the past quarter.\nKey Performance Indicators\nPast Due InfraDev Issues\nMeasures the number of past due infradev issues by severity.\nTarget:\nAt or below 5 issues\nHealth:\nOkay\nWe are now below 5. We did have a small spike earlier this quarter which was addressed.\nWe will continue to work to reduce this 0.\nChart\nPast Due Security Issues\nMeasures the number of past due security issues by severity. This is filtered down to issues with either a stage or group label.\nTarget:\nAt or below 20 issues\nHealth:\nAttention\nSecurity issues continue to be an area of focus as requirements have become more stringent.\nLarge increases due to new evaluation plus some automation that wasn‚Äôt addressing issues properly (composition analysis).  We are in process of remediating that.\nThe due date of issues is set to the latest date that can be included in a release that will go out before the SLA expires\nChart\nOpen MR Review Time (OMRT)\nWe want to be more intuitive with calculating how long it takes an MR in review state. Open MR Review Time (OMRT) measures the median time of all open MRs in review as of a specific date. In other words, on any given day, we calculate the number of open MRs in review and median time in review state for those MRs at that point in time. MRs are considered in review at the point when a review is requested on an MR.\nTarget:\nAt or below 21\nHealth:\nAttention\nHave broken out by community vs. company.   We are keeping company review times stable.\nSummer months have seen a slight increase which should be monitored moving forward.\nLooking at reducing the tail (stale MRs) is still an option to be explored.\nChart\nDevelopment Team Member Retention\nWe need to be able to retain talented team members. Retention measures our ability to keep them sticking around at GitLab. Team Member Retention = (1-(Number of Team Members leaving GitLab/Average of the 12 month Total Team Member Headcount)) x 100. GitLab measures team member retention over a rolling 12 month period.\nTarget:\nat or above 84%\nThis KPI cannot be public\nHealth:\nOkay\nabove target and monitoring as retention remains a concern\nURL(s):\nhttps://10az.online.tableau.com/#/site/gitlab/views/N5AttritionDashboard/AttritionDashboard?:iid=1\nDevelopment Average Age of Open Positions\nMeasures the average time job openings take from open to close. This metric includes sourcing time of candidates compared to Time to Hire or Time to Offer Accept which only measures the time from when a candidate applies to when they accept.\nTarget:\nat or below 50 days\nHealth:\nOkay\nOpen age has been stable the past quarter.\nChart\n</tableau-viz>\n</div>\nRegular Performance Indicators\nMR Rate\nDevelopment Department MR Rate is a performance indicator showing how many changes the Development Department implements directly in the GitLab product. This is the ratio of product MRs to the number of team members in the Development Department. It‚Äôs important because it shows us how productivity of our projects have changed over time. The full definition of MR Rate is linked in the url section.\nTarget:\nAbove 12 MRs per month\nHealth:\nAttention\nWe are seeing positive trends with MR Rate (April) we expect similar improvements months coming.\nChart\nURL(s):\n/handbook/engineering/metrics/#merge-request-rate\nDeferred UX\nSee\nDeferred UX\nfor the definition.  We include this as part of the development PIs since we need to help to positively affect change of this metric.\nTarget:\nBelow 50 open ‚ÄúDeferred UX‚Äù issues\nHealth:\nAttention\nCurrently following UX guidance for health where we are above target.\nThis metric may change as our usability strategy is being reviewed.\nChart\nURL(s):\n/handbook/product/ux/performance-indicators/#deferred-ux\nDevelopment Handbook MR Rate\nThe handbook is essential to working remote successfully, to keeping up our transparency, and to recruiting successfully. Our processes are constantly evolving and we need a way to make sure the handbook is being updated at a regular cadence. This data is retrieved by querying the API with a python script for merge requests that have files matching\n/source/handbook/engineering/development/**\nover time. The calculation for the monthly  handbook MR rate is the number of handbook updates divided by the number of team members in the Development Department for a given month.\nTarget:\nAt or above 0.5\nHealth:\nAttention\nWe need to look into new ways to enhance our handbook experience if we want to hit target.\nChart\n</tableau-viz>\n</div>\nDevelopment Department Discretionary Bonus Rate\nThe number of discretionary bonuses given divided by the total number of team members, in a given period as defined. This metric definition is taken from the\nPeople Success Discretionary Bonuses KPI\n.\nTarget:\nat or above 10%\nHealth:\nAttention\nWe have been consistently below 10% goal for the last 6 months.\nWe have given more discretionary bonuses YoY.\nWe will discuss having another review to encourage more recognition.\nChart\n</tableau-viz>\n</div>\nAverage PTO per Development Team Member\nThis shows the average number of PTO days taken per Development Team Member. It is the ratio of PTO days taken (vacation, sick leave, public holidays, Family & Friends days, etc) to the number of team members in the Development Department each month. Looking at the average number of PTO days over time helps us understand increases or decreases in efficiency and ensure that team members are taking time off to keep a healthy work/life balance.\nTarget:\nHealth:\nOkay\nNeed to monitor on a monthly basis\nPTO has stabilized in the past few months.\nChart\n</tableau-viz>\n</div>\nEscape Rate Over Time\nThis shows the rate that bugs are created. It is the ratio of opened bugs to the number of MRs merged. As an example, an escape rate of 10% indicates that, on average, for every 10 MRs merged we will see 1 bug opened. Looking at the escape rate helps us understand the quality of the MRs we are merging.\nTarget:\nCurrently no target is set for this metric.  We need to establish a baseline and consider the right balance between velocity and quality.\nUnknown\nSpike in October is due to the increased scrutiny as a part of the FedRamp project.\nChart\nProject/Area Maintainership Health\nA project‚Äôs maintainership is considered unhealthy if it has fewer maintainers than the target maintainer count. Each project‚Äôs target maintainer count is based on the number of incoming MRs and maintainer availability.\nTarget:\nBelow 20%\nHealth:\nAttention\nThe chart shows a decrease in overall unhealthy projects or areas in the last quarter\nSome areas are not being properly tracked which should lead to a further decrease once resolved\nChart\nUnhealthy Core Areas of Maintainership Health\nWithin a given project (for example, gitlab-org/gitlab), maintainers cover different areas within the project - backend, database, frontend, and more. An area of maintainership receives more than 100 merge requests per month and is considered unhealthy if it has less maintainers than the target maintainer count. This indicator is a subset of Project Maintainership Health.\nTarget:\n0\nHealth:\nAttention\nOur unhealthy areas have increased within the past 2 months. The unhealthy areas are GitLab backend and database (consistent), but GitLab frontend and Gitaly have now shown up too.\nAvailability also trended down dramatically this last quarter which explains the increase here.\nAlready this month we‚Äôve been trending back in the right direction.\nChart\nOpen MR Age (OMA)\nWe want to be more intuitive with calculating how long it takes an MR to merge or close. Open MR Age (OMA) measures the median time of all open MRs as of a specific date. In other words, on any given day, we calculate the number of open MRs and median time in open state for those MRs at that point in time.\nTarget:\nAt or below 30\nHealth:\nAttention\nWe are seeing an overall downwards trend towards the target in the past month.\nChart\nReview Time to Merge (RTTM)\nReview Time to Merge (RTTM) tells us on average how long it takes from submitting code for review to being merged. The\nVP of Development\nis the DRI on\nwhat projects are included\n.\nTarget:\nAt or below 3\nHealth:\nOkay\nThis is a revived metric and we are currently monitoring the trends.\nChart\nOverall MRs by Type\nWe want to measure the breakdown of our development investment by MR type/label. We only consider MRs that contribute to our product. If an MR has more than one of these labels, the highest one in the list takes precedence.\nTarget:\n< 5% change in proportion of MRs with undefined label\nHealth:\nOkay\nHave worked to remove undefined MRs.\nThe Engineering Manager for each team is ultimately responsible for ensuring that these labels are set correctly.\nChart\nDevelopment Department Promotion Rate\nThe total number of promotions over a rolling 12 month period divided by the month end headcount. The target promotion rate is 12% of the population. This metric definition is taken from the\nPeople Success Team Member Promotion Rate PI\n.\nTarget:\n12%\nHealth:\nOkay\nWe are coming in line with promotion level goals.\nChart\n</tableau-viz>\n</div>\nLegends\nHealth\nValue\nLevel\nMeaning\n3\nOkay\nThe KPI is at an acceptable level compared to the threshold\n2\nAttention\nThis is a blip, or we‚Äôre going to watch it, or we just need to enact a proven intervention\n1\nProblem\nWe'll prioritize our efforts here\n-1\nConfidential\nMetric & metric health are confidential\n0\nUnknown\nHow pages like this work\nData\nThe heart of pages like this are\nPerformance Indicators data files\nwhich are\nfiles.\nEach - denotes a dictionary of values for a new (K)PI. The current elements (or data properties) are:\nProperty\nType\nDescription\nname\nRequired\nString value of the name of the (K)PI. For Product PIs, product hierarchy should be separate from name by \" - \" (Ex. {Stage Name}:{Group Name} - {PI Type} - {PI Name}\nbase_path\nRequired\nRelative path to the performance indicator page that this (K)PI should live on\ndefinition\nRequired\nrefer to\nParts of a KPI\nparent\nOptional\nshould be used when a (K)PI is a subset of another PI. For example, we might care about Hiring vs Plan at the company level. The child would be the division and department levels, which would have the parent flag.\ntarget\nRequired\nThe target or cap for the (K)PI. Please use\nUnknown until we reach maturity level 2\nif this is not yet defined. For GMAU, the target should be quarterly.\norg\nRequired\nthe organizational grouping (Ex: Engineering Function or Development Department). For Product Sections, ensure you have the word section (Ex : Dev Section)\nsection\nOptional\nthe product section (Ex: dev) as defined in\nsections.yml\nstage\nOptional\nthe product stage (Ex: release) as defined in\nstages.yml\ngroup\nOptional\nthe product group (Ex: progressive_delivery) as defined in\nstages.yml\ncategory\nOptional\nthe product group (Ex: feature_flags) as defined in\ncategories.yml\nis_key\nRequired\nboolean value (true/false) that indicates if it is a (key) performance indicator\nhealth\nRequired\nindicates the (K)PI health and reasons as nested attributes. This should be updated monthly before Key Reviews by the DRI.\nhealth.level\nOptional\nindicates a\nvalue between 0 and 3 (inclusive)\nto represent the health of the (K)PI. This should be updated monthly before Key Reviews by the DRI.\nhealth.reasons\nOptional\nindicates the reasons behind the health level. This should be updated monthly before Key Reviews by the DRI. Should be an array (indented lines starting with dashes) even if you only have one reason.\nurls\nOptional\nlist of urls associated with the (K)PI. Should be an array (indented lines starting with dashes) even if you only have one url\nfunnel\nOptional\nindicates there is a handbook link for a description of the funnel for this PI. Should be a URL\npublic\nOptional\nboolean flag that can be set to\nfalse\nwhere a (K)PI does not meet the public guidelines.\npi_type\nOptional\nindicates the\nProduct PI type\n(Ex: AMAU, GMAU, SMAU, Group PPI)\nproduct_analytics_type\nOptional\nindicates if the metric is available on SaaS, SM (self-managed), or Both.\nis_primary\nOptional\nboolean flag that indicates if this is the Primary PI for the Product Group.\nimplementation\nOptional\nindicates the implementation status and reasons as nested attributes. This should be updated monthly before Key Reviews by the DRI.\nimplementation.status\nOptional\nindicates the\nImplementation Status\nstatus. This should be updated monthly before Key Reviews by the DRI.\nimplementation.reasons\nOptional\nindicates the reasons behind the implementation status. This should be updated monthly before Key Reviews by the DRI. Should be an array (indented lines starting with dashes) even if you only have one reason.\nlessons\nOptional\nindicates lessons learned from a K(PI) as a nested attribute. This should be updated monthly before Key Reviews by the DRI.\nlessons.learned\nOptional\nlearned\nis an attribute that can be nested under\nlessons\nand indicates lessons learned from a K(PI). This should be updated monthly before Key Reviews by the DRI. Should be an array (indented lines starting with dashes) even if you only have one lesson learned\nmonthly_focus\nOptional\nindicates monthly focus goals from a K(PI) as a nested attribute. This should be updated monthly before Key Reviews by the DRI.\nmonthly_focus.goals\nOptional\nindicates monthly focus goals from a K(PI). This should be updated monthly before Key Reviews by the DRI. Should be an array (indented lines starting with dashes) even if you only have one goal\nmetric_name\nOptional\nindicates the name of the metric in Self-Managed implemenation. The SaaS representation of the Self-Managed implementation should use the same name.\nLast modified December 15, 2023:\nMigrate Engineering ruby code to the new handbook (\nc8544f4a\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2426}
{"doc_id": "bd8b04a14f7b1dca", "url": "https://handbook.gitlab.com/handbook/about/maintenance", "title": "Content Websites | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nContent Websites\nOverview\nThis area has traditionally been referred to as\n‚Äúthe handbook‚Äù\n, but over time has grown in scope to include multiple sites, projects, repos, and types of content.\nTherefore, we are using the term ‚Äúcontent websites‚Äù here to avoid ambiguity and properly frame discussions around this scope of responsibility.\nSee our\ndirection page\nfor more.\nIf you need help, please see the\nediting handbook section\n, or\nescalation information\nif it‚Äôs urgent.\nTeam Structure\nThe maintainer of this page (as indicated in the sidebar) is considered the\nfor GitLab‚Äôs ‚Äúcontent websites‚Äù. At present, the roles and responsibilities are as follows:\nRole\nOwner\nCurrent Individual(s)\nResponsibilities\nHandbook DRI\nLearning & Development\nTre Ely, Jamie Allen\nPrioritize work, make decisions on content sites, coordinate major changes\nKeep pipeline green\nGroup of volunteers\n@gitlab-com/content-sites/keep-main-green\nHelp fix the pipeline if jobs are failing (as needed)\nCode Maintainer\nGroup of volunteers\nDRI, plus\n@gitlab-com/content-sites/handbook-tools\nCode reviews, escalation point for ‚ÄúKeep pipeline green‚Äù group, and as time allows, development work\nNote: Both volunteer groups have owner role to the\ncontent-sites\ngroup in order to resolve any escalations.\nWhat are the content websites?\nThe public\nhandbook.gitlab.com\nwebsite:\nWhile often referred to as ‚Äúthe handbook‚Äù, this website also serves a wide variety of other content including the\njob families\n, and the\nTeamOps\npages.\nhandbook.gitlab.com\nis primarily backed by the\ngitlab-com/content-sites/handbook\nproject and repo.\nData (YML) files currently resides in the\ngitlab-com/www-gitlab-com\nrepository.\nThe\n‚ÄúInternal Handbook‚Äù at\ninternal.gitlab.com\n:\nThis website contains content that falls into the\nnot public\ncategory. More details are available in\nthe Internal Handbook usage page\nThe Internal Handbook is backed by the\ngitlab-com/content-sites/internal-handbook\nproject and repo.\nThe theme for the handbook sites is in the\ngitlab-com/content-sites/docsy-gitlab\nproject.\nWhat are NOT content websites?\nThe\nabout.gitlab.com\nmarketing website.\nThe\ngitlab.com\nsite.\nThe\ndocs.gitlab.com\nproduct documentation site.\nAny other GitLab-managed or GitLab-owned website other than what is described above.\nIssue triage\nThe following guidelines are used for triaging issues in\ncontent sites projects\nthat are\nin-scope\n.\nThe triage guidelines use the\nproduct issue triage\ninformation as a basis. However, as the group structure and resources differ for the content\nsites, so do the guidelines.\ntriage bot\nexists to help triage issues.\nTypes of issues and resourcing\nHandbook issues typically fall under one of the following:\nContent: Anything related to updating the text in the handbook, including required fixes.\nFeature: New or an enhancement of how the handbook works, such as theme, or shortcode.\nOperations: Theme, pipeline, local development, linters, other maintenance, and related documentation.\nIssues may be considered a bug separately from the category when applicable (not a feature).\nThe team overseeing the content websites generally only resources operations issues,\nunless the issue is a blocker for contributing or using the handbook.\nPriority\nThe priority label is used to indicate the importance of an issue and guide its scheduling.\nPriority labels are expected to be set based on the needs of GitLab.\nPriority can apply to any type of issue.\nFor bug issues, priority typically matches the\nseverity\n.\nMatch the priority to the severity if uncertain.\nPriority\nImportance\nIntention\n~\"hb-priority::1\"\nUrgent\nWe will address this as soon as possible regardless of the limit on our team capacity. Our target resolution time is 30 days.\n~\"hb-priority::2\"\nHigh\nWe will address this soon and will provide capacity from our team for it. Our target resolution time is 30-90 days.\n~\"hb-priority::3\"\nMedium\nWe want to address this but don‚Äôt have visibility when this will be addressed. No timeline designated.\n~\"hb-priority::4\"\nLow\nWe don‚Äôt have visibility when this will be addressed. No timeline designated.\nWe encourage contributions for all issues, especially priority 3 and 4 issues, in order to be addressed sooner.\nSeverity\nSeverity labels help us determine urgency and clearly communicate the impact of a ~‚ÄúHandbook::Operations‚Äù issue on users.\nThe severity should be determined based the various factors in the table below.\nWhen an issue falls under multiple categories, use your best judgment.\nOnce you‚Äôve determined a severity for an issue, add a note that explains in summary why you selected the severity you did. This will help future team members understand your rationale so they will know how to proceed with acting upon the issue.\n~\"Handbook::Operations\" ~\"type::bug\"\n~\"hb-severity::1\"\n: Blocker\n~\"hb-severity::2\"\n: High\n~\"hb-severity::3\"\n: Medium\n~\"hb-severity::4\"\n: Low\nGeneral bugs\nBroken feature with no workaround or any data-loss.\nBroken feature with an unacceptably complex workaround.\nBroken feature with a workaround.\nFunctionality is inconvenient.\nImpact on users\nImpacts 20% or more of users without an available workaround\nImpacts 20% or more of users, but a reasonable workaround is available\nImpacts between 5%-20% of users without an available workaround\nImpacts up to 20% of users with a reasonable workaround, or workaround not required.\nMinimal impact on typical user‚Äôs workflow. Workaround is available or not needed.\nUser experience problem\nUsers are blocked and/or likely to make risky errors.\nUsers are significantly delayed by the available workaround.\nUsers are self sufficient in completing the task with the workaround, but may be somewhat delayed.\nUsability isn‚Äôt ideal or there is a small cosmetic issue.\nTimeline for resolution is based on\npriority\n.\nTriage bot\nPlease see the relevant project readme for implementation information.\nLast modified July 4, 2025:\nUpdate keep main green group info (\nc98fcfa8\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 892}
{"doc_id": "75e4386ba74e9a44", "url": "https://handbook.gitlab.com/handbook/support/support-pods/code-contributions", "title": "Code Contributions Support Pod | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Pods\nCode Contributions Support Pod\nProvide a space for SEs to collaborate in the context of Code Contributions.\nPurpose\nProvide a space for SEs to collaborate in the context of Code Contributions.\nCurrent objectives\nRaise awareness for the pod\nUse async communication in the\n#spt_pod_code-contributions\nSlack channel to empower SEs and exchange knowledge\nSupport Pod members\nLead:\nAnton Smith\n(\n@anton\n)\nCo-Lead:\nManuel Grabowski\n(\n@manuelgrabowski\n)\nBrie Carranza\n(\n@bcarranza\n)\nRonald van Zon\n(\n@rvzon\n)\nCleveland Bledsoe Jr\n(\n@cleveland\n)\nHow to get involved\nTalk with your manager.\nIf you haven‚Äôt yet, consider working on the\nCode Contributions\nSupport training module.\nAdd Code Contributions to your knowledge areas in the\nSupport Team data\n. If it already exists, adjust your level accordingly ‚Äì any level is welcome in the Pod!\nOptionally: Let the team know about your new focus area.\nJoin the\n#spt_pod_code-contributions\nSlack channel.\nAdd yourself to this page.\nRegular meetings\nNone at this point, but setting a sync session up is just a Slack message away!\nWays to Collaborate\nSlack channel:\n#spt_pod_code-contributions\nIn addition to collaborating with fellow Support Engineers, consider some of these opportunities for collaborating with other GitLab team members:\nConsider participating in\nBackend Pairs\n:\nSlack channel:\n#backend_pairs\nSubscribe to the\nGoogle calendar\n.\nWatch the\nBackend Pairing playlist\non YouTube.\nRead about\nBackend Engineering\nat GitLab.\nConsider participating in\nFrontend Pairs\n:\nSlack channel:\n#frontend_pairs\nSubscribe to the\nGoogle calendar\n.\nRead about\nFrontend Engineering\nat GitLab.\nFinding a Code Contribution opportunity\nüåä Want to make a code contribution but you aren‚Äôt sure where to start?\nSearch and\nfilter\nissues strategically.\nHave a play around with the labels to look around for issues depending on your interests. For easier issues you can search for\nSeeking community contributions\n,\nAccepting UX contributions\nand then add additional labels accordingly\nIf the issue has a weight, look for issues with a weight of\n1\nfor smaller issues\n@anton\n: I typically like to look for\napi\nlabelled issues, because they tend to be backend only changes and Ruby code is what I like working on. Where possible I like to work on issues that will directly help Support in some way.\nAn interesting exercise would be to look at issues you opened early on in your time at GitLab to see how much you‚Äôve grown since you opened the issue and to see if you could make a code contribution.\nFor\nSupport Stable Counterparts\n(SSCs): ask your product group if they have anything small you can work on.\nAudit events are normally easy ones to get into as there are plenty of examples to draw from. See the\nComprehensive audit log: instance settings\nepic.\nTake a look at the\nPapercut spreadsheet\n.\nWhen you see something you might like to work on, add an emoji to the issue so you can refer to the emoji issue list later.\n@anton\n: I personally use üêú so if you have seen an issue with that emoji from me, I‚Äôve earmarked that issue for a potential code contribution in the future üòÑ\nRemember that there are plenty of code contribution opportunities outside of\ngitlab-org/gitlab\n. Consider\ngitlab-org/charts\n,\ngitlab-org/gitlab-runner\nor contributing to a project in\nthe Support Toolbox\n.\nIf you are interested on working on something but you aren‚Äôt quite sure how to get started, feel free to reach out to the product team that owns the issue or you can ask in\n#backend\nor\n#frontend\n. They can give you pointers and advise on the best approach.\nLast modified February 24, 2025:\nUpdate docs links in support pages (\nb0fee44f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 621}
{"doc_id": "13576f134a059d21", "url": "https://handbook.gitlab.com/handbook/engineering/development/principles", "title": "Engineering Principles | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nEngineering Principles\nAt GitLab,\nCompany Culture\nis very important to us. The\nmain ingredient of the company culture are\n.\nhave guided us throughout the evolution of\nthe company. Those values have been crucial in maintaining a positive and\nproductive culture, helping us make decisions to make the company and the\nproduct better.\nOur Engineering Principles are built on top of\n,\nand provide additional explanation of these in the context of the software\nengineering practice.\nIteration\nEfficiency\nSimplicity\nReliability\nQuality\nVelocity\nPredictability\nIteration\nWe always push ourselves to be iterative and make the\nminimal valuable change\nthat is on the direct path to achiving our goals.\nFor complex initiatives we are using the\nArchitecture Design Workflow\nto define our goals and to describe our iteration plan for a given effort. How\nwe are going to iterate on something may depend on our mid-to-long-term vision.\nOur goal is to make the iteration as efficient and as pragmatic as possible.\nWe also sometimes use an established ‚Äúscooter heuristic‚Äù: release a smallest\nproduct that our customers can use, and then iterate on it.\nImage Credit:\nHenrik Kniberg from Crisp\nReleasing minimal changes, as quickly as possible, is sometimes a good way to\nthink about iteration, especially when intermediate steps provide value to our\nusers and allow us to collect meaningful feedback. This has often been our\ndefault iteration approach.\nThis ‚Äúscooter‚Äù iteration pattern, however, is not always the most efficient way\nto make progress on something. Sometimes we do need to have a tailored plan for\nefficient iteration\n, because if we want to build something more\ncomplex, our users may not be happy with a scooter or a paper airplane, and we\nwill either not get any meaningful feedback or it will not be significant\nenough to be useful. In such cases, how we iterate should be a diligently\nplanned strategy, designed to improve efficiency and to allow us to achieve our\ngoals within a reasonable amount of time.\nAt GitLab we can use our\nArchitecture Design Workflow\nto build a more pragmatic iteration plan aligned with mid-to-long term vision.\nThis usually covers building a Minimal Viable Product too. In this case,\nhowever, how the MVP is going to look like depends on a thoughtful plan,\ndescribed in writing after collecting feedback throughout the organization.\nBelow you can find a few patterns that can precede ‚Äúbuilding the smallest thing\nin the next milestone‚Äù pattern, aimed to increase iteration efficiency:\nIdentify fundamental design problems, describe these in a design doc.\nIdentify most significant risks associated with those, find ways to de-risk.\nDevelop a plan to iterate on the fundamental design aspects individually.\nDeliver a first end-to-end iteration as a prototype or a Proof-of-Concept.\nAll these things attempt to improve our level of knowledge and reduce\nimplementation risk. All of these steps are also iterations by themselves that\ncan help us find hidden efficiencies to build better MVPs.\nTo read more about iteration, see our\nvalues\npage and\nengineering workflow\n.\nEfficiency\nEfficiency is at the core our engineering discipline at GitLab. This is also\none of the most important\ncompany values\n.\nHow we work in Engineering can have a significant compounding effect over the\nmid-to-long term. If we constantly ask ourselves, ‚ÄúHow can we implement this\nthing to become more efficient in mid-to-long term?‚Äù while still thinking about\npragmatic short-term goals, we can hope for seeing a lot value being built over\ntime, similarly to how compound interest builds wealth. Overfocusing on\nshort-term goals can lead to us missing out on this opportunity.\nA short, and incomplete list of things that can help us become more efficient:\nBuild useful and well designed abstractions.\nChoose\nsimple solution\nover easy solutions.\nRefactor code for simplicity and ease of understanding.\nContribute to an open source project instead of patching locally.\nBuild automation to reduce repetitive work or simplify a process.\nBuild new communication channels that enhance knowledge sharing.\nStrive for achieving engineering excellence over engineering perfection.\nSimplicity\nSimplicity is a prerequisite for reliability. It is also at the core our\nboring solutions\nvalue. We strive for\nchoosing simple solution over easy solution, even when it sometimes means that\nwe will need to put more work into building a simple solution.\nReliability\nAvailability/Reliability\n,\nQuality\n,\nSecurity\n, and\nPerformance\nare the pillars for building reliable software. Reliability is our contract with our customers that say you can count on us to deliver an available and dependable product. Everyone in the organization has a role to play.\nEngineers, Product Managers, and Designers have the most direct influence over the reliability of the code through either planning, implementation, monitoring (e.g.\nKibana\n,\nSentry\n, Grafana and other\nGitLab.com monitoring tools\n), or prioritization of the work. Product and Engineering management monitors (e.g.\nError Budgets\n) and measures the reliability of features and makes recommendations if necessary. Our focus on\nlearning and development\nwill also ensure that teams have the tools and training required to build reliable software. The\nInfrastructure\n,\nApplication Security\n,\nDatabase\nand\nDeveloper Experience\nteams are the Subject Matter Experts supporting product development teams.\nVelocity\nOur velocity should be incremental in nature. It‚Äôs derived from our\nIteration\nand\nEfficiency\nprinciples.\nWe recognize the importance of keeping our velocity high:\nThe rate at which GitLab delivers new value to users is a competitive\nadvantage for the company.\nAs an open source project, people are welcome to fork us. However, in order\nto ensure that the community contributing to GitLab remains intact it is\nimportant to move fast so that any fork is quickly out-of-date.\nOnce you slow down, it is incredibly painful to speed back up again.\nCompanies tend to slow down as they grow. It takes deliberate effort to\nprevent this, so it must always be top of mind. Highlighting the need of\nretaining velocity can help us with adapting workflows and processes to keep\nvelocity high.\nThere are a few things that we can do to keep our high velocity. See those\ndescribed below.\nIterate well\nIterate\nwell on what you are working on. Strive for delivering\nsmall merge requests. Write a\ndesign docs\nwhen you plan to ship multiple iterations that would benefit from additional\nalignment.\nVelocity comes from going fast into the right direction. That is the difference\nbetween Speed and Velocity. Direction matters for Velocity, therefore we need\nto\niterate efficiently\non the right things at the right time.\nFor some tips on how to iterate you can check\nthe blog post about 12 shortcuts that are not iteration\n.\nReduce review time\nBe mindful about a code review latency. Do not make authors wait too much\nbefore you review their code.\nFor many people context switching is a very expensive thing to do, which can\nnegatively impact their productivity. Be mindful about that when you are\nreviewing code or collaborating with team members asynchronously. If a question\ndoesn‚Äôt need to be answered, or a code suggestion is a minor nitpick which\ndoesn‚Äôt need to be addressed, then perhaps it is not worth context switching\nrequired to do these things.\nReduce process\nReduce the amount of attention to various processes when working on\nExperimental and Beta features. It is fine to skip certain processes when you\nare aiming for delivering an Experimental or even Beta feature. Processes can\nalso be automated to reduce their impact on velocity.\nFor example, if you are working on an Experimental feature, you should aim for\nreducing the amount of time-consuming processes to the bare minimum.\nAt GitLab we do not ship the process\n.\nThis might require a pragmatic approach to find the right balance between\nworking on code and doing UX research, customer validation or spending\ntime in long brainstorming sessions. Some of these things will still be needed,\nbut strive for being\nEfficient\nand be mindful about the need to\nkeep our velocity high.\nFor example, if you feel confident that what you‚Äôre shipping is something that\nwon‚Äôt result in usability issues, effectively meets a customer need, and/or\nwon‚Äôt result in workflow issues, then we should have the confidence to move\nahead with it without conducting research.\nIf you can skip a process to gain velocity, consider doing that. We may not be\nable to apply this rule for GA features, though. Be mindful about the impact of\nskipping process on customers when you are working on Beta feature. If you are\nworking on an Experimental feature, skipping some processes to gain velocity is\nrecommended after thoughtful consideration.\nIf you have questions about whether a process is hindering efficiency, is\noutdated, doesn‚Äôt scale well, and can be skipped or automated, talk to you\nmanager. When you skip a process, document this decision somewhere (a comment,\nan issue) and ping people for whom this information might be useful.\nEmbrace risk\nWhen you are working on Experimental and Beta features it is okay to take some\nrisks. We have many useful tools and automation available that can allow us to\ntake some additional risks to retain high velocity when delivering Experimental\nfeatures:\nYou can use Feature Flags.\nYou can implement circuit breakers.\nUse design patterns that increase code isolation.\nThe more isolated you feature is from the rest of GitLab, the more risks you\ncan take, because it is less likely that a problem in your Experimental feature\nwill affect Generally Available features, or a whole product, in a negative\nway.\nThere is one exception for this rule: availability and security. Your code\nshould be always as secure as possible and should not bring GitLab.com down,\nregardless of the maturity model.\nBalance maintenance\nBalance the need to refactor code and deliver new features. Use our\nEfficiency\nprinciple as a compass.\nBe proactive\nIf there is a process that has a negative effect on our velocity, be proactive\nabout it: speak up and collaborate with your manager on how can we improve it.\nWe should always be able to explain why a process exists, and if we‚Äôre unable\nto do it, maybe it is ‚Äúa process for process sake‚Äù, maybe it is a process of\nlow value, or it does not fit our current scale or our strategic goals\nanymore. If that is the case perhaps the process could be eliminated, fixed,\nor automated.\nPredictability\nPrioritizing technical decisions\nPlease see the\nProduct Management section\nthat governs how they prioritize work, and also should guide our technical decision making.\nDespite the high priority of velocity to our project and our company, there is one set of things we must prioritize over it: GitLab availability & security. Neither we, nor our customers, can run an Enterprise-grade service if we are willing to risk users‚Äô productivity and data.\nOur hundreds of Engineers collectively make thousands of independent decisions each day that can impact GitLab.com and our users and customers there. They all need to keep availability and security in mind as we endeavor to be the most productive engineering organization in the world. We can only move as fast as GitLab.com is available and secured. Availability of self-managed GitLab instances is also extremely important to our success, and this needs to happen in partnership with our customers‚Äô admins (whereas we are the admins for GitLab.com).\nFor security, we prioritize it more highly by having strict SLAs around priorities labels with\nsecurity issues\n. This shows a security first mindset as these issues take precedence in a given timeframe.\nLeverage Established Processes\nWe develop and document processes that are designed to help us in achieving better Results.\nFor example, the following processes exist to reduce the risk and improve code quality:\nFeature Flags Usage\nCode Review Guidelines\nWe find opportunities for improvement through analyzing metrics to identify trends, hosting retrospectives (e.g.\nGroup Retrospectives\n,\nIteration Retrospectives\n), performing\nRoot Cause Analyses\n, and receiving feedback from team members. Team members are encouraged to identify opportunities to improve our processes and propose solutions, examples of this could be an MR or and issue describing these opportunities.\nEveryone can contribute by proposing new processes and improving upon existing processes.\nQuality\nIt is important to remember that quality is everyone‚Äôs responsibility. Everything you merge to master should be production ready. Familiarize yourself with the\ndefinition of done\n.\nRelease when it‚Äôs ready\nOur\nreleases page\ndescribes our two main release channels:\nSelf-managed users use a\nmonthly self-managed release\n.\nGitLab.com uses\nauto-deploy releases\n.\nAs the first of these is a monthly release, it‚Äôs tempting to try to rush to get something in to a monthly self-managed release. However, this is an anti-pattern. Most issues don‚Äôt have strict due dates. Those that do are exceptions, and should be treated as such.\nDue date pressure logically leads to a few outcomes:\nPeople are at\nincreased risk of burnout\n.\nWe may compromise on our\ndefinition of done\n.\nWe\ncut scope\n.\nWe miss the due date.\nOnly the last two outcomes are acceptable as a general rule. Missing a ‚Äòdue date‚Äô in the form of an assigned milestone is often OK as we put\nvelocity above predictability\n, and missing the monthly self-managed release does not prevent code from reaching GitLab.com.\nFor these reasons, and others, we intentionally\ndo not define a specific date\nfor code to be merged in order to reach a self-managed monthly release. The earlier it is merged, the better. This also means that:\nWe don‚Äôt want merge request authors to\nwork extra hours\nor otherwise rush to meet a due date.\nWe don‚Äôt want\nreviewers and maintainers\nto be put under pressure to do anything other than meet the\nregular SLOs\n.\nIf it is essential that a merge request make it in a particular release, this must be communicated well in advance to the engineer and any reviewers, to ensure they‚Äôre able to make that commitment. If a severe bug needs to be fixed with short notice, it is better to revert the change that introduced it than to rush, or even to delay the release until the fix is ready.\nIn general, there is no need to change any behavior close to the self-managed release.\nDogfooding\nWe\ndogfood everything\n. Based on our\nproduct principles\n, it is the Engineering division‚Äôs responsibility to dogfood features or do the required discovery work to provide feedback to Product. It is Product‚Äôs responsibility to prioritize improvements or rebuild functionality in GitLab.\nDogfooding Antipatterns\nAn easy antipattern to fall into is to resolve your problem outside of what the\nproduct offers. Dogfooding is not:\nBuilding a bot outside of GitLab.\nWriting scripts that leverage the GitLab API (if the functionality is on our\nroadmap and could be shipped within the GitLab Project).\nUsing a component of GitLab that is not part of our\ncomponents\nor\nmanaged apps\n.\nUsing templates or repos that are not part of the default UI (having to type or copy-paste to add them).\nNot deprecating the non-GitLab product or part as you introduce the functionality in GitLab, we need to eat the dogfood, not just serve it.\nUsing it for something that isn‚Äôt crucial or essential.\nDelaying until every single feature you use now is in the GitLab product.\nNot starting it because using a non-GitLab and GitLab product at the same time introduces overhead.\nTrying to move the most complex part first, instead please iterate and move the simplest first.\nBuilding it outside of GitLab because ‚ÄúIt is just a prototype‚Äù, ‚ÄúWe‚Äôre not sure it will work‚Äù, or ‚ÄúWe‚Äôre not sure it is better than the existing functionality‚Äù\nDogfooding Process\nFollow the\ndogfooding process described in the Product Handbook\nwhen considering building a tool outside of GitLab.\nCode Quality and Standards\nWe need to maintain code quality and standards. It‚Äôs very important that you are familiar with the\nDevelopment Guides\nin general, and the ones that relates to your group in particular:\nUX Guides\nBackend Guides\nFrontend Guides\nDatabase Guides\nPlease remember that the only way to make code flexible is to make it as simple as possible:\nA lot of programmers make the mistake of thinking the way you make code flexible is by predicting as many future uses as possible, but this paradoxically leads to *less* flexible code.\nThe only way to achieve flexibility is to make things as simple and easy to change as you can.\n‚Äî Nearby Cats (@BaseCase)\nJanuary 16, 2019\nUI consistency and maintainability across Rails and VueJS Frontend\nPart of our engineering culture is to keep shipping so users and customers see significant new value added to GitLab.com or their self-managed instance. To support rapid development, we choose pragmatically the right technology. As each view is unique, we should equally respect our HAML and Vue codebase and make an educated choice per view as to which framework will enable the most consistency and maintainability.\nIt‚Äôs important to keep in mind that when building complex applications, there are many factors to consider such as the fully planned feature to avoid situations where we build an MVC in HAML only to later need to re-write it in Vue due to growing complexity.\nTo promote visual consistency and an accessible UI, we should always aim to use simple and reusable UI components provided by the\nGitLab UI component library\nboth in Vue and HAML views. We implement GitLab UI components based on our Pajamas design system and currently these are mostly in Vue, however, we provide\nadapters\nthat allow us to use a few simple components in HAML as well.\nIf a GitLab UI component is not available on HAML due to its intrinsic complexity, this is a sign that you should implement your feature using Vue instead.\nWhen to use VueJS\nYou are looking to use an already established component from the (\ngitlab-ui\n) library.\nYou are building a complex feature that will require multiple\ncomplex components\nwhich are connected to provide interactivity in a single page application.\nYou find yourself enhancing a HAML view‚Äôs behavior with vanilla JavaScript / jQuery (reactive or asynchronous behavior).\nYou require medium or larger client-side interactivity.\nYou want to build a realtime application.\nWhen to use Rails\nYou require a simple, static view.\nYou do not need to use multiple components or state management.\nYou do not need to use any of the\ncomplex components\nfrom the (\ngitlab-ui\n) library (this does not extend to simple components which can be used in HAML such as labels).\nComplex Components\nA complex component denotes a type of component that cannot be used easily in our HAML files. This might be due to in-built state management, CSS or dynamic behaviour that rapidly becomes a maintainability burden inside HAML. An example of such a component would be our\nTable component\n.\nbackend\nfrontend\nuse GraphQL everywhere\nthe importance of velocity\nengineering proposed initiative\nLast modified March 6, 2025:\nFix link to security issue priorities (\n2f4e6501\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3155}
{"doc_id": "8fdd59df0d635bbc", "url": "https://handbook.gitlab.com/handbook/marketing/blog/release-posts", "title": "GitLab Release Posts | The GitLab Handbook", "text": "The Handbook\nMarketing\nBlog Handbook\nGitLab Release Posts\nGuidelines to create and update release posts\nIntroduction\nRelease posts are\nblog posts\nthat announce changes to the GitLab application. This includes our regular cadence of monthly releases which happen\nevery month\n, and patch/security releases whenever necessary.\nRelease posts follow a process outlined here, and the templates that are used to create them also highlight what needs to be done, by whom, and when those items are due.\nFrequently used templates\nHelpful reference pages\nRelease post scheduling\nSchedule\nAt a high level, the Release post schedule is:\nMonday, 3 weeks before release\nRelease Post Manager manually trigger the following\nscheduled pipelines in the www-gitlab-com project\n:\nRelease Post Process Kickoff Tasks\nThese invoke the\nbin/rake release_post:start\nrake task. (\npipeline configuration\n;\nrake task\n)\nThis task creates the branches, MRs, and issues necessary to run the Release Post process\nThe MRs and issues will be assigned to the Release Post Manager using the content in\nrelease_post_managers.yml\nAfter the\nRelease Post Process Kickoff Tasks\npipeline completes, and the release post branch is created with associated merge request, manually trigger the following\nscheduled pipelines in the www-gitlab-com project\n:\nAdd deprecations and removals to current release post branch\nMonday through Thursday, 3 weeks before release\nPMs\ncontribute MRs for their\ncontent blocks\nFeatures and Upgrades\nare contributed as release post item MRs targeting the release post branch\nPrimary items are added to\nfeatures.yml\nRecurring content blocks for Omnibus, GitLab Runner, and Mattermost are added by the area owner\nNon-standard product announcements, uncategorized items, and other announcements can be announced using the\nextras\ncontent type\nEMs and PMs\nannounce\ndeprecations and removals\nThursday, 1 week before release\nCode cutoff\nEMs and PMs\nmake sure items that are feature flagged are\nenabled by default\nto ensure inclusion into the self-managed release.\nDeprecation and removal MRs are assigned to TWs for final review and merge.\nTW Reviewers\nfinish review of Features, Deprecations, Removals, Upgrades, and Extras\nPMMs, Product Design Managers, Product Designers, and PM Leaders\ndo optional reviews of release post item MRs\nEMs\n:\nMerge feature release post item MRs if the underlying code was merged by the Thursday, 1 week before release\nMerge feature release post item MRs if manually verified to be in the release\nMRs can be manually verified using the\n/chatops run release check <MR URL> <RELEASE>\nchatops command\nTW Reviewers\nmerge deprecation and removal MRs\nNote:\nMRs added after the Thursday, 1 week before release should target the\nrelease-x-y\nbranch, not\nmaster\nMonday of release week\nAt\n4 pm UTC (11 am ET / 8 am PT)\n, another\nrelease post automation\ntask (\nscheduled pipeline\n;\nrake task\n) performs content assembly\nRelease Post Manager\npicks features to highlight and creates the introduction content\nMonday through Tuesday of release week\nContributor Success\nadds the\nNotable Contributor\nRelease Post Manager and Technical Writer\nperform final reviews\nChanges after\n4 pm UTC (11 am ET / 8 am PT)\non the Monday of release week will be done via the\nrelease-X-Y\nbranch and are subject to approval by the Release Post Manager.\nThe TW Lead verifies the deprecations and removals links in the release post\nRPM create a\nWhat‚Äôs New\nNote:\nThe Monday through Tuesday of release week can fall on vacations or holidays. PMs should designate who to respond to time-sensitive inquiries should they be unreachable. Release Post Managers are empowered to make decisions and\ndisplay bias for action\nif they haven‚Äôt received a response by EOD on the Tuesday of release week.\nThursday, release day\nRelease team\npublishes the latest package\nAfter the package is\nreleased\n, the\nRelease Post Manager\npublishes the release post to the  master branch\nThe\nGitLab.org Releases page\nwill also populate the changelog via an\nautomated process\nwhen release posts are published (\npipeline task\n)\nNote:\nDetails for all of these steps are described in the\nMonthly release\npost\nMR template\nand the\nMonthly release\npost item\nMR template\n.\nParticipants\nRelease Post Manager\nPM contributors\nPMM reviewers\nPMM lead\nTW lead\nProduct Design reviewers\nTW reviewers\nTechnical advisors\nEngineering Managers\nVolunteering for the Release post\nEach month, a Product Manager, Technical Writer, and an Engineering Department Technical Advisor volunteer to manage the release post, as listed in the\nRelease Post Scheduling page\n. Product Marketing Managers also sign up, but mostly as shadows for awareness for their related marketing activities. The Product Manager volunteer will lead the release post as the Release Post Manager and is listed as the Author of the release post when the post is published. To update the\nrelease post scheduling list\n, all volunteers need to edit the data file below:\nData YAML file\n: gathers the Release Post Managers for every release (9.0 onwards). Be sure to update the ‚ÄúManagers‚Äù section below the ‚ÄúVersions‚Äù if this is your first release.\nIt‚Äôs highly recommended that all volunteers shadow the release post prior to the one they run. Volunteers can update the previously mentioned data YAML file to indicate both when they shadow and when they help run the release post.\nRelease Post Managers will need\nMaintainer\naccess privileges for the\nhttps://gitlab.com/gitlab-com/www-gitlab-com/\nproject. If you need access, model your request after\nthis confidential issue\n.\nRelease Post Manager\nProduct Managers of any level (IC or managers) can volunteer for any release that doesn‚Äôt have someone assigned yet. While we encourage IC product managers to take advantage of this opportunity to demonstrate their leadership skills, we also value that managers will bring their experience to the role.\nBefore committing to the date of your choice, please be sure you can perform the critical path Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month as defined in the\nmonthly MR template\n. If you cannot perform any of the Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month, please sign up for a release post that better aligns with your availability.\nTo assign yourself as Release Post Manager or Release Post Manager‚Äôs shadow, simply add your name on the\nRelease Post Scheduling page\nby submitting an MR to update the\n/data/release_post_managers.yml\nfile. Otherwise, PMs will be assigned using a fair scheduling principle leveraging this\ntracking doc\n:\nMembers that never managed a release post before\nMembers that have the longest interval since they managed their last release post\nAfter joining the company, there is a grace period of a few months where the new Product Manager\nwill get up to speed with the process, then they will be scheduled to manage a release post.\nAdding members to the list is a shared task, and everyone can contribute by following the\nprinciple described above. Scheduled people are pinged in the merge request to make them aware.\nThey don‚Äôt need to confirm or approve, since they can always update the list if they are not\navailable for the given release post.\n‚ö†Ô∏è Important\nIf you‚Äôre scheduled for a given month and you can‚Äôt make it because you‚Äôre on\nvacation, overloaded, or for any other reason, that is okay,\nas long as you swap the\nRelease Post Manager role\nwith someone else\nbefore\ncreating the merge request and starting the\nwhole process. If you take it, you‚Äôre responsible for the entire process and must be\navailable to carry it out until the end.\nRelease Post Manager Shadow\nEach month, a Product Manager also acts as a shadow to support the Release Post Manager tasks if needed, act as back up on decisions in absence of the Release Post Manager and prepare to run the next release post. By shadowing the month prior to leading the effort, Product Managers are prepared and aware of any shifts in processes or optimizations needed since the last time they participated.\nShadows should remain engaged with the release process by:\nFollowing the activity in the slack channels\nAttending the weekly standups\nAssisting the Release Post Manager with content reviews and any other tasks they ask for help on\nIn order to properly onboard the shadow, the Release Post Manager should:\nSet up an initial coffee chat with your shadow the week after the previous release ships to get to know each other and clarify any initial questions from the shadow\nPoint the shadow to this page\nInclude the shadow in the initial release post MR creation\nInclude the shadow on all meetings and as much as possible on activities like reviews or other opportunities where you can work synchronously together\nRemember: The goal of the shadow is to get them engaged and aware of the process so they can run one on their own. Include the shadow as much as possible so they can learn and be prepared!\nTechnical Advisor considerations\nWe recommend that technical advisors volunteer for at least 2 or 3 release posts in a row to allow proper time for orientation with the process and the ongoing technical backlog.\nTechnical advisors are expected to:\nSolve problems with Git branch conflicts and Ruby installations.\nBe able to technically contribute to\nwww-gitlab-com\nsource code.\nResolve some of the\nbacklog issues\n.\nThe responsibilities of a technical advisor can be seen in more detail in\nTechnical advisors\n.\nRelease Post Manager Responsibilities\nCritical path tasks\nCompleting all the tasks assigned to the Release Post Manager in the Release Post MR template\nReminder: If you cannot perform any of the Release Post Manager tasks between Thursday, 1 week before release, and the\nrelease date\nof the month as defined in the\nmonthly MR template\n, it is recommended you sign up for another release post. In the case that schedule/circumstances changes after you‚Äôd already signed up for the release post, please start a thread in #product in slack and tag\n@[name of PLT member who is reviewing this month]\n. The name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\nIdentify the top feature to highlight on the release post page and collecting feedback from the VP of Product\nCreating the What‚Äôs New MR and working with the VP of Product to identify what to include in\nWhat‚Äôs New\nSending out reminders about upcoming due dates\nMerging the release post MR on the\nrelease date\nand ensuring the release post page goes live\nCollecting feedback in the release post retrospective issue during the release post not just for your own challenges, but other team members challenges as they pop on Slack and other places\nDoing a sync retro with the Technical Writer, the Technical Advisor and the Release Post Manager Shadow sometime between the day after the\nrelease date\nand one week after the\nrelease date\n, to identify and collaboratively complete actions to improve the process and update the handbook/MRs\nMaking sure all the action of the retrospective issue are completed and the issue closed before the next\nrelease post automation task runs on the Monday, 3 weeks before relea\nOther key tasks\nRunning a weekly sync or async standup with the release post team (sync standup required for major releases)\nReviewing and supporting overall content quality and accuracy of all content published in the release post\nIncluding the Release Post Manager Shadow as much as possible on activities so they learn prior to their rotation\nAdding the\ncover image\nthat is (jpg, png) is\nsmaller than 300KB\nMonitoring the Slack Release Post channel to help answer questions and troubleshoot hurdles\nPinging the PMs and others as needed in Slack or MRs to help resolve feedback\nMaking sure the release post is\nready to merge two days before the\nrelease date\nCommunicate\ndirectly with product managers using\n#product\non Slack as needed to field questions that come up from viewers of the release post blog once it is live on the\nrelease date\nIf you need additional support in engaging with the community, the Developer Advocacy team (\n#dev-advocacy-team\non Slack) is available to support on\nrelease days\nMaking sure the auto sorting of secondary features by title (alpha) and stage generally looks good or is revised if need be\nContent Reviews\nWorking with PMs and others as needed to make sure any external blogs they reference in their content blogs go live before the release post blog gets published on the\nrelease date\nMaking sure the TW Lead is aware if release post items are added or removed after the Monday of release week\nInforming the social team that the release post has been published and it‚Äôs time to schedule social media posts\nSupporting on tasks specific to\nmajor releases\nif collaborators reach out\nHow to get started\nMake sure you have\nMaintainer\naccess to project\nhttps://gitlab.com/gitlab-com/www-gitlab-com/\n. If you need access, model your request after\nthis confidential issue\n.\nAn automated task will\ncreate the branches, MRs, and issues necessary to run the Release Post process, including making the appropriate assignments and mentions based on the\nRelease Post Manager schedule\n.\nIf you have not been assigned to a Release Post X.Y MR by the end of the day on the Monday, 3 weeks before relea:\nWork with your Technical Advisor to run\nbundle exec rake release_post:start\nto kickoff the X-Y Release Post, or\nFollow these steps to\nmanually create the release post branch and required directories/files\nCommunication\nThe Release Post Manager, the Technical Advisor, the Technical Writer, and PMM Lead will need to communicate about topics that are related to the release post but not relevant to the broader team, these chats should occur in Slack\n#X-Y-release-post-prep\nchannel in Slack, to minimize distractions and unnecessary notifications for the broader team in Slack #release-post.\nThe Release Post Manager posts in Slack channels most frequently with reminders. As such, if the Release Post Manager is seeking guidance on how to phrase certain posts, it‚Äôs recommended to scroll to the approximate date that post would have been made by the previous Release Post Manager in the relevant Slack channel. However, here are some best practices and an example:\nMake a clear, descriptive statement of what‚Äôs being shared and why\nIf you need someone to take an action, say so explicitly and tag that person\nIf the action requested is time sensitive, give a clear due date\nIf there are known issues they need to be aware of, list them out\nAlways cc your release post team for big announcements so everyone is in the loop\nWhen communicating in either Slack\n#release-post\nor\n#X-Y-release-post-prep\n, organize your announcements and requests via unique discussions threads to make it easier to track conversations. For example, avoid combining various reminders just because they fall on the same date when they address different topics. As a general rule, if there‚Äôs is a unique task list item for the reminder in the MR template, that reminder should get its own separate post whether it is in Slack or the MR itself. Also, review GitLab‚Äôs\neffective slack communication\nguidance.\nSample post to executive stakeholders for review is below.\nThe name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\n@[name of PLT member who is reviewing this month] The 13.6 Release Post has been generated and can be reviewed at\n`https://release-13-6.about.gitlab-review.app/releases/2020/11/22/gitlab-13-6-released/index.html`\nPlease share your feedback by\n<\ntime\ndatetime\n=\n\"18:00\"\n>\n6 pm UTC (1 pm ET / 10 am PT)\n</\ntime\n>\non Friday November 20 (tomorrow). Thank you for your review!\nCurrently there are no known issues/adjustments to the content but I know of one deprecation that needs to be added and will happen with my first wave of edits.\nHere's the 13.6 release post MR:\n`https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/66652`\ncc\nLead\n@tech\n-advisor\nOther samples for posts include reminders and notices on any items that the Release Post Manager is taking:\nüé∫ Hi team! Announcing a \"last call\" that no further contributions to the bugs, performance improvements, and usability improvements MRs will be taken after the Thursday, 1 week before release. Please get them in üèÉ‚Äç‚ôÇÔ∏è cc @[name of PLT member who is reviewing this month]\nHey team, reminder that there are currently XX Open and Ready MRs targeting XX.X milestone (link to open MRs). Please take a moment to ask your EMs to merge or to move out the items that won't make milestone.\nHi all, I will be completing the final merge for the release post in the next 45 minutes-1 hour! I will be coordinating any activities with team members to resolve any problems that come up. cc\n@Tech\nAdvisor\nLead\nThe Developer Advocacy Team will reach out to the Release Post Manager in Slack #release-post following their\nRelease days process\nwhen they need help responding to inquiries about content in the release post blog. These needs will primarily arise within the first week of going live with the blog. However, as the Author for a specific release post, you may get pinged to help coordinate a response some weeks later as issues arise. You will usually just need to find the best DRI to handle the issue, often the PM of the release post item in question.\nSometimes, external PR and Marketing firms reporting on the release or managing media relations may ping the RPM directly with questions, since the RPM is the ‚Äúauthor‚Äù of the release post. If this happens, the Release Post Manager should figure out who in Marketing can take over this communication.\nContent reviews\nThe due dates for various reviews across all participants can be found on the\nrelease post MR template\nand the\nrelease post item MR template\n. PM contributors are encouraged to cease attempts to add new content blocks after the content merge deadline on the Thursday, 1 week before release, and especially after final content assembly happens on the Monday of release week at\n3 pm UTC (11 am ET / 8 am PT)\n. Exceptions can be made for highly impactful features, but it is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release.\nKeeping an eye on the various content reviews (TW, PMM, and Director) for the individual release post items (content block MRs) is the responsibility of PM contributor. However, it is recommended that the Release Post Manager keep an eye on how many items are not yet marked with the Ready label on the Thursday, 3 weeks before release of the month or not yet merged on the Thursday, 1 week before release, and check in with PMs in Slack Release Post channel to support and clear hurdles if needed. A really easy way to do this is to keep your eyes on the\nPreview page\nand copy-edit and link check items as new items appear. It‚Äôs also important to do this because this page is LIVE to users and should be error free.\nThe review and any needed adjustment to the ordering of secondary features due to stakeholder feedback is the responsibility of the Release Post Manager. Secondary features, removals, and upgrade notes are all sorted alphabetically by title, grouped by stage. To affect the sort order of the secondary features, a change to the content block‚Äôs\ntitle\nis required. The Release Post Manager should work with the product managers of the content blocks to make these changes, to ensure accuracy and alignment.\nAfter the Review App for the release post has been generated, the Release Post Manager solicits additional feedback from the\nproduct leaders\nvia Slack in the #release-post channel.\nIt is the Release Post Manager‚Äôs responsibility to make sure all content is completed by the Tuesday of release week, ensuring a one day buffer is left for final error fixes and small improvements.\nTo the extent possible, we strive to use\nGitLab‚Äôs Community Code Review Guidelines\nwhen performing Release Post content review.\nWhat RPM should look for when reviewing content blocks\nIt is recommended for the Release Post Manager to review all content for quality, including the marketing intro. But when reviewing content blocks in each release post item MRs, the RPM should look for the following:\nAre the why (problem) and the what (solution) clearly stated? See\nwriting about features\nas a guideline for what feature descriptions should contain.\nDo the filenames follow the recommended file-naming convention? See\nimportant note on naming files\nunder\nInstructions\nfor PM contributors.\nTips for reviews\nUtilize the\nAvailable now on GitLab\npage to easily scan release post items that have been merged.\nSearch the\nAvailable now on GitLab\nand preview pages for characters like\n[\n,\n]\n,\n(\n, and\n)\nto find malformed links.\nCopy/paste the content of those pages into a tool like Grammarly to find less obvious typos like duplicate words.\nRelease post intro content\nThe introduction content of the release post (found in\nYYYY-MM-DD-gitlab-X-Y-released.html.md\n)  is templated to be standard across all release posts, and should not be modified without approval from\n@justinfarris\n. This file is linked at the top of the release post MR for reference and ease of editing. The Release Post Manager will make sure all primary items are approved and a top feature is designated and ask the VP of Product for feedback.\nPM Contributors\nProduct Managers are responsible for\nraising MRs for their content blocks\nand ensuring they are reviewed by necessary contributors by the due date. These are mostly added by the Product Managers, each filling up the sections they are\naccountable for\n, but anyone can contribute, including community contributors. Content blocks should also be added for any epics or notable community contributions that were delivered.\nContribution instructions\nIn parallel with feature development, a merge request should be prepared by the PM with the required content.\nDo not wait\nfor the feature to be merged before drafting the release post item, it is recommended PMs write Release Post Item MRs as they prepare for the milestone Kickoff.\nImportant\nThe\nInstructions\nbelow apply up to the Monday of release week\n7:59 am UTC (2:59 am ET / Thursday, 1 week before release 11:59 pm PT)\n. After content assembly on the Monday of release week, anyone who wants to include a change in the upcoming release post must coordinate with the Release Post Manager and follow detailed instructions in the\nMerging content blocks after the Monday of release week\nsection for special handling of late additions.\nKey dates\nDuring kickoff preparation, or when planning for the upcoming milestone: consider creating the release posts early to enable the team to\nwork backwards\nThursday, three weeks before the release - Drafted\n: ready for review by Product Marketing, Tech Writer, and PM Group Manager or PM Director\nMonday through Thursday the week before the release - Reviewed\n: reviewed by all required stakeholders, content revised as needed and ready to be merged\nThursday, 1 week before release - Merged\n: release post item MR merged by the Engineering Manager if feature has been merged\nMonday of release week - Final content assembly\n: and release post blog content lock in preparation for final reviews/editing\nImportant\nIf a feature being announced involves references to external business partners, you‚Äôll need to start MR draft approvals earlier. One such example would be\nCloud Seed\n. These types of announcements require extra reviews with GitLab leadership, business partners and Legal team. In these cases, please reach out to\n@justinfarris\nto start MR reviews at least one milestone ahead of the milestone in which you want to make the release post announcement.\nRelease Post Item Instructions\nOption 1: automated MR creation\nThe\nrelease post item generator\nautomates the creation of release post items using issues and epics. Draft your release post content under the\nRelease notes\nsection of the\nfeature issue template\nand then follow the\nrelease post item generator\ninstructions.\nNote:\nThe generator will not create an MR for a confidential issue. To add a release post item for work relating to a confidential issue, follow the steps below to create an MR manually and remove any confidential information or links.\nOption 2: manual MR creation\nCreate a new branch from\nmaster\nof the\nwww-gitlab-com repository\nfor each feature (primary, secondary, removal).\nDeprecations are handled differently\nOpen a merge request targeted at the\nmaster\nbranch\nUse the\nRelease Post Item template\nContent should be one YAML file added to\ndata/release_posts/unreleased/\non the\nmaster\nbranch\nSee\ndata/release_posts/unreleased/samples/\nfor format and sample content\nNote that the structure needs to be preserved, like\nfeatures:\nthen\nprimary:\n, then the feature content\nImages should be placed in\n/source/images/unreleased/\nUpdate the\ndata/features.yml\n(if applicable) to include your feature and commit the changes as part of the same merge request\nComplete the PM checklist included in the\nRelease Post Item MR template\n, which includes but not limited to these tasks:\nAssign the MR to the relevant Tech Writer for review\nAssign the MR to the relevant Product Marketing Manager, and/or Director if additional review is needed\nOnce all content is reviewed and complete, add the\nReady\nlabel and assign MR to the appropriate Engineering Manager (EM) to merge when the feature is deployed and enabled.\nImportant note on naming files\n: PMs should create file names that are descriptive and have reasonable overlap with the title of the content block itself. This makes it easier to related content blocks to yml file by different participants in the review process. Either underscores\n_\nor hyphens\n-\ncan be used as long as the correct prefix is used (\nstagename\n,\nremoval\n, or\nupgrade\n) as listed below.\nFeature file names:\nstagename-featurename.yml\n(for example,\ncreate-group-wikis.yml\n).\nDo not:\nDesignate primary vs. secondary as that can change.\nUse category or group name.\nInclude the reporter‚Äôs name.\nRemoval file names:\nremoval-something-else-descriptive.yml\nUpgrade file names:\nupgrade-another-description.yml\nSome troubleshooting hints:\nUse\ngit merge\n, don‚Äôt use\ngit rebase\n.\nRebase is a powerful tool that makes for a clean commit history, but due to the volume of commits by the number of collaborators on the\nwww-gitlab-com\nrepo, it will typically have a lot of conflicts you‚Äôll have to manually work through. Since your content MRs should only contain changes relevant to your own content block and a single addition to\nfeatures.yml\n, merge conflicts should be minimal, and typically nonexistent. If you start a rebase and run in to issues, you can always back out with\ngit rebase --abort\n.\nRemember to close your quotes, check your filenames, and indent properly.\nMany vague pipeline errors are caused by common coding gotchas. Make sure your quotes are closed, the file you‚Äôre referencing uses\nexactly\nthe same filename you listed, and you have the right indentation set on each line.\nContent\nWe want to help people understand new features to increase adoption their adoption. In general, release posts should succinctly state the problem to solve, the solution, and how customers benefit from the solution. Be sure to reference your Direction items and Release features. All items which appear\nin our\nUpcoming Releases page\nshould be included in the relevant release post.\nWhen writing your content blocks, be sure to reference\nWriting about features\nto ensure your release post item writeups align with how GitLab communicates. For example, we avoid formal phrases such as ‚Äúwe are pleased to announce‚Äù and generally speak directly to our users by saying ‚Äúyou can now do x‚Äù rather than ‚Äúthe user can now do x‚Äù. Checking out the links to these guidelines will help you align our tone/voice as you write, ensuring a smoother and more speedy review process for your release post items.\nPM contributors are encouraged to use discretion if wanting to add new content blocks after the final merge deadline of the Thursday, 1 week before release, and especially after final content assembly happens at 8 AM PST (3 PM UTC). But if highly impactful features are released that can not wait till the next blog post, PMs should reach out and coordinate with the Release Post Manager. It is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release.\nPrimary vs. secondary\nWhen creating your content for a Release Post item you‚Äôll need to determine if it‚Äôs a\nprimary\nor\nsecondary\nfeature. Do this in collaboration with your PMM counterpart and reference this guidance if you‚Äôre unsure:\nA feature should be\nprimary\nif the feature:\nMatures a category (post release you‚Äôd update the\ncategory maturity\nfor the category your feature lives within)\nIs\nnew\n, or a significant improvement - it adds key functionality that did not exist previously or significantly changes existing functionality\nHas high demand from customers or the wider community (measured by discussion or upvotes on an epic/issue)\nFeature ties into a current Marketing narrative or campaign\nAll\nprimary\nfeatures should have a corresponding entry in\nfeatures.yml\nas well as a photo or video in the release post item block.\nBeta features may be included as primary, or secondary items, but must clearly reflect the\nBeta\nstatus.\nExperimental features are not to be included as primary or secondary items to the release posts.\nExperimental Features\nTo include an experimental feature in the release post, use the\nexperiment template\n, when creating a release post item in the\nunreleased\ndirectory. Experiment features are displayed in their own section of the release post.\nReviews\nPM Director/Group Manager, PMM, and Product Design reviews are highly recommended, but the Tech Writer review is the only one required for inclusion in the Release Post. Tech Writer review is required even when late additions are made to the release post after the Monday of release week. The Tech Writing review should be focused on looking for typos, grammar errors, and helping with style. PMs are responsible for coordinating any significant content/tech changes. Communicating priority about which release post items are most important for review will help Product Section leads, PMMs, and Tech Writers review the right items by the Thursday, 3 weeks before release, to ensure the proper labels are applied to the MR and assign reviewers to the MR when it is ready for them to review (ex:\nTech Writing\n,\nDirection\n,\nDeliverable\n, etc).\nNote: For consistency, use the\nReviewers for Merge Requests\n] feature in GitLab when assigning PM Director/Group Manager, PMM, TW, and Product Design team members for content reviews.\nRecommendations for optional PM Director/Group Manager and PMM Reviews\nAs PMM reviews are not required, but recommended - and Product Leader and Product Design reviews are optional - PMs should consider a few things when determining which content blocks to request a review for:\nDoes the feature contribute to a Group or Stage‚Äôs overall Direction?\nDoes the feature contribute to increasing a Category‚Äôs maturity?\nDoes the feature increase our ability to compete in the market?\nDoes the feature have considerable customer demand?\nDoes the feature represent a significant UX improvement?\nIf the answer to any of these is ‚Äúyes‚Äù, it is recommended that you coordinate with your Director, PMM, and Product Design counterpart to review the content block by the Thursday, 1 week before release. As the PM it is your responsibility to communicate what MRs need a review from the TWs, PMMs, Product Designers, and Directors as well as the MRs relative priority if you have multiple content block MRs that need reviews.\nMerging Content Block MRs\nEngineering Managers are the DRIs for merging these MRs when the feature is merged into the codebase itself. This allows all of the relevant parties (Product Managers, PMMs, Product Designers, Section Leads, Technical Writers) to have enough time to review the content without having to scramble or hold up engineering from releasing a feature.\nTo enable Engineering Managers to merge their feature blocks as soon as an issue has closed, please ensure all scheduled items you want to include in the release post have content blocks MRs created for them and have the\nReady\nlabel applied when content contribution and reviews are completed.\nReviewing, editing and updating merged content blocks\nAfter content block MRs are merged, they can be viewed on the\nPreview page\nand should be updated/edited via MRs to master up until the\nfinal merge deadline of the Thursday, 1 week before release\n. Starting on the Monday of release week, content block MRs should be viewed in the Review app of the release post branch after\nfinal content assembly\n, and updated/edited on the release post branch by coordinating with the Release Post Manager. From the\nrelease date\nforward you should view the content blocks\non the blog\n. It‚Äôs important to check this page after the content block MR is merged because this page is LIVE to users and should be error free.\nAdding, editing, or removing merged content blocks during release week\nAfter the content assembly starts on the Monday of\nrelease week\nand before the end of Tuesday of release week, adding any new or removing any merged release post items\nmust be coordinated with the Release Post Manager\n.\nThis is necessary to allow them to assess the impact on the release post and coordinate any necessary adjustments with the release post team (Tech Writer, PM, etc.). Failure to do so might result in your changes not being picked into the release post.\nBefore pinging the Release Post Manager, ask yourself if your content absolutely needs to be part of the current release post. At end-of-day on the Tuesday of release week, no late content blocks will be accepted.\nRequesting a late addition during release week\nPing the Release Post Manager (RPM) in\n#release-post\nto request adding a new late addition for the\nrelease post\n, and wait for the RPM to give confirmation to proceed. New late additions are release post items that were created after content assembly has already run. The Release Post Manager will do their best to accommodate the request, but it is not guaranteed.\nIf the RPM approves the late addition, then PM and RPM will proceed by:\nPM edits the release post item MR and updates the target branch to be on the release post\nrelease-X-Y\nbranch.\nrebases\nthe release post item MR on top of\nrelease-X-Y\nbranch.\nPM moves the RPI yml file and images from\n/data/release_posts/unreleased\nto\n/data/release_posts/x_y/\n.\nPM moves any images from\n/source/images/unreleased\nto\n/source/images/x_y/\nPM Ensure that the\nimage_url\nfield in the release post yml file points to the image file under\n/source/images/x_y/\n.\nPM requests a review of the release post item MR from the Release Post Manager and release post tech advisor. Quick action:\n/assign_reviewer RP-manager\nPM notifies release post team in the\n#X-Y-release-post\nSlack channel that the late addition has been requested with a link to the MR.\nThe MR can be approved and merged by the Release Post Manager.\nIf the feature is primary and you had not previously added it to\nfeatures.yml\n, you will need to create a second MR, branched from\nmaster\nto add the feature to\nfeatures.yml\n. (\nfeatures.yml\nshould be merged to\nmaster\n, not the release post branch).\nProcess for removing merged content blocks\nPing the Release Post Manager in Slack\n#release-post\nto notify them you need to remove an item already merged onto\nthe release X-Y\nbranch.\nEither the Release Post Manager or the PM, with approval from the Release Post Manager, will remove YAML and image files from the\nrelease X-Y\nbranch.\nThe PM will remove the feature from\nfeatures.yml\non master.\nAdding, editing, or removing merged content blocks after the release date\nYou can make changes to the\nrelease post\nafter it‚Äôs live to make edits to feature content blocks.\nTo edit a content block:\nFind and edit the relevant\n.yml\nfile in the correct subdirectory. For example, to add or edit the example Widgets feature to the 14.6 release post, create or edit the\ndata/release_posts/14_6/widgets_example.yml\nin an MR against\nmaster\n.\nTo remove the feature block, remove the file in your MR. Or to announce it in the next release post, move the file to the\ndata/release_posts/unreleased\nfolder.\nFor review and approval, assign the current cycle‚Äôs\nRelease Post Manager\na Reviewer.\nTo edit a deprecation, follow\nEditing a deprecation announcement entry\n.\nAccountability\nYou are responsible for the content you add to the blog post\n. Therefore,\nmake sure that:\nAll new features in this release are in the release post.\nAll the entries are correct, especially with regard to links to the documentation or feature pages (when available).\nFeature tier availability: all contain the\ncorrect entry\n.\nAll primary features are accompanied by their images.\nAll new and/or primary features are added to\ndata/features.yml\nwith a screenshot accompanying the feature (if the feature is visible in the UI)\n.\nAll images are optimized according to the\nimage guidelines\nand\nsmaller than 150KB.\nKeep in mind the\nfeatures.yml\nis the SSOT for displaying features across\nabout.gitlab.com\n.\nAll features should have a clear value driver.\nAs noted in the\nRelease Post Item template\n:\nMake it clear if a feature is\nnew\n, or is an improvement to an existing feature.\nMake sure your content is reasonably aligned with guidance in\nWriting about features\n.\nEnsure that titles use sentence case with feature and product names in capital case.\nWrite the description of every feature as you do to regular blog posts. Please write according to\nthe\nMarkdown guide\n.\n‚ö†Ô∏è Important\nMake sure to merge\nmaster\ninto the release post branch\nbefore\npushing changes\nto any existing file to avoid merge conflicts. Do not rebase,\ndo\ngit pull origin master\nthen\n:wq\n.\nPMs checklist\nOnce the PMs have included everything they‚Äôre accountable for, they should\ncheck their item\nin the release post MR description:\nBy checking your item, you will make it clear to the Release Post Manager that you have done your part in time (during the general contributions stage) and you‚Äôre waiting for review. If you don‚Äôt check it, it‚Äôs implicit that you didn‚Äôt finish your part in time, despite that‚Äôs the case or not.\nOnce all content is reviewed and complete, add the\nReady\nlabel and assign this issue to the Engineering Manager (EM). The EM is responsible for merging as soon as the implementing issue is deployed to GitLab.com, after which this content will appear on the GitLab.com Release page and can be included in the next release post. All release post items must be merged on or before the Thursday, 1 week before release. If a feature is not ready by the Thursday, 1 week before release deadline, the EM should push the release post item to the next milestone.\nNotes for PMs\nVacations\nIf you are on vacation before/during the release, fill all your items and create placeholders in the release post Yaml file for all the items you cannot add for whatever reason. To complete them, and to follow up with all the content you are responsible for, assign someone to take over for you and notify the Release Post Manager.\nReplies\nPlease respond to comments in the MR thread as soon as possible. We have a non-negotiable due date for release posts.\nDocumentation\nPlease add the\ndocumentation_link\nat the same time you add a content block to the release post. When you leave it to add it later, you will probably forget it, the reviewer will ping you later on during the review stage, and you will have little time to write, get your MR reviewed, approved, merged, and available in\nthe documentation\n.\nPMM Reviewers\nMessaging review\nEach PM is responsible for pinging their PMM counterpart when they need a review on the messaging for a Release Post Item MR or changes to\nfeatures.yml\n.\nLeave comments for the PMs on the items file in the MR. Make sure to comment in the diff on the line that you are referring to so that the PM has the context and comments can be resolved appropriately.\nSee\nwriting about features\nas a guideline for what feature descriptions show have.\nReview the messaging for these features look for these 5 elements:\nproblem/solution\n: Does this describe the user pain points (problem) as well as how the new feature removes the paint points (solves the problem)?\nshort/pithy\n: Is this communicated clearly with the fewest words possible?\ntone clarify\n: Is the language and sentence structure clear and grammatically correct? Is the text in the present tense, and is ‚Äúyou‚Äù used instead of ‚Äúuser.‚Äù\ntechnical clarity\n: Does the description of the feature make sense for various audiences, including folks who are not deeply familiar with GitLab?\nvalue driver\n: Does the feature help our users Increase Operational Effectiveness, Deliver Better Products Faster, or Reduce Security and Compliance Risk?\nTo understand the feature better look at the issue and MR for the feature, they are linked in the YAML. Sometimes the issue description will include the value prop. Read the comments in the issue and MR for the feature, often users and customers will chime in with why they want a feature and what pain the lack of the feature is causing.\nThe release post and\nfeatures.yml\ncan have the same or very similar content - e.g. same screen shot.\nThe tone of the release post is more about introducing the feature ‚Äúwe‚Äôre happy to ship XYZ‚Ä¶‚Äù\nThe tone of\nfeatures.yml\nshould be\nevergreen\nto appear on our website in various places.\nPMM Lead\nPMM lead is responsible for creating a release post highlight blurb for consumption by field and PR.\nThe tasks are included in the\nrelease post MR template\nand in the\nmonthly release post intro document\n.\nOn or before the third thursday of the month:\nCreate\nnew Product marketing\nissue with PMM-Release-Post template.\nCreate release highlights - 3-4 themes with description. Use this document to document your highlights\nUpdate the issue with the highlights\nUpdate highspot\nAdd the actual release post blog as a new piece of content in Highspot (Customer Outreach spot) (e.g.,\nrelease post\n)\nAdd this new release post on highspot to the\nGitLab Releases spot overview page\nin the GitLab Release Post section\nCreate a new pitch template for this release in Highspot (Company Pitch Templates spot) (e.g.,\npitch template\n)\nAdd this new pitch template to the\nGitLab Releases spot overview page\nin the Release Pitch Templates section\nFlag to comms to share in #sales\nShare with the PR and Field enablement team and tag release post manager.\nTW Lead\nNote\nTechnical writers review the individual release post items according\nto the\nstage/group they are assigned to\n.\nEach month, one of the technical writers is also responsible for the structural\ncheck of the final release post merge request. This section is about the latter.\nThe TW Lead is responsible for a final review of:\nRelease post top feature\nFor any identified issues, inform the\nTW reviewer\nto resolve as appropriate.\nRelease post primary features\nFor any identified issues, inform the\nTW reviewer\nto resolve as appropriate.\nFrontmatter check\nVerifying the deprecations and removals sections in the release post link to GitLab the corresponding pages in GitLab Docs.\nWhile individual TW reviewers and product managers have ultimate responsibility for the style and language of their release post items, including\ndeprecations, removals, breaking changes\n, and\nUpgrades\n, TW leads still have an overall responsibility to notify the Release Post Manager, the product managers and TW reviewers if style and language don‚Äôt seem reasonably consistent (things are obviously out of sync with known guidelines). But it is not the responsibility of the TW leads to\nfix\nstyle and language inconsistencies. However, TW leads\ndo\nhave the responsibility and ownership to make sure that all links in the release post point to relevant content and be fixed, if issues are found.\nConsideration: When communicating with your release post team, use the release post prep channel and organize discussions into threads to make it easier to track conversations. Also, review GitLab‚Äôs\neffective slack communication\nguidance.\nStructural check\nA technical writer, once assigned to the release post merge request, will check the syntax and the content structure.\nThe\nStructural check\nchecklist in the main release post merge request description\nwill guide them through the structural check.\nGiven that the technical writing review occurs in release post items'\nmerge requests, the purpose of the structural check is:\nReview the overall post for consistency. For example, if there‚Äôs an entry in a previous release post that deprecates an item called\nauth-server\nfor this date, raise questions if there‚Äôs also an entry that removes an item referred to as\nauth_server\n.\nMake sure the post renders well.\nThe content as a whole clearly describes the new features and feature improvements.\nCheck all the links work and are in place.\nCheck all content for syntax errors, typos and grammar mistakes, remove extra whitespace.\nVerify that the images look harmonic when scrolling through the page (for example, suppose that most of the images were screenshots taken of a large portion of the screen and one of them is super zoomed. This one should be ideally replaced with another that looks more like the rest of the images).\nThis should happen in the release post item review, but if there‚Äôs time, double-check documentation links and product tiers.\nMake sure the current release‚Äôs deprecations and removals also show up in the\ndeprecations doc\n.\nPay special attention to the release post Markdown file, which adds the introduction.\nReview the introduction briefly, but do not change the writing style nor the messaging;\nthese are owned by PMMs, so leave it to them to avoid unnecessary back-and-forths.\nMake sure feature descriptions make sense, anchors work fine, all internal links have\nthe relative path.\nNote\nThe introduction or other parts of the release post written may include links to external\nblog posts. These links may be broken until the Wednesday, day before release, but should still be flagged by the TW Lead\nduring the structural check so the Release Post Manager doesn‚Äôt miss coordinating\nwith authors of these external blogs to ensure they‚Äôre live before the release post blog goes live\non the\nrelease date\n.\nThe Release Post is considered a special blog post instance, so should adhere to the Marketing\neditorial team‚Äôs\nstyle guide\n.\nMaking changes\nUntil 8:00 am Pacific Time on the Monday of release week, the TW Lead should be able to make changes\ndirectly to the release post. After that time, anyone who wants to include a\nchange in the upcoming release may need to submit it in a separate MR, with a\ntarget of the\nrelease-X-Y\nbranch. For more information, see\nDevelop on a feature branch\n.\nFrontmatter\nIn its\nfrontmatter\n:\nLook for each entry as shown on the code block below.\nRemove any remaining HTML comments and unused blocks to clean up the file.\nCheck the\ntitle\nlength. The title should be short and deliver an easy-to-understand message Ensure the title fits nicely with the blog post‚Äôs title graphic. A general guideline for title length is about 60 to 70 characters.\n---\nrelease_number\n:\ntitle\n:\n\"GitLab X.Y Released with Feature A and Feature B\"\nauthor\n:\n\"Name Surname\"\nauthor_gitlab\n:\ngitlab.com-username\ncategories\n:\nreleases\nimage_title\n:\n'/images/X_Y/X_Y-cover-image.ext'\ndescription\n:\n\"GitLab X.Y Released with XXX, YYY, ZZZ, KKK, and much more!\"\ntwitter_image\n:\n'/images/X_Y/X_Y-cover-image.ext'\n# required - copy URL from image title section above\nlayout\n:\nrelease\nfeatured\n:\nyes\n# header_layout_dark: true #uncomment if the cover image is dark\n# release_number_dark: true #uncomment if you want a dark release number\n# release_number_image: \"/images/X_Y/X_Y-release-number-image.svg\" # uncomment if you want a svg image to replace the release number that normally overlays the background image\n---\nLayout:\nThe last two entries of the post‚Äôs frontmatter give the option for a\ndifferent layout. If you want to use a dark cover image, you‚Äôll need\nto uncomment\nheader_layout_dark: true\n.\nIf you want only the release number to be dark, uncomment\nrelease_number_dark: true\n.\nThese two variables work independently; you can assign either of them\nor both of them to the same post.\nVersioned documentation release\nWhen a new GitLab version is released\nevery month\n, the Technical Writer who completed the release post structural check for the previous milestone sets up the release of the published documentation for that version.\nFor instructions, see the GitLab docs\nmonthly release process\n.\nTW Reviewers\nNote\nTW reviewers should not be confused with the\nTW lead\n.\nEach person in the Technical Writing team is responsible for the review\nof each individual release post item and deprecation item that falls under their\nrespective stage/group\n.\nWhen the PM creates a release post item merge request, or\ncreates a deprecation announcement\n, they should assign it to the TW\nof their group for review (required). The process for TW reviews is described in the:\nRelease post item template\nDeprecation\nMR template\nUpdate the deprecations doc\nThe\ndeprecations\ndoc is generated with .yml files in\ngitlab/data/deprecations\n.\nThe html pages are not generated automatically. The TW assigned as the reviewer of the deprecation item must run a Rake task to compile the documents. They can also run a separate task to check that the docs are up to date.\nWhile the author of the deprecations MR is responsible for creating the content, they are not responsible for updating the doc.\nUpdating the docs:\nFrom the command line, navigate to your local clone of the\ngitlab-org/gitlab\nproject, and check out the MR‚Äôs branch.\nCompile the deprecation documentation\n.\nCommit the updated doc and push the changes.\nSet the MR to merge when the pipeline succeeds (or merge if the pipeline is already complete).\nDeprecation MRs must be merged by the Thursday, 1 week before release. If merged later, they might miss the code cutoff and won‚Äôt be included in the self-managed release‚Äôs docs.\nIf an entry needs to be edited,\nthe update process\nis similar.\nIf you run into problems running the Rake task, check\nthe troubleshooting steps\n.\nProduct Design Reviewers\nNote\nProduct Designers\nDRIs\nreview the individual release post items according to the\nstage/group each designer is assigned to\n.\nEach PM is responsible for pinging their Product Design counterpart when they need a review on the content or visuals within a release post.\nProduct Designers should collaborate on release post items and review:\n: Ensure that the messaging encapsulates how the item supports a user‚Äôs\nJob to be Done\n.\nMVC messaging\n: Articulate any design vision or future iterations if applicable. This is especially important when considering items that are\nunder construction\n, or contribute toward a Category‚Äôs maturity.\nArtifacts\n: Validate that UI elements (screenshots, GIFs) included in the post are up to date and reflect all design changes. Ensure that no mocks are used.\nEngineering Managers\nThe responsibilities of the Engineering Manager are documented in the\nEngineering Handbook\n.\nTechnical Advisors\nEach month, the Release Post Manager may need help with technical hurdles during the release post process. In order to provide the release post, which is a time-sensitive and highly visible asset for customers and users, with adequate technical advisement and support, we are piloting a partnership with the GitLab development team to leverage the\nDev Escalation process\nvia the Slack\n#dev-escalation\nchannel as an extension. This ensures that at all times, if something breaks that the release post team can not resolve themselves, they have access to technical experts for resolution. It is recommended that technical advisors review the documented\ntechnical aspects\nof the release post for reference, and the\nescalation process\n.\nPlease note that unlike other monthly volunteers of the release post, the technical advisor is not expected to follow the release post process at all times. The Release Post Manager will reach out to the technical advisor on call via Slack in the\n#dev-escalation\nchannel and then cross-post to the\n#release-post\nchannel for transparency that issues are being worked on. It is then expected that the technical advisor will respond to the Release Post Manager or release post DRI as soon as possible, including evenings/weekends, as the release post asks are often time sensitive,\nespecially between the Monday of release week and the\nrelease date\nof the month\n. The technical advisor is responsible for determining if further dev escalation should proceed.\nThe good news is that the release post technical hurdles are often reasonably easy to troubleshoot for technical experts, which is why we‚Äôre excited about this partnership!\nBelow are the types of problems the Release Post Managers may need help with.\nTriaging various\nautomations\nand\ntechnical aspects\nof the release post\nTriaging pipeline errors and suggest changes or provide a fix to related merge requests\nResolving merge conflicts with the release post\nIdentifying when to engage with other technical teams to resolve upstream problems\nGetting help during the Release Post Assembly\nRelease Post Manager\nShould you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in\n#dev-escalation\nchannel and cross-post in\n#release-post\nchannel to ask for help, and make others aware that there may be a delay in assembly.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution.\nTechnical Advisor\nWhat we have seen with previous challenges during the Release Post Assembly stage is some difficulty is encountered by the Release Post Manager because of a problem with their local development environment (Ruby setup, permissions, gems, etc.) or git conflicts. You should be familiar with git, Ruby, and the command line. There are a few resources that you can use to diagnose and resolve the issue at hand:\nReview the output of the assembly script including git status\nConsider running ./bin/doctor and review the output\nReference the\nlist of previous problems\nFollowing your best judgement with the resolution of the incident, record the diagnosis and the steps taken to resolve so that we can improve the release post process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nAutomation\nWe have introduced\nscheduled pipeline jobs\nthat you should familiarize yourself with:\nA task will run on the Monday, 3 weeks before relea of the month that creates the monthly release post, MRs, and Issues to kickoff the Release Post (\npipeline configuration\n;\nrake task\n)\nAt\n4 pm UTC (11 am ET / 8 am PT)\n, a task will run that performs content assembly (\nscheduled pipeline\n;\nrake task\n)\nGetting help during the Release Post Deployment\nRelease Post Manager\nShould you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in\n#dev-escalation\nchannel and cross-post in\n#release-post\nchannel to ask for help, and make others aware that there may be a delay in release post deployment.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution.\nTechnical Advisor\nThe Release Post Deployment is a critical and time-sensitive operation. Please respond thoughtfully and quickly.\nFollowing your best judgement with the following:\nFor minor incidents that can be recovered from your intervention alone or in concert with the Release Post Manager, do so while recording your diagnosis and the steps taken to resolve the incident so that we can improve the process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nFor major incidents that require immediate assistance from an SRE, developer on call, or other team members with increased access rights, create an issue and follow the\ndev escalation procedure\n. Record the diagnosis and the steps taken to resolve so that we can improve the process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective.\nIncident Response\nRelease post content assembly on the Monday of release week and release post deployment on the\nrelease date\nare time sensitive with multiple dependencies across various departments. GitLab team members often voluntarily go out of their way to assist with blockers found during these two time-sensitive procedures, but it can be confusing as to who is doing what to resolve an active blocking incident. Some procedural detail to our response efforts is shown below.\nResponse and Resolution SLOs\nDue to the time-sensitive nature of both key Release Post actions, assembly and deployment, the initial response time must be very quick, within 15 minutes. Incident resolution should also be as quick, within 60 minutes or less, if possible.\nThe Role of the Technical Advisor\nThe introduction of the technical advisor role is meant to be a coordinating role responding to blockers that occur along the way. They may work alone or in tandem with other volunteers to resolve the blocker as they see fit. They are also responsible for clearing the blocker, assembly of others, delegating response tasks including engaging in dev escalation.\nOwnership, Positive Control, and Intent\nThere should only be one owner of an incident at any given time. There must be clear understanding of who has control of actions to investigate and remedy the incident. Use positive exchange of control, that is pass control to another person who will now be in charge. The extreme example is from aviation where pilots exchange control in a manner like the following where you might hear ‚Äúyour airplane‚Äù to pass control followed by ‚Äúmy airplane‚Äù from the second pilot to accept control followed by the acknowledgement and release of control from the initiating pilot with ‚Äúyour airplane.‚Äù This avoids multiple people working at cross purposes from each other. Pilots operating an airplane is an extreme example, but it shows how to use clear language in your efforts to resolve the incident as to who is doing what. Only one person should be have control at a time. Similarly, the person taking action should declare their intent, ‚ÄúI‚Äôm going to merge master into the 13.8 release post branch and resolve any conflicts.‚Äù\nTimeline\nRelease Post Manager is blocked. Their initial attempts to get unblocked fails.\nRelease Post Manager joins\n#dev-escalation\n; mentions the Technical Advisor for this release detailing the nature of the blocker and its severity.\nTechnical Advisor acknowledges that they have seen the message and responds.\nTechnical Advisor creates a dedicated public Slack channel for communication around the incident like\nrelease-post-13.8-deploy-failure\n. That channel is then shared with\n#release-post\nfor others to follow along.\nBegin a Zoom call. Post the invitation to the Zoom room in the newly created Slack channel.\nTechnical Advisor assumes control from the Release Post Manager.\nInvestigation begins. Be as visible as possible, share your screen. Consider recording the Zoom session.\nAction taken.\nBlocker is resolved.\nClose Zoom.\nCollect screenshots, recordings, terminal history, comments in Slack, or other evidence on the issue.\nOpen a new issue to document the incident, deposit history, and add suggestions for corrective action or prevention. Link issue to the current release post retrospective.\nSee also:\nGoogle SRE Ch. 14\nManaging ongoing technical support tasks\nAnyone can contribute to technical issues that support the Release Post Process with the burden being mostly on the current volunteer tech advisor. The following outlines how to manage active and upcoming issues.\nTracking\nUse the\n~Release Post::Tech Advisor\nlabels for issues that require changes to the tools that facilitate the delivery of a release post. Create issues for lower priority challenges that arise during the milestone or as an artifact of decisions made during a retrospective. Creating an issue for immediate incident response isn‚Äôt required since the delivery of the release post requires quick resolution and synchronous communication.\nThis board\norganizes these labeled issues into a familiar software development workflow. When working on an issue, assign yourself and strive to keep the issue up-to-date with the proper workflow label and weekly async updates. Technical Advisors are welcome to make recommendations and apply milestones to the issues.\nHandoff\nIt‚Äôs unlikely that one technical advisor will serve in back-to-back milestones. Therefore, clearly communicating with the incoming technical advisor about the state of issues as part of release post retrospective and kickoff is a good idea. To do so:\ncreate a transition issue\nrecommend actions, prioritization, and milestones changes for any issues you are actively working\nunassign them from yourself and change the workflow label if you don‚Äôt plan on working on so it‚Äôs clear they need to be picked up\nafter your final rotation on the release post, reach out to the next tech advisor for a coffee chat to provide them with helpful information about any issues or bugs that are a priority for their upcoming cycle\nShould you prefer to continue to contribute to an issue under active development after your volunteer rotation, that‚Äôs great. In that situation, make it clear through assignments and issue updates that you will be the DRI.\nMonthly release blog post sections\nNotable Contributor\nFeatures\nTop feature\nPrimary features\nSecondary features (#secondary-features)\nIllustrations\n(screenshots, GIFs, or videos)\naccompanying their respective features\nUI improvements, performance improvements and bug fixes\nOmnibus improvements\n(added as a secondary feature)\nImportant notes on upgrading\n(optional)\nDeprecations and removals\nNotable Contributor\nThe Contributor Success team owns the process for nominating, selecting and adding the GitLab Notable Contributor (formerly MVP) for the release post. See the Contributor Success\nGitLab Notable Contributor Selection Process\n.\nThe Release Post Manager no longer has any Notable Contributor related tasks.\nFeatures\nThe most relevant features of the release are included in the post by\nproduct managers\n. Classify the feature according to its relevance and to where you want to place it in the blog post:\nTop feature\nThe top feature of the release is mentioned right after the Notable Contributor section, prior to other primary features. An image or video and documentation links are required. The\nTW lead\nwill pay close attention to the content of this item, as it is the ‚Äúheadline‚Äù feature for the release and it‚Äôs especially important to get it right.\nThe Release Post Manager will select a\ntop\nfeature. The following can be used as a guideline on which feature to select:\ntop\nfeature should:\nHave great user impact.\nAlign to the current FY product investment themes.\nCover all deployment types (.com, SM, and Dedicated).\ntop\nfeature can be:\nOnly for paid tiers (premium or ultimate only).\nBeta, but not\nexperimental\n.\nThe Release Post Manager will select a\ntop\nfeature and ask for feedback from the assigned VP of Product in #release-post together with reviewing the\nprimary\nfeatures. The Release Post Manager should incorparating feedback on any\ntop\nor\nprimary\nfeatures.\nTo specify the top feature, change\nprimary\nto\ntop\nin the selected feature‚Äôs release post item\n.yml\nfile:\nfeatures\n:\ntop\n:\nPrimary features\nFeatures with higher impact, displayed in rows after the top feature, with an image next to its text. An image accompanying the description is required. A\nvideo\ncan also be added to replace the image.\nAll release post\nprimary features\nshould be reviewed by the\nTW reviewer\n.\nTo identify the primary features, look for\nprimary\ndirectly beneath\nfeatures\nin the RP\n.yml\nfile:\nfeatures\n:\nprimary\n:\nSecondary features\nOther relevant improvements in GitLab that follow after top and primary features. Images or videos aren‚Äôt required, but are recommended. All release post Secondary features should be reviewed by the\nTW reviewer\n.\nIf the secondary feature is promoted to a primary feature, the PM or EM will be asked to supply an image on\nshort notice\n.\nTo identify the secondary features, look for\nsecondary\ndirectly beneath\nfeatures\nin the RP\n.yml\nfile:\nfeatures\n:\nsecondary\n:\nContent blocks\nNote:\n‚ÄúFeature blocks‚Äù are now known as content blocks, as there are many that are not just features. For example, we include upgrade warnings, Omnibus installer improvements, and performance enhancements.\nUse content blocks to add features or other content to the YAML data file. The layout will be applied automatically by Middleman‚Äôs\ntemplating system\n.\nContent blocks in the YAML data file contain the following entries, as exemplified below:\nfeatures\n:\nprimary\n:\n-\nname\n:\n\"Do great things with this feature\"\navailable_in\n:\n[\ncore, premium, ultimate]\ndocumentation_link\n:\n'https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html#multi-project-pipelines#multi-project-pipeline-visualization-premium'\nimage_url\n:\n'/images/topics/multi-project_pipelines.png'\nreporter\n:\nbikebilly\nstage\n:\nsecure\ncategories\n:\n-\n\"Application Security Testing\"\n-\nissue_url\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/1234'\ndescription\n:\nUse present tense, and speak about \"you\" instead of \"the user.\"\nDescribe how the new functionality is beneficial. Use phrases that start with, \"In previous versions of GitLab, you couldn't... Now you can...\"\n[Add another link](#link) if needed.\nDescription\nContent of the\ndescription\nshould adhere to the Marketing editorial team‚Äôs\nstyle guide\n.\nDo not include UI navigation instructions in the feature‚Äôs description. These instructions should be\ncontained in the relevant documentation.\nFeature priority\nThe second line of the content block should indicate whether the feature is a top, primary, or secondary feature. For primary features, use the\nprimary\nkey as shown in the\nsample content block above\n. For secondary features, replace the\nprimary\nkey with the word\nsecondary\nand for the top feature replace\nprimary\nwith\ntop\n.\nFeature name\nname\n: feature name, capitalized\nUse a short and strong name for all feature names.\nFeature Availability\nUse the following pattern to apply the correct badge to the feature (Free, Premium, Ultimate) and to specify any add-ons (Duo Pro, Duo Enterprise).\nSubscription tier\nFor the subscription tier where the feature is available, use\navailable_in\nwith:\nFor GitLab Free,\n[core, premium, ultimate]\nFor GitLab Premium,\n[premium, ultimate]\nFor GitLab Ultimate,\n[ultimate]\nImportant note\n: The GitLab Free tier is listed as\ncore\nin the data file. This is intentional and the page templates will apply the proper tier name on the frontend.\nOffering (GitLab.com or self-managed)\nFor features available on both self-managed and GitLab.com:\nUse\ngitlab_com: true\n, or do not include\ngitlab_com\nin the yaml file.\nFor features available on self-managed only:\nUse\ngitlab_com: false\n. For example:\navailable_in\n:\n[\npremium, ultimate]\ngitlab_com\n:\nfalse\nThis setting greys out the orange badges on the GitLab SaaS row.\nFor features available on GitLab.com only, use\navailable_in:\nwith:\nFor GitLab.com Free,\n[free, silver, gold]\nFor GitLab.com Silver,\n[silver, gold]\nFor GitLab.com Gold,\n[gold]\nYou can also mix the GitLab.com badges with the self-managed badges. However, for this to work, the\ngitlab_com\nvariable must be set to\nfalse\n:\navailable_in\n:\nFor availability in all tiers on GitLab.com and only Premium and Ultimate tiers on self-managed, use\n[free, silver, gold, premium, ultimate]\nand set\ngitlab_com: false\nFor availability in the Silver and Gold tiers on GitLab.com and all tiers on self-managed, use\n[core, premium, ultimate, silver, gold]\nand set\ngitlab_com: false\nFor availability in the Gold tier on GitLab.com and only Premium and Ultimate tiers on self-managed, use\n[premium, ultimate, gold]\nand set\ngitlab_com: false\nAdd-ons\nTo specify a subscription add-on, enter text in the\nadd_ons: [ ]\nfield.\nEach entry adds a badge. For Duo Pro and Duo Enterprise, specify both. For example:\nadd_ons\n:\n[\n\"Duo Pro\"\n,\n\"Duo Enterprise\"\n]\nIf only Duo Pro applies, use\nadd_ons: [\"Duo Pro\"]\n.\nFeatures behind flags\nFrom time to time a feature may be developed behind a feature flag and made\navailable slowly\nto larger audiences. If this is the case, do not include the item in the release post unless you are deliberately seeking beta testers. This may result in a feature issue being closed in a milestone earlier than it is announced.\nIf you are deliberately seeking beta tests, include the release post as well as instructions on how to enable the feature and provide feedback.\nDocumentation\nProvide a link to the\nupdated\ndocumentation for the feature. It is a required field.\nIt can be, in this priority order:\nfeature documentation\nlink, when available\nfeature-related documentation\nlink, when a dedicated doc is not available\nImportant\nAlways link to the EE documentation, even if the feature is available in CE.\nNote:\ndocumentation_text\nwas deprecated by\n!13283\nfor GitLab 11.2.\nImportant\nEvery feature mentioned on the release post must link to an\nup-to-date document shipped in time, before the feature freeze.\n‚ÄúDocs or it didn‚Äôt happen!‚Äù\nIllustration (images, videos)\nimage_url\n: link to the image which illustrates that feature.\nRequired for top and primary features, optional for secondary features.\nimage_noshadow: true\n: if an image (\nimage_url\n) already has shadow\nthe entry\nimage_noshadow\nwill remove the shadow applied with CSS by default. Optional.\nvideo\n: when present, overrides the image and displays the linked video instead. See the\nVideos\nsection for more information.\nCheck the section\nAdding Content\n>\nIllustrations\nfor more information.\nFeature reporter\nreporter\n: GitLab handle of the user adding the content block to\nthe release post (not the feature author).\nThis should be the PM responsible for the feature, so in the review\nphase anyone knows who they have to ping in order to get clarifications.\nIt is a required field.\nStage\nstage\n: the\nstage\nthe feature belongs to (lowercase):\nmanage\nplan\ncreate\nverify\npackage\nrelease\nconfigure\nmonitor\nsecure\nsoftware_supply_chain_security\nsystems\nThe stages display as an icon next to the product tiers‚Äô badges linking\nto the stage webpage using a regex:\nhttps://about.gitlab.com/stages-devops-lifecycle/<stage>/\n. We can\nalso override it with a\ncustom stage URL\n.\nAlthough\nstage\nis a required field, if a feature doesn‚Äôt\nbelong to any of the stages at all, you can delete the\nstage\nline and it won‚Äôt output anything.\nBesides displaying the icon, with\nstage\nset, PMs can easily\nfind anything that is related to their area, even if reported by\nother users.\nNote\nteam\nwas\ndeprecated\nin December 2018 for GitLab 11.6 in favor of\nstage\n, with a follow-up iteration\nintroducing their\nrespective icons\n.\nCustom stage URL\nFor stages outside of the DevOps lifecycle, such as\nGrowth, which don‚Äôt have the same path as the other stages\n(\n/stages-devops-lifecycle/<stage>\n), it is necessary to add\nthe\nstage_url\nto the content block to override the default path:\n# Growth\nstage\n:\ngrowth\nstage_url\n:\n'/handbook/product/growth/'\nCategories\ncategory\n(array): Any category(ies) the feature belongs to. These are usually attached\nto the feature‚Äôs issue as labels. A list of categories can be found in\n/data/categories.yml\n.\nMake sure to add the category\nname\nexactly as typed on the data file.\nRelated issue, epic, merge request, or webpage\nissue_url\n: link to the issue(s) on GitLab.com where the feature is discussed\nand developed. Using this link the reviewer can check the status of the specific\nfeature for consistency and additional references. Avoid linking to a confidential\nissue so the wider community can get context about the change.\nIt is a required field, but can be replaced with\nmr_url\n,\nissueboard_url\n, or\nepic_url\n.\nAlways wrap links in single quotes (\n'https://example.com'\n). Multiple links are allowed.\nissueboard_url\n: link to the issue board related to the feature. Not required, but available.\nmr_url\n: link to the MR that introduced the feature. Not required, but available.\nepic_url\n: link to the epic related to the feature. Not required, but available.\nwebpage_url\n: link to the marketing webpage for a given feature. Not required, but available.\nFeature description\n: add the feature‚Äôs description in this entry.\nMake sure your cursor is in the line below the pipeline symbol\nintended once.\nAll\ndescription\nfields fully support\nMarkdown\n, the only thing you need to be worried about is respecting the indentation.\nCover image license\nIf a cover image from a 3rd party is used, according to our\nBlog handbook\n, it‚Äôs necessary to provide the source of the cover image. Fill in the entry below to display this info at the very end of the\n...release.html.md\nblog post:\ncover_img\n:\nimage_url\n:\n'#link_to_original_image'\nlicence\n:\n# which licence the image is available with\nlicence_url\n:\n'#link_to_licence'\nIf the image is\ngenerated by GitLab\n, copyright info is not required and can be removed from the\n.html.md\nfile after setting\nrebrand_cover_img\nto\ntrue\n.\nImportant notes on upgrading\nTo be added by the Distribution Product Manager.\nNote\nThe ‚Äúupgrade barometer‚Äù section was\ndeprecated\non GitLab 11.8 and replaced with a section\ncalled ‚ÄúImportant notes on upgrading to GitLab X.Y‚Äù.\nUpgrade warnings should be added to the release post\nonly to describe important upgrade notes\n, such as:\nMigrations, post migrations, background migrations\nDowntime\nSpecial cases\nIf there‚Äôs no relevant info to a given release, do not add this section\nto the post.\nUI improvements, performance improvements, and bug fixes\nThe release post will link directly to closed issues or merge requests for the relevant milestone filtered by the following labels:\nBug fixes:\ntype::bug\nworkflow::complete\nworkflow::verification\nworkflow::production\nPerformance improvements:\nbug::performance\nworkflow::complete\nworkflow::verification\nworkflow::production\nUI improvements:\nUI polish\nBeautifying our UI\nUX Paper Cuts\nworkflow::verification\nand\nworkflow::production\nare being included while we adopt the\naddition of the\nworkflow::complete\nlabel\n.\nworkflow::complete\nis the desired label to indicate an issue is considered by users to be delivered.\nOmnibus improvements\nTo be added by the Distribution Product Manager.\nThis section should contain any relevant updates for packaged software, new features, and new commands relating to the administration of self-managed GitLab instances deployed using the Omnibus package e.g. (\ngitlab-backup\n).\nExtras\nTo be added by Product Managers and merged by Engineering Managers.\nIf you have an announcement that doesn‚Äôt quite fit the other content types, you can use the\nextras\ncontent block. If you think your announcement does fit this type, ping the Release Post Manager and\n@justin\nin\n#release-post\nfor guidance.\nAn example is provided in the\n/data/release_posts/unreleased/samples/extras.yml\nfile.\n---\nextras\n:\n-\ntitle\n:\n\"Example title\"\ndescription\n:\n# supports markdown\nDescription\nMultiple blocks:\nextras\n:\n-\ntitle\n:\n\"Example title one\"\ndescription\n:\n# supports markdown\nDescription one\n-\ntitle\n:\n\"Example title two\"\ndescription\n:\n# supports markdown\nDescription two\nApply the following labels to the MR:\nrelease post item\nrelease post\nrelease post item::extras\nFor review, select the\ntechnical writer\nassigned to the stage.\nWhen the MR is approved, add the\nReady\nlabel before merging.\nDeprecations, removals, and breaking changes\nDeprecation, removal, and breaking change announcements appear\nin GitLab Docs\nand in the release post of the announcement‚Äôs corresponding milestone.\nBefore making an announcement, review the\nbreaking changes, deprecations and removals guidance\nto ensure you:\nAre minimizing disruption for our customers.\nAre providing the required advance notice for workflow changes.\nHave\ndetermined if the change is a breaking change\n.\nMilestone due dates\nThursday, 3 weeks before release: Announcement MR has been created\nThursday, 1 week before release: MR has been assigned to a technical writer\nThursday, 1 week before release: MR has been merged\nWalkthrough video\nThis video will walk you through the process of making an announcement:\nDeprecations and other planned breaking change announcements\nTo be added by Product Managers or Engineering Managers and merged by Technical Writers at least 3 milestones ahead of the planned removal date.\nFor example, if the intended removal milestone is\n17.0\n, given the following release schedule:\n16.9, 16.10, 16.11, 17.0\n, then\n16.9\nis the third milestone preceding intended removal, and the last milestone for deprecation announcements.\nCreate a separate MR for each announcement.\nDo not edit the\nfeatures.yml\nfile until the feature has been removed from the product, or the breaking change has been implemented.\nIf you want to bundle multiple announcements in one MR, for example if it‚Äôs a group of dependent deprecations that will happen on the same date as ‚Äúall or none,‚Äù reach out and first discuss this with the Release Post Manager.\nCreating the announcement\nCreate a new branch in the\ngitlab-org/gitlab\nproject.\nCopy the\ntemplate file\nand save it in the\ndata/deprecations\nfolder.\nName the file\nXX-YY-feature-name.yml\n, where\nis the milestone of the initial announcement. For example,\n14-7-pseudonymizer-deprecation.yml\n.\nCreate a merge request using the\nDeprecations\nMR template for the change description.\nThe title must clearly explain the deprecation or planned change. For example:\n‚ÄúThe\nconfidential\nfield for a\nNote\nis deprecated.‚Äù\n‚ÄúThe maximum number of characters in a job name will be limited to 250.‚Äù\n‚ÄúAccess tokens with no expiration date will be changed to have an expiration of one year.‚Äù\n‚ÄúThe\nomniauth_crowd\ngem is deprecated.‚Äù\nThe description must:\nBe clear and concise.\nGive a brief explanation of the details or reasons for the change.\nThe description must also explain what the user must do as a result of the change. In other words, the entry\nmust\nbe\nactionable\nby users or admins. For example:\n‚ÄúUse the\ninternal\nkeyword instead of\nconfidential\n.‚Äù\n‚ÄúReduce the number of characters in all job names to be 250 characters or less.‚Äù\n‚ÄúGive an expiration date to any access tokens that have no expiration date.‚Äù\n‚ÄúStop using the\nomniauth_crowd\ngem. It will be removed and will not be replaced.‚Äù\nAvoid announcements like ‚ÄúFeature A is deprecated and will be removed. Wait until the replacement feature is released, and switch to it at that time.‚Äù\nIf the entry is not actionable, delay the deprecation or change announcement until there is an action available for users to address the change.\nAssign reviewers as recommended in the template.\nSet the\nbreaking_change\nvalue to\ntrue\nand add the\n~\"breaking change\"\nlabel to the MR. If the deprecation or planned change will not cause a breaking change (rare, but possible), use\nfalse\nand do not add the label.\nAssign the MR to the technical writer\nassigned to the stage\n.\nReviewing and merging the announcement\nThe TW Reviewer reviews the content, adds a commit that\nupdates the deprecations doc\n, and merges the MR by the Thursday, 1 week before release. After merging, the announcement will be visible on the\ndeprecations documentation page\nwithin an hour.\nIf the MR is at risk of missing the cut off date, open a duplicate MR and set the target branch to\nX-Y-stable-ee\nwhere\naligns with the version released\n. If you have trouble, ask for help in\n#mr-buddies\nor refer to the\nfull process for backporting an MR\n.\nAnnouncing an End of Support period\nThe\ndeprecation template\nprovides an option to end support for a feature prior to its removal. This option should only be used in special circumstances and is not recommended for general use. Most features should be deprecated and then removed.\nAn End of Support milestone must be at least 3 milestones\nafter\nthe deprecation announcement. For example, if the deprecation announcement is made in\n15.1\n, the End of Support milestone must be in\n15.4\nat the earliest. There is no requirement for the gap between the End of Support milestone and the Removal milestone.\nIf an End of Support milestone is announced, it will be displayed under the title of the deprecation announcement on the\nDeprecations page\n. End of Support milestones are not currently displayed in the release post.\nWhen to define an End of Support period\nIf there is a long period of time between the deprecation and the planned removal.\nIf supporting the feature during an extended deprecation period would affect engineering velocity (bloat, dependency management, etc.).\nCommunicating End of Support\nIf you decide to declare an End of Support period:\nCheck for any\nSupport Stable Counterpart\n(also listed on the\nproduct categories page\n) for your development group and tag them in the MR that adds a value to the\nend_of_support_milestone\n.\nIf your group does not have a Support Stable Counterpart, look for a stage or section Support Counterpart. If none, please post in the\n#support_leadership\nSlack channel with a link to the readiness issue (next line).\nPlease also open a Support Readiness issue\nfollowing the Support communications guidance\n.\nEditing an announcement entry\nThis process is very similar to creating an announcement entry, with the difference being that the YAML file already exists.\nTo edit an existing entry:\nCreate a new branch in the\ngitlab-org/gitlab\nproject.\nFind and edit the\n.yml\nfile in the\ndata/deprecations\ndirectory.\nCreate a merge request for the change, and use the\nDeprecations\nMR template for your change.\nAssign reviewers as recommended in the template.\nAssign the MR to the technical writer\nassigned to the stage\n. (By the Thursday, 1 week before release if revising an entry for the upcoming release)\nThe TW Reviewer reviews the content, adds a commit that\nupdates the docs\n, and merges the MR. (By the Thursday, 1 week before release)\nUpgrades\nTo be added by Product Managers or Engineering Managers and merged by Engineering Managers.\nDescribe any considerations administrators should have when upgrading to this version. These could be warnings about potential data loss, recommendations for maintenance beforehand, and other similar concerns.\nConsiderations for future upgrades should be noted in the\ndeprecations\nsections.\nOne notable example was in %12.10,\nwe required administrators to migrate from Postgres 10 to Postgres 11\n.\nUpgrade items go in the same directory as regular release post items. See the\nupgrade template\nto create an upgrade notice. Create one .yml file in the\n/data/release_posts/unreleased/\nfolder, using the following content block for each notice:\nupgrades\n:\n-\nreporter\n:\nbikebilly\n# item author username\ndescription\n:\n# example (supports markdown)\nLorem ipsum dolor sit amet, consectetur adipisicing elit.\nVeritatis, quisquam.\nApply the following labels to the MR:\nrelease post\nrelease post item\nrelease post item::upgrades\nFor review, select the\ntechnical writer\nassigned to the stage.\nWhen the MR is approved, add the\nReady\nlabel before merging.\nMajor releases\nMajor releases happen once a year and start a new versioning cycle: 14.0 - 14.10 ‚Äì> 15.0 and so on.  Contribution to and management of content for major releases follows the same schedule as\nmonthly releases\n. But for major releases, the Release Post Manager can expect some extra coordination and communication from the Social, PR, and Marketing teams, due to extra activities and needs for a major release. Additionally, during a major release, the Release Post Manager may need to support PM volunteers managing communication of removals that are breaking changes.\nCommunicating breaking changes\nProduct Operations will lead the communication of breaking changes for major releases as part of the release post. It is important the breaking changes be flagged for SaaS users prior to the rollout of the updates in the major version, so they are prepared and their workflow is not unexpectedly disrupted. Beginning as early as 3 milestones ahead of the major release, Product operations will start communictions/coordination for announcements and a\nbreaking changes blog\n. Starting as early as 2 milestones ahead of the major release, Product Operations we will use the\nbroadcast message feature\nto communicate upcoming breaking changes with SaaS users.\nProduct Operations initiates breaking changes communications when they‚Äôre assigned an\nautomated GitLab issue\n, with a task list and timeline. These communications rampup three minor releases before the major release. For example: if the major 15.0 release is planned for May 22, the communications rampup with the automated issue being generated  during release 14.8.\nAdding content\nFor entries that support Markdown, use regular\nMarkdown Kramdown\n, as we use for all blog posts and webpages on about.GitLab.com.\nIllustrations\nImages\nEach image should be compressed with\nImageOptim\n,\nTinyPNG\n, or similar tool. You can also try\nautomation tools like Hazel or Automator\nEach image should not surpass 150KB (300KB for cover\nimage), GIFs included\npngbot\nwill compress PNG images added in\nmerge request by converting each PNG to PNG 8 (8 bit, 256 colors) using\npngquant\nbefore losslessly compressing with\nzopflipng\n.\nApplication screenshots\n:\nMake sure that the application screenshot captures the feature to make it\nimmediately recognizable.\nInclude\nonly\nthe necessary UI context to allow the reader to identify where this\nfeature is available. Minimize empty space in a screenshot. You may need to make\nyour browser window smaller before taking the screenshot, to bring UI elements\ncloser together.\nCrop screenshots so that they are wide, not square, so that when they fill\nthe column width and do not take up large amounts of vertical space.\nAvoid resizing images. Ideally include the screenshot at native High DPI\n(Retina Display) resolution so that it is sharp when viewed on these displays\nReduce the number of colors in your screenshot using a quantizer like\nImageAlpha\n,\npngquant\n, or\nTinyPNG\n. Try reducing the number of colors to\nfewer than 256 colors (default) to increase savings. Small savings add up\nover many images.\nFinally compress your image using a lossless compression tool like\nImageOptim\n, or\nzopflipng\nto reduce the file size even\nfurther, saving an additional 5-20%.\nIn most instances it should be possible to reduce a PNG screenshot well\nbelow 100KB. Small savings on each image accumulate quickly and reduce the\npage load time significantly.\nScreenshots throughout the post should be harmonic and consistent in terms\nof their size and quality.\nAnimated GIFs\n:\nIf a GIF isn‚Äôt necessary, replace it with a static image (.png, .jpg)\nIf an animation is necessary but the GIF > 300KB, use a video instead\nCover image\n:\nCover images for 16.x releases have been created by the marketing team and can be found\nhere\nFor cover images after 16.x,\nraise a similar request\n.\nThis image should be eye-catching, inspiring and avoid images of people. The image should be landscape orientation, roughly 1920 x 1080, and no larger than 300 KB.\nTo test the image and see how it fits (without waiting for a build or running the handbook locally):\nNavigate to a previous release post\nUsing the web inspector find the element\n<div class=\"cover\" style=\"background-image: url();\">\nInside\nurl()\n, replace the string with the URL of the image (the actual URL of the image, you may need to right-click the image and select ‚Äúcopy image address‚Äù)\nHit the\nEnter\nkey and you should see the image render inside of your web browser\nImage shadow\n:\nwhen you add images though the text,\nmake sure all images have the class shadow applied:\n![image alt text](#img-url){:.shadow}\nIf the original image already has shadow applied, don‚Äôt use\n{:.shadow}\n.\nIf you‚Äôre inserting the image in the YAML file via\nimage_url\nentry, add the\nimage_noshadow: true\nentry\nright after\nimage_url\n.\nVideos\nYou can add videos to release post content blocks in two ways:\nBy using the\nvideo:\nentry in the content block\nBy including the video in the\ndescription:\nof the content block\nIn either case, the video must first be uploaded to\nGitLab‚Äôs Unfiltered YouTube channel\n.\nUploading videos to GitLab Unfiltered YouTube channel\nWhen adding videos to content blocks, it is important to ensure that the correct video URL is used and that the video‚Äôs visibility settings are set to ‚ÄúPublic‚Äù. Follow the steps below to properly prepare a video for inclusion in a content block.\nUpload the video to\nGitLab‚Äôs Unfiltered YouTube channel\nMake sure that the visibility settings are set to ‚ÄúPublic‚Äù.\nCopy the video URL and add /embed/ to it.\nReplace\nyoutube.com\nwith\nyoutube-nocookie.com\n. This is the URL you will use in the content block.\nFor example:\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ\nbecomes\nhttps://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\nReview the auto-generated captions for your video, and clean them up for accuracy. Machine-generated captions often mangle technical terms.\nAdding videos to content blocks\nIn the content block, use the entry\nvideo:\nfollowed by the video‚Äôs URL\nvideo: https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\nIf both a video and an image are present, the video will override the image and only the video will be displayed\nAdding videos to descriptions\nWhen adding videos to a content block description, it is important to use the correct markup to ensure that the video is displayed correctly.\nTo add a video to a description, wrap the video in a\nelement and add the class\nvideo_container\n. This assures that the video is displayed responsively. For example:\n-\nname\n:\n\"Awesome Feature\"\n...\ndescription\n:\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Quae, provident.\n<!-- Leave a blank line above and below the code below. Do not change the code block in any ways, except for the video URL. Leave the indentation as-is and do not remove the space prior to </iframe>. -->\n<figure class=\"video_container\">\n<iframe src=\"https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen=\"true\"> </iframe>\n</figure>\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Quae, provident.\nTechnical aspects\nThe release post is created from many small data files, that are rendered into the final form using templates and helpers.\nThe content files need to be created every release with the content unique to that release, as described by the section\ngetting started\n.\nGetting started\nThe template and helper files are used to render the blog post from the many content files, and do not need to be changed in most releases.\nTemplates:\nLayout (Haml) file\n:\ncreates a layout for the final HTML file, and requires the include file below.\nInclude (Haml) file\n:\nbuilds the content of the post applying custom styles. Its markup includes semantic SEO improvements.\nHelpers:\nHelper (Ruby) file\n: when the release post is being rendered, the helper combines all the release post items into a variable that is used by the include (Haml) file. The output of the helper is consistent with single data file process used until GitLab 12.8.\nContent:\nData (YAML) files\n: each contain the content for one feature, improvement, or deprecation. Data files are added to the\nunreleased\nor\ndata/deprecations\ndirectories, and then moved to a\nrelease\ndirectory. The purpose of the helper (Ruby) is to combine these files when rendering the release post.\nBlog post (Markdown) file\n: the blog post file holds the introduction of the blog post and frontmatter (\ntemplate\n,\nexample\n).\nTo learn more how the template system works, read through an overview on\nModern Static Site Generators\n.\nTo run the project locally:\nIn the terminal, go to the\nwww-gitlab-com\nproject. Depending where you cloned it:\ncd\n/path/to/www-gitlab-com\nInstall dependencies:\nbundle install\nyarn\nRun Middleman\n.\nSee the release post locally, using\nhttps://127.0.0.1:4567/\ninstead of\nhttps://about.gitlab.com/\n. For example,\nhttps://127.0.0.1:4567/releases/2021/09/22/gitlab-14-3-released/\n.\nFeature order\nImportant note: Feature order should not be changed without approval from the Release Post Manager.\nPrimary feature content blocks are sorted alphabetically by file name so if necessary, the ordering can be affected by adding a 2-digit numerical prefix to the file name of each individual content block. For example,\n01_filename.yml\n,\n02_another_file.yml\n, etc.\nSecondary features are first grouped by stage and within each stage sorted alphabetically by title. Features with no specified stage are grouped last. In release 13.10 and prior, bug fixes, performance improvements, and usability sections were also part of this automated sort order. Starting with release 13.11, bugs, performance improvement, and usability sections were changed from secondary features to tertiary features, so they now will automatically come after the secondary features and prior to the Deprecations Removals and Upgrades sections.\nSometimes, the height of the secondary features content will be much longer in the left or right column, resulting in white space. In that case, you can force a block of content from the left to the right or vice versa by adding a\nforce_left: true\nor\nforce_right: true\nto an entry‚Äôs yml file. (\nSee this MR as an example.\n)\nRelease post branch creation Rake task\nThe release post branch and most of the related directories, files, issues, and MRs are automatically created when\nrelease:start\nRake task\nautomatically runs on the Monday, 3 weeks before release.\nIf the script fails to run or there are pipeline issues, you can run\nbundle exec rake release:start\nyourself to make the following things happen:\nYou are asked for the GitLab version (for example, 13.10), and the release\npost date in ISO format (for example 2021-03-22). The script then reads those\ntwo values and uses them in the templates that are mentioned in the next steps.\nIf one of them is missing, the script stops and exits.\nThe branch name is set to\nrelease-X-Y\n, which is based on the version you\nprovided above.\nThe script checks if the release branch already exists. If it does, it\nstops and exits. You‚Äôll need to delete your local branch (\ngit branch -D release-X-Y\n)\nif you want to re-run the script.\nGit stashes your current changes, if any, checks out\nmaster\n, and pulls from\norigin\n(this should be the default remote pointing to the\ngitlab-com/www-gitlab-com\nrepo,\nyou can check with\ngit remote -v\n).\nThe script then creates the new release branch.\nThe\nintro\nis created by using the template under\ndoc/templates/blog/monthly_release_blog_template.html.md\n. It replaces the\nstub X.Y values with the version you provided in the first step and adds the author name and handle.\nThe data directory for the release is created under\ndata/release_posts/X_Y/\n.\nIf it exists, the script stops and exits. You‚Äôll need to delete this directory\nif you want to re-run the script.\nThe\nNotable Contributor (MVP) template\nis used to create the Notable Contributor (MVP) file (\ndata/release_posts/X_Y/mvp.yml\n).\nThe retro issue is generated and assigned using the\nRelease-Post-Retrospective template\nThe script performs a find and replace to update the following values in all of the MRs and Issues above using content from\ndata/release_post_managers.yml\n:\n@release_post_manager\n:\nmanager\n@tw_lead\n:\nstructural_check\n@tech_advisor\n:\ntechnical_advisor\n@pmm_lead\n:\nmessaging\nThe script performs a find and replace to update occurrences of\n,\nwith the appropriate values based on the current date and milestone.\nRelease post item generator\nThe\nrelease post item generator\nautomates the creation of release post items using issues and epics. Issues and epics are the source of truth for what problems are being solved and how, and should have a clear description, and be well labeled. The script uses this information to pre-fill release post item MRs:\nIssue/Epic element\nRelease Post Item Attribute (yml) or MR element\nIssue Title\ntitle:\nLabel\ndevops::\nstage:\nLabel\ngroup::\nassigns group product manager as reporter, and tags\nrelevant team members in the MR\nlabel\ncategory:\ncategories:\nLabel\nrelease post item::\n(\nprimary\n/\nsecondary\n)\ncontent block type\nprimary:\nor\nsecondary:\nLabel tier (e.g.\nGitLab Core\nGitLab Premium\nGitLab Ultimate\n)\navailable_in:\nIssue web url (i.e.\n/gitlab-org/gitlab/-/issues/####\n)\nissue_url:\nIssue description under\n### Release notes\ndescription:\nwill contain all text except for the\ndocumentation_link\nand\nimage_url\ndocumentation_link:\nis the first URL in the\n### Release notes\nsection containing\nhttps://docs.gitlab.com*\nimage_url:\nis the first image added to the\n### Release notes\nsection. (e.g.\nImage: ![name](/path/)\n)\nImportant note:\nGitLab Free tier is referenced as\ncore\nin the data file. This is intentional and the page templates will apply the proper tier name on the frontend.\nTo ensure the generator script runs correctly follow the process below:\nMake sure the issue is open.\nMake sure the issue is not confidential. If you need to link to a confidential issue you will need to manually create the Release Post Item Merge Request as the\nrelease post item generator\ndoes not currently create MRs from confidential issues.\nUpdate your issue or epic with content in\n### Release notes\n(including a docs link and image, although those can always be added/updated in the MR later) specifically having it contain both a\nDescription:\nthen a\nDocumentation:\n.\nMake sure there is only plain text in the content beneath\n### Release notes\n. If there is any additional formatting, the script will fail.\nMake sure\ndevops::\n,\ngroup::\n,\ncategory:\nand tier (e.g.\nGitLab Core\n) labels are applied\nApply one of the\nrelease post item::\nscoped labels. This will make the generator script pick up your issue next time it runs (once per hour)\nOnce the script runs a draft MR in the\n/gitlab-com/www-gitlab-com\nproject will be opened and assigned to the group PM. You can continue editing and reviewing that MR from there.\nIf you‚Äôd like to check to see when the last pipeline ran (and if it picked up your issue), you can inspect the scheduled pipeline\nhere\n.\nYou can also watch\nthis overview video\ndemonstrating how to use the\nrelease post item generator\n.\n*Note: If you find problems with the\nrelease post item generator\n, questions should be posted in Slack #release-post or add feedback to the release post retrospective issue, tagging the release post\ntechnical advisor\n.\nThe generator script can also be run on your computer.\nClone the\nwww-gitlab-com\nproject, and install dependencies using\nbundle install\nRun the script, providing your GitLab private access token, and the issue URL:\n=\n<token> bin/release-post-item --no-local <issue_url>\nRefer to\nbin/release-post-item --help\nfor complete documentation.\nRelease post item linting\nThe\nrelease post item linter\nvalidates all items being merged to the\ndata/release_posts/unreleased\ndirectory meet minimal\nstandards. Specifically, it checks:\nYAML can be parsed\nConformity to\nschema\nEach file contains exactly one item (e.g. feature or deprecation)\nContent blocks have valid fields\nDeprecations have valid fields\nThe\nstage\nfiled maps to a valid stage key in\ndata/stages.yml\nThe\ncategories\nlist only contains valid category names from\ndata/categories.yml\nIt does not check if:\ntop\nand\nprimary\nitems have an image or video\nissue_url\nis supplied, since there are other alternatives\nThe schema is implemented using\nRx\n.\nDeprecation rake task troubleshooting\nIf you have trouble running the rake task, you can check the following troubleshooting steps:\nVerify that your Ruby version matches the\ngitlab-org/gitlab\nproject‚Äôs Ruby version\n. You can check with\nruby -v\n. See more about\nsetting up a Ruby environment\n(MacOS only). You can also validate your setup by running\n./bin/doctor\nfrom the terminal.\nUpdate your gems by running\nbundle install\n.\nYour bundler version could be out of date, so you can try running\ngem install bundler:2.1.4\n.\nResolve merge conflicts in deprecations.md\nIf you rebase the branch of a deprecations or removals MR, there might be multiple merge conflicts in the\ndeprecations.md\nfile. Do not resolve individual\nmerge conflicts from your IDE. Instead, use the removals rake task to update the file and resolve the merge conflicts.\nTo resolve merge conflicts:\nIn the branch you checked out in the\ngitlab-org/gitlab\nproject, run the deprecations Rake task:\n# For deprecations\nbin/rake gitlab:docs:compile_deprecations\nStage your changes:\ngit add .\nContinue the rebase:\ngit rebase --continue\nIf you get merge conflicts after you continue the rebase, it‚Äôs possible that\ndeprecations.md\nis still out of date with\nthe latest changes in the\nyml\n. If this occurs, complete the steps again until you clear the merge conflict.\nRelease post merge request template\nThe\nrelease post MR template\nis our checklist for every release. Let‚Äôs keep it up-to-date! :)\nAdding deprecations and removals index to\nwww-gitlab-com\nIn order to display a list of deprecations and removals in the Release Post, an index must be generated from the\ngitlab\nproject and added to\ndata/release_posts/xx_y\nin the\nwww-gitlab-com\nproject.\nOpen a terminal in the\ngitlab\nproject\nRun\nbin/rake gitlab:docs:write_deprecations\nEnter the relevant milestone when prompted\nManually copy and paste the generated files into the corresponding\n/data/release_posts/xx_y\nin the\nwww-gitlab-com\nproject\nAdd\ndeprecations:\nto the first line of the deprecations index\nChange all instances of\nname:\nto\nfeature_name:\nin both files\nPatch and Security release posts\nThe Delivery team is responsible for creating release posts for\npatch\nand\nsecurity releases\n.\nRelease posts should live in\nsites/uncategorized/source/releases/posts\n. For patch and security releases,\nplease make sure to specify them in the title, add the correct\ncategory\n:\nPatch releases:\ntitle: \"GitLab Patch Release: x.y.z and x.y.z\"\ncategories: releases\nSecurity releases:\ntitle: \"GitLab Security Release: x.y.z and x.y.z\"\ncategories: releases\nCreating an MR for What‚Äôs New entries\nVideo walkthrough of the process\n‚ÄúWhat‚Äôs new‚Äù can be seen by clicking on the\n?\nicon in the navigation menu of GitLab and choosing ‚ÄúWhat‚Äôs new.‚Äù\nThe What‚Äôs New MR will be initiated by the Release Post Manager on the Tuesday of release week, finalized on the Wednesday of release week, and typically get merged by a\nmaintainer\n2 to 4 hours AFTER the release post is live on the\nrelease date\n. The exact timing of the merge depends on the availability of a\nmaintainer\nto merge it**\nOn the Tuesday of release week, the Release Post Manager creates the What‚Äôs New MR.\nThe RPM will pull all of the final/approved primary items in the release post to feature in  ‚ÄúWhat‚Äôs New‚Äù\nThe selected items can but do not have to align with the primary features of the release post. If the RPM feels comfortable making a unique selection, they may do so.\nIt is recommended to strive for a balance of features available to both free and paid users. If we only include Ultimate features, non-Ultimate users may stop engaging.\nThe Release Post Manager will create a new MR in the\ngitlab.com/gitlab-org/gitlab\nproject\nUse this\ntemplate\nto create a new file in the\ngitlab/data/whats_new\ndirectory.\nTitle the file as\nYYYYMMDD0001_XX_YY.yml\n- for example, the 13.4 entry is titled\n202009300001_13_04.yml\n.\nUsing the content that is in the release post items, duplicate the content for What‚Äôs New.\nSometimes it is necessary to trim down the description. Keep in mind that these should be short, and generally a single paragraph.\nSaaS-only features need to use\n[free, premium, ultimate]\nin the What‚Äôs New MR instead of\n[free, silver, gold]\nor\ncore\nas is used in the release post items. We will streamline this discrepancy in the future, but for now, the RPM should update the values as necessary when creating the What‚Äôs New MR.\nStage names are case-sensitive, so be sure that the stages are capitalized in order for the pipeline to pass.\nImages are not required, but encouraged when possible.\nFor videos, you will need to provide an image. For YouTube videos, you can use the image URL, which can be found by inserting the youtube unique ID into this format:\nhttps://img.youtube.com/vi/[insert-youtube-video-id-here]/hqdefault.jpg\n. For cases where a video thumbnail doesn‚Äôt look great, consider using a generic image from\nthe\nsource/images/growth\ndirectory\n.\nImages will end up at a URL like\nhttps://about.gitlab.com/images/X_Y/XXXXXXX.XXX\nMake sure you provide a full URL for the YAML entry. Ex:\nhttps://about.gitlab.com/images/13_7/reviewers_sidebar.png\n.\nIf an image is not available, you can use a generic image (ex:\nhttps://about.gitlab.com/images/ci/gitlab-ci-cd-logo_2x.png\n) or omit the image_url.\nBefore committing the MR,\ncheck the YAML with a validator\n.\nAdd the ~‚Äúdocumentation‚Äù label.\nApply the affiliated release\nmilestone\n(it‚Äôs ok if it says ‚Äúexpired‚Äù) and labels\nwhats new\nand\nrelease post\n.\nOn the Tuesday of release week, when the MR is ready for review, assign\n@[name of PLT member who is reviewing this month]\nas reviewer and\n@mention\nthem in the MR to complete their review by the Wednesday of release week. The name of the PLT member who is reviewing this month can be found on the\nrelease post scheduling page\nAfter the release post is live and you have verified the images load locally in GDK by pulling down the What‚Äôs New branch, have the MR reviewed following our standard\ncode review process\nand have it merged by a\nmaintainer\n. It is recommended to communicate directly to the maintainer that the MR is time sensitive to avoid unnecessary delays.\nOpen a duplicate MR and set the target branch to\nX-Y-stable-ee\nwhere\naligns with the version released\n. Assign it to the same maintainer that merged the previous MR. This second MR ensures that any additional releases to version\ninclude this ‚ÄúWhat‚Äôs New‚Äù update. If you have trouble, ask for help in\n#mr-buddies\nor refer to the\nfull process for backporting an MR\n.\nIMPORTANT: The MR should not be merged until after the release post is live on the\nrelease date\nor the images will not display.\nAfter the release post is live, but before merging, the branch should be checked out and the content checked in GDK to make sure that all images are displaying, links are accurate, and that the What‚Äôs New items are part of the final release post. Only once those are confirmed should the MR be merged. Typically this means the What‚Äôs New content will be live on the day or two after the\nrelease date\n, depending on maintainer reviews.\nRelated\nPages\nGitLab the product\nGeneral guidance on deprecations, remvoals and breaking changes\nRelease Post volunteer schedule\nSecurity and monthly releases\nFeatures per release\nGitLab CE and GitLab EE changelog\nRelease managers\nTemplates\nMonthly release post MR template\nRelease post item MR template\nDeprecation issue template\nDeprecation MR template\nRelease Post retrospective issue template\nYML content block samples\nPatch release template\nSecurity release template\nManual Release Post Kickoff\nGuidelines to for manually kicking off the Release Post\nRelease Post Scheduling\nA list of managers and other assignees for scheduled GitLab release posts.\nLast modified July 15, 2025:\nRemoves instruction to link to EE version of docs (\neb338fcf\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 17474}
{"doc_id": "1051fbc2ecb2136c", "url": "https://handbook.gitlab.com/handbook/company/family-and-friends-day", "title": "Family and Friends Day | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nFamily and Friends Day\nAt GitLab, Family & Friends days are shared days away from work to prioritize time with family and friends, volunteering, self-care, or anything else.\nWhat is a Family and Friends Day?\nWe started our Family & Friends day benefit in early 2020 to help team members cope with the COVID-19 pandemic. We planned to continue Family & Friends days for as long as the majority of the world was dealing with the pandemic. While the World Health Organization declared an\nend to the COVID-19 global health emergency\nin early 2023, we have maintained Family & Friends days as a team member benefit with different iterations each fiscal year.\nTeam members are encouraged to share about their Family and Friends day in the\n#family-and-friends-day\nSlack channel after the event, or publicly on social media such as Twitter, LinkedIn, or wherever they‚Äôre most comfortable using the hashtag #FamilyFriends1st. Sharing is optional. Taking the day off is strongly encouraged if your role allows it.\nFY'26 Family and Friends Days\nIn FY25, we chose one day a quarter to recognize a Family & Friends day. In FY26, we plan to consolidate those 4 Family & Friends days near the end of the calendar year. Keeping our Friends & Family day benefit at a time when our customers are often away from work, and during a quieter time in the year, will allow us to best serve our customers and meet our business objectives.\nThe proposed dates for FY26 Family & Friends days are:\n2025-12-26\n2025-12-29\n2025-12-30\n2025-12-31\nFamily & Friends days will be automatically loaded into Workday by end of Q1FY26, for all team members, so there‚Äôs no need for team members to enter them manually.\nIn countries where a Family & Friends day falls on a public holiday, team members are encouraged to\nutilize their public holiday on another day\n, keeping in mind that the public holiday accrual balance needs to be used within the same calendar year.\nFor example, if the Family & Friends day on 2025-12-26 is a public holiday in your country, create a new absence request in Workday for the public holiday on another day\nwithin the same calendar year\n, such as 2025-12-24, by selecting\nType of Absence > Time Offs > Public Holiday\n, and add a note that you are using your public holiday on this day because 2025-12-26 is a public holiday in your location which falls on one of GitLab‚Äôs Family & Friends days.\nIn Israel, Family & Friends days will be adjusted to 2025-12-28, 2025-12-29, 2025-12-30, and 2025-12-31.\nAs with years past, team members in roles that require them to work on a date designated as a Family & Friends day can work with their manager to find an alternative day. Team members in roles that require them to work on a date designated as a Family & Friends day will be able to request the alternative(s) day in Workday (or via the Workday link in Slack).\nChoose a day that works best for your manager and your team. Please note: The alternative date should be within 30 days (before or after) of the scheduled Family & Friends day.\nLog into Workday and request time off using the category ‚ÄúTime Off in Lieu‚Äù, reason ‚ÄúFamily and Friends Day‚Äù.\nIn the comments section, please note: ‚ÄúIn lieu of Family and Friends Day on XXX‚Äù.\nThis will route to your manager for approval.\nContact the Absence Management team via HelpLab (People > Absence menu) if you need further assistance or have questions.\nFY'25 Family and Friends Days\nIn FY'25, the dates for Family & Friends Day were:\n2024-04-05\n2024-06-14\n2024-09-13\n2024-12-23\nFY'24 Family and Friends Days\n2023-09-22\n2023-10-06\n2023-11-27\n2023-12-29\n2024-01-12\nWe will look at scheduling future dates pending the global COVID-19 situation. Because we are living in unprecedented times and are trying to give our Team Members some extra space in their lives outside of work. In line with our\nPaid Time Off\npolicy, we encourage GitLab Team Members to continue to take additional days off, as needed. Family and Friends Day is a reminder to do this.\nPast Family and Friends Days\nFamily and Friends Days have been held on these dates:\n2020-05-01\n2020-06-12\n2020-08-14\n2020-10-09\n2020-11-25\n2020-12-18\n2021-01-15\n2021-02-26\n2021-03-19\n2021-04-16\n2021-05-28\n2021-06-25\n2021-07-16\n2021-08-27\n2021-09-24\n2021-10-15\n2021-11-29\n2021-12-27\n2022-01-03\n2022-02-25\n2022-03-25\n2022-04-11\n2022-05-27\n2022-06-24\n2022-07-11\n2022-08-29\n2022-09-26\n2022-10-07\n2022-11-18\n2022-12-30\n2023-01-13\n2023-02-27\n2023-03-24\n2023-04-17\n2023-05-26\n2023-06-23\n2023-07-03\n2023-08-25\nFAQ about Family and Friends Day\nWho determines upcoming Family and Friends Days?\nAny GitLab team member is able to propose a Family and Friends Day. If there are no proposals from a GitLab Team Member, the Total Rewards Team will propose a day for\nE-group\napproval. To propose a Family and Friends Day please follow the steps outlined below:\nReview the\nGitLab Team Meetings calendar\nfor major conflicts, review major holidays, and avoid the end of the quarter to ensure our Sales team can participate before determining a date proposal.\nSubmit a merge request to modify the\nUpcoming Family and Friends Days\nsection of this page with the date of your Family and Friends Day proposal.\nPost the MR in the\n#e-group\nSlack channel and\n@mention\nthe\n@exec-group\nand\n@exec-admins\nfor feedback.\nIf feedback is positive, assign the MR to our Chief People Officer, Wendy Barnes.\nOnce the Merge Request is approved, the Total Rewards team will announce the Family & Friends day on the\n#whats-happening-at-gitlab\nSlack Channel. The Total Rewards team will post upcoming Family and Friends Days on the\nGitLab Team Meeting\nGoogle calendar.\nI‚Äôm in a role which requires me to work that day. How can I still benefit from this initiative?\nIf you are in a role that requires you to work or your team has other coverage requirements on Family and Friends Day (for example,\nCustomer Support\n), you can work with your manager to find an alternative day. We encourage you to consider the following business day as the preferred second choice for a day away, but do what works best for you and your team.\nWhat if the date is a public holiday or non-working day in my country? How does this apply to me?\nWe encourage you to take off the next working day. If this day isn‚Äôt an option, work with your manager to find another day that works for you and your team.\nHow is this any different than our vacation policy?\nNothing about our\nPaid Time Off\npolicy is changing. We wanted to designate a specific day in order to more proactively force a pause for team members. If most of the company isn‚Äôt working, there is less pressure for you to do so.\nWhat about client or prospect meetings that conflict?\nIf you feel that this meeting can be rescheduled without any setbacks to the business, please go ahead and do so. If you have a meeting that would be hard to reschedule or would jeopardize the business results, please work with your manager to find another day that would work for both you and your team.\nWhat if I‚Äôm out sick on either of those days?\nFeel better! Please work with your manager to find another day that works for you and your team.\nCan I choose to take a different day off for Family and Friends Day that is more convenient for me?\nUnless in circumstances described above (e.g., role requires you to work on a Family and Friends Day, the designated day falls on a non-working day), team members that want to benefit from Family and Friends Day should take the designated day off. This provides\ndifferent benefits from a regular PTO day\n.\nIf you‚Äôd like to take a different day off for personal reasons, refer to the\nPaid Time Off\npolicy.\nHow do I communicate that I‚Äôm off that day?\nWe‚Äôll assume that most people are off on Family and Friends Day, but we know that some people will take other days.\nPlease enter the date in Workday by selecting the\nFamily and Friends Day\noption in the\nTime Offs\ndrop down list.\nFeel free to block your calendar with ‚ÄúFamily and Friends Day‚Äù to share whatever day you take.\nLast modified May 29, 2025:\nUpdate file family-and-friends-day.md - additional guidance on HelpLab (\n51342ba9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1397}
{"doc_id": "9bfbcf778c1dc09f", "url": "https://handbook.gitlab.com/handbook/company/working-groups/frontend-vision", "title": "Frontend Vision Group | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nWorking Groups\nFrontend Vision Group\nWrite guidelines about frontend architecture practices we want to have on GitLab frontend in three years\nAttributes\nProperty\nValue\nDate Created\n2023-03-27\nTarget End Date\nSlack\n#wg_frontend-vision (only accessible from within the company)\nGoogle Doc\nAgenda\n(only accessible from within the company)\nOverview & Status\nSee\nExit Criteria Progress\nContext\nCurrently, our frontend development guidelines only document features and practices\nwe are currently using in production\n. There is no clear documentation about what we see as a desired state of the frontend at GitLab, nor guidelines regarding practices we plan to deprecate. It would be nice to define a set of high-level expectations regarding frontend architecture, tech stack, and best practices as we see them in the scope of three years from now. Here is a non-exhaustive list of topics we should discuss:\nSingle-Page Application vs Multi-Page Application vs hybrid approach (multiple SPA‚Äôs that handle some functionality).\nServer-Side rendering\nTechnical stack (frontend framework, state management approach, testing levels and tools)\nReal-time features, optimistic updates, frontend caching and ‚Äúsnappy GitLab experience‚Äù overall\nException process when certain group requires the tool that deviates from the main strategy\nExit Criteria\nUpdates are being tracked every other week within\nhttps://gitlab.com/gitlab-org/gitlab/-/issues/419576\n.\nAdd introduction page to frontend documentation, explaining direction and high-level overview of the frontend codebase/architecture.\nInclude evolution of codebase over three year horizon.\nList frontend technologies used and the design principals that guide the frontend team‚Äôs work.\nExplicitely define deprecation/removal plans, including why these features are being deprecated.\nCommunicate outcome to the broader frontend functional group.\nDiscuss and document communication plan, including frequency of updates from working group.\nDocument the requirements for reusable components outside of GitLab UI.\nDetermine DRIs around specific parts of frontend documentation.\nDetermine how the exception to the main strategy process will work, and if there is a need for a separate area for ‚Äúwild‚Äù ideas.\nDetermine evaluation and decision-making process for RFCs.\nExit Criteria Progress\nCriteria\nStart Date\nCompleted Date\nProgress\nAdd introduction page to frontend documentation, explaining direction and high-level overview of the frontend codebase/architecture.\n2023-06-28\n100%\n@f_caplette\nInclude evolution of codebase over a three-year horizon.\n@ntepluhina\nList frontend technologies used and the design principles that guide the frontend team‚Äôs work.\n@leipert\nExplicitly define deprecation/removal plans, including why these features are being deprecated.\nCommunicate outcome to the broader frontend functional group.\n@donaldcook\nDiscuss and document communication plan, including the frequency of updates from the working group.\n2023-08-07\n100%\n@donaldcook\nDocument the requirements for reusable components outside of GitLab UI.\n@pslaughter\nDetermine DRIs around specific parts of frontend documentation.\n@andrei.zubov\nDetermine how the exception to the main strategy process will work, and if there is a need for a separate area for ‚Äúwild‚Äù ideas.\n@ntepluhina\nDetermine the evaluation and decision-making process for RFCs.\n@f_caplette\nRoles and Responsibilities\nWorking Group Role\nPerson\nTitle\nExecutive Sponsor\nChristopher Lefelhocz\nVP of Development (Delegating to Tim Zallmann)\nExecutive Sponsor\nTim Zallmann\nSenior Director of Engineering\nFacilitator\nDonald Cook\nEngineering Manager, Plan:Project Management\nFunctional Lead\nNatalia Tepluhina\nPrincipal Engineer, Plan\nMember\nVitaly Slobodin\nStaff Frontend Engineer, Fulfillment\nMember\nPaul Slaughter\nStaff Frontend Engineer, Create:Remote Development\nMember\nMark Florian\nStaff Frontend Engineer, Manage:Foundations\nMember\nLukas Eipert\nSenior Frontend Engineer, Manage:Foundations\nMember\nFr√©d√©ric Caplette\nSenior Frontend Engineer, Verify:Pipeline Authoring\nMember\nAndrei Zubov\nSenior Frontend Engineer, Release\nMember\nStanislav Lashmanov\nSenior Frontend Engineer, Create:Source Code\nMember\nFlorie Guibert\nSenior Frontend Engineer, Plan:Product planning\nMember\nPaul Gascou-Vaillancourt\nSenior Frontend Engineer, Manage:Foundations\nLast modified July 13, 2024:\nRenaming to Remote Development group with Workspace and WebIDE categories (\n5f7de70f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 599}
{"doc_id": "52d0796688b3b6c6", "url": "https://handbook.gitlab.com/handbook/marketing/corporate-communications", "title": "Corporate Communications Handbook | The GitLab Handbook", "text": "The Handbook\nMarketing\nCorporate Communications Handbook\nMission Statement, What We do, Team Norms, Contact Info and Resources for Corporate Communications at GitLab\nWelcome to the Corporate Communications Handbook\nMission Statement\nWe serve as strategic advisors to GitLab executives and cross-functional teams on issues that impact team members, customers, partners, and other business-critical parties.\nWe exist to positively influence the perception of GitLab by reaching economic buyers, technical champions, community contributors, advocates, investors, and industry analysts. We do this by developing and implementing strategic external communications plans that protect the brand, and generate awareness and preference for GitLab.\nThis page is the single source of truth for corporate communications objectives/goals, contact information, messaging, PR/social media guidelines, approval processes, strategy and more.\nWhat We Do\nThe GitLab Corporate Communications team is responsible for the following activities and communications channels:\nMedia relations (print/broadcast/podcasts)\nMedia sponsorships\nContributed article placement\nExecutive visibility\nAwards\nIncident Communications\n(separate handbook page)\nTeam Norms\nCelebrate individual wins, along with team wins\nSupport each other professionally and personally\nHold each other to a high standard\nWe have short toes and welcome collaboration, feedback, and feedforward\nWe strive for excellence\nContacting GitLab‚Äôs Corporate Communications team\nPlease use the\n#external-comms\nSlack channel.\nSpeaking on behalf of GitLab\nSpeaking on behalf of GitLab via a public channel such as a media interview (in-person or via phone), on a podcast, in a public issue on GitLab.com, on a forum, at a conference/event (live or virtual), in a blog or an external platform requires prior approval by the Comms team and must follow GitLab‚Äôs SAFE framework. To make a request, please use the\n#external-comms\nSlack channel.\nSpokesperson Criteria\nBeing a designated company spokesperson is a responsibility that should be taken with the utmost seriousness.\nSpokesperson Criteria:\nSubject matter expert\nBusiness requirement for your expertise\nApproved by Comms as a spokesperson\nTrained by GitLab media trainer\nManager approval\nGood company standing\nIf you are new to being a spokesperson for GitLab, the Corporate Communications team may ask you for video examples of past speaking engagements (events, webinars, tutorials, etc.) for assessment.\nMedia mentions, incoming media requests and interviews (including podcasts)\nTeam members may be approached by reporters, podcasts hosts, etc. to comment on the company and/or conduct interviews. If you are asked to be quoted or to provide commentary on any matter as a spokesperson of GitLab, please provide detail of the opportunity to the Corporate Communications team in the\n#external-comms\nSlack channel before engaging.\nWhile team members may have established relationships with reporters, podcast hosts, etc., engagement on any matter related to GitLab should go through the Corporate Communications team. You can reach the team in the\n#external-comms\nSlack channel before engaging.\nSpeaking Opportunities (conferences, meetups, webinars and other events)\nDeveloper Relations Speakers Bureau\nThe Developer Relations Speakers Bureau includes GitLab team members who participate in community/user meetups and deliver technical talks. Participation in the Developer Relations Speakers Bureau is distinct from media and analyst relations overseen by the Corporate Communications team.\nInvited to Speak\nIf you are asked to speak on behalf of GitLab at an event, on a webinar or at a Meetup, please contact the Corporate Communications and Developer Relations teams to ensure that the opportunity aligns with GitLab objectives and key narratives.\nInquiries should be initiated in the\n#external-comms\nSlack channel before you accept the speaking invitation.\nPlease allow 5 business days for evaluation. Opening an issue under Corporate Marketing to further collaborate on the opportunity may be requested.\nSubmitting to Speak\nIf you are planning to submit an event CFP or request to participate as a speaker for a webinar or Meetup, please ensure the opportunity aligns with GitLab objectives and key narratives. If you are unsure, please reach out to the Corporate Communications and Developer Relations teams. If accepted to speak, please notify the Corporate Communications and Developer Relations teams via the\n#cfp\nSlack channel w/link to the accompanying issue and ensure the teams have 7-10 business days to review your final presentations.\nPursuing Speaking Opportunities Separate from GitLab\nWe know GitLab team members are multi-faceted, and there may be opportunities to speak publicly that don‚Äôt overlap with your role at GitLab. In these cases, it is okay to do that, assuming the opportunity will not be in conflict with\nGitLab‚Äôs Code of Business Conduct & Ethics\n.\nIn these instances, it‚Äôs necessary to keep your role at GitLab and affiliation with the company separate from the presentation. Additionally, you should not use GitLab branding, resources, or time allocated to your work at GitLab to prepare or deliver your presentation. Please add\nthese views are my own\nto your comments, presentation, or social media.\nIf you‚Äôre considering a speaking opportunity, which includes participating in podcasts or developing your podcast, that could be perceived as being associated with GitLab even if it is not; please share the opportunity with your manager and #external-comms for review before accepting it to avoid any potential conflicts.\nEvent Booth Staffing\nIf you are staffing the GitLab booth at an in-person or virtual event, you are representing GitLab. Please follow the company‚Äôs SAFE framework when engaging with booth visitors and event attendees.\nEvent Support Requests\nThe PR team supports corporate-sponsored industry shows such as RSA, Black Hat, KubeCon NA, Google Cloud Next, and AWS re:Invent, where we make announcements and/or an e-group member attends.\nOur media strategy focuses on technology publications, business media, and vertical media only if we have a brand-name customer who will speak to the press or a product announcement tied to a vertical.\nThe full criteria for PR support at events includes:\nSpokesperson Availability:\nAn e-group member or designated delegate is confirmed to be onsite and available for interviews.\nGeographic Alignment:\nThe event is held in a country or region the corporate communications team currently supports (US, UK, Germany, France, Japan, Australia).\nMedia Presence:\nAt least three journalists from GitLab Top Media will be present at the event.\nNews Hook:\nThe event aligns with a compelling news hook related to a product announcement, significant partnership, or major industry trend for media or analysts in attendance.\nAdditional considerations include:\nCustomer Availability:\nAt least one customer approved to speak with the media on behalf of their brand about their GitLab experience is confirmed to attend. Customer contact information must be provided to the PR team 6 weeks in advance.\nAnalyst Alignment:\nAt least three analysts covering GitLab‚Äôs primary markets will be present at external events.\nVertical Industry Support Requests\nGitLab Corporate Communications takes a strategic approach to vertical industry support in alignment with the broader company strategy. Currently, our focus includes the public sector - a well-established area of our business. Specific support for finserv and telco or other verticals will be considered when there are referenceable customers who are willing to speak with the media and the PR team has allocated the appropriate resources. This ensures that our efforts are aligned with key business objectives.\nResearch-oriented requests\nAnalysts\nFor analyst research-oriented requests, please consult the Analyst Relations handbook section and direct questions to the\n#analyst-relations\nSlack channel.\nMedia\nAll media inquiries and requests must go through the corporate communications team via the\n#external-comms\nSlack channel.\nHonorariums\nIf you are approached by external parties seeking to provide payment for a GitLab team member‚Äôs time, please contact the corporate communications team via the\n#external-comms\nSlack channel to discuss the opportunity and approval process.\nSocial Media\nPlease consult the Social Media team (\n@social\non Slack)  for guidelines on representing GitLab on your personal social media platforms. If you are contacted on a social media platform and asked to share/retweet or provide commentary as a spokesperson of GitLab, please reach out to the social media team to provide details about the opportunity in the\n#social_media_action\nSlack channel.\nWriting about GitLab on your personal blog or for external platforms\nIt is necessary to keep your role at GitLab and your affiliation with the company separate from your personal blog or other external platforms. Additionally, you should not use GitLab branding, resources, or time allocated to your work at GitLab to prepare materials for personal projects. If you would like someone to check the draft of your personal work that could be perceived as being associated with GitLab even if it is not, please share it with your manager and the Corporate Communications team who will be happy to review it for potential conflicts before it is published. Please post it in the\n#external-comms\nSlack channel with a short summary and allow 5 business days for review.\nPublic GitLab Issues\nPosting in and discussions occurring within a public GitLab issue should follow the same guidelines as if you were posting about GitLab on social media, engaging with community members in a forum or conducting an interview with a media outlet. You are externally representing and communicating on behalf of GitLab.\nWhen representing and/or communicating externally on behalf of GitLab, please follow the SAFE framework. Being mindful of how you say things within open issues will help keep the company SAFE. We all represent the company.\nSharing Media Coverage\nSome media outlets (including\nthese ~14,000 newspapers and magazines\n) require GitLab to hold a license to share (and do the various other things noted below with) extracts, quotes or headlines of print and online articles - both internally (eg. via slack, email or in confidential GitLab issues) and externally (eg. on GitLab‚Äôs social media channels). The sharing of bare hyperlinks to articles (without extracts, quotes or headlines) does not require a license.\nA license may be required to do any of the following with extracts, quotes or headlines of print and online articles:\nPhotocopying, faxing, scanning, emailing or copying;\nSaving on an internal or external intranet or shared drive;\nPrinting, photocopying, emailing or distributing material received from a media monitoring organisation or PR agency;\nPosting material on internal or external websites or social media accounts.\nIf you are interested in doing any of the above with a media article (or an extract, quote or headline) internally or externally beyond just sharing the bare hyperlink, please reach out to the Corporate Communications team via the\n#external-comms\nslack channel before proceeding to confirm if a license is required.\nRequests for External Announcements\nPlease reach out via\n#external-comms\nin Slack if you have a request.\nPartner Requests for External Communications Support\nAny use of GitLab‚Äôs name, brand, or logo requires prior email approval by GitLab according to the process outlined below.\nPartner-led Blog Posts:\nGitLab is proud of its collaborative partner program, and we encourage partners to showcase their solutions, capabilities, and customer success stories through partner-led blogs. Please send all blog posts, including GitLab, to the GitLab Corporate Communications team at\npress@gitlab.com\nor #external-comms in Slack for review and approval.\nPress Release Criteria and Approval Process:\nPartners seeking to issue a press release that includes mention of their partnership with GitLab must meet the criteria outlined below and in the GitLab Partner Portal.\nPartner public relations participation criteria:\nA signed contract as a Select partner\nMinimum 10 joint customers and/or a strategic business plan\nNew partners: please reach out to your account representative for guidance.\nNote that GitLab requires up to 6 weeks of lead time to support external communications requests.\nPlease email your account representative for guidance on the approvals required and copy the GitLab Corporate Communications team at\npress@gitlab.com\n.\nGitLab account representatives: Any requests for public relations support requires approval from your executive sponsor, Nick Cayou. Please reach out via\n#external-comms\nin Slack if you have questions about this.\nGitLab Vendor Reference Requests\nIf you receive a vendor request for GitLab to act as a reference (case study, blog post, GitLab logo on their website, press release, etc.) for the product, service, and/or technology that your GitLab team is using, please refer to the\nprocess\noutlined on the Brand Strategy team‚Äôs handbook. For partner-led blogs or press releases, please refer to the\nPartner Requests for External Communications Support\nsection of the handbook. Note that due to the volume of requests, GitLab rarely writes joint press releases.\nCorporate Communications Resources and Trainings\nThis page is being updated.\nSocial Media Trainings Social Media 101 Training + Certification Please ‚Ä¶\nGitLab Incident Communications Plan\nEscalations, Processes, and How to Manage Incidents\nGitLab Speakers Resources\nEvent Requirements If you have been invited to speak on behalf of GitLab, please reach out to ‚Ä¶\nLast modified March 6, 2025:\nCorp Comms Handbook: Add details to sharing media coverage (\n56c38171\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2086}
{"doc_id": "2bc7891cb60a45d1", "url": "https://handbook.gitlab.com/handbook/support/support-pods/sec", "title": "Sec Support Pod | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Pods\nSec Support Pod\nA technical interest Support Pod focused on GitLab Sec Section features.\nSec Pod is a technical interest\nSupport Pod\nfocused on GitLab\nSec section\nfeatures.\nSecure Pod members\nLead:\nKatrin Leinweber\n(\n@katrinleinweber-gtlb\n)\nLead:\nBrie Carranza\n(\n@bcarranza\n)\nLead:\nDuncan Harris\n(\n@duncan_harris\n)\nLead:\nKate Grechishkina\n(\n@kategrechishkina\n)\nLead:\nChristopher Chewa Mutua\n(\n@cmutua\n)\nMario Mora\n(\n@mmora\n)\nCaleb Williamson\n(\n@calebw\n)\nRonnie Alfaro\n(\n@ralfaro\n)\nCleveland Bledsoe Jr\n(\n@cleveland\n)\nPurpose, key results and exit criteria (if any)\nSec Pod is a way for Support Engineers interested in Sec section features to work on relevant tickets and projects together.\nThe goals of Sec pod are to:\nidentify underlying patterns and trends across Sec tickets\nfile targeted issues and detailed bug reports to improve our Sec features\nsubmit MRs to GitLab documentation for self-service support and ticket deflection\nassist customers and team members with problems and questions involving Sec section features\nHow can I get involved in Sec Pod?\nTalk with your manager.\nSubmit a merge request to add\n'Support Focus: Secure'\nto your ZenDesk Groups in the\nSupport Team data\n.\nLet your teammates and groupmates know about your new focus area.\nJoin\n#spt_pod_sec\nSlack channel.\nAttend Sec Pod pairing sessions. (Check GitLab Support calendar for meeting times)\nHow the Sec Pod works\nIn the\n#spt_pod_sec\nSlack channel\n, we\npin\nSlack messages about üé´ tickets that we are keeping an eye on for colleagues, typically when they are\nout of the office\n.\nDuring üçê pairing sessions, check the pinned messages to see if the tickets there require attention.\nIf you pin a ticket, please remove it when it no longer requires attention from the pod.\nWe apply the scoped\npod::secure\nlabel to the\npairing issues\nthat we create.\nSupport Pod Resources\nWeekly session: ‚ÄúSec Pod Pairing‚Äù on the GitLab Support Team Calendar, currently scheduled Thursdays at 3:00 PM UTC.\nSlack channel:\n#spt_pod_sec\nGitLab.com label: ~‚Äúdevops::secure‚Äù\nSec Pod Troubleshooting Resources\nSecure Stage\nSlack:\n#s_secure\nGitLab.com label: ~‚Äúdevops::secure‚Äù\nFeatures by group:\nhttps://handbook.gitlab.com/handbook/product/categories/features/#secure\nSubmitting a request for help:\nhttps://gitlab.com/gitlab-com/sec-sub-department/section-sec-request-for-help#how-to-submit-a-request-for-help--to-the-sec-section-development-team\nAnalyzer code:\nhttps://gitlab.com/gitlab-org/security-products/analyzers/\nContainer registries for analyzer images:\nhttps://gitlab.com/security-products/\nScanner Report Schemas:\nhttps://gitlab.com/gitlab-org/security-products/security-report-schemas/\n15.0 Readiness - Secure:\nhttps://gitlab.com/groups/gitlab-com/support/-/epics/202\nSecure & Protect terminology:\nhttps://docs.gitlab.com/user/application_security/terminology/\nVulnerability Severity Levels:\nhttps://docs.gitlab.com/user/application_security/vulnerabilities/severities/\nSecurity Reports Examples:\nhttps://gitlab.com/gitlab-examples/security/security-reports/\ntatic\npplication\necurity\nesting)\nSlack:\n#g_secure-static-analysis\nGitLab.com label: ~‚Äúgroup::static analysis‚Äù\nDocs:\nhttps://docs.gitlab.com/user/application_security/sast\nTemplate:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.gitlab-ci.yml\nTest/demo project:\nhttps://gitlab.com/gitlab-com/support/test-projects/ci-examples/sast\nCollection of separate demo project:\nhttps://gitlab.com/gitlab-com/support/test-projects/ci-examples/secure/static-analysis\nSecret Detection\nSlack:\n#g_secure-secret-detection\nGitLab.com label: ~‚Äúgroup::secret detection‚Äù, ~‚ÄúCategory:Secret Detection‚Äù\nDocs:\nhttps://docs.gitlab.com/user/application_security/secret_detection/\nCI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.gitlab-ci.yml\nSecret scanner codebase:\nhttps://gitlab.com/gitlab-org/security-products/analyzers/secrets/\nSecret detection rules:\nhttps://gitlab.com/gitlab-org/security-products/analyzers/secrets/-/blob/master/gitleaks.toml\nUpstream project:\nhttps://github.com/gitleaks/gitleaks\nTest/demo projects:\nhttps://gitlab.com/gitlab-com/support/test-projects/ci-examples/secret-detection/\nDependency Scanning\nSlack:\n#g_secure-composition-analysis\nGitLab.com label: ~‚Äúgroup::composition analysis‚Äù\nDocs:\nhttps://docs.gitlab.com/user/application_security/dependency_scanning/\nTemplate:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.gitlab-ci.yml\nTest/demo project:\nhttps://gitlab.com/gitlab-com/support/test-projects/ci-examples/dependency-scanning/\nDependency List docs:\nhttps://docs.gitlab.com/user/application_security/dependency_list/\nynamic\npplication\necurity\nesting)\nSlack:\n#g_secure-dynamic-analysis\nGitLab.com label: ~‚Äúgroup::dynamic analysis‚Äù\nDAST Docs:\nhttps://docs.gitlab.com/user/application_security/dast/\nDAST CI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/DAST.gitlab-ci.yml\nDAST API scanning:\nhttps://docs.gitlab.com/user/application_security/dast_api/\nDAST API scanning CI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/DAST-API.gitlab-ci.yml\nDAST API test/demo projects:\nhttps://docs.gitlab.com/user/application_security/api_security_testing/#example-dast-api-scanning-configurations\nDAST test/demo projects:\nhttps://gitlab.com/gitlab-org/security-products/demos/dast/\nIaC (Infrastructure as Code) Scanning\nSlack:\n#g_secure-static-analysis\nGitLab.com label: ~‚Äúgroup::static analysis‚Äù\nDocs:\nhttps://docs.gitlab.com/user/application_security/iac_scanning/\nCI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.latest.gitlab-ci.yml\nIaC Scanner Codebase:\nhttps://gitlab.com/gitlab-org/security-products/analyzers/kics\nSecurity Dashboard / Vulnerability Report\nSlack:\n#g_secure_threat_insights\nGitLab.com label: ~‚Äúgroup::threat insights‚Äù\nSecurity Dashboard Docs:\nhttps://docs.gitlab.com/user/application_security/security_dashboard/\nVulnerability Report docs:\nhttps://docs.gitlab.com/user/application_security/vulnerability_report/\nVulnerability pages docs:\nhttps://docs.gitlab.com/user/application_security/vulnerabilities/\nSecurity Scan Policies\nSlack:\n#g_protect_container_security\nGitLab.com label: ~‚Äúdevops::protect‚Äù, ~‚ÄúCategory:Container Scanning‚Äù, ~‚Äúgroup::container security‚Äù,\nScan policies overview:\nhttps://docs.gitlab.com/user/application_security/policies/\nScan Results Policies Docs:\nhttps://docs.gitlab.com/user/application_security/policies/merge_request_approval_policies/\nScan execution policy docs:\nhttps://docs.gitlab.com/user/application_security/policies/scan_execution_policies/\nCode Quality\nTechnically owned by Secret Detection, but\nnot\nrelated to security vulnerabilities.\nSlack:\n#g_secure-secret-detection\nGitLab.com label: ~‚ÄúCategory:Code Quality‚Äù\nDocs:\nhttps://docs.gitlab.com/ci/testing/code_quality/\nCI/CD Template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml\nGitLab Code Quality Analyzer Codebase:\nhttps://gitlab.com/gitlab-org/ci-cd/codequality\nContainer Scanning\nSlack:\n#g_protect_container_security\nGitLab.com label: ~‚Äúdevops::protect‚Äù, ~‚ÄúCategory:Container Scanning‚Äù, ~‚Äúgroup::container security‚Äù\nDocs:\nhttps://docs.gitlab.com/user/application_security/container_scanning/\nCI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml\nLicense Scanning\nSlack:\n#g_secure-composition-analysis\nGitLab.com label: ~‚Äúgroup::composition analysis‚Äù\nDocs:\nhttps://docs.gitlab.com/user/compliance/license_approval_policies/\nCI/CD template:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/License-Scanning.gitlab-ci.yml\nFuzz testing\nSlack:\n#g_secure-dynamic-analysis\nGitLab.com label: ~\"\"\nAPI Fuzzing Docs:\nhttps://docs.gitlab.com/user/application_security/api_fuzzing/\nCoverage Fuzzing docs:\nhttps://docs.gitlab.com/user/application_security/coverage_fuzzing/\nAPI Fuzz test/demo projects:\nhttps://gitlab.com/gitlab-org/security-products/demos/api-fuzzing/\nCoverage Fuzzing test/demo projects:\nhttps://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing/\nLearning Resources\nGitLab Certified Security Specialist\nGitLab Security Essentials\nSecurity Essentials Hands-on\nSupport DAST Deep Dive\nLast modified February 24, 2025:\nUpdate docs links in support pages (\nb0fee44f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 686}
{"doc_id": "c02e2af27bd85046", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/professional-services-delivery-methodology/archetype-definition", "title": "Archetype Definition | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nProfessional Services Delivery Methodology\nArchetype Definition\nLearn about the key charateristics to classify the different Customer archetypes.\nWhat Does a Large Customer Look Like? The Archetype\nMost Fortune 500 companies are interested in\nScaling.\nThe business goals are usually focused on gaining efficiencies by scaling from\nteams\nto\nprograms\nand ultimately across a set of complex\nportfolios\nwith a strong incentive to realize cost savings through standardization.\nSome Fortune 500 companies are interested in digital transformations.\nWhat are key characteristics?\nFortune 500\nNew logo, large Dedicated or Self Managed customer\nComplex portfolio with many programs and distributed application teams\nGeographically distributed office locations (for example: North East/NY, Houston/TX, Bangalore/India)\n$1M+ PS revenue\nAt least three (3) logical portfolio groupings\nLooking to either commit to 500+ Ultimate licenses for new logo, or expand from current 1,000+ Ultimate licenses to x Ultimate licenses in the coming year\nSource origination either from competitor (GitHub, BitBucket) or existing GitLab variety\nLooking for total tool usage of GitLab across their Dev organization or for digital transformation and getting off a variety of legacy tooling\nCustomer has two (2) critical dependencies / seasonal events that prevents them from development work 3 weeks before and 3 weeks after each event (system freeze, minimizing system changes), such as\nSuper Bowl\nBlack Friday\n4th of July Sales Event\nScaling Considerations\nCompany Size\nLocations / Time Zones\nNumber of Portfolios / Programs / Teams\nTechnical Environment\nDYI Tool Chain\nLegacy Systems\nJira\nJenkins\nExternal Security Scanners (Fortify, Snyke, Black Duck, etc.)\nPackage Managers in Use\n‚Ä¶ <Action Item>\nNumber of Users\nNumber of Transactions\nData Volume\nRepository Size\nRepository Depth\nLast modified January 24, 2025:\ntake 2 on adding back pre-sales methodology for PS (\n81552e73\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 302}
{"doc_id": "536a4fbfb4f4ec23", "url": "https://handbook.gitlab.com/handbook/support/workflows/account_verification", "title": "Account Ownership Verification | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Workflows\nAccount Ownership Verification\nWorkflow detailing how and when to verify account ownership including disable 2FA\nOverview\nThis workflow covers how a user can provide account verification. It should be used for any\naccount changes\n.\nAccount actions can only be completed if the\nworkflow\nbelow is successful.\nRelated topics\nUser Account Verification\nGitLab.com requires that users without 2FA enabled verify their email address when a login attempt meets certain high-risk criteria. For users requesting support when their email address is no longer valid and are unable to receive the email, please see the\nEmail account lost workflow\n.\nIf the user has questions about the email, phone, or credit card verification GitLab is requiring, please refer to the\nInternal Handbook for the workflow\nto follow.\nGitLab Team Members\nIf the user is a GitLab team member, have them\ncontact IT Ops\n.\n2FA removal within GitLab\nSee the\n2FA Removal workflow\nfor instructions to process 2FA removal requests.\nWorkflow\nThe workflow applies to all cases where account verification is required, aside from 2FA removals.\nKeeping the Ticket Simple and Accurate\nBecause an ownership-verification ticket is a matter of record, the ticket must be simple, accurate, and tightly focused on the access issue.\nDo not allow the customer to bring up unrelated topics.\nStep 0: Ticket metadata\nEnsure that the ticket form, category, subcategory, and topic are accurate.\nMost SaaS Account categories have automations or triggers.\nAccount verification matrix\nThe table below provides a summary of the available verification options based on the owner and user type:\nRequester\nTarget\nChallenges\nSupport PIN\nNotes\nEnterprise Owner\nOwn account\nOwner passes challenges on own account\nSupport PIN must be provided by a different owner\nIf no other owner is available for vouch, see\ninternal handbook\nfor other challenges.\nEnterprise Owner\nEnterprise User\nOwner or target user passes challenges on their own account\nSupport PIN is from requesting owner\nMultiple enterprise users may be handled per ticket. Target user does not have to be CC‚Äôd on ticket.\nOwner\nNon-enterprise user (who is a member of or intends to be added to owner‚Äôs paid group)\nTarget user passes challenges on own account\nSupport PIN from owner\nOne user per ticket. Communication is direct from the target user who must be CC‚Äôd on ticket.\nPaid User\nOwn account\nUser passes challenges on own account\nIf owner is needed, owner must open a new ticket.\nPaid User\nOther member of same paid group\nTarget user passes challenges on own account\nIf owner is needed, owner must open a new ticket.\nFree User\nNon-member of group with intent to be added\nNot allowed - request must come from group owner\nOwner vouch required\nSee the\nEnterprise User section\non how to identify if a user is an Enterprise User.\nStep 1: Sending Challenges\nIf you need a basis for a response where you send the challenges, use the\nSupport::SaaS::Gitlab.com::Account Ownership Verification - GitLab.com\nmacro\n.\nStep 2: Checking challenge answers\nNote\n: In case the user sends back very minimal information and it‚Äôs clear it‚Äôs not sufficient or the answers are vague, reply asking for more information immediately after their response. You can provide some additional guidance, such as ‚Äúplease provide the exact date and time of the commit, not just an approximate one‚Äù.\nTo verify the challenge answers, use the Zendesk GitLab User Lookup App or, for those who have admin access, check at\nhttps://gitlab.com/admin/users/USERNAME\n.\nUse the ZenDesk\nGitLab Super App‚Äôs\n2FA Helper\nor\n2FA validator\nto determine the\nrisk factor\n(GitLab internal) based on the user‚Äôs answers. Data classification criteria and any notes are in the\nGitLab Internal Handbook - Data Classification table\n, which is considered the source of truth.\nChallenge answers must be evaluated against a paid namespace if the user is a member of any paid namespace. If the user is not a member of a paid namespace, refer to\nConditions for 2FA Reset Consideration\nfor further guidance.\nIf a group owner is answering on an\nenterprise user‚Äôs\nbehalf, see the\nAccount verification matrix\nfor which account to evaluate the answers against. Even if the Enterprise user is not a current member of the paid namespace, the data classifcation is RED.\nIf you need to leave a comment manually (instead of through the app), use the\nSupport::SaaS::Gitlab.com::2FA::2FA Internal Note\nmacro\nto put an internal note on the ticket.\nIf verification passed:\nRequest that your decision be peer-reviewed by another member of the team through Slack\n#support_gitlab-com\n. They will perform the steps in 3a\nIf the verification failed\n: Move to step 3b\nStep 3a: User successfully proves account ownership\nThis section is typically done by the peer reviewer. If needed, the peer reviewer (or approving manager) may leave an approval note, in which case the original reviewer will perform the actions.\nIf you agree with the decision, sign into your admin account and locate the username in the users table or by going to\nhttps://gitlab.com/admin/users/usernamegoeshere\nPlease see\nAccount Changes workflow\n.\nUnder the account tab, click\nEdit\n, add an\nAdmin Note\n, and save.\nStep 3b: User Fails to Prove Account Ownership\nNote\n: Do\nnot\nprovide hints to answers, or let the user know which challenges they got right or wrong. That is how social engineering works!\nIf the user is unable to pass the risk factor but we have not provided all the applicable challenges, you may offer further challenges. This is true for all users, including owners.\nMost commonly, an\nOwner in the top level namespace\n(with a valid subscription) vouch is requested. Use the\nSupport::SaaS::Gitlab.com::2FA::2FA ask owner vouch\nmacro\n. See the\nVerifying an Owner Vouch section\nfor more information. The originating email of this request should match a verified email of the Owner‚Äôs account. If the user is an Owner, vouch must be from a different Owner.\nSome challenges can be answered with the help of their colleagues. Use the\nSupport::SaaS::Gitlab.com::2FA::2FA Removal Verification - GitLab.com - Failed - Ask colleagues for help\nmacro\nto let them know which challenges they can try to work with their colleagues to answer.\nWhen we receive a subsequent response, go back to\nevaluating the challenges\nto see if they now pass.\nIf the user is unable to pass the available challenges:\nInform them that without verification we will not be able to take any action on the account. For 2FA, use the\nSupport::SaaS::Gitlab.com::2FA::2FA Removal Verification - GitLab.com - Failed - Final Response\nmacro\n.\nMark the ticket as ‚ÄúSolved‚Äù.\nAuthenticating an Owner Vouch\nIn a paid namespace: If the user elects to have an Owner vouch for their request, apply the macro\nSupport::SaaS::Gitlab.com::2FA::2FA ask owner vouch\n. This will direct the requester to have an Owner (top-level) create a Snippet with a Support-provided string. Once they have replied verifying they have done so:\nUse your Admin or Auditor account to browse to the Snippet provided (for example\nhttps://gitlab.com/-/snippets/2057341\n)\nVerify the text of the Snippet matches the string you specified\nVerify that the author of the Snippet is an Owner and direct member of the top-level paid group\nIf the Owner passes, you may count this towards the account verification challenges.\nNote: Due to this\nbug\nsome group owners are not able to create snippets. In that case, we can ask the Owner to generate and share with us a\nSupport PIN\ninstead.\nIf another user is CC‚Äôd on the ticket, once you‚Äôve verified the PIN ask them to generate a new PIN to revoke the previous one.\nAccount Ownership Changes\nThis section has been\nmoved to the Account Changes workflow\n.\nLast modified July 3, 2025:\nClarify verification matrix (\ncb6b11d9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1288}
{"doc_id": "ffc5372879a4e7f8", "url": "https://about.gitlab.com/solutions/devops-platform", "title": "GitLab - The DevOps Platform | GitLab", "text": "DevOps Platform\nGitLab is a single application with all the functionality of a DevSecOps Platform, allowing organizations to deliver software faster, while strengthening security and compliance, thereby maximizing the return on software development.\nStart your free trial\nWatch a demo\nThe DevOps platform\nDevOps tools shouldn√¢¬Ä¬ôt create more problems than they solve. As DevOps initiatives mature, brittle toolchains built from point solutions break down, increasing cost, reducing visibility, and creating friction instead of value. Unlike DIY toolchains, a true DevOps platform lets teams iterate faster and innovate together. The goal is to remove complexity and risk providing everything you need to deliver higher quality, more secure software faster, with less risk and lower cost.\nLearn more\nWork more efficiently\nIdentify blockers and address them immediately, in a single tool.\nDeliver better software faster\nFocus on delivering value√¢¬Ä¬înot maintaining integrations.\nReduce risk and cost\nAutomate security and compliance without compromising speed or spend.\nGitLab DevOps platform benefits\nAs a single application for the complete DevOps lifecycle, GitLab is:\nComprehensive:\nVisualize and optimize your entire DevOps lifecycle with platform-wide analytics within the same system where you do your work.\nSeamless:\nUse a common set of tools across teams and lifecycle stages, without dependencies on third-party plugins or APIs that can disrupt your workflow.\nSecure:\nScan for vulnerabilities and compliance violations with each commit.\nTransparent and compliant:\nAutomatically capture and correlate all actions√¢¬Ä¬îfrom planning to code changes to approvals√¢¬Ä¬îfor easy traceability during audits or retrospectives.\nEasy to adopt:\nLearn a single UX, manage a single data store, and run it all on your choice of infrastructure.\nWe√¢¬Ä¬ôre bringing into the firm a platform that our engineers actually want to use √¢¬Ä¬ì which helps drive adoption across multiple teams and increase productivity without having to √¢¬Ä¬òforce√¢¬Ä¬ô anyone to adopt it. This is really helping to create an ecosystem where our end users are actively helping us drive towards our strategic goals - more releases, better controls, better software.\nGeorge Grant\nLearn more √¢¬Ü¬í\nGartner:\nMarket Guide for DevOps Value Stream Delivery Platforms\nGlympse:\nConsolidating 20 tools into GitLab\nBI Worldwide\nLeveraging a single platform to secure their code\nReady to get started?\nSee what your team can do with the most comprehensive\nAI-powered DevSecOps platform.\nGet free trial\nTalk to sales", "num_words": 377}
{"doc_id": "df379259fa71b860", "url": "https://handbook.gitlab.com/handbook/security/corporate/end-user-services/supported-apps/zoom/zoom-tips", "title": "Zoom Tips | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec End User Services (EUS)\nEUS - Supported Apps (Placeholder)\nZoom\nZoom Tips\nAdditional info for a better Zoom experience\nHow to share a presentation in Zoom\nAt some point, you may need to give a slide presentation using Zoom.\nIdeally, you should be able to see your speaker notes while participants see your slide show. This is fairly easy to do with two monitors by using presenter view and sharing the monitor which contains the slides.\nIf you have only one monitor, it is still possible using the following steps:\nOpen your slide deck in Google Slides.\nMake sure to close any other tabs you may have open.\nParticipants will be able to see these tabs when it comes time to present.\nSelect\nPresenter view\n.\nThis will make your presentation take up the entire window for participants, but not your entire monitor.\nIf you want to switch to this view from the standard\nPresent\nview you can simply press the\na\nkey.\nHover near the bottom of your presentation and you will see a pop up menu.\nFrom this menu, select the\nToggle Full Screen\noption, third button from the right, next to settings.\nThis will end full screen mode without leaving the presenter view.\nTo see your speaker notes, hover at the bottom of your presentation window again and select\nPresenter View\nfrom the menu.\nYou will now have a presenter view pop-up window which allows you to see your speaker notes as well as advance the slides.\nIn another browser window enter the Zoom meeting room.\nOnce in the meeting, select\nShare Screen\nfrom the options at the bottom of the screen.\nDo not share your desktop.\nFrom the options, select the browser window containing your Google Slides deck.\nThis will allow you to share just the browser window containing your slides.\nIf you would also like to see the Zoom chat, hover your cursor at the top of the screen containing your Zoom meeting.\nA menu will appear, from this menu select More > Chat.\nPosition the windows any way you need to see the presentation and speaker notes.\nMake sure to change slides using the presenter view pop up window.\nThis will advance the presentation for your viewers as well as advancing your speaker notes.\nMake sure the minimum font size of text is large enough so that it can easily be read by everyone.\nIf you would like to practice presenting, you can do so using your own private Zoom room.\nOpen the Zoom app and click\nStart with video\n.\nClick\nRecord\n.\nRepeat the steps above.\nStop and watch the recording. You‚Äôll see what the participants would see.\nUsing a phone to connect to audio\nEspecially when talking with customers, it‚Äôs good to make a good impression! One way is to use a phone to dial in, which can increase reliability of your audio connection and reduce latency.\nIn general, a landline has the lowest latency, a mobile phone is next, and internet audio is variable.\nHere are some tips for quick and effective telephone connections to Zoom meetings.\nSome meeting rooms have the\nCall me\noption; others don‚Äôt. To make it easier to dial in, keep Zoom as a contact so you can dial it quickly\nIf you dial in, Zoom will ask for the Meeting ID\nIf the meeting hasn‚Äôt started yet, the Meeting ID won‚Äôt appear in the Zoom client, but it‚Äôs in the URL, and you can still connect to the audio with the phone\nWhen the meeting starts, your audio and video will both connect instantly.\nIf the meeting URL has a name rather than an ID, just click the URL and get the ID from the browser URL bar (might not work in Safari?); the name is just a redirect, and with the Meeting ID you can connect on the phone quickly.\nThe phone will also ask for your Participant ID\nIf you don‚Äôt give it when you first connect, your audio and video might appear in separate boxes in the Zoom window, as if you‚Äôre in the meeting twice\nThis may be confusing to others, as your video won‚Äôt be highlighted when you talk\nTo merge the two connections, on your phone, press the\n#\n, followed by your Participant ID, followed by\n#\nagain\nZoom will merge the two connections without annoying others on the call\nEven if you‚Äôre using the phone for audio, use the mute button in the Zoom client for muting. That tells others on the call that you‚Äôre muted.\nConsiderations when presenting on Zoom\nMaintaining audience engagement\nCheck in with your Audience: There are multiple stages throughout your Zoom presentation or video conference which are prime points to engage the audience with a simple check-in.\nAt the beginning of the presentation: You could check in with your audience as soon as you have explained the upcoming meeting/presentation agenda, this will help to make sure that everyone understands the journey you‚Äôre about to take them on.\nAfter delivering the initial value prop: You should most certainly check in after delivering GitLab‚Äôs value proposition or key message.\nIt‚Äôs generally best to use people‚Äôs names e.g. ‚ÄòJohn, Ryan, please let me know if there is anything you would like me to clarify in more detail?‚Äô\nBy using names in this way will force a response, show that you are engaged with them directly and keep the audience tuned in.\nInvolve the remote audience when presenting\nThere are a number of simple methods presenters can use to involve the participants throughout your presentation.\nDirect Reference: ‚ÄòAs most of you will be aware‚Ä¶‚Äô or ‚ÄòSome of you might be wondering‚Ä¶‚Äô and good phrases to grab your participants‚Äô attention and make them feel involved as well as reinforce your own position as a subject matter expert\nRhetorical Questions: Rhetorical questions generally encourage the participant to formulate answers to your question for discussion at a later point in the presentation\nThis method can be good to highlight a point that you want the participant to recall later during the presentation\nAcknowledge Challenges: Acknowledging the impact of your message upon the audience to help enforce you as a trusted GitLab representative of their interests\nKeeping a Remote Audience on Track\nAlways have an agenda: Having a clear agenda will help set expectations.\nWith longer presentations, you may wish to summarize where you‚Äôve been and where you are up to within your agenda.\nPut emphasis on your key message: Because of the constant barrage of emails, texts, calls, and social media updates, participants joining via Zoom (or any video conferencing tool) can easily get distracted and quickly tune out.\nBring their attention back to you and your presentation by making sure you really emphasize your key message.\nYou will sound much more focused, and thereby, help remote attendees relate points and examples back to the core of your presentation or meeting.\nRefer Directly to Your Slides: Refer directly to your presentation or meeting slides, particularly those that are more complex and which you should spend more time explaining (e.g. with graphs graphics or flow diagrams).\nIt‚Äôs important to verbally indicated to the audience where you are on the slide by using the mouse cursor or virtual laser dot.\nRemember to Breathe\nHarness the power of pausing to help people keep up and absorb what you‚Äôre sharing is even more important in a removed presenting environment.\nThat‚Äôs because, without an audience in front of us, we tend to speed up and truncate our pauses even more. So be extra mindful of this and of your audience.\nAt the end of the day, listeners lost means a missed opportunity to get your message across.\nMake the participant experience an enjoyable one\nVideo calling via Zoom and other technologies is incredibly useful and convenient but can make presentations dull and boring for both the audience and the presenter\nFor this reason, it‚Äôs even more important to find ways to build rapport and to have fun and inject some humor into the meeting (if possible)\nIt‚Äôs important that you give yourself, and the audience, the permission to have some banter and moments of ‚Äôlightness‚Äô during the presentation\nDon‚Äôt take the entire experience too seriously or you‚Äôll bleed the presentation dry of any interactivity\nIt is good to allow your natural personality to shine through.\nThis will refresh the presentation with an air of genuine spirit, much needed when your audience is remote and cannot interact with you in person.\nRemember, if you sound like you‚Äôre enjoying hosting the meeting, the audience is more likely to enjoy listening to it. Find other tips for increasing user engagemnet from our\nlive speaker series with Lorraine Lee on all-remote video and presentation tips\n.\nProvide links rather than sharing while you present or edit\nProvide links (to merge requests, issues, documents, etc) rather than sharing your screen while you present/edit. This allows participants to follow along at their own pace and indepenently make comments/edits.\nAdditional Zoom tips\nVirtual background\nConsider buying a physical\ngreen screen\n.\nConsider using a\ncustomizable GitLab Background\n(\nGoogle Drive access available to GitLab team members who are logged in\n).\nIn your Zoom\nIn Meeting (Advanced)\nsettings, enable\nVirtual background\nIn your Zoom application on your computer, open settings and click on the\nVirtual Background\nsetting\nSelect a background you want to use, or click the [+] to add a picture from your computer\nA video on how to set up a\nVirtual Background\nwith Zoom is available\nhere\nIf you do not have a green screen, consider using a\nVirtual Background\nthat is a similar color to whatever is behind you.\nApplying Video Filters\nSign into the Zoom desktop client.\nClick on your profile picture >\nSettings\n.\nClick the\nBackground & Effects\ntab.\nClick the\nVideo Filters\ntab.\nSelect the desired filter. (We have GitLab themed filters!)\n(Optional) Scroll down and select the\nApply to all future meetings\ncheckbox to set this filter as a default for all meetings you join or host.\nExternal webcams and DSLRs\nIt is possible to achieve high quality video output with a professional\nbokeh\neffect by using a DSLR or external webcam\nExternal webcams are generally a good alternative to your built in Macbook webcam as they allow for more control such as advanced color and light correction including white balance and contrast adjustments\nExternal webcams also allow you to crop your live image concentrating on a certain part of your video i.e. your face\nAn up to date list of Mac compatible external webcams can be found\nhere\nSetting up a DSLR to work as a webcam with your Mac can be quite complicated and will generally require additional hardware such as adapters\nA simple video tutorial of how to set up your DSLR as a webcam with your Mac can be found\nhere\n.\nZoom automatically lowering your microphone input volume\nIf you have a loud keyboard or a fan in your office, Zoom may try to automatically reduce your microphone input volume. This can be frustrating because then other participants have trouble hearing you speak later in the call.\nIf you are experiencing this issue, go into your Zoom client settings and uncheck\nAutomatically adjust microphone volume\n.\nLast modified July 15, 2025:\nEUS apps pages - Zoom (\nf1ee1729\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1908}
{"doc_id": "95e720d746c5d6ec", "url": "https://handbook.gitlab.com/handbook/marketing/digital-experience/contentful-cms/wishlist", "title": "Known knowns & feature wishlist | The GitLab Handbook", "text": "The Handbook\nMarketing\nDigital Experience Handbook\nContentful CMS\nKnown knowns & feature wishlist\nThings we know are not great and our wishlist of features\nKnown Knowns\nThis are things we know aren‚Äôt great about our Contentful integration with the Marketing site. They are ‚Äúgotchas‚Äù. We are documenting them here for transparency.\nJust for reference, the slug field in the PAGE Content Type should not be marked as a localization field, if this field is checked it will break all localized pages in BE where the content comes from Contentful. (edited)\nDiff Versioning in Contentful\nisn‚Äôt great. Infact‚Ä¶ it‚Äôs non-existent.\nError handling: Unless a user is checking the most recent pipeline after publishing something in contentful, they may not be aware of a problem with the content. Users may subscribe to the #dex-alerts slack channel to be notified when alerts occur, but the name of the alerts will be the name of the most recently merged branch in Buyer Experience, rather than the page that was edited in the CMS.\nDraft content has the potential to break pipelines for all review apps, since review apps read contentful draft content.\nWishlist\nThis are a wishlist of features we‚Äôd like to see from Contentful or things we build.\nTo solve all the problems of the universe.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 232}
{"doc_id": "d260129071eaca62", "url": "https://handbook.gitlab.com/handbook/legal/policies/website-terms-of-use", "title": "GitLab Website Terms of Use | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nPolicies\nGitLab Website Terms of Use\nLast updated: 28 April 2022\nWebsite Terms of Use\nPLEASE READ THIS AGREEMENT CAREFULLY BEFORE ACCESSING OR USING THE WEBSITE. BY ACCESSING OR USING ANY PART OF THE WEBSITE, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS AND CONDITIONS OF THIS AGREEMENT, THEN YOU MAY NOT ACCESS THE WEBSITE. THE WEBSITE IS AVAILABLE ONLY TO INDIVIDUALS WHO ARE AT LEAST 13 YEARS OLD.\nThese Website Terms of Use (the ‚ÄúAgreement‚Äù) govern all use of the GitLab.com website, or other website(s) owned and operated by GitLab (the ‚ÄúWebsite‚Äù). The Website is offered subject to your acceptance, without modification, to the terms and conditions contained herein as updated subject to this Agreement. For the avoidance of doubt, this Agreement does not control or govern your use of the GitLab products and services. Please visit the\nGitLab Terms Page\nto see the applicable agreement(s) related to your use of GitLab products and services.\n1. Website Eligibility\n1.1.\nThe Website, and Content (as defined herein) provided on the Website by GitLab, is provided only to entities and persons over the age of 13.\n2. License and Ownership\n2.1.\nGitLab grants to you a limited, personal, non-transferable, non-sublicensable, revocable license to access and use the Website, including Content provided within the Website, in the manner presented by GitLab.\n2.2.\nOwnership, right and title of all Content provided on the Website shall remain with GitLab (as applicable) at all times. This Agreement does not transfer any GitLab, or third party intellectual property, to you.\n2.3.\nGIT is a trademark of Software Freedom Conservancy and our use of ‚ÄúGitLab‚Äù is under license. Other trademarks, service marks, graphics and logos used in connection with the Website may be the trademarks of other third parties. Your use of the Website grants you no right or license to reproduce or otherwise use any GitLab or third-party trademarks.\n3. Responsibility of Website Visitors\n3.1.\nGitLab has not reviewed, and cannot review, all of the materials, website links (including to third party websites) and content posted on the Website (collectively referred to as the ‚ÄúContent‚Äù). Therefore, GitLab cannot and will not be responsible for the Content or their effect(s). By operating the Website, GitLab does not represent or imply that it endorses the Content provided or that it believes such Content to be accurate, useful or non-harmful. You are responsible for taking precautions as necessary to protect yourself and your computer systems from viruses, worms, Trojan horses, and other harmful or destructive Content. GitLab disclaims any responsibility for any harm resulting from the use by visitors of the Website, or from any downloading by those visitors of Content posted on the Website. The Website is provided ‚ÄúAS IS‚Äù and GitLab and its affiliates, suppliers and licensors hereby disclaim all warranties of any kind, express or implied, including, without limitation, the warranties of merchantability, fitness for a particular purpose and non-infringement. Neither GitLab nor its suppliers or licensors, makes any warranty that the Website will be error free or that access thereto will be continuous or uninterrupted.\n3.2.\nBy accepting this Agreement, you agree not to use, or facilitate others to use, the Website in a way that is harmful to others or overburdens or otherwise impairs the Website. Examples of such use include, without limitation:\nEngaging in illegal or fraudulent activities;\nInfringing a third party‚Äôs intellectual property rights;\nDistributing harmful or offensive Content that is defamatory, obscene, abusive, an invasion of privacy or harassing;\nThe distribution of malicious/commercial spam;\nViolating the security or integrity of any computer, network or communications system;\nUsing the Website to mine or demonstrate proof-of-work for a cryptocurrency or blockchain; or\nUsing any process or device (automated or otherwise) to retrieve, index, ‚Äúdata mine‚Äù, ‚Äúscrape‚Äù, or in any way reproduce the presentation of this website or its Content, unless otherwise permitted under applicable content licensing permissions.\n3.3\nGitLab uses session replay tools to record user interactions for the purposes of improving user experience, troubleshooting technical issues, and enhancing our services. By using the Website you acknowledge this use and the methods available to you to opt-out of cookie based technologies such a session replay tools which are available in our\nCookie Policy\n.\n4. DMCA and Privacy Policies\n4.1.\nAs GitLab asks others to respect its intellectual property rights, it respects the intellectual property rights of others. If you believe that Content located on or linked to the Website violates your copyright, you are encouraged to notify GitLab in accordance with our\nDMCA policy\n.\n4.2.\nYour use of the Website  is subject to the\nGitLab Privacy Policy\n, which is incorporated herein by reference.\n5. Modifications / Updates\n5.1.\nGitLab has the right to update all or any part of the Content, Website, and terms of this Agreement at any time without notice. Your continued use of the Website shall constitute agreement to any and all such updates.\n5.2.\nGitLab reserves the right at any time, and from time to time, to modify or discontinue, temporarily or permanently, the Website (or any part of it) with or without notice.\n6. General Representation\n6.1.\nYou represent and warrant that: (i) your use of the Website will be in strict accordance with this Agreement and with all applicable laws and regulations (including without limitation any local laws or regulations in your country, state, city, or other governmental area, regarding online conduct and acceptable content, and including all applicable laws regarding the transmission of technical data exported from the United States or the country in which you reside); and (ii) your use of the Website will not infringe or misappropriate the intellectual property rights of any third party.\n7. Termination\n7.1.\nGitLab may terminate your access to all or any part of the Website at any time, with or without cause, with or without notice, effective immediately.\n8. Limitation of Liability\n8.1.\nIn no event will GitLab or any of its affiliates, suppliers or licensors, be liable with respect to any subject matter of this Agreement under any contract, negligence, strict liability or other legal or equitable theory for: (i) any special, incidental or consequential damages; (ii) the cost of procurement for substitute products or services; (iii) for interruption of use or loss or corruption of data; or (iv) for any damages whatsoever.  GitLab shall have no liability for any failure or delay due to matters beyond their reasonable control. The foregoing shall not apply to the extent prohibited by applicable law.\n9. Indemnification\n9.1.\nYou agree to indemnify and hold harmless GitLab, its affiliates, contractors, licensors, and their respective directors, officers, employees and agents from and against any and all claims and expenses, including attorneys‚Äô fees, arising out of your use of this Website, including, but not limited to, your violation of this Agreement.\n10. Miscellaneous\n10.1.\nIf any provision of this Agreement is held by a court of competent jurisdiction to be invalid, void, or unenforceable, the remaining provisions shall nevertheless continue in full force without being impaired or invalidated in any way.\n10.2.\nThe failure of either party to enforce at any time, or for any period of time, the provisions of this Agreement shall not be construed to be a waiver of such provisions or of the right of such party to enforce each and every such provision.\n10.3.\nAll provisions of this Agreement which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.\n10.4.\nThis Agreement shall be construed and enforced in accordance with the laws of California, U.S.A., and the parties submit to the jurisdiction of the State and Federal courts in San Francisco, California, without giving effect to any conflicts of laws principles.\nLast modified June 24, 2025:\nUpdate website-terms-of-use to include reference to use of tracking technologies (\nc0306cc8\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1333}
{"doc_id": "d4f017f56d2e5a9e", "url": "https://handbook.gitlab.com/handbook/sales/field-operations/customer-success-operations/renewal-ops", "title": "Renewals Operations Team | The GitLab Handbook", "text": "The Handbook\nSales\nField Operations\nCustomer Success Operations\nRenewals Operations Team\nThe Renewals Operations Team handbook page covers our mission, strategies, responsibilities, and processes.\nVision\nThe Renewal Operations team is responsible for building, maintaining and optimizing the operational framework that supports GitLab Account Teams to effectively manage customer Renewals in an effort to increase Net Revenue Retention. The Renewal Operations team enables and supports Account Teams to:\nEnsure a consistent, seamless and positive Customer Renewal experience\nIdentify and manage churn and contraction risk effectively\nAccurately forecast churn and contraction with a high degree of confidence\nAnalyze drivers of Churn and Contraction and provide strategic recommendations to mitigate risk\nEnsure an exceptional level of data quality within tools and systems\nIdentify, build and iterate process improvements to improve account management effectiveness\nFind more information about how we drive the above initiatives on the\nRenewals Managers - What we Do\npage\nBelow is a breakdown of the 4-part\nRenewal Operations Strategy\n.\nMeasure\nCreate continuous workflow that accurately measures and analyzes the main areas of churn and contraction\nDefine Renewal Metrics to assist in forecasting based on Usage, Engagement, and\nPredictive Models\nImprove Workflows\nIdentify and focus on areas of improvement in the customer lifecycle to prevent further churn and contraction and iterate on scalable solutions\nMitigate Risk - Customer Segmentation\nCreate a scalable risk management system, to allow Account Teams to monitor, investigate, and intervene on upcoming opportunities at risk.\nEstablish an Early Warning System (EWS) to segment customers based on Customer Health and Growth metrics.\nGrowth & Engagement\nIterate through automated & manual engagement strategies and campaigns based on segmentation. Work with Renewals, Product, Digital CS, CSM, Sales Ops, and Sales Enablement to provide creative time & cost saving solutions.\nMeet the Team\nPerson\nRole\nJohn Budreski\nSenior Manager, CS Strategy & Operations\nHeather Kacmarski\nCustomer Success Operations Analyst\nLaura Simmons\nCustomer Success Operations Analyst\nGet in Touch\nHead over to\n#renewal-ops\non Slack to get in touch with us. We use this channel for general Renewal Operations support, and key system status updates. We attempt to avoid direct messages where possible as it discourages collaboration.\nWho We Work With\nRenewal Operations supports the Renewals, Success and Sales Teams: Directors & Area Sales Managers, Renewals Managers, Account Executives, Strategic Account Executives and collaborates with Customer Success Operations, Sales Operations and Sales Strategy.\nRenewals Team\nis Renewal Operations‚Äô direct focus, our primary customers are Renewals leaders; the insights, strategies, and actionable campaigns are built to assist the Renewal Managers and Account Executives with the renewal process.  Renewals Operations provides intelligent insights for the large amount of upcoming renewals managed by Account Teams to allow a more focused approach.\nCustomer Success Operations\nhelps organize and collect pertinent product usage, and  customer health data that the Renewal Operations Team uses to identify insights and engagement strategies. For example, creating automated one-to-many campaigns in Gainsight to support product adoption.\nSales Operations\nsupports Renewal Operations by maintaining our systems that process the renewals and opportunity management. As we progress, it can also improve risk management and forecasting.\nHow We Work\nThe Renewal Operations team primary focus is to support the Global Renewals team through a number of channels and activities. For guidance on when and how to engage Renewal Operations see below:\nRenewal Manager Account & Opportunity Management\nTo reach out to Renewal Operations within Salesforce, follow the process to request internal support outlined\nhere\nRenewal Operations can assist with:\nTerritory Assignment Questions or Corrections (\nfor a Territory Change Request please follow the instructions here\n)\nRenewal Manager Opportunity Assignment\nRenewal Ownership (Tier) Re-assignment\nRenewal Forecast\nfield updates\nClosed Details\nupdates\nRenewal Forecast guidance\nComplex Opportunity management guidance\nRenewal Manager Opportunity Split\nMerged Opportunities\nChurn Exception Review for Renewals Managers\nQuoting, Approvals and Bookings\nFor questions on Quoting, Approvals, Opportunity Booking or Opportunity data quality refer to the\nSales Order Processing Handbook Page\nor reach out to\nDeal Desk via an Internal Support Request\nCompensation\nFor Compensation related questions please reach out to Sales Comp via the\ninternal support request\n. Renewal Operations does not approve Churn exception requests, to request a Churn exception\nplease follow the process outlined here.\n.\nRenewal Operations Process Cadences\nWeekly\nRenewal Forecast Template Update\nForecast Data Quality Review\nLoss/Downgrade Reason Review\nRenewal Opportunity - Customer Subscription Reconciliation\nMonthly\nTop Churn & Contraction Opportunity Review\nDebook-Rebook Renewal Reconciliation\nChurn Exception Review\nSMB Churn & Contraction Readout\nMM Churn & Contraction Readout\nCustomer Success Forum\nRenewal Operations Projects\nRenewal Operations uses issues and issue boards to track our projects and tasks. If your expertise can assist in any of our projects or if you simply want to share an idea you believe could assist the Renewals process, please open an issue and add the ~CS RenewalOps label anywhere within the GitLab repo.\nSee the\nRenewal Operations issue board\nto track progress.\nProjects\nCreate Issues in the\nCS Operations project\nusing the RenewalOpsRequest Issue template.\nLabels\nLabels to use when creating new Issues or MRs for Renewal Ops:\nCS RenewalOps - Catch all label to designate Renewal Operations involvement in the Issue. Use this label to bring an Issue to the Renewal Ops teams attention.\nROPS::In_Process - Renewal Ops actively working Issue\nROPS::Monitoring - Renewal Ops is a stakeholder but not the DRI for the Issue and is tracking progress\nROPS::Priority - Renewal Ops has made this Issue a top priority to resolve ASAP\nROPS::Blocked - Renewal Ops unable to resolve Issue due to technical or business limitation\nROPS::Backlog - Renewal Ops has deprioritized this Issue and will be addressed at a later time\nROPS::Completed - Renewal Ops resolved the Issue and is now Closed\nSend any questions to the slack channel\n#renewal-ops\nLast modified November 14, 2024:\n2024 11 14 rm ops update (\n7c8732db\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 973}
{"doc_id": "d80ddb4d073a3f4d", "url": "https://handbook.gitlab.com/handbook/engineering/devops/ops/verify/pipeline-authoring/team-resources", "title": "Pipeline Authoring Group Resources | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevOps Engineering\nOps Sub-department\nVerify Stage\nVerify:Pipeline Authoring Group\nPipeline Authoring Group Resources\nThe goal of this page is to document resources and recommendations for development patterns in the pipeline authoring group.\nOverview\nThe goal of this page is to document resources and recommendations for development patterns in the pipeline authoring group.\nFrontend Architectural Planning\nWe use a lightweight architecture planning process for new features and significant refactors.\nFor more details see\nthe architecture section\n.\ncamelCase\nCapitalization\nWhen using camelCase we usually abbreviate ‚Äúcontinuous integration‚Äù as\nCi\nand not\n, this makes our file naming consistent,\nfor example:\nMyCiComponent\n->\nmy_ci_component.vue\nmyCiFileMutation\n->\nmy_ci_file.mutation.graphql\nThis matches the\nCi\nin GraphQL types (e.g., CiJob, CiStatus) and other components.\nFrontend Testing\nWe follow the\nFrontend development testing standards and style guidelines\nplus some recommendations to write tests.\nTest fully rendered components\nWe use\nVue Test Utils\nto test our Vue components implementation, and we prefer\nto test our components rendering their entire DOM structure, this allows us to:\nEnsure our tests actually test the result our users see\nTest integration with components from other libraries (like\ngitlab-ui\n)\nUse our tests to confirm implementation changes behave as expected instead of needing to update tests when the implementation changes\nTest as far as possible real events, so they are sensitive to event changes but not implementation changes\nSee this example of our GitLab UI\nCombobox Spec\nTo support this while reaping the value of\nshallowMount\nwhere we can, we recommend the following approach:\nWrite tests using\nshallowMount\nwhile adhering to the ‚Äútest rendered elements‚Äù guideline.\nWhen\nshallowMount\nno longer renders the items that are to be tested, use\nmount\nWhen tests start to show performance issues (such as regularly failing the default timeout), consider restructuring the tests to use partially rendered components or to test actions lower down on the mounting stack\nAs\nshallowMount\nthis will stub most internal components by default, we will want to explicitly list some internal\ncomponents as\nstubs\n, so the test will run with the real\nimplementation of those components by adding them to the\nstubs\noption.\nWhen switching from\nshallowMount\nto\nmount\n, we recommend making the method an argument to the\ncreateComponent\nfunction with\nshallowMount\nas the default to be sure\nmount\nis only being used when needed.\nconst\ncreateComponent\n=\n(\noptions\n,\nmountMethod\n=\nshallowMount\n)\n=>\n{\nwrapper\n=\nmountMethod\n(\nComponent\n,\n{\n...\noptions\n})\n}\nThis is a simple example of the approach:\n// my_form_container_spec.js\nimport\n{\nGlButton\n,\nGlForm\n}\nfrom\n'@gitlab/ui'\nimport\n{\nshallowMount\n}\nfrom\n'@vue/test-utils'\n;\nimport\nMyFormContainer\nfrom\n'~/pipeline_authoring/my_form_container.vue'\n;\nconst\ncreateComponent\n=\n()\n=>\n{\nwrapper\n=\nshallowMount\n(\nMyFormContainer\n,\n{\n// ...\nstubs\n:\n{\nGlForm\n,\nGlButton\n,\n// the button will be fully rendered\n},\n});\n};\n// ...\nconst\nfindCommitBtn\n=\n()\n=>\nwrapper\n.\nfind\n(\n'[type=\"submit\"]'\n);\nconst\nfindCommitBtnLoadingIcon\n=\n()\n=>\nfindCommitBtn\n().\nfind\n(\nGlLoadingIcon\n);\n// ...\nit\n(\n'shows saving state'\n,\n()\n=>\n{\nexpect\n(\nfindCommitBtnLoadingIcon\n().\nexists\n()).\ntoBe\n(\ntrue\n);\n});\nLast modified May 26, 2025:\nSeparate DevOps and AI Engineering, deprecate Development (\n8a4a60ac\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 540}
{"doc_id": "03d2c4f5f541b4da", "url": "https://handbook.gitlab.com/handbook/people-group/people-compliance", "title": "Global People Compliance at GitLab | The GitLab Handbook", "text": "The Handbook\nPeople Group\nGlobal People Compliance at GitLab\nThe Global People Compliance team at manages all compliance-related initiatives across People Operations processes.\nGlobal People Compliance\nThe Global People Compliance team safeguards GitLab‚Äôs most valuable asset‚Äîour people‚Äîby implementing robust compliance frameworks that protect team member data while enabling our innovative all-remote culture to thrive across global jurisdictions.\nWe collaborate strategically with the entire People Group, Legal, Payroll, and other organizational teams to develop compliant processes throughout the team member lifecycle‚Äîfrom sourcing and screening to offboarding. Our work ensures GitLab meets both regulatory requirements and stakeholder expectations in an increasingly complex global landscape.\nWe proactively identify, assess, and mitigate compliance risks that could impact GitLab‚Äôs operations. Our team develops policies that protect GitLab from potential regulatory penalties, and ensures adherence to all applicable employment laws across multiple jurisdictions. Our compliance expertise directly supports GitLab‚Äôs strategic priorities by:\nEnabling confident expansion into new markets with clear regulatory guidance\nStreamlining compliant hiring processes to secure top talent globally\nProviding decision-making frameworks that balance innovation with compliance\nContact the Compliance Team\nPlease create a case in\nHelpLab\nfor the team to review\nMeet the People Compliance team\nCassiana Gudgenov\nTitle: Senior People Compliance Program Manager\nGitLab handle: @cgudgenov\nSlack handle: @cassiana gudgenov\nLast modified May 14, 2025:\nUpdate People Compliance handbook pages (\n9eb0ec15\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 228}
{"doc_id": "f9cff70f7361b3e7", "url": "https://handbook.gitlab.com/handbook/support/workflows/working_with_support_ops", "title": "Working with Customer Support Operations | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Workflows\nWorking with Customer Support Operations\nDocumenting the various types of Customer Support Operations related tickets and the escalation process to notify Support Operations.\nOverview\nCustomer Support Operations sits under Security, alongside teams like Corporate Identity and IT End User Support. As a corporate provider, Customer Support Operations is specifically tasked with providing support\nfor Customer Support\n.\nThis page exists primarily as a quick-reference, linking to sources of truth and making sure Customer Support has the information needed to get things done!\nResource\nLink\nIssue Tracker\nCustomer Support Operations Issue Tracker\nBug Report Template\nCreate Bug Report\nFeature Request Template\nCreate Feature Request\nIncident Handling\nSee\nIncidents\nSlack Channel\n#support-operations\nSystem Criticality Sheet\nCustomer Support Operations System Criticality\nImportant:\nAll issues for Customer Support Operations should be created in the\nCustomer Support Operations Issue Tracker\n.\nSelf-Service Options\nBefore creating an issue, check if your request can be self-serviced. The following items can be handled directly by Support team members:\nZendesk Managed Content\n- Updates to macros, triggers, and other Zendesk content can be managed directly by Support team members with manager approval. See:\nWorking on Zendesk Content\nSupport Team YAML Files\n- Changes to support team configuration files can be made through direct merge requests. Customer Support Operations must approve to merge. See:\nSupport Team YAML Files\nNote:\nIf an issue is opened for something that could have been self-serviced, the issue will be closed with instructions on how to self-serve the change. If you need help, reach out in\n#support-operations\nand we can guide you through!\nWorkflows\nTicket where customer is asking for support portal changes\nOccasionally, a customer might mis-file a ticket and send a request for support portal changes using a Support form. In these cases, please change the form to\nSupport Ops\nin Zendesk and Customer Support Operations will handle it from there. Please do not send a public reply (as that removes our SLA clock from the ticket).\nAsking general questions\nFor general questions and assistance, reach out via the\nsupport_operations Slack channel\n. From there, a member of the Customer Support Operations team will respond and work with you to help address the question.\nBasic Issue Flows\nAll requests for Customer Support Operations should be created in the\nCustomer Support Operations Issue Tracker\nusing the appropriate template. With the exception of a few\nself-service options\n, nearly everything starts with an issue!\nIf what you want to get done is:\nOn the roadmap?\nCreate a\nFeature Request issue\n!\nNot on the roadmap, but seems easy?\nCreate a\nFeature Request issue\n!\nMaybe easy, but maybe hard? I definitely know what I want though.\nCreate a\nFeature Request issue\n!\nReporting a bug?\nCreate a\nBug Report issue\n!\n‚Ä¶ well, actually, I don‚Äôt totally know yet.\nCreate an RFC issue in\nsupport-team-meta\n(or work otherwise within the\nChange Management in GitLab Support\nframework)\nIf you‚Äôre creating an issue, the Customer Support Operations team expects that:\nYou‚Äôre empowered to make decisions\n. That is, you‚Äôre a DRI at the appropriate level to steward your change or you‚Äôve been delegated that responsibility by an appropriate DRI.\nYou‚Äôre responsive.\nYou‚Äôre prioritizing working on the thing you want so that it can be shipped on time, and to spec.\nYou‚Äôll be ready to validate and sign off.\nWhen Support Operations deploys something to staging, you need to be ready to test (or delegate / organize testing) and sign off on acceptability before it can go live in production.\nMore about\nWorking with Customer Support Operations\n.\nMore about\nstages that Customer Support Operations uses to represent progress\n.\nBugs\nBugs should be reported using the\nBug Report Template\nin the Customer Support Operations Issue Tracker (project path:\ngitlab-com/gl-security/corp/cust-support-ops/issue-tracker\n).\nWhen creating a bug report:\nSelect the Bug template from the dropdown\nFill in all required fields, especially steps to reproduce\nSelect appropriate severity\nBugs are generally of a high priority to fix, and will get scheduled in the current iteration. Depending on workload, severity, fix complexity and\nsystem criticality\nmay get scheduled in the future.\nMore about the\nBug Report issue flow\n.\nFeature Requests\nThe focus for feature requests is on aligning them with our existing\nSupport Roadmap\n. For larger requests, you may need to work with the leadership team to escalate issues to re-plan any conflicts and protect strategic items. For smaller requests, they can often be added in as we go, as long as they don‚Äôt get in the way of delivering current roadmap items.\nFeature requests should be submitted using the\nFeature Requests Template\nin the Customer Support Operations Issue Tracker (project path:\ngitlab-com/gl-security/corp/cust-support-ops/issue-tracker\n).\nWhen creating a feature request:\nSelect the Feature template from the dropdown\nClearly describe the business need and expected outcome\nInclude any relevant stakeholders using the\n/cc @username\nsyntax\nMore about the\nFeature Requests issue flow\n.\nIncidents\nThings do break! Customer Support Operations is here to help.\nFirst, check the\nCustomer Support Operations System Criticality Sheet\nto determine the severity of the issue.\nIncident Reporting Process\nStart by posting in the\n#support-operations\nSlack channel (during\nGlobal Support Hours\n)\nWait for a response. Continue down this list if you get no response for:\n24 hours for issues with Administrative systems\n8 hours for issues with Business Operational systems\n30 minutes for issues with Business Critical Systems\n10 minutes for issues with Mission Critical Systems\nCreate a new PagerDuty incident\nwith ‚ÄúCustomer Support Operations‚Äù as the Impacted Service (See:\nSupport Operations On-Call Workflow\n)\nBe available to work with the on-call to develop a plan to resolve the problem\nWhen creating an incident issue, include:\nClear description of what‚Äôs happening\nImpact on users/customers\nAny error messages or screenshots\nSteps you‚Äôve already taken to troubleshoot\nMore about\nhow Customer Support Operations handles incidents\n.\nGeneral tips\nStart early\n- if you are the DRI for a key strategic item on the Support Roadmap, start working with Ops early. Create a tracking issue so a plan can be formed and blockers discovered early.\nDon‚Äôt ‚Äúsave up‚Äù work\n- if items are important to the business, they should be tracked. If they‚Äôre not tracked, they won‚Äôt get prioritized.\nHave strong opinions on outcomes\n- avoid strong opinions on technical implementation.\nDon‚Äôt be quiet\n- as a DRI, if a technical implementation isn‚Äôt looking like it‚Äôs going to meet the criteria, speak up whether it‚Äôs in the Validation stage or not. It‚Äôs better to ship the right thing a bit late than the wrong thing quickly.\nDeployments and Delivery\nUnless otherwise communicated, changes ship on the 1st of the month. This is to align any changes to metrics with month boundaries.\nOnce you‚Äôve signed off on work, make sure you‚Äôre following the steps in\nChange Management in Support - Rolling out a Change\nto make sure everyone on the team is aware.\nLast modified June 11, 2025:\nAdds self-serve notes (\nadab9230\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1167}
{"doc_id": "c544dc3d9fdfc454", "url": "https://handbook.gitlab.com", "title": "The GitLab Handbook", "text": "Company\nAbout GitLab\nValues\nMission\nVision\nCommunication\nCulture\nTeamOps\nCEO Readme\nOffice of the CEO\nE-Group Weekly\nEnvironmental, Social, and Governance\nHandbook\nAbout the Handbook\nHandbook Changelog\nHandbook Escalation\nHandbook Usage\nContribution Guide\nEditing the handbook\nHandbook Style Guide\nHandbook maintenance\nPeople Group\nAnti-Harassment Policy\nGlobal Volunteer Month\nHiring\nInclusion & Diversity\nLabor and Employment Notices\nLeadership\nLearning & Development\nOnboarding\nOffboarding\nSpending Company Money\nTalent Assessment\nTeam Member Relations Philosophy\nTotal Rewards\nTools and Tips\nEngineering\nCustomer Support Department\nDevelopment Department\nInfrastructure Department\nDeveloper Experience\nEngineering Productivity\nSecurity Practices\nOpen Source\nSecurity\nSecurity Standards\nProduct Security\nSecurity Operations\nThreat Management\nSecurity Assurance\nMarketing\nTeam Member Social Media Policy\nBlog\nBrand and Product Marketing\nEnterprise Data\nIntegrated Marketing\nSales Development\nMarketing Operations and Analytics\nGrowth\nDeveloper Relations\nCorporate Communications\nSales\nAlliances\nCommercial\nCustomer Success\nCustomer Success Management\nReseller Channels\nField Operations\nReporting\nSolutions Architecture\nFinance\nAccounts Payable\nAccounts Receivable\nBusiness Technology\nExpenses\nFinancial Planning & Analysis\nPayroll\nProcurement\nTax\nBoard meetings\nInternal Audit\nEquity Compensation\nProduct\nRelease posts\nAbout the GitLab Product\nBeing a Product Manager at GitLab\nProduct Principles\nProduct Processes\nProduct sections, stages, groups, and categories\nProduct Development Flow\nProduct Development Timeline\nData for Product Managers\nProduct Pricing Model\nCorporate Development / Acquisitions\nUX Department\nLegal and Corporate Affairs\nCommercial\nCorporate\nCorporate Development\nEmployment\nEnvironment, Social, and Governance (ESG)\nOperations\nPrivacy\nProduct\nRisk Management and Dispute Resolution\nTrade Compliance\nTake GitLab for a spin\nSee what your team could do with The DevSecOps Platform.\nGet free trial\nHave a question? We're here to help.\nTalk to an Expert", "num_words": 260}
{"doc_id": "0e608de8c5544afb", "url": "https://handbook.gitlab.com/handbook/security/customer-support-operations/workflows/zendesk/ticket-fields", "title": "Ticket fields | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCustomer Support Operations\nWorkflows\nZendesk\nTicket fields\nOperations workflow page for Zendesk ticket fields\nNote\nAll ticket field changes are handled via a standard deployment.\nCreating a ticket field\nFor these, you will need to create a corresponding ticket field file in the sync repo.\nYou should also do this in a way that creates a MR. Said MR should always be peer reviewed before merging (the MR should enforce this).\nThe exact nature of what you need to put into the YAML file will vary based on the issue‚Äôs request.\nBe sure to read\nWorking with sync repo files\nfor more information.\nEditing a ticket field\nFor these, you will need to locate the corresponding ticket field file in the sync repo and make changes to it.\nYou should also do this in a way that creates a MR. Said MR should always be peer reviewed before merging (the MR should enforce this).\nThe exact nature of what you need to put into the YAML file will vary based on the issue‚Äôs request.\nBe sure to read\nWorking with sync repo files\nfor more information.\nDeactivating a ticket field\nNote\nBe very cautious on these. You can break a considerable amount of things by deactivating a ticket field that is still actually in use.\nTo deactivate a ticket field, you must make the following changes in the corresponding ticket field file in the sync repo:\nMove the ticket field file from the active folder to the the corresponding location in the inactive folder (if it does not exist, create it)\nChange the value of the\nactive\nattribute in the YAML file to\nfalse\nYou should also do this in a way that creates a MR. Said MR should always be peer reviewed before merging (the MR should enforce this).\nDeleting a ticket field\nNote\nWe do not delete ticket fields except during an annual review of our ticket fields. Any other time, leave it as deactivated.\nIf you are looking for information about the annual review of ticket fields, please see\nAnnual Review workflow\nThe process to delete a ticket field is exactly as described in the\nticket fields documentation page\n.\nException deployment\nTo perform an exception deployment for ticket fields, navigate to the ticket fieldsa project in question, go to the scheduled pipelines page, and click the play button. This will trigger a sync job for the ticket fields.\nRepo links\nZendesk Global sync repo\nZendesk US Government sync repo\nLast modified April 3, 2025:\nMigrating support readiness handbook to security (\n9196a840\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 439}
{"doc_id": "66ff418cd7f0096b", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/developer-experience/dashboards", "title": "Developer Experience Dashboards | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nDeveloper Experience\nDeveloper Experience Dashboards\nThis handbook page serves as a central repository for all our Developer Experience dashboard details\nIn pursuit of a resilient, efficient, and fortified platform, our Test Platform sub-department provides instrumental\nsupport through the creation and maintenance of an array of dashboards. These critical tools capture detailed test\nhealth across the environments, flag performance anomalies, and contribute to rigorous test infrastructure.\nDashboards\nCategory\nLink (Internal Only)\nDescription\nTest Health\nE2E Test Status\nComprehensive overview of test suite health and status.\nQuarantined E2E Tests Dashboard\nShows age and number of Quarantined tests per stage\nTest Tooling\nE2E Test Execution Time\nMetrics and trends on end-to-end test execution times.\nDevelopment Analytics\nTest Flakiness (E2E Test)\nAnalysis of flakiness in end-to-end tests with real-time data.\nDevelopment Analytics\nTest Flakiness (Unit, Integration & System Test)\nStatistics on flakiness in feature and unit tests.\nEngineering Productivity\nTest Economy\nInsights into the cost-effectiveness of testing processes.\nDevelopment Analytics\nTest Infra Availability (E2E Test)\nDashboard indicating the current availability of E2E test infrastructure.\nDevelopment Analytics\nTest Contribution\nDeveloper Contribution To E2E Tests\nTracking developer engagement and contributions to E2E tests.\nTest Governance\nDevelopment Analytics\nPerformance Testing\nGPT Results\nGitLab Performance Tool test results from automated reference environment pipelines\nSelf-Managed Platform\nSelf-Managed Excellence\nReference Architectures\nReference Architecture issues created and closed per request type\nSelf-Managed Platform\nGitLab Environment Toolkit\nGitLab Environment Toolkit merge requests and issues per type\nSelf-Managed Platform\nGitLab Performance Tool\nGitLab Performance Tool merge requests and issues per type\nSelf-Managed Platform\nBug Tracking\nCustomer Bugs\nDynamic tracking of Customer bugs\nBug Prioritization\nBug prioritization based on burndown trends\nOperational Excellence\nTeam Operational Trends\nThis dashboard is designed to give us a deeper understanding of Test Platform sub-department‚Äôs operational effectiveness over time\nDevelopment Analytics\nTest Platform On-Call Metrics\nOn-call Trends\nDashboard indicating on-call engagement\nDevelopment Analytics\nContributing to the Dashboards\nIf you have any questions or suggestions about the dashboard, please contact the respective DRI or submit an issue in\nour\ntracking system\n.\nLast modified February 5, 2025:\nRename Quality/TP to Dev Ex (\n7aa0e635\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 357}
{"doc_id": "bfbc9d17c9e6efce", "url": "https://handbook.gitlab.com/handbook/engineering/releases/backports", "title": "Backports | The GitLab Handbook", "text": "The Handbook\nEngineering\nReleases\nBackports\nBackports overview\nThis section seeks to remove confusion around backports at GitLab. Please raise an MR to this page or reach out to the\nDelivery Group\nif you have questions. Also remember to check the\nBackports FAQ\nWhat kind of release do I need for my backport?\nThis flowchart can be used to guide you on what process you need. The ends of the flowchart are clickable links.\ngraph TD\nclick C \"https://docs.gitlab.com/policy/maintenance/#maintained-versions\"\nclick E \"/handbook/engineering/releases/backports/#what-if-my-backport-is-not-covered-by-the-maintenance-policy\"\nclick F \"/handbook/engineering/releases/#patch-releases-overview\"\nBackport principles\nBackports are delivered according to the\nMaintenance Policy\nand backport exceptions out of that policy are delivered on a best-effort basis and not guaranteed\nRelease Managers have the final say on backports that are not covered by the maintenance policy\nRelease Managers will schedule releases containing backports in a way that means customers are not given excessive amounts of upgrades\nBackport Process Overview\nThis section provides an overview of the end-to-end process.\nBackporting is a multi-step process. Here we outline the basic steps to develop and deploy a backport: The list of steps below is indicative of the typical tasks involved in a backport, but is not all-inclusive and does not cover all eventualities.\nEngineer identifies the issue within the software version that requires a patch or update.\nEngineer determines what patches, updates or modifications are available to address this issue in later versions of the same software.\nEngineer adapts the fix to be compatible with the older code version as required.\nEngineer raises MRs required to add fix(es)\nEngineer + Quality conduct robust testing to ensure that the backported code or backport package maintains full functionality within the system.\nEngineer addresses any unwanted side effects identified in the previous step. Repeat as many times as necessary\nRelease Manager tags a new release containing the fixes\nRelease Manager creates an official release\nRelease Manager publishes the release under a new tagged version.\nBackporting can be a very involved process requiring many cycles of back and forth for teams and individuals involved in the process.\nHow do I know if my backport is covered by the maintenance policy?\nYou can check the\nMaintenance Policy\nto see which GitLab versions are covered.\nWhat if my backport is not covered by the maintenance policy?\nIf your backport is not covered by the maintenance policy then it is not guaranteed. However, we realize that there is sometimes a need to backport a fix to more than one stable release, depending on the severity of the bug. Backports that are outside of the maintenance policy are performed at the sole discretion of the\nRelease Managers\n.\nYou can request a backport by:\nRaising an MR to the stable branches that you want to backport to\nEnsuring that the pipelines are green and no new issues are introduced\nRaising a\nbackport request\nin the\nrelease/tasks\nrepository\nPM DRI shares business impact analysis and justification for exception on backport request\nRelease Managers will accept or reject the backport request based on criteria including\nEstimated severity of the bug\nEstimated priority of the bug\nPotentially incurring data loss and/or security breach.\nPotentially affecting one or more strategic accounts due to a proven inability by the user to upgrade to a\nmaintained version\n.\nImpact to other planned release tasks\nWait for confirmation and approval from the RMs\nCommunicate to your stakeholders if/when the release is available on our\nreleases blog\nPlease note that this is done on a case by case basis and not covered by any of our Maintenance Policies or releases.\nBackports FAQ\nWhat is a Backport?\nBackporting is when a software fix or update is taken from a recent software version and applied to an older version of the same software.\nThis process can be as straightforward as updating several lines of code; it can also involve a major overhaul that is spread across multiple areas of the software requiring tight coordination. In the latter case, applying a backport may be impractical as compared to upgrading to the latest version of the software.\nAt GitLab, we backport security fixes and bug fixes according to the\nMaintenance Policy\n.\nIs that the same as a Patch Release?\nNo it‚Äôs not. Backporting is a catch-all term for any activity that applies updates or patches from a newer version of software to an older version. At GitLab we have a specific\nPatch Release process\nthat is applied according to the\nMaintenance Policy\n. There is a separate\nexception process\nfor backports that are outside the scope of our maintenance policy and these are delivered on a best effort basis and not guaranteed.\nHow do I get a backport for my bugfix/security issues?\nIf your backport is a bug or a security fix and covered by the maintenance policy, please follow the\nPatch Release Process\n.\nFor anything outside of the maintenance policy, please follow\nthe exception process\nWhat should Product Managers consider when approving a backport?\nBackports require multiple engineers to apply a fix through multiple versions and are time intensive. When reviewing a backport requrest, product managers should consult our\nbackport policy\nto ensure that the backport proposal meets the criteria. Product managers should ensure that the severity, priority, customer impact and the potential risks associated with not backporting are properly documented before approval.\nCommon Backporting Issues and Considerations\nAdditional Release Manager and User Capacity\nBackports can be intensive and require many interactions between different groups to get right an deliver successfully. It is likely that a significant amount of time must be set aside to complete this process.\nLong-term Support and Maintenance Costs\nBackports can be an effective way to address security flaws and vulnerabilities in older versions of software. However, each backport introduces a fair amount of complexity within the system architecture and can be costly to maintain.\nFor example, Python 2.7.18 was the final official release of Python 2. In order to remain current with security patches and continue enjoying all of the new developments Python has to offer, organizations needed to upgrade to Python 3 or start freezing requirements and commit to legacy long-term support.\nBackporting Side Effects\nEach backport can create many unwanted side effects within the application environment. Just as an upstream software application affects all downstream applications, so too does a backport applied to the core software.\nAdditional Security Implications and Vulnerabilities\nBackporting is a common technique to address a known bug within the IT environment. At the same time, relying on a legacy codebase introduces other potentially significant security implications for organizations. Relying on old or legacy code could result in introducing weaknesses or vulnerabilities in your environment. These issues affect not only the main application but also all dependent libraries and forked applications to public repositories. It is important to consider how each backport fits within the organization‚Äôs overall security strategy, as well as the IT architecture.\nLast modified June 26, 2025:\nUpdate bug fix backport policy docs to reflect the extended maintenance policy (\n9d0a9496\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1172}
{"doc_id": "f17a9757dd708d8d", "url": "https://handbook.gitlab.com/handbook/company/infrastructure-standards/realms/sandbox", "title": "Sandbox Cloud Realm | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nInfrastructure Standards\nInfrastructure Standards - Realms\nSandbox Cloud Realm\nThis handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab.\nUser Portal\ngitlabsandbox.cloud\nDocumentation\nGlobal infrastructure standards\nGlobal labels and tags\nInfrastructure policies\nIssue Tracking and Collaboration\nHackyStack issue tracking\n(open source code feature development)\nCorpSec Infra issue tracking\n(GitLab-specific topics and requests)\n#sandbox-cloud-questions\nSlack channel to ask questions and get help.\nCode and Examples\nHackyStack README\nHackyStack source code\nHackyStack screenshots\nInfrastructure-as-Code\nSandbox Cloud - Project Templates\nSandbox Cloud - Terraform Modules\nSandbox Cloud - Ansible Roles\nIT Infrastructure Realm IaC - Terraform Configuration for gitlabsandbox.cloud\n- Restricted access\nIT Infrastructure Realm IaC - Ansible Configuration for gitlabsandbox.cloud\n- Restricted access\nOverview\nThe Sandbox Cloud is an automated provisioning platform for creating an AWS account or GCP project that you can use for demo/sandbox/testing purposes and is paid for by GitLab with consolidated invoice billing (no credit card required).\nThis platform is powered by\nHackyStack\n, an open source project created by\nJeff Martin\nand maintained by Jeff Martin and\nDillon Wheeler\nto automate the access request process using Okta integration, auto-assigning roles and permissions based on your department, and using the cloud provider API for provisioning your AWS account and/or GCP project.\nYou can learn more in the\nHackyStack High-Level Intro\npresentation.\nThe Sandbox Cloud is managed by the\nIT Engineering\nteam. Please tag\nJeff Martin\nin Slack with any questions.\nHow to Get Started\nWe are currently at\nbeta\nstability. Please post in\n#sandbox-cloud-questions\nif you see unexpected behavior.\nIndividual AWS Account or GCP Project\nAny team member can use the self service instructions below to provision an AWS account or GCP project for your individual use (sandbox, testing, etc.). You cannot invite other team members to individual accounts for security reasons.\nVisit\nhttps://gitlabsandbox.cloud\nand sign in with your Okta account.\nNavigate to\nCloud Infrastructure\nin the top navigation.\nClick the purple\nCreate Individual Account\nbutton.\nChoose the\ncloud provider\nand\ncloud organization unit\nfrom the dropdown menu.\nIf no options are present in the dropdown list for the organization unit, your department has not been created in our database yet due to a department name change or addition in the HRIS. Please ask in\n#sandbox-cloud-questions\nto have it added.\nClick the green\nCreate Account\nbutton.\nYour account will take 2-5 minutes for the AWS API to finish the provisioning process while the AWS services are activated for your account.\nPlease refresh your browser window every ~60 seconds until you see that your user account has changed from\nProvisioning\nto\nActive\n.\nSee the instructions below for\nAccessing your AWS Account\nor\nAccessing your GCP Project\n.\nYou can sign-in with Okta, however please don‚Äôt create a Cloud Account unless you intend to provision AWS resources. You can see the\nscreenshots\nof everything that a user sees.\nIs your current AWS account experience problems?\nPlease ask for help in\n#sandbox-cloud-questions\n. If your problems are validated and approved for getting a new AWS account, please use the\nNew AWS Individual Account Rebuild Request\nissue template.\nAutomated Shutdown Policy\nFor cost saving and exposure reduction measure, any GCP compute engine instances in an individual account (ex.\ndmurphy-a1b2c3d4\n) are powered down every Friday at 23:59 UTC starting 2023-02-03. You will receive a Slack bot notification 24 hours in advance for any instances that are affected with instructions for adding a label to the instance if you need to prevent power off.\nIf an instance is powered off, you can simply power the instance back on when you‚Äôre ready to work again.\nWe are not charged for the hours that compute instances that are not powered on (e2-standard-4/4vCPU/16GB costs $0.13/hr or $96.48/mo). Storage for a powered down instance is cheap and a 20GB persistent disks cost $0.80/month.\nThis has immediate 28%+ cost savings by not having ephemeral infrastructure running on Saturdays and Sundays. Additional cost savings since we are not charged until you power the instance back on (could be days, weeks, or months later). This also covers abandoned instances that were only used for a few hours for a demo.\nWe will be working on AWS accounts in a future iteration.\nGroup/Team AWS Account or GCP Project (Non-Production)\nAny team member can request a new AWS account or GCP project for a specific project or working group, or for general usage by their department group for shared non-production resources.\nNo RED data is allowed in these accounts/projects.\nAny RED data must be hosted in production AWS accounts or GCP projects managed by the appropriate Infrastructure Realm administrators (ex.\neng-infra-saas\n,\nit-infra\n, etc.).\nSelf-service creation and IAM management is not available yet for end users in HackyStack. In the meantime, we use access request style issue templates as our boring solution for security compliance reasons and the HackyStack administrators provision accounts and users using the Admin CLI.\nIssue Template\n: New AWS Group Workload (Multi-user) Account Request\nIssue Template\n: Add/Remove IAM Users from AWS Group Workload Account\nIssue Template\n: New GCP Group (Multi-user) Project Request (\nProvisioner Runbook\n)\nIssue Template\n: Add/Remove IAM Users from GCP Group Project\nProduction Environments\nProduct Related\nFor any staging or production(-esque) infrastructure services that are customer facing, contain\nRed or Orange data\n, related to the GitLab product or GitLab.com SaaS, or Engineering sponsored services, please contact the\nReliability Engineering\nteam for guidance on next steps in the\n#infrastructure_lounge\nSlack channel.\nMost environments are typically created in the\nconfig-mgmt project\nusing the\nCreate a new environment\ninstructions.\nYou can learn more about GitLab.com SaaS on the\nProduction Architecture\nhandbook page.\nAny projects with\nyellow or green\ndata usually are better suited for self management using\nGroup Projects\nusing\nInfrastructure Standards\nguidelines.\nBusiness Related\nFor any infrastructure services related to business operations and our tech stack, please contact the IT team in\n#it_help\nfor guidance on next steps. Most of our\ntech stack\nare SaaS-based and hosted by the respective vendor.\nNew SaaS applications should go through the\nProcurement Process\nand are managed by the respective department‚Äôs\nsystem owners\n.\nSelf-hosted application infrastructure is determined on a case-by-case basis and is architected in collaboration with CorpSec Infrastructure,\nInfrastructure Security\n,\nApplication Security\n, and\n3rd Party Risk\n. Please tag\n@vlad\nin an issue for preliminary guidance on new services. If you do not have an issue yet, please create one in the\nCorpSec Infrastructure issue tracker\n.\nAccessing your AWS Account\nSign in to\nhttps://gitlabsandbox.cloud\nand navigate to\nCloud Infrastructure\n.\nIf you have not created an account yet, click the\nCreate Individual Account\nbutton and use the form to create a new account. If you already have an account, click on the title or the gear icon for the AWS account you want to access.\nOn the\nCloud Account\ndetails page, click the\nView IAM Credentials\nbutton in the top right corner to open up a popup modal window.\nYou will see the\nAWS Console URL\n,\nUsername\n, and\nPassword\nthat you can use to sign in to your AWS account. The 12 digit number at the beginning of the URL is your AWS Account ID/Number.\nCreate a new 1Password record in your Private vault to save these credentials.\nYou can click on the link to open the AWS console, or you can close the modal window and click the\nOpen AWS Web Console\nbutton on the\nCloud Account\ndetails page.\nUse the provided\n,\nUsername\n, and\nPassword\nto sign in to your new AWS account.\nBe careful that your browser doesn‚Äôt autofill saved credentials for a different account.\nAfter you sign in, you should navigate to IAM and add a Virtual MFA device for your user account and add a One-Time Password (OTP) to your 1Password record.\nYour IAM user account has\nAdministratorAccess\nto be able to perform any action inside of your AWS account. We do not provide team members access to the\nroot\nuser account since we only use this for break glass security incidents or related administrative activity by the\nInfrastructure Realm Owners\n.\nAccessing your GCP Project\nSign in to\nhttps://gitlabsandbox.cloud\nand navigate to\nCloud Infrastructure\n.\nIf you have not created an account yet, click the\nCreate Individual Account\nbutton and use the form to create a new account. If you already have an account, click on the title or the gear icon for the GCP project you want to access.\nOn the\nCloud Account\ndetails page, click the\nView Credentials\nbutton in the top right corner to open up a popup modal window.\nYou will see the\nGCP Console URL\nand username. Since GCP uses Google authentication, you simply need to be signed in with your GitLab email address on Google. HackyStack has added the\nOwner\nGCP IAM role to your email address when the project was created. Your project ID is in the format of\n{emailHandle}-{cloudAccountShortId}\n. You can choose this project from the dropdown list when accessing a different project in the GCP console.\nAfter accessing your project for the first time, you will be prompted to enable the service for each of the GCP services that you want to use in your GCP project. This is expected behavior and will take a few seconds and is a one time step during project initial configuration.\nDomain Names\nSee the\nDomain Names and DNS Records\nIT guide internal handbook page for more details.\nTerraform Environments\nIn the\nHackyStack v1.11 (November 2021) release\n, we introduced Terraform environment generation for GCP projects and a lot of underlying automation for GitOps with alpha stability. AWS will be supported in a future iteration.\nLucidChart Architecture Diagram Edit Source\nLucidChart Architecture Diagram View Source\n(password\nWAUBVZA3bneq4oWx\n)\nHow Terraform Environments Work\nNew GitLab Omnibus instance for securely hosting GitLab Terraform (GitOps) projects for all team members when they create a Cloud Account with GitLab Sandbox Cloud.\nNew\nGitLab Project templates\nwith Terraform scaffolding and\neasy-to-use Terraform modules\n. We provide the foundation for you to use any of the\nTerraform.io Registry providers or modules\nwith built-in support for the Google Cloud provider.\nEvery GitLab Sandbox Cloud GCP project now has an automatically created GitLab group and a\nstarter GitLab project with a GitOps Terraform configuration scaffolding\nwith provisioning automation powered by GitLab CI. This allows team members to start deploying resources with Terraform in just a few minutes without dealing with Terraform set up, while complying with security best standards.\nWe will have additional project templates released throughout the coming months that provide pre-configured environments that you can provision with just a few clicks. This includes\nOmnibus/Runner/Cluster all-in-one environments\n, Kubernetes cluster environment, etc. We also have the foundation to be able to explore how to support\nGitLab Environment Toolkit\n.\nYou can also easily create additional Terraform projects in the Sandbox Cloud UI for different environments or configurations in the same Cloud Account to allow you to isolate your module/resource configuration based on the use case that you‚Äôre experimenting with.\nHow to Create a Terraform Environment\nSign into\nhttps://gitlabsandbox.cloud\nCreate a Cloud Account in GCP (GCP Project) or navigate to an existing project.\nClick the\nCreate Terraform Environment\nbutton and fill out the form:\nChoose your Cloud Account from the\nCloud Account\ndropdown.\nChoose the template you wish to use from the\nEnvironment Template\ndropdown. If this is your first time, use the\ngcp-sandbox-environment-template-v2-########\ntemplate.\nInput a name for your environment in the\nEnvironment Name (Alphadash Slug)\ntext field.\nAfter the Environment is created, click the\nView Terraform Configuration\nbutton. This is hosted on a new GitLab instance at\nhttps://gitops.gitlabsandbox.cloud\n. Your GitLab instance credentials can be found in the View GitOps Credentials button modal.\nHow to Use Terraform Environments\nSign into\nhttps://gitops.gitlabsandbox.cloud\nusing your generated credentials on\nhttps://gitlabsandbox.cloud\n. Keep in mind that this is\n{firstInitial}{lastName}-{hash}\nand not your normal GitLab username.\nNavigate to the project for the Terraform environment that you just created. You can quickly access the project from the link on the Cloud Account page on\nhttps://gitlabsandbox.cloud\n.\nOn your local computer navigate to your\n~/.ssh\nfolder and generate an SSH key\nssh-keygen -t rsa -b\n4096\n-C <name_of_project>\nNavigate to terraform/main.tf on this project and copy and paste your public key. See the example below\n#     -------------------------------------------------------------------------    ----\n# Add your Terraform modules and/or resources below this line\n#     -----------------------------------------------------------------------------\nlocals\n{\nssh_key\n=\n\"<RSA public key here>\"\nnormalized_env_prefix\n=\n\"sr-\n${\nvar\n.env_prefix\n}\n\"\ntags\n=\n[\n\"sr-firewall-rule\"\n,\n\"\n${\nlocal\n.normalized_env_prefix\n}\n-firewall-rule\"\n]\n}\nRun a new CI pipeline. After the\nPlan\njob completes, trigger the\nDeploy\njob. (Notice how you haven‚Äôt had to do any configuration).\nWatch the\nterraform apply\noutputs as your new environment is spun up with a sample Ubuntu virtual machine for testing with. You can add additional Terraform resources as you see fit (see below).\nNavigate to the GCP console using the link on\nhttps://gitlabsandbox.cloud\nto view the deployed VM. Feel free to connect to the VM via SSH using the\ngcloud\ncommand or Cloud Shell.\nRun the GitLab CI job for\nDestroy\nto clean up your resources.\nYou can update the\nterraform/main.tf\nfile in the Git repository to add more Terraform resources or modules.\nSimply run the\nDeploy\nCI pipeline job to deploy your resources.\nDelete an AWS account or GCP project\nCurrently, deleting an AWS account or GCP project must be performed manually by IT Ops. This is done during offboarding for operational consistency. However, outside of offboarding, you must make a best effort to delete all resources within the account yourself. There may be a nominal monthly cost of a few dollars a month to keep the account in existence. At this time, this cost is deemed acceptable.\nBackground Context and Problem Statement\nThe oversimplified user story is ‚ÄúI need to spin up VM(s) or cluster(s) in GCP or AWS to try something (anything, may not be GitLab product specific), what‚Äôs the company infrastructure standards for doing that?‚Äù\nThe goal is to create a frictionless approach for technical team members that includes the tagging needed for cost allocation, best practice security configurations, and streamline the provisioning of infrastructure without needing to wait several days or weeks for an access request to be approved and provisioned.\nThis also reduces the burden on the accounting team that processes expense reports for team members each month. Each team member‚Äôs account is now part of consolidated billing.\nHistory\nOver the years, our non-production infrastructure resources have grown organically without accountability, cost controls, naming conventions, provisioning automation, or security best practices. This includes resources created in the GCP gitlab-internal project, AWS gitlab-np account, and DigitalOcean using\ndev-resources\n.\nRecent iterations\nEpic 257\nwas created to iterate on our processes. In FY21-Q3, we created company-wide\ninfrastructure standards\nwhich solved the ‚Äúnaming things is hard‚Äù problem with\nlabels, tags, and naming conventions\nin our AWS and GCP organization accounts. The infrastructure standards define\nrealms\nto create separate security boundary namespaces for different use cases. For our sandbox use cases, we‚Äôve created a\nsandbox realm\nfor individual users and\ndepartment realms\nfor shared collaboration projects, notably the Engineering Development realm which allows each of the\ndepartment groups\n(functional teams) to have a shared AWS account or GCP project for creating infrastructure.\nCurrent iteration\nJeff Martin developed the first release of\nHackyStack\nthat powers the GitLab Sandbox Cloud. We developed the tooling in-house since the existing industry tools only solve 1-3 of the\nTechnical Problems We‚Äôre Solving\nand we wanted to automate the workflow end-to-end.\nWe are developing HackyStack as an open source project to allow other infrastructure or IT team to simplify their processes for provisioning sandbox accounts. HackyStack is not designed for individual use (yet). As we evolve, we‚Äôll be able to advocate HackyStack to partners and customers for deploying demo, testing, or training infrastructure without long manual provisioning documentation or burdening internal infrastructure team members.\nBusiness and financial impact\nAll infrastructure resources are associated with a user and department for cost allocation\nReduced or eliminated expense reports with AWS invoices for individual usage (consolidated billing)\nBudgets and cost controls with Slack notifications to reduce abandoned test environment costs\nAutomated access request and provisioning process for IT Ops\nStandardized organizational hierarchy and naming schema for AWS accounts and GCP projects\nAutomated security best practice controls and least privilege rights\nTechnical problems that HackyStack is solving\nSelf-Service Provisioning:\nCreating an ‚Äúeasy button‚Äù for technical users at a company to get access to an AWS account or GCP project with zero manual provisioning by the IT team.\nCloud Agnostic:\nProviding a universal interface that is cloud provider agnostic so you don‚Äôt need to create different architecture and provisioning processes for AWS, GCP, etc.\nHierarchy:\nDefining a standard reference architecture for organizational unit hierarchy.\nAuto Labeling/Tagging:\nApply labels and tags to resource for cost management, infrastructure-as-code, and security policy compliance without users needing to remember to add tags.\nBilling Costs per User:\nUnified billing metrics across all cloud providers on a per-user, per-account/project, and per-group/team level.\nAutomated Access Requests:\nSupplementing single sign-on (SSO) providers with pre-auth automated group membership provisioning with seamless manager approval(s)\nAutomated Access Approval Provisioning:\nSupplementing single sign-on (SSO) providers with post-auth provisioning of infrastructure resources in one or more provider APIs.\nGitOps Infrastructure-as-Code Provisioning:\nAutomatically creating Git projects with Terraform infrastructure-as-code scaffolding with security best practices that use CI/CD automation.\nStandardized Infrastructure-as-Code Library:\nLinking to a curated library of Terraform modules for easily deploying common infrastructure elements that follow company security best practices.\nDaily Workflow Cost Controls:\nSlack bots and notifications for users to easily provision or destroy infrastructure and threshold cost/usage report notifications.\nTech Stack\nLaravel\n- web portal, CLI application, API provisioning handler\nMySQL v5.7 - database\nTerraform v0.13+\n- Infrastructure as Code configuration\nGoogle Cloud\nGitLab API\n- For Git SCM of Terraform configurations\nGitLab CI\n- For automated Terraform deployments\nThis project was built using Laravel instead of other viable languages due to Jeff‚Äôs prior experience and proficiency with Laravel to achieve the most efficient time to business value. This builds on the success of the\nGitLab Demo Systems\nthat is powered by the\ndemosys-portal\n.\nFor those who are not familiar with Laravel, it is the PHP equivalent of\nRuby on Rails\nand\nDjango\nand has seen\ntremendous community popularity\nin recent years since PHP has made revolutionary improvements in recent years with PHP 5.x and PHP 7.x. This project also allows us to dogfood GitLab CI/CD capabilities for PHP projects.\nRoadmap\nSee the issue trackers for the latest up-to-date information.\nHackyStack issue tracking\n(open source code feature development)\n[CorpSec] Infrastructure issue tracking](\nhttps://gitlab.com/gitlab-com/gl-security/corp/issue-tracker/-/issues\n) (strategic or GitLab-specific issues)\nCurrent Projects\nReleased in v0.3\nAdd GCP project provisioning\nReleased in v1.11\nCreate GitOps project per Cloud Account\nReleased in v1.11\nAdd Terraform module library for users\nit-infra#86 Project Playground\n: Deprecate shared AWS accounts and GCP projects with legacy configurations including\ndev-resources\nand\nsupport-resources\n.\nReleased in v0.2\nCreate new group accounts with Admin CLI provisioning\nAdd self-service provisioning and member management for group accounts\nAdd automated access request audit reporting with IT ops issue tracker\nAdd cost and usage reports for AWS and GCP\nAdd Slack bots for easy infrastructure cost reporting and destroy button\nImplement and automate the GitLab Environment Toolkit (GET)\nFuture Planning Themes\nPhase 4\n- Automated provisioning of AWS accounts and GCP projects for each user and team with streamlined/automated access requests (aka ‚ÄúAutomate the manufacturing of everyone‚Äôs green LEGO board‚Äù). This is being achieved with the HackyStack open source project that Jeff is building.\nPhase 4.5\n- Migrate everyone‚Äôs resources in shared accounts into respective isolated accounts and apply labels/tags for cost management and reporting. See\nit-infra#86 Project Playground\nfor details.\nPhase 5\n- Curate centralized library of Terraform modules, Ansible roles, Packer images, Docker images, and other scripts that have best practice security standards are used for deploying common infrastructure (aka ‚ÄúProvide everyone a box of LEGO bricks and the tools to deploy them‚Äù). Integrate GitLab Environment Toolkit for deploying GitLab in decentralized test environments (user sandboxes, community member environments, etc). This will be open source with the community so partners and customer POCs can take advantage of what we have. This will solve Sid‚Äôs request to ensuring we‚Äôre all on the same page and using the same library for the millions of GitLab users.\nPhase 6\n- Create ‚Äúeasy button‚Äù for deploying the library of infrastructure (aka the LEGO kits) into a topology builder.\nProduct and Revenue Enablement\n- Since a lot of provisioning functionality uses GitLab CI/CD and GitOps, we are dogfooding the GitLab product and allows users to manage their infrastructure-as-code in a GitLab repository and extend capabilities with other GitLab features as they see fit.\nHackyStack and GitLab Premium Features\n- We will eventually add premium features to HackyStack that would require features included with a GitLab paid subscription.\nHow to Contribute\nPlease post your ideas on Slack or in the issue tracker so we can discuss the best ways to implement them.\nThe GitLab Sandbox Cloud is a part-time side project for Jeff Martin, so we are not able to commit to firm timelines for feature development. We will try to resolve bugs promptly, however please comment in an issue and tag\n@jeffersonmartin\nif there is a feature or capability that needs to be prioritized.\nPlease direct any questions about the Sandbox Cloud or HackyStack to Jeff Martin or Dave Smith.\nSandbox Realm Labels and Tags\nThis handbook section defines the latest iteration of infrastructure standards for AWS and GCP across all departments and groups at GitLab.\nLast modified May 16, 2025:\nMove existing security standards to new section, which includes an index (\n840eb803\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3635}
{"doc_id": "4e3c4b41a45daf47", "url": "https://handbook.gitlab.com/handbook/security/product-security/application-security/vulnerability-management", "title": "Application Vulnerability Management Procedure | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nProduct Security\nApplication Security\nApplication Vulnerability Management Procedure\nPurpose\nThis procedure applies to vulnerabilities identified in GitLab the product or its dependency projects and ensures implementation of the\nVulnerability Management Standard\n. This procedure is designed to provide insight into our environments, promote healthy patch management among other preventative best-practices, and remediate risk; all with the end goal to better secure our environments and our product.\nScope\nThe procedure laid out here applies to vulnerabilities identified in GitLab the product or its dependency projects.\nIssues in Scope\nDuring the time period defined for the backlog review issues labeled with\nbug::vulnerability\nwill be reviewed.\nBelow is a non-exhaustive list of what may be in scope:\nGitLab (gitlab-org/gitlab)\nHackerOne\nbug::vulnerability\nGitaly\nPages\nRunner\nHackerOne\nbug\nShell\nCustomers\nGitLab Dedicated\nRoles & Responsibilities\nRole\nResponsibility\nAppsec Engineers\nThe stable counterpart for each development team will be responsible for ensuring the backlog is accurate and assisting the development team review and triage the backlog for their team. For teams with larger backlogs, help will be requested from other engineers.\nDevelopment\nResponsible for reviewing the backlog, triaging, and remediating vulnerabilities according to procedure.\nAppsec Manager(s)\nResponsible for providing support and help make determinations for findings that need additional input.\nSecurity Leadership\nResponsible for making final determination on risk acceptance (exceptions).\nProcedure\nVulnerability Reports\nVulnerability reports have many sources but always end up as an issue in GitLab.\nSome sources include:\nHackerOne reports, which are imported as GitLab issues in the relevant project (see\nHackerOne Process\n)\nUsers or customers, often submitted via\nsecurity@gitlab.com\nor ZenDesk (which are redirected to HackerOne or the GitLab issue tracker)\nValid scanner findings, which are imported directly from the vulnerability reports page (see\nthis documentation\n)\nConfidential issues created in GitLab repositories, typically by users, customers, or GitLab team members\nEngaging Product Teams\nOnce the issue is created, a security engineer will set the correct\n~group::\nand\n~devops::\nlabels and\n@\n-mention the engineering and product managers for the team that owns the affected feature.\nThe security engineer can try to find a group based on the last people who\nmodified the code by using the\ngit blame\nfeature or by asking in the\n#development\nSlack channel.\nOccasionally the receiving group won‚Äôt be the correct one, but the security engineer and the group can work together\nto find the appropriate group to reassign to. A\n~devops::\nlabel is good enough if a\n~group::\ncannot be determined. In this case,\nthe security engineer should assign the issue to the stage‚Äôs director/Sr. EM.\nIf an issue is judged to\nnot\nbe a vulnerability but rather a security enhancement, it will be made public,\nlabeled\n~\"type::feature\"\nand the prioritization will be left to the product team as with any other regular issue. (See:\nVulnerability vs. Feature vs. Bug?\n). For vulnerabilities, the security engineer will set the\n~severity::\nand\n~priority::\nlabels and those will determine the due date and SLO for the issue as described\nin the main Product Security page of the handbook\n.\nIf the report is a\n~severity::1\nreport,\nthere is a special procedure to follow\nto engage SIRT and leadership.\nFixing The Vulnerability\nVulnerabilities in the GitLab web application and all other products bundled with our Omnibus packages are fixed following the\npatch release process\n. GitLab has two types of security releases: a regular monthly release, and a critical security release whenever a\n~severity::1\nissue is reported. See the\nSecurity Releases\nsection of the main Product Security handbook page for more information.\nIf you‚Äôre working on a vulnerability that you feel could be treated as a security enhancement and skip the security release process, feel free to ping\n@gitlab-com/gl-security/product-security/appsec\n.\nGitLab products that follow an independent release cycle and are not aligned with the monthly GitLab security release are also required to have a process for developing security fixes and disclosing them to the customers. Either the\nGitLab patch release process\nor a recommended bare minimum process as below can be followed:\nDo not fix the security issue in public so that the vulnerability and the fix are not disclosed before it is ready to be publicly disclosed. Use a security mirror project under the private\nSecurity group\nfor working on the security issue. In case the product is maintained in a private project then the fixes can be done directly in that project.\nGet the security fix reviewed by Appsec team.\nRequest the Appsec team create a CVE request for the fixed vulnerability if the product is released to customers for their own installation.\nNotify customers\nabout security fixes.\nDisclose the security issue following the\ndisclosure policy\n.\nFixing In Public\nThe Application Security Team may give approval for a security issue to be addressed in public, either wholly or in part. Public issues and MRs must never include information that should remain confidential. Also, backports are not required for security issues fixed in public. Application Security engineers should:\nFirst, evaluate whether the entire issue can be\nreclassified\nand made public.\nSecond, consider creating a\npublic linked issue\nfor specific work items.\nFinally, if the issue must remain confidential and creating additional issues is not desired then update the issue with a clear implementation proposal on what can be done in public and what must remain confidential, and add the\n~\"security-fix-in-public\"\nlabel.\nThe security team monitors for unintended information disclosure via public MRs referencing confidential issues and will delete public branches and MRs that do not follow this process.\nNotifying GitLab Users\nFixed vulnerabilities are mentioned in the\nsecurity release blog posts\nand it‚Äôs possible to\nreceive notifications\neither through email or RSS.\nIssues that were handled outside of the security release process can be mentioned in the regular release posts if the product manager deems it appropriate.\nSecurity issues fixed in GitLab products may be mentioned in the security release blog post only if they are released along with the monthly GitLab security release. All security issues that need to be mentioned in the security release blog posts are expected to be linked to the\n~\"upcoming security release\"\nissue. If linking is not possible, please contact the\nSecurity release managers\nto include security issue in the security release blog post.\nGitLab products that follow an independent release cycle and are not aligned with the monthly GitLab security release could make use of\nCHANGELOG.md\nfile or a separate security advisory file in the project repository to publish details about security fixes in their new releases.\nBacklog Review\nThe application security team will do reviews of the vulnerability backlog to ensure\nthat it accurately reflects the vulnerabilities present in the product. The frequency of\nthese reviews will be determined based on compliance requirements or as determined by the\nteam. The process is intended to determine if open issue are still valid, can be closed,\nor are eligible for risk acceptance.\nLabels\nScoped labels will be used to categorize each issue. The labels are as follows:\n~security-backlog::valid\n~security-backlog::closed\n~security-backlog::reclassified\n~security-backlog::risk-acceptance\n~security-backlog::needs-input\n~security-backlog::review-complete\nIssue Review Process\nFor each issue, it‚Äôs categorization will need to be determined. The following are guidelines\nthe appsec engineer should follow to determine the appropriate category, and the steps that\nshould be taken.\nReview Complete\nThe\n~security-backlog::review-complete\nlabel should be applied to issues that have been reviewed to help us filter and track.\nValid\nAn issue is\nvalid\nif it is a vulnerability that continues to be present in the product.\nApply the\n~security-backlog::valid\nlabel\nClosed\nAn issue is\nclosed\nif it is determined that the issue has previously been fixed,\nis a known duplicate of another issue, or is not longer relevant due to evolution of the product.\nApply the\n~security-backlog::closed\nlabel\nLeave a comment stating the determined reason and close the issue.\nIf duplicate: Use the\n/duplicate <#issue>\nslash command to close issue\nReclassified\nAn issue is\nreclassified\nif it can be considered a\n~type::feature\n,\n~type::maintenance\n, or a non-security\n~type::bug\n, based on the evolution of the product, our threat model, or our understanding of the issue. Use the\nVulnerability vs. Feature vs. Bug\nquestions below to guide you.\nApply the\n~security-backlog::reclassified\nlabel\nRemove severity and priority if assigned by a Security Engineer\nEither:\nRemove the\n~type::bug\nlabel and apply the appropriate label.\nRemove the\n~security\nlabel.\nLeave a comment stating the determined reason for the reclassification.\nReview the issue for any confidential information and make it public if possible.\nNeeds Risk Acceptance\nThe general guidelines for issues eligible for risk acceptance are laid out below. There is no perfect formula, so\nthe judgement of the engineer will be relied upon.\nLong-lived, with little evidence of an upcoming fix\nCould it be made public with no impact?\nCould it be labeled ~‚ÄúSeeking community contributions‚Äù?\nCould it be ~security::reclassified as\n~\"type::maintenance\"\nby the product managers based on a use case? (e.g. Guest user can see a count of X but don‚Äôt have access to view individual X)\nIs it S3/P3 or lower?\nIf an issue is eligible for risk acceptance:\nAdd comment stating why the issue should be considered for risk acceptance\nApply the\n~security-backlog::risk-acceptance\nlabel\nSecurity will follow\nVulnerability Management Standard Risk Acceptance (Exceptions)\nNeeds Input\nAn issue\nneeds input\nif the appsec engineer cannot determine the appropriate category.\nApply the\n~security-backlog::needs-input\nlabel\nVulnerability vs. Feature vs. Bug?\nWhen receiving or reclassifying issues, especially S4/P4s, it can be difficult to determine whether it‚Äôs a vulnerability, an enhancement, or a bug. Here are some questions which might help:\nIs it exploitable and can it affect the confidentiality, integrity and/or availability of GitLab‚Äôs systems and data? Can you create\na CVSS score\nfor it?\nVulnerability\nHave similar issues been treated as vulnerabilities, and does that still make sense?\nVulnerability\nIs the issue introducing something new which improves security or defense in depth?\nEnhancement\n(probably\n~type::feature\n)\nIs the functionality in question acting as designed, but we‚Äôre refining that to improve security or defense-in-depth?\nEnhancement\n(probably\n~type::maintenance\n)\nIs the functionality not acting as designed, but there‚Äôs no security impact and you can‚Äôt create a CVSS for it? Non-security\nBug\nAre we removing a vulnerable dependency, or piece of code, which GitLab\nis/was not\nusing in an exploitable way in any of the currently supported versions? (A ‚Äútheoretical‚Äù / unexploitable vulnerability).\nEnhancement\n(probably\n~type::maintenance\n)\nIf it‚Äôs unclear, err on the side of caution, and treat the issue as a vulnerability. The\nEngineering Work Type Classification\npage may also serve as a guide.\nWhen does a security enhancement become escalated to a vulnerability?\nEnsuring that appropriate measures are taken to mitigate the associated risks effectively, a security enhancement must be escalated to a vulnerability when any of the following conditions are met:\nWhen there‚Äôs evidence demonstrating that it can be combined with another vulnerability, leading to a Critical or High severity security issue or incident\nWhen there‚Äôs evidence that the issue is actively exploited in the wild\nUpdating CVSS after patch\nOccasionally after a release has occurred, a discussion in the AppSec team may lead to a better understanding of a bug and its CVSS. Follow the\nS1/P1 process\nif an issue is increased in severity to Critical. Otherwise:\nUpdate the report in HackerOne, if appropriate, and award any additional amount\nMake an MR in the\ncves-private\nproject to update the CVE record, and mention\n@gitlab-org/vulnerability-research\nMake an MR to update the security release blog post\nIdentify and open an MR for improvements to the triage or remediation processes, if appropriate\nExceptions\nRefer to\nVulnerability Management Standard Risk Acceptance (Exceptions)\nReferences\nVulnerability Management Standard\nInfrastructure Vulnerability Management Procedure\nBug Bounties\nLast modified June 12, 2025:\nFix typos in AppSec handbook pages (\n0827f1ff\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1951}
{"doc_id": "a552a607c1570337", "url": "https://handbook.gitlab.com/handbook/security/product-security", "title": "Product Security | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nProduct Security\nProduct Security‚Äôs mission is to set the standard for product security by fostering a culture of rapid innovation and secure product delivery. We are committed to leveraging the GitLab platform, embodying the pinnacle of internal usage (‚Äòdogfooding‚Äô) practices.\nAligned with GitLab‚Äôs overarching information security strategy and its three-year plan, the Product Security Department (PSD) within the Security Division is responsible for crafting and directing a comprehensive vision to bolster the cybersecurity posture of the GitLab platform.\nWhat is Product Security at GitLab?\nAt GitLab, product security encompasses a broad range of cybersecurity disciplines that enable product and engineering teams to design, develop, deploy, maintain, and refine GitLab‚Äôs technologies securely. This goes beyond the conventional confines of security, covering everything from protecting developer workstations to ensuring the integrity of our production environments.\nThe Product Security Mission\nOur mission is to set the standard for product security by fostering a culture of rapid innovation and secure product delivery. We are committed to leveraging the GitLab platform, embodying the pinnacle of internal usage (‚Äòdogfooding‚Äô) practices. By maintaining close collaboration with product teams and contributing significant security features and capabilities to the GitLab codebase, we aim to enhance our operations and be a vital driver of the broader GitLab vision.\nMulti-Year Product Security Mission\nOur comprehensive,\nmulti-year product security mission\ncan be found in our internal handbook.\nProduct Security Risk Register\nOur Product Security Risk Register process details can be consulted on\nthis dedicated page\n.\nCollaboration is Key\nSuccess in product security is not confined to PSD or even the Security Division. It requires a concerted effort across the entire GitLab ecosystem. Collaboration is crucial, involving not just our security counterparts but the broader organization. Key disciplines and capabilities, from Security Operations to Site Reliability Engineering, while not directly under PSD‚Äôs purview, are vital to our strategy‚Äôs success.\nGuiding Principles\nBusiness Enablement\n: PSD‚Äôs role is to facilitate GitLab in achieving its business goals by ensuring product teams can operate both efficiently and securely, bolstering customer trust, and utilizing transparency as a strategic advantage. This includes providing insightful product feedback through extensive dogfooding.\nEmpathy and Accessibility:\nRecognizing that the optimal security solution may not always align with business or customer needs, PSD prioritizes understanding and empathizing with these unique perspectives. This empathetic approach guides our security practices and engagements, aiming to align our methods with the preferences of our customers and internal teams.\nPragmatism Over Perfection:\nAddressing current challenges quickly and effectively is preferred over waiting for a perfect solution. PSD focuses on delivering incremental, tangible value through rapid, short-cycle initiatives, aiming for partial solutions that immediately benefit our long-term goals.\nDesign for Rapid Iteration:\nOur strategy and roadmaps are crafted to quickly identify and learn from suboptimal decisions by engaging with customers and stakeholders early and maintaining a tight feedback loop. This approach helps us adapt and refine our strategies and approaches efficiently.\nData-Driven Decision Making:\nData drives our objectives, priorities, and actions, reducing the risk of failure or scope creep. Example useful metrics include root cause analyses of incidents (data within), threat modeling outcomes, and production readiness assessments, among others.\nScalability and Repetition:\nPSD emphasizes scalable, repeatable processes over bespoke solutions, ensuring we can meet growing demands without proportional increases in resources.\nDecentralization and Empowerment\n: Acknowledging that product and engineering teams possess deep, specialized knowledge of their domains, PSD advocates for these teams to take ownership of security tasks like secure code reviews and threat modeling. This decentralization fosters a more integrated and effective security posture across GitLab.\nIntegration with Reliability, Quality, Infrastructure, and Platform Engineering:\nPSD‚Äôs mission to mitigate product security flaws is inherently tied to improving overall product quality and reliability. We aim to leverage and integrate with the practices of existing teams to enhance both security and product excellence.\nTeams\nThe Product Security sub-department includes the following teams. Learn more about each by visiting their Handbook pages.\nApplication Security\nInfrastructure Security\nVulnerability Management\nSecurity Platforms and Architecture\nData Security\nProduct Security Department Label Standardization\nThe Product Security Department has standardized its labeling system to improve issue tracking, team identification, and cross-team collaboration across all security teams.\nMandatory Division and Department Labels\nAll issues, epics, and merge requests within the Product Security Department must include the\n‚ÄúDivision::Security‚Äù and ‚ÄúDepartment::Product Security‚Äù\nlabels.\nTeam-Specific Labels\nEach team uses a standardized naming convention :\nApplication Security\n: ~‚ÄúApplication Security Team‚Äù\nInfrastructure Security\n: ~‚ÄúInfrastructure Security Team‚Äù\nData Security\n: ~‚ÄúData Security Team‚Äù\nVulnerability Management\n: ~‚ÄúVulnerability Management Team‚Äù\nProduct Security Engineering\n: ~‚ÄúProduct Security Engineering‚Äù\nSecurity Platforms & Architecturee\n: ~‚ÄúSecurity-Platforms-Architecture Team‚Äù\nMultiple team labels can be applied to issues requiring collaboration\nApplication Security\nApplication Security home page\nData Security\nGitLab's Data Security team investigates and remediates known unknowns in our data security and privacy posture.\nInfrastructure Security\nGitLab's Infrastructure Security provides security oversight of the SaaS.\nSecurity Logging Overview\nSecurity Logging supports and develops GitLab's security log ingestion platform.\nSecurity Platforms & Architecture\nSecurity Platforms & Architecture Team Charter\nSupply Chain Risk Management Strategy\nThis page outlines GitLab's comprehensive approach to supply chain risk management, providing a structured framework for identifying, assessing, and mitigating risks across the software development lifecycle while advancing toward higher SLSA compliance levels.\nVulnerability Management\nVulnerability Management is the continual process of identifying, prioritizing, mitigating and ‚Ä¶\nLast modified July 1, 2025:\nFix SPA label (\n25c5952f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 906}
{"doc_id": "6be058fefb492515", "url": "https://handbook.gitlab.com/handbook/people-group/offboarding", "title": "GitLab Offboarding | The GitLab Handbook", "text": "The Handbook\nPeople Group\nGitLab Offboarding\nOffboarding Procedures for GitLab Team Members and Stakeholders\nOffboarding Overview\nThe offboarding process is facilitated by the People Operations team who collaborates throughout the process with various other stakeholders such as Team Member Relations, IT Operations and Payroll.\nIf you have any questions around the offboarding process, please be sure to review the\nOffboarding FAQs\nhandbook page.\nNote:\nDeparting team members will receive a comprehensive email prior to their final date of employment with information such as the impact on benefits coverage, final pay, arranging for a laptop wipe and stock administration.\nOffboarding Support\nFor system access questions and\nlaptop wipes\nrelated to offboarding, send an email to\ngitlab-laptop-recovery@gitlab.com\n.\nFor payroll questions or outstanding expense claims, please reach out to either\nuspayroll@gitlab.com\nor\nnonuspayroll@gitlab.com\n.\nFor any other offboarding questions from active team members please reach out to People Operations via\nHelpLab\nor send an email to\npeople-connect@gitlab.com\nif your access has already been terminated.\nNote:\nIf a termination date changes, please reach out to People Operations via HelpLab. The team will update Workday.  The notice is used as supporting documentation of the change and is saved in the team members Workday record.\nVoluntary Terminations\nPrior to Resignation\nTeam Member:\nPlease reach out to your Direct Manager prior to submitting your resignation particularly to discuss the handover process and the\ncommunication plan\nregarding your departure.\nTeam Member:\nReview the documented\nnotice period\nfor your location if applicable and factor in the notice period when submitting your resignation through Workday.\nTeam Member:\nCompile your Letter of Resignation for uploading into Workday.  If you are employed through a PEO or Third-Party Employer, send a copy of your resignation letter to the PEO contact as well.\nResignation\nTeam Member:\nFollowing the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô\nJob Aid\nsubmit your resignation directly in Workday accessible through Okta.\nTeam Member:\nAfter your resignation is submitted in Workday, your manager will receive a request to complete your offboarding in Workday. Once your termination is complete, you can anticipate receiving your offboarding packet with information regarding your final pay, continued benefit offerings, and additional offboarding information such as returning your devices.\nTeam Member:\nYou should review the\nOffboarding FAQ\nhandbook page to address any questions you may have. If you have a question that is not on that page, please reach out to the People Operations Team using\nHelpLab\n.\nNote: You will not see your offboarding issue prior to your departure as this is an issue used to deprovision access and is created once you are done working.\nCountry Specific Requirements for Resignation\nFrance\nIn addition to submitting their resignation directly in Workday (following the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô\ne-Learning\nor\nJob Aid\n) and complying with any contractual requirements, Team Members resigning in France should also email a copy of their resignation letter to\nlegal-employment@gitlab.com\n.\nGermany\nIn addition to submitting their resignation directly in Workday (following the guidelines in the ‚ÄòHow to Submit a Resignation‚Äô\ne-Learning\nor\nJob Aid\n), Team Members resigning in Germany are required to provide a wet-ink signed resignation letter to the\nGmbH address\nand should liase with the People Operations team during offboarding to ensure it‚Äôs properly provided.\nJapan\nTeam Members located in Japan who are resigning need to complete\nthis resignation form\nand send it to payroll via\nHelpLab\nby the 10th of the month in order to process this with the local provider/partner for correct taxations. Please download or make a copy of the document in order to complete.\nSingapore\nTeam Members located in Singapore who are resigning and are\nnot\nSingapore citizens need to complete a Letter of Undertaking\ndocument\nand send it to payroll via\nHelpLab\nin order to process this with the local provider/partner. Please download or make a copy of the document in order to complete.\nTeam members the the PEO/EOR on UAE work visa‚Äôs who resign, completes their contract, or changes jobs, their visa must be cancelled by the company regardless of whether they leave the UAE. Team member‚Äôs with dependents must first either cancel dependent visas (if dependents are leaving the UAE) or place them on hold (if dependents are staying) - this is managed by the team member as the dependent visa sponsor. The PEO/EOR company handles the mandatory work visa cancellation process through MOHRE (for labor card) and GDRFA (for residence visa), which takes 1-3 working days. Team members have 30 days after cancellation to leave the UAE or obtain a new visa. Failure to cancel properly may result in re-entry bans, overstaying fines, and complications with final payroll and health insurance processing.\nTermination\nManager:\nIf your team member completes a resignation in Workday, you will receive a prompt in your Workday inbox to terminate the team member by following the steps documented in the following\njob aid\n. If a resignation was not submitted, you should initiate the termination by going to the departing team member‚Äôs Workday Profile and selecting\nActions\nfollowed by\nJob Change\nand finally\nTerminate Employee\n.\nNote\n: Submitting the termination in Workday does not immediately terminate access. The offboarding issue, which is opened on the team members last day worked, initiates the deprovisioning process for terminated team members.\nManager:\nYou will be prompted to indicate whether the termination is regrettable or non-regrettable:\nNon-Regrettable i.e. The team members departure has a minimal impact on the company, its customers, its projects or the team - the team member has not been meeting expectations due to conduct, culture or values misalignment or performance concerns.\nManager:\nOnce the details about the team members departure have been finalized schedule time with the team member to plan the\ndeparture announcement\n. Please reach out to your PBP if you need additional guidance.\nPeople Business Partner:\nYou will receive a prompt in your Workday inbox to review the termination details submitted by the Manager and to close the position in Workday. If you are aligned with the details including the final date of employment click\nApprove\n.  In the instance that you feel further discussion is required a sync with the Manager and/or Team Member should be arranged and the termination can be sent back for further review.\nPeople Ops:\nOnce the transaction has been fully approved the team will receive a notification of the termination within the Workday Inbox.\nOffboarding\nPeople Ops:\nOn the Last Day of Work as indicated in the Workday Termination Report at the\npre-determined time\nthe offboarding issue will be\ncreated\n- this will signal to all system owners that team member access can be revoked.  In the instance that the automation does not trigger the offboarding can be\ninitiated manually\nonce this has happened all other back-end offboarding processes facilitated by People Operations can get underway.\nDeprovisioners (Systems):\nYou will be tagged in the departing team members offboarding issue and required to indicate that the team members access has been revoked kindly note that access to SOX Systems must be attended to with urgency and all other tasks within the offboarding issue must be closed out within five days.\nInvoluntary Terminations\nNote:\nInvoluntary terminations are\nonly\nfacilitated by Team Member Relations (TMR) who will initiate the process in Workday.\nInvoluntary offboarding of any team member is never easy. We‚Äôve created guidelines and information to make this process as humane as we can. Beyond the points outlined below, make sure to refer to our guidelines on\nunderperformance\n, as well as the\noffboarding issue\n.\nInvoluntary Process\nThe manager and the team member should have walked through the guidelines on\nunderperformance\nbefore reaching this point.\nManager\n: Reach out to the their TMR specialist for assistance.\nTMR will ask about what the performance issues have been, how they have been attempted to be addressed, and review all manager/team member documentation.\nOnce the review has been completed and the decision has been made to offboard the team member, the manager should review the best timing for the involuntary offboarding call and termination date. We recommend to avoid scheduling a involuntary offboarding call while a team member is scheduled for any sensitive customer meetings or is on-call, per guidance below under Last working day.\nTMR will enter and approve the offboarding in Workday. Once entered, the relevant offboarding stakeholders will receive an alert via Workday reports or a Workday notification.\nTMR will work with IT in a separate Slack channel.\n: TMR will create a private Slack channel that will include the PBP, Manager, and Leader of the organization to review the offboarding and agreed upon offboarding date.\n: If applicable, TMR will prepare the severance agreement in preparation for the call between the TMR specialist, Manager, and team member. Additional guidelines for the preparation of this agreement can be found below in the\nSeparation and Release of Claims Agreements\nsection. To determine whether or not a severance agreement is applicable, please refer to the\nSeverance Eligibility\nguidelines accessible by PBPs, and Team Member Relations Specialist.\nManager\n: Once the date and time is confirmed, the manager will schedule time with the team member and send the TMR specialist a\nprivate and separate calendar invite\nwith the Zoom details for the meeting with the team member to share the news of the offboarding.\nPayroll\n: If the team member is employed by a PEO/entity with statutory leave requirements, review if any time off needs to be paid on the last paycheck by looking in Workday in the\nTime Off\nsection.\nPayroll\n: If the team member has a contract with a co-employer, the payroll lead will forward an email to the contact at the co-employer with the information surrounding the departing team members statutory leave etc.\nTMR/Manager\n: Discuss best mode of communicating the bad news to the team member. This discussion can happen via a private chat-channel, but it is best to be done via video.\nTMR/Manager\n: Decide who will handle which part of the conversation, and if desired, practice it.\nIf needed the TMR will provide the manager with a script for the offboarding meeting.\nTMR/Manager\n: If the team member who is being terminated is a people manager, a\ncommunication plan for the team\nregarding the departure should be in place before the offboarding proceeds. The communication plan should include: identification of an interim leader, (ideally) a scheduled meeting with the interim leader for the direct reports, a scheduled team call to announce the current manager‚Äôs departure and the interim leadership, and finally an announcement in the\n#team-member-updates\nSlack channel to share with the wider team.\nImportant:\nInforming the team and answering questions should be the top priority.\nNo announcement should be made in the\n#team-member-updates\nSlack channel until the team call has been completed.\nIn most cases, a team call can occur the same day of the offboarding. If necessary, the offboarding can be announced in the\n#team-member-updates\nSlack channel the following day.\nTMR/Manager\n: Decide what offboarding actions need to be taken\nbefore\nthe call (e.g. revoke admin permissions), or\nduring\nthe call (e.g. revoke Slack and Gmail access), and which ones can wait until later. You can reference the\noffboarding issue template\nfor the full list of actions. This conversation should take place in the private Slack channel with PBP, Manager and Leader.\n: If the team member is a risk to the production environment, the TMR should privately reach out to the\nInfrastructure Managers\nto determine who will be available to assist with the offboarding. Once an infrastructure team member has been identified, they should be added to the private calendar invite sent to People Operations, Security, and Payroll to hold the time for the team member offboarding. Once the offboarding conversation starts the TMR will privately Slack the infrastructure contact the name of the team member to start the offboarding process.\nFacilitating the Call\nManager\n: Deliver the bad news up-front, do not beat around the bush and prolong the inevitable pain for everyone involved. The Manager will make it clear that the decision is final, but will also explain what led to this decision and will point to the process that was followed to reach this decision. A sample leading sentence can be\n‚ÄúThanks for joining the call, [team member name]. Unfortunately, the reason I wanted to speak with you is because we have decided that we have to let you go and end your employment / contract with GitLab because of xyz.‚Äù\nManager\n: Hand the call over to the TMR to continue.\n: The TMR will also make it clear that the decision is final, but also will genuinely listen to the team member‚Äôs side of the story since there may be useful lessons in what they say for the rest of the team e.g. regarding hiring and vetting practices.\n: Make sure to communicate the\npractical points\nfrom the offboarding memo outlined below.\n: Once the conversation is complete, the TMR will stage the involuntary offboarding email document along with the severance document in DocuSign for review and signatures.\nCritical Points During Offboarding Call\nAll Team Members\nFinal Pay:\n‚ÄúYour final check (or invoice period) is for the pay period of X and includes X days of pay‚Äù.\nCompany Property:\n‚ÄúPlease return all property as explained in the handbook, also please delete GitLab‚Äôs email connection from your phone‚Äù.\nBusiness Expenses:\n‚ÄúPlease create your final expense report to Navan Expense (for employees), OR, please file any outstanding expenses with your final invoice (for contractors), so these can be reimbursed to you in a timely manner‚Äù.\nConfidentiality and Non-Disclosure:\n‚ÄúWe know you are a professional, please keep in mind the agreement you signed when you were hired‚Äù.\nPersonal Particulars:\nIf you would like GitLab to share your personal email with the rest of the company, please send an email to People Ops or a farewell message that can be forwarded on your behalf.\nUS Team Members\n‚ÄúYour benefits will cease on last day of the month you are eligible for Consolidated Omnibus Budget Reconciliation Act (‚ÄúCOBRA‚Äù), the carrier (Lumity) has been notified and the carrier will send out the paperwork to your home address on file‚Äù.\n‚ÄúYou may also be eligible under the Patient Protection and Affordable Care Act (‚ÄúPPACA‚Äù) for subsidized health care options via the marketplace.\nIf you are interested it is important that you sign up with the market place well before the 15th of the month to have coverage for the following month‚Äù.\n\" Under the Health Insurance Portability and Accountability Act of 1996 (HIPAA), if you need a certificate of credible coverage please download it from your current carrier‚Äôs online portal or request it from People Ops\".\nUnemployment Insurance:\n‚ÄúIt is up to your state‚Äôs labor agency (in CA: EDD) to decide if you are eligible for unemployment insurance‚Äù.\nKeep GitLab Informed:\n‚ÄúIf you move I want to be sure your W-2 gets to you at the end of the year.\nYou may also contact X at GitLab (provide phone number and email address) with any other questions that you may have‚Äù (consider inviting them to contact you at anytime for any reason).\nInitiating an Involuntary Termination in Workday\nTerminate the team member in the system by following the steps documented in the following\njob aid\n(Workday Profile by selecting\nActions\nfollowed by\nJob Change\nand finally\nTerminate Employee\n).\nYou will be prompted to indicate whether the termination is regrettable or non-regrettable and whether the team member would be eligible for re-hire in future or not i.e. with review unless specifically relating to\nconduct\nor\njob abandonment\nin which case they would not be eligible.\nOnce you have submitted the termination details, you will be prompted to complete a Questionnaire confirming that the Manager or PBP have communicated termination to the business AND confirming that access has been shut off with IT.\nPeople Business Partner:\nYou will receive the termination transaction to review, approve, and then enter a comment to confirm termination is ready for the offboarding process to begin.\nIf PBP does not want the offboarding process to initiate they should NOT approve the termination until they‚Äôre ready.\nPeople Ops:\nwill review all comment(s) and questionnaire to confirm the offboarding process is ready to begin. If needed, the Peopel Operations team member should reach out to the PBP to confirm the process can be initiated. This will complete the process of the involuntary termination.\nLast Working Day\nAfter the involuntary offboarding call has taken place and the last working day has been determined, team members will have no access to GitLab systems and may not be required to do any work on GitLab‚Äôs behalf.\nIf they are on ‚ÄúGarden Leave‚Äù they will still be active on payroll through the termination date. When determining the timing of the involuntary offboarding call and termination date it is important to consider any effect this might have on ongoing tasks and responsibilities of the team member. No expenses may be incurred while on garden leave unless necessary to the performance of GitLab duties and approved by the team member‚Äôs manager or as subject to local law.\nAs a manager, in collaboration with the Team Member Relations Specialist (TMR) and/or the People Business Partner (PBP), we recommend to avoid scheduling the involuntary offboarding call while a team member is scheduled for any sensitive customer meetings or is\non-call\n. If this is unavoidable, the manager is responsible for ensuring a transition/remediation plan.\nPeople Engineering automations\nwill generate the offboarding issue at the end of the team member‚Äôs last working day, as per notification from the Team Member Relations Specialist (TMR) and the People Business Partner (PBP). Once the\nLast Working Day\nor Garden leave expires the team member will be officially offboarded from GitLab.  Prior to the offboarding issue and the overall process for the term listed below.\nLast Working Day for US Team Members\n: TMR will have a legal/CPO review of the planned offboarding.\n: TMR will inform payroll, compensation and benefits, security and the stock administration of the date the team member will have access suspended and the official offboarding date prior to the opening of the offboarding issue.\n: TMR will work with People Operations team to ensure the offboarding issue has the correct dates and that all stakeholders in Payroll, Compensation and Benefits (Total Rewards), Security and Stock Administration have been communicated to and understand the offboarding details.\nSample Offboarding Memo\nIf appropriate (to be determined by conversation with the manager, the Group Executive, and People Ops), use the following\noffboarding memo\n, which is provided here as an openly viewable Google Doc, but of course needs to be personalized and tailored to each individual‚Äôs situation.\nAs written, it is applicable to US-based employees only.\nSeparation and Release of Claims Agreements\ndo not\napply for all offboardings. To review in which cases they do/do not apply, please reference the\nSeverance Eligibility\ndocument accessible by Team Member Relations team and PBPs. In the case that a severance agreement is applicable, the steps below should be followed:\nSeverance Process for US-based Team Members\n: The TMR Partner/Specialist assigned to the particular offboarding case at hand should select the appropriate severance template. Options include: Non-California over 40, California over 40, Non-California under 40, California under 40.\n: The TMR Partner/Specialist should make a copy of the template and save it in the\nCopies of Individual Severance Agreements\nfolder.\n: The TMR Partner/Specialist should fill out the document.\n: The TMR Partner/Specialist will ping the stock team in the stock option section of the document.\n: The TMR Partner/Specialist will share with the PBP and Legal for final review/approval.\n: The TMR Partner/Specialist will stage the document in DocuSign for signatures. Please note that depending on the template used, team members have a limited amount of time to sign the Separation and Release of Claims Agreement.\nWhen staging the document for signatures, please note:\nRemember to send the document to the team member‚Äôs\npersonal\nemail address\nSelect the\nassign signature order\noption in DocuSign to ensure the team member signs the document first\nAll US (Inc.) severance agreements should be signed by Karen Iacobucci, VP, People Operations & Technology. If Karen is unavailable then Robert Allen, CPO will be responsible for signing.\nUS (Federal LLC.) severance agreements need to be signed by an appropriate team member within the Federal Entity.\n: When the signed document is received, the TMR should upload it to the team member‚Äôs Workday Profile in the documents tab.\n: As a final step, the TMR specialist will email the appropriate\nuspayroll@gitlab\nor\nnonuspayroll@gitlab\nand total rewards that the final severance agreement has been uploaded to the team members Workday Profile in the documents tab.\nImportant Notes:\nSeparation pay is not paid until the ex-team member signs the document and the revocation period has passed.\nWe treat team members equally and therefore do not take tenure into consideration when determining separation pay unless legally required. We know that other companies sometimes gives higher separation pay to longer tenure. We think that a short tenure can be harder to explain to a next employer and with a shorter tenure you might have less stock option upside, maybe you have not even reached your vesting cliff.\nMake sure you understand the rules for over 40.\nYou must use language in your exit meeting that is in no way forceful of the ex-team member to sign the agreement. Use phrasing such as ‚Äúif you choose to sign‚Äù; ‚Äúyou have a right to have legal council review this document before you sign‚Äù, etc.\nTeam Member Leave during an Investigation\nFor team members who will be placed on leave during an investigation please follow the process below:\n: Communicates with Legal, Aligned PBP regarding the decision to place a team member on leave and disable accounts during an investigation.\n: TMR will request IT support for disabling a team members accounts.\n: TMR schedules a call with the team member and manager to inform them of the decision to place the team member on leave while an investigation occurs.\n: TMR informs the manager and PBP when the conversation is completed and accounts are disabled. During this period managers will not have access to the team members accounts.\n: TMR notifies IT that an Out Of Office message needs to be set on the account and include the message that the team member is OOO and please reach out to their manager.\n: TMR send the team member to their personal email the ‚ÄúTeam member Suspension letter‚Äù via DocuSign. The TMR will upload this document to the team members Workday Profile in documents tab.\n: TMR once the investigation is completed the TMR will inform the aligned PBP and manager of the final decision. If the team member is to be returned to work the TMR will reach out and schedule time to meet with the team member.\n: If the team member is returning to work the TMR will notify IT that the team member will be returning from leave and the date that accounts should be enabled.\nOffboarding Compliance\nThe People Operations member in the relevant rotation will complete a weekly audit of all offboarding issues opened within that specific week and check that all People Operations tasks have been completed and that the label\npeopleops::done\nhas been added.\nAll offboarding tasks by all Departments need to be completed within 5 days of the offboarding date. For systems that are more critical and time sensitive, these will be completed within the first 24 hours (example 1Password, Slack) by the relevant Departments. Information about application & system deprovisioners can be found on the\nTech Stack Applications handbook page\n.\nTo ensure a successful completion of the offboarding issue, it is important that all tasks are checked off, whether the system/tool is applicable to the offboarding team member or not. Checking the box indicates one of the following:\nI have revoked team member access to this particular system/tool\nI have checked and this team member was not given access to this particular the system/tool.\nGitLab Alumni Program\nAll voluntary exits are eligible to be added to the Slack channel\n#gitlab-alumni\n, unless otherwise noted. Involuntary exits are not eligible for the alumni channel, unless otherwise noted by Team Member Relations.\nThe offboarding details provided by the termination transaction in Workday is how eligibility is determined and later shared with IT.\nThe purpose of this channel is to network and socialize with team members.\nJoining the channel is voluntary and subject to GitLab‚Äôs\nCode of Conduct\n.\nGitLab, the company, monitors the channel and can remove people from it at their sole discretion.\nThe GitLab\nCode of Business Conduct and Ethics\nis enforced in the channel.\nCommunicating Departures\nOur goals in communicating offboardings are transparency, and to provide an opportunity for team members to say goodbye. We understand that different individuals are comfortable with different levels of communication and that each offboarding situation has different situations and nuances. For this reason and out of respect for individuals, we have a couple of key guiding principles for communicating offboarding:\nWe ask that all offboardings are announced in the\n#team-member-updates\nSlack channel for transparency and awareness. While we encourage all offboardings to be posted in #team-member-updates, we recognize there may be select situations that we should consider a different approach for. If a team member or their manager does not want to post in #team-member-updates, please discuss with your\nPeople Business Partner\nor\nTeam Member Relations\n.\nTeam members and managers have the discretion to determine who shares the news of the team member‚Äôs offboarding (I.E. team member or manager). Regardless of who shares, it is required that team members review offboarding messaging with their managers prior to sharing.\nDepending on the team members‚Äô role, timing of communication may vary (e.g. direct team, key stakeholders, etc.), and managers have discretion to determine who should be informed most immediately. The typical order followed for communicating departures is:\n1. Inform Direct Team\nThe ‚Äúdirect team‚Äù is typically the team member‚Äôs peers within their immediate team (I.E. reporting to the same manager and/or in the same functional group, etc.) and is typically a relatively small group of people.\nIn most cases, team members communicate their departures to their direct team, though messaging should be cross-checked with their manager for consistency.\n2. Inform Key Stakeholders\nKey stakeholder communication can be done through 1:1 notifications, and/or by posting the update in team-specific channels for general awareness. Key stakeholders are individuals that departing team members work very closely with (typically in their day-to-day work) that will feel the impact of the team member‚Äôs departure in their work. Managers of key stakeholders should also be looped into communication to ensure awareness.\nIt is essential that key stakeholders are looped in to offboardings to:\nCommunicate go forward plans\nEnsure business continuity and transparency\nDepartures should be communicated with stakeholders as soon as possible, with a maximum timeframe of 2 business days after the team member‚Äôs departure.\nWhere possible and appropriate, we also encourage managers to work with departing team members to align on transitions plans to transition as much of the departing team members‚Äô work as possible before their departure.\nIn most cases, managers communicate team member departures to key stakeholders.\n3. Announce In #team-member-updates\nAs explained briefly in the\noffboarding issue\n, GitLab is not always able to provide full context on why people are leaving when they do.\nHowever as mentioned in the procedures, for\nvoluntary offboarding\n, the team member can work with their manager on messaging to share a company-wide message about their departure.\nOnce the news has been shared with the team member‚Äôs team and other stakeholders, and messaging is agreed upon between the departing team members and their manager, the departure message should be shared in the\n#team-member-updates\nSlack channel.\nManagers and team members can optionally leverage this template as a guide on how to communicate a team member‚Äôs upcoming departure:\nI want to share that [team member's name] ([group] [role]) will be leaving GitLab, and [his/her/their] last day is (date of their last day). (Context to add about the team member's time at GitLab - examples: their favorite contribution to the handbook or they can use the update to express gratitude towards teams and individuals that have made their experience at GitLab positive.) I would like to take this opportunity to thank (team member's name) for their contributions and wish them all the best for the future. If you have questions about tasks or projects that need to be picked up, please let me know. If you have concerns, please bring them up with your manager. To keep in touch with (team member's name) he/she/they can be reached at (contact info - e.g. LinkedIn, email, etc.)\nThere will be situations in which team members prefer to share their offboarding message, and situations in which managers prefer to do so. Either is ok,\nso long as team member and manager have reviewed the messaging together prior to posting\n.\nIf someone is let go involuntarily, this generally cannot be shared since it affects the individual‚Äôs privacy and job performance is intentionally kept\nbetween an individual and their manager\n.\nIf you are not close to an employee‚Äôs offboarding, it may seem unnecessarily swift.\nPlease remember that these decisions are never made without following the above process to come to a positive resolution first - we need to protect the interests of the individual as well as the company, and offboarding is a last resort.\nAccording to our values\nnegative feedback is 1-1 between you and your manager\nand we are limited in what we can share about private employee issues.\nPlease discuss any concerns you have about another employee‚Äôs offboarding with your manager or your People Business Partner.\nGiven the expectations and responsibility that come with a VP and above position, when there is an involuntary offboarding for one of these positions, additional context for the personnel change can be provided to the organization.\n4. Inform The Department\nManagers should consider cross-posting the message in #team-member-updates to inform the wider Department of the departing team member.\nWhat Do We Share?\nWe strive to maintain personal information regarding all team members private, this includes information regarding a team members voluntary or involuntary departure from GitLab.\nHowever, a manager with the consent and approval of the departing team member can share more details with the GitLab team regarding the decision to leave GitLab. If the departing team member gives their manager permission to share that information then the manager will share while making the departure announcement on the team call.\nRegarding involuntary offboarding, certain information can also be shared with the GitLab team regarding the departure.\nThe departing team member may work with their manager to author a goodbye message for voluntary offboarding:\nWork with your manager on the message that your manager will share in\n#team-member-updates\non Slack.\nSend it to your manager for approval. If, as a manager, you are in doubt about the message - please reach out to your manager or\naligned People Business Partner\nfor additional review.\nManagers are encouraged to use the suggested template (above link) and have the space to add more color wherever they see fit.\nIn some instances there will be no further clarification on why a team member has departed, if there are concerns you can address those with your manager.\nDifferent levels of transparency will exist based on maintaining respectful treatment for all departures. Having team members leave may be a learning opportunity for some, but should not be a point of gossip for anyone. Managers will need to balance the opportunity for learning with the expectation of privacy and consult their People Business Partner should they have questions.\nTransparency is one of our values. In the case of offboarding, we opt to share the feedback only with peers and direct reports as needed, since we balance transparency with our value of collaboration and\nconstructive guidance\nshared 1-1.\nTurnover Data\nGitLab‚Äôs\nturnover data\nis only viewable internally.\nManaging the Offboarding Tasks\nOffboarding Issue\nTo track all tool deprovisioning, please open an offboarding issue following the\noffboarding standards\n.\nReturning Property to GitLab\nAs part of offboarding, any GitLab property valued above 1,000 USD needs to be returned to GitLab.\nFor laptops, please check and refer to the\nLaptop Buyback Policy\nwhich states that team members\nmay\n, at GitLab‚Äôs discretion, have the option to keep or buy back their existing laptops either when it gets refreshed for a new one, or when the team member is offboarding.  However, the option to purchase or keep a laptop at no cost may be voided where the team member is involved in cases of investigation, misconduct, termination for cause of any violation of\nGitLab‚Äôs Code of Business Conduct & Ethics\n, or other legal or security related inquiries.\nTo return your laptop to GitLab, please contact\ngitlab-laptop-recovery@gitlab.com\nimmediately upon offboarding.\nNavan Expense\nThis section of the Accounting Department.\nTo remove someone from Navan Expense Log in to\nNavan Expense\nand go to ‚ÄúSettings‚Äù in the left sidebar.\nSelect the right policy based upon the entity that employs the team member. Select ‚ÄúPeople‚Äù in the left menu.\nSelect the individual‚Äôs name and click ‚ÄúRemove‚Äù.\nIf the person has a Corporate Credit Card assigned to them, please notify Accounts Payable before un-assigning it.\nRetrospective for Managers\nFor involuntary offboardings it is optional to do a retrospective on the hiring, onboarding and coaching/communication of the departing team member. As a manager, you can use\nthis template\nfor a retrospective. Please share the filled out template with your manager as well as the\nPeople Business Partner\nfor your group.\nWithin the Engineering division this is a\nrequired process\nbecause it causes hiring managers to reflect on what led to the ultimate decision of parting ways with the team member, and how that might be prevented during future hiring processes.\nEvaluation Framework\nHow could this outcome have been avoided?\nWere there early signs that were missed?\nIn retrospect, what questions should have been asked to bring awareness and ownership to performance issues e.g.\n‚ÄúHow would you compare yourself relative to your peers‚Äù\n? - people are surprisingly honest here.\nUnemployment Claims\nUnemployment Claims in the US\nIn the United States, Unemployment Insurance provides benefits to GitLab team members who have lost their jobs through no fault of their own. The purpose is to provide temporary financial assistance to employees who meet certain requirements.\nUnemployment insurance is administered at a state level and in compliance with Federal Law. Each state establishes its own eligibility criteria and regulations surrounding Unemployment Insurance with respect to the amount allocated, duration and eligibility for Unemployment Insurance.\nEligibility criteria include meeting the state specified requirements in terms of both earnings and time worked during the base period. In some instances the state may require additional supporting information particularly more extensive wage related details surrounding a claim.\nUnemployment Insurance is funded through employer contributions and most states will have State Unemployment Taxes that apply however many employers typically pay the State Unemployment Taxes too.\nReporting a False Unemployment Claim\nIf you are a full-time team member and you are contacted by your state‚Äôs Unemployment Commission to discuss your request for Unemployment Benefits, you may be a victim of Unemployment Claim Fraud.\nBefore giving out any information to the caller, please confirm that you are speaking with an agency employee. If you confirm with your state‚Äôs Unemployment Commission that there is a fraudulent claim, please report it via\nHelpLab\nto the People Operations team.\nAdditionally here is a link to the\nU.S Department of Labor Contact Particulars\nto report Unemployment Insurance Fraud.\nGitLab Offboarding FAQ\nCommon Questions about the Offboarding Process\nGitLab Offboarding Standards\nOffboarding process and steps on the backend\nLast modified July 7, 2025:\nUpdating reference to People Connect to People Ops - offboarding & YouTube (\na03d9503\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6016}
{"doc_id": "700c4e1ce8007a4c", "url": "https://handbook.gitlab.com/handbook/security/corporate/systems/google/chrome", "title": "Google Chrome | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec Systems and Tech Stack\nGoogle\nGoogle Chrome\nDuplicate Chrome Profile Created\nThis guide to help team members who had an extra Google Chrome profile created and they end up losing all their bookmarks.\nSteps\nüö®\nRead all the steps below running through the steps, we cannot recover a deleted Chrome profile if you delete the wrong one. üö®\nDeleting the newly created profile\nOpen Chrome.\nClick your profile picture in the top-right corner in Chrome ‚Üí\nManage Chrome Profiles\n.\nAssuming that you did not add a personal profile to Chrome, you should see two profiles; one likely labeled\nPerson 1\nand the other\ngitlab.com\n.\nPerson 1\nis your original pofile and will contain your bookmarks, history, biometrics, etc.\ngitlab.com\nshould then be the new profile.\nTo confirm which Chrome profile is the correct one to delete, click on the three dots next to the profile name and select ‚ÄúDelete‚Äù and then verify the number of bookmarks ,etc.\nThe correct profile to delete will have\nfewer\nbookmarks, Auto-fill Data, etc\nLoading the correct profile\nOpen the old profile that has all your bookmarks/browsing history, etc. Based on the example above it would be\nPerson 1\n.\nWhen you get the\nYour organization requires a profile\npop-up, check off the\nAdd existing browsing data to managed profile\nbox.\nWhen prompted to\nTurn on Sync\n, click\nYes, I‚Äôm in\n. This will back up your bookmarks, browsing history, etc. into your work Google account.\nYour bookmarks, browsing history, etc. should now be restored.\nLast modified February 14, 2025:\nAdded Alarm Emojies to the Read Me (\n4546fc53\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 284}
{"doc_id": "ece6b60b5616d02e", "url": "https://handbook.gitlab.com/handbook/legal/risk-management-dispute-resolution", "title": "Risk Management and Dispute Resolution | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nRisk Management and Dispute Resolution\nRMDR processes, policies, and resources\nWhat we do\nThe Risk Management and Dispute Resolution (RMDR) division of GitLab Legal and Corporate Affairs (LACA) is responsible for informing and guiding GitLab‚Äôs risk management strategies as well as managing internal and external investigations, litigation and other dispute resolution. We seek to support resolution across a wide range of topics, including responding to subpoenas and discovery requests, drafting and revising legal documentation, managing investigations and negotiating and drafting agreements. It is our goal to proactively address and resolve these matters in support of GitLab‚Äôs business objectives, coordinating with internal business partners across the company whenever appropriate.\nHow to get in touch with RMDR\nIn support of these goals, we adopt this mantra:\nif you see something, say something!\nIf the question is of a general nature and does not require legal advice or discussion of confidential information, you can reach out to this team in Slack at #legal. We find this channel best for questions regarding process, who handles what, or how to find certain things if the handbook has not yielded the right result for you after searching. #legal is not a private channel, so your inquiry will be visible to the entire company.\nYou can also email\nrmdr@gitlab.com\nfor matters where Slack may not be the appropriate forum to discuss.\nWhen to get in touch with RMDR\nThere are times when GitLab team members must immediately consult with RMDR to ensure that GitLab is managing its legal risks effectively. These include:\nIf a team member receives a communication from a third party (i.e., a customer, vendor, partner, etc.) accusing the company of wrongdoing or demanding money from the company.\nA team member is not permitted to bind the company to pay money to settle a dispute without signoff from a member of the Legal and Corporate Affairs team.\nIf a team member receives a communication from an attorney representing a third party of any type, or other similar legal notice.\nIf another party involves an attorney, GitLab must involve its RMDR team.\nIf a team member suspects wrongdoing within GitLab.\nRMDR can confidentially discuss such matters with the appropriate legal resources, as necessary.\nIf a team member has questions about the legal or regulatory landscape.\nIn the case of an emergency that may have legal implications, such as a cybersecurity incident or major system failure.\nIf in doubt, please involve RMDR earlier rather than later ‚Äì we would always rather be proactive than reactive. You can reach out to RMDR via\nrmdr@gitlab.com\n.\nPrivilege\nSee the\nLegal & Corporate Affairs internal handbook\nfor links to a\nvideo\nand\npresentation\nwith additional information about privileged communication.\nPrivileged communication is communication, written or oral, that is protected from later disclosure in litigation because it was conveyed to the attorney in confidence by a client\nfor the purpose of\nseeking\nlegal advice\nor by an attorney\nfor the purpose of\ngiving\nlegal advice\n. Privilege can also be asserted over certain confidential documents created by attorneys for the same purpose.\nThe terminology differs depending on the jurisdiction. For example, in the United States, the privilege is generally referred to as ‚Äúattorney-client privilege‚Äù for communications made to or from an attorney for the purpose of providing legal advice or ‚Äúattorney work product‚Äù for communication or documentations created in relation to actual or anticipated litigation. In many of our EMEA and APAC countries, it may be called ‚Äúclient legal privilege,‚Äù ‚Äúlegal professional privilege,‚Äù ‚Äúlegal advice privilege,‚Äù or ‚Äúlitigation privilege.‚Äù Additionally, the scope of the privilege differs by country. It is therefore likely that the status of a privileged communication that contains legal advice in respect of foreign law will be determined by reference to the law of the country in which any action is taken.  If you have jurisdiction-specific questions about privilege, please contact a LACA team member who sits in that jurisdiction.\nPractically speaking, this means that communications between our team members and members of LACA are not necessarily privileged just because a member of the LACA team is involved. As a threshold matter, the LACA team consists of both attorneys and non-attorneys. Communications may be privileged if the person wishing to assert the privilege can establish that the communication was made to an attorney of the LACA team and the\ndominant purpose\nof the communication was to seek legal advice. Conversely, if the dominant purpose of the communication - even if made to an attorney - is simply to seek business advice, it is very unlikely to be privileged. Additionally, otherwise privileged communication will lose its privilege in most circumstances if it is further or also disclosed to third parties. Thus, team members should always be aware of who has access to the communication and should be very careful about forwarding it.\nWhat are some tips for team members to follow to help maintain privileged communication? Below are the steps you can take to help ensure that any communications you have with GitLab‚Äôs LACA team can be considered privileged:\nWhen seeking legal advice in writing from an attorney in GitLab LACA, label the subject line of the email and the top of the email, document, or Slack message: ‚ÄúCONFIDENTIAL & PRIVILEGED ATTORNEY-CLIENT COMMUNICATION‚Äù.\nEnd the communication by asking your attorney for a legal opinion and analysis. Simply including the attorney on a request for business advice will not create privilege.\nWhen seeking legal advice orally, it should be clearly noted at the commencement of the discussion that its purpose is to enable you to obtain legal advice.\nDo not disclose the contents of your communications with GitLab‚Äôs attorneys to anyone outside the company without consent of the attorney with whom you have exchanged the privilege communication, including friends or family members, and notify GitLab LACA department at ‚Äô\nlegal@gitlab.com\n‚Äô if any person from outside the company asks you to divulge privileged or confidential information.\nFor more information, please see the internal handbook\nhere\n.\nLegal Hold\nA legal hold is the process GitLab uses to preserve all forms of relevant evidence, whether it be emails, instant messages, physical documents, handwritten or typed notes, voicemails, raw data, backup tapes, and any other type of information that could be relevant to an investigation, pending or imminent litigation or when litigation is reasonably anticipated. Legal holds are imperative in preventing spoliation (destruction, deletion, or alteration) of evidence which can have a severely negative impact on a company‚Äôs case, including leading to sanctions. Once GitLab becomes aware of an investigation or potential litigation, a GitLab attorney will provide notice to the impacted team members, instructing them not to delete or destroy any information relating to the subject matter of the investigation or potential litigation. The legal hold applies to paper and electronic documents. During a legal hold, all retention policies must be overridden. Your obligation to follow the procedures outlined in the notice continues until the hold is lifted, even if you depart the Company. If you depart the Company, all Company owned devices and any material you are holding in accordance with any active Legal Hold Notice or active Company investigation should be turned over upon your departure.\nLast modified March 12, 2025:\nUpdate privilege internal handbook mention (\n3189ec39\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1224}
{"doc_id": "d7de65139dfee45c", "url": "https://handbook.gitlab.com/handbook/product", "title": "Product Handbook | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nMost of the content in the product handbook talks about\nhow\nwe do product at GitLab.\nWelcome to the Product Team Handbook\nThe Product Team  is led by\nDavid DeSanto\n.\nThe Product Handbook focuses on\nhow\nwe do product at GitLab.\nPlease see\nProduct Direction\nto learn about\nwhat\nthe Product Team plans to build.\nProduct Team Functions\nProduct Management\nUser Experience\nProduct Team Mission\nWe create products and experiences that customers love and value.\nConsistency wins as you scale\n. Our organizational goal is to create a Product Manager (PM) system that maximizes the chances of success across new products, new features, and new team members.\nWe are shipping an experience\n, and not just a product. Don‚Äôt forget about the links between the product and the website, pricing & packaging, documentation, sales, support, etc.\nIt‚Äôs about our customers and doing a job for them\n, not the product itself. Think externally about customer problems, not internally about the technology.\nIt‚Äôs about love AND value\n. Will customers value what we are building? We need to make sure what we build helps build and extract customer value.\nContributing to the Product Handbook\nThe product handbook is widely referenced by product managers and cross-functional team members. Therefore, we want to follow a consistent change management process so all affected collaborators are aligned and informed when there are changes (specially new requirements, processes, meetings, etc.) that affect their workflow.\nIt is helpful to indicate which type of change you are suggesting:\nSmall improvement (typos, clarifications, etc.)\nAdding a new section\nModifying existing section\nDocumenting a new process\nAdding a new page or directory\nOther\nFor a small improvement, please feel free to merge the MR yourself. Otherwise, please tag the appropriate code owner for review and approval. The guidance below should be followed for driving awareness:\nInforming team members about the changes\nIt is your responsibility to communicate with relevant team members about your merge request. Here are some best practices to follow:\nFor significant changes affecting the whole Product or Engineering team, consult your manager or product leader for the best communication strategy.\nFor changes specific to product management, tag\n@gl-product-pm\nin the merge request before merging.\nIndicate in the comment whether you are requesting contributions and feedback or simply providing information.\nFor changes relevant to other teams, tag department leads such as the VP of UX, VP of Development, or the Director of Quality Engineering in the merge request before merging.\nShare and cross-post the merge request link with a brief description in relevant channels such as Slack\n#product\n,\n#product-leadership\n,\n#eng-managers\n, and\n#ux-managers\n.\nFor more guidance on communication, refer to the\nGitLab Communication tips and best practices\n.\nProduct Management\nIf you‚Äôd like to collaborate with product management see\nHow to Engage\nguide.\nProduct Principles\nThe\nProduct Principles\nsection is where you can learn about our strategy and philosophy regarding product development here at GitLab.\nProduct Processes\nFor a detailed view on how we do Product Development, read up on our established\nProduct Processes\n.\nProduct sections, stages, groups, and categories\nTo learn how the GitLab product and our Teams are organized review our\nProduct Categorization section\n.\nAbout the GitLab Product\nLearn about\nGitLab as a product\n, including what does it mean to be a single application, our subscription tiers and pricing model, and the basics of permissions in the platform.\nProduct Manager Responsibilities\nUnderstand the\nroles and responsibilities of product managers\n.\nBeing a Product Manager at GitLab\nWant to know more on what being a Product Manager at GitLab is like? Checkout our\nProduct Management\nguide for helpful information like our Career Development Framework and learning/development resources.\nProduct Performance Indicators\nLearn how we measure success in Product via our\nProduct KPIs\n, which are tracked in our\nProduct project\n. For best practices and guidance on how to add instrumentation for features please review our\nAnalytics Instrumentation workflow\n.\nOur Product Leadership Team\nLearn about\nour Product Leadership Team\nand learn about them via their personal README‚Äôs.\nCommunicating with the Product Division\nBelow are team emails and handles that can be used for different departments and sub-departments in the Product Division. These groups are used for internal communication and the\n@mention\ncan only be used by project members. Please remember that tagging\n@mention\non issues will generate in-product\nto-do items\nand email notifications to\nall\nteam members in that project, so use it only when you need to communicate with the entire team. For communication specifically for product managers, please leverage\nHow to Engage\n.\n@gl-product-leadership\ntags all group managers, directors and VPs in the Product Division\n@gl-product-plt\ntags all direct reports to the VP Product in the Product Division\n@gl-product-pm\ntags to all members of Product Management, Product Monetization and Program Managers in the Product Division\n@gl-product\ntags to all members in the Product Division: Product Management, Product Monetization, Program Management, Product Design, User Research, and Technical Writing\nproduct@gitlab.com\nemails all members of Product Management, Product Monetization and Program Management in the Product Division\nux-department@gitlab.com\nemails all members of UX (UX Research, Technical Writing and Product Design) in the Product Division\n@gitlab-com/gitlab-ux\ntags all members of UX (UX Research, Technical Writing and Product Design) in the Product Division\n@gitlab-com/gitlab-ux/managers\ntags all people managers within UX (UX Research, Technical Writing, and Product Design)\n@gitlab-com/gitlab-ux/designers\ntags all Product Designers and Design Managers in UX\n@gl-docsteam\nfor all Technical Writers in UX\n‚Äò#technical-program-management‚Äô a place to reach the entire TPgM team across organizations\nWhen you are tagging\n@mention\n:\nClearly state why you are tagging the entire product team and what action you need product team members to take.\nWrite a short summary in the same comment so team members can quickly understand the necessary context.\nReview the issue title and description to ensure it has relevant details other product team members need\nsubmitting the comment. The issue title will be the subject of email notifications and in-product to-do items.\nIf asking team members to review a change, please directly link to the specific page on the\nreview app\nand any relevant issues or MRs.\nAI-assisted features\nThis page contains information about AI at GitLab.\nCollaboration on shared feature and experience areas\nCollaboration process and documentation of shared feature areas for product groups\nGitLab Product Management\nThis document describes what Product Management does, where, when, and how to engage with the ‚Ä¶\nPersonas\nRoles vs personas Personas describe the ideal target for GitLab. They help us define our messaging ‚Ä¶\nProduct Group and Team Pages\nPurpose Each team is empowered to work efficiently and document their practices in the GitLab ‚Ä¶\nProduct Leadership Team Resources\nOverview This section of the handbook collects all the resources related to the Product Leadership ‚Ä¶\nProduct Principles\nThese are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab.\nProduct Processes\nAs a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value.\nProduct READMEs\nProduct sections, stages, groups, and categories\nPrinciples - Processes - Categories - GitLab the Product - Being a PM - Leadership\nInterfaces We ‚Ä¶\nUX Department\nThe GitLab UX department comprises four areas to support designing the GitLab product: UX Research, Product Design, Technical Writing, and Foundations\nLast modified June 30, 2025:\nCreate New R&D PMO Handbook Pages and Remove Outdated Pages (\na698de10\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1266}
{"doc_id": "14981b8fc39c4149", "url": "https://handbook.gitlab.com/handbook/hiring/talent-acquisition-framework/offer-process", "title": "Talent Acquisition Job Offer Process | The GitLab Handbook", "text": "The Handbook\nHiring & Talent Acquisition Handbook\nTalent Acquisition Process Framework\nTalent Acquisition Job Offer Process\nThe Talent Acquisition Job Offer Process provides guidance to Recruiters on how to initiate the offer process and guide a candidate through to completion.\nThere are a series of steps that are taken when preparing a job offer at GitLab to ensure there is consistency and fairness in our hiring process.\nThese steps outline all of the major stages that Recruiters follow in our job offer process.\nDebrief Stage\nPurpose: The purpose of the ‚Äòdebrief‚Äô stage is to drive towards a hire/no hire decision at the end of our interview process. Once all scorecards are submitted and interviews are complete, recruiter is to move candidate to this stage within Greenhouse\nR&D Process Specifics\nThere are two specialized notes for the Engineering, Product and Security teams as a part of this process to ensure we are further optimizing for speed and asynchronous decision making given the global distribution of our interview teams.\nWhen a candidate is moved to the ‚Äòdebrief‚Äô stage (also known as the ‚Äòjustification stage‚Äô) recruiter is to kick off reference checks.\nRecruiter to review scorecards and ensure candidate is ready for review and all\nEngineering Hiring Practices\nhave been met. Once confirmed, recruiter tags hiring manager in candidate profile to initate ‚Äòjustification‚Äô.\nOnce a ‚Äòhire‚Äô decision has been made, there is an additional step - the justification. The justification is intended to serve as an asynchronous method to articulate the hiring decision as well as flesh out any nuances in the decision not captured in scorecards. Justifications are reviewed by offer approvers farther along in the process. A hiring manager will need to answer the following questions in the candidate‚Äôs profile within Greenhouse prior to an offer preparation:\nJustification Questions:\nIn what specific way(s) does this candidate make the team better?\nWhat flags were raised during the interview process? Include any past rejections, thumbs-down ratings, or hesitancy from previous interview scorecards (but not resume reviews), as well as your reasons for being comfortable moving forward despite interviewer recommendation.\nHow do we intend on setting this candidate up for success?\nEngineering specific: Does the candidate meet a simple majority of nice-to-have requirements (5 of 9)\nfor the specific role\n? (please add them to the appropriate scorecard section)\nReference Check Stage\nOnce a hiring decision has been reached (note: for all teams outside of R&D) the recruiter is to start the reference check process. For R&D offers, this process is run in tandem with the ‚Äòdebrief‚Äô stage (see above section).\nWe require references for all external candidates at offer via sending a Reference Check Form in Greenhouse. To use this form:\nUpdate notifications on the job for reference check. Navigate to ‚ÄòJob Setup‚Äô, select ‚ÄòForms‚Äô and edit the individual reference form. Add hiring manager to notification so they can initiate the calls once references have been submitted.\nClick the ‚Äòsend‚Äô button on the location-specific form attached to the Greenhouse reference check stage.\nOnce references are submitted, your Hiring Manager will be responsible for completing reference checks.\nThe Reference Check Form will request references‚Äô contact details as well as candidate details that will help with a future offer. You can view completed forms in the ‚ÄúApplication‚Äù tab.\nThe address, preferred first name/nickname, preferred last name, and PIAA details will auto-populate into the candidates‚Äô details.\nAny other fields, including their legal name, will not transfer outside of the form and need to be added manually\n. If a candidate requests changes to their legal name, you will need to do that manually. As a reminder, middle names are not required as part of legal names.\nFields that are entered in offers, such as BSN and Date of Birth for the Netherlands, should be added during the Offer stage by the Recruiter.\nCES will be responsible for 3-4 fields in the Reference Check form, depending on location. These include PIAA, Outside Work, TMRG calls, and NYC background check fields. CES instructions can be found\nhere\n.\nPlease note that these forms, just like an Offer in Greenhouse, are connected to the specific job you request them for. You cannot transfer forms to another job, so be sure you‚Äôre hiring into that req before sending a form. If you transfer the candidate, the form\nwill not transfer\n. If no forms are listed, please contact the Enablement team.\nFor more information about Reference Checks from a Hiring Manager perspective,\nclick here\n.\nBackground Check and Offer Stage\nAfter the reference check stage is completed with positive references, candidate is moved to the Background Check and Offer stage\nOffer Fields\nA description on what to input into each Offer field in Greenhouse can be found below.\nOffer Fields and How to Use Them\nOpening:\nIf you have multiple openings, you are typically choosing the one that started the earliest. You can check the approvals tab to confirm this, but you should also be able to tell based on the smallest opening number. Choosing the earliest opening helps ensure an accurate Time to Fill.\nStart date:\nNew hires start on Monday, with exceptions made for public holidays for a new hires‚Äô location, Family & Friends Day, and other designated\nno start dates\nas chosen by People Connect. Additionally, internal hires with salary changes start on the 1st or 16th only (regardless of the day of the week), and those in Sales can only start on the 1st.\nJob Title:\nIt‚Äôs important that we use the correct title, which should not include a specialty. People Managers have ‚ÄúManager, \" before the rest of their title, whereas individual contributors will have the title followed by Manager. Total Rewards will review this title to ensure it matches with those in Workday. In some cases, such as Area Sales Manager, industry standards indicate that our expected conventions will not work and exceptions are made.\nLevel of Role:\nAnything Director+ is considered a ‚ÄúLeader‚Äù\nDivision:\nThis field is synched with Workday and will update as new divisions are created.\nDepartment:\nThis field is synched with Workday and will update as new divisions are created.\nEmployment Type:\nSelect either ‚Äòfull time‚Äô or ‚Äòintern‚Äô pending role type.\nEmployment Status:\nSelect non-exempt for all roles with hourly wages which are paid overtime. For salaried, non-overtime eligible roles, select exempt. This information can be found in the Interlock sheet for comfirmation.\nHiring Manager/Hiring Manager Title:\nPlease provide a full title and prefered name for your hiring manager as seen in Workday.\nCandidate City:\nChoose the actual city where the candidate is located, not their locality.\nState/Province:\nThis field is synched with Workday and is only applicable to the US and Canada.\nCandidate Country:\nThis field is synched with Workday. If the candidate is currently living in a different country than where their contract is stating (ie they currently live in Germany and are going to be working in Netherlands), please choose the place they will be working, but let CES know so they can order a background check for the place where they are currently working. Please note that Northern Ireland is part of the United Kingdom, so ask Enablement if you‚Äôre unsure of what country to list.\nLocality:\nUse\nthis link\nto help you determine your locality. More details on how to select a specific city can be found\nhere\n.\nComp Calc Link:\nInclude a link to the comp calc that you used to determine salary, or outside documentation. If you had an exception, please include a link to that documentation here.\nDid this offer require a comp exception?\nIn this field, you can single or multi-select the following options:\nNo\ncomp exception required,\nYes - Base\n,\nYes - Equity\n,\nYes - Bonus\nand/or\nYes - Sign-On\n.\nCompensation Package:\nTell us what type of offer this is‚Äîwhether it has a bonus or signing bonus included. This field is used to populate information within the contract itself, so it‚Äôs important that you select the correct option.\nCurrency and Annual Salary:\nCandidates are paid in local currency.\nClick here\nfor a current list of any locations where exceptions can be made if a candidate asks. Annual and monthly salaries should be rounded up or down to the nearest whole currency unit and should always end with a zero (e.g., ‚Äú50,110.00‚Äù or ‚Äú23,500.00‚Äù). Hourly rates should be rounded to the nearest quarter-currency unit (e.g., 11.25/hr.).\nBase Salary and Equity Compa-Ratio:\nThese mandatory fields are used to report back to the business (except when recording equity compa-ratio for internal offers). Please use the format\n0.00\nmeaning an offer at 85% of median would be inputted as\n0.85\n.\nAre they paid yearly or hourly?:\nIf the salary is an annual salary, rather than an hourly rate, choose yearly.\nVariable Bonus Type:\nChoosing this field will add a designated paragraph to your candidate‚Äôs contract that explains how a commission or director bonus works.\nVariable bonus frequency:\nThis details whether the variable bonus shown is per year, not how it is paid out. All bonus information is calculated per year.\nBonus Currency & Amount:\nThis is calculated per year, in the same currency as their salary.\nSigning Currency & Amount:\nThis is a one-time payment in the same currency as their salary.\nBonus/Variable Percent:\nThis is a bonus field that specifies what percent of the total salary is bonus. This field will not be used in contracts and is only used for Workday.\nReferences Checked:\nThis verifies for record whether you have already completed references, or if you‚Äôve told the candidate that the offer is contingent on positive references as they‚Äôre still in progress.\nFamily Relationship:\nUse this field to let CES know if there‚Äôs a family relationship that will require a\nFamily Member Acknowledgement form\n.\nSignatory Name & Signatory Title:\nSee\nthis chart\nfor a list of signatories per country.\nClearances:\nIf you will be sending a Federal contract, please use these fields to designate if clearances are required in order to complete the job, and what bonus would be given if that is the case.\nEnd Date:\nUse for Inc (USA) contractors and interns only.\nEntity:\nThis\nis a great place to see which entities are currently associated with different countries. If your candidate has a position that includes ‚ÄúFederal‚Äù or PubSec‚Äù in the title, or you believe they‚Äôll be working in government contracts, please discuss with your Hiring Manager if they belong in the Federal entity. If you‚Äôre not sure, discuss with Legal before CES sends a contract. If the candidate is internal and is moving from a different entity to Federal, or from Federal to a different entity, please send a note to CES that the candidate requires a full contract rather than an LOA.\nTotal Rewards:\nSkip these fields, Total Rewards will add them during their approval stage.\nCandidate BSN:\nThese fields are for Netherlands candidates only, and answers can be found in your completed Reference Check form.\nNationality & Country of Citizenship:\nPlease fill these out for any PEO contracts. The answer will be in your completed Reference Check form.\nIndefinite or Fixed Contract:\nNetherlands hires will receive a fixed contract for their first year, as will any contractors or interns. Other than these, you can select ‚Äúno‚Äù or leave this field blank.\nNote:The Reference Check Form does not automatically update a candidates‚Äô legal name, so that will need to be updated manually in the Details tab.\nInternal Candidates\n: recruiter is to wait until after offer has been presented, but before the candidate is marked as hired, to merge the applicants‚Äô profiles. All other candidates should have profiles merged as early as possible. Please visit the\nEnablement handbook page\nfor instructions.\nConstructing an Offer:\nTalent Acqusition partners with hiring managers in order to advise on best practice in constructing a total compensation package (the offer). Offers are constructed of base pay, bonus (when applicable) and equity. Base pay is based off of proficiency and performance, and recruiters will advise to take the following into account when positioning a candidate within range for the job (also known as compensation-ratio):\nsalary range\ncandidate interview performance (competency)\njob information\nteam member parity\nSpecial Considerations\nRelocations need to be called out in Compensation Details should include originating location and salary, as well as the new location and new salary details to ensure it is communicated as part of the approval and the correct entity is selected. Ensure the People Connect team is informed about any known relocations within the first 90 days of employment. Recruiters should also communicate if the candidate is moving between countries, because CES will need to request a background check in the country where they are currently living. The CES will\ninitiate the background check\nduring the verbal offer stage.\nInternal Candidates need to include inputs in the ‚ÄòApproval Notes‚Äô section. Recruiter to include candidate‚Äôs current level and position, as well as their compensation package. If the comp has a variable component, please include base, on target earnings (OTE), and split in this section.\nAdditional Process for Engineering\nRecruiters advise and partner with hiring manager to construct compensation package for candidates. Once details are confirmed, there are a few additional steps specifically for Engineering offers starting in FY25 Q3 as follows:\nFor any offer with a compa-ratio above 0.80, flag this to the TA Manager or Director. The TA Manager/Director will then seek VP approval via Slack for all such cases. If an offer exceeds 0.85 compa-ratio, you must first complete the\nException Form\nand submit it to the TA Manager/Director, who will then obtain approval from the corresponding VP and CTO. Once approved, recruiter to move through next steps - offer approval process.\nWhen creating the offer in Greenhouse, add a link to the 0.85+ VP Approval Template in the\nComp Calc Link & Additional Context\nsection\nRecruiter to add compa-ratio information in\nPod Squad\nand the offer form\nFor any offers at or below 0.80 compa-ratio, recruiter to move through next steps - offer approval process.\nOffer Approval Process\nFor all offers within range (ie: no exceptions) they will route through the following approval path:\nTotal Rewards\nFP&A Partner\nBusiness Leader (department head/ VP)\nTotal Rewards reviews:\nCompensation in range\nEnsure the bonus percentage, if applicable, matches bonus percent amount. For bonus/commission, this will be a percent of OTE. For Director level bonus, this will be a percent of base.\nAudit stock options, department, division, etc.\nAdd entity, job code, job grade, sales geo differential\nEnsure the title is added to Workday.\nFP&A reviews:\nCompensation package to budget\nCommon approval challenges:\nOut of Office: If the offer is stuck in the approvals chain because someone is out of office, the Recruiter to proactively reach out to the approver‚Äôs manager about an appropriate temporary adjustment. Recruiter to work with Enablement team to update approval path.\nIncorrect Offer Approver: Recruiter to work with Enablement team to correct.\nCounter offer details:\nInformation in the offer package for counter offers should include the following in the ‚ÄúApproval Notes‚Äù section:\nNew offer:\nOriginal offer:\nJustification for adjustment:\nVerbal Job Offer\nOnce the offer is fully approved in Greenhouse, an offer will be verbalized to the candidate by the Recruiter.\nPlease note:\nJapan offers are contingent on a cleared background check. Recruiter is to let the candidate know that they would like to make an offer, but it is contingent upon their background checking coming back clear.\nOffer details usually include:\nStart Date\n- ensure that the candidates start date is not a no-start date (unless needed for legal reasons) and is at least 10 buisness days from offer acceptance. For PEOs, partner with CES to build in appropriate leadtime.\nJob Title\nSalary\nGeneral and specific\nbenefits\nContract type and\nemployment type\nOnboarding process\nAsynchronous communication\nStock options\nUnlimited paid-time-off\nIncentives\nOffice equipment/reimbursements\nConfiguring your new laptop\nEmployment Assistance Program\nSending the Employment Contract/Offer Letter\nOnce a verbal offer is made to a candidate‚Ä¶\nRecruiter will notify\n@ces\nto\nsend a contract\nto the candidate via Greenhouse email. The Talent Acquisition team will sometimes refer to an Offer Letter and Employment Contract interchangeably, because they are called Offer Letters in the US and Employment Contracts outside of the US.\nAny special circumstances regarding relocation communicated in the notification to CES to ensure it is added to the contract.\nOnce a candidate signs a contract, the CES will send welcome email with instructions on hardware ordering and next steps.\nDeclined Offers\nOffer acceptance rates are a key metric for Talent Acquisition, and unfortunately, offer declines will happen. In order to ensure we are measuring our offer accpetance rate appropriately, recruiters need to move candidates within Greenhouse at the appropriate times.\nWhen a decision has been made at debrief to move forward with an offer, candidate is moved to Offer and Background Check stage. If candidate declines a verbal or written offer, this will then be caught in our offer acceptance rate.\nRecruiter notifies\nFinance Business Partner\nvia the candidates notes section in GH that the candidate has declined the offer\nFP&A will make appropriate changes in Adaptive\nIf contract has been generated, recruiter notifies CES via the candidate notes section in GH that the candidate has declined offer and the contract needs to be voided. CES will then follow their own decline process.\nRecruiter to then disposition the candidate with the appropriate offer decline reasoning so we can measure/monitor rationale for declined offers and partner cross functionally around themes as they present. Please ensure you add relevant notes about why the candidate rejected our offer in the ‚ÄòRejection Notes‚Äô section. Any details about compensation and numbers should be added as a private note.\nHired\nAccepted Offers\nAfter the employment contract has been signed by both a GitLab signatory and the candidate:\nRecruiter to disposition all remaining candidates on position within 24 hours of offer acceptance. Recruiter to manage any active candidates in pipeline appropriately.\nCES will send a welcome email and mark the candidate as Hired in Greenhouse.\nOnce the candidate has been marked as Hired, this will trigger a sync with Workday and initiate the pre-onboarding process with the People Connect team.\nLast modified June 16, 2025:\nUpdate Endpoint Management page regarding Linux (\n9eb7033c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3048}
{"doc_id": "eafb80d907932db3", "url": "https://handbook.gitlab.com/handbook/sales/prospect-engagement-best-practices", "title": "Associating emails to Salesforce | The GitLab Handbook", "text": "The Handbook\nSales\nAssociating emails to Salesforce\nA quick guide on associating emails to Salesforce\nThis page contains tips on how to associate emails to Salesforce.\nAssociating Emails to Opportunities\nAssociating emails to Salesforce is a best practice that should be followed by all users.\nAttaching emails to a Lead, Account, Contact, or Opportunity record are vital for transparency, as any number of team members can review the correspondence between GitLab and the customer/prospect account.\nIt doesn‚Äôt do anyone any good when all of the correspondence is kept in a user‚Äôs inbox.\nWith that said, there are multiple ways that an email can be associated to an opportunity.\nBut before you do that, you must first make sure that the contact record is associated to an opportunity via the Contact Roles object.\nFirst, Contact Roles\nTo add a Contact Role to an opportunity:\nGo to the Opportunity.\nGo to the Contact Role related list.\nClick ‚ÄòNew‚Äô.\nAdd the Contact.\nIf this person is your primary contact, click on the ‚ÄòPrimary‚Äô radio button.\nAdd the Role this person plays in the opportunity (Economic Buyer, Technical Buyer, etc).\nRepeat the steps, although you can only have one Primary Contact per opportunity.\nFor more information, you can visit the\nSalesforce Knowledge Center\n.\nEmail to Salesforce\nEmail to Salesforce allows you to associate emails to Opportunities using an email long email string that associates the email to the contact.\nTo set this up:\nClick on your ‚ÄòName‚Äô on the top right of any page in Salesforce.\nSelect ‚ÄòMy Settings‚Äô\nGo to the left sidebar and click ‚ÄòEmail‚Äô.\nThen click ‚ÄòMy Email to Salesforce‚Äô.\nCopy the email string.\nGo to My Acceptable Email Addresses and make sure your GitLab email address is there.\nIn ‚ÄòEmail Associations‚Äô, make sure ‚ÄúAutomatically assign them to Salesforce records‚Äù is checked.\nCheck Opportunities, Leads, and Contacts.\nIn the Leads and Contacts section, make sure to select ‚ÄúAll Records‚Äù.\nIt is up to you if you want to save all attachments, as well as if you want to receive an email confirmation of an association (my recommendation is yes for the first few weeks to make sure it‚Äôs working, then you can turn it off anytime).\nClick Save.\nGo to Gmail and save this email address in a Contact record. A good practice is name it ‚ÄòBCC SFDC‚Äô for first and last name.\nWhen you send any emails from Gmail, you will BCC the ‚ÄúBCC SFDC‚Äù contact, which will send the email to long string you copied in Step 5.\nOutreach\nIf you want to associate emails to Opportunities using Outreach, follow these steps:\nGo to your photo on the bottom left.\nClick Settings\nSelect ‚ÄòPlugins‚Äô on the left menu.\nSelect the SFDC (Salesforce) plugin.\nClick on ‚ÄòContact‚Äô.\nOn the bottom right, enable ‚ÄòAutomatically associate activity with Opportunity‚Äô\nClick the ‚ÄòSave‚Äô button on the top right.\nSalesforce Plugin for Gmail\nIf you want to associate emails to Opportunities or other records using the Salesforce Plugin for Gmail plug in, follow these steps:\nVisit the Chrome Store to download the\nSalesforce Plugin for Gmail\nplug in.\nClick\nAdd to Chrome\nClick\nAdd Extension\nGo to Gmail and open the right sidebar.\nWhen you open an email that may contain email addresses from existing leads or contacts in Salesforce, all related records associated to that email (Lead, Contact, Account, Opportunity, and Cases) will appear, and you can select any or all records to related the email to.\nFor each record you‚Äôd like to associate the email to, click on the upload icon for each record.\nIf you wish, you can include some or all of the attachments to the record as well by clicking the checkbox next to each attachment.\nIf you have any issues with the setup, please contact the Director of Sales Operations via Slack, email, or SFDC Chatter.\nLast modified July 10, 2024:\nFix broken links and spelling (\n680a0bc8\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 659}
{"doc_id": "16fbde6421e08ddc", "url": "https://handbook.gitlab.com/handbook/sales/field-communications/field-flash-newsletter/edition-2020-08-06", "title": "Field Flash Newsletter - Edition 2020-08-06 | The GitLab Handbook", "text": "The Handbook\nSales\nField Communications\nField Flash Newsletter\nField Flash Newsletter - Edition 2020-08-06\nJuly edition of the Field Flash Newsletter sent to the GitLab Field (Sales, CS, SDR) team and stakeholders\nThis email newsletter was originally sent to the GitLab Field Team and stakeholders on 2020-08-06.\n‚ö°Ô∏è GitLab Field Flash: Your Top Field Highlights from July ‚ö°Ô∏è\nCongratulations on the close of a successful quarter, and welcome to Q3! In this month‚Äôs\nField Flash\n, you‚Äôll find new Enablement resources, updates on pricing change timelines, new Channel processes to help assist in your deals, and more. Plus, Mark Bell and Timo Schuit highlight what went into closing the largest deal in GitLab history (hint: a huge cross-functional effort!) and we learn more about Cherry Han‚Äôs many talents in her Team Member Spotlight. (\nPro Tip:\nDon‚Äôt forget to click the ‚ÄúView entire message‚Äù link at the bottom of this email when viewing in Gmail to see the full newsletter each month!)\nStart the Quarter Off Strong\nJuly was filled with\nhelpful trainings and exciting announcements from Field Enablement\n. ICYMI, check out:\nForrester TEI Report Enablement Session\n- Learn more about how to\nleverage this report\nas a tool in customer conversations in this special session with Forrester reps. (Don‚Äôt forget to share\nthe blog\nwith your connections on social media!)\nDemystifying the Metrics Conversation\n- Find helpful tips, tricks, and guidance in this robust Handbook page meant to help you successfully navigate one of the toughest customer conversations.\nQ3 Level Up Sales Enablement Webinars\n- The Q3 calendar is now posted! Check out the great enablement sessions scheduled for this quarter and find recordings.\nFor CS team members and those looking for more technical content, check out the\nCS Skills Exchange\nsessions.\nQuestions? Slack #field-enablement-team\nDeal of the Month üèÖ\nCurious about what went into closing the largest deal in GitLab history? Mark Bell and Timo Schuit walk us through their deal and share helpful insights they learned along the way.\nHave a deal you‚Äôd like to nominate? Fill out the\nnomination form\n.\nNew and Noteworthy Resources üìì\nICYMI, check out the FY21-Q3 GTM Field Update, which includes brief overviews from Sales, Product, Marketing, CS, Channel and Field Ops.\nWatch Now ‚Äì>\nLearn more about how Chicago‚Äôs Cook County Assessor‚Äôs Office adopted GitLab to power 1.8 million property assessments while battling challenges due to COVID-19. And, learn how Jasper Solutions offers its dynamic ‚ÄúDevSecOps in a box‚Äù to customers with the help of GitLab SCM, CI, & CD.\nRead More - Cook County ‚Äì>\nRead More - Jasper ‚Äì>\nDiscounts for GitLab Groundworks (part of\nCommit Virtual\non 2020-08-26) are available for you to give to customers and prospects to help them get trained and expand their use of GitLab.\nLearn More ‚Äì>\nMEDDPPICC has been expanded to include ‚ÄúPartner!‚Äù Learn more about the new qualification step in the\nSales Handbook\n, and\nwatch this 5-minute video\nto hear more from Michelle Hodges about the change.\nLearn More ‚Äì>\nWe recently signed a global agreement with\nContino\n(a Cognizant company) to partner on consulting engagements. Check out this video from the Channel team for more information on how you can engage this partner to assist in your deals.\nWatch Now ‚Äì>\nDid You Know? üî¢\nFY21-Q3 QBRs are taking place from August 3-20\n. Find links to schedules, deck templates, and notes docs in\nthis issue\n. For a full overview of the QBR planning and execution process, QBR request tracking, best-practices for organizers and attendees, and where to find past QBR content,\nsee here\n.\nFor more information, join the #qbr-ent-q3fy21, #qbr-comm-q3fy21, and #qbr-channel-q3fy21 Slack channels.\nWe recently soft-launched the\nGitLab CI/CD Specialist Certification\n. All required assessments are available at no additional cost to attendees of Professional Services\nCI/CD training\n‚Äì a great selling point!\nQuestions? Ping the\nprofessional services slack channel\nto learn more.\nWe now have\n40+ partners who have completed GitLab‚Äôs Services Bootcamp\n! Check out the\nattendee list and Partner Services Matrix\nalong with a\nsummary outcome\nfrom the project. These should be\nyour go-to partners\nwhen you need assistance on Customer Opportunities.\nYou may have caught onto an internal campaign reminding GitLab team members to\nuse public channels for Slack communication\n. Please help your GitLab teammates easily find and respond to messages by avoiding group and individual direct messages where possible. There are a lot of reasons channels are better ‚Äì\nand they are all in the Handbook\n!\nGitLab team members are taking less time off than they did prior to COVID-19 (on average). Remember to\nmaintain a healthy work/life balance and\navoid burnout\nby taking time away from work. See\nGitLab‚Äôs Guide to Time Off\nin the Handbook for a refresher on how to manage your PTO with Time Off by Deel and other helpful tips.\nChorus has launched a new UI\nthat GitLab will transition to on August 6th. Chorus has made small but impactful improvements to improve efficiency and functionality, but the way you use the platform will not change drastically. For a full list of updated features, see\nthis issue\nand check out this\nquick video overview\nfrom Chorus.\nQuestions? Please reach out to #sales-support.\nWhat‚Äôs New in GitLab üöÄ\nThe GitLab\n13.2 release\nis live! Here are the takeaways for customers and prospects:\nReduce Security and Compliance Risk:\nThe first release of Container Host Security gives security administrators confidence and peace of mind by allowing them to secure their running containers at the host level through monitoring and optionally blocking unexpected activity.\nIncrease Operational Efficiencies:\n13.2 delivers new updates to improve teams‚Äô efficiency and performance. This includes advanced global search on GitLab.com, which improves search relevancy, performance, and allows for group-wide searches across all projects directly in the UI. It also includes load performance testing directly in GitLab, allowing customers to better understand how their application performs under stress by easily running custom load tests as part of their CI/CD pipelines.\nDeliver Better Products Faster:\nManaging workflows and planning tasks for different teams can cause a significant amount of development disruption. Organizations can now lessen this disruption and streamline agile project planning/management with our MVC release of Iterations, which allows teams to break down work into smaller, more manageable chunks. Customers can also leverage enhancements to our Jira integration and epics (confidential epics and bulk edits) to make project management easier in GitLab.\nVisit the 13.2 Release Post for more details\nTo see what‚Äôs ahead in 13.3, watch the\nkickoff videos\nor check out the\nkickoff review page\n.\nUpcoming Events üéü\nPlease refer to the specific linked issue for each event for details as they unfold.\nGlobal\nGitLab Commit, 24-Hour Virtual Event\n- August 26\nHow Trek10 modernizes Application Development using GitLab CI/CD on AWS - August 4\nCapital Group DevCon Virtual Conference\n- August 4\nLead Dev Day, NYC, Virtual Conference\n- August 11- 12\nVirtual Captive Eight Summit: Palo Alto\n- August 13\nNADOG DevOps Talk\n- August 19\nVirtual Security Workshop\n- August 20\n(Self Service) DevOps Basic Hands on Workshop for DHS\n- August 13\nGitLab DevSecOps Virtual Conference\n- August 12\nVirtual Webcast - China\n- Aug 13\n(Self-service Webinar) APAC Webinar 2: Security\n- Aug 20\nPSN DevOps Virtual Event\n- August 25\nKorean Webcast: Managing DevSecOps with a single application\n- Aug 26\nInspired Business Media Virtual Roundtable UK & Ireland\n- Aug 25\nEnablement Corner üß†\nProvide your input\non what enhancements you‚Äôd like to see in the next release (1.2) of\nCommand of the Message\nto help you uncover customer needs and articulate GitLab‚Äôs value and differentiation.\nTeam Member Spotlight üî¶\nTo nominate a peer, fill out the\nnomination form\n.\nQuestions or feedback? We want to hear it! Reach out to the field-enablement-team Slack channel or\ncapture it using this process\n.\nSee the\nField Flash Newsletter handbook page\nfor more information about this newsletter.\nArchive: Edition 5, Description: July 2020 Field Flash\nLast modified April 10, 2025:\nFix broken links (\n7fbeab40\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1349}
{"doc_id": "af4a4508703f9408", "url": "https://handbook.gitlab.com/handbook/finance/procurement", "title": "The GitLab Procurement Team | The GitLab Handbook", "text": "The Handbook\nFinance\nThe GitLab Procurement Team\nWhat is Procurement?\nThe Procurement team manages GitLab‚Äôs\nSupplier Lifecycle\nthrough the process of strategically vetting and selecting vendors, negotiating commercial terms, the purchasing of goods and services, and managing the renewal or vendor offboarding process.\nProcurement Team Alignment\nDivision alignment for spend over >$25k USD / year:\nMarketing - Ashley Abbate\nSales - Ashley Abbate\nProduct - Adrienne Ruhaak\nEngineering - Adrienne Ruhaak\nPeople - Adrienne Ruhaak\nFinance - Adrienne Ruhaak\nLegal - Adrienne Ruhaak\nAll division spend <$25k USD - Dasha Yarmusik\nIndividual Software Purchases - Anam Shaikh\nShared Goals\nProcurement is a cross-functional team that supports GitLab as a public company. We have four key objectives monitored in the following ways:\nStrategic partnerships with business stakeholders - meet on a quarterly basis to review new or renewing third party spend and supplier management opportunities\nMetric(s): Supplier segmentation tiers\nAchieving annual cost avoidance (soft) savings and year over year (hard) savings\nMetric(s):\nSoft Savings\n(cost avoidance) is mitigating proposed cost increases or any negotiations for new purchases.\nHard Savings\n(year over year) is a decrease in cost from last year and is only valid for renewals. This can include decreasing unit costs, removing users and/or scaling back services and scope\nThird party risk management\nand ensuring we are getting the best commercial terms with the least amount of risk for GitLab\nMetric(s): the number of active and new vendors each quarter, and reported and monitored via internal and external audit\nResponsible sourcing/purchasing and supplier diversity - managed through the Zip and Coupa onboarding and purchasing process\nMetric(s):\nZip SLAs\nand diverse suppliers\nVendor Lifecycle Management\nThe Procurement team is responsible for ensuring there is a process for suppliers to be managed throughout their lifecycle of doing business with GitLab from initial selection and contracting to recurring reviews and renewals to cancellation.\n1. RFP and Vendor Selection\nAll new spend, changing of vendors for existing services, and market reviews every 3 years for existing contracts should follow the\nRFP and Vendor Selection process\n, unless approved by your Procurement Category Manager, to ensure we are choosing the best partner for GitLab with the best commercial terms. This must be done prior to verbally agreeing to terms or contracting with any new or existing vendor.\nFollow the RFP process outlined in the\ninternal handbook\n. You will find resources and templates for RFP events at any level, whether it is a quick bid or a full procurement-led RFP with 5+ vendors. Always reach out to your Procurement Cateogry Manager to notify them that an RFP is being conducted- they can assist in the process and can answer any questions.\nAs part of this process, create an issue with the\nRFP Intake template\nand tag your\nCategory Manager\n.\nBefore sharing details and/or confidential information regarding GitLab business needs, obtain a\nMutual Non-Disclosure Agreement\nfrom the potential vendor(s). Refer to the\nSignature Authorization Matrix\nfor signing authority.\nAll vendors must adhere to the\nGitLab Partner Code of Ethics\n. It is mandatory all vendors contractually adhere to this if they would like to do business with us. (Note these are typically not required in event related agreements unless the vendor is providing services).\n2. Negotiation, Privacy, Security, and Compliance Review\nDepending on the amount of spend, Procurement will assist or lead in negotiating the pricing and commercial terms of the contract.\nDepending on the types of data shared with the vendor, Privacy and Security will need to complete a review of the vendor. Depending on nature of vendor‚Äôs services and/or whether the vendor has been recommended to us, the Ethics and Compliance team will need to complete an anticorruption/antibribery review and, potentially, recommend additional measures to mitigate that risk.\nFor more information on these requirements and steps, see the\nReview Steps, Timeline, and Considerations section\n3. Contracting\nAll work that is done with a vendor must have a completed contract to be compliant and work may not be started until a contract is in place. Contracts include\nNDAs\n, Master Service Agreements and Statements of Works. Our legal team assists with this step in the process. Please see the\nlegal review process\nfor more details.\nAdditionally, please note that a small number of team members can sign agreements on behalf of GitLab - please see the\nAuthorization Matrix\nfor more details.\n4. Vendor Onboarding\nIn order for vendors to be paid, they need to complete their onboarding in our systems. Please see the\nNew Vendor Onboarding\nsection for more details.\n5. Recurring Vendor Reviews and Management\nProcurement will work with you through the Quarterly Procurement & Business Spotlights to review upcoming renewals and cancellations, new spend projects, and identifying\nvendor‚Äôs segmentation tier:\nStrategic, Niche, Commodity, or Transactional.\nIdentifying the Segmentation Tier your supplier(s) falls within helps determine the right vendor management approach, e.g. renew the contract, RFP, business reviews on a recurring cadence, continuous improvement plans, etc.\nIf holding a business review with a vendor, the following topics should be discussed:\nSuccess criteria of the contract\nWhat is going well\nWhat can be improved\nReview of any issues and remediation expected\nOverview of the contract and its utilization\nVendor Renewals\nOn a quarterly basis, the Procurement team will meet with business stakeholders in each department to review a rolling 12 month list of renewals, focusing on the upcoming 2 quarters. This list is pulled from Zip and Coupa. The list should be reviewed and prioritized with the business owners. The renewal process should start at least 90 days ahead of the renewal date providing ample time to review the terms and decide:\nAre there any additional security requirements for the vendor?\nHas our sanctions screening tool, Risk Rate, detected any potential matches since the vendor was originally onboarded?\nHas the anticorruption risk profile changed?\nHas the vendor had an RFP for pricing in last 3 years?\nDo we want to terminate or reduce spend and need to proactively notify per the contract?\nDo we want to change any terms of our contract?\n6. Cancellation\nThe following methods will be used to capture cancellations (which include terminations and/or non-renewals):\nAutomated Notice:\nThe DRI for the purchased item will receive notification of an upcoming renewal;\nProcurement Led:\nThe Procurement Team will review upcoming renewals, and active purchases, during the quarterly ‚ÄúCategory Spotlight‚Äù meetings.\nDRI Led:\nDRI‚Äôs and other stakeholders may determine that products, events and/or services are no longer needed.\nFor each of the above, if a cancellation is desired (which include terminations and/or non-renewals) please follow the ‚ÄúCancellation Process‚Äù outlined below:\nSubmit a\nTermination/Non-Renewal Request\nthrough Zip by completing the intake form and providing copies of the existing contract(s) that you are canceling.\nThrough Zip, Procurement and Legal will work with the requester to provide instructions on how, when, and who should notify the vendor. For most non-renewal notices, the business owner will notify the vendor via Legal‚Äôs guidance.\nSecurity and Privacy will also be added for awareness and review if data is being shared with the vendor to determine the requirements of returning or deleting the data.\nFor certain cancellation requests, like Software for example, IT will be included in the Zip workflow to determine and complete the proper deprovisioning and system offboarding requirements. This includes\nremoval of the system\nfrom our\nTech Stack\n.\nIf necessary, the requester and/or business owner will need to create and execute on a communication plan to notify all or impacted team members of the cancellation.\nUpcoming terminations/non-renewals should be discussed with Procurement during the Quarterly Category Spotlight meetings that Procurement holds with category leads/budget owners. As Procurement is made aware of upcoming cancellations during these meetings, Procurement will review on a quarterly basis any known cancellations with Legal to ensure notification requirements are met. Procurement and Legal will then work with the business owner on completing the above process. If a cancellation is determined outside of this quarterly cadence, notify your Procurement Category Manager and complete the above process as soon as possible.\nThe Procurement Process\nAnytime a group of suppliers are being evaluated for services/goods or a purchase is being made on behalf of GitLab that does not qualify as a\npersonal expense\nor meet the list of\nexceptions\n, Procurement must be engaged BEFORE a purchase and/or work can begin. Start the Procurement Process\nBefore agreeing to any business, legal and/or pricing terms with a supplier, whether in conversation or email\nImmediately when you receive a contract and/or quote for new and/or recurring business\nIf you have received a contract from a supplier, tell them you will send to your procurement team for review\nWhen evaluating a group of suppliers and/or starting the\nRFP Process\n.\nIf unsure where or when to begin, tag the @procurement_team in the #procurement slack channel for support. You can also reach out to your\nProcurement Category Manager\ndirectly.\nHow to start the Procurement Process\nMajority of the Procurement Process lives within our Procurement system called Zip. You can access Zip via your\nOkta home page\n, or if you need Zip access,\nsubmit an access request here\n.\nFor more Zip training materials, review the\nZip End Users Guide\nand the\nTips for Submitting a Zip Request page\n.\nDepending on a few factors of your purchase, there are different ways to engage Procurement and start the Procurement process:\nSubmit a Zip Request for\nPurchase Requests for renewals of existing vendor‚Äôs services\nPurchase Requests for new spend\nunder $25k\nChange Requests to existing POs\n$0 contract reviews including demos and trials\nPartner Revenue Payments\nIndividual Use Software\nProviding Termination or Non-Renewal Notice\nFor new spend, changing vendors for existing services, or after 3 years of renewing a service, follow the\nRFP Process\nOver $250K: Procurement led RFP, typically 5+ vendor bids\n$100K - $250K: Business led RFP, 2-3 vendor bids required\n$25K - $100K: Business led quick-bid, 2 vendor bids required\nUnder $25K: no bid required\nHiring a Contingent Worker?\nIf you‚Äôre hiring a contingent worker, please read GitLab‚Äôs\nContingent Worker Policy\n, which provides comprehensive guidelines on engaging with different types of contingent workers. The policy outlines three main categories: Staff Augmentation Workers (agency-provided temporary resources), Consultancy Services (third-party professional services), and Independent Contractors (used by exception only). You‚Äôll find detailed information about each worker type‚Äôs characteristics, duration limits, country hiring guidelines, contractor extension processes, and background screening requirements. This policy is designed to help team members understand when and how to properly engage contingent workers while mitigating classification risks.\nNote: For subcontractors for the Professional Services team, please use the process for Revenue Partner Payments.\nReview Steps, Timeline, and Considerations\nRequests can take 5 days to 3+ weeks for processing depending on a number of factors that will impact the time for review of a Purchase Request including, but not limited to:\nNew or existing vendor\nIf negotiation is required\nTypes of data being shared with the vendor and if Security and Privacy need to review\nContract complexity and alignment with GitLab‚Äôs\nVendor Terms and Conditions\nVendor‚Äôs response time and willingness to negotiate\nEach review‚Äôs targeted approval time is outlined below, but as mentioned above, this is dependent on many factors and the accuracy and completeness of information provided by the requester. If your request meets any of the additional approval criterias outlined below, please plan accordingly and submit your Zip request allowing each cross-functional team enough time to complete their review. Please follow the\nsteps outlined for urgent requests\nthat cannot meet the below timeline and have specific and quantifiable impact to the business.\n1. Sanctions Screening (Ethics & Compliance): 30 minutes - 3+ Days, if required\nUse the vendor‚Äôs complete name in your Zip request, as this will be the basis for sanctions screening which automatically happens in our sanctions screening tool, Risk Rate. Incomplete names (e.g., ‚ÄúEY Germany‚Äù rather than ‚ÄúErnst and Young GmbH‚Äù) may result in false positives and unnecessary delay.\nIf Risk Rate detects no matches between the vendor and applicable sanctions lists AND the vendor is not located in a high-risk country, the vendor will be auto-approved. If Risk Rate detects a potential match or is located in a high risk country, the vendor may require escalation to and manual review by GitLab‚Äôs Trade Compliance Counsel.\nInclude the vendor‚Äôs website or LinkedIn page in the relevant Zip field, in advance, to help counsel evaluate the match more quickly.\n2.A. Buyer Review (Procurement): 2 days\nEnsure you have the appropriate contract documents uploaded when you submit your request\nThe $ amount of the req matches the contract value and the correct billing codes are selected\n2.B. New Supplier Onboarding: 2-3+ Days, if required\nThis is entirely dependent upon the suppliers response time.\nOnce supplier information has been submitted in Zip and the Procurement team sets the vendor up in Coupa, the supplier receives an email from Coupa requesting banking and tax information to facilitate payment.\nThe Procurement team cannot complete this on the supplier‚Äôs behalf since we do not know this information. If we did, it would be a violation of SOX Compliance guidelines.\nIf your supplier isn‚Äôt onboarded after 2 days, contact your supplier directly requesting they do so ASAP since their contract cannot be reviewed or approved until this is completed. Carbon copy\nprocurement@gitlab.com\n3.A. FP&A Review: 2 days\nFP&A is included as an initial reviewer to ensure the requested spend is within budget and that the Billing Code entered in Zip is correct so it can be pushed to Coupa when ready for final approvals.\n3.B. IT Review: 2 days if purchasing new software or for contractors\nRequester should have vendor complete the\nIT New Software Questionnaire\nand submit with the purchase request so IT can complete their review\n4.A. Legal Review: 3 to 21 days\nThe amount of time for review and reaching execution is based on the details below. Use these SLAs as guidelines, noting that each contract review is unique. If additional terms, requirements, and/or risks are identified, the timeline may be extended. The ability for GitLab to work efficiently through an agreement negotiation relies on the vendor and their counsel responding promptly to GitLab redlines and comments. Delays from the supplier will delay approval.\nTypes of Vendors and Review Times\nExisting vendors for renewals or upsells: 3-5 days\nExisting vendors generally require much less time as existing terms are in place which will underline the products and/or services being offered. That said, in the event GitLab is adding a new product and/or service, additional cycles may be required in order to amend the existing agreement.\n‚ö†Ô∏è You must either upload all complete contract terms (including attachments and amendments) or provide a direct link to an existing agreement. Indicate which sections cover your current request. For example, ‚ÄúSee existing Master Service Agreement with Vendor XYZ (Zip req #67890), Amendment #3 covers the new software modules we‚Äôre requesting‚Äù. Do\nnot\nprovide general references like ‚Äúcovered under existing agreement with vendor‚Äù or assume legal can locate terms without guidance.\nNew vendors: 1-3+ weeks\nNew vendors require the most amount of time as GitLab will be establishing terms and conditions for the first time, which will govern the use of the products and/or services being procured.\nAll contract documents must be provided in Word (.docx) format in English.\nPDF versions are not acceptable for legal review as they cannot be efficiently redlined. Contact the vendor to request the Word version before submitting your request.\nNegotiations can vary from 1 week to multiple months based on the level of detail and modifications required to reach executable terms.\nIf vendor doesn‚Äôt readily accept the\nGitLab standard terms\n, additional rounds of redlines and negotiations may be required, extending this SLA.\nWhenever possible, the legal team hopes to achieve redlines provided back to the vendor no less than five (5) business days after being assigned.\nTypes of Agreements\nSoftware (SaaS & On-Prem):\nRequires the most rigorous review to ensure the rights and obligations placed upon GitLab are, (i) reasonable given the software being provided, and (ii) align with GitLab contracting and industry standards.\nProfessional Services / Training:\nRequires detailed review to ensure intellectual property ownership aligns with our intentions, and reasonable obligations being placed upon GitLab.\nMarketing / Events:\nGenerally, requires the least amount of time to review as the obligations are standardized given the event in question and program provided. Details regarding events may include negotiations with regards to Force Majeure, cancellation (including penalty), and ensuring the terms align with those of the requesting GitLab team members.\nData Processing Agreement (DPA)/Standard Contractual Clauses (SCCs):\nRequired when personal data is shared with, accesssed, or collected by the supplier on behalf of GitLab. DPA/SCCs are generally affixed to an agreement but may be required as a separate agreement upon the determination of Privacy (see the Privacy review process below).\nNegotiation, Security, Privacy, and PeopleOps reviews are only required if the purchase request meets certain criteria, as described below. In the event two or more of these activities are required, they will happen in parallel to one another and Legal‚Äôs review.\n4.B. Negotiation: 12 days\nThe Procurement team negotiates SaaS contracts >$25k and one-time contracts >$100K\nIf this step is not taken, purchase orders will not be approved until Procurement is able to negotiate\nSLA can extend based on level of negotiation required for large and/or complex contracts, and the suppliers willingness to meet budget and benchmark indicators. For larger spend purchases, it is beneficial to engage Procurement prior to submitting the request in Zip so negotiations can start earlier.\nFor communicating Legal‚Äôs redlines to the vendor,\nIf the contract value is >$100k or Procurement is already actively negotiating or communicating with the vendor, Procurement will take responsibility for sending any legal redlines to the vendor. Procurement will comment in the req if/when they have sent redlines to the vendor for visibility. Otherwise the Stakeholder/Requester will be responsible.\nReview here for more details on when and who is responsible\n4.C. Security Review: 4-14 Days\nSecurity Third Party Risk Management\nreviews are required for vendors that collect, process, or store Orange / Red Data, software providers (SaaS and On-premise), and independent contractors / consultants. (Excluding field marketing events)\nThis activity cannot begin until\nafter\nthe supplier completes the security questionnaire and supplies their security documentation. Oftentimes, it can take 1-2 weeks for the supplier to respond and complete the requested materials. The security review SLA begins once that is completed. Time before this activity can begin is entirely dependent upon the supplier‚Äôs response time and maturity of security protocols.\nTo increase speed of approval, upload any security compliance documentation (SOC-2 Report, ISO27001 Certificate) to the ZipHQ Request and notify your supplier contact they will be receiving a request from GitLab‚Äôs Security Risk Team for completion ASAP.\nFor any inquiries and questions, please tag @securityrisk in the #procurement slack channel.\n4.D. Compliance Review: 4-14 Days\nThe first page of the Zip request includes anticorruption gating question (e.g., will the vendor interact with government agencies on our behalf, was this vendor recommended by a government official, etc.). If the answer to any of these questions is ‚Äúyes,‚Äù the Ethics & Compliance team must consider whether the vendor presents unacceptably high compliance risk.\nTo do this, the Ethics & Compliance team will conduct additional due diligence, which may, in part, consist of sending a questionnaire directly to the vendor. This questionnaire asks about the vendor‚Äôs ownership and history with applicable regulatory agencies, to better understand the risk, and asks whether the vendor has an anticorruption program in place, to understand whether the vendor has already taken measures to mitigate that risk. Turnaround time largely depends on the vendor‚Äôs responsiveness.\nWhen risk is present, the Ethics & Compliance team will consider whether anything can be done to mitigate that risk. Risk mitigation could, for example, consist of additional provisions in the vendor agreement.\n4.E. PeopleOps Review: 1-4 Days\nPeopleOps serve as reviewers on all professional services requisitions to determine if a background screening is necessary.\nPer GitLab‚Äôs\nPeople Policies\ncontractors are subject to complete a background screening. GitLab will accept a completed background screening from a contractor‚Äôs employer. However, if a background screening was never conducted GitLab will either complete one or ask that one be completed.\nA background screening can be requested by opening an issue in the\nLifecycle Management\nproject by using the\nbackground_check_request\ntemplate.\nApproval will occur once proof of a completed or an initiated background screening has been shared or once the contractor has submitted their background screening for processing.\nThe Sr. Background Check Specialist will only follow up if a result of concern returns on the background screening.\nQuestions and/or proof regarding background screenings on professional service requisitions in Zip can be sent to\nbackgroundchecks@gitlab.com\n.\n4.F. Privacy Review: 4-14 Days\nA Privacy Review is required for all SaaS purchases and other purchase types where the supplier will receive from GitLab or collect on GitLab‚Äôs behalf red/orange data. For existing vendors, a full privacy review is required every 24 months, provided the vendor completed a full and satisfactory privacy review during the prior procurement cycle\nThis activity begins\nafter\nthe supplier completes a Privacy and Trade Compliance Assessment form and a Transfer Impact Assessment Form (where personal data is transferred from the EU to the U.S.) Oftentimes, it can take a week for the supplier to respond and complete the requested forms. The SLA begins once that is completed.\nTime before this activity can begin is entirely dependent upon the supplier‚Äôs response time and whether a DPA/SCCs are required.\nA DPA/SCCs are often made part of the agreement with the supplier. Generally, Privacy would prefer to use our DPA/SCCs but if the supplier provides their DPA/SCCs as an exhibit to the main agreement, Legal and Privacy may use the supplier‚Äôs version to arrive at a final agreed upon version. Procurement will obtain executed versions of DPA/SCCs in the Final Buyer Review stage.\nTo increase speed of approval, add a link to the suppliers privacy notice; upload the suppliers Transfer Impact Assessment Guide; and upload a word version of their DPA/SCCs if the supplier requuests us to use their version.\n5. Final Buyer Review and Coupa Req Creation: 2 days\nProcurement completes a final check that all information is accurate and agreement(s) have been stamped before creating the req in Coupa for final approvals.\n6. Coupa Approvals and Execute Contract: 4 days\nAt this point, the req has been created in Coupa for final FP&A, Functional, and Executive approvals (as applicable).\nOnce these approvals are received, Procurement will route the contract for GitLab and vendor signatures and will comment in the Coupa req when it is routing. After both parties have signed the Agreement(s), Procurement will attach a copy of the executed agreement in Coupa, approve the Purchase Req, and release the PO.\nNote: only certain GitLab team members can sign contracts based on the\nAuthorization Matrix\nTo see how to check approval status in Coupa, visit the\nZip End Users Guide\n.\nNote: the completion of this step is dependent on how quickly the required approvers approve in Coupa and the contract is signed\n7. Finalize Request Details\nYour purchase req has been approved! The supplier will receive a copy of the PO and a communication from Coupa indicating how to submit invoices, one of two ways:\nDirectly in their Coupa portal (preffered)\nSending invoices to\nap@gitlab.com\nwith the PO number included on the invoice\nFailure to follow these instructions will delay payment and invoices uploaded to Coupa by a GitLab team member are not routed for payment.\nDuring this approval step, Procurement is finalizing any request details, such as final contract term dates based on signature effective date, and setting up Zip renewal alerts for the request if needed.\nSince the contract has been signed and PO is released at this point, you may now begin work and/or obtaining services from the supplier.\nWhat if I have an Urgent Request?\nIf you are unable to plan and have a legitimate reason to escalate a purchase request, follow the process below.\nPost in #procurement slack channel request for escalation with:\nLink to your Zip Request\nDate needed\nSpecific and quantifiable impact to the business if date is missed.\n‚ÄúSupplier wants it signed today‚Äù does not qualify as a reason for escalation and these requests will be denied.\n‚ÄúPrice will increase $45K if not signed by Friday‚Äù or ‚ÄúMaterial negative brand impact if not signed by Friday due to missed PR deadlines‚Äù are specific, tangible, business impacts that will be reviewed.\nTruly urgent and business critical requests will be evaluated, please note these are disruptive to our workflow and our ability to meet SLA‚Äôs for requests opened on time.\nWe may or may not be able to accommodate your urgent request based on the risk and bandwidth available.\nWhen you know you have a critical request with a deadline, enter the request into Zip 1-2 weeks prior to standard approval times to avoid needing escalation. Do this even if the contract isn‚Äôt final yet to help expedite the process.\nWhat are the exceptions to the PO Policy?\nExceptions to the PO Policy are:\nOne time purchases under $5K (or less than $5K annually)\nCharitable Contributions (Donations)\nInterview Candidate Reimbursement\nConfidential outside counsel legal fees\nStatutory Tax fees\nPEO Providers\nAR/Customer Refunds\nBoard of Director Payments\nFinancing, Banking and Investing (incl interest, debt, FX, fees)\nCorporate Credit Card\nUrgent Payments not included on list above (approval required from VP, Corporate Controller and/or PAO)\nThird Party Risk Management\nThe procurement team from a compliance and risk perspective has developed a process to handle third party risk to reduce the risk of the following:\nFinancial Fraud or exposure created by third party behavior such as:\nData leakage\nSecurity breach\nBusiness continuity\nEtc.\nFailure of financial viability of third party impacting delivery\nReputational damage arising from third party behavior\nBreach of regulation or law through third party action\nDisruption in customer service due to third parties\nWhen do we require a financial viability check?\nWhen any of the following is met:\nVendor is a private company, LLC or self-employed\nServices provided are required for continued operations\nCloud hosting services\nServices directly related to servicing customers with an uptime requirement\nStorage of data that is not recoverable if vendor goes out of business\nSoftware or services where it would take over 1 week to replace or swap\nHow do we ensure terms to establish GitLab (and our Vendors) rights and responsibilities?\nAny time GitLab engages with a third party for the procurement of goods and/or services, which require GitLab to engage in a contract, the GitLab Legal Procurement team will review the terms and conditions. The purpose of this team is to review the contract which GitLab will enter into, and ensure the following:\nTerms and conditions which are fair and reasonable given the type(s) of products and/or services being procured; and\nAdequate obligations on behalf of GitLab vendors to ensure compliance with\nGitLab‚Äôs Code of Conduct and other company policies,\napplicable laws, rules and regulations (including protection of personal data), and\nthe delivery, support and provision of goods and/or services\nIn addition to ensuring terms and conditions, the GitLab Legal Procurement team collaborates frequently with procurement and business stakeholders to ensure any (and all) contracts align with the needs of the team. The GitLab Legal Procurement team addresses the needs of stakeholders ranging from complex technical application and platform services, to creating and drafting event contracts to meet the needs of GitLab events.\nHow do we prevent disruption in customer service?\nAs GitLab does with its own customers, agreements with third parties include obligations that vendors have to GitLab. These can include, but are not limited to:\nUptime / downtime commitments (for SaaS providers)\nSLAs (for support)\nTermination rights\nAnd other commercial contract provisions which would enable GitLab to seek relief in the event of disruption\nLarge Internal Events Process\nFor any large internal events with a total cost greater than $1M, such as SKO, President‚Äôs Club, Commit, etc, the following should be completed before any contracts are executed or any work is conducted.\nThe planning stages for events of this size should be completed at least 18-24 months prior to the actual event. This allows for ample time to get the necessary internal approvals, run any RFPs needed, and book large hotel blocks or buyouts.\nConnect with your Procurement Category Manager and FP&A Business Partner to determine the various vendors needed to run the event and line item detail in the total event budget. This would include lodging, food & beverage, event planning, on-site support, excursions, travel, etc.\nDetermine with your Procurement contact how these vendors will be selected and the timeline to run any necessary\nRFPs\n. RFPs should be conducted at least 20 months prior to the event dates.\nUpon completion of RFPs, the top 2-3 location options and their total pricing will be presented to the E Group DRI (CRO/CMO) and VP of Finance to determine the preferred location choice and corresponding budget. All information should be summarized in an issue where these approvals may be documented.\nOnce preferred location and budget are tentatively chosen, this information will be presented to the CFO for approval, and will then be presented to the Board for approval at their quarterly meeting, or via email as necessary. Please note that Board approvals may take multiple weeks. CFO and Board approvals should be obtained no less than 18 months prior to the event dates.\nAfter all executive approvals are received, the Zip request(s) should be created to document official approvals, obtain signatures on contracts, and release PO(s).\nHelpful Documents and Templates\nContract Templates\nGitLab Vendor Terms and Conditions\nLogo Authorization Template\nData Processing Addendum (unlocked for editing)\nEU Standard Contractual Clauses\nUS Contractor Agreement\nSOW Template\nChange Request Template\nDocumentation\nNon-Disclosure Agreement (NDA) Process\nCertificate of Insurance Request Process\nUploading Third Party Contracts to ContractWorks\nCompany Information\n- general information about each legal entity of the company\nTrademark\n- information regarding the usage of GitLab‚Äôs trademark\nAuthorization Matrix\n- the authority matrix for spending and binding the company and the process for signing legal documents\nOther Services\nHome Office and Supplies\nIndividual Use Software\nRFP and Vendor Selection Process\nVendor Terms and Conditions\nNon-Disclosure Agreement (NDA)\nCharitable Contributions\nNon-Cost Related Agreements (Including Trials/Demos)\nCharitable Contribution Requests\nIf you have a request to donate GitLab funds to a charitable cause, please refer to the Philanthropy ‚Ä¶\nContingent Worker Policy\n1. PURPOSE This policy has been designed to provide Team Members a high-level overview and ‚Ä¶\nCoupa FAQ\nGeneral FAQ What is Coupa? Coupa is a cloud-based purchasing and payment platform that will be used ‚Ä¶\nExternal Consultant Orientation & Access Deprovisioning\nGitLab will from time-to-time bring in the expertise of External Consultants to work on a specific ‚Ä¶\nField Marketing and Events\nImportant to Know If you are looking to work with a new service provider, review the policy for ‚Ä¶\nHome Office Equipment and Supplies\nFor questions on our policy and how to submit your home office expenses, including which categories ‚Ä¶\nIndividual Use Software\nIndividual Use Software Overview Individual use software is characterized as software essential for ‚Ä¶\nNon-Cost related Agreements\nIf you have documents from a vendor that are not cost-related, such as a Trial/Demo Agreement, ‚Ä¶\nTips for Submitting a Zip Request\nIf purchasing Home Office Equipment and/or Software for your individual work use that is <$5K ‚Ä¶\nVendor Guidelines\nWhen procuring goods/services, GitLab will enter into an agreement with its vendors. This agreement ‚Ä¶\nVirtual Cards\nLast modified July 15, 2025:\nUpdate Legal Review Section (\n3060b6a5\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5290}
{"doc_id": "393044121fecb44c", "url": "https://handbook.gitlab.com/handbook/marketing/positioning-faq", "title": "GitLab Positioning FAQs | The GitLab Handbook", "text": "The Handbook\nMarketing\nGitLab Positioning FAQs\nWhat is GitLab?\nGitLab is an open-source, complete DevOps platform, delivered as a single application, fundamentally changing the way Development, Security, and Ops teams collaborate. GitLab is a tool that enables project planning and issue management, collaborative source code management, security scanning, continuous integration and continuous delivery, and production monitoring.\nWe have a few different versions of GitLab.\nGitLab.com.  Hosted, open source for private repos. Just signup and get started.\nGitLab CE.  On-premises, self-managed GitLab with LDAP integration, issue tracker, webhooks, and integrated CI.\nGitLab EE.  GitLab Enterprise Edition builds on top of the Community Edition and includes extra features mainly aimed at organizations with more than 100 users. It has LDAP group sync, audit logs and multiple roles. It includes deeper authentication and authorization integration, has fine-grained workflow management, has extra server management options and it integrates with your tool stack.\nKnow the comparison charts\nOverview of\nfeature availability by version\nGitLab.com\ncomparison by tier\nGitLab self-managed\ncomparison by tier\nWhat is the benefit of using GitLab?\nGitLab helps organizations deliver better products faster, increase operational efficiencies, and reduce security and compliance risks.  A single application that provides capabilities across DevSecOps lifecycle, GitLab reduces friction through collaboration at the point of code change. GitLab streamlines application delivery with an\nout of the box delivery toolchain\nwhich reduces complexity, lowers maintenance cost, and streamlines delivery. Without GitLab teams need multiple tools which they then must integrate, manage, and maintain. With GitLab, you gain visibility on how long each part of the software development lifecycle is taking and how you can improve it.\nIs it similar to GitHub?\nGitLab started as an open source alternative to GitHub. Instead of focusing on hosting open source projects we focused on the needs of the enterprise and now we address the challenges of the entire DevOps lifecycle, including continuous integration, continuous delivery, monitoring, and application security testing.\nI use GitHub.  What can GitLab offer me?\nGitHub has done a lot for the Git space. Great company.\nFor the basic source control management, we have some key differences:\nScales better with multiple application servers\nRun GitLab in a cluster\nMultiple authentication levels\nGroup level milestones\n4 times more cost effective\nActive community of 2,200+ contributors to updates that are released\nevery month\nSo if you just want SCM, why not go with the open source edition of GitLab?\nFor the\nentire\nsoftware development lifecycle, see\nGitHub vs. GitLab\nOur company uses GitHub.com for all open source projects\nWhy should we use GitLab Enterprise Edition on-premises and not GitHub Enterprise?\nGitHub is closed source software primarily used to publish open source software. GitLab is an open source DevOps platform primarily used to reduce the cycle time of closed source software (i.e. your company‚Äôs software).\nWith GitLab Enterprise Edition you can use\nRepository Mirroring\nto mirror your open source projects from GitHub.com to your on premises GitLab server. Alternatively, if you want to have a public mirror of your GitLab project, you can now do so effortlessly using mirroring. GitHub Enterprise does not have mirroring.\nOpen source projects have different needs than projects developed on-premises by organizations. GitLab was built specifically for use by organizations on-premises and so has more features specific to the enterprise such as 5 levels of\npermissions\n, and the ability to install on a variety of operating systems.\nUnlike other Git management solutions which can have different project views etc, GitHub and GitLab are very similar in features and functionality as well as the workflow they support. Their URL‚Äôs and API‚Äôs are also similar, so developers will quickly become familiar with GitLab.\nGitLab is winning enterprise\nTLDR- Yes.\nGitLab is used by over 100,000 organizations worldwide, on their own servers.\nGitLab.com serves millions of projects and hundreds of thousands of users each month\nGoldman Sachs\nProblem\nResult\n: Improved 2 builds/day to over a 1000/day; simplified workflow and simplified administration\nJaguar Land Rover\nProblem\nResult\n: Increased delivery speed from 3-6 weeks to 30 minutes giving teams faster feedback.\nHemmersbach\nProblem\nResult\n: Increased build speed by 59x; 14.4% improvement in cycle time\n2019 Gartner Peer Insights\nCustomers‚Äô Choice - Enterprise Agile Planning Tools\naverage 4.6 rating:\n‚ÄúDevOps without the overhead‚Äù\n,\n‚ÄúSimple, Intuitive and efficient DevOps Life Cycle tool‚Äù\n, and\n‚ÄúSecure and Scalable Solution‚Äù\nForrester:\nQ3 2017 Continuous Integration Wave-Leader\nGartner:\n2021 Enterprise Agile Planning Tools - Visionary\nGartner:\nQ2 2020 Continuous Delivery and Release Automation-Contender\nForrester: 2018 New Wave Value Stream Management- Strong Performer\nI use Bitbucket.  What can GitLab offer me?\nBitbucket has done a lot for the enterprise Git space. Great company.\nGitLab gives a choice of hosting options for free - SaaS and self-managed\nSo if you just want Source Code Management (SCM), why not go with the open source edition of GitLab?\nBacked by a community of a few hundred thousand developers and more than 2,000 contributors.\nWe launch new features monthly and are iterating on our product faster than anyone in the market. Thanks to our community and our open-way of working, we‚Äôve been able to release new features quickly and effectively.\nJob‚Äôs blog post on the topic is a great read\nI use or am looking at software tools like VersionOne and Rally; how does GitLab compare?\nBoth VersionOne and Rally are strong on the project management side and include road mapping, backlog management, and release management - especially when scaling to teams. GitLab provides strong collaboration across detailed issue management, task assignment, version control, repo management, code review, CI/CD, deploy and resource monitoring. For the enterprise, both tool sets fulfill an important role.\nIf you are working with a Conversational/Agile development style, GitLab EE Premium will solve your needs. GitLab is the next-generation development toolset that covers\n100%\nof your software development lifecyle in one unified experience.\nIf you are going down a path to SAFe, VersionOne is a great option, there is also a native integration from VersionOne with GitLab for the code repo and CI/CD.\nI use or am looking at GitSwarm from Perforce\nDo I need GitLab too?  Am I missing anything by not working directly with GitLab?\nGitSwarm is built on GitLab CE or EE.\nGitSwarm combines Perforce and GitLab to give developers a Git-based workflow they prefer while also providing an organization with enterprise-class scalability, security, and file management performance from Perforce.\nWe‚Äôre happy that Perforce chose GitLab to help their customers create, code, and deploy together. To learn more, have a look at the GitSwarm overview,\nhttps://www.perforce.com/products/helix4git\n.\nHow should GitLab account executives engage prospects that are currently using or evaluating GitSwarm?\nIf the prospect is already using GitSwarm CE, the GitLab channel representative should work with the Perforce account executive to focus on the benefits of upgrading the customer to GitSwarm EE.\nPerforce customers can pay via a perpetual license fee up-front with an annual Support and Maintenance fee or they can purchase via an annual subscription fee.\nGitLab‚Äôs new LFS feature addresses the need to provide storage for large binary files, which is a need of many Perforce clients leveraging Git. This is a must-have feature for companies in the video, hardware, and gaming space.\nGitLab has partnered with Perforce as a reseller.\nGitLab channel managers should be proactive in identifying companies that are using Perforce Helix and work with Perforce account executives in developing a plan to move them to using GitSwarm EE (or at a minimum GitSwarm CE).\nMany long-term Perforce customers are in the process of evaluating Git solutions for certain user segments within their organizations and this is good time to support Perforce in proactively building a relationship during the early evaluation stages.\nWe‚Äôre already using GitLab CE for free. Why should we upgrade?\nCE is a great option for smaller teams but larger organizations benefit from the features of GitLab EE.\nGitLab Enterprise Edition builds on top of the Community Edition and includes extra features mainly aimed at organizations with more than 100 users.\nIt has LDAP group sync, audit logs and multiple roles.\nIt includes deeper authentication and authorization integration, has fine-grained workflow management, has extra server management options and it integrates with your tool stack.\nMore customizable and secure.\nWho are some of your customers?\nUsed by more than 100,000 organizations.\nLarge - IBM, AT&T, CERN\nSmall - SpaceX, Stack Overflow\nWhy are you monetizing an open-source product?\nOur community has worked hard on making a great product.\nThe enterprise world could benefit from this product.\nWe wanted to be able to offer some features that aren‚Äôt necessarily needed in the open source world but are needed for large companies.\nFor those features, we charge our large customers and in return are able to create those features and hire people to work on the open source project.\nI use the hosted version of GitLab. Why would my company need on-premises?\nMore flexibility and customization based on security requirements (i.e. VPCs, IDS/IPS, etc)\nLDAP integration\nPaid support\nPermissions management\nHow does support work?\nFor self-managed\nOn-premises EE -\nsupport statement\nOn-premises CE or Free -\nsupport statement\nFor GitLab.com\nPaid tiers -\nsupport statement\nFree plan users -\nsupport statement\nDo you offer a solution for migrating data from GitHub, Bitbucket, SVN to GitLab?\nImport from Bitbucket, GitHub, anywhere\nWant to start using GitLab? You can easily import your repositories from Bitbucket, GitHub, Gitorious, or anywhere else, all in batch!\nMigrating SVN to GitLab\nhttps://docs.gitlab.com/ee/user/project/import/index.html#import-from-subversion\nSVN stands for Subversion and is a version control system (VCS). Git is a distributed version control system.\nWhy aren‚Äôt you using a GPL license?\nBased on Ruby on Rails (RoR)\nMIT license is common for Ruby and RoR\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1630}
{"doc_id": "ede81bab14bdc503", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/engagement-mgmt/scoping-information/migrations", "title": "Professional Services EM Scoping - Migrations | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nProfessional Services Engagement Management\nProfessional Services EM Scoping Guidelines\nProfessional Services EM Scoping - Migrations\nDescribes the processes for scoping migrations.\nInfo for Sales - positioning migrations to SaaS\nGitLab self-managed to SaaS migration\nMigration Scoping Details\nThis page describes scoping migrations from GitLab, Bitbucket Server or GitHub (Enterprise or .com) to a destination GitLab instance (Self-Managed or SaaS).  The migrations typically utilize our\nCongregate\nautomation tool.  Migrations from other SCM systems and non-GitLab CI/CD migrations are out of scope for this migration tooling and must be scoped separately.\nUsing the\nservices calculator\n, an SA or CSM/CSM can create scoping issue, and work with an Engagement Manager to iterate and refine the services estimate for a customer. In this issue, we have included additional context to the SCM Migration Scoping Questions, which can be previewed below\nSCM Migration Scoping Question\nCustomer Response\nExample response\nRationale for asking\nSource SCM System(s)\nto-do\nBitbucket Server, GitLab Self-Managed\nGitLab PS has automation to facilitate migration for the most popular source systems. Need to know what systems the data is coming from to accurately scope the time to migrate.\nDestination GitLab deployment  (SaaS, Self-Managed(HA), Self-Managed(single node))\nto-do\nSaaS\nWe ask this to ensure the destination system deployment is strong enough to handle the throughput of data that will be required during migration.\nSource GitLab version (must be 2 behind latest)\nto-do\n13.4\nMigration services leverage many GitLab APIs including our project import/export API. There are specific compatability guidelines\ndocumented here\nDestination GitLab version (must be within 2 minor versions of source)\nto-do\n14.1\nMigration services leverage many GitLab APIs including our project import/export API. There are specific compatability guidelines\ndocumented here\nTotal number of Users**\nto-do\nBB = 225, GLSM = 775\nMigrating users is a pre-requisite step to migrating the data to ensure data elements are associated properly. This is a discrete task in migration engagements and must be scoped with number of users as an input.\nTotal portfolios (w/ stakeholder rep)\nto-do\n6\nWe use total portfolios as a proxy metric to identify how much coordination will be required during migration. Each portfolio leader needs to understand and buy into the migration process for things to go smoothly. This coordination time is built into the migration engagement.\nTotal number of git repositories\nto-do\nBB = 1,234; GL = 4321\nWe need to know the total number of repositories to be migrated in order to estimate the number of days of effort.  Note: A bitbucket project can contain multiple git repositories.  We need the total number of repos.\nTotal >5GB GitLab repositories\nto-do\nBB N/A, GL = 3\nOnly applicable for GitLab self-managed migrations to GitLab.com; repos >5GB must be manually migrated due to a 5 GB Cloudflare limitation.  Note that we only care about repo size, not the total project size.\nCI/CD System(s)\nto-do\nJenkins\nWe need to know what CI/CD systems are being used to estimate how much it will take to repoint those pipeline jobs to the new SCM system to help the customer resume IT operations.\nTotal ci/cd jobs? (CI/CD jobs will need cut-over even if not migrated)\nto-do\n4567\nThe engagement could include repointing CI/CD jobs back to a source repository. If this is the case, we will need to know how many jobs need to be reconfigured.\nTypical registry size\nto-do\nIf registry sizes are unusually big, it could affect the speed of migration.\nNote: this question only applies to migrations where GitLab is a source system.\nSSO Identity Provider\nto-do\nAuth0\nWe want to make sure this is already in place prior to migration as it is a foundational to the success of a migration engagement. See here for a\nfull list of supported Identity Providers\nSource system OS and Version\nto-do\nUbuntu v21.10\nIf an upgrade of the source system is needed/included prior to the migration, we want to be sure the OS does not need to be upgraded by the customer to support the new version of GitLab. See\ninstallation requirements\nfor more details.\nSource system DB version\nto-do\nPostgreSQL 13.0\nIf an upgrade of the source system is needed/included prior to the migration, we want to be sure the DB does not need to be upgraded by the customer to support the new version of GitLab.  See\ninstallation requirements\nfor more details.\nNotes:\nSource Code Management (SCM) Migrations do not include secrets mediation.\nSCM migrations do not include transitioning CI/CD functionality to use GitLab CI.\nGitLab Self-Managed to GitLab.com Migration Notes\nThere are specific cases where migrating to SaaS might not be the best recommendation.  Here are some considerations when working with the customer to decide on whether or not SaaS is the best solution:\nIs the customer using something other than GitLab CI?  If so, are they able to establish connectivity between their CI tool and GitLab.com?  There are occassionally issues that prevent them from using GitLab and their CI/CD tools, i.e. the customer is not able to convince their network security team to adjust firewall configurations to be able to use their CI/CD tool behind their firewall with GitLab SaaS.\nIf the customer has a very large number of projects, this could become a change management challenge as well as be cost prohibitive to do the migration.  e.g. for one customer recently, who has been having performance issues in their self-managed instance, it was going to take $400k and 150+ days to migrate them to SaaS (1600 users and 20k+ projects).  GitLab Dedicated might be a better option for some customers who are using Ultimate.\nThe customer may be using some self-managed features that they are insistent on continuing to use that aren‚Äôt available on SaaS (e.g. server hooks).  See\nDifferences Between Self-Managed and SaaS\nfor more information.\nThe customer may have very large GitLab projects that would be difficult to migrate to SaaS, and they would need to\npay for additional storage consumption\nin order to use SaaS; plus there are known git and CI performance issues when customers have very large monorepos.\nMigrating from Self-Managed to SaaS\nhas additional information, rough order magnitude estimates, and common customer questions\nsee\nCongregate Features Matrix\nto see a comparison of GitLab ui migration vs Congregate migration and gain a better understanding of which features get migrated and which don‚Äôt.\nMigrations from one GitLab instance to another using Congregate require that the group and project structure of the source system is retained during migration.\nscoping uses our standard\nAutomated Migration PS Engagement Estimate Template\n. For very small migrations with less than 30 repositories, use the\nManual Migration Estimate Template\nto compare the cost of a manual migration to the cost of automated migration\nSaaS Discovery, SSO configuration and Security configuration activities are typically added to migrations to SaaS.  See Services Calculator activities for more details:\nsaas_discovery_remote\nsaas_sso_configuration_remote\nsaas_security_configuration_remote\nsee\nTEMPLATE Professional Services Presentation\nfor a summary of our migration approach and which features get migrated or not.  This also includes a description of our SaaS Discovery, SSO configuration and Security configuration activities, which we often add for new SaaS customers.\nGitLab Self-Managed to GitLab Self-Managed\nYou can use Congregate but you also have other options at your disposal:\nBackup and restore\nusing rake-tasks. This enables you to restore all of the data from one instance of GitLab to another. This can be used to shorten the migration period, but will cause complete downtime as the source instance will need to be locked during the time it takes to backup. Also, this could take many hours to days depedening on the size of the data.\nGeo Replication\n. This method allows you to setup the new GitLab instance as a Geo secondary. The data will sync over the course of time. Then you can perform a failover to make the new instance primary. This tends to be more complex and requires a more specialized skillset than the backup/restore approach.\nGitLab Self-Managed to GitLab Dedicated Instance\nAs with self-managed to self-managed migrations, self-managed to dedicated instance migrations can be performed using Congregate, a backup and restore approach, or Geo replication. If the Congregate option is used, projects can be migrated in waves of up to 500.\nMigrating groups with projects is a Beta feature\ncould also be used to migrate to dedicated instance. Dedicated instance\nneeds to be on GitLab version 15.10\nor later. Please review linked documentation to understand limits and requirements of this method.\nGitHub Source\nGitHub Enterprise to GitLab Self-Managed\nThis is one of our strongest combinations of source and destination systems. We have migrated 7,000+ projects per wave in our best case.\nIf minimizing the transition period is a concern, we will want to maximize the number of projects per wave.\nTo do this, we need to have full control over the GitHub API Rate limit setting.\nWe also want to ensure there is a strong enough network connection between the GHE and GitLab SM instance to support moving the data. We don‚Äôt have a hard number, but ask them about moving hundreds of GB over a few hours across lots of connections. Their network team should be able to answer.\nIf the customer wants to reorganize their groups/project structure, we can support this (see below common customer requests).\nMake sure the customer acknowledges that they need to have email addresses public, not private for any migration to work properly.\nGitLab self managed should be on 13.7+ or later to take advantage of an API change that allows us to specify a specific github hostname in the import call (rather than defaulting to github.com).\nGitHub Enterprise to GitLab SaaS\nThe destination system rate limit will be the limiting factor in these migrations. We have no control over gitlab.com rate limit so these will need to be scoped at 200-300 per wave.\nGitLab self managed should be on 13.7+ or later to take advantage of an API change that allows us to specify a specific github hostname in the import call (rather than defaulting to github.com).\nMake sure the customer acknowledges that they need to have email addresses public, not private for any migration to work properly.\nGithub.com to GitLab Self-Managed\nThe Github.com API rate limit is very low per user so we workaround by using multiple userIDs provided by the customer.\nThe total projects migrated per day should not exceed 200 until we deliver this to a customer at scale. We‚Äôve done it at small scale in terms of number of projects. But some of those projects were gigantic (70K+ Pull Requests).\nMake sure the customer acknowledges that they need to have email addresses public, not private for any migration to work properly.\nGithub.com to GitLab SaaS\nWe are limited by both the source and destination system rate limits.\nMake sure the customer acknowledges that they need to have email addresses public, not private for any migration to work properly.\nBitbucket Source\n_Note: A project on bitbucket is equivalent to a GitLab group. A Repository on Bitbucket is equivalent to a GitLab project.*\nBitbucket Server to GitLab Self-Managed\nTheoretically, migrations with this pair of source/destination should be able to be scaled as high as GHE to GL Self-Managed. Its safe to increase the projects per wave to 1,000.\nIf minimizing the transition period is a concern, we will want to maximize the number of projects per wave.\nTo do this, we need to have full control over the BitBucket API Rate limit setting.\nWe also want to ensure there is a strong enough network connection between the BitBucket Server and GitLab SM instance to support moving the data. We don‚Äôt have a hard number, but ask them about moving hundreds of GB over a few hours across lots of connections. Their network team should be able to answer.\nIf the customer wants to reorganize their groups/project structure, we can support this (see below common customer requests).\nBitbucket Cloud to GitLab Self-Managed\nGitLab does not have an API to initiate an import from bitbucket cloud currently. Automated migrations are not possible.\nCan position a teach a customer to fish advisory approach that uses the\nBB cloud import UI\nto help with importing.\nBitbucket Server to GitLab SaaS\nWe will be limited by the rate limit on GitLab SaaS, which is why our scoping is low (e.g. 200 projects per wave)\nBitbucket Cloud to GitLab SaaS\nGitLab does not have an API to initiate an import from bitbucket cloud currently. Automated migrations are not possible.\nCan position a teach a customer to fish advisory approach that uses the\nBB cloud import UI\nto help with importing.\nTeam Foundation Server (TFS)/Azure DevOps (ADO) to GitLab\nAzure DevOps (formerly named Team Foundation Server) contains more than a source code repository, so additional questions need to be asked while scoping out an ADO migration. Five common components in ADO are the following:\nAzure Boards: Set of Agile tools to plan, structure and manage work through a backlog. Equivalent to GitLab\nIssues\nor JIRA tickets.\nAzure Repos: Version control system. Supports Git or Team Foundation Version Control (TFVC).\nAzure Pipelines: Build and release services to support continuous integration and delivery of an application. Equivalent to\nGitLab CI/CD\n.\nAzure Test Plans: Several tools to test an application, including manual/exploratory testing and continuous testing.\nAzure Artifacts: Service to store and share packages such as Maven, npm, NuGet, generic and others from public and private sources. Equivalent to\nGitLab Package Registry\n.\nQuestion\nAnswer\nSample Answer\nRationale for asking\nGeneral\nIs it SaaS or self-hosted?\nAzure DevOps (SaaS)\nIf ADO Server (self-hosted), then we need to know software version and other details (i.e. SQL version etc), this will help to pick the right migration approach.\nHow many organizations do you have that need to be migrated?\n1\nAnswer to this question will help to understand the current state, amount of required effort and contribute to future architecture of GitLab.\nHow many projects per organization?\n500\nAnswer to this questions will help to estimate amount of time and approach for migration.\nWhat is the ratio project/repo?\n1:1\nBased on answer to this question additional advisory services to refactor/restructure might be required\nAzure Boards\nAre you using workitems in ADO?\nYes\nIf workitems need to be retained, then additional migration and/or advisory activities need to be added to the engagement.\nNote: there are features in ADO workitems (e.g. custom fields and workflows) that are not supported by GitLab issues. During scoping, make sure the customer is aware of these differences.\nWhat template do you use?\nScrum, Agile, SCCM\nTo understand the current state and ensure\nGitLab‚Äôs Issues\nsupport all the capabilities.\nWhat customizations do you use in your boards?\nExtra swimming lanes, custom fields etc\nBased on this answer we may require additional advisory services to discuss what is possible / not possible and propose alternatives.\nAzure Repos\nAre you using Git or TFVC for your SCM?\nGit\nThis will influence how we interact with the ADO server and determine if a conversion to Git is necessary\nHow many code repositories?\n500\nThis will affect the decision on general approaches listed above\nAre you using branches in your code repositories?\nYes\nIf the answer is no for some of the repositories, the customer will have to choose between converting specific folders in the repository to branches to retain history or accept a flat file migration of the repository with no history\nDo you need to retain history in your code repositories?\nYes\nIf the answer is no and the customer is using ADO, then we do not need to convert the repos to Git.\nAzure Pipelines\nAre you using ADO to build your software?\nYes\nThis will add CI/CD consulting/transformation activities to the engagement if the answer is yes\nHow many builds/build templates are used per code repository?\n1\nThis is a gauge of complexity. Sometimes a code repository can contain several different build definitions\nAre multiple solution (.sln) or project (.csproj) files building the same packages?\nYes\nIf yes, this can require advisory services to refactor to those solution/project files to work with GitLab pipelines\nHow many build servers do you use?\n1\nWe usually convert a build server to something more ephemeral so the more build servers in use, the more development is required to transition them to something more ephemeral\nAre there any specific flags used in your build process? If so, what?\nYes\nThis shows the customer is measuring this data to be used during the transition process.\nDo you use classic releases?\nNo\nIf the answer is yes then additional effort might be required to educate on YAML (pipeline as code) concept\nDo you use UI build definitions?\nNo\nIf yes then this will add CI/CD consulting/transformation activities\nDo you use YAML for all your definitions (build / release)?\nYes\nIf ‚ÄúYes‚Äù is the answer to this question then SOW might include additional effort and advisory services (i.e. CI/CD consulting/transformation activities)\nDo you use extensions from the marketplace that are part of your build/test/release process? Provide the list of extensions (if the answer is ‚ÄúYes‚Äù)\nYes. ARM-ttk extension for linting templates.\nIf yes then we need to ensure that we have equivalent in GitLab for this (or propose alternative solution)\nWhat type of agents do you use?\nSelf-Hosted, Microsoft-hosted (i.e.\nwindows-latest\n,\nubuntu-latest\netc)\nBased on this answers we will make a decision what runner architecture to propose and make sure GitLab supports it and how much effort it requires to achieve similar state\nDo they have special requirements (i.e. network connectivity, required components for build/test/release process)?\nYes, need Visual Studio 2017 capabilities (i.e. legacy software)\nBased on the answer we will make a decision if custom runner images are needed (i.e. to install capabilities)\nAre there any plans in the future to use/add anything special in the CI/CD?\nGPU optimized agent\nBased on the answer we will make a decision on GitLab Runners to avoid potential limits in the future\nAzure Test Plans\nDo you use test plans and do you need similar functionality in GitLab?\nYes\nBased on the answer we need to propose equivalent feature in GitLab\nAzure Artifacts\nDo you use artifact feeds?\nYes\nTo understand the current state\nWhat type of feeds?\nMaven, npm, NuGet\nTo understand the current state and make ensure GitLab has the same capabilities (see\nGitLab Package Registry\n)\nDo you use build/pipeline artifacts?\nYes\nWhat is the retention policy of the packages and do you need to migrate them?\n365 days, no migration needed\nTo estimate additional effort for migration or/and advisory service to retain existing ADO feed refactoring application to use\nGitLab Package Registry\nIntegrations\nAre there any external tools/applications tied to your ADO server?\nYes. We use an in-house tool that pulls from TFS daily for gathering metrics\nIf the answer is yes, additional activities will need to be added to the SOW to accommodate transitioning those tools to pull from Git instead.\nOther git based SCMs\nWe can support these customers by using the ‚Äúbare git‚Äù method of migration. This is done through the\nImport repo by URL UI\nor command line using\ngit push -u\n.\nThe customer should provide a list of git urls to iterate over to support the migration.\nData elements outside of the git envelope (e.g. pull request comments, user membership, etc.) will not be migrated. Only git data elements (e.g. branches, commits, files, tags, etc.) will be migrated.\nNon-git based SCMs\nFor sources like CSV, ClearCase, SVN, TFVC we can support non automated migration but there is risk that should be factored into these engagements as we dont have deep experience with these source systems. Consider working with a channel partner to find expertise in these source systems.\nEnsure the customer has researched and thought about how their projects will be organized on the destination GitLab system. Often times during the initial transformation from non-git SCM to git scm, there will be splitting of a single trunk of source code to multiple git repositories.\nCommon customer requests\n1. Can we reorganize our projects and groups during migration?\nIn congregate, we can do this for source systems of Github Enterprise and Bitbucket. The customer must provide a\n.csv\nfile with\nsource project url\nand\ndestination parent path\nto let us know where the projects will land on the destination system. Also the customer or we must create the group structure prior to a migration with this reorganization involved. There should be additional time added for new group hierarcy creation to the scope.\nWe strongly recommend against this for GitLab as the source and destination systems. This seems counterintuitive, but because GitLab has lots of other data outside of the repository structure that sits in the project/group structure that needs to be maintained, the reorganization step should not happen during the migration. If a customer MUST do this, recommend doing it as a pre or post migration step using the UI or API to coordinate the local moves of projects and groups.\nThis can be positioned as additional days of migration advisory time. We need to determine what this is a function of to have objective scoping.\n2. We‚Äôre on 13.5 (or some old version), can we still migrate?\nThe more of a difference between the source and destination software versions, the higher likelihood there is for data integrity to be lost during migration. The team who maintains the import functionality documented that the importers work when source and destination are\nno more than 2 minor releases\napart from each other. For this reason we include upgrade services to help customers get their source instance to be matching or no less than 2 minor versions from the destination software version. Only in extreme circumstances will we consider exceptions to this guidance.\nOther Resources\nSee the publicly available\nMigration Toolkit\nto help understand the steps taken during delivery of migration services.\nThe\nCustomer folder\nof the migration template project contains useful documentation to help a customer prepare for their migration.\nThe\nMigrating from Self-Managed to SaaS\nhandbook page has details specific to migrating to gitlab.com.\nMigrating from Self-Managed GitLab to GitLab.com\nThings to know when helping customers migrate to GitLab.com.\nLast modified March 5, 2025:\nFix broken links (\n2feb413c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3718}
{"doc_id": "ab9b7e62bceaf67d", "url": "https://handbook.gitlab.com/handbook/security/corporate/end-user-services/supported-apps/zoom", "title": "Zoom | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec End User Services (EUS)\nEUS - Supported Apps (Placeholder)\nZoom\nZoom usage and configuration guides\nZoom is our primary audio-visual communications software, used for communicating internally and with external partners. In addition to simple video calls, the app also features many additional features such as automatic recording, and shared whiteboards.\nA note on privacy and security\nThe Zoom app is directly managed by EUS through Jamf. What this means is that we regularly push updates automatically to ensure thart the app reamins up-to-date in terms of features and security.\nWe also review any new features for security risks added before we enable them for use within GitLab. As a result, there may be a delay in getting to use the latest features, or we may decide to block them altogether.\nWhen using Zoom, please ensure the following:\nEnsure that your laptop‚Äôs OS and the Zoom app are up-to-date. You‚Äôll receive a desktop notification with instructions whenever an update is available.\nPlease note that you may not be able to use the app if it is not updated\nEnsure that you are properly signed into the Zoom app to have full access to unlimited calls and advanced features\nEnsure you‚Äôve followed the\nlaptop configuration guidelines\nUpdate your Zoom profile and aconsider creating a customized\nPersonal link\nAdditional Help\nFor additional help with Zoom, please reach out to us directly via #it_help in Slack or\nit-help@gitlab.com\nZoom - Additional Configuration\nAdditional Zoom setup and configuration steps\nZoom AI Companion\nSetup and Configuration\nZoom Meetings\nSchedule and host meetings\nZoom Recording\nZoom Recording - Setup and Configuration\nZoom Security\nConfigure passcodes and authentication\nZoom Setup\nBasic installation and setup steps\nZoom Tips\nAdditional info for a better Zoom experience\nLast modified July 15, 2025:\nEUS apps pages - Zoom (\nf1ee1729\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 315}
{"doc_id": "ff8ef10c57a268ed", "url": "https://handbook.gitlab.com/handbook/support/workflows/working-with-issues", "title": "Working with Issues | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Workflows\nWorking with Issues\nIssue Prioritization\nIn general, the Product team  will\nprioritize all issues\n(not just customer requests) based on types of issues and the\ndirection of the product\n.\nThe Support Team plays a role in communicating the\nimpact to customers\nof issues and feature requests. By using appropriate templates, adding labels, and adding relevant information in descriptions and comments, the team can communicate which issues affect customers along with their priority and severity. By participating in the scheduling effort for each release, the Support Team represents an additional voice of the customer in product development.\nAdditional Context and Notes\nHaving the Product team comment in the issues directly follows our core value of being transparent and will help customers understand the context around why / when their issues are being resolved, and it provides direct feedback from customers to the Development and Product teams.\nWorking this way, it is possible that a customer reported issue is not picked up for a while (scheduling first, then time to work on a fix, then schedule for release, etc.). However, the idea is that this is OK because most truly urgent issues will in fact be regressions that don‚Äôt have this scheduling problem. If a bug isn‚Äôt a regression, that means it has existed for more than a month when the customer notes it, and thus we‚Äôve gone at least a full month without someone reporting the issue as urgent.\nIssues are not scheduled for a particular release unless Product adds them to a release milestone\nand\nthey are assigned to a developer. We aim to be realistic about scheduled deliverables and will avoid scheduling issues that cannot be delivered in a given release.\nSearching for Issues\nBefore\ncreating an issue\nor\ncommenting on an existing issue\nyou‚Äôll need to search for any existing or related issues.\nHere are some tips:\nSearch using an external search engine, like Google.\nIssues are created in a number of projects in addition to\nthe main GitLab Rails project\n, of which a handful of the most common are:\nThe\nOmnibus\nproject is where issues relating to packaged GitLab and Docker are created.\nIf an error arises during\ngitlab-ctl reconfigure\nthis is probably the best place for an issue to go, unless it relates to a database migration which usually should be in the Rails project issue tracker.\nIssues relating to deploying GitLab with Helm\ngo in the GitLab Chart project\n.\nLook in the\nGitaly project\nfor issues relating to Gitaly and Gitaly cluster.\nIt‚Äôs often worth searching across the\nwhole\ngitlab.org\ngroup\n, particularly if you‚Äôre not sure which project issues might have been raised in.\nAdvanced search tips:\nCombined with searching across the whole group, advanced search has the advantage of also searching Epics.\nOnce you have results, you can filter out closed issues. This is often useful if you‚Äôre just checking for outstanding bugs or feature requests.\nIf you‚Äôre searching for an error or for other text generated by the product, this will also search all our code repositories as well.\nIf you‚Äôre looking for a particular error or string, put it in\n\"double quotes\"\n.\nSee other available syntax options from the\nAdvanced Search Docs\nSearching in the issue view is usually more efficient if you can filter the results:\nIf you are looking for a change that was implemented in a particular GitLab release, filter on Milestone.\nWe create a milestone for each monthly GitLab release.\nConsider also searching merge requests by milestone as well.  If you think something changed in a particular release, this will identify actual code changes in that release. The issue might be closed against a later milestone when the whole feature was finally delivered.\nIf you know which product area is responsible for a feature, filter on the\n~group::\nlabel.\nThe\nfeatures by group page\nis good for finding out the correct group.\nAlternatively, look at the labels used on related issues and MRs you may have found already.\nSort order: If you get a lot of results in the issue view, look at the options for sorting. For example:\nCreated date\nmight be more relevant if you suspect a recent regression in the product.\nYou are likely to spend some time searching for issues you‚Äôve read before.\nConsider adding a reaction on all issues that you come across, and any you raise. For example use\nbookmark\n,\nreminder ribbon\n, or pick something really unusual! You can then filter on\nMy-Reaction\nand search within those results.\nTry searching your browser‚Äôs history.\nFor quickly finding things based on your own comments, consider setting up the\nUser Contribution Search\ntool. It indexes all your contributions and gives you a fulltext search interface.\nRead more about searching in GitLab\nin the product documentation.\nAdding Comments on Existing Issues\nRegardless of the type of issue, please include any relevant information\nalong\nwith a link. Also check that the\ncorrect labels\nhave been applied.\nPlease see the product handbook to see\nwhat information product wants us to provide for feature requests\nOptional:\nSearch for Zendesk tickets based on the\nGitLab Issues\ncustom field. Copy and add the link to the search query as a comment to the issue, specifying that it‚Äôs an internal link to a ZenDesk search of related tickets. This will give the PM more insight into how many customers have encountered an open bug, or have requested a certain feature.\nNote:\nTo obtain the field ID for the\nGitLab Issues\nfield, you can reference\nthis repository file\n.\nAdding Labels\nUsing the appropriate labels is\ncritical\nto ensuring visibility of issues and to get them on relevant PM‚Äôs radar.\nRequired:\nGroup\n: Unsure of which? Check out\ndocumentation metadata\n,\nlabel descriptions\n,\nDevOps Stages\n,\nfeatures list by stage\nor similar existing issue.\nType Labels\nshould be added by the template, but\nadd\nthem if any are missing.\n~customer\n(if a ZenDesk link is added, the bot will add this automatically if you forget)\n~regression ##.x\nif applicable; for high-impact ones, add\n~\"Next Patch Release\"\nand ping the relevant lead and subject area experts\nFor\n~customer\n+ any label that allows severity (most commonly\n~\"type::bug\"\n) labeled issues, a Severity estimate is required. If it is missing, please add them to attract PM attention to the issue:\nSeverity\n: Follow the definitions to the best of your ability when assigning severity. If it‚Äôs an\n~severity::1\n, mention the PM and consider posting in the appropriate Slack channel as well.  As Support often has a better idea of the impact on the customer(s), please explain the impact in a comment when you assign the Severity label. Feel free to have the customer add a comment as well, adding any other context they feel might be important.\nOptional, but highly recommended:\nStage\n~Reproduced on GitLab.com\nif applicable\nFor L&R related issues, please see the\nspecific guidance on Fulfillment issues\n.\nEscalate New and Existing Issues\nThe Support team can directly ping the PM on the issue or in the #product Slack channel (see\nDevOps Stages\n) in case this may help with communication. Comments might include asking for an update on behalf of the customer, or discussing the severity or priority especially if it needs to be increased.\nCreating Issues\nWhenever possible, reproduce the issue and file a\npublic\nissue with a reference to the ZD link as an additional example.\nWhen reporting a problem, use the\nBug\ntemplate, then fill out as much of the information as possible. Ensure you\nadd labels\n.\nWhen writing issues, consider adding questions as a comment after creating the issue. For example: ‚Äú@PM please provide feedback on this issue. Are we interested in fixing/implementing this? How critical do you think it is?‚Äù\nAvoid Re-opening Closed Issues\nIf you find an existing closed issue that is the same or similar to the customer problem at hand, you probably should not re-open the closed issue. The closed issue may actually be unrelated. Or maybe the closed issue describes the same problem you see now, but has a different root cause. Even if it‚Äôs the same identical problem, you probably should not re-open the issue because that issue might have a previous milestone and so now the re-opened issue would have an invalid milestone in the past.\nInstead, consider creating a new issue, and mention/link the existing closed issue to it. Let the Product and Engineering teams triage the new issue further and don‚Äôt worry about creating duplicates.\nMaintain confidentiality\nIf an image, log output, etc. is required for the issue, try to produce your own test image. If you are unable to reproduce the issue and you wish to use the image/information provided by the customer make sure you\nobtain permission\nfrom the customer since the image/information may (inadvertently) include sensitive information like names, group names, user names, or code.\nPublic issues are always preferred, but if customer logs or other information needs to be included and the customer is willing to share it internally, but not publicly then make the issue\nconfidential\n.\nInformation gathering\nFor the\nApplication and environment information\nsection of issue templates, use:\nOmnibus:\nsudo gitlab-rake gitlab:check\nSource:\nsudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production SANITIZE=true\nand\nOmnibus:\nsudo gitlab-rake gitlab:env:info\nSource:\nsudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production\nCreating Feature Proposals\nAs per our\nStatement of Support\n, the Support Team will generally ask the customer to create feature requests. Feature requests with direct feedback from customers are valuable as customers are often best equipped to explain their use case, requirements, and needs. Ask customers to create the feature request issue and share the link with us. Once an issue link is available,\nadd labels\nand relevant details in the\ncomments\n, and\nlink the source\n.\nIf you create a feature proposal on behalf of a customer, please follow the same process as\nCreating Issues\nby using the\nFeature Proposal\ntemplate. After the issue is created, share the link in a reply encouraging the customer to follow and contribute to the issue.\nNote:\nGitLab has limited development resources. Additionally, we must think about how widely applicable a feature may be to other users. Requests that are very specific to one company‚Äôs workflow are likely to be rejected. Even if a feature seems widely applicable, we may leave the feature proposal dormant for some time and see if other users and customers chime in that they are also interested. Features that garner interest from multiple organizations will be considered more rapidly. Of course, there are always exceptions to these ‚Äòrules‚Äô. This note is meant to set the expectation that feature proposals may not be implemented quickly.\nFunctional escalation points\nService/Product\nEscalation Types\nEscalation Point\nAssignment\nGitLab\nBug reports or Feature proposals\nBug\nor\nFeature proposal\nOmnibus GitLab\nBug reports, Feature proposals\nhttps://gitlab.com/gitlab-org/omnibus-gitlab/issues/new\nOmnibus GitLab specialist\nGitLab Runner\nBug reports, Feature proposals\nhttps://gitlab.com/gitlab-org/gitlab-runner/issues/new\nGitLab CI specialist\nGitLab Workhorse\nBug reports, Feature proposals\nhttps://gitlab.com/gitlab-org/gitlab/-/issues/new?issue%5bdescription%5d=%2flabel%20%7eworkhorse\nMaintainer of gitlab-workhorse\nSee the\nGitLab team page\nfor assignments\nOperational escalation points\nService/Product\nEscalation Type\nEscalation Point\nAssignment\nGitLab Infrastructure\nAnything related to the\nrunning of GitLab.com\n, performance, something breaks\nhttps://gitlab.com/gitlab-com/infrastructure/issues/new\nProduction Lead/Senior Production Engineer\nSupport Engineers with GitLab.com console access\nAnything related to the\nuse of GitLab.com\n, operations that can‚Äôt be performed with admin access\nSee\nConsole escalation requests\nUse\n~\"GitLab.com Console Escalation\"\nlabel\nGitLab Support\nAny and all questions in relation to providing customer service for GitLab users and customers.\nhttps://gitlab.com/gitlab-com/support/support-team-meta/issues/new\nSupport Team Lead/Senior Support Engineer\nSee the\nGitLab team page\nfor assignments\nOmnibus GitLab\nRelated to Omnibus GitLab packaging only.\nGitLab\nomnibus release packages\nGitLab Runner\nInformation on\nGitLab Runner\nRunner documentation\nGitLab Workhorse\nInformation on\nGitLab Workhorse\nDescription\n‚ÄúGitLab-workhorse is a smart reverse proxy for GitLab. It handles ‚Äúlarge‚Äù HTTP requests such as file downloads, file uploads, Git push/pull and Git archive downloads.‚Äù\nGitLab Infrastructure\nReach the infra team on\nSlack\nOld blog post on\ninfrastructure\nGeneral Product Feedback\nIn the case where general product feedback is received and it is not clear whether it is related to or belongs in an issue, feel free to convey the feedback to the product team as outlined in our\nProduct Feedback section\n.\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2068}
{"doc_id": "e3e0d0e1ce236d65", "url": "https://handbook.gitlab.com/handbook/security/threat-management", "title": "Security Threat Management | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Threat Management\nSecurity Threat Management Sub-Department\nThe Security Threat Management sub-department is responsible for identifying and remediating vulnerabilities or threats that may impact GitLab, our Team Members or our Customers and the community at large.\nSecurity Threat Management Mission\nThe Security Threat Management sub-department‚Äôs mission is to support the business and our overall security efforts by ensuring that we are focused on real world threats and vulnerabilities that impact us. We accomplish this by:\nworking closely with engineering, product, infrastructure, and other security department teams\ndesigning and deploying vulnerability and threat management processes\nconducting in-depth security related research and assessments\ntransparently communicating important information externally to customers and the community alike\nTeams\nThe Security Threat Management sub-department includes the following teams. Learn more about each by visiting their Handbook pages.\nSecurity Identity Engineering\nleads the technical strategy and automation implementation of next-generation identity and access management (IAM), role-based access control (RBAC), and administrative access controls for internal GitLab systems, cloud infrastructure, and tech stack applications.\nIdentity Engineering Team\nThe Identity Engineering team leads the technical strategy and automation implementation of identity and access management (IAM), role-based access control (RBAC), and administrative access controls for internal GitLab systems, cloud infrastructure, and tech stack applications. The Security team focuses on customer and product trust, while the Business Technology and IT team focuses on compliance and financial trust.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 250}
{"doc_id": "92fac1bf9fe5d595", "url": "https://handbook.gitlab.com/handbook/about", "title": "About the Handbook | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nHistory of the handbook\nThe handbook started when GitLab was a company of just ten people to make sharing information efficient and easy.\nWe knew that future GitLab team-members wouldn‚Äôt be able to see emails about process changes that were being sent before they joined and that most of the people who would eventually join GitLab likely hadn‚Äôt even heard of us yet.\nThe handbook was our way of ensuring that all of our company information was accessible to everyone regardless of when they became part of the team.\nAdvantages\nAt GitLab our handbook is extensive and keeping it relevant is an important part of everyone‚Äôs job.\nIt is a vital part of who we are and how we communicate.\nWe established these processes because we saw these benefits:\nReading is much faster than listening.\nReading is async, you don‚Äôt have to interrupt someone or wait for them to become available.\nTalent Acquisition is easier if people can see what we stand for and how we operate.\nRetention is better if people know what they are getting into before they join.\nOn-boarding is easier if you can find all relevant information spelled out.\nTeamwork is easier if you can read how other parts of the company work.\nDiscussing changes is easier if you can read what the current process is.\nCommunicating change is easier if you can just point to the diff.\nEveryone can contribute to it by proposing a change via a merge request.\nOne common concern newcomers to the handbook express is that the strict documentation makes the company more rigid.\nIn fact, writing down our current process in the handbook has the effect of empowering contributors to propose change.\nAs a result, this handbook is far from rigid. You only need to look at the\nhandbook commits list\nto see the evidence. Every attempt is made to document guidelines and processes in the handbook. However, it is not possible to document every possible situation or scenario that could potentially occur. Just because something is not yet in the handbook does not mean that it is allowed. GitLab will review each team member‚Äôs concern or situation based on local laws to determine the best outcome and then update the handbook accordingly. If you have questions, please discuss with your manager or contact the\nPeople Success\nteam.\nHandbook Interpretation\nThe handbook is subject to interpretation. We do our best to be as clear as possible to minimize confusion and/or misinterpretation. We also recognize that we have a global audience and that may bring different interpretations. If you have any questions or need further clarification please check with the content owner of the page. When in doubt please reach out and ask.\nRemember that\neverything is in draft\nat GitLab and subject to change, this includes our handbook.\nCount handbook pages\nIt‚Äôs easy to see that the handbook is large, but have you ever wondered just\nhow\nlarge?\nThe handbook is over\ntwo\nthousand\npages long. That‚Äôs a lot of good info!\nHistorical Word and Page Counts\nabout.gitlab.com/handbook\nDate\nWord Count\nPage Count\nNotes\n2018-01-01\n298,806\n228\n2018-10-01\n427,929\n335\n2019-01-01\n520,519\n439\n2019-04-01\n656,668\n586\n2019-07-01\n818,064\n766\n2019-10-01\n987,397\n884\n2020-01-01\n1,204,642\n1,035\n2020-04-01\n1,491,017\n1,222\n2020-07-01\n1,851,350\n1,488\n2020-10-01\n2,166,627\n1,759\n2021-01-01\n2,410,554\n1,914\n2021-04-01\n2,615,372\n2,056\n2021-07-01\n2,956,781\n2,271\n2021-10-01\n3,138,952\n2,355\n2022-01-01\n3,280,108\n2,395\n2022-04-01\n3,474,993\n2,553\n2022-07-01\n3,628,280\n2,641\n2022-10-01\n3,732,384\n2,724\n2023-01-01\n3,732,186\n2,722\n‚¨ÖÔ∏è Last entry before migration\n2023-07-01\n3,905,979\n2,743\n2023-10-01\n3,478,407\n2,306\n2023-12-22\n0\n‚¨ÖÔ∏è Handbook Migration Complete\nhandbook.gitlab.com/handbook\nDate\nWord Count\nPage Count\nNotes\n2023-07-01\n150,732\n133\n2023-10-01\n1,909,139\n1,403\n2024-01-01\n3,631,360\n3,003\n‚¨ÖÔ∏è  Migration Completed\n2025-01-03\n5,129,952\n3,823\n2025-07-21\n3,785,368\n3,180\n‚¨ÖÔ∏è Hugo generated Live Count\nMethodology\nWord and page counts are determined through a simple two-step process:\nCount the number of words in the handbook. This can be done by running\nfrom the root of the repository.\nCount the number of pages in the handbook. This can be done by running\nfrom the root of the repository.\nNote: If you need to go back to an earlier version of the handbook, use\ngit checkout `git rev-list -n 1 --first-parent --before=\"2021-07-02 00:00\" master`\nspecifying the next day after the day you want.\nView Statistics\nGitLab uses\nSnowplow\nto track handbook usage; the information can be viewed on\nTableau\n.\nMore about the handbook\nWe‚Äôve gathered\nsome\ninformation about the handbook here, but there‚Äôs still more elsewhere.\nHandbook usage\nHandbook editing examples\nContent Websites\nOverview This area has traditionally been referred to as ‚Äúthe handbook‚Äù, but over time ‚Ä¶\nContributing to the Handbook\nEditing the Handbook\nInformation on how to edit the handbook including tips and troubleshooting.\nGitLab Handbook Usage\nAbout how GitLab uses the handbook.\nHandbook Changelog\nThe last 100 Merge Requests to the Handbook\nHandbook Direction\nHandbook Escalation\nFor information on team members‚Äô roles and responsibilities, see Content Websites page. ‚Ä¶\nHandbook Style Guide\nGitLab‚Äôs general communications practices are detailed at GitLab Communication, but beyond ‚Ä¶\nLast modified March 7, 2025:\nFix broken links (\nb1d67d8e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 852}
{"doc_id": "e8371da278fb8f8c", "url": "https://handbook.gitlab.com/handbook/finance/financial-planning-and-analysis", "title": "Financial Planning & Analysis | The GitLab Handbook", "text": "The Handbook\nFinance\nFinancial Planning & Analysis\nWelcome to the FP&A Team Handbook. Our missions is to maximize GitLab‚Äôs long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively\nOur mission\nMaximize GitLab‚Äôs long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively\nOur objectives\nFacilitate aligned cross-functional execution of GitLab‚Äôs strategy\nBring predictability and operational rigor to GitLab\nEnsure financial and operational goals of GitLab are defined, documented and achieved\nEvangelize awareness of strategy and each departments role in achieving it\nEnsure sound data-driven decision support\nEnsure our public company narrative aligns with operating strategy\nHow GitLab‚Äôs FP&A plans to get there‚Ä¶\nManage the budget and planning processes for GitLab‚Äôs Board Plan\nBuild and maintain a\nlong-term financial model\nthat identifies long-term strategy and financial targets\nDefine business drivers and\nKPIs\nin our operating and long-term models in collaboration with the business and measure efficacy of the business plan\nOwn the rolling forecast process and provide actionable insights to ensure departmental performance vs. plan and strategy\nDrive quarterly earnings process as public company, including guidance and investor narratives\nProvide insights on the business drivers to constantly look for opportunities to improve performance\nProcess Improvements\nAnalytics\nEducation\nOur team\nFP&A comprises five different sub-teams to support our FP&A goals:\nCorporate FP&A\nSales Finance\nMarketing\nFinance Issue Tracker\nAnalytics Issue Tracker\nfor all data, dashboard, or reporting requests\nFP&A Job Ladder\nAdaptive Insights\nKey Slack Channels\n#fpanda\n#fpa-ap-gl-collaboration\n#month-end-close-and-gl-team\n#key-review\nFP&A Processes\nAnnual Operating Plan (‚ÄúAOP‚Äù)\nWhat\n: The AOP includes the annual strategy, business plans/budgets for each function, plans for how we will achieve our key metrics and forecasts for all of our key metrics. The AOP is a three statement (Income Statement, Balance Sheet, and Statement of Cash Flow), non-GAAP bottoms-up plan that spans the current fiscal year. The revenue is forecast off of the bookings plan and expenses are planned at the headcount and vendor level.\nPurpose\n: GitLab‚Äôs AOP identifies GitLab‚Äôs company goals for the next year and strategies for achieving them. Provide guidelines to understand how much capital is needed to achieve these goals.\nGovernance\n: The AOP is approved by the board of directors every year.\nAnnual Planning Steps\nAlign executive team on strategic priorities\nPrioritize efforts aligned with three year strategy and annual themes\nSign-off on financial priorities for the year\nBuild out bottoms up integrated sales and marketing financial model with key assumptions documented so they can be tracked\nSet targets agreed upon by Product, Marketing and Sales\nReview product investments vs expected revenue generation\nSet expected amount for annual compensation increases\nSet targets for any contributors on a company based performance plan\nProvide a budget envelope to each e-group leader based on dollars that they can allocate into headcount and program spend\nGenerate the expense Plan based on a headcount list, TBH list, vendor level spend list\nHeadcount list communicated to talent acquisition, proposed vendor list communicated to procurement (future with Purchase Orders in place for existing vendors)\nGenerate and document key assumptions\nShow trending of key metrics as output of the Plan\nCapture Plans to drive key metrics\nCapture X-functional dependencies of execution\nDocument business plans for key drivers and initiatives of the year, e.g. new products\nRevise and update the annual sales compensation plan\nSet annual quota assignments for revenue producing roles\nFY26 AOP Milestones\nKey planning milestones are listed below. For a more detailed timeline and planning checklist please engage your FP&A business partner.\n2024-09-09 (week of) CFO/CRO Meeting: Discuss range of bookings, % expense, and agree on Q4 overattain/underattain scenarios impact\n2024-09-23 (week of) FP&A Meeting: Kickoff with Bottoms-up Targets with FP&A\n2024-11-15: Bottom-up Envelope submissions and Investment Area business cases are due\n2024-12-06: XFN eGroup Skips alignment on projects and dependencies\n2024-12-09 (week of) eGroup Offsite: FY26 AOP Alignment Meeting\n2024-12-12 Q3 Board Meeting: update planning progression and preview FY26 AOP\n2025-01-21 eGroup Meeting: update planning progression and Q4 Board Deck preview\n2025-02-12 eGroup ASYNC: FY26 AOP Final review\n2025-03-27 Q4 Board Meeting:  Final Formal Approval of FY26 AOP\nLong Range Outlook (‚ÄúLRO‚Äù)\nWhat\n: The Outlook is a three to five year strategic and financial plan\nPurpose\n:\nIdentify and agree on long-term investments and capabilities that will position GitLab for success over the long-term.\nDetermine whether near-term priorities and funding need to change in order to achieve long-term goals and financial targets.\nOutlook\n:\nRefresh and reaffirm the company‚Äôs three year strategy.\nMake recommendations to identify and categorize strategic investment options which adjust our strategy.\nFocus on areas where decisions today meaningfully impact growth trajectory and/or investment needs.\nIdentify blockers to LT targets and drive to resolution, including incremental funding and/or reprioritization.\nFinancial plan\n:\nSet the financial envelope needed to achieve GitLab‚Äôs long-term targets, including bookings, revenue, P&L and cash metrics.\nEnsure healthy tension between funding investment needs and fiscal discipline / company efficiency.\nLaunch workstreams to resolve areas of tension before annual planning kick-off for the following fiscal year.\nPrinciples\n:\nFocus on identifying drivers which would bend or shift growth curves, for both top-line and expense\nIs a tops-down strategic and financial plan, not a bottoms-up operational plan\nCross-functional leadership buy-in required; not a finance-only numbers exercise\nPublic company benchmarking drive decisions around GitLab long-term targets\nGovernance\n: The Outlook is reviewed and discussed by the board of directors every year.\nLRO Updates\nThe LRO is refreshed on an annual basis, occurring shortly after the fiscal year plan is finalized. After the LRO is refreshed, there may be additional updates throughout the remainder of the year, on a quarterly and ad-hoc basis to determine whether near-term priorities and funding are needed in order to achieve long-term goals and financial targets.\nAs part of the quarterly and ad-hoc updates to LRO, the following are included:\nComparison to last LRO refresh across bookings, P&L, and cash flow\n6 quarter rolling forecast, including bookings, P&L, and cash flow\nComparison to peer benchmarking of similar revenue size for growth and efficiency metrics\nThe following are inputs in the LRO refresh and subsequent LRO updates:\nCapabilities and key investments across each business function (GTM, R&D, G&A), along with key cross-functional dependencies, risks/blockers\nGTM modeling: demand, productivity and supply capacity\nTotal rewards strategy\nExpense YoY and % of revenue targets, HC/non-HC spend by department\nBook to bill to cash collection assumptions\nSeasonality of bookings and expenses\nCash commissions\nPP&E/Capex purchases\nThe Corporate Finance team leads the LRO refresh and updates in collaboration with: e-group members to determine key investments, capabilities, and dependencies; GTM Finance team for sales productivity/capacity models, CTB, and bookings attainment; G&A Finance team for total rewards strategy, benefit assumptions; and the R&D Finance team to help inform on allocations, hosting/infrastructure expenses.\nBusiness Planning\nBusiness Planning Goal\nFor GitLab‚Äôs top growth drivers and new products, drive and document alignment between contributors to success. Writing a business plan drives clarity of thought and operations. Agree on governance models to manage initiative success and cross-functional accountability. At a minimum, each business plan should cover:\nExplain what an initiative is, why we should be focused on it.\nIdentify how each function will support its success, what are dependencies & risks.\nIdentify how we measure success, e.g. pipeline or bookings goals.\nBusiness Planning Details\nProduct plan\n- what are product features to ship, by when? What is committed and what is at risk? What are competitive considerations? If there are phases, what is in scope for each phase?\nPricing plan\n- what is the pricing strategy, what are open decisions, what is the margin structure?\nMarketing plan\n- how will product marketing and demand generation support the business plan.\nSales plan\n- what are the drivers of the sales plan? What is the quarterly Plan for  bookings? What are assumed attach rates, penetration rates, adoption rates, where is there uncertainty? What is the field enablement plan?\nServices plan\n- if applicable, how can enhanced services improve sales and adoption?\nOperational plan\n- what infrastructure do we need (fulfillment, IT, rev rec, legal, security, etc.)\nFinancial plan\n- gross margin and contribution to P&L, if applicable\nKey Contributors\nDriver: FP&A\nContributors\nProduct: lead PM(s), pricing lead\nMarketing: leads within both Product Marketing and Demand Gen\nSales: Regional VPs, RS&A, GTM FP&A\nSupport/Services\nAs needed: fulfillment, IT, accounting, legal, security\nApprovers / Informed:\nCFO, CRO, CMO, CPO, e-group\nReview and Governance\nContributors (above) agree on business plan and review with e-group members for feedback. Include proposed measurement plan (e.g. bookings or pipeline goals)\nOn a defined cadence (monthly or other), review product accomplishments vs. plan\nOn a defined cadence (monthly or other), review GTM measures of success vs. plan\nOn a defined cadence (quarterly or other), review P&L impact vs. plan\nEach quarter, refine success goals/metrics based on learnings to iterate on plan of record\nQuarterly & Monthly Cycle (incl. close, variance, forecast, guidance)\nGitLab‚Äôs FP&A team participates in a rigorous monthly close process.\nGoals\nSet clear deadlines to best support our accounting team and ensure timely delivery of information to executives\nAnalyze the performance of our budgets and forecasts against actuals, identify insights which enable our executives to better make decisions.\nUpdate our internal forecasts and update our investor guidance to prepare for the quarterly earnings call\nImprove forecasting methodologies and approaches to hold ourselves accountable and drive accountability to the business owners of the budget\nKey Definitions\nActuals\nWhat\n: Actuals are results that have been reported or exist in a system that is designated as a single source of truth for the item that is being measured. Each month accounting closes the month and financial results are recorded in our ERP system and are published in our financial statements. These actuals are compared to the Plan and our forecasts.\nForecast at\nFYyyyy-mm\nPurpose\n: In a dynamic high-growth business, GitLab‚Äôs needs may change through the year and we need to be able to predict what is going to happen.\nWhat\n: Forecast is a dynamic assessment based on current expectations of financial performance. The FP&A team will publish a monthly forecast for revenue driven by bookings and other key inputs and expenses driven by headcount and vendor spend. A monthly forecast does not extend the forecast period. For example in March 2020, the forecast will span from February 2020 to January 2021 with February actuals and a forecast for the period March 2020 to January 2021 ‚Äî this will be called the (1+11) forecast.\nGovernance\n: The Forecast at\nFYyyyy-mm\nis approved by the Head of FP&A and reviewed with the CFO.\nNote: Prior to locking and archiving any version in Adaptive, Corporate FP&A will update the FX rates in Adaptive using\nGoogle Finance FX Rates\n.\nForecast at\nFYyy-Qx\nPurpose\n: In a dynamic high-growth business, GitLab‚Äôs needs may change through the year and we need a guidepost to hold business leaders accountable. We plan our expenses at a high level (e-group) and we expect this group to make prioritizations and trade-offs while remaining accountable against the plan parameters. By formally reforecasting quarterly, we can quickly evaluate and incorporate new initiatives into our forecasting model. That being said, we do follow an annual plan to set our goals and measurement for our top-level targets of revenue, profitability and expense management and ensure we continue to  meet any public guidance previously communicated\nWhat\n: Forecast at\nFYyy-Qx\nis a dynamic assessment based on current expectations of financial performance. The (3+9), (6+6), and (9+3) quarterly forecasts include revenue driven by bookings and other key inputs and expenses driven by headcount and vendors.\nGovernance\n: The quarterly forecast is approved by the Head of FP&A and reviewed with the CFO. It is then reviewed with e-group and the board of directors. e-group will be held accountable to the quarterly forecast for expenses.\nForecast Snapshots in Months 2-3 of each Fiscal Quarter\nPurpose\n: As a public company, GitLab needs to maintain a pulse on the P&L and key financial metrics. As a fiscal quarter develops, the snapshots inform the CFO and e-Group of our latest forecast and any adjustments from the previous snapshot view.\nCadence\n:\nIn Month 1 of the quarter\n: once in week 2 (the week before FP&A‚Äôs Month 1 forecast version lock)\nIn Month 2 of the quarter\n: weekly starting week 2 (the week before FP&A‚Äôs Month 2 forecast version lock)\nIn Month 3 of the quarter\n: weekly\nWhat\n: P&L snapshots track company metrics against Wall Street expectations related to revenue, non-GAAP operating income and non-GAAP earnings per share and enable GitLab to make in-quarter spending decisions based on the latest estimates from FP&A. The forecast snapshots are developed by FP&A and presented to the CFO in order to facilitate decision-making. The P&L snapshot follows the\nFinance Business Partners / Talent Acquisition Managers Headcount Forecast Interlock process\nand is delivered to the CFO via a slide deck tracking week over week changes in the snapshot. A summary is also communicated to the CFO and FP&A team via the #fpa_private Slack channel.\nMonthly FP&A Close Timeline\nThese dates are based on an 8-day accounting close. Corporate FP&A will confirm the close date with the accounting team and update the FP&A Close calendar in Google accordingly. For FY23, the target is to close by WD 5 with full consolidation (including tax entries, eliminations) by WD 10.\nClose timeline\nWD -3: AP Closed.\nWD -2: All accruals and JEs are due from FP&A\nWD -2: NetSuite Actuals for current month close included in Adaptive (performed by Corporate FP&A)\nWD 1: Headcount actuals loaded into Adaptive (performed by Corporate FP&A)\nWD 2: FP&A Flux distributed and is due one week after and/or one day after Accounting close\nWD 2: FP&A sends flash to the board (quarter only) - Bookings, revenue estimate and NGOI estimate\nWD 5: Revenue Closed. Start revenue, billings, collections variance analysis.\nWD 7: Final entries and allocations booked\nWD 8-9: FP&A review of AvF complete\nWD 9: Adaptive forecast locked\nOther Key Dates\nDay 8: Snapshot ARR, customer count, net retention (note this is captured on Day 8, not WD 8)\n2nd Tuesday every month: Variance deck shell distributed\n3rd Tuesday every month: Variance deck pencils down and due to the Head of FP&A\n3rd Thursday every month: CFO Variance meeting, with distro to FP&A Slack channel 24 hours before\nAfter accounting close: Revenue Committee Sync meeting between CEO, CRO, and CFO.\nAccounting close expectations for FBPs\nFBPs will obtain a daily report with open invoices/POs from Misty and drive obtaining the required approvals and invoices from respective business partners.\nIf you have questions for AP GL team, please ask in the\n#fpa-ap-gl-collaboration\nchannel.\nThe Accounting close calendar can be found\nhere\n.\nVariance Meeting with CFO\nEach month after the financials have been published, GitLab reviews all aspects of the business including Corporate Metrics, Bookings, Revenue, Gross Margins, Expenses. The goal of this meeting is to do a comprehensive review so that finance leadership has a pulse on the business and signs off on the financials. Based on insights from variance analysis, the FP&A team makes actionable recommendations to the CFO and e-group to ensure continued performance to Plan/Forecast.\nThe variance analysis will compare department budgets with actual results and examine any material differences between budgeted and actual costs. Additionally, the actuals for expenses will be compared to the quarterly rolling forecast. The expenses are reviewed at the divisional department level, allowing GitLab to measure progress in meeting its Plan or rolling forecast. The team also evaluates the accuracy of forecasts and will make adjustments to the next rolling forecast.\nVariance and Flux Analysis\nThe study of differences between actuals and the Plan or Forecast. During the variance analysis processes the GitLab FP&A team analyzes and isolates any variance in question to the lowest level possible. The team reviews detailed items in order to identify the root cause of the variance. This could include transaction date, cost center, vendor, location, department or additional low level details.\nThe FP&A team takes the following into consideration while evaluating variances in relation to materiality thresholds:\nThe percentage size of the variance (i.e. what was the overall variance by percentage)\nThe correlation to other variance (i.e. did a immaterial difference in one place cause a material difference in another)\nThe inherent character of the variance (i.e. does the expense correlate to the traits of the business)\nThe FP&A team delivers an FP&A expense flux review document at each monthly close, documenting and quantifying business drivers for variance. The goal is two-fold:\nControl\n: ensure accuracy of actuals. Analysts should aim for 90% coverage in explanations, e.g. if variance is $100, aim to list drivers for net $80 of the variance for any particular intersection above threshold. List drivers in descending order of impact, followed by large offsetting drivers.\nInsights\n: leverage insights gained from closed month to inform rolling forecast. Changes in business strategy/model, new accounting policies, and refinements on forecast methodology should be documented and incorporated into the new forecast.\nPerformance Indicator\n: Variance percentage\nWe measure our team performance based on our forecast accuracy, also known as variance percentage. Variance percentage is defined as the difference between actuals and Plan or rolling forecast. We calculate it as follows:\nVariance Percentage (Plan) = (Actuals - Plan)/Plan or\nVariance Percentage (Forecast) = (Actuals - Rolling Forecast)/Rolling Forecast\nVariance analysis should address any inputs or additional requests from the last\nVariance meeting\n, as applicable.\nTypes of Threshold and Materiality\nGenerally accepted accounting principles (GAAP) does not provide definitive guidance in distinguishing material information from immaterial information. Therefore, GitLab uses a percentage based approach for defining materiality thresholds and can be found below. The Plan vs Actuals vs Forecast Sisense dashboard provides the data for the threshold analysis via a color coded legend.\nOur goal is to have revenue and EBIT variance percentage within +/- 2% on a quarterly basis.\nKey accounts and expenses by division should be within +/- 2% versus Plan or rolling quarterly forecast every quarter.\nVariance Meeting with EVPs\nEVPs are held accountable to meet the budget in dollars that they are given. The budgets typically are broken into headcount and program spend. Each finance business partner will run a meeting with their Finance leader and the EVP to review the past month. The information should be presented as timely as possible. Given the accounting close is 8 days, the team is asked to use pre-close numbers for the review to increase the speed of information. During the meeting, the Finance Business Partners will review GitLab results in addition to a detailed overview. Each division can expect to review the following during the monthly meetings:\nCompany results\nSpending OpEx vs Plan\nDivisional level review including an executive summary with relevant insights and watchpoints\nLast month vs plan/rolling forecast\nProjection for the current quarter\nDetailed variance details that helps the EVP understand the financial picture of their expenses\nDiscuss upcoming changes to financial processes that EVPs need to be aware of\nDiscuss upcoming changes to help Finance Business Partner update the rolling forecast\nDiscuss any budget lines that underspent and if money can be reallocated before quarter-end. Noting that converting program dollars to headcount is usually difficult as it impacts future periods.\nAt quarter end, review the upcoming  quarter vs Plan for the Division and for each department on the quarter\nFollowing the month-end close, the Finance Business Partners will create a variance deck and distribute department income statements to the related budget owners and the e-group members. Each department is then responsible for comparing these reports, which contain actual costs, to the budget. Departments, with guidance from the Finance Business Partners, should analyze their data and if necessary, discuss items of interest and take appropriate action. Any questions regarding the cost data should be discussed with the Finance Business Partner.\nQuarterly FP&A Close Timeline\nThe close timeline for each quarter follows the timeline above for monthly close and includes additional key dates and processes:\nGuidance\nOverview\n: We provide quarterly guidance on key metrics of the business. At the earnings call for the previously concluded quarter, we provide guidance for the following quarter and the full fiscal year. For example, at the Q1-FY23 earnings, we will provide guidance for Q2-FY23 and updated FY23 guidance. We report guidance based on dollar ranges (except for weighted average shares outstanding which is given as a share estimate).\nWe provide quarterly guidance on the following metrics:\nRevenue\nNon-GAAP Operating Income (NGOI)\nNon-GAAP Earnings Per Share (Non-GAAP EPS, or NGEPS)\nWeighted Average Shares Outstanding (WASO)\nCadence\n: Following accounting close, the Corp team provides guidance proposals to the Head of FP&A for review. Following that review and any necessary iteration, the Corp team meets with the CFO and the Head of Investor Relations to review the guidance proposal, iterate, and finalize guidance figures.\nDeliverable\n: The deliverable to the CFO and the Head of Investor Relations is a slide deck with the proposed guidance range, implied guidance for the following quarters, comparable company benchmarking, and sensitivity analyses. The guidance proposed is also included in the Audit Committee and Board of Director deck materials.\nQuarterly Earnings Process\nAs a public company we share financial results publicly after the close of each fiscal quarter or fiscal year. The purpose, timeline, and deliverables can be found on our Investor Relations page\nhere\n.\nHeadcount Forecast and Hiring Plan\nDefinitions\nSingle Source of Truth (SSOT) Headcount Forecast and Hiring Plan\nFinancial Planning & Analysis (FP&A) team is the owner of SSOT for GitLab‚Äôs\nHiring Plan\nwhich contributes to our Headcount Forecast.\nHeadcount Forecast is a live forecast in Workday Adaptive (a financial planning software)\nHeadcount Forecast includes all approved positions in AOP (i.e. Active, Planned and Backfill positions)\nHiring Plan is subset of Headcount Forecast (i.e.Planned and Backfill positions only)\nHiring Plan is maintained by the Finance Business Partners (FBPs) and shared with Talent Acquisition (TA) team and Business Partners (BPs)\nFinance owns the Hiring Plan to ensure there is only one Headcount Forecast and Hiring Plan for the business\nHiring Plan increases our predictability as a company and streamlines the hiring process\nBased on historical time to start data, new requisitions released via RLOA in a quarter can be expected to start in the following quarter at the earliest\nFor questions specific to TA‚Äôs process and REQ creation, please refer to\nTA‚Äôs section of the handbook\nPosition ID (PID)\nPosition ID is a unique identifier and is the link between approved headcount and the Hiring Plan\nEach position is approved and allows TA to open a role for the business\nPositions are all approved headcount in the Hiring Plan.\nAll approved headcount includes Active, Planned and Backfill positions\nOnly Planned and Backfill positions are included in the Hiring Plan\nAll positions in the Hiring Plan are approved through:\nAnnual Operating Plan (AOP) cycle (beginning of each fiscal year)\nRLoA\ncycle for any incremental roles through the year\nBackfill due to attrition in the business\nPositions may be updated/changed during weekly interlock process (e.g. reallocated to different team, changed for different Role level)\nEach position is assigned with an unique identifier called Position ID (PID)\nPID increases visibility and accuracy for headcount forecasting (count and dollars)\nPID simplifies and provides transparency on modeled headcount (attrition and backfill)\nPID is an unique identifier for positions assigned to all current and future approved headcount\nPIDs are created and assigned by Corporate FP&A (Corporate) when Hiring Plan is finalized or upon change request of existing position(s)\nAll approved Planned and Backfill positions are assigned with an GHPID (please refer to\nTA‚Äôs section on GHPID\n)\nNot all positions are assigned with GHPIDs\nKey difference between GHPID and PID\nGHPID has 1-to-1 relationship with an Opening ID in Greenhouse (please refer to\nTA section on Opening\n)\nPID has 1-to-1 relationship with an approval headcount\nEach PID has 1-to-1 relationship with a GHPID at any given time\nIllustrative example:\nEmployee\ndeparts and business decides to backfill the same role\nDeparting employee A will have\nPID: FIN-FY24-9999 (tied to Headcount Forecast)\nGHPID: GH-FY23-999-0001 (issued to hire Employee A\nin the past\n)\nTo open the new requisition, we will need\nStarting from FY25 AOP cycle, GHPIDs will be generated through a consolidated process\nAll GHPIDs are system-generated by a FP&A internal Google Sheet, maintained and audited by Corporate\nEach Planned and Backfill position will have a unique GHPID assigned by FBP(s)\nGHPID will allow TA to open a requisition in Greenhouse.\nIf an approved role is not assigned with a GHPID, the job will not be opened in Greenhouse\nFinance Business Partners (FBPs) work with Business Partners (BPs) to discuss details of each approved headcount and enter final decisions of each position to Adaptive as SSOT Hiring Plan\nDetails of the position include, but are not limited to, Department, Job Title, Job Grade, Salary, Location\nFBP include all PIDs (assigned by Corporate) for approved Planned and Backfill positions in Hiring Plan\nFBP include all GHPIDs for roles eligible to be opened in Greenhouse\nAdding/removing/exchanging position(s) requires FP&A‚Äôs approval through existing RLOA or rolling forecast. FBP will submit change request Google Form\nPIDs and GHPIDs are audited and reconciled by Corporate regularly\nPIDs are reconciled\nmonthly\nbefore each rolling forecast lock\nGHPIDs are reconciled\nweekly\nbefore each weekly interlock\nUpon approval of the Hiring Forecast, FBPs share:\nHeadcount Forecast with Business Partners (BPs) through monthly review\nHiring Plan with both BPs and TA through live interlock sheets and release GHPIDs\nTA partners will contact HMs and open a requisition in Greenhouse after GHPIDs are released\nRole Approval and Release Process\nProcess Overview\nHiring Plan\nFinance Business Partners (FBPs) work with Business Partners (BPs) to discuss role details and enter final decisions to Adaptive as Hiring Plan\nHiring Plans are approved by Board of Directors (during AOP) or CFO & e-group (during RLOA).\nAll approved positions will be communicated by FBPs to TA partners, PBPs, and BPs\nRequisition Release\nRole details are added to Live Interlock sheets. Details allow TA to open a requisition in Greenhouse\nBackfill requisition requires separate approval (below)\nHiring Manager create/review Job Family\nTalent Acquisition partner opens requisition in Greenhouse\nFormal approval to open role\nWhen a requisition is opened in Greenhouse it is routed for approvals. The job approval requires approvals from Total Rewards, FP&A and Department Lead (VP+)\nThis allows the FBPs to check all details of the role and ensure consistency to SSOT Hiring Plan\nIf role details in Greenhouse do not reconcile to Hiring Plan in Adaptive, FBP will reach out to both TA and HM to resolve discrepancies\nFP&A is also a required approval on all job offers (before the role is officially filled). This approval allows FP&A to confirm details of the job offer and ensure reconciliation to Hiring Plan\nRun kick-off (aka Intake) with Hiring Manager\nFP&A and TA discussed and agreed upon the above process. This SSOT process ensures consistency in Hiring Plan execution\nPlanned Positions\nPlanned Positions include all Net New positions to existing GitLab active employees.\nHiring Plan Approval of any Planned Positions are from:\nAnnual Operating Plan (AOP) cycle\nRLoA cycle for any incremental roles through the year\nRequisition Release\nHiring Manager create/review Job Family\nOpen requisition in Greenhouse\nFormal approval to open role\nRun kick-off (aka Intake) with Hiring Manager\nBackfill Positions\nBackfill Positions include all positions created due to departure or termination of an existing employee.\nHiring Plan Approval of any Backfill Positions\nWhile GitLab strongly believes that a HM should be able to backfill each role upon termination and/or departure, HM should check with his/her leadership to discuss and decide whether there are changes to the backfill role\nIf changes are approved by leadership, please work with your FBPs to update details of the backfill positions.\nFBPs evaluate change and ensure neutral dollar impact from role change/update\nFBPs brief Corporate and request new/remove PID if applicable\nUpon final decision, FBPs enter details into Adaptive and update Hiring Plan\nRequisition Release\nUpon a resignation, Hiring Managers (HMs) submit official notice to Workday (WD)\nWD backfill notification will send to both TA and FBPs\nWD backfill notification will allow Recruiter to create a backfill issue\nAll final decisions and details of the role(s) will be documented in the backfill issue\nRecruiter can create a requisition in Greenhouse and move to the next step of the process\nHiring Manager create/review Job Family\nOpen requisition in Greenhouse\nFormal approval to open role\nRun kick-off (aka Intake) with Hiring Manager\nHiring Plan Process\nBoth PID and GHPID are created and maintained by FP&A team as unique identifiers in Hiring Plan\nCreating a Position ID (PID)\nAll PIDs are created by the Corporate FP&A team and are tied to Headcount Forecast (including Hiring Plan)\nFP&A Position IDs increase visibility and accuracy for headcount forecasting (count and dollars) and simplify & provide transparency on modeled headcount (attrition and backfill).\nPID is an unique identifier for positions assigned by Corporate to\nall\npositions in Hiring Plan\nAdd/remove/exchange positions requires FBP approval via existing process, e.g. RLOA or rolling forecast and submit change request Google Form\nhere\nPositions reconciled regularly, e.g. monthly before each rolling forecast lock\nPosition ID follows ‚Äú\nFIN-Fiscal Year-0000 (4-digit PID code)\n‚Äù as naming convention\nFor example, if a role is opened in FY24, the PID is ‚ÄúFIN-FY24-0000‚Äù\nCreating GHPID\nAll GHPIDs are system-generated by a FP&A internal Google Sheet\nGoogle Sheet GHPID generator is maintained and audited by Corporate FP&A weekly\nFBPs will refer to GHPID generator and assign GHPIDs to all approved positions\nFuture State:\nCorporate will migrate GHPID generator to Workday (pending on Workday/Adaptive integration and Workday Position Management)\nGHPID is updated during weekly forecast interlock and regular forecast cycles.\nStarting FY25 Annual Operating Planning, GHPID will follow ‚ÄúGH-Fiscal Year-Department Internal ID-0000 (4-digit GHPID code)‚Äù\nas naming convention.\nFor example, if sales and/or marketing is hiring a role, the GHPID will be\"GH-FY25-100-0001\".\nWhen a role is pushed into next fiscal year, the GHPID won‚Äôt change\nWhen a role is re-allocated into a different department, the GHPID won‚Äôt change\nEach GHPID is unique to each opening of a requisition\nDepartment internal ID\nis from Netsuite as SSOT and consistent to Adaptive department code\nOnce a number has been used in Greenhouse for a job, it can not be reused. If the role is a future role and has been deleted, but was never input into Greenhouse, the FBP can use that number for its replacement or a different role since it was not used yet.\nMaintaining Hiring Plan\nFP&A team is the owner and maintainer of SSOT for GitLab‚Äôs Hiring Plan\nObjective of this control is to ensure completeness, accuracy, and consistency of Hiring Plan\nCompleteness\n: all approved positions are assigned with PIDs and GHPIDs\nAccuracy\n: no PID and GHPID is assigned to duplicated or deprecated positions\nConsistency\n: ensure Hiring Plan in Adaptive is fully reconciled to details in Live Interlock Google Sheet and details in Greenhouse requisition\nPIDs and GHPIDs are stored in Workday Adaptive (Adaptive) and are required fields in Hiring Plan\nFBPs will update Hiring Plan weekly in Adaptive & update TA through weekly Interlock.\nFBPs may update their Headcount Forecast on a more frequent basis (more than weekly) depending on their individual department‚Äôs business needs\nUpdating Hiring Plan could require adding new roles, deleting roles, trading off roles, or adding backfills\nHiring Plan audit and reconciliation is performed by Corporate, including\nWeekly GHPID audit and reconciliation through TA and FP&A Interlock\nMonthly PID audit and reconciliation through monthly forecast lock\nCorporate will reach out to FBPs if noticing any discrepancies and resolve them before monthly forecast lock\nFinance Business Partners / Talent Acquisition Managers Forecast Interlock\nPurpose\nThe FP&A team and Talent Acquisition Managers collaborate to ensure understanding and implementation of the most up-to-date view of forecasted headcount-related expenses. This interlock enables GitLab to respond quickly and make live decisions through a weekly P&L forecast and the\nrolling list of asks (RLOA) process\n. This process also ensures alignment and accuracy of headcount forecasts when FP&A locks its annual plan and monthly rolling forecasts. This process also tracks company metrics against Wall Street expectations related to non-GAAP operating income and non-GAAP earnings per share. Please see the\nHeadcount Metrics and Processes page\nfor definitions and key metrics.\nHeadcount Live Dashboards\nThe Hiring Plan data is divided into four headcount forecast templates, one for each cost center with Cost of Goods Sold allocated among Sales and R&D. The data and analysis from the four templates roll into the Summary file. The four templates can be found in the\nHeadcount Live Summary Dashboard\n.\nCadence / Process\nUnless otherwise noted in the HC Forecast calendar or communicated via Slack, the interlock process occurs weekly as follows:\nBy noon (PST) Monday\n, the Corp FP&A team downloads the data from Adaptive and refreshes the headcount forecast templates. Talent Acquisition also refreshes the headcount forecast templates with the latest data from Greenhouse.\nBy end of day (PST) Wednesday\n, the Talent Acquisition Managers and Recruiters review their respective roles line by line and make adjustments and comments related to expected start dates and other role details provided by the Finance Business Partners. If no indication is made for a specific role in the headcount forecast template, Talent Acquisition signals that the current indication is reasonable and indicative of a 50/50 ‚Äúmost-realistic‚Äù forecast. The Talent Acquisition Managers also pay close attention to any recruiting capacity restraints within any given quarter. In order to maximize transparency and understanding of any changes, the Talent Acquisition Managers and Recruiters provide comments (e.g., wrong GHP ID, rejection of an offer, delay due to business decision, etc.) for specific roles.\nBy end of day (PST) Thursday\n, the Finance Business Partners update Adaptive with their best estimates of the start dates of all planned personnel for the forecast period based on the input from Talent Acquisition in the headcount forecast templates. This reflects a 50/50 ‚Äúmost realistic‚Äù view of headcount expenses/timing.\nBy end of day (PST) Friday\n, the Corp FP&A team sends a P&L snapshot to the CFO incorporating any headcount forecast adjustments. Note: P&L snapshots are not provided during accounting close.\nCommunication\nCommunication related to the interlock takes place in the #fpa-ta_headcount_forecast Slack channel. All parties involved in the interlock are also granted access to the ‚ÄúHC Forecast‚Äù Google Calendar.\nDeliverables\nThe Finance Business Partners and Talent Acquisition Managers collaborate to provide the most current and 50/50 ‚Äúmost-realistic‚Äù view of headcount-related expenses. This is done through the interlock process in the headcount forecast template and is ultimately uploaded into the Planned Personnel sheet in Adaptive.\nThe inputs loaded into Adaptive are then used to provide the CFO a weekly P&L snapshot in order to facilitate in-quarter spending decisions and ensure the company tracks vs.  guidance and consensus expectations.\nExpense Controls\nThe primary mechanism to ensure efficient spend of company assets is the\nProcure to Pay\nprocess, and specifically completion of the\nvendor and contract approval workflow\nprior to authorization. The procurement team or your finance business partner can assist with questions related to this process.\nThe second mechanism is the budget vs actual review to determine reasons for variances vs plan. See the section on\nVariance Meeting with CFO\nand\nVariance Analysis\n.\nAdaptive Planning\nA manual on how to update and maintain Adaptive integration can be found\nhere\n. This document is maintained by the Corporate FP&A team.\nAdaptive Quarterly Roadmap\nThe current Adaptive roadmap can be found\nhere\nWe expect to transition roadmap and requests into GitLab issues by Q2-FY23.\nCorporate FP&A will host Adaptive intake sessions with the larger FP&A team to intake, align and prioritize current and future projects.\nRolling List of Asks (RLOA)\nIntent of RLOA Process\nReinvest back into the business when company expects to beat expectations\nEnable e-group and leaders to make informed and fast business decisions\nCreate a repeatable and transparent quarterly process into incremental investments\nExpectations for Business Partners\nYour FP&A partner will assist in maintaining a rolling list of asks (RLOA). This list includes prioritization/sequencing, rationale/ROI, and considerations against current FvP\nIn weeks 0-2 of each qtr (quarterly fcst), work with FP&A to make a final proposal, if needed, for additional investment over the rest of the fiscal year\nBy week 4 of each qtr (earnings guidance), funding decisions reviewed, prioritized, and decided by CFO and e-group\nDetailed Expectations for FP&A\nThroughout quarter,\nFP&A maintains alignment with business needs.\nFBPs, with the functional leader(s), maintain a RLOA file of key incremental investments from the business\nFBPs, with the functional leader(s), prioritize the RLOA and develop a recommendation following the below timeline\nDuring quarterly RLOA process,\nFP&A team finalizes RLOA proposal to share with e-group, and communicates decisions to functional leaders to enable business execution. Below is the timeline\nCorporate FP&A locks Prelim Forecast version and shares detailed daily calendar with FBPs\nFBPs prepare prelim variance package and review with BPs (Async) to help the business prioritize the asks\nAcct Close +2:\nForecast pencils down\nCorporate FP&A and VP of Finance review Forecast prior to Final Forecast Lock\nCorporate FP&A provide Prelim Forecast vs. Final Forecast view to FBPs\nAcct Close +3:\nFinal Forecast Lock, used for guidance, tax, etc.\n3 days prior to CFO Variance Review:\nFBPs finalize prioritized RLOA list and submit to Corporate FP&A\n2 days prior to CFO Variance Review:\nCorporate FPA creates a brief RLOA section (~2-3 slides) to include in CFO Variance Review package. RLOA section should include:\nP&L from Final Forecast Lock and RLOA summary\nComparison of the functional expenses as a % of revenue after RLOA vs plan, guidance, and consensus\nComparison of headcount requests against recruiting capacity\nRationale for each request and Finance POV\nAt CFO Variance Meeting (typically third Thu):\nFP&A team reviews RLOA proposal with CFO & VP of Finance. Discussion around:\nIncremental investments required from RLOA proposal\nMake recommendation to e-group thereafter\nAt e-group Review Meeting (typically Mon after CFO Variance Meeting),\nCFO shares proposal for formal approval and inclusion into investor guidance\nAfter e-group Review Meeting,\nFP&A team communicates approved incremental investments to functional leaders to begin execution\nNote: WD is defined as Working Days, which are Mondays through Fridays, excluding Federal holidays.\nRLOA Timeline\nThroughout the quarter,\nFP&A drives alignment with business needs through RLOA:\nFBPs,\nwith the functional leader(s),\nmaintain a RLOA file of key incremental investments from the business\nFBPs,\nwith the functional leader(s),\nprioritize the RLOA and develop a recommendation following the below high-level timeline\nWeek 1:\nCorporate FP&A kicks off RLOA and shares calendar with FBPs\nWeek 2:\nForecast pencils down\nFBPs submit prioritized RLOA asks\nCorporate FP&A provide forecast preview to FBPs\nCorporate FP&A and VP of Finance review forecast and RLOA submissions to determine funding\nWeek 3:\nCFO review RLOA proposal based on forecast vs. street consensus performance\nFP&A reviews RLOA asks with TA to determine recruiting feasibility\nPre-tax forecast lock used for earnings call preparation (pending on RLOA changes in Week 4)\nCFO reviews RLOA proposal based on forecast vs. street consensus performance\nWeek 4:\nAt e-group meeting, CFO shares proposal for formal approval and inclusion into final forecast lock and investor guidance\nAfter formal approvals, business, FP&A, and TA collaborate to execute on RLOA approved asks\nAdaptive Insights\nDiscover how GitLab uses Adaptive Insights to plan, budget, and forecast GitLab's planning cycles\nCorporate FP&A\nGitLab's Corporate Financial Planning and Analysis\nFP&A Definitions\nGitLab Financial Planning and Analysis Definitions\nFP&A Metrics\nGitLab's Financial Planning and Analysis Metrics\nFP&A Processes\nGitLab's Financial Planning and Analysis Processes\nFP&A Team Structure\nGitLab Financial Planning and Analysis Team Structure\nG&A Finance\nGitLab General & Admininstrative Finance\nGTM Analytics Hub\nHeadcount Metrics and Processes\nPublic Company Headcount Metrics and Processes\nR&D Finance\nWelcome to the R&D Finance Handbook!\nFinance Business Partner Alignment Ellen Boyd, Director, ‚Ä¶\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6670}
{"doc_id": "39798a2924214e43", "url": "https://handbook.gitlab.com/handbook/support/workflows/how-to-wir-podcast", "title": "How to do a WIR Podcast | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Workflows\nHow to do a WIR Podcast\nGeneral guide for creating a Support Week-in-Review Podcast\nOverview\nUse this workflow as a general guide when you want to record and publish a Support Week-in-Review Podcast.\nMuch of this is done in the\nSupport Week in Review Project\n.  For more information about the CI/CD jobs used in this guide and what they do, refer to the project\nreadme\n.\nWorkflow\nCheck the Support Team Google calendar for the recording session (near the end of the week).\nDetermine who will be responsible for each of the following roles. One person can be responsible for them all.\nEditor:\nBefore the Recording:\nPrepare the SSAT input\nSSAT is gathered into the SSAT issue in the\nSWIR project\n.\nSome SSAT input will have been provided by managers during the week, but most will need to be ingested using the\npopulate_ssat\njob from the pipeline.\nRun\npopulate_ssat\njob - this will gather any open positive SSAT into the SSAT issue\nReview the content (automated or other) and make corrections and remove anything that is not actually positive. If there is a lot of content, consider reducing the number down by removing some that are short and not personalised - use your judgement here.  Remove the line about ‚Äúautomated content‚Äù.\nPrepare the digest issue\nrun the\ncreate_digest_issue\njob.\nEdit the digest issue and add a phrase of the week\nWork with the Metrics Analyst (below) to ensure the metrics section is populated\nAfter the recording\nPublish\nthe podcast\nPrepare SWIR for the next week\nMetrics analyst:\ntake screenshots of the key metrics from the\nMM: Support KPIs\nZendesk dashboard and insert them into the SWIR digest issue. The following 4 items need to be included:\nFrom the SWIR tab: the top row of 4 graphs, from SSAT through to volume\nFrom the SWIR tab: scroll to the bottom of\nTotal FRT SLA achievement - Last 4 Weeks\nand capture the current week\nFrom the SWIR L&R tab: the top row of 4 graphs, from SSAT through to volume\nFrom the SWIR L&R tab: scroll to the bottom of\nL&R FRT SLA achievement - Last 4 Weeks\nand capture the current week\nin text, enter key metrics into the appropriate sections of the SWIR digest issue\nyou can use the following for formatting\n*\n**High**:\n*\n**Normal**:\n*\n**Low**:\n*\nCopy US Gov stats from this\ndoc\nfrom earlier in the week\ngather pairing data by observing the number of issues against the current\npairing milestone\nand compare to the previous week‚Äôs digest issue data for the week on week (WoW) metric.\nread and record this section during the recording call.\nNarrator(s):\nanalyze the content of the section you‚Äôll be narrating: click on each link and understand what is being expressed by the point\nread and record the content of the point\nby convention, we verbalize issue and MR links by reading out their project name and number, such as ‚ÄúSupport Team Meta 1234‚Äù, or ‚ÄúHandbook MR 4321‚Äù. You can see these while narrating by hovering over the link. This is particularly important when the item has a ‚Äúhere-link‚Äù such as ‚Äúsee\nthis issue\n‚Äù.\nJoin the Zoom room\nDetermine speaking order for Narrators. A useful set of conventions is:\nRead in alphabetical order by your first initials.\nIf you have an item and it comes up, you will read it which will reset the order.\nWhen everyone is ready, begin recording. It‚Äôs easiest for the Editor to ‚ÄúRecord locally‚Äù, as they‚Äôll have the audio on their computer for upload.\nWhen finished recording, the Editor will\npublish\nand prepare the project for the next week.\nPublishing the Podcast\nOnce you have the compiled audio:\nOptional: add the theme music to the recording if you have it\nUpload it to the\nSupport Week in Review - Audio Edition\nfolder\nChange the Sharing Settings to ‚ÄúAnyone within GitLab can View‚Äù\nCopy/paste the URL into the Digest Issue below the TOC (use the format:\n:speaker: [Audio edition](url)\n)\nShare the final mix into Slack (there is a slackbot reminder in #support_team-chat at 23:00 UTC on a Thursday - you can share the audio link as a threaded reply to that conversation)\nPrepare SWIR for the next week\nRun the\nclose_week_and_create_new_milestone\njob\nYou‚Äôre done!\nNotes on SSAT content\nThe purpose of including SSAT content in the Support Week in Review is two-fold:\nTo highlight behaviors and ways of interaction that customers value in their own voices.\nTo highlight the excellent work on the part of individuals and groups of individuals that take place in ticket interactions.\nWe do not include every SSAT review every week, both for brevity and because not every SSAT review fulfills the purposes above.\nWith the above purposes in mind, SSAT comments in the Support Week in Review should:\nbe truly positive! Avoid SSAT ratings that disparage other engineers, GitLab teams or are back-handed compliments that include a mix of praise and negative feedback.\nhave significant, thoughtful or interesting comments.\nbe from a mix of Engineers. Sometimes a particular engineer may have multiple positive reviews in a week: try to get a cross-section of the team included.\nhighlight the accomplishments of new team members when possible: a first positive SSAT in the SWIR should be called out and celebrated!\nLast modified April 30, 2025:\nAdd folder and file name linting (\n8a6b33a1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 909}
{"doc_id": "1d1ce677c5337d45", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/tenant-scale/cells_and_organizations", "title": "Cells and Organizations | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nTenant Scale Group\nCells and Organizations\nThis is the handbook page for the Cells project. Cells is one of the top priorities for FY2025, with the goal of providing additional scalability for GitLab.com. This handbook page contains the project information such as the project plan, roadmap, workstreams, DRIs, stakeholders, and communication channels. It also has links to important documentation such as the Cells design blueprints.\nIntro\nCells is a new architecture for our software as a service platform. This architecture is horizontally scalable, resilient, and provides a more consistent user experience. It may also provide additional features in the future, such as data residency control (regions) and federated features.\nFor more information about the goals of Cells, see\ngoals\n.\nRequirements and Architecture\nCells overall architecture\ndesign document\n.\nA key component of Cells is\nisolated Organizations\n.\nRoadmap, and DRIs\nRoadmap\nCells 1.0\nCells 1.5\nCells 2.0\nFor internal customers only\nOrganizations are private\nUsers cannot interact with other Organizations (including GitLab Org)\nGroups and projects are private in the Organization\nFor existing/new customers of GitLab.com\nOrganizations are private\nExisting users can interact with private Organizations on Secondary Cells\nGroups and projects are private in the Organization\nOrganizations are public or private\nUsers can interact with other Organizations\nGroups and projects are private or public in the Organization\nDRIs and Stakeholders\nStakeholder\nRole\nResponsibility\nSabrina Farmer\nExecutive Sponsor\nGerardo Lopez-Fernandez\nEngineering Fellow\nTenant Scale Engineering DRI\nMark Wood\nActing Group Product Manager\nTenant Scale Product DRI\nDarby Frey\nStaff Fullstack Engineer, Expansion\nSec and Monetization DRI\nKerri Miller\nStaff Backend Engineer, Create\nCore Development DRI\nCommunication\nSlack Channels\n#f_cells_and_organizations (internal only)\n: Regular communication\nMeetings\nGroup Tenant Scale weekly standup (internal only)\nStatus updates\nStatus updates are automatically rolled up in the relevant epics\nCells 1.0\nepic\nOrganizations buildout\nepic.\nOrg Mover\nepic.\nAdditional Information\nCells Fast Boot 2024\nWe held a Cells Fast Boot in Dublin, Ireland, between 2024-04-23 and 2024-04-24. Below are the artifacts from the event.\nAgenda, Slides, and Videos\nPlease use the\nUnfiltered\nGoogle account to watch video recordings.\nMain agenda (internal only)\nIntroductions, overview, and logistics:\nAgenda (internal only)\nCells Services - Global Service:\nAgenda (internal only)\n,\nSlides (internal only)\n,\nVideo (internal only)\nCells Services - Routing:\nAgenda (internal only)\n,\nSlides (internal only)\n,\nVideo (internal only)\nApplication Readiness - Organizations and Users:\nAgenda (internal only)\nApplication Readiness - Dependencies and OKR alignments:\nAgenda (internal only)\nDeployment:\nAgenda (internal only)\n,\nSlides (internal only)\n,\nVideo (internal only)\nProvisioning:\nAgenda (internal only)\nObservability and Runners:\nAgenda (internal only)\nSecurity:\nAgenda (internal only)\n,\nSlides (internal only)\n,\nVideo (internal only)\nDisaster Recovery:\nAgenda (internal only)\n,\nSlides (internal only)\n,\nVideo (internal only)\nCells Mover and Isolation:\nAgenda (internal only)\nScalability Headroom and Timeline:\nAgenda (internal only)\nDecisions\nNo external customers on Cells 1.0, internal dogfooding only. Cells 1.x is the target to onboard new or existing external customers.\nArtifacts\nDay 1 recording:\nPart 1 (internal only)\n,\nPart 2 (internal only)\nDay 2 recording (internal only)\nDatabase breakout recording (internal only)\nOrganizations breakout recording (internal only)\nTest Platform in Cells\nCells is a project that spans the entirety of GitLab. More information on what Cells is and how it ‚Ä¶\nLast modified May 23, 2025:\nMove the Cells project page to Tenant Scale (\n970b0def\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 568}
{"doc_id": "6d779986c7305b9b", "url": "https://handbook.gitlab.com/handbook/engineering/ai/custom-models", "title": "Custom Models Group | The GitLab Handbook", "text": "The Handbook\nEngineering\nAI Engineering\nCustom Models Group\nThe Custom Models group focuses on additional, custom models that power GitLab Duo functionality in support of our customers unique data and use-cases.\nVision\nThe Custom Models group focuses on additional, custom models that power GitLab Duo functionality in support of our customers unique data and use-cases.\nOrganisation\nThe AI-powered:Custom Models team focuses on GitLab‚Äôs suite of Custom Model features and is responsible for all backend aspects of the product categories that fall under the\nCustom Models group\nof the\nAI Powered stage\nof the\nDevOps lifecycle\n. Our Product direction is found on the\nCategory Direction - Custom Models Management\npage.\nThe features we work with are listed on the\nFeatures by Group Page\n.\nTeam Members\nEngineering Manager & Engineers\nEngineering Manager:\n@timzallmann\nActing Manager:\n@eduardobonet\nName\nHandle\nteam.yml\nEmail prefix\nIgor Drozdov\n@igor.drozdov\nigor.drozdov\nidrozdov\nPatrick Cyiza\n@jpcyiza\njpcyiza.yml\njpcyiza\nMohamed Hamda\n@mhamda\nmhamda.yml\nmhamda\nJulie Huang\n@julie_huang\njulie_huang.yml\njulhuang\nBruno Cardoso\n@bcardoso-\nbcardoso-.yml\nbcardoso\nEduardo Bonet\n@eduardobonet\neduardobonet.yml\nebonet\nManoj M J\n@manojmj\nmanojmj.yml\nmmj\nCindy Halim\n@cindy-halim\ncindy-halim.yml\nchalim\nName\nRole\nTim Zallmann\nVP of Engineering, Core Development\nBruno Cardoso\nSenior ML Engineer\n, AI-powered:Custom Models\nProduct, Design & Quality\nProduct Manager:\n@susie.bee\nName\nRole\nBruno Cardoso\nSenior ML Engineer\n, AI-powered:Custom Models\nEduardo Bonet\nStaff Fullstack Engineer, AI-Powered:Custom Models\nIgor Drozdov\nStaff Backend Engineer\n, AI-Powered:Custom Models\nManoj Memana Jayakumar\nStaff Backend Engineer\n, AI-Powered:Custom Models\nMohamed Hamda\nBackend Engineer, AI-Powered:Custom Models\nHow to reach us\nIssue Tracker:\n~group::custom models\nSlack Channel:\n#g_custom_models\nLabel Subscription:\n~group::custom models\nOrganisational Labels\nIssues owned by the Custom Models group should have these labels, as appropriate:\n~\"group::custom models\"\n~\"devops::ai-powered\"\n~\"section::data science\"\n~\"Category:Model personalization\"\n~\"Category:Self-Hosted models\"\nIn addition, issues should contain the relevant\n~type:\nand subtype labels.\nScoping Work using Epics and Tech Leads\nEpics should be used as the primary definition of scope for any work item larger a single issue in size. This could be a new feature, a complex refactoring or bug. The issues in the epic constitute the entire scope of the work item, and when they are all closed the work is completed and the epic is closed. An Epic should enclose an iteration with that adds a clear improvement, but an Epic does not necessarily represent the whole feature, wich might require multiple Epics.\nThe technical ownership of individual work items as defined by an Epic, is delegated to a ‚ÄúTech Lead‚Äù, an engineer. The engineer is assigned to the Epic and ensures the scope is correct. The Tech Lead works with the EM, the PM and other engineers.\nAny engineer on the team can work on the issues contained in the Epic, as self-assigned using the Kanban process, including the Tech Lead themselves.\nTeam Milestone Planning Process\nCustom Models follows the\nProduct Development Flow\nand\nCross Functional Prioritization\n. The team uses a planning issue and boards to manage the planning process.\nPlanning automation\nscripts are available to make this process easier.\nPlanning issues\nfor each milestone are created by the PM and are used to coordinate upcoming work between the PM, EM and stable counterparts.\nDuring each milestone, planning is completed for the next milestone. The following activities are undertaken:\nCreation of planning issues and boards (EM or PM)\nRefinement issues are created every week via\nautomation\nIdentification of candidate issues for the milestone and addition to Planning Board (PM, EM, SET)\nTeam member capacity planning (EM)\nEstimation of effort using weights (Engineers and EM)\nJoint planning session to finialise the planning board (PM, EM, SET)\nAssignment of work to engineers, addition of the\n~Deliverable\nlabel, update to the planning issue (EM)\nPlanning Issue\nEach month a planning issue is created by the PM, using automation and the\nCustom Models Planning template\n. This is the discussion area for the planning team members (PM, EM, and Software Engineer in Test (SET)) for a specific milestone and links to the Planning and Build Boards.\nPlanning Board\nThe\nPlanning Board\nis created for each milestone by the PM, and is a curated list of issues by category. The planning board can be overloaded with issues; the excess will be moved to the next milestone or to the Next 1-3 Milestones board during the planning call.\nThe PM marks issues with\n~workflow::planning breakdown\n, this signals to the EM to request engineers to review the issue description to ensure it is clear and ready for development. The engineer then assigns a weight and applies the\n~workflow::ready for development\nlabel.\nAutomation for Issue Refinement\nEvery week, a new issue is created within\nCustom Models project\nto help with issue refinement.\nEngineers refine issues weekly by reviewing tasks, estimating their complexity, and preparing them for development. During the refinement process, they evaluate the work required, add implementation plans when needed, add a\nweight\n, and mark issues as\nready for development\n. This process ensures issues are well-defined before development begins.\nReady for Development Status\nIssues that are ready to be worked on by an engineer are labeled\nworkflow::ready for development\n. Only issues with this label should be assigned to an engineer as a Deliverable. If research is required, the\n~spike\nlabel is assigned, but the scope of the spike should be clearly stated in the issue and an outcome might be code written or a refined issue created.\nCapacity Planning Spreadsheet\nThe EM maintains a\nGoogle Sheet\nGitLab internal only\nfor calculating team capacity, and the same Spreadsheet is also used to perform the process of assigning issues to the release based on weight and priority. The EM posts the team capacity on the Planning Issue.\nBuild Board\nThe EM selects issues from the\nPlanning Board\nbased on:\nprevious milestone slippage\nPM preference\nweight\npriority\nThe EM then applies the\n~Deliverable\nlabel to each issue in the Release and assigns then to an engineer. The issues are tracked throughout the release with the Build Board.\nSay / Do Ratio\nThe Say / Do ratio is calculated by the using formula\nCompleted Issues / Assigned Issues\n.\nIssues added to the Build Board with the\n~Deliverable\nlabel are the Assigned Issues\nIssues closed by the end of the milestone are the Completed Issues\nIssue Weights\nA weight is assigned to each issue as an estimation of work to close the issue. A weight of 1 is approximately 2 working days of effort. Generally issues are not weighted above a weight of 3: larger weights indicate the issue should be broken down further.\nPlanning and Delivery Boards\nAll workflow statuses in the\nProduct Development Flow\nare valid, and the statuses and milestones tied to boards are below.\nThe\nNext 1-3\nand\nNext 4-6 milestones\nboards are used to house issues which need refinement or are ready to be worked on.\nBoard\nFilters\nColumns\nPlanning Board\nMilestone,\n~group::custom models\n~type::bug\n,\n~type::maintenance\n,\n~type::feature\nBuild Board\nMilestone,\n~group::custom models\n,\n~Deliverable\n~workflow::ready for development\n,\n~workflow::in dev\n,\n~workflow::in review\n,\n~workflow::awaiting security release\n,\n~workflow::blocked\nNext 1-3 Milestones\n%Next 1-3 Milestones\n~workflow::problem validation\n,\n~workflow::problem validation\n,\n~workflow::design\n,\n~workflow::solution validation\n,\n~workflow::planning breakdown\n,\n~workflow::ready for development\nNext 4-6 Milestones\n%Next 4-6 Milestones\nSame as\nNext 1-3 Milestones\nIssue Milestones\nIssues are assigned the current or next milestone if they are planned to be worked on or are currently being worked on.\nA milestone of\n%Backlog\nis assigned if issues are not intended to be worked on, although they may be addressed by a community contribution.\nIssues with a milestone of\n%Awaiting Customer Feedback\nmay be worked on, pending customer interest.\nThe\nissue triage report\nhighlights issues which need a milestone assignment.\nBlog Posts\nBlog posts written by Custom Model‚Äôs team members\nDeveloping GitLab Duo: How we validate and test AI models at scale\n@susie.bee\nGitLab Duo Self-Hosted: Enterprise AI built for data privacy\n@susie.bee\nSpeed meets governance: Model Selection comes to GitLab Duo\n@susie.bee\nCommunication\nThe Custom Models communicates based on the following guidelines:\nAlways prefer async communication over sync meetings.\nDon‚Äôt shy away from arranging a\nsync call\nwhen async is proving inefficient, however endevour record it to share with team members.\nTransparency by Default\nThe primary channel for work-related communication is the\n#g_custom_models\nSlack channel.\nInternal team issues and projects are namespaced under\ngitlab-org/ai-powered/custom-models\nLLM Judges\nIn developing LLM-backed applications, the Custom Models team can use different LLMs as judges\nfor model evaluation purposes. The Custom Models team has been granted permission to use OpenAI models as Judges, with these requirements:\nWith respect to inputs, be sure not to provide any proprietary, SAFE, or otherwise sensitive information as an input to OpenAI models, as OpenAI is permitted to use our inputs to improve their services.\nWith respect to outputs, as per our usual restriction, please ensure that no ChatGPT- or GPT-generated outputs are added to GitLab issues, MRs, marketing materials, or other content.\nWe can‚Äôt automatically or programmatically extract data or output from the models, i.e. likely no automated benchmarking. Similarly, we can‚Äôt interfere with or disrupt their services, including circumvent any rate limits or restrictions.\nWe can opt out of OpenAI using our inputs/outputs to train their models so please do so by following the instructions\nhere\n.\nSee\nthis internal note\nfor more context.\nAsking for help\nFor supporting customers, create a\nrequest for help issue\n, and share on with the\n#g_custom_models\nSlack channel.\nDon‚Äôt hesitate to ask for help from other team members with the\n#g_custom_models\nSlack channel.\nCustomer support\nTo better support calls with customers (existing and prospects), Custom Models provides engineers that will prioritize customer support requests. This ensures both\nload and knowledge are shared across team members.\nFirst Date\nLast Date\nLead engineer\nBackup engineer\nFeb 10\nFeb 16\n@eduardobonet\n@mhamda\nFeb 17\nFeb 23\n@mhamda\n@manojmj\nFeb 24\nMar 2\n@manojmj\n@jpcyiza\nMar 3\nMar 9\n@jpcyiza\n@bcardoso-\nMar 10\nMar 16\n@bcardoso-\n@eduardobonet\nMar 17\nMar 23\n@eduardobonet\n@mhamda\nMar 24\nMar 30\n@mhamda\n@manojmj\nMar 31\nApr 7\n@manojmj\n@jpcyiza\nApr 8\nApr 13\n@jpcyiza\n@bcardoso-\nApr 14\nApr 20\n@eduardobonet\n@mhamda\nApr 21\nApr 27\n@mhamda\n@manojmj\nApr 28\nMay 4\n@manojmj\n@jpcyiza\nMay 5\nMay 11\n@jpcyiza\n@eduardobonet\nMay 12\nMay 18\n@eduardobonet\n@mhamda\nMay 19\nMay 25\n@mhamda\n@manojmj\nMay 26\nJun 1\n@manojmj\n@jpcyiza\nDuring on call period, support requests should be acknowledge within 24h.\nResponsibilities of lead engineer in support\nTriage\nRequests for Help\n.\nMonitor income requests on\n#g_custom_models\nSlack channel.\nMake sure requests for help issues are created.\nAnswer support questions on slack, redirecting to our documentation whenever possible.\nJoin customer calls led by Solution Architects or Sales representatives when needed, and own the communication with the customer until it‚Äôs resolved or handed over to a support engineer.\nAct on outcomes of problems faced:\nCan we add documentation to help SA‚Äôs and customers be more self-sufficient?\nCould the issue be improved by better tooling? Create an issue with the changes needed.\nWas it a bug that we didn‚Äôt caught? How can we avoid this the next time?\nNotify the engineering manager and a backup engineer in advance if you won‚Äôt be available.\nHand over the necessary context to the next engineer in support.\nIt is NOT expected for engineers in support to:\nTo be available outside of their preferred working hours, but some requests might be urgent and should be tackled first thing on the next working day. Consult with the engineering manager and the product manager on those situations\nLead customer calls, unless discussed otherwise for a specific case\nPresent demos, unless discussed otherwise for a specific case\nResponsibilities of backup engineers\nJoin customer calls as a shadow. Your main role is to observe and listen closely to the interactions and issues discussed, but also be prepared to assist the lead engineer upon request.\nSupport the lead engineer in support in case they are not available due to unforseen circumstances.\nCarry over unfinished support tasks from previous week.\nAcknowledgement of Pings\nIf you are pinged by name in either Slack or GitLab, please acknowledge the ping by either:\nA threaded comment\nAn emoji\nTime Off\nTeam members should add any\nPaid Time Off\nin the ‚ÄúWorkday‚Äù slack app, so that the Engineering Manager can use the proper number of days off during capacity planning. Where possible, try to add time off a full milestone in advance.\nIt is recognised there can always be last-minute, unplanned PTO needs. Please take any time you need, but enter it into Workday and communicate with the EM as soon as you can.\nAd-hoc sync calls\nWe operate using async communication by default. There are times when a sync discussion can be beneficial and we encourage team members to schedule sync calls with the required team members as needed.\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2151}
{"doc_id": "5e9eda8d42e795ff", "url": "https://handbook.gitlab.com/handbook/people-group/givelab-volunteer-initiatives", "title": "GiveLab Volunteer Initiatives | The GitLab Handbook", "text": "The Handbook\nPeople Group\nGiveLab Volunteer Initiatives\nDiscover GitLab‚Äôs volunteering opportunities with GiveLab\nAbout GiveLab\nGiveLab is GitLab‚Äôs Team Member Volunteer Program. The GiveLab Program lives under the\nESG Team\nand is a part of GitLab‚Äôs overall\nESG strategy\nand program development. The term GiveLab encompasses all Team Member Volunteering initiatives at GitLab.\nGitLab encourages team members to take part in volunteer initiatives that support their local communities, participate in virtual volunteer activities, and organize volunteer activities as part of team events and get togethers.\nTo learn more about GiveLab, please visit the\nESG handbook page\n.\nHistorical GiveLab and Related Activities\nGitLab Donation Drives\nThe first\nGitLab Donation Drive\nin 2020 started as an internal challenge to GitLab team members to donate 5,000 meals to\nUS Food Banks\nover the course of a week. This initiative quickly gained traction and saw over 100,000 meals being donated across 19 countries. 2021‚Äôs campaign expanded to include any type of donation, including donations of time as part of Global Volunteer Month.\nUpstream Diversity Working Group\nHaving identified a talent gap in both the technology and the university system which speaks predominantly to Underrepresented Groups, the\nUpstream Diversity Working Group\nwas established.\nGeared toward knowledge sharing, the 2022 piloted program saw GitLab team members extending their technical skills and time to those in Underrepresented Groups (URGs) with a view to creating\nfuture career opportunities\nfor them within the technology sector.  The program mobilised GitLab team members to serve as\ncoaches\nin partnership with\nLatinitas\n;\nFreeCodeCamp\nand\nre:Learn\n.\nTrusted Interns\nAs a pioneer in the\nall-remote\nspace, GitLab is uniquely leveraged to prepare youth around the globe for the\nfuture of work\n. Recently, GitLab Alumni Jean du Plessis, in collaboration with Trusted Interns as part of\nThe Knowledge Trust\nwhich places a focus on making jobs more accessible to South African Youth, presented a webinar around\nPreparing for your First Remote Job\n.\nThis was a springboard for around 650 South African Youth from within the Trusted Interns program to complete the\nGitLab All-Remote Certification\n.\nRails Girls\nOn multiple occasions, GitLab has supported\nRails Girls\nan organisation geared toward providing tools and creating a sense of community for women in the technology space - enabling them to grow their knowledge base and build out their ideas.  The most recent event supported was the\nRails Girls Kumasi\nRuby on Rails Workshop\n- be sure to check out this\nGitLab Unfiltered\nvideo to see GitLab alumni Abubakar Siddiq Ango in action!\nRecent Team Member Participation\nGitLab encourages team members to set time aside to take part in local volunteer initiatives within their respective communities.  Here are a few of the of projects our team members have lent hands or resources to of late:\nOperation Warm\nproviding warmth, confidence and hope to children in need through the gift of brand-new winter coats. Over the last 20 years, Operation Warm and our partners have used the coat as a bridge for families in need to access everything from flu shots to new books.\nFontanus Research Center\nwhich aims to create new, efficient and interdisciplinary educational methodologies.\nNational Charity League\na multi-generational philanthropic organization of mother and daughters who volunteer close to three million hours annually to over 6,000 charities in the United States.\nHack for She, a completely virtual hackathon aimed to find solutions to Women‚Äôs problems.\nReturn to the\nPeople Group Handbook\n.\nLast modified March 24, 2025:\nDIB March 25 Stale Pages and Links removal (\n107283ee\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 593}
{"doc_id": "babcf91145f20245", "url": "https://handbook.gitlab.com/handbook/leadership/biggest-tailwinds", "title": "Biggest Tailwinds | The GitLab Handbook", "text": "The Handbook\nLeadership\nBiggest Tailwinds\nWe believe that the market opportunity for a complete DevSecOps platform designed as a single application for the software development lifecycle is\nseveral billion dollars and expanding\n. There are three primary trends outlined below that we have identified as the most significant to supporting the long term success of our business.\nWe also have a\nMitigating Concerns page\n.\n1. Digital Transformation\nDigital Transformation\nCustomer Experience\nSoftware is Eating the World\n2.  DevOps\nDevOps\nDevelopers as the New Kingmakers\nDevOps Tooling Consolidation\nLack of Developers\nOpen Source\n3. Multicloud\nMulticloud\nCloud Native and the Adoption of Kubernetes\nMicroservices\nObservability\nProgressive Delivery\nWorkloads Moving to the Cloud\n4. All-Remote\nAll-Remote\nGitLab‚Äôs all-remote workforce is significantly more advanced and sophisticated than other forms of organizational design. Our dedication to working\nhandbook-first\n, operating\ntransparently\n, and\nusage of GitLab\nto drive results creates tailwinds for the organization.\nGitLab‚Äôs adherence to all-remote makes the company an attractive destination for people who are on the\nB-team in hybrid-remote firms\n, or feel limited by the inflexibility of a fully colocated role.\nGitLab Guide to All-Remote\nWork where you want, when you want\nAll-Remote Upgrade\nOur Work-From-Anywhere Future\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 220}
{"doc_id": "c85ba03378d1f632", "url": "https://handbook.gitlab.com/handbook/company/mission", "title": "GitLab Mission | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Mission\nWe at GitLab believe that all digital products should be open to contributions; from legal documents to movie scripts, and from websites to chip designs.\nMission\nIt is GitLab‚Äôs mission to\nenable everyone to contribute to and co-create the software that powers our world\n.\nThere are three ways you can contribute and co-create:\nEveryone can contribute with GitLab\nEveryone can contribute to and co-create with GitLab, the application\nEveryone can contribute to GitLab, the company\nEveryone can contribute with GitLab\nTo ensure that\neveryone can contribute with GitLab\nwe allow anyone to create a proposal, at any time, without setup, and with confidence. Let‚Äôs analyze that sentence a bit.\nAnyone: Every person in the world should be able to afford great DevSecOps software. GitLab.com has free private repos and CI runners and GitLab CE is\nfree as in speech and as in beer\n. But open source is more than a license, that is why we are\na good steward of GitLab CE\nand keep both GitLab CE and EE open to inspection, modifications, enhancements, and suggestions.\nCreate: It is a\nsingle application\nbased on\nconvention over configuration\n.\nProposal: With Git, if you can read it, you can fork it to create a proposal.\nAt any time: You can work concurrently with other people, without having to wait for permission or approval from others.\nWithout setup: You can make something without installing or configuring for hours with our web IDE and Auto DevSecOps.\nWith confidence: Reduce the risk of a flawed proposal with review apps, CI/CD, code quality, security scans, performance testing, and monitoring.\nEveryone can contribute to and co-create with GitLab, the application\nWe actively welcome contributors to\nenable everyone to contribute to and co-create with GitLab, the application\n. When\neveryone can contribute and co-create\n, users become contributors and we greatly\nincrease the rate of innovation to benefit customers and users. There is also an open dialogue between GitLab and our customers, partners, and the community so that we can also better identify what they need. That way we can not only build a solution for them, but bring that solution to the world.\nWe think that it is logical that our collaboration tools are a collaborative\nwork themselves. More than\n3,000 people from the wider community\nhave contributed to GitLab to make that a reality.\nWe do this by having quality code, tests, documentation, popular frameworks,\nand offering a comprehensive\nGitLab Development Kit\nand a dedicated\nGitLab Design System\n.\nWe use GitLab at GitLab Inc., we\ndogfood\nit and make it a tool we continue to love. We celebrate contributions by\nrecognizing a Most Valuable Person (MVP) every month.\nWe allow everyone to anticipate, propose, discuss, and contribute features by having everything on\na public issue tracker. We ship a new version every month so contributions\nand feedback are visible fast. To contribute to open source software, people\nmust be empowered to learn programming.\nThat is why we sponsor initiatives such as Rails Girls.\nThere are a few significant, but often overlooked, nuances of the\nenabling everyone to contribute to GitLab, the application\nmantra:\nWhile collaboration is a core value of GitLab, over collaborating tends to involve team members unnecessarily, leading to consensus-based decision making, and ultimately slowing the pace of improvement in the GitLab application. Consider\ndoing it yourself\n, creating a merge request, and facilitating a discussion on the solution.\nFor valuable features in line with our product philosophy, that do not yet exist within the application, don‚Äôt worry about UX having a world class design before shipping. While we must be good stewards of maintaining a quality product, we also believe in rapid iteration to add polish and depth after an\nis created.\nPrefer creating merge requests ahead of issues in order to suggest a tangible change to facilitate collaboration, driving conversation to the recommended implementation.\nContributors should feel free to create what they need in GitLab. If quality engineering requires charting features, for example, which would normally be implemented out of another team, they should feel empowered to prioritize their own time to focus on this aspect of the application.\nGitLab maintainers, developers, and Product Managers should be viewed as coaches for contributions, independent of source. While there are contributions that may not get merged as-is (such as copy/paste of EE code into the CE code base or features that aren‚Äôt aligned with product philosophy), the goal is to coach contributors to contribute in ways that are cohesive to the rest of the application.\nA group discussion reiterating the importance of everyone being able to contribute:\nEveryone can contribute to GitLab, the company\nTo\nenable everyone to contribute to GitLab, the company\nwe have open business processes.\nThis allows all team members to suggest improvements to our handbook. We hire remotely so our team members can be judged on results, not presence in an office. We engage on social media platforms and in our blog post comments. And we strive to take decisions guided by\nour values\n.\nEveryone can contribute to about.gitlab.com\nWe welcome all contributors in the\nwww-gitlab-com project\nso that\neveryone can contribute to about.gitlab.com\n. GitLab uses about.gitlab.com to share our expertise with the world and believe we can build even greater levels of trust with contributions from our team and community. We strive to provide a great experience for our existing and new community members by reviewing changes and integrating the contributions into our regularly planned updates.\nCadence and Alignment\nOur Mission is on a 30 year\ncadence\n.\nPurpose\nOur purpose\nis to help people\nincrease their lifetime earnings\nthrough training, access to opportunities, and the DevSecOps platform.\nOur mission is the way we realize\nour purpose\n. By\nenabling everyone to contribute to and co-create the software that powers our world\n, we increase access for people to be creators. With more contributors and more creators, we increase both the volume and velocity of innovation. More innovation drives economic progress that\nbenefits consumers, businesses, and the economy as a whole\n. As a result, innovation both directly and indirectly increases the total volume of available opportunities and average value of each individual opportunity.\nAccess to a broader set of more valuable opportunities ultimately\nincreases people‚Äôs lifetime earnings\n.\nOur purpose\nis on the same 30 year cadence as our mission.\nOur purpose\ninforms our mission, which directly or indirectly informs the rest of the items in\nour cadence\n. As a result, progress for the items on our\ncadence page\ncreates progress for both our mission and\nour purpose\n.\nVision\nOur mission is the inspiration for\nour vision\n. Our vision is on a 10 year cadence.\nValues\nOur mission guides our path, and\nour values\nare the principles we live along this path.\nCustomer acceptance\nWe firmly adhere to laws including trade compliance laws ‚Äì see the\nGitLab Code of Business Conduct and Ethics\n, in countries where we do business, and welcome everyone abiding by those legal restrictions to be customers of GitLab. In some circumstances, we may opt to not work with particular organizations, on a case-by-case basis. Some reasons we may choose not to work with certain entities include, but are not limited to:\nEngaging in illegal, unlawful behavior.\nMaking derogatory statements or threats toward anyone in our community.\nEncouraging violence or discrimination against legally protected groups.\nThis policy is in alignment with our mission, contributor and employee code-of-conduct and company values. Here are some links that may give you some background at how we arrived at this customer acceptance policy:\nOur mission is to ‚Äúenable everyone to contribute to and co-create the software that powers our world.‚Äù This mission is in alignment with our open source roots and the\nMIT license\nour open source software is subject to. The MIT License is a free software license that allows users the freedom to run the program as they wish, for any purpose.\nGitLab has a\ncontributor code of conduct\nfor\nhow\nto contribute to GitLab, but there are no restrictions on\nwho\ncan contribute to GitLab. We desire that everyone can contribute, as long as they abide by the code of conduct.\nGitLab has a set of values for how GitLab team members strive to conduct themselves. We don‚Äôt expect all companies to value collaboration, results, efficiency, diversity, inclusion and transparency in the same way we do. As an open company, ‚Äúeveryone can contribute‚Äù is our default and\ntransparency\nis our check and balance. Transparency means our handbook, issues, merge requests and product roadmap are online for everyone to see and contribute to.\nRelated topic: At GitLab, we want to avoid an environment where people feel alienated for their religious or political opinions. Therefore, we encourage GitLab team members to refrain from taking positions on specific\nreligious or political issues\nin public company forums (such as on the GitLab Contribute stage or Slack channels) because it is easy to alienate people that may have a minority opinion. It is acceptable to bring up these topics in social contexts such as coffee chats and real-life meetups with other coworkers, but always be aware of cultural sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our\nCode of Business Conduct & Ethics\n. We always encourage\ndiscussion and iteration\non any company policy, including this one.\nMitigating Concerns\nWe acknowledge the concerns to achieving our goals. We document them in our\nMitigating Concerns page\n.\nTake GitLab for a spin\nSee what your team could do with The DevSecOps Platform.\nGet free trial\nHave a question? We're here to help.\nTalk to an Expert\nLast modified May 7, 2025:\nRemove yearlies (\nf8b1e675\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1633}
{"doc_id": "98dc31665f6cfc60", "url": "https://handbook.gitlab.com/handbook/security/corporate/systems/linux/setup", "title": "Linux Desktop OS Setup Guide | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec Systems and Tech Stack\nLinux Desktop OS\nLinux Desktop OS Setup Guide\nSetup and Deployment Steps\nThese steps assume you are using the work-purchased Dell running Ubuntu 22.04 LTS or later. This is because Ubuntu 22.04 is known to support the required software packages for remote management and EDR solutions that allow for Linux use in GitLab. If your situation is different and you are running different hardware and/or using a different Linux distribution, it\nmust\nbe capable of supporting the required software packages.\nEnsure your laptop is running Linux\n. Certain circumstances (world region and availability of hardware) might require the self installation of Linux on a Dell that was shipped with OEM Windows. If this is the case, you will need to set up a USB drive with Ubuntu and perform the installation.\nFor laptops shipped with OEM Windows you may want to make a full drive backup (e.g. by using open source utility\nClonezilla\n) to an external drive before installing Linux. That way you could restore your laptop to the original state at any time. It will make the RMA process much easier in case you need it. This is optional and not required.\nEnsure the hard drive is encrypted\n. From a terminal window run the command\nsudo dmsetup ls\n. If there is a reference to something like\ncryptdata\nor\ndm_crypt-0\nin the output, encryption is enabled. If not, you will need to reinstall Ubuntu and enable drive encryption during the installation process.\nEnsure the firewall is enabled\n. From a terminal window run the command\nsudo ufw status\n. If the response is\nStatus: inactive\nrun\nsudo ufw enable\n. If\nufw\nis not installed, run\nsudo apt install ufw\nfirst.\nEnsure MDM is installed\n. Follow the instructions listed\nhere\n(internal link). This will also install the EDR tool.\nRegular Applications\n. Use the regular approved applications such as Google Chrome (and sign into Okta), Zoom, and Slack. Install the other applications for your job description (e.g. development tools) as needed. Complete the steps in your onboarding issue and/or laptop equipment issue.\nAdditional Steps\nAutomatic Updates\n- While not required it is highly recommended that automatic updates are configured to ensure the latest security patches are available. As many of the Linux users in GitLab are developers, it is understood that there might be hesitancy that various components used for developments - particularly those impacting a build process - could cause difficulties. That being said, here are two recommended options for enabling automated updates:\nThe GNOME Update Manager‚Äôs\nSoftware & Updates\ncan be configured for automatic updates.\nInstallation and configuration of the\nunattended-upgrades\npackage.\nMore detail is available\nhere\n.\nFingerprint Reader\n- If your Dell laptop has a fingerprint reader, modern Ubuntu may support it out of the box, if not consider the following steps (YMMV, it may require another solution):\nsudo apt install libpam-fprintd\nsudo systemctl status fprintd.service\nsudo systemctl restart fprintd.service\nLast modified March 3, 2025:\nAdd Linux info to CorpSec handbook pages (\n77fb0860\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 523}
{"doc_id": "ea52c7890416e5c6", "url": "https://handbook.gitlab.com/handbook/product/product-processes", "title": "Product Processes | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct Processes\nAs a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value.\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nOur Product philosophy\nAs a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. The\nProduct Principles\nsection is where you can learn about our strategy and philosophy regarding product development, here we discuss the processes we use tactically.\nProduct Development Flow\nIntroducing changes requires a number of steps, with some overlap, that should be completed in order. GitLab follows a dual-track\nproduct development flow\nspanning product, engineering, UX, and quality. We\nuse GitLab to power product development flow\n. When changes are released, we follow the\nrelease post process\nto communicate externally about new capabilities.\nThis process should be both up front and on an on-going basis when building features.\nThe Importance of Direction\nDocumenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. We document our direction in direction pages. Read more about related processes under\nPlanning and Direction\n.\nUnderstanding Milestones and Releases\nInterpreting release dates\nclarifies how product teams use milestones and labels to indicate the likelihood of feature delivery within certain time frames.\nThe\nrelease definitions\nare maintained by the Engineering Team and we run the end of each Milestone on the\nrelease date\n.\nRelevant links\nEngineering release definitions\nFeature flag lifecycle\nProduct Launch process\nCommunication\nProduct Org Communication Touchpoints\nIn November 2024 we adjusted our communicated touch points based on feedback from our\nFY25-Q2 Engagement Survey\n, AMAs, skip levels, and 1:1s. The two key areas we are prioritizing:\nEmbedding more asynchronous touchpoints to reach team members across time zones\nImplementing additional opportunities to cascade information from E-Group and PLT\nSynchronous Product Org Communication Touch Points\nProduct All-Team Meeting: We have a quarterly synchronous meeting for the Product Org. As of Nov 2024, we are expanding on the existing content and structure to ensure key strategic updates from each PLT department head are effectively cascading through the organization regularly.\nProduct Key Review: We follow the company wide key-review format which covers key updates to the product division and is shared with cross-functional stakeholders.\nAsynchronous Product Org Communication Touch Points\nCPO Fortnightly Update: David posts a slack message in #product-private every two weeks. This is a way for him to share what is top of mind for E-group and across the product team.\nNew Hire Intros: New hires to the product org are encouraged to post their introduction in the #new-team-members slack channel. Once per month, a member of our Product Leadership Team will post a consolidated list of new hires and their intros into the #product-private slack channel.\nMonthly Showcase: On a 4-week cadence we have an async monthly showcase, facilitated in the #product-private channel, where people can share what they‚Äôre working on with the rest of the Product Org. This is a low-key competition with prizes to incentivize folks to contribute videos. Team members can add videos throughout the month, then the entire Product Org can vote on their favorite video via google form. At the end of the 4-week period, there will be a prize for the winner, announced in David‚Äôs fortnightly update. In the case of a tie in number of views, David will make the final call on who wins. We hope that this encourages team members to share their wins and exciting developments in their feature areas! Note: We‚Äôre doing this on a 4-week cadence (rather than calendar month) so that it aligns with David‚Äôs fortnightly updates, which are posted every other week. This should still be roughly aligned to the calendar month.\nOther Communication Channels\nProduct Function Issue Tracker\n- please use\nconfidential issues for topics that should only be visible to team members at GitLab.\nProduct Function GitLab Group - @gl-product\nProduct Management GitLab Group - @gl-product-pm\n[\nChat channel - #product-private\n]. This is a private slack channel for members of the product-org; new team members are automatically added to this channel as part of onboarding.\nChat channel - #product\n. All GitLab internal team members can use the\n#product\nchannel for any product-related questions but you‚Äôll also find more direct assistance in the various\nProduct Group\nchannels.\nCommunicating with the Entire Product Management Function At Once\nWhen communicating change or a request for action to the entire product function, utilize the following levels and corresponding activities.\nLevel\nDescription\nActivities\nOne\nSuggestion for review from interested PMs and FYI\nPost MR/issue in\n#product\nTwo\nRequest for action from all PMs\nPost in\n#product\nand mention\n@gl-product-pm\nin MR/issue with specific action instructions.\nThree\nConfirmation of understanding\nPost in\n#product\nand mention\n@gl-product-pm\n; checkbox for each\n@gl-product-pm\nmember in an MR/issue description to confirm; assign MR/issue to all\n@gl-product-pm\nmembers\nInternal and external evangelization\nBefore shipping a new or updated feature, you are responsible for championing\nit, both internally and externally. When something is released, the\nfollowing teams need to be aware of it as they will all need to do something\nabout it:\nMarketing: depending on the importance of the feature, we need the help of\nmarketing to promote this feature on our different communication channels.\nSales: sales needs to know what‚Äôs new or changed in the product so they can\nhave better arguments to convince new or existing customers during their sales\nprocess.\nSupport: as they are in constant contact with our users and customers,\nsupport should know exactly how our products work.\nYou can promote your work in several ways:\nstart with documenting what will be released and share this documentation with\nthe different teams\nschedule meetings, if you think it‚Äôs important, with the teams listed above.\nWhen referencing issues in written communication using just the issue number\n#123456\nand a link is not\nlow-context communication\n. Instead use the title of the issue and the link or the issue number and description of the problem that issue will solve:\nGood:\nWe will next be working on [Detect and display code coverage reports on MR](https://gitlab.com/gitlab-org/gitlab/-/issues/21549)\nWe will next be working on [gitlab#21549](https://gitlab.com/gitlab-org/gitlab/-/issues/21549) which will help developers view code coverage reports directly in GitLab instead of losing context by looking in another tool while reviewing an MR\n.\nAvoid:\nWe will next be working on #21549.\n.\nIn order to support\nfindability\nand to clearly\narticulate when we change our minds\nespecially when it comes to product direction, category changes, shifts in investment themes, or priorities for engineering, Product Managers must evangelize these changes in multi-modal communication channels to ensure our users and customers aware.\nSome\ninternal\nmethods for communication include:\nSharing the updates various product-based Slack channels such as:\n#product\n,\n#s_\n,\n#g_\n, or\n#f_\nSlack channels\nCross-posting changes in direction or categories into #customer-success and if they impact\nuse cases\ntag\n@cs-leadership\nfor awareness\nRecording a quick video and sharing with Customer Success that discusses direction updates. Use sync meetings\nas needed\nto facilitate efficient communication.\nCollaborate with the Field Communications team\nto determine if a larger internal communications plan/approach is necessary for the Field (Sales, Customer Success, Channel & Alliances) team.\nAggregating and sharing highlights of monthly direction page updates at the Section-level across the organization\nExternal\nchannels for consideration linking direction pages to:\nTwitter, LinkedIn, or other social accounts\nSharing outreach emails via account teams\nRecording walkthroughs on Unfiltered and promoting on social accounts\nWriting a blog about the changes, if they are significant or disruptive\nWriting to inspire action\nAs a PM, it is important to remember a\nbias towards action\n(and other value actions like\nsense of urgency\n,\nmake a proposal\n,\nboring solutions\n,\nwrite things down\n,\ndon‚Äôt wait\n, and\nmake two way doors decisions\nwhich enables PMs to drive an async discussion to being action oriented. Every time you write a comment or create an issue ask yourself: Will this allow us to take an action and move us forward?\nWriting about features\nAs PMs we need to constantly write about the features and upgrades we ship: in a blog post,\ninternally to promote something, and in emails sent to customers. There are some\nguidelines that one should take into account when writing about features,\nthe most important being a clear communication of the problem we‚Äôre solving for users.\nWhen writing about a feature, make sure to cover\nthese messaging guidelines\nwhich help produce clear internal and external\nmessaging. Please also keep in mind that we should avoid using acronyms that others my not recognize, such as ‚ÄúMVC‚Äù for Minimal Valuable Change. For more guidance you can visit our\nwriting style guidelines\n.\nLet‚Äôs highlight the messaging guidelines mentioned above with a concrete example, Preventing Secrets in your repositories,\nthat\nwe shipped in 8.12\n.\nStart with the context. Explain what the current situation is without the\nfeature. Describe the pain points and connect back to our\nValue Drivers\n(in this case\nReduce Security and Compliance Risk\n).\nIt‚Äôs a bad idea to commit secrets (such as keys and certificates) to your\nrepositories: they‚Äôll be cloned to the machines of anyone that has access to the\nrepository. If just a single one is insecure, the information will be\ncompromised. Unfortunately, it can happen quite easily. You write\ngit commit -am 'quickfix' && git push\nand suddenly you‚Äôve committed files that\nwere meant to stay local!\nExplain what we‚Äôve shipped to fix this problem.\nGitLab now has a new push rule that will prevent commits with secrets from entering the repository.\nDescribe how to use the feature in simple terms.\nJust check the checkbox in the repository settings, under push rules and\nGitLab will prevent common unsafe files such as .pem and .key from being committed.\nPoint to the documentation and any other relevant links (previous posts, etc).\nHere are some additional examples of well written release blog posts for inspiration:\nIssue Board Work In Progress Limits\nParent-Child Pipelines\nDrag-and-drop Design badges\nRender charts in GitLab issues using a Grafana URL\nRecording videos to showcase features\nIn addition to the written medium, video is an important medium that caters to the different goals you are trying to accomplish and learning styles of your audience.\nDepending on the type of video you are recording, there are some guidelines to keep in mind.\nAs our documentation guidelines\nactively encourage\nlinking video content,\nplease consider following the\nDocumentation Style Guide section on language\n,\nand working with your technical writing team to include links to your speed runs, walk-throughs and demos at relevant locations in the product documentation.\nUsing GIFs\nAnimated GIFs are an awesome way of showing of features that need a little more than just an image, either for marketing purposes or explaining a feature in more detail. Checkout our guide to\nMaking Gifs\n!\nSpeed Run\nSpeed runs are informal videos meant to focus on a single workflow and the experience for performing that workflow. It should not require much planning and is typically short in duration (less than 5 min.). This video type is meant to inform and not necessarily to influence buyers.\nExamples:\nGitLab Unfiltered Speed Runs Playlist\nRemove docker images via CI/CD speed run\nDemo\nDemos are scripted recordings meant to influence buyers. Generally has higher production value and typically involves both a slide-style presentation and/or live screen-sharing. Duration varies depending on the topics being covered.\nExamples:\nGitLab for the Enterprise Demo\nWalk-through\nProduct walk-throughs are informal videos meant primarily for an internal audience as a recorded, visual form of product critique. Walk-throughs typically focus on the user experience across categories and workflows within a Product Manager‚Äôs\nproduct scope\n. There are particular benefits to walk-throughs which span\nproduct hierarchy\nboundaries (multi-category, multi-stage, multi-section) as they help highlight disjointed experiences across our single-application.\nWalk-throughs are typically longer in length as they cover more ground and often involve some ‚Äúlive‚Äù troubleshooting and are best performed with no planning. Use the\nProduct walk-through issue template\nwhen creating a walk-through.\nExamples:\nAuto DevOps setup and usage walk-through\nQA Release Candidates on staging and elsewhere\nAfter the feature freeze, it‚Äôs expected of each product manager to test their own features and perform quality assurance\nto the best of their ability and follow up where necessary.\nProduct managers can use the staging environment once the release managers have deployed a release candidate (RC) to staging.\nRelease managers should post in the\n#product\nchannel in Slack that a new release candidate is available. Product managers\ncan also use other environments as needed, such as GitLab provisioned on Kubernetes with GKE.\nFeature assurance\nBefore a new feature is shipped, the PM should test it out to make sure it\nsolves the original problem effectively. This is not about quality assurance\n(QA), as developers are responsible for the quality of their code. This is about\nfeature assurance (FA). FA is necessary because sometimes there are\nmisunderstandings between the original issue proposal and the final\nimplementation. Sometimes features don‚Äôt actually solve the intended problem,\neven though it seemed like it would, and sometimes solutions just don‚Äôt feel as\nuseful as intended when actually implemented.\nIf you can test out the feature during development, pulling down branches\nlocally (or with a review app!), that‚Äôs great. But sometimes it‚Äôs not feasible\nto test a feature until it‚Äôs bundled into a release candidate and deployed to\nGitLab.com. If so, make sure to test out features as soon as possible so any new\nissues can be addressed before final release. Also, take the FA cycle into\naccount when scheduling new milestone work.\nIf you are looking to test code that has not been merged to GitLab.com or is not yet\npart of an RC, you can pull the branch down locally and test it using the\nGitLab\nDevelopment Kit (GDK).\nDealing with security issues\nQuality Engineering Managers (QEM) are the DRIs for prioritizing bugs. These include security issues which are prioritized in conjunction with the security team. Product Managers must work with their QEM to set Milestones for issues marked with the\nbug::vulnerability\ntype label\nto guarantee they are shipped by their due date, as defined in the\nSecurity Team process\n.\nWhile Product Managers are the DRIs for\nmilestone planning\n, they must respect the prioritization order for bugs and maintenance issues as determined by their QEM and EM, respectively. As such they should deeply understand the implications and risks of security-related issues and balance those when prioritizing a milestone work. Addressing a serious security issue by its due date may require temporarily adjusting the desired work type ratio for one or more milestones. Priority labels and Due Date designations for security issues should never be modified by Product Managers as they are directly managed by the Security Team and used to track metrics and progress.\nFoundational Requirements\nWhen thinking about new features, we must not only think about the functional requirements of a feature (defining what the feature will do), but also to think about foundational requirements (defining how the feature works). At the highest level, foundational requirements define items such as performance, scalability, compatibility, maintainability and usability characteristics of a feature. It is important to have foundational requirements in place up front, as this is much easier than trying to add them later and change expectations, or break existing workflows. Our\ndefinition of done\ncontains specific areas of consideration that are required for the acceptance of new contributions.\nFor an in depth review of foundational requirements (often referred to as non-functional requirements), see\nthis resource\n.\nTo deliver features, we must have both functional and foundational requirements defined.\nIntroducing application limits\nTo enhance availability and performance of GitLab, configurable limits should be put in place for features which utilize storage, or scale in a manner which could impact performance. For example, we\nlimit the number of webhooks per project\n, and we allow admins to set\nrate limits on raw endpoints\n. These limits ensure more consistent performance, reduce the likelihood of outages, and offer admins tools to limit abuse or enforce specific standards. While these limits can be configurable, sensible default limits should be defined for our GitLab SaaS and GitLab dedicated offerings.\nThere is a guide about\ndeveloping application limits\nin the GitLab Docs.\nWhen implementing application limits\nSee\nRate Limiting::Managing Limits\n.\nManaging data lifecycle and growth\nAs we continue to scale our product, we need to consider the amount of data being stored for new features. Data storage is not an infinite resource, so we should think carefully about what data needs persistent storage to provide the desired user experience. We also need to consider the cost implications around data storage. Everything we store impacts our bottom line, and we should therefore be careful to ensure we are only storing necessary data for well thought out time-frames. We are working on\ndefining a sustainable data retention policy\n, and will iterate on this section as more general guidelines are developed.\nData storage comes in three main forms for GitLab ‚Äì object storage, database storage, and Git repository storage. While we have dedicated teams devoted to ensuring we can scale these storages appropriately, it is in our best interest to only store what is required for a feature to perform as intended. Additionally, there are situations where storage should be subject to data retention policies.\nConsiderations around data storage\nWhen evaluating feature data storage, the following data storage topics should be considered.\nWhat quantity data needs to be stored?\n- What amount of data will need to be stored for the feature to function as intended. Is this level of data storage bounded, or is there a potential for unbounded growth? Unbounded growth should be avoided if possible.\nHow long should data be retained?\n- We should consider carefully the need to store data indefinitely. For many features, removing certain data after a specified time period won‚Äôt impact the functionality of the feature. In these instances, we should put retention policies in place. These retention polices should have a sane default value which is considered best practice for operating the feature long term.\nNote: it is easier to iterate toward longer data retention time frames, but far harder to reduce retention time frames. Consider starting out with a conservative time frame.\nHow often will this data be accessed?\n- Much like the quantity of data stored can lead to scalability issues, so can the increased load on the data stores when the data is accessed frequently. There are ways to ease the burden on our infrastructure by properly forming queries, caching often used data, or carefully considering how repository data is accessed. If there are questions, consider reaching out to the\nDatabase Group\nor the\nGit Group\nfor assistance.\nA good example where we‚Äôve successfully evaluated data storage is our CI/CD Artifacts. We‚Äôve set some sane default values for both\nmaximum artifact size\nand for\ndefault artifacts expiration\n, while making these both configurable for administrative users.\nCross-stage features\nSee\nthis page\nfor details on working across stages at GitLab.\nStages, Groups, and Categories\nStages, groups, and categories\nserve as a common framework for organizing and communicating the scope of GitLab.\nHow to work as a PM\nIf you follow the principles and workflow above, you won‚Äôt be writing long, detailed\nspecs for a part of the product for next year. So how should you be\nspending your time?\nInvest the majority of your time (say 70%) in deeply understanding the problem.\nThen spend 10% of your time writing the spec\nfor the first iteration only\nand\nhandling comments, and use the remaining 20% to work on promoting it.\nA problem you understand well should always have a (seemingly) simple or obvious\nsolution. Reduce it to its simplest form (see above) and only ship that.\nPrioritization\nSee the\nCross-Functional Prioritization page\nfor more information.\nPrioritization Framework\nPriority\nDescription\nIssue label(s)\n1*\nSecurity\nbug::vulnerability\n2*\nData Loss\ndata loss\n3*\nResilience, Reliability,\nAvailability\n,\nand Performance\navailability\n,\ninfradev\n,\nCorrective Action\n,\nbug::performance\n4\nOKR‚Äôs\n5\nUsability\nUsability benchmark\n,\nSUS::Impacting\n,\nDeferred UX\n6\nInstrumentation\ninstrumentation\n7\nxMAU / ARR Drivers\ndirection\n8\nAll other items not covered above\n*indicates forced prioritization items with SLAs/SLOs\nForced Prioritization\nAny of the items with a ‚Äú*‚Äù are considered issues driven by the attached\nSLO or SLA\nand are expected to be delivered within our stated policy. There are two items that fall into Forced Prioritization:\nSecurity Issues labeled with\nbug::vulnerability\nmust be delivered according to the stated\nIssues supporting our product‚Äôs scale which include\nbug::availability\nwith\nspecific SLOs\nas well as\ninfradev\n,\nCorrective Action\n,\nci-decomposition::phase*\nthat follow the stated\ntype::bug\nAny issues outside of these labels are to be prioritized using\ncross-functional prioritization\n. Auto-scheduling issues based on automation or triage policies are not forced prioritization. These issues can be renegotiated for milestone delivery and reassigned by the DRI.\nEngineering Allocation\nWhile we have moved to the\ncross-functional prioritization process\nto empower teams to determine the optimal balance of all types of issues, we will keep Engineering Allocations as a way to allow teams to quickly shift to a critical priority, designating the EM as the DRI to drive the effort.\nEngineering is the DRI for mid/long term team efficiency, performance, security (incident response and anti-abuse capabilities), availability, and scalability. The expertise to proactively identify and iterate on these is squarely in the Engineering team. Whereas Product can support in performance issues as identified from customers. In some ways these efforts can be viewed as risk-mitigation or revenue protection. They also have the characteristic of being larger than one group at the stage level. Development would like to conduct an experiment to focus on initiatives that should help the organization scale appropriately in the long term.  We are treating these as a percent investment of time associated with a stage or category. The percent of investment time can be viewed as a prioritization budget outside normal Product/Development assignments.\nEngineering Allocation is also used in short-term situations in conjunction and in support of maintaining acceptable Error Budgets for GitLab.com and our\nGitLab-hosted first\ntheme.\nUnless it is listed in this table, the Engineering Allocation for a stage/group is 0% and we are following normal\nprioritization\n. Refer to this\npage\nfor Engineering Allocation charting efforts. Some stage/groups may be allocated at a high percentage or 100%, typically indicating a situation where all available effort is to be focused on Reliability related (top 5 priorities from\nprioritization table\n) work.\nDuring an Engineering Allocation, the EM is responsible for recognizing the problem, creating a satisfactory goal with clear success criteria, developing a plan, executing on a plan and reporting status.  It is recommended that the EM collaborate with PMs in all phases of this effort as we want PMs to feel ownership for these challenges.  This could include considering adding more/less allocation, setting the goals to be more aspirational, reviewing metrics/results, etc.   We welcome strong partnerships in this area because we are one team even when allocations are need to resolving issues critical to our business.\nDuring periods of Engineering Allocation, the PM remains the interface between the group and the fields teams & customers. This is important because:\nIt allows Engineering to remain focused on the work at hand\nIt maintains continuity for the field teams - they should not have to figure out different patterns of communication for the customer\nIt keeps PMs fully informed about the product‚Äôs readiness\nGroup/Stage\nDescription of Goal\nJustification\nMaximum % of headcount budget\nPeople\nSupporting information\nEMs / DRI\nPMs\nBroadcasting and communication of Engineering Allocation direction\nEach allocation has a\ndirection page\nmaintained by the Engineering Manager. The Engineering Manager will provide regular updates to the direction page. Steps to add a direction page are:\nOpen an MR to the\ndirection content\nAdd a directory under the correct stage named for the title Engineering Allocation\nAdd a file for the page named\nindex.html.md\nin the newly created directory\nTo see an example for an Engineering Allocation Direction page, see\nContinuous Integration Scaling\n. Once the Engineering Allocation is complete, delete the direction page.\nHow to get a effort added to Engineering Allocation\nOne of the most frequent questions we get as part of this experiment is ‚ÄúHow does a problem get put on the Engineering Allocation list?‚Äù.  The short answer is someone makes a suggestion and we add it.  Much like everyone can contribute, we would like the feedback loop for improvement and long terms goals to be robust.  So everyone should feel the empowerment to suggest an item at any time.\nTo help with getting items that on the list for consideration, we will be performing a survey periodically.  The survey will consist of the following questions:\nIf you were given a % of engineering development per release to work on something, what would it be?\nHow would you justify it?  Have you tried leveraging\ncross-functional prioritization process\nbefore considering an engineering allocation?\nWe will keep the list of questions short to solicit the most input.  The survey will go out to members of the Development, Quality, Security.  After we get the results, we will consider items for potential adding as an Engineering Allocation.\nClosing out Engineering Allocation items\nOnce the item‚Äôs success criteria are achieved, the Engineering Manager should consult with counterparts to review whether the improvements are sustainable. Where appropriate, we should consider adding monitoring and alerting to any areas of concern that will allow us to make proactive prioritizations in future should the need arise. The Engineering Manager should close all related epics/issues, reset the allocation in the above table to the floor level, and inform the Product Manager when the allocated capacity will be available to return their focus to product prioritizations.\nWhen reseting a groups Engineering Allocation in the table above, the goal should be set as\nfloor %\n, the goal should be\nempower every SWEs from raising reliability and security issues\n, percentage of headcount allocated should be\n10%\n, and\nin place of a link to the Epic.\nAll engineering allocation closures should be reviewed and approved by the\nVP of Development\n.\nFeature Change Locks\nA Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The\nteam\ninvolved should be determined by the author, their line manager, and that manager‚Äôs other direct reports.\nIf the incident meets the above criteria, then the manager of the team is responsible for:\nForm the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone.\nPlan and execute the FCL.\nInform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL.\nProvides updates at the\nSaaS Availability Weekly Standup\n.\nIf the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development.\nDirect reports involved in an active\nborrow\nshould be included if they were involved in the authorship or review of the change.\nThe purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture.\nTimeline\nRough guidance on timeline is provided here to set expectations and urgency for an FCL.  We want to balance moving urgently with doing thoughtful important work to improve reliability.  Note that as times shift we can adjust accordingly.   The DRI of an FCL should pull in the timeline where possible.\nThe following bulleted list provides a suggested timeline starting from incident to completion of the FCL.  ‚ÄúBusiness day x‚Äù in this case refers to the x business day after the incident.\nDay 0: Incident:\nBusiness day 1:  relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required.\nBusiness day 2:  confirmation that an FCL is required for this incident and start planning.\nBusiness days 3-4:  planning time\nBusiness days 5-9 (1 week):  complete planned work\nBusiness days 10-11:  closing ceremony, retrospective and report back to standup\nActivities\nDuring the FCL, the team(s) exclusive focus is around\nreliability work\n, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must:\nCreate a public slack channel called\n#fcl-incident-[number]\n, with members\nThe Team‚Äôs Manager\nThe Author and their teammates\nThe Product Manager, the stage‚Äôs Product leader, and the section‚Äôs Product leader\nAll reviewer(s)\nAll maintainers(s)\nInfrastructure Stable counterpart\nThe chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc)\nCreate an\nFCL issue\nin the\nFCL Project\nwith the information below in the description:\nName the issue:\n[Group Name] FCL for Incident ####\nLinks to the incident, original change, and slack channel\nFCL Timeline\nList of work items\nComplete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved.  The Incident Review must include completing all fields in the Incident Review section of the incident issue (see\nincident issue template\n).  The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed.\nSee that not only all procedures were followed but also how improvements to procedures could have prevented it\nA work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic.\nDaily - add an update comment in your FCL issue or epic using the template:\nExec-level summary\nTarget End Date\nHighlights/lowlights\nAdd an agenda item in the\nSaaS Availability weekly standup\nand summarize status each week that the FCL remains open.\nHold a synchronous\nclosing ceremony\nupon completing the FCL to review the retrospectives and celebrate the learnings.\nAll FCL stakeholders and participants shall attend or participate async.  Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited.\nAgenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability.\nOutcome includes\nhandbook\nand\nGitLab Docs\nupdates where applicable.\nScope of work during FCL\nAfter the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to:\nAddress immediate corrective actions to prevent incident reoccurrence in the short term\nIntroduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted)\nIntroduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks)\nEnsure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage)\nImprove development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews)\nCreate issues with general process improvements or asks for other teams\nExamples of this work include, but are not limited to:\nFixing items from the Incident Review which are identified as causal or contributing to the incident.\nImproving observability\nImproving unit test coverage\nAdding integration tests\nImproving service level monitoring\nImproving symmetry of pre-production environments\nImproving the\nGitLab Performance Tool\nAdding mock data to tests or environments\nMaking process improvements\nPopulating their backlog with further reliability work\nSecurity work\nImprove communication and workflows with other teams or counterparts\nAny work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don‚Äôt affect the end of the FCL.\nA stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director.\nPlease also note the corresponding\nEngineering handbook section\nabout the relative importance and prioritization of availability, security, and feature velocity. To ensure we‚Äôre providing an appropriate focus on security, data loss, and availability, PMs should consider:\ntracking the appropriate labels for each prioritization category\n: Use a standing item to discuss these issues with an engineering manager and ensure you understand the impact of related issues in your area before planning a release.\noptimizing for quality once a merge request is ready for review\n: This means ensuring that Engineering has sufficient time to meet our\ndefinition of done\n- including a\nhigh-quality code review\n- without cutting corners to get something into production.\nPrioritization sessions\nTo help PMs plan, stage group stable counterparts can participate in prioritization sessions. They serve mainly as an\ninternal sensing mechanism\nfor PMs to make more informed prioritization decisions for different planning horizons. Usually, teams focus on the\nproduct releases\nhorizon, but can also focus on the\nFY themes\nor\nstrategy\nhorizons. This group exercise also boosts team morale, improves communication and empathy, and broadens individual‚Äôs perspectives. Besides, it can be a more informal and joyful way of connecting the team and discussing work.\nThe output of these sessions is a\npriority matrix\nthat shows the relative priority of a set of items based on two weighted criteria. Generally, the criteria are\nimportance\nand\nfeasibility\n, each one visualized as an axis of the matrix. You can change the criteria depending on the planning horizon or goals. To better understand how the sessions work, see an example\nmural\nand\nsession recording\n.\nAlways consider\nasynchronous sessions\nfirst, in an effort to be more inclusive and respectful of others time. That said, if possible, synchronous sessions can be ideal, as they allow limiting the time spent and make great use of the activities‚Äô momentum for a more efficient discussion and voting.\nUse our\nMural template for prioritization sessions\n, built for product releases but adaptable for other planning horizons or criteria.\nProcess template\nAdapt this process as needed, and consider changing it to an asynchronous mode of communication. For example, participants can review the items async, add questions as\ncomments in Mural\n, and vote using\ndot voting\nor in\nvoting sessions\nheld on different days for each criterion.\nBefore:\nThe facilitator creates a mural from our\ntemplate for prioritization sessions\n, with the stage group and milestone in its name.\nThe facilitator invites the stage group counterparts for a 50-minute call, scheduled sometime before the team finalizes the release scope (see the\nproduct development timeline\n). Includes the URL of the mural and planning issue in the event description.\nThe facilitator shares the preparation work with the participants, preferably in the group‚Äôs planning issue (see the template after this list and an\nexample\n.\nParticipants do the preparation work (see the template after this list).\nDuring (see an\nexample session recording\n):\nThe facilitator starts\nrecording the call\n.\nPresent\n: For each participant, the facilitator\nsets the timer\nfor 10 minutes (adapt per the no. of participants). A participant then presents their issues, preferably using the\nRICE framework\n. Only after the participant presents all issues should other attendees ask questions. Once in a while, the facilitator announces how much time remains. When the timer goes off, repeat this for another participant.\nVote\n: After all participants have presented, the facilitator\nruns two voting sessions\n: first for\nimportance\n, and then for\nfeasibility\n. Each participant has 5 votes (adapt per the no. of issues). The facilitator sets the timer for 2 minutes, repeating for each voting session.\nVisualize\n:\nReview your voting session results\nand everyone helps place the stickies on the matrix, depending on their number of votes for each criterion.\nIf there‚Äôs still time, discuss the most-voted issues as a group.\nAfter:\nThe facilitator\nuploads the recording to GitLab Unfiltered\n, sets its visibility (see\nSAFE framework\n), adds to relevant playlists, and includes the URL of the mural and planning issue in the description.\nThe facilitator shares the recording URL and voting results in the planning issue, preferably with a screenshot of the matrix and links to the highest voted issues (see an\nexample\n.\nPreparation work template\n## :map: Prioritization session\n`@-mention participants`\nfor our [\nprioritization session\n](\n/handbook/product/product-processes/#prioritization-sessions\n), here's the [\n**Mural**\n](\n) for us to add the issues we want to see in\n. I scheduled our 50-minute session for\n.\n1.\nAdd your issues to the Mural before the call. Let's try to limit to\n**5 issues per person**\n, so it's easier to vote on them and keep things focused. You can find instructions on how to add them in the \"Outline\" panel on the right side of the Mural UI.\n1.\nTry not to add Security or Availability issues. This is also noted in the [\nproduct processes page\n](\n/handbook/product/product-processes/#prioritization\n), as those issues have forced prioritization with SLAs/SLOs.\n1.\nIf you can, mark issues that appeared in previous sessions by changing their sticky color to\n**orange**\n.\nThanks and see you soon :bow:\nUsing the RICE Framework\nis a useful framework for prioritization that can help you stack rank your issues. The RICE framework is a great tool for prioritizing many issues that seem to be of equal value at first glance. In order to drive clarity and alignment in the prioritization of work across the entire DevOps platform, and to help prioritize items that may compete for resources from different teams, we have set a standard for the RICE factors so all prioritization decisions based on RICE are using the same metric.\nReach\nHow many customers will benefit in the first quarter after launch? Data sources to estimate this might include qualitative customer interviews, customer requests through\nSupport/CS/Sales\n, upvotes on issues, surveys, etc.\nHigher reach means a higher RICE score:\n10.0 = Impacts the vast majority (~80% or greater) of our users, prospects, or customers\n6.0 = Impacts a large percentage (~50% to ~80%) of the above\n3.0 = Significant reach (~25% to ~50%)\n1.5 = Small reach (~5% to ~25%)\n0.5 = Minimal reach (Less than ~5%)\nImpact\nHow much will this impact customers and GitLab? Impact could take the form of increased revenue, decreased risk, and/or decreased cost (for both customers and GitLab). This makes it possible to compare revenue generating opportunities vs. non-revenue generating opportunities. Potential for future impact should also be taken into account as well as the impact to the GitLab brand (for example unlocking free-to-paid conversion opportunities).\nHigher impact means a higher RICE score:\nMassive = 3x\nHigh = 2x\nMedium = 1x\nLow = 0.5x\nMinimal = 0.25x\nConfidence\nHow well do we understand the customer problem? How well do we understand the solution and implementation details? Higher confidence means a higher RICE score.\nHigh = 100%\nMedium = 80%\nLow = 50%\nEffort\nHow many person months do we estimate this will take to build? Lower effort means a higher RICE score.\nCalculating RICE Score\nThese four factors can then be used to calculate a RICE score via the formula:\n(Reach x Impact x Confidence) / Effort = RICE\nHere is an example RICE calculation you can use to help prioritize work in your area. Feel free to embed this at the Epic level to provide context for why you did or did not prioritize.\nRICE Factor\nEstimated Value\nReach\n10.0\nImpact\n.5\nConfidence\n80%\nEffort\n2 month\n‚Äî‚Äî\nScore\n(10.0 x .5 x .80) / 2 =\n2.0\nOther important considerations:\nIs this in support of a company or team\n?\nDoes it bring our\nvision\ncloser to reality?\nDoes it help make our community safer through\nmoderation tools\n?\nDoes it meaningfully improve the user experience of an important workflow?\nIs it something we need ourselves?\nIs it particularly\nimportant to customers\n?\nThe technical complexity is acceptable. We want to preserve our ability to make\nchanges quickly in the future so we try to avoid complex code, complex data structures, and optional settings.\nIt is orthogonal to other features (prevents overlap with current and future features).\nThe requirements are clear.\nIt can be achieved within the scheduled milestone. Larger issues should be split up, so that individual steps can be achieved within a single milestone.\nRefer to\nresearch participant gratuities\nsection to understand\nif your study qualifies for incentive distribution\n.\nWe schedule a prioritized issue by assigning it a milestone; for more on this see\nPlanning a Future Release.\nAsync RICE Exercise\nConducting a RICE prioritization exercise with your cross-functional counterparts is a powerful way to make the process more inclusive and improve the quality of your rankings. Consider making this an async-first process to accommodate team members across different timezones. For an example of how to do this async-first, see\nthis issue that the Geo team used to collaborate on a RICE prioritization exercise.\nThis\nblank async RICE template\nis also available for you to copy for your own async prioritization exercise.\nIssues important to customers\nFor prioritizing most issues, we should utilize the RICE framework noted\nabove\n, which will capture an aggregate of customer demand. You can also augment RICE scores with the\nCustomer Issues Prioritization Framework Dashboards\n:\nCustomer Requested Issues (Product)\nfor product managers\nCustomer Requested Issues (CSM)\nfor  Sales, CS and CSM\nThese dashboards provide several inputs for calculating RICE and aggregate all customer requested issues and epics into a single dashboard. These dashboards are not meant as a replacement or sole input for\nTop ARR Drivers for Sales/CS\n. Further requirements such as the\nintegration of themes\nneed to be implemented before this framework can be used to fully inform or replace tools such as the\nTop ARR tracker\n.\nIn some cases however, we may become aware of a feature which is particularly important to deliver on by a certain date. Examples of this could include an issue necessary to embark on a new GitLab rollout, a feature needed by a partner to launch an integration, or a method to import data from a service which is being discontinued. In these instances, the responsible PM can apply the\ncustomer\nor\ncustomer+\nlabel along with a\ndue date\nand initial\nmilestone\n. This set of labels can serve to indicate externally that the issue is particularly important, as well as a reminder for internal teams of its importance.\nIt is important to note that the\ncustomer\nand/or\ncustomer+\nlabel does not constitute a promise for the issue to be delivered in any given milestone or time frame.\nCommunity Considerations\nGitLab is open-source, encouraging and promoting a large ecosystem of contributors is critical to our success. When making prioritization decisions,\nit‚Äôs important to heavily weight activities which will encourage a stronger community of contributors. Some of those activities are:\nThe creation of small primitives that can be utilized and iterated on by community members\nThe building of integration points which can entice independent third parties to contribute an integration\nThe addition of tools or features which make the contribution experience easier\nProduct managers are not responsible for prioritizing contributions outside of their group. These contributions should be\nreviewed and merged swiftly\nallowing everyone\nto contribute, including non-product teams at GitLab.\nSaaS-First Framework\nThe\nSaaS-First product investment theme\nwill put us in a better position to support our customer base who is expected to accelerate adoption of SaaS products in the coming years. Features will also end up more secure, resilient, performant, and scalable for our self-managed customers if initially built to the expectations of SaaS. Therefore, it is important for PMs to understand and prioritize needs related to the SaaS business. When prioritizing SaaS related issues, we follow the same\nguidelines above\n. Within those guidelines there are a few areas that are especially important for PMs to focus on to ensure the success of our SaaS users.\nAvailability\nDowntime of GitLab.com has a material impact on our customers. From a 2014 report\nGartner estimates\nthat downtime costs companies on average ‚Äú$5,600 per minute, which extrapolates to well over $300K per hour.‚Äù Furthermore, SaaS downtime can severely disrupt the productivity of GitLab Inc since we rely heavily on GitLab.com to run our business. Finally, downtime can also lead to customer churn and damage to our reputation. Thus, it is crucial as a company we collectively work towards consistently maintaining our\n99.95% SLA on GitLab.com\n. There are a few things that PMs can do in partnership with their engineering team to help ensure overall Availability for GitLab.com.\nMake sure each new feature that gets built has full end-to-end test coverage.\nBefore rolling out a new service to support a major new feature launch, ensure that your team has gone through the\nreadiness review process\n. The effort and timing for a readiness review will vary depending on the complexity of the feature. It is recommended to start this process as early as practical when a significant number of the questions can be answered but not too late to further develop the feature based on learnings from the review.\nEnsure there are\napplication limits\nfor your product areas enabled on GitLab.com to reduce\nabuse vectors\n.\nInfradev\nThe\ninfradev process\nis used to triage issues requiring priority attention in support of SaaS availability and reliability. As part of the broader effort to responsibly manage tech debt across the company, PMs should partner with their EMs to identify and\nincorporate\ninfradev labeled issues of\nall severities\n. Note, issues labeled with a severity must be mitigated and resolved within\nspecific time frames\nto meet the SLO. As EMs are the DRIs for prioritizing infradev work, PMs should familiarize themselves with the\ninfradev process\nand\nBoard\n.\nOther resources PMs can consult to identify and prioritize Infradev issues include:\nError Budgets\nand\nassociated dashboards\nThe weekly triage report emailed to PMs\nnow includes infradev items\nto prevent missing SLOs.\nLargest Contentful Paint\nmetrics to monitor application performance.\nWhile not required, PMs are encouraged to listen in on\nIncident Management\ncalls for incidents related to their product areas to 1) build empathy with the SRE team by gaining insight into how they handle incidents 2) gain a better sense of the impact of the incident to their customer base, and 3) identify improvements to their product areas, whether technical or feature-related, that could have prevented the incident. PMs are not expected to be in the decision-making path on actions taken to resolve the incident. They are there to listen and learn rather than attempting to decide/influence the course of resolution. After incidents involving their product area, PMs are also encouraged to engage in the\nIncident Review\n, including attendance at the\nSync Incident Review\ncall if their incident is scheduled. PMs can periodically review incidents via the\nProduction Incident Board\nEnterprise Customer Needs\nEnterprise customers interested in adopting SaaS may have common hard requirements to be able to use the product. For example, large enterprises may need certain security related features, such as Audit Logs, available before their security team will agree to the use of GitLab.com. This can also be about more than just features; it may include how and where we apply features so they can administrate their GitLab instance at enterprise-scale. For instance, permission management and shared configurations are best implemented top-down first instead of Project-up to meet the requirements of large organizations who may have 100s or 1000s of projects and only a small handful of people to perform these system-wide administrative tasks. In order to encourage more Enterprise adoption of GitLab.com, prioritize these common ‚Äúhard-blockers‚Äù to adoption over ‚Äúnice to have‚Äù features. PMs can use customer interviews to hone in on which issues are hard blockers to adopting SaaS vs more ‚Äúnice to have‚Äù features that can be delivered later.\nTo track hard adoption blockers, use the ~‚ÄúGitLab.com Enterprise Readiness‚Äù label within the\nGitLab-Org\nand\nGitLab-com\ngroups.\nSaaS Features\nThere are a few special considerations when it comes to delivering features for SaaS. In order to achieve\nparity between SaaS and Self-managed installations\nPMs should prioritize efforts to eliminate existing feature gaps that exist\nacross the two installations\n. Additionally, new features should ship for SaaS and self-managed at the same time. Features should be implemented at the group level first, before being implemented at the instance level, so that they will work across\nboth self-managed and SaaS\n. Finally, in order for new features to be adequately monitored, they should include\nappropriate logging and observability\n, which makes troubleshooting much easier.\nWorking with Your Group\nAs a product manager, you will be assigned as the\nstable counterpart\nto a single\ngroup\n. At GitLab we abide by\nunique, and extremely beneficial guidelines when interacting with our groups. These include:\nProduct managers are the\nDRIs\nfor overall work prioritization but work collaboratively with their EM, UX, and QEM stable counterparts to ensure the right priorities from each\nwork type\nare considered as each has a different DRI. Product Managers are responsible for communicating overall priority.\nProduct Managers provide the what and when for feature work. Engineering (UX, Backend, Frontend, Quality) provide the how. This process is documented as part of our monthly\nproduct\n,\nengineering\nand\ncadence. We\ndefine stable counterparts for each of these functions\nwithin a group.\nAs an all-remote company, our crispness when it comes to responsibilities throughout the Product Delivery process was born out of necessity, but it pays untold dividends. Some of the benefits include:\nWe avoid the ambiguity in handoffs between teams\nWe avoid the confusion of many responsible individuals\nWe avoid the slowness of consensus driven decision making\nWe avoid the disruption of frequent context switching\nWe gain the rigidity to be consistent\nWe gain the freedom to iterate quickly\nFrom Prioritization to Execution\nAs described above, prioritization is a multi-faceted problem. In order to\ntranslate the priorities of any given group into action by our engineering\nteams, we need to be able to translate this multi-faceted problem into a flat\nlist of priorities for at least the next release cycle. Product Managers are\nresponsible for taking all these prioritization considerations\nand creating a\nclear, sequenced list of next priorities. This list should be represented as an\nissue board\nso that each team has a clear interface for making decisions about work. From\nthis list, Product Designers, Engineering Managers and Product Managers can work together to\ndetermine what items will be selected for work in the immediate future.\nThis does not mean that items will be addressed in strict order - Product Designers, EMs and PMs\nneed to be cognizant of dependencies, available skill sets, and the\nrock/pebbles/sand\nproblem of time management to make the best decisions about selecting work.\nReviewing Build Plans\nTogether with your Engineering Manager, you will have an important role in ensuring that the Build Plans defined for issues are created with iteration in mind. Iteration is highly valuable for the following reasons:\nIt can result in discovering ways to parallelize effort, resulting in less team WIP and increase throughput\nIt can result in shipping something of value during an iteration rather then delaying everything\nIt can re-risk unknown unknowns by bringing them to light sooner in the development process\nPrioritizing for Predictability\nAs a company we emphasize\nvelocity over predictability\n. As a product manager this means\nyou focus on prioritizing, not scheduling issues. Your engineering\nstable counterparts\nare\nresponsible for velocity and delivery. However, there are instances when there is desire for predictability, including:\nSecurity\n, Bugs and Infra priorities with SLOs\nCustomer Commitments\nInfrastructure projects with IACV driver impact or those that result in significant cost savings for gitlab.com\nInfrastructure projects with customer commitment or heavily upvoted should be given a priority indicative of other customer commitments\nVision or Direction items for a launch\nAs the DRI for\nmilestone prioritization\n, it is the Product Manager‚Äôs job to prioritize for predictability when it is needed. You should do so by ensuring you prioritize a deliverable, and its dependencies, so that it can reasonably be expected to be delivered by any committed dates. If there is time pressure to hit a date, the PM should also explore de-scoping the issue to meet the deadline, rather than pressuring engineering to move abnormally fast or cut corners.\nPrivate tools and dashboards for monitoring and KPI tracking\nThese information sources may be useful to help you prioritize.\nFeature usage\nEE usage\n: dev.gitlab.org account\nGrafana\n: Google gitlab.com account\nKibana\n: dev.gitlab.org account\nS3stat\n: GitLab 1Password account\nSentry\n: dev.gitlab.org account\nGlobal Prioritization\nIndividual product managers must consider, and advocate for\nglobal optimizations\nwithin the teams they are assigned to. If your assigned team requires expertise\n(remember\neveryone can\ncontribute)\noutside the team you should make all reasonable efforts to proceed forward\nwithout the hard dependency while advocating within the product management team\nfor increased prioritization of your now soft dependencies.\nExecution of a Global prioritization can take many forms.  This is worked with both Product and Engineering Leadership engaged.  Either party can activate a proposal in this area.  The options available and when to use them are the following:\nRapid action\n- use when reassignment isn‚Äôt necessary, the epic can have several issues assigned to multiple teams\nBorrow\n- use when a temporary assignment (less than 6 months) to a team is required to help resolve an issue/epic\nScope Reassignment\n- use when scope that will take longer than 6 months to deliver is a high priority and the team member reporting structure does not need to change to accomplish the effort.\nRealignment\n- use when a permanent assignment to a team is required to resolve ongoing challenges. This has the highest impact to team members and should be considered if other options cannot achieve the desired goal. We strive to hire team members in the groups that will need them most.\nWe have found the following methods less successful in ensuring completion of work that warrants global prioritization:\nWorking Groups\n- This method involves convening a group of individuals who maintain full-time responsibility to other\nProduct Groups\nand completing work as part of the working group structure. This method isn‚Äôt preferred for completing product improvements, instead it can be utilized to scope work, or determine plans for future product delivery.\nFan Out Prioritization - This method of prioritization involves communicating a global prioritization to a number of\nProduct Groups\nin an effort to ensure each individual product group‚Äôs PM prioritizes the work in the time frame you‚Äôd prefer.  This method requires significant coordination costs and puts delivery at risk due to the lack of central prioritization responsibility. In most cases it is preferred to execute a scope reassignment, borrow or realignment to complete the improvements.\nPlanning and Direction\nAs a PM, you must plan for the near term milestones (more detailed) as well as for the long\nterm strategy (more broad), and everything in between.\nWhile monthly milestone planning is done in GitLab, longer horizon planning (1-3 years) is done in direction pages.\nThis will enable you to efficiently communicate both internally and externally\nhow the team is planning to deliver on the\nproduct vision\n.\nManaging your Product Direction\nDocumenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. This is especially important to the members of your Product Group. Establishing a direction for stakeholders (including team members) to participate in, and contribute to ensures there is a concrete connection to ‚ÄúWhy‚Äù we are iterating and how it furthers\nGitLab‚Äôs mission\n. Here are some of those connections:\nImproving Product Performance Indicators - Usage represents market capture (whether paying or not), and the start of our dual fly-wheel. For existing customers that market capture in new capabilities also represents increased retention and because of the benefits of a single application - user satisfaction.\nImproving Competitiveness against\nalternative DevOps tools\n- Leads to increased Stages Per user, and sales as they add to our ‚ÄúIncrease Operational Efficiency‚Äù\nAs a Product Manager you can highlight these connections in:\nDirection Content and Overview Videos\nWeekly Meetings\nIndividual Issue Descriptions\nPlanning Issues\nKickoff Videos\nCustomer Discovery Interview Summaries\nCommunicating this connection requires a multi-channel approach. We should strive to\nshare\nand communication about the connection to our Direction warrants consistent reinforcement.\nSection and Stage Direction\nSection leaders are responsible for maintaining Direction pages that lay out the strategy and plan for their respective section and stages. The direction pages should include topics outlined in this\ntemplate\n.\nCategory Direction\nA category strategy is required which should outline various information about\nthe category including overall strategy, status, what‚Äôs next, and the competitive landscape.\nThe category strategy should be documented in a handbook page, which allows for version control\nof the category strategy as well as the ability to embed video assets.\nOne of the most important pieces of information to include in the category strategy is a tangible next step or MVC\nand a clear description of focus and out-of-focus/maintenance areas.\nYour category strategies should contain short paragraphs with lots of references to specific epics and issues.\nReferencing topics, instead of features is encouraged as it‚Äôs more stable over time.\nWe use this\ncategory strategy template\nas the outline for creating the handbook pages. If additional headings are needed you are empowered\nto create and populate them in your category strategy. You must keep these categories in sync with\ncategories.yml\nand for\nnew categories.\nCategory direction should be reviewed on a regular basis (at least monthly) by the responsible product\nmanager. To indicate the last time a category direction page was reviewed, please ensure pages\ninclude\nContent Last Reviewed: yyyy-mm-dd\nat the top of the category content. Update this date with every\nreview, even if other content on the direction page has not changed.\nYou should link to your category strategy from your stage strategy page.\nFor categories that have already shipped, and that have a marketing\nproduct page,\ncategories.yml\nshould link to the product page.\nInside of the\ncategories.yml\nfile there are dates assigned for either achieved or anticipated maturity achievement. These should be kept inline with communicated dates for achievement and updated as required.\nIf the category has developed a\nUX Roadmap\nwe recommend the product designer to create a merge request to incorporate UX Roadmap themes into the category direction page roadmap. Assign the MR to the PM for review and merge.\nNavigating cross-stage or cross-section direction pages\nIn some cases there may be direction pages that span multiple stages or sections. A direction page that summarizes the collective vision as well as all the contributors of that direction is critical to maintain transparency and adequate assignment of ownership.\nThere are several examples of these types of direction pages today:\nSoftware Supply Chain Security Direction\nAutoDevOps Direction\nMonorepo Product Direction\nVersioned Dependencies Direction\nCustomizable Dashboards Direction\nThe steps for creating and managing a cross-section or stage direction are:\nCreate a direction page merge request adding the direction page to the\nGitLab direction directory\nSelect the category change template in the merge request\nFollow the process for\ncategory changes\nAdd\nby adding an entry with the direction page link and the page DRI GitLab Handle.\nOnce approved,\n@\nall relevant product managers on the addition\nOnce the direction page has been added, there needs to be an assigned DRI for maintaining monthly updates for the page. It is the DRIs responsibility to ensure the shared direction page is regularly reviewed and is up to date. This requires cross-section / cross-stage collaboration from the DRI.\nWhat makes a Product Direction issue?\nYou should use the\n~direction\nlabel together with category and section labels to mark epics and issues that fall into the given direction.\nProduct Direction items (i.e., with the label) should be direction-level items that move the strategy forward meaningfully. This is up to the PM to set the bar for, but there should be a clear step forward with real user value.\nIt‚Äôs important to note here that your plan\nis not\nsimply a list of new features and innovation.\nThose are included for sure, but so are issues related to all of your\nsensing mechanisms\n.\nA category upgrade from minimal to viable or delivery of a top customer issue (for example) can contribute to your plan just as much as a brilliant new innovative feature can. It‚Äôs up to PMs to balance this through a coherent longer-term strategy.\nConversely, in a broad sense anything could move the plan forward in a general way.\nFinally, issues are the substance of your plan. Ensure you are applying the label to both revelant epics\nand\nits issues.\nCommunicating dates\nAs product managers, a core job is to set the correct expectations. We do this typically through discussing our direction and assigning issues to milestones. When you need to communicate specific dates, it‚Äôs recommended doing it with limited visibility internally or directly to the customers. When you need to communicate specific dates use\ncalendar year (CY) dates\n. Fiscal year (FY) does not translate well outside the company.\nAccordingly, the direction pages are expected to refer to specific issues only for the next 3-4 months. Everything beyond that should discuss the topic, not specific issues.\nPlanning is indispensable but adjust, iterate\nCreating a thoughtful direction for your section, stage, or category is a useful thought exercise that can help focus efforts, aid in prioritization, and get large groups of people on the same page. But beware of simply executing your long term plan. Our industry is incredibly dynamic, and we learn new things every day that can and should cause us to re-think our long term plans.\nDelivery follows discovery\nWe should ship what brings value to our customers, not what is easy to ship. Stay focused on creating value each and every milestone, and be quick to adjust your longer term direction as you learn more.\nWhen working on a larger theme, you should start with validating the end state knowing that it will change as you start shipping features and you learn more from actual usage.\nOnce the final vision is validated, you should work with your designer and engineering counterparts to break it down to the smallest possible iterations in order to ship value quickly.\nYou might still prefer to validate the first ‚Äúmilestone‚Äù before getting into delivery.\nIt‚Äôs totally fine to never ship the initial vision and refine the vision after every iteration. A feature not built is much more valuable than a feature that is built but never used.\nMaturity Plans\nFor each category, we recommend tracking the improvements required to advance to the next level of\nmaturity\n. You are welcome to track maturity plans either with\n~maturity::...\nlabels or maturity issues.\nMaturity plans are highly encouraged - but not required - for non-marketing categories.\nPlanning and OKRs\nProduct groups may choose to have\nOKRs\n.\nTo use them effectively, you should have plans for the next three months in terms of driving specific product metrics through discovery and delivery actions.\nYou should discuss the product metrics with your manager, your design and engineering counterparts and the actions to reach the results with your design and engineering counterparts.\nPlanning Issue for Milestone\nFor each milestone, the planning quads come together to scope and plan work for the group for the upcoming milestone. Planning begins asynchronously with the creation of the planning issue. The planning issue is the SSOT for communication and all resources that are needed to plan a successful milestone. There are many ways to achieve to plan a milestone that should be curated based on the needs of the team. Below are a few examples of planning issues from groups acorss R&D to aid you in creating one that works best for your team.\nVerify::Pipeline Execution\nVerify::Testing\nMonitor::Respond\nCreate::Code Review\nCreate::Editor\nData Stores::Database\nAs you adapt your own issue, it is recommended you apply the label\nplanning issue\nto aid in tracking and to incorporate our\nProduct Principles\ninto the process.\nManaging Upcoming Releases\nRefer to the\nProduct Development Timeline\nfor details on how Product works with UX and Engineering to schedule and work on\nissues in upcoming releases.\nPlanning for Future Releases\nThere are two non-exclusionary ways to plan and communicate work for future releases\nPlanning with boards\nAs a Product Manager you can maintain prioritization of your groups issues using\na fully prioritized issue board where the ordering of the issues reflects their priority.\nPlanning with milestones\nProduct Managers can assign milestones to issues to indicate when an issue is likely\nto be scheduled and worked on.\nStill, whether an issue can be delivered within a milestone is the decision of the engineering team.\nAs we consider more distant milestones, the certainty of\nthe scope of their assigned issues and their implementation timelines is increasingly\nvague. In particular, issues may be moved to another project, disassembled, or merged\nwith other issues over time as they bounce between different milestones.\nThe milestone of an issue can be changed at any moment. The current assigned milestone\nreflects the current planning, so if the plan changes, the milestone should be updated\nas soon as possible to reflect the changed plan. We make sure to do this ahead\nof starting work on a release. Capacity is discussed between the PMs and the\nengineering managers.\nThere are helper labels to signals these plans like\n~next::1-3 releases\nand its variants.\nSpecial milestones\nIn addition, we have two special milestones:\nBacklog\nand\nAwaiting further demand\n.\nProduct Managers assign these issues to milestones that they have reviewed and\nmake sense, but do not fit within the upcoming release milestones due to either\na lack of comparative urgency or because we have not yet seen enough user\ndemand to prioritize the item yet. The best way to demonstrate urgency on\neither of these items is to vote on them and, if possible, add comments\nexplaining your use case and why this is important to you.\nRecommendation for when to change ‚ÄòAwaiting further demand‚Äô:\nAlways focus on the overall value of the feature.\nDo you have a good understanding of the user problem?\nDo you have a good understanding of the impacted user base?\nWas the proposed solution validated?\nIssues with the ‚ÄòAwaiting further demand‚Äô label often mean poorly understood requests that require more information from our users and the market.\nOften public feedback only comes from a small percentage of people using or evaluating a feature or product.\nYou should always consider reaching out directly to our users to learn more about their use cases.\nRecommendation when changing a previously planned issue to\nBacklog\n:\nWhen moving\na previously planned issue to\nBacklog\n, especially one planned for within the next release or two,\nconsider the message that this may be sending to parties that were interested in this feature.\nIn some cases, they may have been depending or planning upon the issue to be delivered around\nthe assigned milestone, and with the change to\nBacklog\nthat is now unlikely to occur. In these instances,\nit is best to concisely explain the rationale behind the change in a comment, so\nthe community can understand and potentially respond with additional justification or\ncontext. It is also encouraged to move the issue to the\nBacklog\nas soon as it is clear that it will not be scheduled in the near future. This will help with understanding the change, as it will not seem like a last minute change.\nCommunicating clearly changing priorities might encourage the community to contribute the issue to GitLab.\nAgain, the milestone of an issue can be changed at any moment, including for both\nof these special milestones.\nShifting commitment mid-iteration\nFrom time to time, there may be circumstances that change the ability for a team\nto ship the features/issues they committed to at the beginning of the iteration.\nThese steps also apply when an issue is broken into multiple issues.\nWhen this happens, as a PM you must coordinate with your EM counterpart that\nthe impacted issues and their milestones\nare updated to reflect the new reality (for example, remove\ndeliverable\ntag, update\nmilestone\n, etc.). Additionally, notify your manager of the shift.\nUtilizing our design system to work autonomously\nOur\ndesign system\nprovides the means to work\nautonomously, without always needing UX insight, feedback and design. When problems can\nbe solved using an already documented paradigm, you don‚Äôt need to wait for UX\napproval to bring an issue to a reasonable state within a first iteration.\nIf lingering questions remain, subsequent iterations can address any shortcomings\nthe feature might have.\nAlways consider that with a dedicated product designer, it‚Äôs much faster and cheaper to iterate on a design than to re-implement it.\nAt the same time, not everything needs a design, and the design system is here to support your engineers and you in those cases.\nIteration Strategies\nIteration is a core value of GitLab, and product management has a central role to play in it. Iteration should be apparent as we deliver new features in MVCs, but it has implications for discovery too. As solution validation can move much faster than delivery, we should aim to validate features before building them. At this point, the feature validated is likely way bigger than an MVC if we would build it. We should pay special attention as product managers to still aim at iterative delivery after a bigger feature-set got validated, as delivered features provide the final validation. For example, once a direction is validated, we can start the delivery by documentation. As product managers we should aim to iterate as part of solution validation, and while delivering already validated solutions too.\nHere are several strategies for breaking features down into tiny changes that can be developed and released iteratively. This process will also help you critically evaluate if every facet of the design is actually necessary.\nWorkflow steps\nAs part of design and discovery, you likely created a minimal user journey that contains sequential steps a user is going to take to ‚Äúuse‚Äù the feature you are building. Each of these should be separated. You can further by asking yourself these questions:\nCan/is it desirable to perform this action via the UI or can we use a non-UI approach as a start (for example, CLI, API or .csv download of data)? This is a great starting point before adding UI components that achieve the same thing.\nWill there be different UI paths to perform the same task? Identify which are the most useful and which are the easiest to implement. Weight both factors when determining which to start with, and build from there.\nUser operations\nView, Create, Update, Remove and Delete are actions users take while interacting with software. These actions naturally provide lines along which you can split functionality into smaller features. By doing this, you prioritize the most important actions first. For example, users will likely need to be able to visually consume information before they can create, update, remove, or delete.\nFunctional criteria\nOften, the criteria for features are built on is implicit. It can help to use a test-driven development mindset where you write the tests and the outcomes you need from the software before building the software. Writing these tests can uncover the different criteria you need the development team to meet when building the new feature. Once you‚Äôve outlined these tests, you may be able to use them to continue to break down the feature into smaller parts for each test. Here are a few examples:\nWhat is the default behavior when there is no data (empty/null state)?\nAre there automatic actions or events that occur as part of your feature? Write them down, and identify those that can be done manually by the user before adding automation.\nWill users of different roles have unique experiences? Can you prioritize and build one of these experiences first? (for example: guest, user, developer, maintainer).\nDo users want to be able to customize their view of information? Define all of the customizations you want to offer, and build them one at a time (for example, toggle on/off, filter, sort, search).\nException & error cases\nSoftware often fails and can fail in different ways depending upon how it is architected. It is always best to provide the user with as much information as possible as to why something did not behave as expected. Creating and building different states to handle all possible errors and exceptions can easily be broken down into individual issues. Start by creating a generic error state to display when anything goes wrong, and then add on to handle different cases one by one. Remember to always make error messages\nuseful\n, and add additional error messages as you identify new error states.\nBreaking down the UI\nBreaking down a design into pieces that can be released iteratively is going to depend on what you are building. Here are a few helpful questions to guide that process:\nWhat components already exist that you can reuse to go faster?\nWhat constitutes ‚Äúextra styling‚Äù? Is there a way to display the information you need to display plainly and then add details later?\nDo you have lots of interactions in the design that make the UX lovable? Can you pull those out into separate issues and add them iteratively? (e.g. hover states, drag & drop, toggles, options to show/hide info, collapse/expand, etc)\nRefactors\nContinuously improving the software we write is important. If we don‚Äôt proactively work through\ntechnical debt\nand\nDeferred UX\nas we progress, we will end up spending more time and moving slower in the long run. However, it is important to strike the right balance between technical debt, deferred UX, and iteratively developing features. Here are some questions to consider:\nWhat is the impact if we do not refactor this code right now?\nCan we refactor some of it? Is a full re-write necessary?\nWhy do we need to use that new technology? (You may need to ask WHY multiple times to get to the root of the problem)\nSeparate announcement from launch\nFor large projects, consider separating the announcement from the actual feature launch. By doing so, it can create more freedom to iterate during the customer rollout. For example, you could announce in advance to give customers ample notice, and then roll it out to new customers first, then to existing Free customers, then to existing paid customers. Or you could do the opposite, and roll it out to customers first, before announcing broadly, to ensure the user experience is great before making a marketing splash.\nWhen considering dates for a product announcement or launch that may impact our Field team, consider the\nblockout restrictions\nrecognized by the Field team to ensure there won‚Äôt be any major disruption to the business near quarter end.\nFour phase transition\nSometimes the objective is to cut over from one experience, or one system, to another. When doing so, consider having four transition phases rather than a hard cut over. The phases are: 1) Old experience. 2) Run the old experience and new experience side-by-side, with the old experience the default, and the new experience is gradually rolled out to a subset of users. 3) Run them side-by-side, with the new experience the default for the majority, but the old experience is still available as a fallback in case of problems. 4) Deprecate the old experience and offer only the new experience. This strategy enables teams to have more flexibility and demonstrate more iteration in the rollout, with reduced risk.\nIterate to go faster\nWhen something is important, it is natural to want to launch it all at once to get to the end game faster. However, big bang style launches tend to need everything perfect before they can happen, which takes longer. With iteration you get feedback about all the things that aren‚Äôt a problem and are done enough. It‚Äôs better to launch in small increments, with a tight feedback loop, so that the majority of users have a great experience. This tends to speed up the overall timeline, rather than slow it down.\nRemote Design Sprint\nDesign Sprint\n, is a 5-day process used to answer critical business questions through design, prototyping and testing ideas with customers. This method allows us to\nreduce cycle time\nwhen coming up with a solution.\nAs an all-remote company we run\nRemote Design Sprints (RDS)\n. Check out our\nguidelines for running an RDS\nto determine if it‚Äôs the right approach for the problem at hand.\nSpikes\nIf you‚Äôre faced with a very large or complex problem, and it‚Äôs not clear how to most efficiently iterate towards the desired outcome, consider working with your engineers to build an experimental\nspike solution\n. This process is also sometimes referred to as a ‚Äútechnical evaluation.‚Äù When conducting a spike, the goal is write as little code within the shortest possible time frame to provide the level of information necessary the team needs to determine how to best proceed. At the end of the spike, code is usually discarded as the original goal was to learn, not build production-ready solutions. This process is particularly useful for major refactors and creating\narchitecture blueprints\n.\nFeedback issues\nWhen launching a feature that could be controversial or in which you want to get the audience‚Äôs feedback, it is recommended to create a feedback issue.\nTimeline:\nCreate the issue and include in the release post.\nIf announcing in Slack or doing dogfooding, include a link to the feedback issue\nLeave the issue open for at least 14 days after launch\nRespond and catalog the feedback into separate issues\nClose the issue once the time frame has passed and summarize the learnings from the feedback issue\nHere are some examples of feedback issues:\nWebIDE\nFonts\nmaster\n->\nmain\nFeedback issue considerations\nFeedback issues are intended to collect feedback from the wider community and users. In some cases, internal user will be posting on behalf of users and customers. As a result we need to consider the following:\nFeedback issues that are public cannot contain\ninformation\nA linked confidential issue for Field feedback can be used, if needed, to support the exchange of customer details and feedback\nLeverage\ninternal comments\nas needed if customer details are being shared\nOther best practice considerations\nConsider the following to improve iteration:\nSuccessfully iterating should mean you‚Äôre delivering value in the most efficient way possible. Sometimes, this can mean fixing an underlying technical issue prior to delivering a customer facing feature.\nWherever possible, consider reuse of components that already exist in the product. A great example of this was our approach to creating our Jira importer, which reused the Jira service integration. Reuse also aligns well with our efficiency value.\nAvoid technical dependencies across teams, if possible. This will increase the coordination cost of shipping and lead to a slow down in iteration. Break down silos if you notice them and consider implementing whatever you need yourself.\nConsider a quick POC that can be enabled for small portion of our user base, especially on GitLab.com. An example of this was search, where it was originally enabled just for a few groups to start, then slowly rolled out.\nGreat collaboration leads to great iteration. Amazing MVCs are rarely created simply by product managers, they often arise out of collaboration and discussion between product, engineering, design, quality, etc.\nKeep the initial problem statement front and center for the team. Tight problem statements enable the team to identify a tight, iterative solution.\nBring data to the table early to help the team triangulate on the smallest iteration that will have the largest impact in solving the identified problem.\nIf the project is multi-phase, consider iterative targets and guardrails to help the team focus on the next iterative milestone, rather than the final end state goal.\nIf your team needs to do repetitive work on behalf of customers, partners, or other GitLab teams, consider using a framework approach so that dependent teams can self-serve.\nCommunity participation\nEngaging directly with the community of users is an important part of a PM‚Äôs job. We\nencourage participation and active response alongside GitLab‚Äôs\nDeveloper Relations team\n.\nConferences\nA general list of conferences the company is participating in can be found on our\ncorporate marketing\nproject.\nThere are a few notable conferences that we would typically always send PMs to:\nKubeCon\nAtlassian Summit\nGitHub Universe\nDevOps Enterprise Summit\nGoogle Next\nAWS Reinvent\nVelocity\nIf you‚Äôre interested in attending, check out the issue in the corporate marketing\nsite and volunteer there, or reach out to your manager if you don‚Äôt see it listed\nyet.\nStakeholder Management\nWhat is a Stakeholder?\nA stakeholder, or stable counterpart, is someone that is outside of your direct team who meets one or more of the following:\nIs directly or indirectly impacted\nHas the ability to stop, delay, or cancel\nExamples of stakeholders include Leadership, Sales, Marketing, Customer Support, and Customer Success. You may have stakeholders in any area of GitLab depending on your focus area and the specific issue. Stakeholders are also present outside of GitLab, for example, when a feature is being developed for a specific customer or set of customers. If you‚Äôre not sure who the stakeholder is to collaborate with or keep informed, visit\nproduct sections, stages, groups, and categories\n.\nUpdated SSOT for stakeholder collaboration\nStakeholder collaboration and feedback is a critical competitive advantage here\nat GitLab. To ensure this is possible, and facilitate collaboration, you should\nmaintain an updated single source of truth (SSOT) of your stage direction, category\nstrategies, and plan, at all times. This equips anyone who wants to contribute to\nyour stage‚Äôs product direction with the latest information in order to effectively\ncollaborate. Some sections and teams use the\nscheduled Direction Update issue template\nto\nremind themselves of this task.\nActively and regularly reach out to stakeholders. Encourage them to view and collaborate\non these artifacts via these (non-exhaustive) opportunities:\nEngage with users in epics, issues, and merge requests on GitLab.com.\nMeet with customers directly.\nParticipate in the\n.\nTalk with GitLab team-members using GitLab.\nTalk with other PMs and\nProduct leadership\nto align your stage‚Äôs product direction with the rest of GitLab.\nHere is some guidance for new PMs to ensure your stage direction, category strategies and plan\nare up-to-date and visible to critical stakeholders:\nSeek feedback from the\nonce every six months.\nPresent your plan to your manager once a month.\nPresent the plan and stage/category strategies to your stable counterparts\nPresent your stage strategy and plan in a\ncustomer meeting\nonce every two weeks.\nPresent changes to your stage strategy, category strategies, and plan to your\nstage group weekly meeting once a month.\nWorking with customers\nCustomer meetings\nIt‚Äôs important to get direct feedback from our customers on things we‚Äôve built, are building, or should be building. Some opportunities to do that will arise during\nsales support meetings\n. As a PM you should also have dedicated\ncustomer discovery meetings\nor\ncontinuous interviews\nwith customers and prospects to better understand their pain points. As a PM you should facilitate opportunities for your engineering group to hear directly from customers too. Try to schedule customer meetings at times that are friendly to your group, invite them, and send them the recording and notes.  If you‚Äôre looking for other ways to engage with customers here is a video on\nfinding, preparing for, and navigating Customer Calls as a Product Manager at GitLab\n.\nSales support meetings\nBefore the meeting\n, ensure the Sales lead on the account has provided you with sufficient\nbackground documentation to ensure a customer doesn‚Äôt have to repeat information they‚Äôve already\nprovided to GitLab.\nDuring the meeting\n, spend most of your time listening and obtaining information.\nIt‚Äôs not your job to sell GitLab, but it should be obvious when it‚Äôs the time\nto give more information about our products.\nFor message consistency purposes, utilize the\nValue Drivers\nframework when posing questions and soliciting information.\nAfter the meeting:\nCreate an interview snapshot\nsummarizing the meeting in the\ngitlab-com/user-interviews\nproject.\nThis project is private so that detailed and unredacted feedback can be shared internally.\nLink the Google Doc where detailed notes were taken.\nCreate or update related issues to publicly document feedback.\nThe synthesis of feedback from multiple meetings should happen publicly in an epic or issue.\nCustomer discovery meetings\nCustomer discovery meetings aren‚Äôt UX Research. Target them to broad-based needs\nand plan tradeoff discussions, not specific feature review. There are\ntwo primary techniques for targeting those topics:\nTop Competitors\n- Identify the top 3 competitors in your categories and talk to\ncustomers using those competitor asking: What is missing to have you switch from\nX to us? We‚Äôre not aiming for feature parity with competitors, and we‚Äôre not\njust looking at the features competitors talk about, but we‚Äôre talking with\ncustomers about what they actually use, and ultimately what they\nneed\n.\nUser Need\n- Identify GitLab users from key customers of your group‚Äôs\ncategories and features. Solicit them for what they love about the features and\nask about their current pain points with both the features as well as the surrounding\nworkflows when using those components of GitLab?\nFollow the below guidance to prepare and conduct Customer Discovery Meetings:\nSet up a meeting:\nIdentify what you‚Äôre interested in learning and prepare appropriately\nYou can find information about how customers are using GitLab through Sales and version.gitlab.com. Sales and support should also be able to bring you into contact with customers\nThere is no formal internal process to schedule a customer meeting, however you can check\nthis template\nfor gathering questions from interested parties and for capturing the notes during the customer discovery meetings.\nDuring the meeting:\nSpend most of your time listening and documenting information\nListen for pain points, delightful moments and frustrations\nRead back and review what you‚Äôve written down with the customer to ensure you‚Äôve captured it correctly.\nAfter the meeting:\nDocument your findings. Create a folder (sharable only within GitLab) in\nGoogle Drive\nwith a structure as follows:\nCustomer Meetings\nCustomer Name A\n2020-04-01\nagenda (Google Doc)\nartifacts (folder for docs, images, etc.)\n2020-10-03\nCustomer Name B\nCompetitive Research\nVendors\nVendor A\nsummary (Google Doc, optional)\n2020-04-01\n2020-10-03\nVendor B\nProjects\nproduct-10132-code-scan-results (reference GitLab issue number)\nux-13840-selector-widget\nShare your findings with your fellow product managers and the sales and customer success account teams for the customer\nMake appropriate adjustments to category strategies, feature epics, and personas\nYou can find some additional guidance on conducting Customer Discovery Meetings from these resources:\nHow to Interview Your Customers\nEffective User Interviews\nSourcing customers\nPMs should also feel free to collect and evaluate customer feedback independently. Looking at\nexisting\nresearch can yield helpful\nthemes as well as potential customers to contact. You can use the following techniques to source customers directly:\nGitLab Solution Architects\nknow our customers the best, especially from a technical perspective.\nGitLab Issues\ncustomers will often comments on issues, especially when the problem described by the issue\nis a problem they are experiencing firsthand. The best strategy is to capture their feedback directly on the issue,\nhowever, there are times when this is not possible or simply doesn‚Äôt happen. You can find alternative contact info by clicking on the user‚Äôs handle to see their\nGitLab user page; this page often includes contact information such as Twitter or LinkedIn. Another option is to\ndirectly mention users in issues to engage async. In popular issues you can just leave a general comment that you‚Äôre looking for people to interview and many will often volunteer.\nCustomer Issues Prioritization Dashboards:\nThe\ncustomer issues prioritization framework\naggregates customer data with the issues and epics that they have requested. When\nviewing the dashboard\n, double click on the issue or epic of interest within the ‚Äúpriority score by noteable‚Äù table then scroll down to ‚ÄúQA Table - User request weighting by customer‚Äù to see the specific customers that are interested in the issue or epic.\nGitLab.com Broadcast Messages\nBroadcast Messaging is a great tool for acquiring customer feedback from within the product. You can leverage\nthis workflow\nto use broadcast messaging.\nGitLab Sales and Customer Success\nYou can ask for help in\nSlack customer success channel\nor join the Field Sales Team Call and the All CS Team Call to present a specific request via the Zoom call.\nCustomer Success Managers (CSM)\nIf a customer has a dedicated CSM, they may also have a regular meeting with a CSM. These meetings are a great opportunity to spend 15 minutes getting high-level feedback on an idea or problem. In Salesforce, CSMs are listed in the Customer Success section in the customer‚Äôs account information. CSMs are also very familiar with the feature requests submitted by their customers and can help identify customers that may be interested in the feature you are working on.\nZendesk\nis a great tool to find users who are actively making use of a feature and either came across a\nquestion or an issue. Users who‚Äôve had recent challenges using the product really appreciate PMs taking the time to learn from\ntheir experience. This establishes that we are willing to listen to users, even if they are not having a great experience.\nThis is also a great opportunity to discuss the roadmap and provide context so that users understand what we are going to improve.\nThe best way to request a chat is through the support ticket; however, you can also click\non the user that initiated the interaction and their contact information will display on the left hand side panel.\nIf you don‚Äôt have a Zendesk account, see\nhow to request a light agent Zendesk account\n.\nYou can use\nZendesk‚Äôs trigger feature\nto receive email alerts when specific keywords relevant\nto your product area are mentioned in a support ticket. Additionally, it is possible to create a simple dashboard that lists all the currently active support tickets that match the trigger. Reach out\nin #support_escalations to receive some help in setting this up.\nSocial Media\ncan also be effective. If your personal account has a reasonable number of connections/followers, you can post your desire to connect with users on a specific question directly. When posting, remember to include the subject you want to discuss as well as how people can reach out. You can also reach out to the\n#social-media\nchannel to have your tweet retweeted by the @gitlab account.\nIf you want to reach a wider audience, consider asking a community advocate to re-post using the official GitLab account for the relevant platform.\nYou can reach advocates on the\n#community-advocates\nSlack channel.\nYou can also reach out to authors of articles related to tech your team is working on, via various publications such as\nMedium\n. A clear and brief email\nvia the publication website or LinkedIn is a good way to engage.\nYou‚Äôre able to request a\nLinkedIn Recruiter license\n. This\nUnfiltered video\nand\nslide deck\nprovide an overview on how to use LinkedIn Recruiter to source participants for your study.\nIf you‚Äôve tried these tactics and are still having challenges getting the customer feedback you need, connect with your manager for support and\nthen consider leveraging the\nUX Research team\n.\nAdditionally, you can connect with Product Operations directly or by attending Product Operations Office Hours for troubleshooting support.\nNon-users\nare often more important than GitLab users. They can provide the necessary critical view to come up with\nideas that might turn them into GitLab users in the end. The best non-users are the ones who don‚Äôt even plan on switching\nto GitLab. You can reach these people at local meetups, conferences or online groups like, Hacker News. In every such case,\nyou should not try to interview the user on spot, instead organize a separate meeting where nobody will be distracted, and\nboth of you can arrive prepared.\nCustomer Advisory Board meetings\nOne specific, recurring opportunity to get direct feedback from highly engaged customers\nis the\nGitLab DevOps Customer Advisory Board\n.\nYou may be asked by the CAB to present your stage at these meetings. Here are\nsome guidelines when doing so:\nYou may be asked by the CAB to present your stage or a specific product offering at these meetings.  Here are some guidelines for presenting:\nProduct Focused Highlights: All presentation materials should be focused on products we plan to launch or evaluating products we have available to customers.\nEmphasize Dialogue over Monologue: Structure your presentation to encourage meaningful two-ways discussions.\nPrepare Targeted Questions: Develop 2-3 specific, through provoking questions to engage members in conversation. These questions should be focused on presentation, strategic decisions GitLab is currently grappling in your stage that you would like to gather customer feedback on, or a question related directly to customer workflows.\nConnect to Previous Feedback: Reference previous feedback you have received from advisory meetings in the past. This will help illustrate to CAB members the value of their time and that GitLab takes their recommendations into consideration.\nPrompt Follow Through: Document key insights and actions items during your session.\nBe Prepared: Be sure to prepare for the meeting ahead of time independently.\nPlease review\nGitLab Product Customer Advisory Board Page\nfor more details.\nWorking with (customer) feature proposals\nWhen someone requests a particular feature, it is the duty of the PM to investigate\nand understand the need for this change. This means you focus on what is the problem\nthat the proposed solution tries to solve. Doing this often allows you to find that:\nAn existing solution already exists within GitLab\nOr: a better or more elegant solution exists\nDo not take a feature request and just implement it.\nIt is your job to find the underlying use case and address that in an elegant way that is orthogonal to existing functionality.\nThis prevents us from building an overly complex application.\nTake this into consideration even when getting feedback or requests from colleagues.\nAs a PM you are ultimately responsible for the quality of the solutions you ship,\nmake sure they‚Äôre the (first iteration of the) best possible solution.\nCompetition channel\nWhen someone posts information in the\n#competition\nchannel that warrants\ncreating an issue and/or a change in\nfeatures.yml\n, follow this\nprocedure:\nCreate a thread on the item by posting\nI'm documenting this\nEither do the following yourself, or\nlink\nto this paragraph for the person picking this up to follow\nIf needed: create an issue\nAdd the item to the\nfeatures.yml\nIf GitLab does not have this feature yet, link to the issue you created\nFinish the thread with a link to the commit and issue\nReaching out to specific users or accounts based on GitLab usage\nYou may want to interview a specific account because they are exhibiting atypical usage patterns or behaviors. In this case,\nrequest Support to contact GitLab.com user(s) on your behalf\n.\nIf it is the weekend, and the contact request is urgent as a result of an action that might affect a users‚Äô usage of GitLab,\npage the CMOC\nAssessing opportunities\nOpportunity canvas\nOne of the primary artifacts of the validation track is the Opportunity Canvas. The Opportunity Canvas introduces a lean product management philosophy to the validation track by quickly iterating on level of confidence, hypotheses, and lessons learned as the document evolves. At completion, it serves as a concise set of knowledge which can be transferred to the relevant issues and epics to aid in understanding user pain, business value, the constraints to a particular problem statement and rationale for prioritization. Just as valuable as a validated Opportunity Canvas is an invalidated one. The tool is also useful for quickly invalidating ideas. A quickly invalidated problem is often\nmore valuable\nthan a slowly validated one.\nPlease note that an opportunity canvas is not required for product functionality or problems that already have well-defined\njobs to be done (JTBD)\n. For situations where we already have a strong understanding of the problem and its solution, it is appropriate to skip the opportunity canvas and proceed directly to solution validation. It might be worth using the opportunity canvas template for existing features in the product to test assumptions and current thinking, although not required.\nReviews\nReviewing opportunity canvases with leadership provides you with an opportunity to get early feedback and alignment on your ideas. To schedule a review:\nContact the CProdO EBA to schedule a 25 minute meeting. Let the EBA know if you are scheduling a comparative or singular Opportunity Review\nThe VCProdO and VP of UX should be included as required attendees.\nThe Product Section Leader, Direct Manager, UX counterpart and Product Operations should be included as optional attendees.\nComplete the Opportunity Canvas(es) at least one business day before the meeting to give attendees an opportunity to review content.¬† The attendees will review the canvas(es) in advance and will add questions directly to the canvas document(s).\nWhen the Opportunity Canvas(es) is complete, inform the meeting participants by tagging them in a post in Slack #product. Include a direct link to the canvases.\nDuring the review, feel free to present anything you‚Äôd like. For comparative reviews it‚Äôs helpful to start with your proposal for which Opportunity to pursue first. For singular reviews it‚Äôs fine to go straight to Q&A since the attendees should have reviewed the canvas in advance.\nReferences\n:\nOpportunity Canvas Template\nCompleted Opportunity Canvas Reviews\nOpportunity Canvas YouTube Playlist\nExample Opportunity Canvas - Fine Grained Access Control (GoogleDoc)\nExample Opportunity Canvas - Error Tracking (Mural)\nOpportunity canvas lite\nOpportunity Canvases are a great assessment for ill-defined or poorly understood problems our customers are experiencing that may result in net new features. As noted previously, opportunity canvases are helpful for existing features, except they are tailored for new feature development which is where the\nProduct-Opportunity-Opportunity-Canvas-Lite\nissue template delivers. This template offers a lightweight approach to quickly identify the customer problem, business case, and feature plan in a convenient issue. The steps to use the template are outlined in the\nInstructions\nsection and for clarity, one would create this issue template for an existing feature they are interested in expanding. For example, this template would be great to use if you are evaluating the opportunity to add a third or fourth iteration to an MVC. This issue should leverage already available resources and be used to collate details to then surface to leadership for review. Once you fill out the template, you will assign to the parties identified in the issue and you can always post in the\n#product\nchannel for visibility.\nAnalyst engagement\nPart of being a product manager at GitLab is maintaining engagement with\nanalysts, culminating in various analyst reports that are applicable to your\nstage. In order to ensure that this is successful and our products are rated\ncorrectly in the analyst scorecards, we follow a few guidelines:\nSpend time checking in with the analysts for your area so they are familiar with our story and features earlier, and so we can get earlier feedback. This will ensure better alignment of the product and the way we talk about it will already be in place when review time comes. Remember, analysts maintain a deep understanding of the markets they cover, and your relationship will be better if it is bi-directional. Inquire with analysts when you have questions about market trends, growth rates, buyer behavior, competitors, or just want to bounce ideas off of an expert.\nMake paying attention to analyst requests a priority, bringing in whoever you need to ensure they are successful. If you have a clear benefit from having executives participate, ask. If you need more resources to ensure something is a success, get them. These reports are not a ‚Äúnice to have‚Äù, ad-hoc activity, but an important part of ensuring your product areas are successful.\nWhen responding to the analyst request, challenge yourself to find a way to honestly say ‚Äúyes‚Äù and paint the product in the best light possible. Often, at first glance if we think we don‚Äôt support a feature or capability, with a bit of reflection and thought you can adapt our existing features to solve the problem at hand. This goes much smoother if you follow the first point and spend ongoing time with your analyst partners.\nPerform retrospectives after the analyst report is finalized to ensure we‚Äôre learning from and sharing the results of how we can do better.\nIt‚Äôs important to be closely connected with your product marketing partner,\nsince they own the overall engagement. That said, product has a key role to play\nand should be in the driver‚Äôs seat for putting your stage‚Äôs best foot forward in\nthe responses/discussions.\nEngage with internal customers\nProduct managers should take advantage of the internal customers that their\nstage may have, and use them to better understand what they are really using,\nwhat they need and what they think is important to have in order to replace\nother products and use GitLab for all their flows.\nWe want to meet with our internal customers on a regular basis, setting up\nrecurring calls (e.g., every two weeks) and to invite them to share their\nfeedback.\nThis is a mutual collaboration, so we also want to keep them up to date with the\nnew features that we release, and help them to adopt all our own features.\nUSAT responder outreach\nEach quarter, we reach out to\nUser Satisfaction (USAT)\nsurvey responders who opted-in to speak with us. This is a fantastic opportunity to build bridges with end users and for Product Managers and Product Designers to get direct feedback for their specific product area. If a user has taken the time to share a verbatim with us and offered to have a conversation, they deserve to be followed up with - especially if that user is dissatisfied with GitLab.\nWhen we speak to users directly during this workflow, we must be mindful of\nProduct Legal guidance\nand the\nSAFE framework\n, just as we would be with any other documentation or communication within Product.\nOverall process\nUX Researcher DRI opens a Responder Outreach issue and notifies Product team members in the comments that the issue is ready.\nProduct team members go through the list of USAT responders who have agreed to a follow up conversation. Those team members either sign up for outreach or tag in Product Managers or Product Designers where appropriate.\nProduct team members then view the sheet and confirm who they want to talk with.\nProduct team members reach out to users and schedule interviews.\nProduct team members add notes and video recordings from the interviews to the\ncolumn in this\nDovetail project\n.\nProduct team members mark which users they interviewed, the link to the session recording, and include any additional notes about the session in the follow up users sheet.\nAs Product team members create or continue to work on issues related to USAT follow up interviews, they should the following label (\nUSAT::Responder Outreach\n) to help the UX Research team track the impact of those interviews.\nNote:\nGitLab Customer Success Managers can also follow the process above, so please be mindful to coordinate with them if they reach out or if they‚Äôve already signed up to speak with a user. Users should never be contacted by more than one GitLab team member. Users should never be contacted more than twice if they do not respond to an outreach email.\nInstructions for product leaders\nLook at the\nUSAT Follow Up Users\nGoogle Sheet that will be shared with you in an issue. Identify any users you think a Product Manager or Product Designer from your group would be interested in speaking to. Assign the specific Product Manager or Product Designer to reach out to that user by putting their name in the appropriate column. This will also serve as a ‚Äúhold‚Äù on the user and if others are interested they will need to coordinate with that team member.\nIf you think another Product Manager or Product Designer in your group or another group would be interested in speaking to the same user, consider notifying that team member for the sake of efficiency.\nIf you‚Äôre interested in having one of your Product Managers or Product Designers speak with a user that has already been ‚Äúclaimed‚Äù by another GitLab team member, have your Product Manager or Product Designer reach out to that team member so they can coordinate a joint conversation.\nWe need to be mindful of our users‚Äô time and should limit this outreach to a single conversation rather than successive conversations.\nInstructions for Product Managers and Product Designers\nAnother GitLab team member may put your name next to users they felt were relevant for you to speak with.\nIf you are unable or unwilling to speak with the user, please either remove your name or find a replacement.\nIf you see other users that have not been assigned to another team member and you feel may be relevant to speak with, assign that user to yourself.\nIf you see other users that have been assigned to another team member, reach out to that team member and coordinate a joint conversation. It is very important you do not reach out to users that have been assigned to other team member as we want to be mindful of our users time and not risk negative sentiment due to over-communication. We are limiting these conversations to one per user for these reasons.\nProcess for reaching out to users\nCalendly is the best method for scheduling users.\nSet up your free Calendly account\nif you haven‚Äôt done so. Add details to the invite description describing yourself and the conversation purpose. Also add your personal Zoom link, either via connecting your Zoom account or pasting in your personal Zoom URL.\nYou‚Äôll need to add three extra questions to the invite form in order to ask for consent to record, example below. Please use these questions as written in the example as they closely mirror the content that has been validated by the UX Research Team.\nDraft an email that you‚Äôll send to users. Example copy is below. You can re-phrase things as you wish but make sure you still cover the same points as the example.\nBE ON TIME TO YOUR CALL\n. Better yet, be 2 minutes early. Be ready to coach people through getting Zoom to work properly. Make sure everyone on the call introduces themselves.\nIf people have agreed to recording, still ask them once again if it‚Äôs OK if you record before turning it on. Obviously, do not record people who did not give consent.\nSee our training materials on\nfacilitating user interviews\n.\nExample email copy\n:\nHello,\nMy name is X and I‚Äôm the Product Manager/Designer for X at GitLab. Thank you for giving us the opportunity to follow up on your response to our recent survey.\nI would be very interested in speaking further about some of the points you raised in your survey response. Would you be willing to do a 30 minute Zoom call to give us some more detailed feedback on your experience using GitLab? You‚Äôd be able to schedule the call at a time convenient to you.\nSchedule a time for the call using this link:\nhttps://calendly.com/yourname/30min\nThank you for your feedback and let me know if you have any questions.\nBest,\nYour name\nCopy for three extra questions in Calendly invite\n:\nTo make sure we correctly represent what you say in any followup issues or discussions, we would like to record this conversation. Please indicate if you give permission to record this conversation.\nYes, you may record our conversation.\nNo, you MAY NOT record our conversation.\nAt GitLab, we value transparency. We would love to share the recording of conversation publicly on GitLab. Please indicate whether you give your permission for the recording to be shared on GitLab.\nYes, you may share the recording publicly on GitLab.\nNo, you MAY NOT share the recording publicly on GitLab.\nI agree that by participating in this, and any future, research activities with GitLab, GitLab B.V. will retain all intellectual property rights in any suggestions, ideas, enhancement requests, feedback, or other recommendations I provide which are hereby assigned to GitLab B.V.\nYes\nNo\nAfter the call\nIf multiple GitLab employees are on the call, it can be beneficial to debrief immediately afterwards.\nCollect all notes that were taken and Zoom recording from the interview and add them to the\ncolumn in this\nDovetail project\n.\nIf you told the user you‚Äôd follow up on anything or promised to send them further information, make sure you do so, ideally within two business days.\nGo back to the spreadsheet and mark that you spoke to a user in the\nStatus\ncolumn and add a link to the recording in Dovetail.\nIf you create any epics/issues to address feedback gathered in the calls, add the label\nUSAT::Responder Outreach\nand link them to the corresponding USAT responder outreach issue from that quarter.\nNote: It‚Äôs important to tag your USAT related issues to help tracking/reporting such as the\nimprovement slides\nin Product Key Reviews.\nCost profile and user experience\nEvery Product Manager is responsible for the user experience and cost profile of their product area regardless of how the application is hosted (self-managed or gitlab.com). If a feature is unsustainable from a cost standpoint, that can erode the margins of our SaaS business while driving up the total cost of ownership for self-managed customers. If a feature is slow, it can impact the satisfaction of our users and potentially others on the platform.\nThere are a few questions a Product Manager should ask when thinking about their features:\nWhat are the costs associated with my product area? What is the impact on the margin for each tier of GitLab.com?\nConsider network, compute, and storage costs\nAre there tools in place to help GitLab, Inc and self-managed admins optimize the cost footprint for running GitLab (e.g. node rebalancing, transitioning objects to less costly storage classes, garbage collection capabilities)\nAre there features and default settings that help users stay within their\nCI and Storage limits\n?\nAre there configurable\napplication limits\nin place for admins to enhance the availability and performance of GitLab and reduce\nabuse vectors\n?\nWhat is the experience of users when interacting with these features on GitLab.com? Is it fast and enjoyable?\nThese items do not all need to be implemented in an MVC, though potential costs and application limits should be considered for deployment on GitLab.com.\nProduct Managers should also regularly assess the performance and cost of features and experiences that they are incrementally improving. While the MVC of the feature may be efficient, a few iterations may increase the cost profile.\nTools to understand operational costs\nThere are a few different tools PM‚Äôs can utilize to understand the operational costs of their features. Some of these are maintained by Infrastructure, based on the operational data of GitLab.com. Others tools, like service ping, can be utilized to better understand the costs of our self-managed users. Ultimately, each product group is responsible for ensuring they have the data needed to understand and optimize costs.\nUseful Dashboards to Visualize Infrastructure Costs:\nAccess to Billing Console\n(\nAccess Request\nrequired)\nService ping\nYour Engineering Manager, #infrafin on Slack, and the broader GitLab team\nLinks to learn more about infrastructure cost management initiatives\nInfrafin Board Workflow\nInfrafin Board by Group\nInfrafin Board by Savings Amount\nInfrafin Cost Management Handbook Page\nTools to understand end user experience\nSnowplow data\non GitLab.com\nQuarterly USAT and SUS surveys\nPage load performance\nLife Support PM Expectations\nWhen performing the role of Life Support PM only the following are expected:\nManagement of next three milestones\nAttend group meetings or async discussion channels\nProvide prioritization for upcoming milestones\nMVC definition for upcoming milestones\nIncrease fidelity of scheduled issues via group discussion\nEnsure features delivered by the group are represented in the release post\nSome discouraged responsibilities:\nLong-term MVC definition\nOne year plan\nCategory Strategy updates\nDirection page updates\nAnalyst engagements\nCAB presentations\nBuild vs ‚ÄúBuy‚Äù\nAs a Product Manager you may need to make a decision on whether GitLab should engineer a solution to a particular problem, or use off the shelf software to address the need.\nFirst, consider whether our users share a similar need and if it‚Äôs part of GitLab‚Äôs scope. If so, strongly consider\nbuilding as a feature in GitLab\n:\nEvaluate open source options\nto utilize.\nIf time to market is an issue, a\nglobal optimization issue\nmay also be opened to assist with prioritization.\nFor a potential acquisition, follow the\nacquisition process\n.\nIf the need is specific to GitLab, and will not be built into the product, consider a few guidelines:\nNecessity: Does this\nactually\nneed to be solved now? If not, consider proceeding without and gathering data to make an informed decision later.\nOpportunity cost: Is the need core to GitLab‚Äôs business? Would work on other features return more value to the company and our users?\nCost: How much are off the shelf solutions? How much is it to build, given the expertise in-house and opportunity cost?\nTime to market: Is there time to engineer the solution in-house?\nIf after evaluating these considerations buying a commercial solution is the best path forward:\nConsider\nwho owns the outcome\n, as the spend will be allocated to their department. Get their approval on the proposed plan.\nHave the owning party\nopen a finance issue\nusing the\nvendor_contracts\ntemplate, ensure the justification above is included in the request.\nEvaluating Open Source Software\nWhen considering open source software in build vs. ‚Äúbuy‚Äù decisions we utilize the following general criteria to decide whether to integrate a piece of software:\nCompatibility\n- Does the software utilize a\ncompatible open source license\n?\nViability\n- Is the software, in its current state, viable for the use case in question?\nVelocity\n- Is there a high rate of iteration with the software? Are new features or enhancements proposed and completed quickly? Are security patches applied regularly?\nCommunity\n- Is there a diverse community contributing to the software? Is the software governed by broader communities or by a singular corporate entity? Do maintainers regularly address feedback from the community?\nAnalytics instrumentation guide\nPlease see\nAnalytics Instrumentation Guide\nPost Launch Instrumentation Guide\nGoal:\nIncrease product instrumentation across our offerings to deliver greater product insights. There is a need to retroactively evaluate what features have been instrumented and need instrumentation from past feature launches. Post launch implementation will allow us to gather insights and allow better visibility into feature usage + adoption that may not currently be captured.\nTasks:\nIssue Request\nFollowing the\nProduct Data Insights handbook\n, create an issue focused on instrumentation of products at a category level\nusing the Post-Launch Instrumentation template\n.\nAssign the issue to your Product Data Insights counterpart. Carolyn Braza (\n@cbraza\n) will automatically be added for visibility.\nAlignment\nPM/PDI: Once all stakeholders have been added to the issue, Product Data Insights team will set time with the PM counterpart to align on:\nGoals\nPriorities\nMilestones\nTPgM may assist in implementation of planning documentation.\nCategory Inventory & Instrumentation Mapping\nPM/PDI: Work together to outline a category inventory using\nthis spreadsheet template\n.\nCategory level implementation should be prioritized by most utilized features and the areas we believe have the largest impact on the business.\nFrom there, PM and Product Data Insights counterparts will utilize labels outlined here in step 3 for markers of implementation status.\nThe PM will lead mapping of instrumentation at a category level, in close partnership with the Product Data Insights counterpart.\nFor any metric or event that has been identified to contribute to a categories instrumentation the correct\nproduct_category\nshould be set in the definition file.\nAudit & Review\nPM/PDI: will audit implementation/review implementation to quality check and ensure accuracy async. TPgM may assist in QA.\nUpdate Categories yaml file\nPM: Update the categories.yml file with the applicable implementation status (see below) Utilizing the categories.yml file, the Product Data Insights team will create a Tableau dashboard to track implementation at a category level over time.\nComplete -  Instrumentation complete and satisfactory\nIncomplete - Some instrumentation, but not complete\nNone - No instrumentation - instrumentation needed\nNot needed - Instrumentation not needed\nAnalytics Instrumentation\nPM/PDI: Once category instrumentation audit has been completed. For categories marked as either red (needing implementation) or yellow (some instrumentation, not complete),\nPM/EM: will create an instrumentation issue with the label\nanalytics instrumentation\nand utilizing the\nusage data instrumentation template\n.\nPage load performance metrics\nIn order to better understand the perceived performance of GitLab, there is a synthetic page load performance testing framework available based on\nsitespeed.io\n.\nGrafana dashboard\nis available for each stage, tracking the\nLargest Contentful Paint\nand first/last visual change times. These metrics together provide high-level insight into the experience our users have when interacting with these pages.\nAdding additional pages to performance testing\nThe Grafana dashboards are managed using\ngrafonnet\n, making it easy to add additional pages and charts.\nTesting a new set of pages requires just 2 steps:\nAdd the desired URL‚Äôs to the sitespeed\nunauthenticated\nor\nauthenticated\ntesting list. Add a new line with the URL, then a space, and an alias of the form\n[Group]_[Feature]_[Detail]\n. The alias needs to be one word, an example MR is\nhere\n. Note the authenticated user account does not have any special permissions, it is simply logged in.\nOpen the relevant stage‚Äôs\ngrafonnet dashboard file\n. Find the section corresponding to the desired group, and add an additional call to\nproductCommon.pageDetail\n. The call arguments are\nChart Title\n,\nAlias\nfrom above, and the tested\n. Ensure the JSON formatting is correct, the easiest way is to simply copy/paste from another line. A sample MR is available\nhere\n.\nAssign both MR‚Äôs to a maintainer. After they are merged, the stage‚Äôs Grafana dashboard will be automatically updated. A\nvideo walkthrough\nis available as well.\nAnalytics Instrumentation Guide\nAnalytics Instrumentation Overview At GitLab, we collect product usage data for the purpose of ‚Ä¶\nContinuous Interviews\nThe purpose of continuous interviews and how to set them up\nCross Functional Prioritization\nOverview The Cross-Functional Prioritization framework exists to give everyone a voice within the ‚Ä¶\nCustomer Issues Prioritization Framework\nContext The Customer Prioritization Framework was developed by the Issue Prioritization Framework ‚Ä¶\nDogfooding for R&D\nDogfood everything The best way to understand how GitLab works is to use it for as much of your job ‚Ä¶\nGitLab Early Access Program Direction\nAlignment & vision of the GitLab Early Access Program\nMaking GIFs\nAnimated GIFs are an awesome way of showing of features that need a little more than just an image, ‚Ä¶\nNew Product Introduction (NPI) Process\nHow to launch a product or service at GitLab.\nProduct Customer Advisory Board\nThis is the process for quarterly customer advisory board meeting, specific to the Product / R&D Org. This process is revisited on an annual basis and aligns with the [broader company process focused on customer advocacy](/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/customer-advocacy/).\nProduct Management Tips and Tricks\nOverview This section of the handbook is a collection of product management processes that can ‚Ä¶\nProduct Manager SAFE Guidance\nOverview This guide for GitLab Product Managers clarifies and expands on the Regulation FD Training. ‚Ä¶\nProduct Milestones\nWhen planning, Product Managers plan to GitLab milestones. Here is the process for creating and ‚Ä¶\nProduct Procedures\nOverview This section of the handbook is a collection of processes that a required to be followed ‚Ä¶\nProduct Team Board Meeting Prep\nThis is the process for quarterly board meeting prep, specific to the Product / R&D Org. This process is revisited on a quarterly basis and aligns with the [broader company process](/handbook/board-meetings/#board-and-committee-composition). Feedback always welcome!\nSensing Mechanisms\nWhat are sensing mechanisms? Our ability to iterate quickly is a measure of our efficiency, but our ‚Ä¶\nTiering Strategy & Guidance for Product Managers\nTiering strategy Free is targeted at individual contributor developers. It is a ‚Ä¶\nUsing GitLab to plan work\nWe use GitLab to document product strategy and manage our backlog. A couple of concepts that are key ‚Ä¶\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 20226}
{"doc_id": "6cf161a65d0dc3e4", "url": "https://handbook.gitlab.com/handbook/engineering", "title": "Engineering | The GitLab Handbook", "text": "The Handbook\nEngineering\nThe GitLab Product team\nEngineering Direction\nGitLab has a Three-Year Strategy, and we‚Äôre excited to see every member of the Engineering division contribute to achieving it. Whether you‚Äôre creating something new or improving something that already exists, we want you to feel empowered to bring your best ideas for influencing the product direction through improved scalability, usability, resilience, and system architectures. And when you feel like you need to expand your knowledge in a particular area, know that you‚Äôre supported in having the resources to learn and improve your skills.\nOur focus is to make sure that GitLab is enterprise grade in all its abilities and to support the AI efforts required to successfully launch AI features to General Availability.\nMaking sure that GitLab is enterprise grade involves several teams collaborating on improving our disaster recovery and support offerings through ongoing work with GitLab Dedicated and Cells infrastructure. Our goal here is improved availability and service recovery.\nEngineering Culture\nEngineering culture at GitLab encompasses the processes, workflows, principles\nand priorities that all stem from our\n.\nAll these things continuously strengthen our engineering craftsmanship and\nallow engineers to achieve engineering excellence, while growing and having a\nsignificant, positive impact on the product, people, and the company as a whole.\nOur engineering culture is primarily being carried and evolves through\nknowledge sharing and collaboration. Everyone can be part of this process\nbecause at GitLab everyone can contribute.\nEngineering Excellence\nEngineering excellence can be defined as an intrinsic motivation to improve\nengineering efficiency, software quality, and deliver better results while\nbuilding software products. Engineering excellence is being fueled by a strong\nengineering culture combined with a mission: to build better software that\nallows everyone to contribute.\nEngineering Initiatives\nEngineering is the primary advocate for the performance, availability, and security of the GitLab project. Product Management prioritizes 60% of engineering time, so everyone in the engineering function should participate in the Product Management\nprioritization process\nto ensure that our project stays ahead in these areas. Engineering prioritizes 40% of time on initiatives that improve the product, underlying platform, and foundational technologies we use.\nWork in the 40% time budget should be coordinated and prioritized by the Engineering Manager of a team. Use the label\nEngineering Time\nfor issues and MRs that are done as part of it so we can follow the work and the results across the engineering division.\nContributing to broad engineering initiatives and participating in working group-related tasks.\nReview fixes from our support team. These merge requests are tagged with the\nSupport Team Contributions\nlabel. You can\nfilter on open MRs\n.\nWorking on high priority issues as a result of\nissue triaging\n. This is our commitment to the community and we need to include some capacity to review MRs or work on defects raised by the community.\nImprovements to the performance, stability and scalability of a feature or dependency including underlying infrastructure. Again, the Product team should be involved in the definition of these issues but Engineering may lead here by planning, prioritizing, and coordinating the recommended improvements.\nImprovements and upgrades to our toolchain in order to boost efficiency.\nCodebase improvements: Removing technical debt, updating or replacing outdated dependencies, and enhancing logging and monitoring capabilities.\nConstructing Proof-of-Concept models for thorough exploration of new technologies, enhancements and new possibilites.\nWork on improvements and feature enhancements to the product, in the sense of internal community contributions, that would increase our internal engineering productivity by focusing on ready-to-go items that are currently assigned a low priority in the backlog.\nEngineering Innovation\nEngineering Innovation is a new process geared toward individual or small-team collaboration that encourages engineers to explore new ideas and Proof-of-Concepts. These projects are typically lean, time-boxed, iterative, and designed to validate whether an idea has the potential to evolve into a viable experimental feature or product.  See the\nInnovation at GitLab Guide\n.\nTechnical Roadmaps\nSome of the above examples for the 40% time budget can help in forming a long-term technical roadmap for your group, and determine how best to prioritize your technical work to support overall business goals. In addition to the examples above:\nAsk yourself these questions\nWhat are your most frequent sources of delays? (Could be long-standing tech debt you have to work past while developing, could be lack of reviewers for your domain, could be external to your team like with pipeline duration)\nDo you have any consistently similar bugs or security issues that come in due to a certain area?\nHas your team been talking about potentially refactoring any areas?\nIs your team struggling with certain processes?\nHave you had recent incidents that allude to a larger problem?\nAre you getting frequent requests for help in some area?\nIs your team frequently missing their deliverable commitments? What would help?\nDoes your area have performance (slow endpoints, inconsistent responses, intermittent errors) or scalability (the feature or area as-is will not scale) concerns?\nWhere do you see the biggest instability? Have you talked to operations and support about feedback for  your area?\nDo you have application or rate limits in the right places?\nHave you burned down your security, corrective action, and infradev issues?\nIs your error budget green?\nHave your feature flags been removed from the codebase yet?\nDo you have adequate unit test, integration test and E2E coverage?\nDo you have adequate documentation for your features?\nDo you have adequate telemetry , logging, monitoring of your features?\nDo you have adequate error handling and error codes that allows fast and easy diagnostics?\nGather data like this\nMaster:Broken issues\n~‚Äúseverity::1‚Äù and ~‚Äúseverity::2‚Äù  bugs\nMissed-Slo issues\nFlaky test issues\n~‚Äútype::maintenance‚Äù issues\nThink about the future state of your product\nWhere do you want your product to be this time next year?\nWhat are the technical requirements to achieve that?\nWhat are technical topics that would benefit from research/POCs?\nWhat would make it easier for you to achieve that if it was no longer a factor?\nWhat would be the performance and/or business impact once you address these issues?\nHow would you evolve your team processes to regularly review your technical roadmap?\nTechnical roadmap process\nEngineering Managers (EMs) are responsible for collaboratively developing their team‚Äôs technical roadmap backlog. All items should be documented as epics and issues using the ‚ÄúTechnical Roadmap‚Äù label.\nGlobal initiatives will be defined and must be incorporated into each group‚Äôs roadmap and prioritization (e.g., allocating 40% of front-end capacity for Vue upgrade, completing all Cells issues for a specific area by milestone XYZ).\nPrioritization of items should align with:\nGeneral business goals\nEngineering vision\nTeam capacity and expertise\nPlanning Guidelines:\nAllocate 40% of the overall time budget for technical roadmap items in the normal milestone planning process.\nUse the ‚ÄúTechnical roadmap‚Äù label for all related issues to facilitate tracking and coordination.\nKey Steps:\nIdentify and document technical debt and improvement opportunities\nAssess impact and effort for each item\nPrioritize based on business value and strategic alignment\nIntegrate with existing iteration/milestone planning\nRegularly review and adjust the roadmap\nThis process ensures a balanced approach between feature development and technical improvements, promoting long-term sustainability and efficiency of the engineering organization.\nCommunity Contributions\nWe have a 3-year goal of\nreaching 1,000 monthly contributors\nas a way to mature new stages, add customer-desired features that aren‚Äôt on our roadmap, and even translate our product into multiple languages.\nDiversity\nDiverse teams perform better\n. They provide a sense of belonging that leads to higher levels of trust, better decision making, and a larger talent pool.\nThey also focus more on facts, process facts more carefully, and are more innovative\n. By hiring globally and increasing the numbers of women and under represented groups (URGs) in the Engineering division, we‚Äôre helping everyone bring their best selves to work.\nGrowing our team\nStrategic hiring is a top priority, and we‚Äôre excited to continue hiring people who are passionate about our product and have the skills to make it the best DevSecOps tool in the market. Our current focus areas include reducing the amount of time between offer and start dates and hiring a diverse team (see\nabove\n). We‚Äôre also implementing industry-standard approaches like structured, behavioral, and situational interviewing to help ensure a consistent interview process that helps to identify the best candidate for every role. We‚Äôre excited to have a recruiting org to partner with as we balance the time that managers spend recruiting against the time they spend investing in their current team members.\nExpand customer focus through depth and stability\nAs expected, a large part of our focus is on improving our product.\nFor\nEnterprise customers\n, we‚Äôre refining our product to meet the levels of security and reliability that customers rightfully demand from SaaS platforms\n(SaaS Reliability)\n. We‚Äôre also providing more robust utilization metrics to help them discover features relevant to their own DevOps transformations\n(Usage Reporting)\nand offering the ability to purchase and manage licenses without spending time contacting Sales or Support\n(E-Commerce and Cloud Licensing)\n. Lastly, in response to Enterprise customer requests, we‚Äôre adding features to support Suggested Reviewers, better portfolio management through Work Items, and Audit Events that provide additional visibility into user passive actions.\nFor\nFree Users\n, we‚Äôre becoming more efficient with our open core offering, so that we can continue to support and give back to students, startups, educational institutions, open source projects, GitLab contributors, and nonprofits.\nFor\nFederal Agencies\n, we‚Äôre obtaining FedRAMP certification to strengthen confidence in the security standards required on our SaaS offering. This is a mandated prerequisite for United States federal agencies to use our product.\nFor\nHosted Customers\n, we‚Äôre supporting feature parity between Self-Managed and GitLab Hosted environments through the Workspace initiative. We‚Äôre also launching GitLab Dedicated for customers who want the flexibility of cloud with the security and performance of a single-tenant environment.\nFor customers using\n, we‚Äôre expanding the available types of Runners to include macOS, Linux/Docker, and Windows, and we‚Äôre autoscaling build agents.\nTaking time off\nNote:\nThis process is expected for PTO that is five consecutive days or more, inclusive of adjacent public holidays (excluding weekend days). For PTO that is fewer than five consecutive days, including the cases where there are multiple PTO blocks with fewer than 5 consecutive days and a few working days in-between, a coverage issue is not required but a coverage issue can be filed for PTO of any length, especially if it‚Äôd be helpful to balance team continuity and individual flexibility.\nIn order to ensure business continuity, and deliver on commitments; the Engineering Division is adopting a PTO Coverage Issue Process. Processes like this are already formalized in GitLab (e.g.\nPM Coverage Issue\n) and some team‚Äôs within Engineering have practiced this regularly at the Management+ level. This allows us to continue to support team member well-being through time away without negatively impacting the rest of the team.\nA PTO Coverage issue is required for\njob grades 8 and up\n. For job grades 7 and below a PTO Coverage issue is recommended as there is value in going through the process of creating the PTO Coverage issue even if there are minimal items to include (for all levels) in that it forces you to think about what you have on your plate and what impact your PTO will have on those items. So whether the result is that the work waits or there is someone designated as a replacement DRI, it makes the decision explicit and documented.\nOnce planning for a milestone has been completed (see\nMonday, 5 days before the milestone begins\n) PTO for periods longer than 5 consecutive days, inclusive of adjacent public holidays (excluding weekend days), cannot be requested. This is to prevent disrupting plans for that milestone. There are exceptions to this, but all need to be discussed with your manager. Examples include:\nurgent scenarios\na team/individual hits targets earlier in the milestone (\nwe measure impact, not activity\n)\na strong need for a team member to take PTO of this length\nThese issues will help inform teams as they plan their milestones to ensure the work teams are committed to can be achieved with the staff available, or if there will be a lack of staff to achieve those commitments, to work with team members to see what can be done to achieve the results for our customers.\nThe process below helps to clarify and expand upon the\nFlexible PTO Policy\nby making the coordination with the team members manager explicit.\n1. Creating an Engineering coverage issue\nYou should use\nthis issue template\nto define handshake responsibilities. For extended leave, it is important to find one or more Directly Responsible Individuals (DRIs) that will be able to make decisions while you are away. This may be your manager, another engineer, or maybe the Product Manager for your team. The coverage issue should contain all the necessary information for the DRIs to make good decisions in your absence, so please make sure to include as much detail as needed. The coverage issue should highlight work impact estimates, mitigations identified, and coverage alternatives.\nIf additional context needs to be shared to provide color to the coverage issue, you can consider a specific handover meeting to cover further details.\nIt is recommended to work with your manager and other stakeholders when considering cross-functional teammate capacity for a coverage task assignment. For example, while it‚Äôs optimal for PM, EM, and PDs to assist in covering for each other given their shared knowledge of their product area including customers and users, PM teammates may or may not have the bandwidth or expertise to take on covering engineering specific responsibilities. Alternatively, it may be better for the manager of the engineer or another engineer in the same stage to aid in coverage. Plan to have the necessary conversations across teams and managers.\n2. Sharing your Engineering coverage issue with your manager\nOnce you‚Äôve filed your engineering coverage issue, share this with your manager prior to milestone planning so they can review and approve. Check the\nlatest guidance in our PTO policy\non how much notice is required.\nConsider whether any new commitments would be affected by your planned PTO. If a team member falls behind on something, they will need to make sure they have a coverage plan in place to ensure success of their commitments.\n3. Manager reviews coverage issue\nOnce the team member has shared their coverage issue with their manager, the manager will review the coverage issue and validate assumptions with stakeholders or impacted project DRIs as needed.\nThe manager will make a decision on approval or discuss different arrangements or other contingency plans. Once the manager ticks their box on the coverage issue approving the leave, enter the time off into Workday.\n4. Communicate your time off\nAfter team members‚Äô coverage issue is approved, team members will\ncommunicate their time off\nand enter the PTO into Deel/Workday including a link to their coverage issue. Team members will share their coverage issue with their relevant colleagues via Slack channels, GitLab status, etc. ahead of the milestone planning.\n5. Take your time off\nPlease disconnect and take the time off that you need!\n6. Returning from Time Off\nReturning from time off can be overwhelming and daunting. You should work with your DRIs to understand what has changed during your absence and what the current priorities are. Also, communicate transparently that your response time may be slower because you are catching up. Here are some additional tips on\nhow to return back to work after time off\n.\nEngineering Departments\nThere are five departments within the Engineering Division:\nDevOps Engineering Department\nAI Engineering Department\nSec Department\nInfrastructure Platforms\nSupport Engineering Department\nOther Related Pages\nCTO Leadership Team\nCommunication\nDatabase Engineering\nDevelopment Principles\nEngineering Automation\nEngineering Metrics\nEngineering READMEs\nFrequently Used Projects\nGitLab Innovation Program\n, managed by the GitLab Legal Team\nHiring\nMentorship\nPajamas Design System\nR&D Tax Credit Applications\nWorkflows\nDeveloper onboarding\nEngineering Demo Process\nEngineering Workflow\nCode Review\nSecurity Issues\nArchitecture Design\nGitLab Repositories\nIssue Triage Policies\nContributing to Go projects\nWider Community Merge Request Triage Policies\nRoot Cause Analysis\nUnplanned Critical Patch releases\nIncident Management\nGitLab in Production\nWorkflow Diagram\nError Budgets\nPerformance of GitLab\nMonitoring of GitLab.com\nProduction Readiness Guide\nPeople Management\nEngineering Career Development\nEngineering Career Mobility Principles\nEmerging Talent @ GitLab\nEngineering Management\nCross-Functional Prioritization\nSee the\nCross-Functional Prioritization page\nfor more information.\nSaaS Availability Weekly Standup\nTo maintain high availability, Engineering runs a weekly SaaS Availability standup to:\nReview high severity (S1/S2) public facing incidents\nReview important SaaS metrics\nTrack progress of Corrective Actions\nTrack progress of Feature Change Locks\nInfrastructure Items\nEach week the Infrastructure team reports on incidents and key metrics. Updating these items at the top of the\nEngineering Allocation Meeting Agenda\nis the responsibility of the Engineering Manager for the\nGeneral Squad\nin Reliability.\nIncident Review\nInclude any\nS1 incidents\nthat have occurred since the previous meeting.\nInclude any incidents that required a\nstatus page\nupdate.\nSaaS Metrics Review\nInclude screenshots of the following graphs in the\nagenda\n.\nAlert Volume Review\nCorrective Actions\nDevelopment Items\nFor the core and expansion development departments, updates on current status of:\nError budgets\nReliability issues (infradev)\nSecurity issues\nGroups under Feature Change Locks should update progress synchronously or asynchronously in the weekly agenda.\nThe intention of this meeting is to communicate progress and to evaluate and prioritise escalations from infrastructure.\nFeature Change Locks progress reports should appear in the following format in the weekly agenda:\nFCL xxxx - [team name]\nFCL planning issue:\n<issue link>\nIncident Issue:\n<issue link>\nIncident Review Issue:\n<issue link>\nIncident Timeline:\n<link to Timeline tab of the Incident issue>\ne.g. time to detection, time to initiate/complete rollback (as applicable), time to mitigation\nCause of Incident\nMitigation\nStatus of Planned/completed work associated with FCL\nFeature Change Locks\nA Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The\nteam\ninvolved should be determined by the author, their line manager, and that manager‚Äôs other direct reports.\nIf the incident meets the above criteria, then the manager of the team is responsible for:\nForm the group of engineers working under the FCL. By default, it will be the whole team, but it could be a reduced group if there is not enough work for everyone.\nPlan and execute the FCL.\nInform their manager (e.g. Senior Manager / Director) that the team will focus efforts towards an FCL.\nProvides updates at the\nSaaS Availability Weekly Standup\n.\nIf the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development.\nDirect reports involved in an active\nborrow\nshould be included if they were involved in the authorship or review of the change.\nThe purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture.\nTimeline\nRough guidance on timeline is provided here to set expectations and urgency for an FCL.  We want to balance moving urgently with doing thoughtful important work to improve reliability.  Note that as times shift we can adjust accordingly.   The DRI of an FCL should pull in the timeline where possible.\nThe following bulleted list provides a suggested timeline starting from incident to completion of the FCL.  ‚ÄúBusiness day x‚Äù in this case refers to the x business day after the incident.\nDay 0: Incident:\nBusiness day 1:  relevant Engineering Director collaborates with VP of Development and/or VP of Infrastructure or their designee to establish if FCL is required.\nBusiness day 2:  confirmation that an FCL is required for this incident and start planning.\nBusiness days 3-4:  planning time\nBusiness days 5-9 (1 week):  complete planned work\nBusiness days 10-11:  closing ceremony, retrospective and report back to standup\nActivities\nDuring the FCL, the team(s) exclusive focus is around\nreliability work\n, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must:\nCreate a public slack channel called\n#fcl-incident-[number]\n, with members\nThe Team‚Äôs Manager\nThe Author and their teammates\nThe Product Manager, the stage‚Äôs Product leader, and the section‚Äôs Product leader\nAll reviewer(s)\nAll maintainers(s)\nInfrastructure Stable counterpart\nThe chain-of-command from the manager to the VP (Sr Manager, Sr/Director, VP, etc)\nCreate an\nFCL issue\nin the\nFCL Project\nwith the information below in the description:\nName the issue:\n[Group Name] FCL for Incident ####\nLinks to the incident, original change, and slack channel\nFCL Timeline\nList of work items\nComplete the written Incident Review documentation within the Incident Issue as the first priority after the incident is resolved.  The Incident Review must include completing all fields in the Incident Review section of the incident issue (see\nincident issue template\n).  The incident issue should serve as the single source of truth for this information, unless a linked confidential issue is required. Completing it should create a common understanding of the problem space and set a shared direction for the work that needs to be completed.\nSee that not only all procedures were followed but also how improvements to procedures could have prevented it\nA work plan referencing all the Issues, Epics, and/or involved MRs must be created and used to identify the scope of work for the FCL. The work plan itself should be an Issue or Epic.\nDaily - add an update comment in your FCL issue or epic using the template:\nExec-level summary\nTarget End Date\nHighlights/lowlights\nAdd an agenda item in the\nSaaS Availability weekly standup\nand summarize status each week that the FCL remains open.\nHold a synchronous\nclosing ceremony\nupon completing the FCL to review the retrospectives and celebrate the learnings.\nAll FCL stakeholders and participants shall attend or participate async.  Managers of the groups participating in the FCL, including Sr. EMs and Directors should be invited.\nAgenda includes reviewing FCL retrospective notes and sharing learnings about improving code change quality and reducing risk of availability.\nOutcome includes\nhandbook\nand\nGitLab Docs\nupdates where applicable.\nScope of work during FCL\nAfter the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to:\nAddress immediate corrective actions to prevent incident reoccurrence in the short term\nIntroduce changes to reduce incident detection time (improve collected metrics, service level monitoring, which users are impacted)\nIntroduce changes to reduce mitigation time (improve rollout process through feature flags, and clean rollbacks)\nEnsure that the incident is reproducible in environments outside of production (Detect issues in staging, increase end-to-end integration test coverage)\nImprove development test coverage to detect problems (Harden unit testing, make it simpler to detect problems during reviews)\nCreate issues with general process improvements or asks for other teams\nExamples of this work include, but are not limited to:\nFixing items from the Incident Review which are identified as causal or contributing to the incident.\nImproving observability\nImproving unit test coverage\nAdding integration tests\nImproving service level monitoring\nImproving symmetry of pre-production environments\nImproving the\nGitLab Performance Tool\nAdding mock data to tests or environments\nMaking process improvements\nPopulating their backlog with further reliability work\nSecurity work\nImprove communication and workflows with other teams or counterparts\nAny work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don‚Äôt affect the end of the FCL.\nA stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director.\nEngineering Performance Indicator process\nThe\nProduct Analytics team\nis responsible for maintaining Engineering Performance Indicators. Work regarding KPI / RPI is tracked using the\nProduct Analytics task intake tracker\n.\nManual verification\nWe manually verify that our code works as expected.\nAutomated test coverage is essential,\nbut manual verification provides a higher level of confidence that features behave as intended and bugs are fixed.\nWe manually verify issues when they are in the\nworkflow::verification\nstate.\nGenerally, after you have manually verified something, you can close the associated issue.\nSee the\nProduct Development Flow\nto learn more about this issue state.\nWe manually verify in the staging environment whenever possible.\nIn certain cases we may need to manually verify in the production environment.\nIf you need to test features that are built for GitLab Ultimate then you can get added to the\nissue-reproduce\ngroup on production and staging environments by asking in the\n#development\nSlack channel.\nThese groups are on an Ultimate plan.\nCritical Customer Escalations\nWe follow the below process when existing\ncritical customer escalations\nrequires immediate scheduling of bug fixes or development effort.\nRequirements for critical escalation\nCustomer is in\ncritical escalation\nstate\nThe issues escalated have critical business impact to the customer, determined by Customer Success and Support Engineering leadership\nFailure to expedite scheduling may have cascading business impact to GitLab\nApproval from a VP from Customer Success AND a Director of Support Engineering are required to expedite scheduling\nCustomer Success: approval from VP, Customer Success Management -\nSherrod Patching\nSupport Engineering: approval from VP, Support -\nJohnny Scarborough\nProcess\nThe issue priority is set to\n~\"priority::1\"\nregardless of severity\nThe label\n~\"critical-customer-escalation\"\nis applied to the issue\nThe issue is scheduled within 1 business day\nFor issues of type features, approval from the Product DRI is needed.\nThe DRI or their delegate provides daily process updates in the escalated customer slack channel\nIf issue is type bug DRI is the Director of Development\nIf issue is type feature DRI is the Director of Product\nIf issue requires Infrastructure work the DRI is the Engineering Manager in Infrastructure\nThe DRI can use the\ncustomer critical merge requests\nprocess to expedite code review & merge.\nPairing Engineers on priority::1/severity::1 Issues\nIn most cases, a single engineer and maintainer review are adequate to handle a priority::1/severity::1 issue. However, some issues are highly difficult or complicated. Engineers should treat these issues with a high sense of urgency. For a complicated priority::1/severity::1 issue, multiple engineers should be assigned based on the level of complexity. The issue description should include the team member and their responsibilities.\nTeam Member\nResponsibility\nTeam Member 1\nReproduce the Problem\nTeam Member 2\nAudit Code Base for other places where this may occur\nIf we have cases where three or five or X people are needed, Engineering Managers should feel the freedom to execute on a plan quickly.\nFollowing this procedure will:\nDecrease the time it takes to resolve priority::1/severity::1 issues\nAllow for a smooth handover of the issue in case of OOO or End of the Work Day\nProvide support for Engineers if they are stuck on a problem\nProvide another set of eyes on topics with high urgency or securing security-related fixes\nInternal Engineering handbook\nThere are some engineering handbook topics that are\ninternal only\n. These topics can be viewed by GitLab team members in the\nengineering section of the internal handbook\n.\nAI Engineering\nVision Our goal is not merely to launch features, but to ensure they land successfully and provide ‚Ä¶\nArchitecture\nComplexity at Scale As GitLab grows, through the introduction of new features and improvements on ‚Ä¶\nCross Functional Prioritization\nOverview The Cross-Functional Prioritization framework exists to give everyone a voice within the ‚Ä¶\nCTO Leadership Team\nThe CTO Leadership Team is composed of the CTO‚Äôs direct reports and the Office of the CTO ‚Ä¶\nDeployments and Releases\nOverview and terminology This page describes the deployment and release approach used to deliver ‚Ä¶\nDeveloper Onboarding\nAwesome! You're about to become a GitLab developer! Here you'll find everything you need to start developing.\nDevelopment\nDevelopment Department Learning and Development\nResources Secure coding best practices It is important that all developers are aware of secure ‚Ä¶\nDevOps Engineering\nVision Our goal is not merely to launch features, but to ensure they land successfully and provide ‚Ä¶\nEngineering Career Development\nThe Three Components of Career Development There are three important components of developing ‚Ä¶\nEngineering Communication\nCommunication GitLab Engineering values clear, concise, transparent, asynchronous, and frequent ‚Ä¶\nEngineering Demo Process\nOccasionally, it is useful to set up a demo on a regular cadence to ensure cross-functional ‚Ä¶\nEngineering Error Budgets\nThe error budget provides a clear, objective metric that determines how unreliable the service is allowed to be within a single quarter.\nEngineering Function Performance Indicators\nExecutive Summary KPI Health Status Engineering Handbook MR Rate Okay Above target Engineering Team ‚Ä¶\nEngineering Hiring\nOverview Hiring is a cornerstone of success for our engineering organization, contributing to our ‚Ä¶\nEngineering IC Leadership\nEngineering IC Leadership at GitLab: going beyond Senior level At GitLab, it is expected that ‚Ä¶\nEngineering Management\nHow Engineering Management Works at GitLab At GitLab, we promote two paths for leadership in ‚Ä¶\nEngineering Mentorship\nMentorship, Coaching and Engineering Programs Senior Leaders in Engineering The 7CTOs Program is run ‚Ä¶\nEngineering Projects\nName Location about.gitlab.com gitlab-com/marketing/digital-experience/about-gitlab-com AI Gateway ‚Ä¶\nEngineering Team Readmes\nEngineering Workflow\nThis document explains the workflow for anyone working with issues in GitLab Inc.\nFast Boot\nA Fast Boot is an event that gathers the members of a team or group in one physical location to work ‚Ä¶\nFrontend Group\nTeams Create Monitor Plan Secure Verify and Release Frontend domain experts You can find engineers ‚Ä¶\nGitLab Repositories\nGitLab consists of many subprojects. A curated list of GitLab projects can be found at the GitLab ‚Ä¶\nGuidelines for automation and access tokens\nGuidelines for automation with project/group tokens or service accounts\nIncident\nDefinition of an Incident The definition of ‚Äúincident‚Äù can vary widely among companies ‚Ä¶\nInfrastructure\nThe Infrastructure Department is responsible for the availability, reliability, performance, and scalability of GitLab.com and other supporting services\nInfrastructure Platforms\nThe Infrastructure Platforms department is responsible for the availability, reliability, performance, and scalability of GitLab SaaS Platforms and supporting services\nInnovation at GitLab\nThis guide serves as a comprehensive handbook for GitLab team members (engineers, product managers, ‚Ä¶\nMonitor Stage\nThe Monitor Stage is responsible providing observability and response features.\nMonitoring of GitLab.com\nGitLab.com Service Availability The calculation methodology for GitLab.com Service Availability ‚Ä¶\nOn-Call\nIf you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶\nOpen Source at GitLab\nWe believe in Open Source As a company, GitLab is dedicated to open source. Not only do we believe ‚Ä¶\nPerformance\nPerformance Facets We categorize performance into 3 facets\nBackend Frontend Infrastructure Backend ‚Ä¶\nPolicies related to GitLab.com\nThe handbook pages nested under ‚Äúpolicies‚Äù directory are controlled documents, and ‚Ä¶\nR&D Tax Credits\nGitLab submits applications for R&D Tax Credits in a number of jurisdictions that implement ‚Ä¶\nRecognition in Engineering\nEngineering Quarterly Achievers Quarterly, CTO Leadership will recognize Engineering team members ‚Ä¶\nReleases\nOverview and terminology This page describes the processes used to release packages to self-managed ‚Ä¶\nRoot Cause Analysis\nAt GitLab transparency is one of our core values, as it helps create an open and honest working ‚Ä¶\nTesting\nWelcome to the Testing Guide. Pages in this section provides information about testing practices, ‚Ä¶\nUnplanned Upgrade Stop Workflow\nAn unplanned upgrade stop is disruptive for customers as it requires to perform rollback and ‚Ä¶\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5338}
{"doc_id": "87b80f0634113a5f", "url": "https://handbook.gitlab.com/handbook/marketing/sales-development/tanuki-tech", "title": "Tanuki Tech | The GitLab Handbook", "text": "The Handbook\nMarketing\nSales Development\nTanuki Tech\nTanuki Tech (short for Tanuki Instutite of Technology) is the world class sales/technology bootcamp that we are provide for the sales development organization. Use this page to walk through the courses and examinations that you‚Äôll be expected to complete as part of your tenure in our organisation.\nTanuki Tech\nTanuki Tech (short for ‚ÄúTanuki Instutite of Technology‚Äù) is the world class sales/technology bootcamp that we are provide for the sales development organization. Our goal is to powerfully equip our sales development team members to be successful in their current role as well as prepare them for their next role, whatever that may be.\nWe are doing this because we care about our team members.\nGoals\nHow do we measure success? The specific goals for this program are:\nIncreased sales development effectiveness and organizational efficiency (increased quota attainment).\nDecrease time to value for sales development new hires (we want to equip our new team members to be successful quickly).\nJob placement for team members who complete our program.\nWe want the people that we develop here as part of our sales development program to be abundantly prepared for their next role whether that‚Äôs in sales, marketing, or somewhere else.\nThe average coding bootcamp here in the United States costs 13.5k and graduates report an average starting salary of 67k (CourseReport 2020). Our goal is to far exceed the job placement and starting salary metrics of our peer institutions,\ncompletely as a free value to our team members as part of being part of this organization.\nGuiding Principles\nEnablement should be powerful and effective. If there is something that you feel would help our organization and is currently missing or have suggestions for improvement, let us know.\nEnablement should be quick and effective. We are not trying to inundate you with information to eat up all of your time. Most courses in our curriculum are designed to take up around two hours including examination.\nWe test often and we test behaviors that apply to your actual job. Research shows that the most effective teachers consistently test more than their peers.\nDo not get discouraged if you fail a test; it is better to fail in front of a peer who is trying to help you than in front of a customer.\nClasses are generally offered in hybrid format (live and recorded options). Examinations are mostly offered in a written format.\nAll classes are available on demand. Recordings and assets (slides, exams) are listed\nhere\nunder ‚ÄúSales Development.‚Äù\nCurriculum\n100s -\nTT100: Introduction to Technology\nServes as an introduction to the technology industry and GitLab‚Äôs space in it. In this course, we will explain fundamental concepts such as applications, operations, and the hybrid cloud. We will also explain why technology has been the main driver of innovation in the twenty-first century.\n3 credit hours\nTT101: Introduction to GitLab\nGitLab is an extremely promising suite of technologies that is broad as well as deep. In this course, we will introduce GitLab and explain why it is such a special piece of technology.\n3 credit hours\nTT102: The People of Technology\nTo effectively engage in customer conversations, we need to understand the people that make up the technology industry. In this course, we will explain the various people that you will meet, their responsibilities and drivers, and how to have effectively engage each type of audience.\n3 credit hours\nTT103: Calls and Credit\nTeaches cold call best practices and what it means to make a cold call here. As part of onboarding we do two mock calls: one for a director of engineering (target buyer) and one for an application architect (technical influencer). Also covers quota and compensation.\n3 credit hours\nTT104: Sales Development Processes\nTeaches both the SDR and BDR roles from a process perspective. Also covers best practices for navigating the handbook, using Slack, etc.\n4 credit hours\nTT105: Audit Process\nIn this class, we will go through the monthly sales development audit process. This class ends with a short quiz for credit.\n1 credit hours\nTT110: Competitive\nBecause we operate in so many different product categories, GitLab has a large number of competitors. In this class, we discuss our biggest four competitors and how to effectively handle competitive situations with them.\n3 credit hours\nTT120: GitLab Workshop 1\nThis is a hands-on workshop where we use GitLab to update our very own website (no technical skills required). Learn the product by using it in action.\n3 credit hours\n200s -\nTT200: Introduction to Development\nIn this class, our goal is to have more effective conversations with developers by understanding what they do and learning to speak their language. Topics include life as a developer, how software is developed, where applications run, the public cloud, and APIs.\n3 credit hours\nTT201: Partnering with Sales - Good to Great (Goals)\nIn the first part of this class, we talk about how to live your life with purpose, maintain vision, and achieve hard things. In the second half of this class we talk about best practices for partnering with sales.\n3 credit hours\nTT210: GitLab Create and Plan\nIn this class, we go indepth explaining create and plan functionality. Topics include GitLab‚Äôs SCM and Agile featureset and competitive differentiators.\n3 credit hours\nTT211: GitLab Verify and Secure\nIn this class, we will learn about verify and security functionality. Topics include waterfall versus agile, continuous integration, software testing, devsecops, and automation.\n3 credit hours\nTT220: GitLab Package, Configure, and Release\nIn this class, we will learn about package, configure, and release functionality. Topics include how software is packaged and ultimately released (rolling deployments, A/B testing, etc.).\n3 credit hours\nTT230: GitLab Manage, Monitor, and Govern (deprecated)\nIn this class, we will learn about manage, monitor, and govern functionality. Topics include how we allow engineering leaders to make proactive decisions to optimize their organizations and infrastructure.\n3 credit hours\nTT240: GitLab Workshop 2 (deprecated)\nLearn GitLab by seeing it in action. In this class, we will walk through what a new customer does when setting up the product and explain how we are different from our competitors.\n3 credit hours\nTT241: Free to Paid (deprecated)\nIn this class, we talk about how to identify free users in your accounts, connect with prospects, and ultimately handle the free-to-paid conversation.\n3 credit hours\nTT250: Social Selling with LinkedIn (deprecated)\nThis class covers social selling with LinkedIn to maximize customer mindshare and effectively get meetings. Also covered in this class is how team members can work together with their sales counterparts to conduct joint social selling motions.\n3 credit hours\nTT251: Competitive Workshop\nIn this class, we talk about our biggest competitive differentiators and how to utilize them in sales conversations.\n3 credit hours\nTT252: Objection Handling\nIn this class, we discuss more advanced objection handling techniques and introduce influence and persuasion.\n3 credit hours\n300s -\nTT300: Advanced Sales Conversations\nLearn some of our customers‚Äô biggest technical initiatives and how to use them within our sales conversations (cloud migrations, automation, infrastructure as code, and microservices). Also covers the difference between product selling and solution selling.\n3 credit hours\nTT301: Security as a Differentiator\nSecurity is our biggest differentator with our competitors. This class goes over how to leverage this differeniator in our sales conversations.\n3 credit hours\nTT305: AWS and Google Alliances (deprecated)\nIn this class, we will learn about what alliances are and discuss our co-sell motions with Amazon and Google. Great for those that are planning on working AWS/Google events.\n3 credit hours\nTT310: Demoing GitLab\nIn this class, we will practice demoing GitLab. After taking this class, you will be able to perform brief customer demos to gather customer interest and explain product value.\n5 credit hours\nTT330: Career Builder\nIn this class, we will discuss best practices for plotting your career direction and how to get there. Included in this class is ‚ÄúSales Stories,‚Äù where we interview sales leaders to help you determine which path to take your career.\n5 credit hours\nTT331: Alumni Stories\nIn this class, we interview some of our most esteemed alumni about their times here in sales development, including lessons learned. Those interviewed include Lisa Van de Kooji, Brandon Greenwell and Da‚ÄôNeil Olsen.\n3 credit hours\nTT332: Leadership Perspectives\nThis is a class where we will have rotating speakers speak on different leadership perspectives. We will specifically introduce topic such as strategic leadership, organizational leadership, and people leadership. This class is great for those considering team lead or management positions.\n3 credit hours\nTT380: Technical Questions for Sales (deprecated)\nThis is a class offered by the sales enablement organization equipping salespeople to answer the most commonly asked technical questions. You may see the curriculum\nhere\n. This class is delivered async only.\n5 credit hours\nTT381: The Sales Required 7 (deprecated)\nThis is another class offered by the sales enablement organization and covers Ryan O‚ÄôNeil‚Äôs required seven sales process. Recommended for those considering applying to the commercial sales organization.\n5 credit hours\nRole-Based Classes -\nInbound:\nCovers inbound workflow best practices (call, email, Drift), time management and note taking.\n5 credit hours\nOutbound:\nCovers the different modalities of outreach (call, email, LinkedIn), identifying focus accounts and personas, time management, note taking, and best practices for working with sales.\n5 credit hours\nExamination\nWe test for mastery (mastery-based learning) and students will be asked to demonstrate knowledge/skills learned. Students will be asked to repeat examination (or update answers) until mastery is demonstrated and the number of attempts needed is tracked.\nTo hand in written exams:\nMake a copy of the exam template by clicking an exam link listed. For example see\nhere\n.\nRename the generated file appropriately using appropriate syntax. As an example this would be for Ed Bao:\nTT100 - Introduction to Technology (Ed Bao)\n.\nChange file\nownership\nto Christopher Wang and allow some time for grading (one week on average).\nNote: if your assignment hasn‚Äôt been graded for over three weeks, we likely made a mistake. Let us know and we‚Äôll fix the issue.\nEnrollment\nCoursework will be assigned at the beginning of each quarter. To see your assigned coursework, see\nhere\n.\nTo complete coursework virtually, take classes at your on pace on\nLevel Up\n.\nSome sessions are offered live. Those that are offered live will be communicated to team members.\nOnboarding\nAll team members are required to meet certain enablement milestones by the end of their first and third months. To see these requirements, see ‚ÄúSales Development Leveling‚Äù below.\nFor links to the Tanuki Tech courses, see\nhere\n.\nFor the link to the onboarding checklist, see\nhere\n.\nFor the link to Inbound (SDR), see\nhere\n.\nFor the link to Outbound (BDR), see\nhere\n.\nFor Inbound (SDR) and Outbound (BDR), take the quiz at the end to pass.\nSales Development Leveling\nTo qualify for promotions, sales development team members are required to keep up with their quarterly enablement. The following are the current course requirements and are subject to change.\nTenure\nFirst month\nTT100, TT101, TT102, TT103, TT104, TT110, onboarding checklist\nThird month\nTT105, Getting Started for Sales Development, Sales Quick Starts\nTT105, Getting Started for Business Development, Sales Quick Starts\nSecond quarter\nTT120, TTT201, T210, TT211, TT251\nTT120, TT201, TT210, TT211, TT251\nThird quarter\nTT200, TT220, TT252, TT300\nFourth quarter\nGetting Started for Business Development, TT301, TT310, TT330\nTo see your current progress, see\nhere\n.\nTanuki Tech Faculty\nChristopher Wang\ncurrently serves as the first dean of Tanuki Tech.\nEd Bao\nserves as a teaching assistant for Tanuki Tech.\nLast modified June 3, 2025:\nUpdate handbook for new courese names + SDR graduation requirements (\n6e54007c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1962}
{"doc_id": "cddfc025ff75cd93", "url": "https://handbook.gitlab.com/handbook/board-meetings", "title": "Board of Directors and Corporate Governance | The GitLab Handbook", "text": "The Handbook\nBoard of Directors and Corporate Governance\nThis page is intended to capture GitLab Board practices, but we evolve these over time and the page may not capture all changes. The source of truth for Board details is GitLab‚Äôs\nInvestor Relations site\n.\nBoard and Committee Composition\nBoard of Directors\nCurrent members of the Board of Directors\nBoard of Directors Job Description\nAudit Committee\nAudit Committee Charter\nMeeting Process\nThe Staff EBA to the CFO is the DRI of scheduling the quarterly Audit Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA\nTiming: 2-3 weeks prior to the formal Board of Directors Meeting\nDuration: 110min (Q1-Q3) 140min (Q4)\nAgenda document to include links to all material being reviewed during the meeting\nAll Audit Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI.\nAudit Committee meetings are attended by:\nThe Chairperson of the Audit Committee, Audit Committee Members, CLO, CFO and Finance Leadership are all required attendees\nOther Team Members may be invited if needed or requested, depending on subject matter\nExternal Auditors and Outside Counsel\nAll Board Members including the CEO are invited to all Committee meetings as optional attendees\nCompensation and Leadership Development Committee\nCompensation and Leadership Development Committee Charter\nMeeting Process\nThe Legal and People Group EBAs are the DRIs of scheduling the quarterly Compensation and Leadership Development Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA\nTiming: 2-3 weeks prior to the formal Board of Directors Meeting and aligned with Audit Committee\nDuration: 80min\nAgenda document to include links to all material being reviewed during the meeting\nAll Compensation and Leadership Development Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI.\nCompensation and Leadership Development Committee meetings are attended by:\nThe Chairperson of the Compensation and Leadership Development Committee, Compensation and Leadership Development Committee Members, CPO, CFO and CLO are all required attendees\nCertain members of the People Group or other Team Members may be invited if needed or requested, depending on subject matter\nOutside Compensation Consultant and Outside Counsel\nAll Board Members including the CEO are invited to all Committee meetings as optional attendees\nNominating and Corporate Governance Committee\nNominating and Corporate Governance Committee Charter\nMeeting Process\nThe Staff EBA to the CEO is the DRI of scheduling the quarterly Nominating & Corporate Governance Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA\nTiming: Twice yearly in March and September. Ideally 3-5 days in advance of the formal Board of Directors meeting\nDuration: 50min\nAgenda document to include links to all material being reviewed during the meeting\nAll Nominating & Corporate Governance Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI.\nNominating and Corporate Governance Committee meetings are attended by:\nThe Chairperson of the Nominating and Corporate Governance Committee, Nominating and Corporate Governance Committee Members and CLO are all required attendees\nDirector of Legal, Corporate or Team Members may be invited if needed or requested, depending on subject matter\nOutside Counsel\nAll Board Members are invited to all Committee meetings as optional attendees\nMergers and Acquisitions Committee\nChairperson:\nMembers:\nMerline Saintil, Godfrey Sullivan and Sundeep Bedi\nManagement DRI:\nChief Product Officer\nMergers and Acquisitions Committee Charter\nMeeting Process\nThe Staff EBA to the CEO is the DRI of scheduling the Mergers and Acquisitions Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA\nTiming: As needed\nDuration: 50min\nAgenda document to include links to all material being reviewed during the meeting\nAll Mergers and Acquisitions Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI.\nMergers and Acquisitions Committee meetings are attended by:\nThe Chairperson of the Mergers and Acquisitions Committee, Mergers and Acquisitions Committee, CPO, CFO and CLO are all required attendees\nTeam Members may be invited if needed or requested, depending on subject matter\nOutside Counsel\nAll Board Members are invited to all Committee meetings as optional attendees\nRevenue non-committee\nInternal Management Members:\nChief Financial Officer (DRI), Chief Executive Officer, Chief Revenue Officer (model, guidance, plan, target)\nLocation\nBoard meetings can happen remotely or in-person. We establish the meeting calendar in advance of the coming fiscal year. During this time, we agree on meeting locations.\nBoard Meeting Schedule\nBoard of Directors meetings are held quarterly.\nMeetings are scheduled on/around the Thursday 6 weeks after the end of the quarter, assuming availability of the Directors.\nThe Staff EBA to the CEO shall ensure that there are separate calendar invites for all attendees within each session, all including exact session start and end times, the appropriate Zoom link, and links to the agenda document. Any supplemental materials are required to be linked in the agenda document for each session. This is the outline of a past agenda, but we adapt agenda based on what is important to discuss:\nSession 1: Closed Session (Part 1)\nDuration: 15 minutes\nAttendees: GitLab Board of Directors\nSession 2: Administration Session\nDuration: 30 minutes\nAttendees: GitLab Board of Directors, GitLab CFO, CPO and CLO, outside legal firm, Board observers\nSession 3: Board of Directors Meeting - General Session\nDuration: 75 minutes\nAttendees: GitLab Board of Directors, E-Group, CoS to the CEO, Staff EBA, outside legal firm representatives, Board observers\nSession 4: Closed Session (Part 3) (optional, if needed)\nDuration: 20 minutes\nAttendees: GitLab Board of Directors\nSession 5: Board Only (without GitLab CEO)\nDuration: 20 minutes\nAttendees: GitLab Board of Directors (without the GitLab CEO)\nBoard Meeting Process\nTimeline\nThe Staff EBA to the CEO is the DRI for scheduling the Board meetings\nThe CFO is the DRI for assembling the deck. Four weeks in advance of the Board meeting, the CFO sends the templates for the materials to be created to the E-Group and EBA team.\n7 weeks before the Board meeting, the Lead Independent Director will reach out to the Board via email to discuss agenda topics.\n6 weeks before the Board meeting, the Lead Independent Director, CEO, and CFO will have a meeting to discuss and finalize the agenda. Once finalized, the CFO will share the agenda with E-Group.\nThe CFO sends a reminder to the E-Group 3 weeks in advance of the meeting.\nThe E-Group has the complete presentation materials ready 10 business days prior to the meeting. All materials are submitted to the CLO and CFO for review within 48 hours of receipt.\nOnce approved by the CLO and the CFO, the CFO authorizes the Corporate Paralegal to upload the materials into Nasdaq Boardvantage (NBV) and attach them to the corresponding NBV Meeting. All presentations and content should be finalized at this time with no further changes. The Corporate Paralegal is responsible for ensuring parity between the NBV Meeting and calendar invite. The Staff EBA to the CFO is responsible for the sharing settings on all materials. Materials should be shared with the E-Group, the Board (not via the @board alias), Board Observers, and the outside legal firm. Any exceptions must be confirmed by the CLO and relayed to the Corporate Paralegal before shipping. The deadline for the document upload is 2p PT 7 days before the Board meeting.\nThe Staff EBA to the CFO is responsible for linking all materials in the agendas for each session of the board meeting. Materials should always be linked in the agenda and shared with the appropriate attendees.\n7 days before the meeting, the CFO emails the Board notifying them that the materials are ready for review in NBV and includes any highlights or asks within the email.\nThe CFO is the DRI for the Administrative deck and will share this with the CLO, the Corporate Paralegal, the Staff EBA to CFO, and the Staff EBA to the CEO at least 1 week before the Board meeting. The Corporate Paralegal will upload the materials into NBV and then the CFO will notify the Board of their availability for review in NBV 4 business days prior to the Board meeting.\nThe day before the Board meeting, the Staff EBA to the CFO ensures that the Introduction section of the agenda is up to date with the latest attendees and ensures that the agenda document is up to date. Questions from the Board are verbalized during the meeting.\nThe CFO is responsible for ensuring that the Board meeting runs according to the time allotted.\nThe CLO is responsible for maintaining the Minutes of the meeting and submitting for Board approval.\nThe CLO ensures that PDF versions of the materials including presentations, exhibits, approved Minutes, and Administrative materials are securely stored in NBV and on Google Drive labeled with the date of the meeting.\nThe Staff EBA to the CFO updates the Next Meeting‚Äôs Timeline section of this page.\nThe E-Group debriefs in the first E-Group Meeting after the Board Meeting.\nNext Meeting‚Äôs Timeline\nThis section is updated after every Board Meeting by the Staff EBA to the CFO for the next Board Meeting.\nMeeting is scheduled for 2025-06-27.\n2025-05-05 - The Lead Independent Director will reach out to the Board to discuss agenda items.\n2025-05-12 - The Lead Independent Director, CEO, and CFO finalize the agenda. [At least 6 weeks before BoD Meeting] *TBD pending Godfrey‚Äôs availability\n2025-06-04 - The CFO adds another reminder to the E-Group. [A week before pencils down]\n2025-06-11 - The E-Group has completed all materials by 12pm Pacific time for review by the CLO and CFO. [A week before BoD Meeting materials distribution]\n2025-06-18 - Once approved by the CLO, CFO and CEO, the CFO authorizes the Corporate Paralegal to upload the materials into NBV and attach them to the corresponding NBV Meeting. The CFO then notifies the Board via email that materials are ready for review in NBV 7 days before the meeting. The Staff EBA to the CFO is responsible for sharing settings on all materials linked in the Google doc BOD Agenda. Materials should be shared with the E-Group, the board members, and the outside legal firm. Any exceptions must be confirmed by the CLO and relayed to the Corporate Paralegal before shipping.\n2025-06-18 - The Staff EBA to the CFO is responsible for linking all materials in the Google document agendas for each session of the board meeting. Materials should always be linked in the agenda and shared with the appropriate attendees.\n2025-06-18 - The Staff EBA to the CFO ensures that the Introduction and Materials section of the agenda is up to date with the latest attendees.\n2025-06-27 - Board of Directors Meeting; CFO ensures the meeting runs according to the time allotted.\n2025-06-30 - The CLO ensures that PDF versions of the materials including presentations, exhibits, approved Minutes, and Administrative materials are securely stored in NBV and on Google Drive labeled with the date of the meeting.\n2025-06-30 - The Staff EBA to the CFO updates this section of the Handbook page with the timeline for the next Board meeting in April 2025.\n2025-07-01 - The E-Group debriefs in the first E-Group Meeting after the Board Meeting.\nBoard Materials\nGitLab uses Nasdaq‚Äôs Boardvantage (NBV) portal for the electronic dissemination and storage of materials relating to GitLab‚Äôs Board Meetings.\nFor a more detailed overview of navigating the NBV portal, please click here to view the\nInternal Reference Guide\n.\nAgenda Details\nKey Board material is presented during Board Meeting sessions. This includes:\nE-Group and CEO memos\nEach E-Group member has a memo with up to four pages with four additional exhibits.\nEach discussion topic has a memo with unlimited exhibits.\nFinance has unlimited exhibits in the memo.\nAnnual Operating Plan can be a memo or slide deck.\nThe Administration Session for Board Committee readouts by the Committee Chairperson updating the Board as to the Committee‚Äôs activities and highlighting the items requiring Board approval, if any.\nQuestions can be asked throughout the meeting. 30 minutes are reserved at the end of the General Session for Q&A / Discussion.\nAt the conclusion of the General Session the E-Group, Observers, CoS to the CEO, Staff EBA, CEO Shadows depart the zoom meeting and the full Board shall meet for a Closed Session.\nBoard Dinner\nWe usually have a Board Dinner on the evening before a Board Meeting. The EBA to the CEO is responsible for coordinating this dinner. Board Members, Local E-Group members, and the CoS to the CEO are all optional attendees. Bios for attendees of the Board Dinner should be sent by the EBA to the CEO 3 business days in advance of the Board Dinner.\nEach quarter, E-Group can choose to invite an additional team member as a Key Talent Guest. If this is desired in a specific quarter, at least a month before the dinner, the CoS to the CEO will gather nominations and ensure that E-Group has identified an invitee. Criteria for consideration includes:\nKey Talent\nHigh performance\nClear results\nFunction (should have representation across functions throughout the year)\nDiversity (participation from members in\nGitLab Team Member Resource Groups\n)\nOnce the Key Talent Guest has been identified, it is the relevant E-Group team member‚Äôs responsibility to ensure that managers of this person are aware of the invite. The EBA to the CEO will then confirm that the guest is able to join. If not, the invite will go to the runner up. Once a Key Talent Guest is confirmed, the EBA to the CEO should enter their name in the\nKey Talent Board Dinner Guests\n.\nGitLab will cover this person‚Äôs travel expenses. A person‚Äôs location will not be considered in the selection criteria though the person‚Äôs travel must be allowed under GitLab‚Äôs\ntravel policies and guidelines\n.\nAs part of joining the dinner, the Key Talent Guest should come prepared to discuss:\nTheir background (both at GitLab and before joining)\nWhat they have accomplished thus far at GitLab\nWhat their plans are both now and in the future and what they see as a future for themselves at GitLab\nThough no formal presentation is required, the Key Talent Guest should advise on how they want to discuss these topics with the Board and E-Group and coordinate with the EBA to the CEO. The EBA to the CEO will ensure that the Key Talent Guest has dedicated time at the dinner.\nKey Talent Board Dinner Guests\nPast and future Key Talent Dinner Guests are listed below.\nDate\nKey Talent Guest\n2021-09-29\nDavid DeSanto\n2021-12-13\nSherrod Patching\n2022-03-21\nChristine Lee\n2022-12-12\nSherida McMullan\nQuarterly AMA with the Board\nBoard Selection Process\nRoles and Responsibilities\nNominating and Corporate Governance Committee\n- Collaborate on Board evolution. Provide recommendations for potential new GitLab BoD members; meet and vet potential new board members; provide feedback on candidates.\nCEO and Selected Members of E-Group also meet and vet potential new Board members; provide feedback on candidates.\n- Nominating and Corporate Governance Committee DRI.\nCEO‚Äôs Staff Executive Business Administrator\n- DRI for Board and Committee scheduling.\nExecutive Recruiter\n- Responsible for drafting communication to potential Board members as well as drafting email communication with Nominating and Corporate Governance Committee when questions arise.\nBoard Onboarding Process\nGitLab New Director Checklist\nBoard member onboarding from an internal processes checklist perspective:\nTo be completed\nprior to\nonboarding:\nResume for our files (can be a printout of LinkedIn)\nOutside counsel to run background check\nD&O questionnaire\nExecuted offer letter\nIndemnification agreement\nIf applicable, UWC to increase Board size\nInform External Communications and Investor Relations\nExternal Comms DRI\nPress release\nInform E-Group\nInform Team Members via Slack announcement\nGitLab New Director Onboarding Checklist\nBoard member onboarding from a GitLab orientation perspective:\nNew Director will be provided with:\nLinks to relevant Handbook pages, including:\nCommittee Membership\nCommittee Charters\nCode of Conduct\nRelated Party Transactions Policy\nBylaws\nCertificate of Incorporation\nAccess to the Legal Board Drive\nOrg chart\nSummary of Director and Officer Liability Insurance\nExecuted Indemnification Agreement\nStaff EBA to the CEO Responsibilities\nUpdate Board distribution list with Board Member and support staff\nSend calendar invites to Board member and support staff for:\nBoard meetings as well as a Board calendar covering meetings for next fiscal year\nBoard dinners\nBoard Committee Meetings (as needed)\nCommit\nContribute\nSales Kickoff\nPresident‚Äôs Club\nUpdate Board Member contact information list and circulate to Board and support staff\nSchedule AMA with New Board member\nSchedule\nFunctional Reviews\nwithin the first month:\nCorporate Strategy (CEO) - 50 mins\nMaterials for meeting: Most recent Board of Directors meeting presentation, Key Review slides, current quarter OKRs. Please do not generate new content. The Staff EBA to the CEO sends material to the new Director at least 72 hours in advance. The meeting is centered around the new Director‚Äôs questions\nGitLab Strategy\n3 year strategy\nCompany KPI‚Äôs\nMitigating Concerns\nFinance (CFO) - 80 minutes suggested\nFinancing profile, liquidity, creditworthiness, credit ratings\nCurrent issues, Board oversight issues\nRisk assessment\nDisclosure controls, internal controls\nInformation systems\nInternal audits\nRole of independent auditor\nCurrent topics, Board oversight\nDiscuss separate meeting with Auditors\nAudit Committee Overview\nLegal, Compliance, Regulatory, Governance (CLO)  - 50 minutes suggested\nLegal matters, if any\nCompliance and regulatory, generally\nCurrent topics, Board oversight\nNominating Corporate Governance Overview\nPeople Group (CPO) - 50 minutes suggested\nCompensation philosophy\nBenefits structure\nEquity plans\nExecutive compensation structure and policy\nDIB overview\nCompensation Committee Overview\nSales (CRO) - 80 minutes suggested\nThe Staff EBA to the CRO sends material to the new Director at least 72 hours in advance.\nMaterials and key topics include: Sales Key Review slides, Sales KPI dashboard, most recent CRO Board Appendix slides and Sales section of the BOD deck, market definition, current organization design, current sales motion, customer motion, sales philosophy and current CRO priorities.\nMarketing (CMO) - 50 minutes suggested\nProduct Overview (EVP, Product, EVP, Engineering, CEO) - 80 minutes suggested\nProduct review\nRoadmap\nSecurity\nInvestor Relations (Sr. Director of IR) - Optional 50 minutes suggested\nIR strategy, shareholder base, external perceptions\nOverview of large investors\nIf available/applicable:\nShare analyst reports from any new banks\nShare copies of recent investor presentations\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3100}
{"doc_id": "fcb6b9eb9735c68c", "url": "https://handbook.gitlab.com/handbook/total-rewards/benefits/general-and-entity-benefits/pty-benefits-australia", "title": "PTY LTD Benefits | The GitLab Handbook", "text": "The Handbook\nGitLab's Guide to Total Rewards\nBenefits\nGeneral & Entity Specific Benefits & Information\nPTY LTD Benefits\nGitLab PTY Australia benefits specific to Australia and New Zealand based team members.\nCan‚Äôt find what you‚Äôre looking for? Try the main\nPeople Operations page\n.\nGitLab PTY Australia Specific Benefits\nFair Work Information Statement\nMedical\nEffective 2023-07-27, all Australian Team members will be eligible to enroll into one of BUPA‚Äôs hospital plans and add/mix it with extra coverage options if you prefer. GitLab employees can mix and match (one Hospital plan level and one Extras option) to suit their needs.\nBUPA Hospital Plan Highlights\nGold (Nil, $250, $500, $750)\nSilver Plus (Nil, $250, $500, $750)\nBUPA Extra Options Highlights\nCorporate 60, 70, 80, & 90 Extras Options\nThe full plan & extra options pdfs are available when reviewing your options on the GitLab BUPA portal (see below ‚ÄúEnrolling‚Äù section).\nWaiting Periods\nFor most services there‚Äôs a period of time before coverage for the services on the new policy starts.\nThe following waiting periods apply for hospital cover:\npalliative care, psychiatric and rehabilitation services ‚Äì two months\npre-existing conditions, ailments or illnesses and pregnancy (including childbirth) ‚Äì 12 months\nall other treatments included in your cover ‚Äì two months.\nemergency ambulance transport or on-the-spot treatment ‚Äì one day\nThe following waiting periods apply for extras cover:\nAll 2 & 6 month waiting periods on ‚ÄúExtra‚Äù options  are waived for GitLab employees.\nmajor dental, root fillings, orthodontics, selected health aids and appliances - 12 months\nemergency ambulance transport or on-the-spot treatment ‚Äì one day\nWaiting period for pre-existing conditions: 12-month waiting period applies for pre-existing conditions; however,\nif a team member has served the waiting period with their previous health provider, they will not need to serve the waiting period when joining GitLab‚Äôs medical offering.\nMonthly Plan Premium\nGitLab will be covering the monthly premium cost\n(up to 350 AUD)\nof your elected coverage to cover yourself and dependents (if applicable).\nPlease note: In addition to the monthly premium credit (up to 350 AUD), GitLab will also cover any fringe benefit tax associated.\nUp to 350 AUD will be applied to your monthly premium rate when going through your enrollment on BUPA‚Äôs employer portal. You will be responsible for paying any premiums that may exceed the 350 AUD applied subsidy.\nPlan rates can be seen through the\nGitLab BUPA employer portal\nwhen reviewing your plan & extra options.\nPayment details will be required to complete your enrollment process on BUPA.\nEnrolling\nStarting on 2023-07-27, Australian team members will be able to review their plan options & rates, elect their hospital plan & extra option, and enroll directly on\nBUPA‚Äôs employer portal\nfor GitLab.\nhttps://www.bupa.com.au/corporate/gitlab\nClick on ‚ÄúGet a quote‚Äù and go through the 6 quick registration questions (residency status, single or family coverage, DOB, State, income bracket, contact details).\nOnce you confirm your details, you‚Äôll be able to view your hospital & extra options, plan pdf summaries, extra highlights, and their monthly plan rates (please ensure ‚Äúpaying‚Äù is set to ‚Äúmonthly‚Äù).\nOnce you ‚Äúselect and proceed‚Äù your preferred coverage, click ‚Äújoin now‚Äù\nYou‚Äôll then need to complete BUPA‚Äôs application process to complete your enrollment: Contact & Medicare details, Rebate application, Payment details, Current health cover information.\nLeavers\nFor Team Members leaving GitLab, their last day on the GitLab BUPA group will be their termination date, however team member‚Äôs health insurance remains in place, with the full cost of cover being their responsibility. BUPA‚Äôs customer care team will reach out to the team member to discuss their options for remaining on cover and to check if they would like to make any changes to the level of cover they‚Äôre enrolled on.\nThe Total Rewards team will inform BUPA of leaves on a monthly basis.\nContact & Support for Enrollment, Plan Questions\nIf you have any questions on the plan, help enrolling on BUPA‚Äôs portal, have any other questions comparing your current plan with BUPA‚Äôs offerings - you can reach out to BUPA for direct plan support at\n1300-662-074\nor utilize their virtual chat support on the portal for basic questions.\nAdditionally, please feel free to reach out to our consultants, WTW, for direct support and assistance on any enrollment, plan, or questions you may have with the medical plan.\nPlease email\npaul.dervan@wtwco.com\nand cc‚Äô\ntotal-rewards@gitlab.com\nSuperannuation\nGitLab will make superannuation contributions directly to the team member‚Äôs nominated super fund according to the Australian Government Super Guarantee rate. Effective 1 July 2025, the superannuation rate is set at 12% of the team member‚Äôs total salary, with a quarterly cap of $7,500 AUD. Super is on top of the salary listed in the compensation calculator/contract.\nSuperannuation payments due dates\nSuper payment due dates has been a common topic in\n#loc_australia\n. However, there is no reason to worry when payments do not happen monthly as they may be done quarterly.\nThe Australian Taxation Office (ATO) states the following:\nYou pay super for eligible employees calculated from the day they start with you. You must make the payments at least four times a year, by the quarterly due dates.\nPayments due dates can be found on the\nATO website\n.\nSuperannuation Salary Sacrifice\nTeam members in Australia have the option to make concessional super contributions by sacrificing some of their pre-tax pay and arrange to have it paid into their superfund instead. Effective July 1, 2024 the combined total of GitLab and salary sacrificed contributions\nmust not be more than $30,000\n, per financial year.\nSalary Sacrifice FAQ\nHow do I make concessional contributions to my superannuation?\nEmail\ntotal-rewards@gitlab.com\nwith the percentage or amount of your salary that you would like to sacrifice.\nCan I change the amount or opt out?\nYes, if you wish to change the amount/percentage or opt out, simply send\ntotal-rewards@gitlab.com\nan email.\nIs it possible to start from any month?\nYes, it would be processed on the next available payroll.\nDoes the payroll provider monitor or stop the concessional cap per year?\nNo, Team Members have no limit on the concessional salary sacrifice. If the contribution goes beyond the annual limit, it will be taxed at a higher rate. The Employer portion, however, stops once it reaches the quarterly cap.\nLife insurance\nGitLab does not plan to offer life insurance at this time as Australians can access\ngovernment payments and services\nif they get ill, injured or have a disability. Most Australians who choose to have life insurance take out cover from their super fund.\nWorkers‚Äô Compensation\nFair Work statement\nGitLab renews the Workers‚Äô Compensation premium annually for each state. Premium are based on the annual declared wages.\nBelow are the list of Workers‚Äô Compensation regulator for each state:\nState\nRegulator\niCare Worker Insurance\nWorkCover\nReturnToWorkSA\nAllianz\nWorkCover\nWorkSafe\nIf you need to file a claim, kindly reach out to the Payroll Team or email\nnonuspayroll@gitlab.com\n.\nOn-Call (Engineering only)\nCertain groups in the Engineering division are expected to participate in on-call for business continuity and/or customer support. For more details on the on-call procedure, please reference the\non-call page\n. The purpose of this section is to provide an overview of\ntime in lieu that will be offered for the Development and Infrastructure departments effective February 1, 2021.\nWe will continue to review and implement to other departments within Engineering iteratively.\nWith our global team, we strive for a ‚Äúfollow the sun‚Äù model for on-call rotation. This way, team members can participate in on-call during their daytime rather than their nighttime in their respective regions (APAC, EMEA and AMER). In APAC, the majority of the team members are located in Australia. We want to ensure engineers in Australia are 1) eligible for on-call shifts, and 2) stay aligned with local laws to ensure proper rest/recovery time after on-call shifts.\nEngineers based in Australia who are part of the Development and Infrastructure departments will be eligible for time in lieu after on-call shifts. Time in lieu is time off from work that is granted to team members to work outside of standard working hours (I.E. ordinary hours).\nHow much time in lieu will I receive for volunteering for on-call shifts?\n4-hour shift = ¬Ω day time in lieu\n8-hour shift = 1 day time in lieu\n24-hour shift = 3 days time in lieu\nFor weekend shifts please be particularly mindful about managing your time to\nensure you are not exceeding a 38 hour work-week\n, and feel free to leverage our\nflexible PTO policy\nto complement time in lieu.\nNote: The full shift (state of readiness) is compensated by time in lieu - rather than only the ‚Äúactual time worked‚Äù\nWhat should I do when I want to take more time off after an on-call shift?\nIf you need additional time to ensure a good work/life balance, on top of the time in lieu, you can leverage our Flexible\nPTO policy as described here\n.\nWhen can time in lieu be taken?\nTime in lieu should be taken\nwithin 2 weeks after completion of the on-call shift\n. We want to ensure that time in lieu is taken close to the on-call shift to ensure that team members have sufficient time to rest.\nDo all on-call shifts result in time in lieu?\nNo, only on-call shifts outside of working hours (I.E. weekends, evenings, etc.).\nPlease note that not all teams require weekend or evening on-call shifts, so this may not be applicable for all.\nHow do I request time in lieu?\nTime in lieu should be requested via Workday by selecting the\nTime Off in Lieu\nunder the\nTime Offs\ndropdown menu option.\nGitLab PTY Australia Annual, Sick and Carer‚Äôs Leave, and Other Statutory Leaves\nAnnual Leave\nFull-time team members are entitled to 4 weeks paid annual leave in accordance with the Fair Work Act 2009 (Cth) per year of continuous service.  This amount will be pro-rated for part-time team members by reference to the team member‚Äôs ordinary hours of work.\nAnnual leave accrues progressively and accumulates from year to year.\nThis leave runs concurrently with GitLab PTO.  Team members should select\nPaid Time Off\nin Workday to ensure that leave entitlements are properly tracked.  For team members who are not covered by a modern award or enterprise agreement, they may be asked to take a period of paid annual leave if such request is reasonable, such as when a team member has accrued an excessive amount of paid annual leave.\nPersonal/Carer‚Äôs Leave\nSick and carer‚Äôs leave (also known as personal leave or personal / carer‚Äôs leave) lets an employee take time off to help them deal with personal illness, caring responsibilities and family emergencies. Team members will be entitled to personal/carer‚Äôs leave in accordance with the Fair Work Act 2009 (Cth) as varied from time to time.\nPaid Personal/Carer‚Äôs Leave:\nCurrently team members are entitled to 10 days of paid personal/carer‚Äôs leave for each year of continuous service for full-time team members and pro rata for part-time team members based on ordinary hours of work.\nPersonal/carer‚Äôs leave is cumulative and accrues progressively.\nThis leave runs concurrently with GitLab‚Äôs Sick Time policy.\nEligibility:\nA team member can take paid carer‚Äôs leave to care for or support a member of their immediate family or household who is sick, injured or has an unexpected emergency.\nAn immediate family member is a:\nspouse or former spouse\nde facto partner or former de facto partner\nchild\nparent\ngrandparent\ngrandchild\nsibling, or\nchild, parent, grandparent, grandchild or sibling of the employee‚Äôs spouse or de facto partner (or former spouse or de facto partner)\n* This definition includes step-relations (for example, step-parents and step-children) as well as adoptive relations\nA household member is any person who lives with the employee\nHow to Apply:\nEmail\nleaves@gitlab.com\nat least 1 day prior to the start date (whenever possible)\nInclude a medical certificate or statutory declaration noting you weren‚Äôt able to work because of an illness or injury, or needed to provide care or support to an immediate family or household member (because of an illness, injury, or unexpected emergency affecting the family member).\nSelect\nOut Sick\nin Workday to ensure that leave entitlements are properly tracked.\nIf you wish to take Carer‚Äôs Leave but don‚Äôt want to change your Slack status to Out Sick, send your Carer‚Äôs Leave request to\nleaves@gitlab.com\nand the Absence Management team will manually add your leave to Workday and notify payroll.\nUnpaid Carer‚Äôs Leave:\nAll team members are entitled to 2 days unpaid carer‚Äôs leave.\nEligibility:\nTeam Members are eligible for 2 days unpaid carer‚Äôs leave each time an immediate family member or household member of the employee needs care and support because of:\nIllness\nInjury or\nAn unexpected emergency\nFull-time team members can only get unpaid carer‚Äôs leave if they don‚Äôt have any paid sick / carer‚Äôs leave left.\nAn immediate family member is a:\nspouse or former spouse\nde facto partner or former de facto partner\nchild\nparent\ngrandparent\ngrandchild\nsibling, or\nchild, parent, grandparent, grandchild or sibling of the employee‚Äôs spouse or de facto partner (or former spouse or de facto partner).\n* This definition includes step-relations (for example, step-parents and step-children) as well as adoptive relations.\nA household member is any person who lives with the employee.\nUnpaid carer‚Äôs leave can be taken:\nIn 1 continuous period (for example, 2 working days in a row) or,\nIn separate periods as agreed between the employee and employer (for example, 4 half days could be taken in a row).\nHow to Apply:\nEmail\nleaves@gitlab.com\nat least 1 day prior to the start date (whenever possible)\nInclude a medical certificate or statutory declaration noting you weren‚Äôt able to work because of an illness or injury, or needed to provide care or support to an immediate family or household member (because of an illness, injury, or unexpected emergency affecting the member).\nSelect\nOut Sick\nin Workday to ensure that leave entitlements are properly tracked.\nIf you wish to take Carer‚Äôs Leave but don‚Äôt want to change your Slack status to Out Sick, send your Carer‚Äôs Leave request to\nleaves@gitlab.com\nand the Absence Management team will manually add your leave to Workday and notify payroll.\nLong Service Leave\nTeam members may be eligible for long service leave in accordance with state/territory based legislation as varied from time to time.\nThis leave runs concurrently with GitLab PTO. Team members should select\nAUS Long Service\nin Workday to ensure that leave entitlements are properly tracked.\nOther Types of Leave\nFamily and Domestic Violence Leave\n* From February 1, 2023 all team members, including part-time and casual employees, are entitled to 10 days of paid family and domestic violence leave each year. This leave will run concurrently with GitLab PTO. Team members should notify the Absence Management team (\nleaves@gitlab.com\n) if they need to make use of this leave.\nFor more information on Family and Domestic Violence Leave, please visit the\nFair Work Ombudsman Website\n.\nResources:\nSafe Steps\nVictims Services\nDomestic Violence Resource Centre Victoria\nJobWatch\nMensLine Australia\nMen‚Äôs Referral Service\nCompassionate and Bereavement Leave\nAll team members are entitled to 2 days of paid compassionate leave if:\nA member of their immediate family or household dies, or contracts or develops a life-threatening illness or injury,\nA baby in their immediate family or household is stillborn,\nThey have a miscarriage,\nTheir current spouse or de facto partner has a miscarriage\nAn immediate family includes:\nspouse or former spouse\nde facto partner or former de facto partner\nchild\nparent\ngrandparent\ngrandchild\nsibling\nImmediate family members may also include:\nthe immediate family of the employee‚Äôs spouse or de facto partner (or former spouse or de facto partner)\nstep-relations (for example, step-parent and step-child)\nadoptive relations\nTeam Members can take compassionate leave for other relatives (for example, cousins, aunts and uncles) if they are a member of the employee‚Äôs household or if their employer agrees.\nThis leave runs concurrently with GitLab PTO. Team members should select\nBereavement Leave\nin Workday to ensure that leave entitlements are properly tracked.\nPublic Holidays\nAll team members are entitled to at least their base pay rate for all hours worked on\npublic holidays\n.\nTeam members who take time off for public holidays are entitled to their base pay rate for the ordinary hours they would have worked. GitLab encourages all team members to take time off for the holidays they observe.\nTeam members must select\nPublic Holiday\nin Workday to ensure that statutory entitlements are properly tracked.\nCommunity Service Leave\nAll team members are entitled to unpaid community service leave for voluntary emergency management activities. Team members are also entitled to paid community service leave for jury duty.\nA team member engages in a voluntary emergency management activity if:\nThe activity involves dealing with an emergency or natural disaster\nThe team member engages in the activity on a voluntary basis if:\nThe team member was either requested to engage in an activity, or it would be reasonable to expect that such a request would have been made if circumstances had permitted, and\nThe team member is a member of, or has a member-like association with a recognized emergency management body. More information can be found on the\nFairWork Ombudsman Website\n.\nJury Duty\nTeam members are entitled to ‚Äúmake-up pay‚Äù for the first 10 days of jury selection and jury duty. GitLab will supplement the difference between the amount that the team member has been paid and their ordinary pay to ensure that the team member receives 100% of their salary for the first 10 days of jury duty/selection.\nThis leave runs concurrently with GitLab PTO. Team members must select\nMilitary Leave\nunder the\nLeaves\ndropdown menu in Workday to ensure that statutory entitlements are properly tracked.\nTeam members must notify their manager of the period or expected period of leave as soon as possible and provide evidence showing they attended jury selection or jury duty.\nGitLab PTY Australia Parental Leave\nStatutory Leave Entitlement\nAll team members are entitled to up to 12 months of unpaid parental leave if they have been at GitLab for at least 12 months. They can also request up to 12 months of additional unpaid parental leave.\nAustralian Government Parental Leave Payment\nTeam members may be eligible for pay from either or both of the following:\nAustralia‚Äôs Government Parental Leave Pay Scheme\nGitLab‚Äôs Parental Leave\nEligible employees who are the carer of a child born or adopted from 1 July 2024 can get up to 22 weeks‚Äô Parental Leave Pay, which is paid at the National Minimum Wage.  For more information visit [Services Australia‚ÄØ‚Äì Parental Leave Pay] (\nhttps://www.servicesaustralia.gov.au/parental-leave-pay\n)\nIf you are applying for government-funded Parental Leave Pay, you can apply up to 3 months before your child‚Äôs due date.\nApplying for Parental Leave in Australia\nTo initiate your parental leave, please enter the dates of your leave into Workday by selecting the\nParental Leave\nlabel.\nRecord-keeping for paid Parental Leave:\nIn addition to the usual record-keeping requirements, employers that have team members getting government-funded Parental Leave Pay also have to keep the following records:\nthe amount of Parental Leave Pay funding received from the government for each team member and the period it covers\nthe date each parental leave payment was made to the team member\nthe period each payment covers\nthe gross amount of the payment\nthe net amount paid and the amount of income tax withheld (including other payments, if any, were made)\na statement identifying the payment as Parental Leave Pay under the Australian Government Paid Parental Leave Scheme\nthe amount of any deductions made from each payment.\nPay slips for Parental Leave payments:\nTeam members who get Australian Government Parental Leave Pay have to be given a pay slip for each payment. The pay slip must specify that the payments are Parental Leave Pay under the Australian Government Paid Parental Leave Scheme.\nOrdinary pay slip requirements apply to pay slips given to team members getting government-funded Parental Leave Pay.\nGitLab PTY Australia Right to Disconnect\nAt GitLab (the ‚ÄúCompany‚Äù), we care about the safety, health, and well-being of all team members and focus not on hours worked but rather on\nasynchronous communication\nand results. We believe that\nfamily and friends come first and work comes second\n. In line with the Company‚Äôs values, we understand that ‚Äú\nunplugging\n‚Äù from work is essential to a\nhealthy and balanced life\n. Technological advancements, global events, and work demands can sometimes make us forget that we need a break to recharge.\nTeam members are expected to disconnect from work and work-related communications outside of normal working hours and during PTO and there are many suggestions in the Handbook for\ncommunicating when you will be away\nso other people can manage their time efficiently, projects don‚Äôt slip through the cracks, and so that team members are not disturbed while away.\nThis guidance reminds team members in Australia of their workplace right to disconnect (codified from 26 August 2024) and how the Company is committed to supporting team members in doing so.\nThe right to disconnect means that a team member is not required, outside of their working hours, to monitor, read or respond to contact, or attempted contact, from an employer or a third party (where the contact relates to their work), unless it would be unreasonable to refuse.\nIn addition to the suggestions for communicating when you will be away, take a look at these tips to increase a team member‚Äôs ability to disconnect from work:\nunsubscribe from any MRs that will likely resolve while you‚Äôre away, and then you won‚Äôt have to deal with all the emails from them when you return;\nset up some email filters to move emails into buckets that you can address one-at-a-time when you return;\ndisconnect yourself from Slack and Gmail in any of these ways (*note: Workday is supposed to turn off Slack notifications on your phone and set DND mode):\nlog out from Slack and Gmail on your phone, or\nremove Slack and Gmail from your phone, or\npause the Slack and Gmail apps on your phone, or\nmanually configure Slack and Gmail not to send notifications on your phone\nAt GitLab, team members should communicate respectfully and professionally at all times, in line with the Company‚Äôs values, with a bias towards asynchronous communication and documentation-first and should\nassume positive intent in dealings with others\n(including in relation to the tone and timing of communications).\nIn considering whether contact is unreasonable, think about:\nthe reason for contact;\nhow contact might be made and the level of disruption contact may cause;\nthe extent to which the team member is being compensated (eg with time off after an on-call rotation):\nto remain available to perform work during the period in which contact is made; or\nfor working additional hours outside of their ordinary hours of work;\nthe nature of the team member‚Äôs role and their level of responsibility; and\nthe team member‚Äôs personal circumstances.\nIn case of an issue arising relating to whether a team member has reasonably (or unreasonably) refused to monitor or respond to contact, the team members involved are encouraged to raise the issue with their manager or contact\nTeam Member Relations\n.\nThe FWC will update all modern awards to incorporate the right to disconnect in due course and awards can be checked\nhere\n.\nGitLab PTY New Zealand Specific Benefits\nMedical\nEffective 2024-02-01, GitLab offers Eligible New Zealand Team members a comprehensive medical plan\n‚ÄúWell Being Two‚Äù\nvia Southern Cross.\nGitLab covers 100% of the Team Member costs for the plan. Eligible family members can be added to the plan at a significant discount. Eligible Team Members who wish to add their family members to the plan can arrange ongoing direct debit billing directly with Southern Cross.\nThe plan offers immediate cover for qualifying pre-existing conditions if you sign up within 90 days of the plans commencement date or team member‚Äôs start date (whichever is later).\nPlease note this benefit is considered a ‚ÄúFringe Benefit‚Äù and will be subject to Fringe Benefit Tax. The benefit is optional and team members are not required to enroll.\nGitLab retains the right to replace the provider or policy at any time and is not required to offer this benefit to those that may be ineligible. Any benefits provided under the plan do not impact the Team Member‚Äôs or GitLab‚Äôs rights to end the employment relationship.\nFor additional details please refer to the\nBenefit Summary\n, and the full\nPolicy\nFor a full overview of the plan please view our\n2024 New Zealand Webinar\nFor questions regarding the plan or enrollment please contact WTW:\nemail:\nbenefits.nz@willistowerswatson.com\ntelephone: 0800 329 920\nEnrollment for Eligible New Hires and Family Members\nEligible New Hires will be given a link and an access code on their onboarding issue to register for the plan on the Southern Cross portal. Eligible Team Members may also receive an email shortly after their start date with a link to the portal as a reminder of the benefit. The plan will commence once registration is completed.\nEligible Team Members and their families can join the plan at any time, but please note that the plan offers immediate cover qualifying pre-existing conditions only if you sign up within 90 days of your start date.\nAdding a new-born child\nThe special pre-existing condition cover concession above is extended to a newborn child if they are\nadded to the policy within three months of the child‚Äôs birth. Congenital conditions are not covered, please refer to the policy document to review all exclusions. Please contact WTW (\nbenefits.nz@willistowerswatson.com\n) by email to help add members to your policy.\nMedical Plan Administration Details\nNew Hires\nEligible New Hires will be given a link and code to access the portal and enroll in the plan during their onboarding issue\nTotal Rewards will also send a monthly report to WTW with new hires as a backup (This process will soon be replaced by automated notifications from Workday)\nWTW will have Southern Cross email the eligible new hire with enrollment instructions.\nLeavers\nTotal rewards will send a monthly report to WTW with leavers (this process will soon be replaced by automated notifications from Workday) - Terminations need to be updated no later than 1 month after the termination date to avoid any overcharging.\nPayroll Reporting\nSubsidies for Health insurance are considered a non-cash benefit and are therefore subject to ‚ÄúFringe Benefit Tax‚Äù and must be reported as such.\nThe Southern Cross portal will generate reports outlining the benefit. The payroll team will have access to the Southern Cross portal to download these reports as needed.\nInvoicing\nSouthern Cross will load invoices and cover schedules on a monthly basis to the portal. The contact person at GitLab will be notified whenever a new invoice is ready. Payments will be made via bank transfer.\nAnnual Leave\nTeam members are entitled to a minimum of four weeks‚Äô annual leave per year. Annual leave does not expire and can be carried over each year, but GitLab may set expectations on how much annual leave employees may accumulate and may require employees to take entitled leave with 14 days notice. Annual leave runs concurrently with GitLab PTO. Team members must select the\nPaid Time Off\noption in Workday when taking vacation time to ensure that annual leave entitlement is properly tracked.\nOn-Call (Engineering-only)\nNew Zealand employment law requires that work on a formal\nPublic Holiday\n, including\non-call\n, is compensated with time-in-lieu. Overtime pay is also required in certain situations, for example: whether the on-call shift fell on a ‚Äúnormal‚Äù working day or not, and whether the team member was called to work during their on-call shift. The policy linked above covers for the\ntime-in-lieu requirement\nbut we do not yet have a set mechanism for handling overtime pay requirements.\nNew Zealand-based team members\nmay not be on-call on a New Zealand Public Holiday\n, and must seek/find a replacement for any shifts where they may be indicated as being on call on a Public Holiday. To ensure we remain compliant with local laws we team members to consider local laws when volunteering for/accepting shifts.\nThe process is as follows:\nWhen scheduling we should avoid on-call taking/assigning on-call shifts on Public Holidays. A ‚ÄúPublic Holiday‚Äù will be deemed as any day included in the official holidays on\nthis website\n.\nIf a team member is assigned for an on-call shift that falls on a Public Holiday, they need to align with their manager and try to find a replacement for that shift.\nIf it‚Äôs impossible to find a replacement and the team member ends up taking the on-call shift on a Public Holiday, the process to follow is:\nTeam member should obtain manager approval for taking the shift.\nIf the team member is not called in to work during their on-call shift, a regular time-in-lieu compensation for the shift should be applied.\nIf the team member is called in to work during their on call shift, they are responsible for recording their hours worked during the shift and report to payroll/manager in order for overtime payment processing.\nNote: To stay in compliance with local laws we would follow\nthe New Zealand government website\nwith regards to compensation for worked time during on-call.\nStatutory Sick Leave\nTeam members in New Zealand are entitled to 10 days‚Äô of statutory sick leave after six months of current continuous employment with GitLab. For each 12 months after meeting the above criteria, each team member gets at least ten days sick leave.\nIf in any year the team member doesn‚Äôt meet the criteria, then they don‚Äôt get any new sick leave entitlement, but can use their sick leave balance which may have carried over. An employee may re-qualify for sick leave as soon as they meet the criteria.  The maximum amount of sick leave that can be accumulated under the Holidays Act 2003 is 20 days.\nSick Leave runs concurrently with GitLab‚Äôs\nSick Time Policy\n.\nHow to Apply:\nTeam members must contact\nleaves@gitlab.com\nwhen reporting their leave.\nIn accordance with the Holidays Act, GitLab may require a medical certificate\nDesignate any time off for illness as\nOut Sick\nin Workday to ensure that sick leave entitlement is properly tracked.\nUnused sick leave will not be paid out to the team member upon termination of employment.\nInjured Leave\nWhen the team member is taking leave for the first week of a non-work accident, they can use sick leave and/or annual leave if they have any. This leave runs concurrently with GitLab PTO/Sick Time.\nHow to Apply:\nTeam members must notify the Absence Management team (\nleaves@gitlab.com\n) as soon as possible when they will need to go out on injured leave.\nTeam members must designate time off for injury as\nOut Sick\nor\nVacation\nin Workday if they wish to use sick leave or annual leave for the first week of an injury.\nIf the leave will last longer than five days and is\ncovered by the Accident Compensation Corporation (ACC) scheme\n, GitLab will top up the ACC payment from 80 to 100% for the first 25 days.\nGitLab PTY New Zealand Parental Leave\nStatutory Leave Entitlement\nPrimary Carer Leave\nTeam members who have been employed for at least six months and become a ‚ÄúPrimary Carer‚Äù as defined under the Parental Leave and Employment Protection Act 1987 can receive government-funded parental leave pay (Primary Carer Leave).\nA Primary Carer is either the biological mother OR a person (that is not the biological mother or her spouse/partner) who will take primary responsibility for the care, development, and upbringing of a child under six years old on a permanent basis.\nPrimary Carer Leave can last up to 26 weeks and must be taken in one continuous period.\nPrimary Carer Leave typically starts on the due date or date of birth, but may begin up to 6 weeks earlier if arrangements are made between the team member and manager.\nParental Leave\nExtended Leave\nTeam members who have been employed for at least six months, but less than twelve and are eligible under the Parental Leave and Employment Protection Act 1987 are entitled to up to a total of 26 weeks of unpaid leave (less time taken for Primary Carer Leave, if applicable).\nTeam members who have been employed for at least twelve months and are eligible under the Parental Leave and Employment Protection Act 1987 are entitled to up to 52 weeks of unpaid leave (less time taken for Primary Carer Leave. A maximum of 26 weeks may be deducted from extended leave).\nSpecial Leave\nTeam members who are pregnant can also take up to 10 days of unpaid special leave for pregnancy-related reasons such as antenatal classes, scans, or midwife appointments. This is in addition to primary carer leave.\nThis leave will run concurrently with GitLab PTO.\nIf you do not want to select\nOut Sick\nin Workday, you may email\nleaves@gitlab.com\nwith the date(s) that you will be taking special leave.\nPartner Leave\nIf you are a spouse or partner of a primary carer and have been employed for at least six months, but less than twelve months, you are entitled to one week of unpaid partner‚Äôs leave.\nIf you are a spouse or partner of a primary carer and you have been employed for at least twelve months, you are entitled to two weeks of unpaid partner‚Äôs leave.\nPartner Leave will run concurrently with GitLab Parental Leave and provide up to 100% of a team member‚Äôs regular salary for up to 16 weeks.\nTeam members must select\nParental Leave\nin Workday to ensure that their time off is properly tracked.\nApplying for Parental Leave in New Zealand\nTo initiate your parental leave, submit your time off by selecting the\nParental Leave\ncategory in Workday at least 30 days before your leave starts.\nPlease familiarize yourself with\nGitLab‚Äôs Parental Leave policy\n.\nTo apply for government-funded Parental Leave pay, please submit your application via\n.\nIf there is anything GitLab needs to provide, please let the Absence Management team know by emailing leaves@domain\nIf you are\neligible\n, GitLab will supplement the government-funded payment to ensure that you receive 100% pay for up to 16 weeks of your Parental Leave.\nOther Types of Leave\nLeave for Defence Force Volunteers\nUnder the Volunteers Employment Protection Act 1973, all team members who are members of the Armed Forces are entitled to unpaid job-protected leave during military training and/or service.\nThis leave runs concurrently with GitLab PTO for up to 25 days.\nHow to Apply:\nTeam members must email the Absence Management team\nleaves@gitlab.com\nas soon as possible to notify them of the first date of leave and, if possible, the end date of their leave.\nTeam members must select\nMilitary Leave\nin Workday to ensure that statutory entitlements are properly tracked.\nFor more information related to this policy, please reivew the\nEmployment New Zealand website\nElection Voting Leave\nTeam members are entitled to 2 hours of paid time off to vote in general (parliamentary) elections on polling day if they are registered as an elector of the district and have not had a reasonable opportunity to vote before starting work. GitLab encourages you to\ntake time off to vote\nor volunteer at the polls.\nThis leave runs concurrently with GitLab PTO. Team members must select\nPaid Time Off\nin Workday to ensure that statutory entitlements are properly tracked.\nFor more information related to this policy, please reivew the\nEmployment New Zealand website\nJury Service\nAll team members who have been called for jury service are entitled to unpaid leave for the duration of the service. Team members who attend jury service receive an attendance fee from the Ministry of Justice.\nJury Service Leave runs concurrently with GitLab PTO. Team members must select\nJury Duty\nin Workday to ensure that statutory entitlements are properly tracked.\nFor more information related to this policy, please reivew the\nEmployment New Zealand website\nBereavement Leave\nAll team members who have been employed for six months are entitled to three days of paid leave in the event of the death of a spouse or partner, parent, child, sibling, grandparent, grandchild, or parent of a spouse or partner, and one day in the event of the death of another person not previously listed.\nThis leave runs concurrently with GitLab PTO. Team members must designate this time off as\nBereavement Leave\nin Workday to ensure that statutory entitlements are properly tracked.\nAll team members who have been employed for six months are entitled to three days paid leave if a pregnancy ended by way of a miscarriage or still-birth in circumstances that give rise to an entitlement to bereavement leave under the Holidays Act 2003.\nFor more information related to this policy, please reivew the\nEmployment New Zealand website\n.\nFamily Violence Leave\nAll team members who have been employed for a six month continuous period are entitled to 10 days of paid leave if they have been affected by family violence.\nThis leave may also be taken to support a child who has experienced domestic violence as long as they live with the team member for some of the time.\nA person is affected by family violence if they are a person against whom any other person is inflicting, or has inflicted family violence, and/or a person with whom there ordinarily or periodically resides a child against whom any other person is inflicting or has inflicted, family violence.\nTeam members may also request\nshort-term flexible working arrangements\nfor up to 2 months.\nThis leave runs concurrently with GitLab PTO. Team members should notify the Absence Management team (\nleaves@gitlab.com\n) if they need to make use of this leave.\nTeam members must designate this time off as\nOut Sick\nin Workday to ensure that statutory entitlements are properly tracked.\nFor more information regarding this policy, please reivew the\nEmployment New Zealand website\n.\nGarden Leave\nA GitLab team member may use Garden Leave when they have provided their resignation and a Garden Leave is mutually agreed upon by both the team member and GitLab.  Team members can not be forced to take a Garden Leave, but both the team member and GitLab may find it useful in the following situations:\nThe team member has access to commercially sensitive information and is going to be working for a competitor at the end of their notice period. Any limit of trade provision would take effect after the employee‚Äôs employment ends.\nHowever, employers should be aware that if an employee‚Äôs employment agreement contains both a garden leave provision and a restraint of trade provision, the period the employee is on garden leave may be taken into consideration in working out whether or not the restraint of trade provision is reasonable (and therefore enforceable). The restraint of trade provision takes effect after the end of the garden leave period.\nIs distracting other team members while they‚Äôre in their notice period\nIs being made redundant and the employer is not requiring them to report to work during their notice period so they can look for other job opportunities while they can still say they‚Äôre currently employed\nHas been dismissed on notice and their presence is creating an uncomfortable atmosphere for everyone.\nLeave Without Pay\nLeave without pay is when GitLab allows an team member time off work when they would otherwise be working, but doesn‚Äôt pay them for this time. Leave without pay (LWOP) doesn‚Äôt end an team member‚Äôs employment, and usually the team member returns to their same position and terms and conditions after taking leave without pay (unless the employee and team member agree otherwise). Leave without pay can affect the employee‚Äôs annual holidays payment and entitlement in some situations.\nTeam members must designate this time off as\nOut Sick\nin Workday.\nFor more information regarding Leave without Pay, please review the\nEmployment New Zealand‚Äôs website\n.\nLong Service Leave\nWhile not a legal requirement, long service leave may be negotiated between a team member and GitLab as additional entitlements under their employment agreement.\nThis leave runs concurrently with GitLab PTO. Team members must designate this time off as\nPaid Time Off\nin Workday.\nPension\nGitLab‚Äôs KiwiSaver contributions will be 3% on top of base salary. Team members will automatically be enrolled in the KiwiSaver scheme but may elect to opt out within the first 56 days of employment. To opt-out they should follow the\nprocess on IRD site\n. GitLab will deduct a participating team member‚Äôs contributions from their before-tax pay at the team member‚Äôs chosen contribution rate (3%, 4%, 6%, 8% or 10%). If a team member does not choose a contribution rate, the default rate of 3% will be used to calculate deductions.\nLife Insurance\nGitLab does not plan at this time to offer Life Insurance benefits because New Zealanders can access\ngovernment payments and services\nto help if they get ill, injured or have a disability.\nLast modified July 14, 2025:\nUpdate ATO super due dates website (\n9cc5c8ce\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6858}
{"doc_id": "ef0ad310ed95dc27", "url": "https://handbook.gitlab.com/handbook/product/categories", "title": "Product sections, stages, groups, and categories | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct sections, stages, groups, and categories\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nInterfaces\nWe want intuitive interfaces both within the company and with the wider\ncommunity. This makes it more efficient for everyone to contribute or to get\na question answered. Therefore, the following interfaces are based on the\nHome page\nProduct page\nProduct Features\nPricing page\nDevOps Lifecycle\nDevOps Tools\nProduct Direction\nStage visions\nDocumentation\nEngineering\nEngineering Manager/Developer/Designer titles, their expertise, and department, and team names.\nProduct manager\nOur pitch deck\n, the slides that we use to describe the company\nStrategic marketing\nspecializations\nHierarchy\nThe categories form a hierarchy:\nSections\n: Are a collection of stages. We attempt to align these logically along common workflows like Dev, Sec and Ops.\nSections are maintained in\ndata/sections.yml\n.\nStages\n: are maintained in\ndata/stages.yml\n.\nEach stage has a corresponding\ndevops::<stage>\nlabel\nunder the\ngitlab-org\ngroup.\nGroup\n: A stage has one or more\ngroups\n.\nGroups are maintained in\ndata/stages.yml\n.\nEach group has a corresponding\ngroup::<group>\nlabel\nunder the\ngitlab-org\ngroup.\nCategories\n: A group has one or more categories. Categories are high-level\ncapabilities that may be a standalone product at another company. e.g.\nPortfolio Management. To the extent possible we should map categories to\nvendor categories defined by\nanalysts\n.\nThere are a maximum of 8 high-level categories per stage to ensure we can\ndisplay this on our website and pitch deck.\n(Categories that do not show up on marketing pages\nshow up here in\nitalics\nand do not count toward this limit.) There may need\nto be fewer categories, or shorter category names, if the aggregate number of\nlines when rendered would exceed 13 lines, when accounting for category names\nto word-wrap, which occurs at approximately 15 characters.\nCategories are maintained in\ndata/categories.yml\n.\nEach category has a corresponding\nCategory:<Category>\nlabel\nunder the\ngitlab-org\ngroup. Category maturity is managed in the product\nCategory Maturity Change\nprocess\nFeatures\n: Small, discrete functionalities. e.g. Issue weights. Some\ncommon features are listed within parentheses to facilitate finding\nresponsible PMs by keyword.\nFeatures are maintained in\ndata/features.yml\n.\nIt‚Äôs recommended to associate\nfeature labels\nto a category or a group with\nfeature_labels\nin\ndata/categories.yml\nor\ndata/stages.yml\n.\nNotes:\nGroups may have scope as large as all categories in a stage, or as small as a single category within a stage, but most will form part of a stage and have a few categories in them.\nStage, group, category, and feature labels are used by the automated triage\noperation\n‚ÄúStage and group labels inference from category labels‚Äù\n.\nWe don‚Äôt move categories based on capacity. We put the categories in the stages where they logically fit, from a customer perspective. If something is important and the right group doesn‚Äôt have capacity for it, we adjust the hiring plan for that group, or do\nglobal optimizations\nto get there faster.\nWe don‚Äôt have silos. If one group needs something in a category that is owned by another group, go ahead and contribute it.\nThis hierarchy includes both paid and unpaid features.\nNaming\nAnytime one hierarchy level‚Äôs scope is the same as the one above or below it, they can share the same name.\nFor groups that have two or more categories, but not\nall\ncategories in a stage, the group name must be a\nunique word\nor a summation of the categories they cover.\nIf you want to refer to a group in context of their stage you can write that as ‚ÄúStage:Group‚Äù. This can be useful in email signatures, job titles, and other communications. E.g. ‚ÄúMonitor:Health‚Äù rather than ‚ÄúMonitor Health‚Äù or ‚ÄúMonitor, Health.‚Äù\nWhen naming a new stage, group, or category, you should search the handbook and main marketing website to look for other naming conflicts which could confuse customers or employees. Uniqueness is preferred if possible to help drive clarity and reduce confusion. See additional\nproduct feature naming guidelines\nas well.\nMore Details\nMarketing product page > docs page > direction page\nE.g Link the marketing page. If there‚Äôs no marketing page, link to the docs. If there‚Äôs no docs, link to the direction page.\nSolutions\ncan consist of multiple categories and are typically used to align to a customer challenge (e.g. the need to reduce security and compliance risk) or to market segments defined by analysts such as Software Composition Analysis (SCA). Solutions are also often used to align to challenges unique to an industry vertical (e.g. financial services), or to a sales segment (e.g. SMB vs Enterprise).\nSolutions typically represent a customer challenge, and we define how GitLab capabilities come together to meet that challenge, with business benefits of using our solution.\nMarket segments defined by analysts don‚Äôt always align to GitLab stages and categories and often include multiple categories. Two most frequently encountered are:\nSoftware Composition Analysis (SCA) = Dependency Scanning + License Compliance + Container Scanning\nEnterprise Agile Planning (EAP) = Team Planning + Planning Analytics + Portfolio Management + Requirements Management\nWe are\nintentional in not defining SCA as containing SAST and Code Quality\ndespite some analysts using the term to also include those categories.\nCapabilities\nCapabilities can refer to stages, categories, or features, but not solutions.\nLayers\nAdding more layers to the hierarchy would give it more fidelity but would hurt\nusability in the following ways:\nHarder to keep the\ninterfaces\nup to date.\nHarder to automatically update things.\nHarder to train and test people.\nHarder to display more levels.\nHarder to reason, falsify, and talk about it.\nHarder to define what level something should be in.\nHarder to keep this page up to date.\nWe use this hierarchy to express our organizational structure within the Product and Engineering organizations.\nDoing so serves the goals of:\nMaking our groups externally recognizable as part of the DevOps lifecycle so that stakeholders can easily understand what teams might perform certain work\nEnsuring that internally we keep groups to a reasonable number of stable counterparts\nAs a result, it is considered an anti-pattern to how we‚Äôve organized for categories to move between groups out\nof concern for available capacity.\nWhen designing the hierarchy, the number of sections should be kept small\nand only grow as the company needs to re-organize for\nspan-of-control\nreasons. i.e. each section corresponds to a Director of Engineering and a\nDirector of Product, so it‚Äôs an expensive add. For stages, the DevOps loop\nstages should not be changed at all, as they‚Äôre determined from an\nexternal\nsource. At some point we may\nchange to a different established bucketing, or create our own, but that will\ninvolve a serious cross-functional conversation. While the additional value\nstages are our own construct, the loop and value stages combined are the primary\nstages we talk about in our marketing, sales, etc. and they shouldn‚Äôt be changed\nlightly. The other stages have more flexibility as they‚Äôre not currently\nmarketed in any way, however we should still strive to keep them as minimal as\npossible. Proliferation of a large number of stages makes the product surface\narea harder to reason about and communicate if/when we decide to market that\nsurface area. As such, they‚Äôre tied 1:1 with sections so they‚Äôre the\nminimal number of stages that fit within our organizational structure. e.g.\nGrowth was a single group under Enablement until we decided to add a Director\nlayer for Growth; then it was promoted to a section with specialized\ngroups under it. The various buckets under each of the non-DevOps stages are\ncaptured as different groups. Groups are also a non-marketing construct, so we\nexpand the number of groups as needed for organizational purposes. Each group\nusually corresponds to a backend engineering manager and a product manager, so\nit‚Äôs also an expensive add and we don‚Äôt create groups just for a cleaner\nhierarchy; it has to be justified from a\nspan-of-control\nperspective or limits to what one product manager can handle.\nCategory Statuses\nCategories can have varying level of investment and development work. There are four main investment statuses:\nAccelerated - Top category for product strategy that has received additional investment in the next year\nSustained - Categories where new features will be added in the next year\nReduced - Categories where scope and ambition is decreased although, new features will still be added in the next year\nMaintenance - Categories where no new features will added\nTypically, product direction pages will transparently state the investment status of the category for the fiscal year based on annual product themes and investment levels.\nChanges\nThe impact of changes to sections, stages and groups is felt\nacross the company\n.\nAll new category creation needs to be specifically approved via our Opportunity Canvas review process. This is to avoid scope creep and breadth at the expense of depth and user experience.\nMerge requests with\nchanges to sections, stages and groups and significant changes to categories\nneed to be created, approved, and/or merged by each of the below:\nChief Product Officer\nPLT Leader relevant to the affected Section(s)\nThe Director of Product relevant to the affected Section(s)\nThe Director of Engineering relevant to the affected Section(s)\nDirector of Product Design\n_\nNote:\nChief Product Officer approval should be requested once all other approvals have been completed. To request approval, post the MR link in the #chief-product-officer channel tagging both the Chief Product Offcer and cc‚Äôing the EBA to the Chief Product Officer.\nThe following people need to be on the merge request so they stay informed:\nChief Technology Officer\nDevelopment Leader relevant to the affected Section(s)\nVP of Infrastructure & Quality Engineering\nVP of UX\nDirector, Technical Writing\nEngineering Productivity (by @ mentioning\n@gl-quality/eng-prod\n)\nThe Product Marketing Manager relevant to the stage group(s)\nAfter approval and prior to merging, ping the Engineering Manager for Quality Engineering  in the MR, if there are changes that:\nAdd a new category, group, stage or section\nMove an existing category to a new or existing group\nMove an existing group to a new or existing stage\nMove an existing stage to a new or existing section\nRename a group, stage or section\nDelete a group, stage or section\nThis is to ensure that\nGitLab Bot auto-labeling\ncan be updated prior to the change, which can be\ndisruptive if missed\n.\nUpon approval, tag the group Technical Writer in the merge request to ensure\ndocumentation metadata\nis updated after the category change is merged.\nEnsure that relevant slack channels are updated following our\nslack channel naming convention\n, open an\naccess request\nto have slack channel names updated as they can no longer be updated by creators.\nExamples\nBecause it helps to be specific about what is a significant change and what should trigger the above\napproval process, below are non-exhaustive lists of examples that would and would not, respectively, require full approvals as outlined above.\nChanges that require the above approvers include:\nChanges to a section, stage, group, or category name or\nmarketing\nattribute\nRemoval or addition of a section, stage, group, or category\nChanges that require approval only from the relevant\nProduct Leadership Team\nmember include:\nChanging name or removing a non-marketing category, per the\nmarketing\nattribute.\nChanges that require approval only from the relevant Product Director include:\nChanging a category maturity date\nChanges to section or group member lists\nChanges to a category vision page\nChanging group name\nWhen changing the name of a group, create a merge request to change the group name in\ndata/stages.yml\nusing the\nGroup-Stage-Category-Change\ntemplate,\nand make sure to complete all the steps in the template.\nWhen changing the team tags, such as\nbe_team_tag\n, ensure that each team member‚Äôs individual\ndata/team_members/person/\nYAML has the relevant\ndepartments\nentry updated. Alternatively, if the team tag is missing, add the tag under the list of\ndepartments\nas the second or lower entry. The first\ndepartments\nentry is controlled by the Workday sync and will be overwritten.\nWhen deciding on the naming, ensure that each team tag is unique. For example,\nsre_team_tag\nshould have a different value compared to\nbe_team_tag\n. If they are the same, then all team members with the tag with be displayed, duplicating the list for BE and SRE.\nChanging category name\nWhen changing an existing category name, there are some considerations to the order of events:\nFirst, create a MR to change the name in\ndata/stages.yml\nand\nspec/homepage/category_spec.rb\n.\nGet sign off from all required stakeholders listed in the instructions above.\nMerge the name change MR.\nTag the category‚Äôs technical writer so that they can update the documentation metadata\nRe-name the category\ndirection page\nwith a new MR. Search for the old category name on the category direction page to ensure the name has been updated in all places.\nUse the\n#it-help\nSlack channel to request an update to Slack channel name for the re-named category\nChanging category maturity\nWe primarily use the\nCategory Maturity Scorecard\nprocess to determine category maturity.\nTypically, category maturity moves up from planned to minimal to viable to complete to lovable. However, maturity can also be downgraded. For example, in cases where we discover a JTBD is not met (see\nexample\n), or when we\nchange the definition of maturity\n, we may choose to move category maturity down.\nWhen downgrading product maturity, we adjust our customer‚Äôs current expectations about our product. This is particularly impactful to our go-to-market team members in customer success and product marketing. We need to do the following to enable alignment between all affected and interested parties:\nRaise an MR for the downgrade and clearly state the reasons for change in the description (see\nexample\n)\nInform VP, Product Management by adding them as Reviewer on the MR\nNotify the product group counterparts in the MR; Product Marketing, Product Designer, Engineering Manager, and Technical Writer\nPost the MR in the\n#customer-success slack channel\nprior to merging, to allow the team to assess impact and adjust\nPost the MR in the\n#product slack channel\nfor awareness\nDevOps Stages\nAnalytics section\nSlack Channel\n#analytics-section\nHandbook Page\nDevelopment\nTim Zallmann\nUX Research\nNick Hertz\nLegal & Corporate Affairs\nEugene McCrann\ngraph TD;\nanalytics[Analytics section]-->s_monitor[Monitor stage];\ns_monitor-->g_analytics_instrumentation[\"Analytics Instrumentation\ngroup\"];\nclick g_analytics_instrumentation \"/handbook/<no value>\";\ns_monitor-->g_platform_insights[\"Platform Insights\ngroup\"];\nclick g_platform_insights \"/handbook/<no value>\";\nClick on a group name to see more details.\nMonitor stage\nSlack Channel\n#analytics-section\nHandbook Page\nDevelopment\nTim Zallmann\nSoftware Engineer in Test\nIevgen Chernikov\nUX Research\nNick Hertz\nAnalytics Instrumentation group\nSlack Channel\n#g_analyze_analytics_instrumentation\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nTanuja Jayarama Raju\nBackend Engineering Manager\nAshwin Bilgi\nBackend Engineering\nAnkit Panchal\nSebastian Rehm\nJonas Larsen\nMicha≈Ç Wielich\nNiko Belokolodov\nNwanna Isong\nSarah Yasonik\nUX Research\nNick Hertz\nInternal Customers\nSales Department\nMarketing Department\nProduct Department\nCustomer Success\nData Team\nName\nMaturity\nLinks\nService Ping\nViable\nDocumentation Page\nApplication Instrumentation\nMinimal\nDirection Page\nPlatform Insights group\nSlack Channel\n#g_monitor_platform_insights\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nLindsy Farina\nBackend Engineering Manager\nNicholas Klick\nBackend Engineering\nAnkit Bhatnagar\nArun Sori\nMax Woolf\nNnamdi Ogundu\nFrontend Engineering\nDaniele Rossetti\nJiaan Louw\nRobert Hunt\nProduct Marketing\nAathira Nair\nInternal Customers\nSales Department\nMarketing Department\nProduct Department\nCustomer Success\nData Team\nInfrastructure Department\nDave Smith\nEngineering Department\nSam Goldstein\nSecurity Operations Department\nSean Gillespie\nName\nMaturity\nLinks\nCustom Dashboards Foundation\nMinimal\nDocumentation Page\nDirection Page\nObservability\nPlanned 2024\nDirection Page\nProduct Analytics\nMinimal\nDocumentation Page\nDirection Page\nIncident Management\nCommunityled\nDocumentation Page\nDirection Page\nOn-call Schedule Management\nCommunityled\nDocumentation Page\nDirection Page\nCD section\nSlack Channel\n#cd-section\nProduct\nMike Flouton\nDevelopment\nSam Goldstein\nProduct Design\nMarcel van Remmerden\nUX Research\nWill Leidheiser\nLegal & Corporate Affairs\nTiffany Chen\ngraph TD;\ncd[CD section]-->s_deploy[Deploy stage];\ns_deploy-->g_environments[\"Environments\ngroup\"];\nclick g_environments \"/handbook/product/categories/#environments-group\";\nClick on a group name to see more details.\nDeploy stage\nSlack Channel\n#s_deploy\nGitLab Group\n@gitlab-org/ci-cd/deploy-stage/environments-group\nHandbook Page\nProduct\nMike Flouton\nDevelopment\nAnna Vovchenko\nProduct Design\nRayana Verissimo\nEnvironments group\nSlack Channel\n#g_environments\nSlack Alias\nEnvironments Group\nHandbook Page\nFocus\nFeatures in this Group\nFeatures\nDevelopment\nAnna Vovchenko\nBackend Engineering\nStaff Backend Engineer\nTaka Nishida\nTiger Watson\nTimo Furrer\nFrontend Engineering\nAnna Vovchenko\nUX Research\nWill Leidheiser\nSupport\nLewis Brown\nApplication Security Engineer\nAmeya Darshan\nInternal Customers\nQuality Department\nDelivery Team\nReliability Engineering\nDevin Sylva\nDistribution Team\nAutoDevOps and Kubernetes Group\nName\nMaturity\nLinks\nAuto DevOps\nViable\nDocumentation Page\nDirection Page\nContinuous Delivery\nCompetitive\nMarketing Page\nDocumentation Page\nDirection Page\nDeployment Management\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nEnvironment Management\nViable\nDocumentation Page\nDirection Page\nFeature Flags\nViable\nDocumentation Page\nDirection Page\nInfrastructure as Code\nViable\nDocumentation Page\nDirection Page\nRelease Orchestration\nViable\nDocumentation Page\nDirection Page\nCI section\nSlack Channel\n#ci-section\nHandbook Page\nProduct\nDarren Eastman\nDevelopment\nSam Goldstein\nSite Reliability Engineering\nGerardo \"Gerir\" Lopez-Fernandez\nProduct Design\nRayana Verissimo\nUX Research\nErika Feldman\nLegal & Corporate Affairs\nTiffany Chen\ngraph TD;\nci[CI section]-->s_package[Package stage];\ns_package-->g_container_registry[\"Container Registry\ngroup\"];\nclick g_container_registry \"/handbook/product/categories/#package-group\";\ns_package-->g_package_registry[\"Package Registry\ngroup\"];\nclick g_package_registry \"/handbook/product/categories/#package-group\";\nci[CI section]-->s_verify[Verify stage];\ns_verify-->g_ci_platform[\"CI Platform\ngroup\"];\nclick g_ci_platform \"/handbook/<no value>\";\ns_verify-->g_hosted_runners[\"Hosted Runners\ngroup\"];\nclick g_hosted_runners \"/handbook/product/categories/#hosted-runners\";\ns_verify-->g_mobile_devops[\"Mobile DevOps\ngroup\"];\nclick g_mobile_devops \"/handbook/<no value>\";\ns_verify-->g_pipeline_authoring[\"Pipeline Authoring\ngroup\"];\nclick g_pipeline_authoring \"/handbook/product/categories/#pipeline-authoring-group\";\ns_verify-->g_pipeline_execution[\"Pipeline Execution\ngroup\"];\nclick g_pipeline_execution \"/handbook/product/product-categories/#pipeline-execution-group\";\ns_verify-->g_runner[\"Runner\ngroup\"];\nclick g_runner \"/handbook/product/categories/#runner-group\";\nClick on a group name to see more details.\nPackage stage\nSlack Channel\n#s_package\nHandbook Page\nProduct\nTim Rizzi\nDevelopment\nCrystal Poole\nProduct Design\nRayana Verissimo\nProduct Designer\nBonnie Tsang\nContainer Registry group\nSlack Channel\n#g_container-registry\nSlack Alias\ncontainer-registry-group\nGitLab Group\n@gitlab-org/ci-cd/package-stage/container-registry-group\nHandbook Page\nFocus\nContainer Registry GMAU\nFeatures in this Group\nFeatures\nProduct\nTim Rizzi\nDevelopment\nCrystal Poole\nBackend Engineering\nBackend Engineer\nHayley Swimelar\nJaime Mart√≠nez\nJo√£o Pereira\nSenior Backend Engineer\nFrontend Engineering\nRahul Chanila\nUX Research\nErika Feldman\nSupport\nKate Grechishkina\nTechnical Writing\nZach Painter\nInternal Customers\nDistribution Team\nInfrastructure Department\nProduct Security Department\nName\nMaturity\nLinks\nContainer Registry\nViable\nDocumentation Page\nDirection Page\nVirtual Registry\nViable\nDocumentation Page\nDirection Page\nDependency Firewall\nPlanned 2025\nDirection Page\nPackage Registry group\nSlack Channel\n#g_package-registry\nSlack Alias\npackage-registry-group\nGitLab Group\n@gitlab-org/ci-cd/package-stage/package-registry-group\nHandbook Page\nFocus\nPackage Registry GMAU\nFeatures in this Group\nFeatures\nProduct\nTim Rizzi\nDevelopment\nCrystal Poole\nBackend Engineering\nDavid Fernandez\nDzmitry Meshcharakou\nMoaz Khalifa\nRad Batnag\nFrontend Engineering\nRahul Chanila\nUX Research\nErika Feldman\nSupport\nKate Grechishkina\nTechnical Writing\nZach Painter\nInternal Customers\nDistribution Team\nInfrastructure Department\nName\nMaturity\nLinks\nPackage Registry\nViable\nDocumentation Page\nDirection Page\nHelm Chart Registry\nViable\nDocumentation Page\nDirection Page\nVerify stage\nSlack Channel\n#s_verify\nProduct\nDarren Eastman\nDevelopment\nCheryl Li\nSoftware Engineer in Test\nTiffany Rea\nProduct Design\nRayana Verissimo\nCI Platform group\nSlack Channel\n#g_ci-platform\nFeatures in this Group\nFeatures\nProduct\nDarren Eastman\nDevelopment\nCheryl Li\nBackend Engineering\nSenior Backend Engineer\nLeaminn Ma\nMarius Bobin\nMadhusudan Vaishnao\nTianwen Chen\nSupport\nMark Nagle\nHosted Runners group\nSlack Channel\n#g_runners_platform\nFocus\nVerify & Hosted runners SMAU\nFeatures in this Group\nFeatures\nProduct\nGabriel Engel\nDevelopment\nKam Kyrala\nSupport\nMichael Trainor\nJustin Farmiloe\nTechnical Writing\nRoshni Sarangadharan\nApplication Security Engineer\nCostel Maxim\nInfrastructure Security Engineer\nPaulo Martins\nCustomer Success\nRachel Fuerst\nVladimir Dzalbo\nInternal Customers\nInfrastructure Department\nEngineering Department\nSecurity Division\nName\nMaturity\nLinks\nGitLab Hosted Runners\nViable\nDocumentation Page\nDirection Page\nMobile DevOps group\nSlack Channel\n#mobile-devops\nFeatures in this Group\nFeatures\nProduct\nDarren Eastman\nName\nMaturity\nLinks\nMobile DevOps\nDirection Page\nPipeline Authoring group\nSlack Channel\n#g_pipeline-authoring\nFocus\nVerify & Runner SMAU\nFeatures in this Group\nFeatures\nProduct\nDov Hershkovitch\nDevelopment\nManuel Grabowski\nBackend Engineering\nAvielle Wolfe\nFurkan Ayhan\nKasia Misirli\nLaura Montemayor\nRajendra Kadam\nSoftware Engineer in Test\nTiffany Rea\nUX Research\nErika Feldman\nProduct Designer\nSunjung Park\nSupport\nLuminus Alabi\nSegolene Bouly\nTechnical Writing\nMarcel Amirault\nApplication Security Engineer\nRohit Shambhuni\nCustomer Success\nRachel Fuerst\nVladimir Dzalbo\nInternal Customers\nQuality Department\nUX Department\nInfrastructure Department\nEngineering Department\nAutoDevOps and Kubernetes Group\nSecurity Division\nName\nMaturity\nLinks\nPipeline Composition\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nVariables\nComplete\nDocumentation Page\nDirection Page\nComponent Catalog\nMinimal\nMarketing Page\nDocumentation Page\nDirection Page\nPipeline Execution group\nSlack Channel\n#g_pipeline-execution\nFocus\nVerify & Runner SMAU\nFeatures in this Group\nFeatures\nProduct\nRutvik Shah\nDevelopment\nSenior Backend Engineer\nBackend Engineering\nAllison Browne\nDaniel Prause\nHordur Freyr Yngvason\nMax Fan\nPanos Kanellidis\nVlad Wolanyk\nFrontend Engineering\nJose Ivan Vargas\nPayton Burdette\nSoftware Engineer in Test\nTiffany Rea\nUX Research\nErika Feldman\nProduct Designer\nVeethika M\nSupport\nPaul Murray\nCharl Marais\nTechnical Writing\nLysanne Pinto\nApplication Security Engineer\nRohit Shambhuni\nCustomer Success\nRachel Fuerst\nVladimir Dzalbo\nInternal Customers\nQuality Department\nUX Department\nInfrastructure Department\nEngineering Department\nAutoDevOps and Kubernetes Group\nSecurity Division\nName\nMaturity\nLinks\nContinuous Integration (CI)\nCompetitive\nMarketing Page\nDocumentation Page\nDirection Page\nMerge Trains\nViable\nDocumentation Page\nDirection Page\nCode Testing and Coverage\nViable\nDocumentation Page\nDirection Page\nReview Apps\nCompetitive\nDocumentation Page\nDirection Page\nJob Artifacts\nMinimal\nDocumentation Page\nDirection Page\nRunner group\nSlack Channel\n#g_runner\nFocus\nVerify & Runner SMAU\nFeatures in this Group\nFeatures\nProduct\nDarren Eastman\nDevelopment\nNicole Williams\nBackend Engineering\nArran Walker\nAxel von Bertoldi\nCam Swords\nGeorgi Georgiev\nHannes H√∂rl\nJoe Burnett\nLove Bhardwaj\nNarendran Kannan\nPedro Pombeiro\nRomuald Atchad√©\nFrontend Engineering\nMiguel Rincon\nUX Research\nErika Feldman\nSupport\nMichael Trainor\nJustin Farmiloe\nTechnical Writing\nRoshni Sarangadharan\nApplication Security Engineer\nCostel Maxim\nInfrastructure Security Engineer\nPaulo Martins\nCustomer Success\nRachel Fuerst\nVladimir Dzalbo\nInternal Customers\nInfrastructure Department\nEngineering Department\nName\nMaturity\nLinks\nGitLab Runner Core\nViable\nDocumentation Page\nDirection Page\nFleet Visibility\nViable\nDocumentation Page\nDirection Page\nCore Platform section\nProduct\nMike Flouton\nDevelopment\nMarin Jankovski\nProduct Design\nTaurie Davis\nUX Research\nThaina Tavares\nInfrastructure Manager\nDave Smith\nLegal & Corporate Affairs\nIris Gorman\ngraph TD;\ncore_platform[Core Platform section]-->s_foundations[Foundations stage];\ns_foundations-->g_design_system[\"Design System\ngroup\"];\nclick g_design_system \"/handbook/product/categories/#design_system-group\";\ns_foundations-->g_personal_productivity[\"Personal Productivity\ngroup\"];\nclick g_personal_productivity \"/handbook/product/categories/#personal_productivity-group\";\ns_foundations-->g_ux_paper_cuts[\"UX Paper Cuts\ngroup\"];\nclick g_ux_paper_cuts \"/handbook/product/categories/#ux_paper_cuts-group\";\nClick on a group name to see more details.\nFoundations stage\nSlack Channel\n#s_manage\nDevelopment\nMichelle Gill\nProduct Design\nChris Micek\nDesign System group\nSlack Channel\n#g_pajamas-design-system\nGitLab Group\n@gitlab-org/manage\nFocus\nDriving Pajamas adoption\nFeatures in this Group\nFeatures\nProduct\nJeff Tucker\nFrontend Engineering\nMark Florian\nScott de Jonge\nProduct Design\nChris Micek\nProduct Designer\nDan Mizzi-Harris\nJeremy Elder\nInternal Customers\nAlliances Department\nCustomer Success\nQuality Department\nInfrastructure Department\nEngineering Department\nName\nMaturity\nLinks\nPajamas Design System\nDocumentation Page\nDirection Page\nPersonal Productivity group\nSlack Channel\n#g_personal_productivity\nGitLab Group\n@gitlab-org/foundations/personal-productivity\nFocus\nDriving Pajamas adoption\nFeatures in this Group\nFeatures\nProduct\nJeff Tucker\nDevelopment\nAbhinaba Ghosh\nFrontend Engineering\nPaul Gascou-Vaillancourt\nThomas Hutterer\nProduct Design\nJacki Bauer\nUX Research\nThaina Tavares\nProduct Designer\nAmelia Bauerly\nAustin Regnery\nTechnical Writing\nKati Paizee\nInternal Customers\nAlliances Department\nCustomer Success\nQuality Department\nInfrastructure Department\nEngineering Department\nName\nMaturity\nLinks\nNavigation\nDirection Page\nSettings\nDirection Page\nNotifications\nDocumentation Page\nDirection Page\nUX Paper Cuts group\nSlack Channel\n#g_ux_paper_cuts\nGitLab Group\n@gitlab-org/foundations/ux-paper-cuts\nHandbook Page\nFocus\nThe UX Paper Cuts team is responsible for identifying and fixing small, impactful usability issues in the GitLab product.\nFeatures in this Group\nFeatures\nDevelopment\nManager, Product Design\nProduct Designer\nChad Lavimoniere\nJulia Miocene\nSascha Eggenberger\nAnnabel Dunstone Gray\nData Science section\nDevelopment\nTim Zallmann\nProduct Design\nValerie Karnes\nUX Research\nNick Hertz\nLegal & Corporate Affairs\nTiffany Chen\ngraph TD;\ndata-science[Data Science section]-->s_ai-powered[AI-powered stage];\ns_ai-powered-->g_ai_framework[\"AI Framework\ngroup\"];\nclick g_ai_framework \"/handbook/product/categories/#ai-framework-group\";\ns_ai-powered-->g_code_creation[\"Code Creation\ngroup\"];\nclick g_code_creation \"/handbook/product/categories/#code-suggestions\";\ns_ai-powered-->g_custom_models[\"Custom Models\ngroup\"];\nclick g_custom_models \"/handbook/product/categories/#custom-models-group\";\ns_ai-powered-->g_duo_chat[\"Duo Chat\ngroup\"];\nclick g_duo_chat \"/handbook/product/categories/#duo-chat-group\";\ns_ai-powered-->g_duo_workflow[\"Duo Workflow\ngroup\"];\nclick g_duo_workflow \"/handbook/product/categories/#duo-workflow\";\ns_ai-powered-->g_editor_extensions[\"Editor Extensions\ngroup\"];\nclick g_editor_extensions \"/handbook/product/categories/#editor-extensions\";\ns_ai-powered-->g_global_search[\"Global Search\ngroup\"];\nclick g_global_search \"/handbook/product/categories/#global-search-group\";\ns_ai-powered-->g_workflow_catalog[\"Workflow Catalog\ngroup\"];\nclick g_workflow_catalog \"/handbook/<no value>\";\ndata-science[Data Science section]-->s_modelops[ModelOps stage];\ns_modelops-->g_dataops[\"DataOps\ngroup\"];\nclick g_dataops \"/handbook/product/categories/#dataops-group\";\ns_modelops-->g_mlops[\"MLOps\ngroup\"];\nclick g_mlops \"/handbook/product/categories/#mlops-group\";\nClick on a group name to see more details.\nAI-powered stage\nSlack Channel\n#s_ai-powered\nHandbook Page\nDevelopment\nTim Zallmann\nProduct Design\nJacki Bauer\nAI Framework group\nSlack Channel\n#g_ai_framework\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nBen Venker\nDevelopment\nMartin Wortschack\nBackend Engineering\nAlexander Chueshev\nAlejandro Rodr√≠guez\nHalil Coban\nHongtao Yang\nBackend Engineer\nJoey Khabie\nMa≈Çgorzata Ksionek\nMark Lapierre\nMichael Thomas\nNathan Weinshenker\nSurabhi Suman\nTan Le\nFrontend Engineering\nAndrew Fontaine\nUX Research\nNick Hertz\nErika Feldman\nProduct Designer\nJacki Bauer\nSupport\n≈Åukasz Korbasiewicz\nTechnical Writing\nSuzanne Selhorn\nInfrastructure Security Engineer\nPaulo Martins\nName\nMaturity\nLinks\nAI Abstraction Layer\nViable\nDocumentation Page\nDirection Page\nAI Evaluation\nMinimal\nDocumentation Page\nDirection Page\nAI Research\nMinimal\nDocumentation Page\nDirection Page\nCode Creation group\nSlack Channel\n#g_code_creation\nHandbook Page\nCode Creation Group\nFeatures in this Group\nFeatures\nProduct\nJordan Janes\nBackend Engineering Manager\nMatt Nohr\nBackend Engineering\nAllen Cook\nJames Fargher\nJan Provaznik\nKinshuk Singh\nMissy Davies\nOmar Qunsul\nPam Artiaga\nShola Quadri\nTian Gao\nVitali Tatarintev\nTechnical Writing\nSteve Cawood\nName\nMaturity\nLinks\nCode Suggestions\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nCustom Models group\nSlack Channel\n#g_custom_models\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nSusie Bitters\nBackend Engineering\nBruno Cardoso\nCindy Halim\nEduardo Bonet\nIgor Drozdov\nPatrick Cyiza\nManoj Memana Jayakumar\nMohamed Hamda\nFrontend Engineering\nJulie Huang\nSupport\nVidhya Hariharan\nTechnical Writing\nJon Glassman\nInfrastructure Security Engineer\nPaulo Martins\nName\nMaturity\nLinks\nModel Personalization\nMinimal\nDirection Page\nSelf-Hosted Models\nMinimal\nDocumentation Page\nDirection Page\nGitLab Duo Settings\nMinimal\nDirection Page\nDuo Chat group\nSlack Channel\n#g_duo_chat\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nTorsten Linz\nDevelopment\nJuan Silva\nBackend Engineering\nDillon Wheeler\nEva Kadlecov√°\nMark Chao\nShinya Maeda\nTetiana Chupryna\nFrontend Engineering\nJannik Lehmann\nUX Research\nErika Feldman\nNick Hertz\nProduct Designer\nSam Reiss\nAndrew Bacon\nEmily Bauman\nPedro Moreira da Silva\nSupport\n≈Åukasz Korbasiewicz\nDuncan Harris\nTechnical Writing\nJon Glassman\nInfrastructure Security Engineer\nPaulo Martins\nName\nMaturity\nLinks\nDuo Chat\nMinimal\nDocumentation Page\nDirection Page\nDuo Workflow group\nSlack Channel\n#g_duo_workflow\nHandbook Page\nFeatures in this Group\nFeatures\nDevelopment\nSebastian Rehm\nUX Research\nErika Feldman\nNick Hertz\nProduct Designer\nTaylor Vanderhelm\nSam Reiss\nAndrew Bacon\nEmily Bauman\nPedro Moreira da Silva\nSupport\n≈Åukasz Korbasiewicz\nTechnical Writing\nSuzanne Selhorn\nInfrastructure Security Engineer\nPaulo Martins\nName\nMaturity\nLinks\nDuo Workflow\nMinimal\nDocumentation Page\nDirection Page\nEditor Extensions group\nSlack Channel\n#g_editor-extensions\nHandbook Page\nCreate:Editor Extensions Group\nFeatures in this Group\nFeatures\nProduct\nDasha Adushkina\nDevelopment\nKisha Mavryck Richardson\nBackend Engineering\nAnna Springfield\nDylan Bernardi\nErran Carey\nJohn Slaughter\nKarl Jamoralin\nLaura Ionel\nFrontend Engineering\nAndrei Zubov\nElwyn Benson\nOlena HK.\nTomas Vik\nTristan Read\nUX Research\nBen Leduc-Mills\nSupport\n≈Åukasz Korbasiewicz\nTechnical Writing\nSteve Cawood\nName\nMaturity\nLinks\nEditor Extensions\nMinimal\nDocumentation Page\nDirection Page\nGlobal Search group\nSlack Channel\n#g_global_search\nGitLab Group\n@gitlab-org/search-team\nHandbook Page\nFocus\nPaid GMAU\nFeatures in this Group\nFeatures\nProduct\nBen Venker\nDevelopment\nChangzheng Liu\nBackend Engineering\nArturo Herrero\nChangzheng Liu\nDmitry Gruzd\nJohn Mason\nMadelein van Niekerk\nRavi Kumar\nSiddharth Dungarwal\nTerri Chu\nFrontend Engineering\nTom√°≈° Bulva\nUX Research\nWill Leidheiser\nSupport\nAysegul Acar\nBrenda Nyaringita\nCleveland Bledsoe Jr\nTechnical Writing\nAshraf Khamis\nInternal Customers\nEngineering Department\nCustomer Success\nInfrastructure Department\nProduct Security Department\nName\nMaturity\nLinks\nGlobal Search\nViable\nDocumentation Page\nDirection Page\nCode Search\nMinimal\nDocumentation Page\nDirection Page\nWorkflow Catalog group\nSlack Channel\n#g_workflow_catalog\nGitLab Group\n@gitlab-org/ai-powered/workflow-catalog\nHandbook Page\nFeatures in this Group\nFeatures\nDevelopment\nSam Beckham\nBackend Engineering\nJaydip pansuriya\nKeeyan Nejad\nLuke Duncalfe\nFrontend Engineering\nFlorie Guibert\nJames Rushford\nJustin Ho\nVanessa Otto\nProduct Designer\nTaylor Vanderhelm\nModelOps stage\nSlack Channel\n#s_modelops\nHandbook Page\nProduct\nTaylor McCaslin\nDataOps group\nSlack Channel\n#s_modelops\nFeatures in this Group\nFeatures\nProduct\nTaylor McCaslin\nName\nMaturity\nLinks\nDataOps\nPlanned 2025\nDirection Page\nMLOps group\nSlack Channel\n#g_mlops\nFeatures in this Group\nFeatures\nProduct\nTaylor McCaslin\nBackend Engineering\nAlper Akgun\nAndras Herczeg\nRoman Eisner\nName\nMaturity\nLinks\nMLOps\nMinimal\nDocumentation Page\nDirection Page\nAI Agents\nPlanned 2024\nDocumentation Page\nDirection Page\nDev section\nDevelopment\nTim Zallmann\nProduct Design\nMarcel van Remmerden\nUX Research\nBen Leduc-Mills\nDanika Teverovsky\nProduct Marketing\nAathira Nair\nLegal & Corporate Affairs\nIris Gorman\ngraph TD;\ndev[Dev section]-->s_create[Create stage];\ns_create-->g_code_review[\"Code Review\ngroup\"];\nclick g_code_review \"/handbook/product/categories/#code-review-group\";\ns_create-->g_import[\"Import\ngroup\"];\nclick g_import \"/handbook/product/categories/#import-group\";\ns_create-->g_remote_development[\"Remote Development\ngroup\"];\nclick g_remote_development \"/handbook/product/categories/#remote-development-group\";\ns_create-->g_source_code[\"Source Code\ngroup\"];\nclick g_source_code \"/handbook/product/categories/#source-code-group\";\ndev[Dev section]-->s_plan[Plan stage];\ns_plan-->g_knowledge[\"Knowledge\ngroup\"];\nclick g_knowledge \"/handbook/product/product-categories/#knowledge-group\";\ns_plan-->g_optimize[\"Optimize\ngroup\"];\nclick g_optimize \"/handbook/product/categories/#value-stream-management-group\";\ns_plan-->g_product_planning[\"Product Planning\ngroup\"];\nclick g_product_planning \"/handbook/product/categories/#product_planning\";\ns_plan-->g_project_management[\"Project Management\ngroup\"];\nclick g_project_management \"/handbook/product/categories/#project-management-group\";\nClick on a group name to see more details.\nCreate stage\nSlack Channel\n#s_create\nProduct\nDerek Ferguson\nDevelopment\nDarva Satcher\nCode Review group\nSlack Channel\n#g_create_code-review\nHandbook Page\nFocus\nCreate Code Review GMAU\nFeatures in this Group\nFeatures\nProduct\nKai Armstrong\nBackend Engineering Manager\nFran√ßois Ros√©\nBackend Engineering\nSincheol (David) Kim\nGary Holtz\nMarc Shaw\nPatrick Bajao\nFrontend Engineering Manager\nAndr√© Lu√≠s\nFrontend Engineering\nAndr√© Lu√≠s\nPhil Hughes\nStanislav Lashmanov\nThomas Randolph\nUX Research\nBen Leduc-Mills\nProduct Designer\nMichael Le\nProduct Marketing\nAathira Nair\nSupport\nBen King\nTechnical Writing\nAmy Qualls\nInternal Customers\nEngineering Department\nMarketing Department\nProduct Department\nProduct Security Department\nAmeya Darshan\nName\nMaturity\nLinks\nCode Review Workflow\nComplete\nDocumentation Page\nDirection Page\nGitLab CLI\nViable\nDocumentation Page\nDirection Page\nImport group\nSlack Channel\n#g_import\nGitLab Group\n@gitlab-org/foundations/import-and-integrate\nFocus\nImporters\nFeatures in this Group\nFeatures\nDevelopment\nAdebayo Adesanya\nBackend Engineering\nCarla Drago\nGeorge Koltsov\nJames Nutt\nReza Marandi\nRodrigo Tomonari\nSam Word\nFrontend Engineering\nOiza Baiye\nTechnical Writing\nAshraf Khamis\nApplication Security Engineer\nAmeya Darshan\nInternal Customers\nAlliances Department\nCustomer Success\nQuality Department\nInfrastructure Department\nEngineering Department\nName\nMaturity\nLinks\nImporters\nDocumentation Page\nDirection Page\nRemote Development group\nSlack Channel\n#g_create_remote_development\nHandbook Page\nFocus\nCreate Remote Development GMAU\nFeatures in this Group\nFeatures\nProduct\nMichelle Chen\nDevelopment\nAdebayo Adesanya\nBackend Engineering\nAshvin Sharma\nChad Woolley\nVishal Tak\nFrontend Engineering\nEnrique Alc√°ntara\nUX Research\nBen Leduc-Mills\nProduct Designer\nMark Unthank\nProduct Marketing\nAathira Nair\nSupport\nChris Stone\nTechnical Writing\nBrendan Lynch\nInternal Customers\nMarketing Department\nEngineering Department\nFinance Department\nPeople Operations\nProduct Department\nProduct Security Department\nName\nMaturity\nLinks\nWeb IDE\nCompetitive\nDocumentation Page\nDirection Page\nWorkspaces\nMinimal\nDocumentation Page\nDirection Page\nSource Code group\nSlack Channel\n#g_create_source-code\nHandbook Page\nFocus\nCreate Source Code GMAU\nFeatures in this Group\nFeatures\nProduct\nKai Armstrong\nBackend Engineering Manager\nAndr√© Lu√≠s\nBackend Engineering\nEmma Park\nFred Reinink\nGavin Hinfey\nHunter Stewart\nJerry Seto\nJaviera Tapia\nJoe Woodward\nKerri Miller\nOlaoluwa Oluro\nVasilii Iakliushin\nFrontend Engineering Manager\nAndr√© Lu√≠s\nFrontend Engineering\nAndr√© Lu√≠s\nJacques Erasmus\nJoseph Fletcher\nChaoyue Zhao\nPaulina Sedlak-Jakubowska\nUX Research\nBen Leduc-Mills\nProduct Designer\nAlyssa Trinh\nProduct Marketing\nAathira Nair\nTechnical Writing\nBrendan Lynch\nApplication Security Engineer\nCostel Maxim\nCustomer Success\nConley Rogers\nSimon Mansfield\nInternal Customers\nEngineering Department\nMarketing Department\nAathira Nair\nProduct Department\nSecurity Division\nName\nMaturity\nLinks\nSource Code Management\nComplete\nMarketing Page\nDocumentation Page\nDirection Page\nPlan stage\nSlack Channel\n#s_plan\nProduct\nGabe Weaver\nDevelopment\nJohn Hope\nKnowledge group\nSlack Channel\n#g_knowledge\nHandbook Page\nFocus\nPlan Knowledge Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nMatthew Macfarlane\nDevelopment\nAlexandru Croitor\nBackend Engineering\nBrett Walker\nJanis Altherr\nNaman Jagdish Gala\nPiotr Skorupa\nFrontend Engineering\nHimanshu Kapoor\nUX Research\nDanika Teverovsky\nProduct Designer\nAlex Fracazo\nProduct Marketing\nAathira Nair\nTechnical Writing\nMarcin Sƒôd≈Çak-Jakubowski\nApplication Security Engineer\nCostel Maxim\nCustomer Success\nSimon Mansfield\nInternal Customers\nTechnical Writing\nName\nMaturity\nLinks\nWiki\nViable\nDocumentation Page\nDirection Page\nPages\nCompetitive\nDocumentation Page\nDirection Page\nText Editors\nCompetitive\nDocumentation Page\nDirection Page\nMarkdown\nComplete\nDocumentation Page\nDirection Page\nOptimize group\nSlack Channel\n#g_plan_optimize\nFocus\nPlan Optimize GMAU\nFeatures in this Group\nFeatures\nDevelopment\nBrandon Labuschagne\nBackend Engineering\nAmr Taha\nFelipe Artur\nPavel Shutsin\nFrontend Engineering\nAlex Pennells\nEzekiel Kigbo\nRudy Crespo\nProduct Design\nJustin Mandell\nUX Research\nDanika Teverovsky\nProduct Designer\nLibor Vanc\nProduct Marketing\nAathira Nair\nSupport\nGabriel Yoachum\nTechnical Writing\nLorena Ciutacu\nApplication Security Engineer\nCostel Maxim\nInternal Customers\nEngineering Department\nProduct Department\nQuality Department\nDevelopment Department\nName\nMaturity\nLinks\nValue Stream Management\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nDORA Metrics\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nDevOps Reports\nMinimal\nDocumentation Page\nDirection Page\nProduct Planning group\nSlack Channel\n#g_product-planning\nFocus\nPlan Product Planning Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nAmanda Rueda\nDevelopment\nVladimir Shushlin\nBackend Engineering\nEugenia Grieff\nKassio Borges\nMatt D'Angelo\nNicolas Dular\nBackend Engineer\nVedant Jain\nVladimir Shushlin\nFrontend Engineering\nAnastasia Khomchenko\nJack Chapman\nRajan Mistry\nVedant Jain\nVladimir Shushlin\nUX Research\nDanika Teverovsky\nProduct Designer\nNick Brandt\nProduct Marketing\nAathira Nair\nTechnical Writing\nMarcin Sƒôd≈Çak-Jakubowski\nInternal Customers\nEngineering Department\nProduct Department\nSecurity Division\nName\nMaturity\nLinks\nPortfolio Management\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nOKR Management\nMinimal\nDocumentation Page\nDirection Page\nDesign Management\nViable\nDocumentation Page\nDirection Page\nRequirements Management\nMinimal\nDocumentation Page\nDirection Page\nQuality Management\nMinimal\nDocumentation Page\nDirection Page\nProject Management group\nSlack Channel\n#g_project-management\nHandbook Page\nPlan:Project Management\nFocus\nPlan Project Management Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nGabe Weaver\nDevelopment\nDonald Cook\nBackend Engineering\nAlexandru Croitor\nAgnes Slota\nHeinrich Lee Yu\nMario Celi\nMarc Saleiko\nStefanos Xanthopoulos\nFrontend Engineering\nSenior Frontend Engineer\nDeepika Guliani\nFernanda Toledo\nMarc Saleiko\nNatalia Tepluhina\nUX Research\nDanika Teverovsky\nProduct Designer\nNick Leonard\nProduct Marketing\nAathira Nair\nTechnical Writing\nMarcin Sƒôd≈Çak-Jakubowski\nApplication Security Engineer\nCostel Maxim\nInternal Customers\nEngineering Department\nProduct Department\nSecurity Division\nName\nMaturity\nLinks\nTeam Planning\nViable\nDocumentation Page\nDirection Page\nService Desk\nViable\nDocumentation Page\nDirection Page\nFulfillment section\nProduct\nCourtney Meddaugh\nDevelopment\nJerome Ng\nProduct Design\nTaurie Davis\nUX Research\nAnne Lasch\nNick Hertz\nInfrastructure Manager\nDave Smith\nLegal & Corporate Affairs\nIris Gorman\ngraph TD;\nfulfillment[Fulfillment section]-->s_fulfillment[Fulfillment stage];\ns_fulfillment-->g_fulfillment_platform[\"Fulfillment Platform\ngroup\"];\nclick g_fulfillment_platform \"/handbook/product/categories/#fulfillment-platform-group\";\ns_fulfillment-->g_provision[\"Provision\ngroup\"];\nclick g_provision \"/handbook/product/categories/#provision-group\";\ns_fulfillment-->g_seat_management[\"Seat Management\ngroup\"];\nclick g_seat_management \"/handbook/product/categories/#seat-management-group\";\ns_fulfillment-->g_subscription_management[\"Subscription Management\ngroup\"];\nclick g_subscription_management \"/handbook/product/categories/#subscription-management-group\";\ns_fulfillment-->g_utilization[\"Utilization\ngroup\"];\nclick g_utilization \"/handbook/product/categories/#utilization-group\";\nClick on a group name to see more details.\nFulfillment stage\nSlack Channel\n#s_fulfillment\nProduct\nCourtney Meddaugh\nDevelopment\nJerome Ng\nProduct Design\nEmily Sybrant\nUX Research\nAnne Lasch\nNick Hertz\nFulfillment Platform group\nSlack Channel\n#g_fulfillment_platform\nFeatures in this Group\nFeatures\nDevelopment\nJames Lopez\nBackend Engineering\nAishwarya Subramanian\nEtienne Baqu√©\nShreyas Agarwal\nTarun Vellishetty\nTyler Amos\nVladlena Shumilo\nFrontend Engineering\nTarun Vellishetty\nProduct Designer\nLina Fowler\nTimothy Noah\nSupport\nTom McAtee\nName\nMaturity\nLinks\nFulfillment Infradev\nViable\nDirection Page\nCustomersDot and quote to cash integrations\nViable\nDirection Page\nProvision group\nSlack Channel\n#g_provision\nFeatures in this Group\nFeatures\nProduct\nPriyanka Palanikumar\nDevelopment\nRagnar Hardarson\nBackend Engineering\nBishwa Hang Rai\nCorinna Gogolok\nPaulo Barros\nQingyu Zhao\nProduct Designer\nLina Fowler\nTimothy Noah\nSupport\nKeven Hughes\nTechnical Writing\nLorena Ciutacu\nApplication Security Engineer\nRohit Shambhuni\nName\nMaturity\nLinks\nPlan Provisioning\nViable\nDirection Page\nAdd-on Provisioning\nViable\nDirection Page\nSeat Management group\nSlack Channel\n#g_seat_management\nFeatures in this Group\nFeatures\nProduct\nMagdalena Frankiewicz\nDevelopment\nRagnar Hardarson\nUX Research\nAnne Lasch\nProduct Designer\nLina Fowler\nTimothy Noah\nTechnical Writing\nLorena Ciutacu\nName\nMaturity\nLinks\nSeat Cost Management\nViable\nDirection Page\nUser Management\nViable\nDocumentation Page\nDirection Page\nSubscription Management group\nSlack Channel\n#g_subscription_management\nFeatures in this Group\nFeatures\nProduct\nTatyana Golubeva\nDevelopment\nDiana Zubova\nBackend Engineering\nAman Luthra\nJosianne Hyson\nRyan Cobb\nFrontend Engineering\nMichael Lun√∏e\nSharmad Nachnolkar\nVamsi Vempati\nUX Research\nNick Hertz\nProduct Designer\nLina Fowler\nTimothy Noah\nSupport\nFirdaws Farukh\nTechnical Writing\nLorena Ciutacu\nName\nMaturity\nLinks\nSubscription Management\nViable\nDirection Page\nUtilization group\nSlack Channel\n#g_utilization\nFeatures in this Group\nFeatures\nProduct\nCourtney Meddaugh\nDevelopment\nKsenia Kolpakova\nBackend Engineering\nJason Goodman\nSuraj Tripathi\nVijay Hawoldar\nFrontend Engineering\nAmmar Alakkad\nAngelo Gulina\nKos Palchyk\nSheldon Led\nUX Research\nNick Hertz\nProduct Designer\nLina Fowler\nTimothy Noah\nSupport\nShem Gyll\nTechnical Writing\nLorena Ciutacu\nApplication Security Engineer\nNikhil George\nName\nMaturity\nLinks\nConsumables Cost Management\nViable\nDirection Page\nGrowth section\nProduct\nPaige Cordero\nGayle Doud\nDevelopment\nKamil Niechajewicz\nJerome Ng\nProduct Design\nTaurie Davis\nInfrastructure Manager\nDave Smith\nLegal & Corporate Affairs\nTiffany Chen\ngraph TD;\ngrowth[Growth section]-->s_growth[Growth stage];\ns_growth-->g_acquisition[\"Acquisition\ngroup\"];\nclick g_acquisition \"/handbook/<no value>\";\ns_growth-->g_activation[\"Activation\ngroup\"];\nclick g_activation \"/handbook/<no value>\";\nClick on a group name to see more details.\nGrowth stage\nSlack Channel\n#s_growth\nGitLab Group\n@gitlab-org/growth\nHandbook Page\nDevelopment\nKamil Niechajewicz\nProduct Design\nEmily Sybrant\nInternal Customers\nSales Department\nMarketing Department\nProduct Department\nFinance Department\nAcquisition group\nSlack Channel\n#g_acquisition\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nGayle Doud\nDevelopment\nKamil Niechajewicz\nBackend Engineering\nBuck O'Leary\nDavid Hamp-Gonsalves\nDoug Stull\nJay Montal\nRoy Liu\nSerhii Yarynovskyi\nProduct Designer\nJesse Young\nApplication Security Engineer\nNikhil George\nName\nMaturity\nLinks\nAcquisition\nDirection Page\nOnboarding\nDirection Page\nActivation group\nSlack Channel\n#g_activation\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nPaige Cordero\nDevelopment\nKamil Niechajewicz\nProduct Designer\nKatie Macoy\nApplication Security Engineer\nNikhil George\nName\nMaturity\nLinks\nActivation\nDirection Page\nInfrastructure Platforms section\nProduct\nFabian Zimmer\nDevelopment\nMarin Jankovski\nProduct Design\nTaurie Davis\nUX Research\nWill Leidheiser\nInfrastructure Manager\nDave Smith\nLegal & Corporate Affairs\nIris Gorman\ngraph TD;\ninfrastructure_platforms[Infrastructure Platforms section]-->s_data_access[Data Access stage];\ns_data_access-->g_database_frameworks[\"Database Frameworks\ngroup\"];\nclick g_database_frameworks \"/handbook/product/categories/#database-group\";\ns_data_access-->g_database_operations[\"Database Operations\ngroup\"];\nclick g_database_operations \"/handbook/product/categories/#database-group\";\ns_data_access-->g_durability[\"Durability\ngroup\"];\nclick g_durability \"/handbook/<no value>\";\ns_data_access-->g_git[\"Git\ngroup\"];\nclick g_git \"/handbook/product/categories/#git-group\";\ns_data_access-->g_gitaly[\"Gitaly\ngroup\"];\nclick g_gitaly \"/handbook/product/categories/#gitalycluster-group\";\ninfrastructure_platforms[Infrastructure Platforms section]-->s_developer_experience[Developer Experience stage];\ns_developer_experience-->g_api[\"API\ngroup\"];\nclick g_api \"/handbook/<no value>\";\ns_developer_experience-->g_developer_tooling[\"Developer Tooling\ngroup\"];\nclick g_developer_tooling \"/handbook/<no value>\";\ns_developer_experience-->g_development_analytics[\"Development Analytics\ngroup\"];\nclick g_development_analytics \"/handbook/<no value>\";\ns_developer_experience-->g_engineering_productivity[\"Engineering Productivity\ngroup\"];\nclick g_engineering_productivity \"/handbook/<no value>\";\ns_developer_experience-->g_feature_readiness[\"Feature Readiness\ngroup\"];\nclick g_feature_readiness \"/handbook/<no value>\";\ns_developer_experience-->g_performance_enablement[\"Performance Enablement\ngroup\"];\nclick g_performance_enablement \"/handbook/<no value>\";\ns_developer_experience-->g_test_governance[\"Test Governance\ngroup\"];\nclick g_test_governance \"/handbook/<no value>\";\ninfrastructure_platforms[Infrastructure Platforms section]-->s_gitlab_dedicated[GitLab Dedicated stage];\ns_gitlab_dedicated-->g_environment_automation[\"Environment Automation\ngroup\"];\nclick g_environment_automation \"/handbook/product/categories/#gitlab-dedicated-group\";\ns_gitlab_dedicated-->g_pubsec_services[\"US PubSec\ngroup\"];\nclick g_pubsec_services \"/handbook/product/categories/#us-public-sector-services-group\";\ns_gitlab_dedicated-->g_switchboard[\"Switchboard\ngroup\"];\nclick g_switchboard \"/handbook/product/categories/#switchboard\";\ninfrastructure_platforms[Infrastructure Platforms section]-->s_gitlab_delivery[GitLab Delivery stage];\ns_gitlab_delivery-->g_build[\"GitLab Build\ngroup\"];\nclick g_build \"/handbook/product/categories/#distribution-group\";\ns_gitlab_delivery-->g_deploy[\"GitLab Deploy\ngroup\"];\nclick g_deploy \"/handbook/<no value>\";\ns_gitlab_delivery-->g_framework[\"Framework\ngroup\"];\nclick g_framework \"/handbook/<no value>\";\ns_gitlab_delivery-->g_release[\"GitLab Release\ngroup\"];\nclick g_release \"/handbook/<no value>\";\ns_gitlab_delivery-->g_self_managed[\"Self Managed\ngroup\"];\nclick g_self_managed \"/handbook/product/categories/features/#self-managed-group\";\ninfrastructure_platforms[Infrastructure Platforms section]-->s_production_engineering[Production Engineering stage];\ns_production_engineering-->g_cloud_connector[\"Cloud Connector\ngroup\"];\nclick g_cloud_connector \"/handbook/product/categories/#cloud-connector-group\";\ns_production_engineering-->g_foundations[\"Foundations\ngroup\"];\nclick g_foundations \"/handbook/product/categories/\";\ns_production_engineering-->g_observability[\"Observability\ngroup\"];\nclick g_observability \"/handbook/product/categories/\";\ns_production_engineering-->g_ops[\"Ops\ngroup\"];\nclick g_ops \"/handbook/product/categories/\";\ns_production_engineering-->g_runners_platform[\"Runners Platform\ngroup\"];\nclick g_runners_platform \"/handbook/product/categories/#production-engineering-stage\";\ns_production_engineering-->g_runway[\"Runway\ngroup\"];\nclick g_runway \"/handbook/product/categories/\";\ninfrastructure_platforms[Infrastructure Platforms section]-->s_tenant_scale[Tenant Scale stage];\ns_tenant_scale-->g_cells_infrastructure[\"Cells Infrastructure\ngroup\"];\nclick g_cells_infrastructure \"/handbook/<no value>\";\ns_tenant_scale-->g_geo[\"Geo\ngroup\"];\nclick g_geo \"/handbook/product/categories/#geo-group\";\ns_tenant_scale-->g_organizations[\"Organizations\ngroup\"];\nclick g_organizations \"/handbook/product/categories/#tenant-scale-stage\";\nClick on a group name to see more details.\nData Access stage\nSlack Channel\n#s_data_access\nProduct\nMark Wood\nDevelopment\nAndras Horvath\nSoftware Engineer in Test\nJohn McDonnell\nProduct Design\nChris Micek\nDatabase Frameworks group\nSlack Channel\n#g_database_frameworks\nGitLab Group\n@gitlab-org/database-team\nHandbook Page\nFocus\nDatabase PPI\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nAlex Ives\nBackend Engineering\nAlex Ives\nBackend Engineer\nJon Jenkins\nKrasimir Angelov\nLeonardo da Rosa\nMatt Kasa\nMaxime Orefice\nPrabakaran Murugesan\nSimon Tomlinson\nUX Research\nWill Leidheiser\nSupport\nRyan Castro\nChris Nightingale\nMark Nagle\nInternal Customers\nQuality Department\nInfrastructure Department\nName\nMaturity\nLinks\nDatabase\nDirection Page\nDatabase Operations group\nSlack Channel\n#g_database_operations\nGitLab Group\n@gitlab-org/database-team\nHandbook Page\nDatabase Operations Team  (formerly known as the Database Reliablity Engineering (DBRE) team)\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nRick Mar\nSite Reliability Engineering\nAlexander Sosna\nBen Prescott\nBiren Shah\nJon Sisson\nRafael Henchen\nUX Research\nWill Leidheiser\nInternal Customers\nQuality Department\nInfrastructure Department\nDurability group\nSlack Channel\n#g_durability\nHandbook Page\nData Access Durability Team\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nJohn 'Jarv' Jarvis\nBackend Engineering\nGabriel Mazetto\nIan Baum\nKyle Yetter\nGregorius Marco\nSite Reliability Engineering\nAhmad Sherif\nFurhan Shabir\nMatt Smiley\nPravar Gauba\nRaynard Omongbale\nUX Research\nWill Leidheiser\nTechnical Writing\nAchilleas Pipinellis\nInternal Customers\nInfrastructure Department\nName\nMaturity\nLinks\nBackup/Restore of GitLab instances\nMinimal\nDocumentation Page\nDirection Page\nRedis\nDirection Page\nGit group\nSlack Channel\n#g_git\nHandbook Page\nGit Team\nFocus\nDriving Git adoption\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nPatrick Steinhardt\nBackend Engineering\nChristian Couder\nJustin Tobler\nKarthik Nayak\nPatrick Steinhardt\nToon Claes\nSupport\nLen MacRae\nGerardo Gutierrez\nTechnical Writing\nEvan Read\nApplication Security Engineer\nAmeya Darshan\nInternal Customers\nQuality Department\nInfrastructure Department\nName\nMaturity\nLinks\nGit\nDocumentation Page\nDirection Page\nGitaly group\nSlack Channel\n#g_gitaly\nHandbook Page\nGitaly Team\nFocus\nGitaly GMAU\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nJohn Cai\nBackend Engineering\nDivya Rani\nEmily Chui\nEric Ju\nJames Liu\nJohn Cai\nMustafa Bayar\nOlivier Campeau\nQuang-Minh Nguyen\nSami Hiltunen\nSoftware Engineer in Test\nJohn McDonnell\nSupport\nDavid Wainaina\nJohn Gaughan\nTechnical Writing\nEvan Read\nApplication Security Engineer\nAmeya Darshan\nCustomer Success\nConley Rogers\nSimon Mansfield\nInternal Customers\nQuality Department\nInfrastructure Department\nName\nMaturity\nLinks\nGitaly\nDocumentation Page\nDirection Page\nDeveloper Experience stage\nSlack Channel\n#s_developer_experience\nGitLab Group\n@gitlab-com/gl-infra/platform\nHandbook Page\nDeveloper Experience\nDevelopment\nAmy Phillips\nAPI group\nSlack Channel\n#g_developer-experience-api\nFocus\nFeatures in this Group\nFeatures\nDevelopment\nAmy Phillips\nName\nMaturity\nLinks\nMCP Server\nPlanned 2025\nDirection Page\nDeveloper Tooling group\nSlack Channel\n#g_developer_tooling\nHandbook Page\nDeveloper Tooling team\nFocus\nFeatures in this Group\nFeatures\nDevelopment\nMohga Gamea\nBackend Engineering\nBackend Engineer\nManuel Sch√∂nlaub\nNao Hashizume\nPeter Leitzen\nFrontend Engineering\nKev Kloss\nDevelopment Analytics group\nSlack Channel\n#g_development_analytics\nHandbook Page\nDevelopment Analytics Group\nFocus\nFeatures in this Group\nFeatures\nDevelopment\nPaul John Phillips\nBackend Engineering\nLohit Peesapati\nSoftware Engineer in Test\nAndrejs Cunskis\nIevgen Chernikov\nEngineering Productivity group\nSlack Channel\n#g_engineering_productivity\nHandbook Page\nEngineering Productivity team\nFeatures in this Group\nFeatures\nFeature Readiness group\nSlack Channel\n#g_feature_readiness\nHandbook Page\nDeveloper Experience\nFocus\nFeatures in this Group\nFeatures\nSoftware Engineer in Test\nRichard Chong\nSanad Liaquat\nSofia Vistas\nPerformance Enablement group\nSlack Channel\n#g_performance_enablement\nHandbook Page\nPerformance Enablement\nFocus\nFeatures in this Group\nFeatures\nSoftware Engineer in Test\nAndy Hohenner\nBrittany Wilkerson\nJohn McDonnell\nNivetha Prabakaran\nVishal Patel\nTest Governance group\nSlack Channel\n#g_test_governance\nHandbook Page\nTest Governance Group\nFocus\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nKsenia Kolpakova\nSoftware Engineer in Test\nChloe Liu\nD√©sir√©e Chevalier\nHarsha Muralidhar\nJay McCure\nJoy Roodnick\nTiffany Rea\nTim Beauchamp\nWill Meek\nGitLab Dedicated stage\nSlack Channel\n#f_gitlab_dedicated\nGitLab Group\n@gitlab-com/gl-infra/platform\nHandbook Page\nDevelopment\nProduct\nChris Balane\nSoftware Engineer in Test\nBrittany Wilkerson\nProduct Design\nRayana Verissimo\nEnvironment Automation group\nSlack Channel\n#f_gitlab_dedicated\nGitLab Group\nHandbook Page\nGitLab Dedicated Group\nFocus\nFeatures in this Group\nFeatures\nProduct\nChris Balane\nBackend Engineering Manager\nOriol Lluch\nSite Reliability Engineering\nAndy Knight\nAndrew Newdigate\nBrendan McKitrick\nCorey Cross\nCraig Miskell\nDave Dittman\nStephen Denham\nDylan Lau\nHarpratap Singh\nKonst Tchernov\nMuhamed Huseinba≈°iƒá\nOriol Lluch\nRiccardo Trivellato\nRyan Pham\nSamir Hafez\nStephan Breitrainer\nNick Skoretz\nTania Roblot\nVeronica Mondo\nProduct Design\nRayana Verissimo\nUX Research\nWill Leidheiser\nSupport\nWei-Meng Lee\nWade Jenkins\nDaphne Kua\nBrie Carranza\nArmin Hergenhan\nInfrastructure Security Engineer\nDhruv Jain\nCustomer Success\nZane J Chua\nName\nMaturity\nLinks\nGitLab Dedicated\nDocumentation Page\nDirection Page\nUS PubSec group\nSlack Channel\n#g_dedicated-us-pubsec\nGitLab Group\nHandbook Page\nUS Public Sector Services team\nFocus\nFeatures in this Group\nFeatures\nDevelopment\nMatt Kirkevold\nSite Reliability Engineering\nSenior Site Reliability Engineer\nCasey Clark\nEmma Kelly\nJoseph Burnitz\nJohn Edge\nJulie Brady\nMatt Kirkevold\nSupport\nWade Jenkins\nName\nMaturity\nLinks\nUS Public Sector Services\nDocumentation Page\nDirection Page\nSwitchboard group\nSlack Channel\n#g_dedicated_switchboard\nGitLab Group\nHandbook Page\nSwitchboard team\nFocus\nFeatures in this Group\nFeatures\nProduct\nLoryn Bortins\nBackend Engineering Manager\nAmy Shiel\nBackend Engineering\nAndrey Ruzmanov\nSean Arnold\nFrontend Engineering\nGrace Lin\nMarina Mosti\nSite Reliability Engineering\nGraeme Gillies\nProduct Design\nRayana Verissimo\nUX Research\nWill Leidheiser\nProduct Designer\nJesse Hoek\nSupport\nArmin Hergenhan\nTechnical Writing\nLysanne Pinto\nCustomer Success\nZane J Chua\nName\nMaturity\nLinks\nSwitchboard\nDocumentation Page\nDirection Page\nGitLab Delivery stage\nSlack Channel\n#s_gitlab_delivery\nHandbook Page\nGitLab Delivery\nProduct\nMartin Br√ºmmer\nDevelopment\nMichele Bursi\nSoftware Engineer in Test\nJohn McDonnell\nProduct Design\nChris Micek\nGitLab Build group\nSlack Channel\n#g_distribution\nSlack Alias\ngitlab-build\nGitLab Group\n@gitlab-org/distribution\nHandbook Page\nFocus\nDistribution PPI\nFeatures in this Group\nFeatures\nProduct\nMartin Br√ºmmer\nBackend Engineering Manager\nDenis Afonso\nBackend Engineering\nBalasankar 'Balu' C\nDmitry Makovey\nRobert Marshall\nUX Research\nWill Leidheiser\nTechnical Writing\nEvan Read\nAchilleas Pipinellis\nInternal Customers\nQuality Department\nInfrastructure Department\nCustomer Success\nProduct Security Department\nName\nMaturity\nLinks\nBuild\nViable\nDocumentation Page\nDirection Page\nGitLab Deploy group\nSlack Channel\n#g_delivery\nGitLab Group\n@gitlab-org/delivery\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nMartin Br√ºmmer\nDevelopment\nDave Smith\nBackend Engineering\nAlessio Caiazza\nReuben Pereira\nSite Reliability Engineering\nAnthony Maina Ng'ang'a\nJohn T Skarbek\nSite Reliability Engineer\nUX Research\nWill Leidheiser\nName\nMaturity\nLinks\nDelivery\nDocumentation Page\nDirection Page\nFramework group\nSlack Channel\n#g_software_delivery-framework\nFeatures in this Group\nFeatures\nProduct\nMartin Br√ºmmer\nDevelopment\nLekan Sogunle\nBackend Engineering\nAlec Xu\nPratik Singh\nSoftware Engineer in Test\nGrant Young\nNailia Iskhakova\nNick Westbury\nUX Research\nWill Leidheiser\nName\nMaturity\nLinks\nDelivery\nDocumentation Page\nDirection Page\nGitLab Release group\nSlack Channel\n#g_delivery\nGitLab Group\n@gitlab-org/delivery\nHandbook Page\nFeatures in this Group\nFeatures\nProduct\nMartin Br√ºmmer\nDevelopment\nMichele Bursi\nBackend Engineering\nAkinyele Cafe-Febrissy\nMayra Cabrera\nSite Reliability Engineering\nDat Tang\nJenny Kim\nMawreen Dela Cruz\nUX Research\nWill Leidheiser\nApplication Security Engineer\nAmeya Darshan\nName\nMaturity\nLinks\nDelivery\nDocumentation Page\nDirection Page\nSelf Managed group\nSlack Channel\n#g_self_managed\nSlack Alias\ndistributionteam\nGitLab Group\n@gitlab-org/software-delivery/self-managed\nHandbook Page\nGitLab Delivery: Self Managed\nFeatures in this Group\nFeatures\nProduct\nMartin Br√ºmmer\nBackend Engineering Manager\nPeter Lu\nBackend Engineering\nClemens Beck\nHossein Pursultani\nJason Plum\nJo√£o Alexandre Prado Tavares Cunha\nJon Doveston\nLucas Li\nUX Research\nWill Leidheiser\nTechnical Writing\nEvan Read\nAchilleas Pipinellis\nInternal Customers\nQuality Department\nInfrastructure Department\nCustomer Success\nName\nMaturity\nLinks\nOmnibus Package\nComplete\nDocumentation Page\nDirection Page\nCloud Native Installation\nCompetitive\nDocumentation Page\nDirection Page\nProduction Engineering stage\nSlack Channel\n#s_production_engineering\nHandbook Page\nProduction Engineering\nProduct\nSam Wiskow\nDevelopment\nRachel Nienaber\nSoftware Engineer in Test\nJohn McDonnell\nProduct Design\nChris Micek\nCloud Connector group\nSlack Channel\n#g_cloud_connector\nGitLab Group\n@gitlab-org/cloud-connector-team\nHandbook Page\nFocus\nCloud Connector PPI\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nPaul John Phillips\nBackend Engineering\nNikola Milojevic\nRoy Zwambag\nUX Research\nWill Leidheiser\nSupport\nGabriel Yoachum\nTechnical Writing\nJon Glassman\nInternal Customers\nQuality Department\nInfrastructure Department\nName\nMaturity\nLinks\nCloud Connector\nDirection Page\nFoundations group\nSlack Channel\n#g_foundations\nHandbook Page\nFocus\nFeatures in this Group\nFeatures\nProduct\nSam Wiskow\nDevelopment\nSteve Abrams\nSite Reliability Engineering\nAdeline Yeung\nDonna Alexandra\nJack Stephenson\nPierre Guinoiseau\nSarah Walker\nInternal Customers\nInfrastructure Platforms Department\nName\nMaturity\nLinks\nRate Limiting Framework\nDirection Page\nObservability group\nSlack Channel\n#g_observability\nHandbook Page\nFocus\nFeatures in this Group\nFeatures\nProduct\nSam Wiskow\nDevelopment\nLiam McAndrew\nBackend Engineering\nAndreas Brandl\nBob Van Landuyt\nSite Reliability Engineering\nHercules Lemke Merscher\nItay Rotman\nCalliope Gardner\nNick Duff\nStephanie Jackson\nTaliesin Millhouse\nTony Ganga\nInternal Customers\nInfrastructure Platforms Department\nName\nMaturity\nLinks\nError Budgets\nDocumentation Page\nDirection Page\nCapacity Planning\nDocumentation Page\nDirection Page\nOps group\nSlack Channel\n#g_production-engineering_ops\nHandbook Page\nFocus\nFeatures in this Group\nFeatures\nProduct\nSam Wiskow\nDevelopment\nKam Kyrala\nSite Reliability Engineering\nAlex Hanselka\nCameron S McFarland\nErmia Qasemi\nIgor Wiedler\nKam Kyrala\nSilvester Wainaina\nShreya Shah\nInternal Customers\nInfrastructure Platforms Department\nRunners Platform group\nSlack Channel\n#g_runners_platform\nGitLab Group\n@gitlab-org/production-engineering/runners-platform\nHandbook Page\nProduction Engineering Runners Platform Team\nFocus\nRunners Platform\nFeatures in this Group\nFeatures\nProduct\nSam Wiskow\nDevelopment\nKam Kyrala\nBackend Engineering\nDavis Bickford\nJoe Shaw\nTomasz Maczukin\nSite Reliability Engineering\nAnton Starovoytov\nKam Kyrala\nRehab Hassanein\nZoe Braddock\nInternal Customers\nRunner Department\nGabriel Engel\nGitLab Dedicated\nCells Infrastructure\nName\nMaturity\nLinks\nGitLab Hosted Runners\nViable\nDocumentation Page\nDirection Page\nRunway group\nSlack Channel\n#g_runway\nHandbook Page\nFocus\nService enabblement\nFeatures in this Group\nFeatures\nProduct\nSam Wiskow\nDevelopment\nJP Toto\nSite Reliability Engineering\nChance Feick\nSenior Site Reliability Engineer\nFlorian Forster\nGonzalo Servat\nInternal Customers\nQuality Department\nInfrastructure Department\nTenant Scale stage\nSlack Channel\n#s_tenant_scale\nHandbook Page\nTenant Scale Group\nProduct\nMark Wood\nDevelopment\nNick Nguyen\nSoftware Engineer in Test\nAndy Hohenner\nProduct Design\nChris Micek\nCells Infrastructure group\nSlack Channel\n#g_cells_infrastructure\nFocus\nCells\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nManager, Engineering\nBackend Engineering\nBojan Marjanoviƒá\nKamil Trzci≈Ñski\nJen-Shin Lin\nR√©my Coutable\nSangwoo Han\nThong Kuah\nSite Reliability Engineering\nAaron Richter\nDavid Leach\nTarun Khandelwal\nVladimir Glafirov\nApplication Security Engineer\nRohit Shambhuni\nInfrastructure Security Engineer\nUday Govindia\nName\nMaturity\nLinks\nCell\nDirection Page\nGeo group\nSlack Channel\n#g_geo\nGitLab Group\n@gitlab-org/geo-team\nHandbook Page\nFocus\nGeo Paid GMAU\nFeatures in this Group\nFeatures\nDevelopment\nLucie Zhao\nBackend Engineering\nAakriti Gupta\nChlo√© Fons\nDouglas Barbosa Alexandre\nKamil Trzci≈Ñski\nMichael Kozono\nNatanael Silva\nR√©my Coutable\nScott Murray\nThong Kuah\nFrontend Engineering\nZack Cuddy\nUX Research\nWill Leidheiser\nSupport\nMario Mora\nDaniel Diniz de Noronha\nBo Carbonell\nTechnical Writing\nAchilleas Pipinellis\nApplication Security Engineer\nAmeya Darshan\nInternal Customers\nInfrastructure Department\nName\nMaturity\nLinks\nGeo Replication\nViable\nMarketing Page\nDocumentation Page\nDirection Page\nDisaster Recovery\nCompetitive\nDocumentation Page\nDirection Page\nOrganizations group\nSlack Channel\n#g_organizations\nGitLab Group\n@gitlab-org/tenant-scale-group\nHandbook Page\nOrganizations Team\nFocus\nDatabase PPI\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nMatt Andrews\nBackend Engineering\nAbdul Wadood\nAlex Pooley\nBackend Engineer\nDrew Blessing\nKamil Trzci≈Ñski\nR√©my Coutable\nRutger Wessels\nShubham Kumar\nShane Maglangit\nThong Kuah\nTim McCarthy\nFrontend Engineering\nPeter Hegman\nUX Research\nWill Leidheiser\nProduct Designer\nJason Hung\nSupport\nBruno Freitas\nAsmaa Hassan Ahmed Ali\nTechnical Writing\nPhillip Wells\nApplication Security Engineer\nRohit Shambhuni\nInfrastructure Security Engineer\nUday Govindia\nInternal Customers\nQuality Department\nInfrastructure Department\nName\nMaturity\nLinks\nGroups & Projects\nCompetitive\nDocumentation Page\nDirection Page\nOrganization\nMinimal\nDocumentation Page\nDirection Page\nSec section\nProduct Design\nValerie Karnes\nLegal & Corporate Affairs\nIris Gorman\ngraph TD;\nsec[Sec section]-->s_application_security_testing[Application Security Testing stage];\ns_application_security_testing-->g_composition_analysis[\"Composition Analysis\ngroup\"];\nclick g_composition_analysis \"/handbook/product/categories/#composition-analysis-group\";\ns_application_security_testing-->g_dynamic_analysis[\"Dynamic Analysis\ngroup\"];\nclick g_dynamic_analysis \"/handbook/product/categories/#dynamic-analysis-group\";\ns_application_security_testing-->g_secret_detection[\"Secret Detection\ngroup\"];\nclick g_secret_detection \"/handbook/product/categories/#secret-detection-group\";\ns_application_security_testing-->g_static_analysis[\"Static Analysis\ngroup\"];\nclick g_static_analysis \"/handbook/product/categories/#static-analysis-group\";\ns_application_security_testing-->g_vulnerability_research[\"Vulnerability Research\ngroup\"];\nclick g_vulnerability_research \"/handbook/product/categories/#vulnerability-research-group\";\nsec[Sec section]-->s_security_risk_management[Security Risk Management stage];\ns_security_risk_management-->g_security_infrastructure[\"Security Infrastructure\ngroup\"];\nclick g_security_infrastructure \"/handbook/product/categories/#security-infrastructure-group\";\ns_security_risk_management-->g_security_insights[\"Security Insights\ngroup\"];\nclick g_security_insights \"/handbook/product/categories/#security-insights-group\";\ns_security_risk_management-->g_security_platform_management[\"Security Platform Management\ngroup\"];\nclick g_security_platform_management \"/handbook/product/categories/#security-platform-management-group\";\ns_security_risk_management-->g_security_policies[\"Security Policies\ngroup\"];\nclick g_security_policies \"/handbook/product/categories/#security-policies-group\";\nsec[Sec section]-->s_software_supply_chain_security[Software Supply Chain Security stage];\ns_software_supply_chain_security-->g_authentication[\"Authentication\ngroup\"];\nclick g_authentication \"/handbook/product/product-categories#authentation-group\";\ns_software_supply_chain_security-->g_authorization[\"Authorization\ngroup\"];\nclick g_authorization \"/handbook/<no value>\";\ns_software_supply_chain_security-->g_compliance[\"Compliance\ngroup\"];\nclick g_compliance \"/handbook/product/product-categories#compliance-group\";\ns_software_supply_chain_security-->g_pipeline_security[\"Pipeline Security\ngroup\"];\nclick g_pipeline_security \"/handbook/product/categories/#pipeline-security-group\";\nClick on a group name to see more details.\nApplication Security Testing stage\nSlack Channel\n#s_application-security-testing\nGitLab Group\n@gitlab-org/secure\nHandbook Page\nApplication Security Testing Sub-Department\nProduct\nSarah Waldner\nDevelopment\nThomas Woodham\nProduct Design\nJustin Mandell\nComposition Analysis group\nSlack Channel\n#g_ast-composition-analysis\nSlack Alias\nsecure_composition_analysis_dev\nGitLab Group\n@gitlab-org/secure/composition-analysis-dev\nFocus\nComposition Analysis Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nJohn Crowley\nDevelopment\nNick Ilieskou\nBackend Engineering\nOscar Tovar\nIgor Frenkel\nNick Ilieskou\nOlivier Gonzalez\nOrin Naaman\nYasha Rise\nZamir Martins Filho\nProduct Marketing\nSalman Ladha\nSupport\nDanny Bailey\nTechnical Writing\nRussell Dickenson\nApplication Security Engineer\nNikhil George\nCustomer Success\nBryan Miller\nBrian Wald\nInternal Customers\nProduct Security Department\nNikhil George\nEngineering Department\nName\nMaturity\nLinks\nSoftware Composition Analysis\nViable\nDocumentation Page\nDirection Page\nContainer Scanning\nViable\nDocumentation Page\nDirection Page\nDynamic Analysis group\nSlack Channel\n#g_ast-dynamic-analysis\nSlack Alias\nsecure_dynamic_analysis_be\nGitLab Group\n@gitlab-org/secure/dynamic-analysis-be\nFocus\nDynamic Analysis Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nJohn Crowley\nDevelopment\nThomas Woodham\nBackend Engineering\nArpit Gogia\nDavid Nelson\nHannah Baker\nMike Eddington\nProduct Marketing\nSalman Ladha\nSupport\nKate Grechishkina\nTechnical Writing\nPhillip Wells\nApplication Security Engineer\nNikhil George\nCustomer Success\nBryan Miller\nBrian Wald\nInternal Customers\nProduct Security Department\nNikhil George\nEngineering Department\nName\nMaturity\nLinks\nViable\nDocumentation Page\nDirection Page\nFuzz Testing\nViable\nDocumentation Page\nDirection Page\nAPI Security\nViable\nDocumentation Page\nDirection Page\nAttack Emulation\nSecret Detection group\nSlack Channel\n#g_ast-secret-detection\nSlack Alias\nast_secret_detection_team\nGitLab Group\n@gitlab-org/secure/secret-detection\nFocus\nSecret Detection Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nAlana Bellucci\nBackend Engineering Manager\nAmar Patel\nBackend Engineering\nAhmed Hemdan\nAditya Tiwari\nCraig Smith\nRadu Birsan\nSerena Fang\nVishwa Bhat\nFrontend Engineering\nRadu Birsan\nProduct Marketing\nSalman Ladha\nTechnical Writing\nPhillip Wells\nApplication Security Engineer\nNikhil George\nCustomer Success\nBryan Miller\nBrian Wald\nInternal Customers\nProduct Security Department\nNikhil George\nEngineering Department\nName\nMaturity\nLinks\nSecret Detection\nViable\nDocumentation Page\nDirection Page\nStatic Analysis group\nSlack Channel\n#g_ast-static-analysis\nSlack Alias\nsecure_static_analysis_team\nGitLab Group\n@gitlab-org/secure/static-analysis\nFocus\nSAST Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nConnor Gilbert\nBackend Engineering Manager\nThiago Figueir√≥\nBackend Engineering\nAdam Cohen\nHua Yan\nJason Leasure\nJulian Thome\nMher Tolpin\nPhilip Cunningham\nShao Ming Tan\nThiago Figueir√≥\nProduct Marketing\nSalman Ladha\nSupport\nChristopher Chewa Mutua\nTechnical Writing\nRussell Dickenson\nApplication Security Engineer\nNikhil George\nCustomer Success\nBryan Miller\nBrian Wald\nInternal Customers\nProduct Security Department\nNikhil George\nEngineering Department\nName\nMaturity\nLinks\nViable\nDocumentation Page\nDirection Page\nCode Quality\nMinimal\nDocumentation Page\nDirection Page\nVulnerability Research group\nSlack Channel\n#g_ast-vulnerability-research\nFocus\nPaid GMAU\nFeatures in this Group\nFeatures\nProduct\nSarah Waldner\nBackend Engineering Manager\nDaniel Abeles\nBackend Engineering\nAbisheik Magesh\nAdarsh Dinesh\nAlexander Dietrich\nBhavya Kaushal\nDaniel Abeles\nDinesh Bolkensteyn\nIsaac Dawson\nMichael Henriksen\nProduct Marketing\nSalman Ladha\nSupport\nMario Mora\nApplication Security Engineer\nNikhil George\nInternal Customers\nProduct Security Department\nDennis Appelt\nEngineering Department\nName\nMaturity\nLinks\nGitLab Advisory Database\nDirection Page\nSecurity Risk Management stage\nSlack Channel\n#s_srm\nProduct\nDean Agron\nProduct Design\nJustin Mandell\nSecurity Infrastructure group\nSlack Channel\n#g_srm_security_infrastructure\nFocus\nThreat Insights Paid GMAU\nFeatures in this Group\nFeatures\nBackend Engineering Manager\nRyan Wells\nBackend Engineering\nAdrien Narinesingh\nBala Kumar Subramani\nGregory Havenga\nMehmet Emin Inac\nMicha≈Ç ZajƒÖc\nRyan Wells\nSchmil Monderer\nRushik Subba\nName\nMaturity\nLinks\nVulnerability Management\nViable\nDocumentation Page\nDirection Page\nDependency Management\nViable\nDocumentation Page\nDirection Page\nSecurity Insights group\nSlack Channel\n#g_srm_security_insights\nFocus\nThreat Insights Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nMike Clausen\nBackend Engineering\nBrian Williams\nCharlie Kroon\nSubashis Chakraborty\nUgo Nnanna Okeadu\nFrontend Engineering\nCharlie Kroon\nDave Pisek\nLorenz van Herwaarden\nSamantha Ming\nSavas Vedova\nProduct Designer\nBecka Lippert\nProduct Marketing\nSalman Ladha\nSupport\nGerardo Gutierrez\nTechnical Writing\nRyan Lehmann\nCustomer Success\nMirko Brandner\nYu-Chen Hsueh\nInternal Customers\nProduct Security Department\nGreg Myers\nName\nMaturity\nLinks\nVulnerability Management\nViable\nDocumentation Page\nDirection Page\nDependency Management\nViable\nDocumentation Page\nDirection Page\nSecurity Platform Management group\nSlack Channel\n#g_srm_security_platform_management\nFocus\nSec section GMAU\nFeatures in this Group\nFeatures\nProduct\nSara Meadzinger\nBackend Engineering\nGal Katz\nMiki Amos\nRoss Fuhrman\nSenior Backend Engineer\nFrontend Engineering\nChen Charnolevsky\nDheeraj Joshi\nMiranda Fluharty\nFullstack Engineering Manager\nOr Gal\nProduct Designer\nMichael Fangman\nProduct Marketing\nSalman Ladha\nSupport\nGerardo Gutierrez\nTechnical Writing\nRyan Lehmann\nCustomer Success\nMirko Brandner\nYu-Chen Hsueh\nInternal Customers\nProduct Security Department\nGreg Myers\nName\nMaturity\nLinks\nSecurity Testing Configuration\nPlanned 2024\nDirection Page\nSecurity Asset Inventories\nPlanned 2024\nDirection Page\nSecurity Testing Integrations\nPlanned 2024\nDirection Page\nSecurity Policies group\nSlack Channel\n#g_srm_security_policies\nFocus\nSecurity Policies Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nGrant Hickman\nDevelopment\nAlan (Maciej) Paruszewski\nBackend Engineering\nAndy Schoenen\nDominic Bauer\nMd Imam Hossain\nMarcos Rocha\nMartin Cavoj\nSashi Kumar Kumaresan\nFrontend Engineering\nAlexander Turinske\nArtur Fedorov\nMartin Cavoj\nProduct Designer\nTorian Parker\nProduct Marketing\nSalman Ladha\nSupport\nDanny Bailey\nUlises Fierro\nTechnical Writing\nRyan Lehmann\nCustomer Success\nMirko Brandner\nYu-Chen Hsueh\nInternal Customers\nProduct Security Department\nDominic Couture\nSecurity Assurance Department\nByron Boots\nInfrastructure Department\nName\nMaturity\nLinks\nSecurity Policy Management\nMinimal\nDocumentation Page\nDirection Page\nSoftware Supply Chain Security stage\nSlack Channel\n#s_govern\nGitLab Group\n@gitlab-org/govern\nHandbook Page\nDevelopment\nThomas Woodham\nJerome Ng\nProduct Design\nJustin Mandell\nAuthentication group\nTotal Engineers\nBackend\n2\nSlack Channel\n#g_sscs_authentication\nFocus\nSoftware Supply Chain Security Authentication Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nJoe Randazzo\nDevelopment\nAdil Farrukh\nBackend Engineering\nAleksei Lipniagov\nAndrew Evans\nBogdan Denkovych\nDaniele Bracciani\nImre Farkas\nMatthias K√§ppler\nShilpa Kundapur\nSmriti Garg\nAboobacker MK\nFrontend Engineering\nEduardo Sanz-Garcia\nFernando Cardenas\nProduct Marketing\nSalman Ladha\nSupport\nAsmaa Hassan Ahmed Ali\nJio Castillo\nAlvin Gounder\nTechnical Writing\nIsaac Durham\nApplication Security Engineer\nRohit Shambhuni\nInternal Customers\nCustomer Support Department\nProduct Security Department\nRohit Shambhuni\nCorporate Security Department\nInfrastructure Department\nName\nMaturity\nLinks\nSystem Access\nViable\nDocumentation Page\nDirection Page\nUser Profile\nDocumentation Page\nDirection Page\nAuthorization group\nSlack Channel\n#g_sscs_authorization\nFocus\nSoftware Supply Chain Security Authorization Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nJoe Randazzo\nDevelopment\nJay Swain\nBackend Engineering\nAyush Billore\nAlex Buijs\nDiane Russel\nEugie Limpin\nHinam Mehra\nIan Anderson\nJarka Ko≈°anov√°\nMatthew MacRae-Bovell\nMo Khan\nFrontend Engineering\nDaniel Tian\nProduct Designer\nIlonah Pelaez\nProduct Marketing\nSalman Ladha\nTechnical Writing\nIsaac Durham\nApplication Security Engineer\nRohit Shambhuni\nInternal Customers\nProduct Security Department\nRohit Shambhuni\nCorporate Security Department\nSecurity Operations Department\nShawn Sichak\nName\nMaturity\nLinks\nPermissions\nViable\nDocumentation Page\nDirection Page\nInstance Resiliency\nMinimal\nDocumentation Page\nDirection Page\nInsider Threat\nMinimal\nDirection Page\nCompliance group\nSlack Channel\n#g_sscs_compliance\nFocus\nSoftware Supply Chain Security Compliance Paid GMAU\nFeatures in this Group\nFeatures\nProduct\nIan Khor\nDevelopment\nNathan Rosandich\nBackend Engineering\nAndrew Jung\nHarsimar Sandhu\nHitesh Raghuvanshi\nHuzaifa Iftikhar\nJean van der Walt\nSam Figueroa\nFrontend Engineering\nIllya Klymov\nSam Figueroa\nScott Hampton\nProduct Designer\nCamellia X. Yang\nProduct Marketing\nSalman Ladha\nTechnical Writing\nEvan Read\nInternal Customers\nCustomer Support Department\nProduct Security Department\nDominic Couture\nSecurity Assurance Department\nByron Boots\nInfrastructure Department\nName\nMaturity\nLinks\nAudit Events\nViable\nDocumentation Page\nDirection Page\nCompliance Management\nViable\nDocumentation Page\nDirection Page\nRelease Evidence\nMinimal\nDocumentation Page\nDirection Page\nPipeline Security group\nSlack Channel\n#g_sscs_pipeline-security\nFocus\nPipeline Security Sum of AMAUs\nFeatures in this Group\nFeatures\nProduct\nJocelyn Eillis\nDevelopment\nFabien Catteau\nBackend Engineering\nAlex Scheel\nDmytro Biryukov\nErick Bajao\nFabien Catteau\nJayakrishnan Mallissery\nShabini Rajadas\nSam Joan Roque-Worcel\nFrontend Engineering\nMireya Andres\nSupport\nNilanka De Silva\nPaul Murray\nTechnical Writing\nMarcel Amirault\nInternal Customers\nQuality Department\nUX Department\nInfrastructure Department\nAutoDevOps and Kubernetes Group\nProduct Security Department\nName\nMaturity\nLinks\nArtifact Security\nMinimal\nDocumentation Page\nDirection Page\nSecrets Management\nMinimal\nDocumentation Page\nDirection Page\nPossible future Stages\nWe have boundless\nambition\n, and we expect GitLab to continue to add new stages to the DevOps lifecycle. Below is a list of future stages we are considering:\nData, maybe leveraging\nMeltano product\nNetworking, maybe leveraging some of the\nopen source standards for networking\nand/or\nTerraform networking providers\nDesign, we already have\ndesign management\ntoday\nStages are different from the\napplication types\nyou can service with GitLab.\nMaturity\nNot all categories are at the same level of maturity. Some are just minimal and\nsome are lovable. See the\ncategory maturity page\nto see where each\ncategory stands.\nOther functionality\nThis list of other functionality so you can easily find the team that owns it.\nMaybe we should make our features easier to search to replace the section below.\nOther functionality in Plan stage\nPlan\nstage\nProject Management group\nassignees\nmilestones\ndue dates\nlabels\nissue weights\nquick actions\nemail notifications\nto-do list\nReal-time features\nKnowledge group\nmarkdown functionality\nrich text editor\nOther functionality in Create stage\nCreate\nstage\nCode Review group\nMerge Requests\nGitLab CLI\nRemote Development group\nGitLab Workflow extension for Visual Studio Code\nOther functionality in Verify\nCI Group\nCI Abuse Response\nPipeline Authoring Group\nCI/CD Template Management and Contributions\nOther functionality in Monitor stage\nMonitor stage\nOther functionality in Engineering Productivity\nEngineering Productivity\nOther functionality in Developer Experience\nDeveloper Experience\nReference Architectures\nGitLab Environment Toolkit (GET)\nGitLab Performance Tool (GPT)\nPerformance Test Data\nZero Downtime Testing Tool\nInternal Customers:\nGitaly\n,\nSaaS Platforms section\n,\nInfrastructure Department\n,\nSupport Department\n,\nCustomer Success\nOther functionality in Analytics\nAnalytics\nProduct Analytics group\nAnalytics Dashboards\n- used by many groups to add visualizations or provide pre-configured dashboards to users\nFacilitated functionality\nSome product areas are have a broad impact across multiple stages. Examples of this include, among others:\nShared project views, like the\nproject\noverview and settings page.\nFunctionality specific to the\nadmin area\nand not tied to a feature belonging to a particular stage.\nUI components available through our design system,\nPajamas\n.\nDashboards for displaying analytics, such as Product Analytics, Value Stream Analytics, and others.\nWhile the mental models for these areas are maintained by specific stage groups, everyone is encouraged to contribute within the guidelines that those teams establish. For example, anyone can contribute a new setting following the established guidelines for Settings. When a contribution is submitted that does not conform to those guidelines, we merge it and ‚Äúfix forward‚Äù to encourage innovation.\nIf you encounter an issue falling into a facilitated area:\nFor issues that relate to updating the guidelines, apply the\ngroup::category\nlabel for the facilitating group.\nFor issues that relate to adding content related to a facilitated area, apply the\ngroup::category\nlabel for the most closely related group. For example, when adding a new setting related to Merge Requests, apply the\ngroup::source code\nlabel.\nShared responsibility functionality\nThere are certain product capabilities that are foundational in nature and affect or refer to horizontal components of the architecture that have an impact across functional groups and stages.\nThese capabilities may refer to ‚ÄúFacilitated Functionality‚Äù (see section above) where the mental models are owned by a particular group, while anyone can contribute. However, there may be others that will not have a clear owner because they don‚Äôt fall squarely into any particular group‚Äôs purview of product categories. Prime examples of this are issues related to the improvement or evolution of foundational components, frameworks and libraries that are used by several or all groups across the organization. Another example could be components created by special task groups in the past that have been since dissolved and that have not required continued development to justify the funding of a dedicated permanent group to maintain them.\nWhatever the source of the functionality, rather than thinking of these components as ‚Äúnot having an owner‚Äù, it is important to think of them as being owned by everyone through the lens of shared responsibility. ‚ÄúShared responsibility‚Äù means that every group should be committed and responsible to\ncontribute\nto their continued maintenance, improvement and innovation.\nContribution\n, in this context, may manifest in different ways:\nTriage by coordinating conversations with stakeholders from different functions and at different levels to find the right owner and/or set the right level of priority.\nProduct feature scoping and UX design by fleshing out the details of implementation in requirements documents and/or mockups.\nTechnical scoping and feasibility analysis for possible technical and architectural approaches to implementation\nActual implementation and release activities\nIt does not mean, however, that a single group should necessarily be solely responsible for all of these activities. Multiple groups could end up collaborating in execution. This coordination however requires a careful triage of the shared responsibility issues in the issue tracker where a single\ncoordinates these activities.\nFor more information please review\nthis section in the quality department handbook\nto learn more about a decentralized approach to triaging these types of issues.\nCategories A-Z\nCategory\nGroup\nAcquisition\nacquisition\nAcquisition\nActivation\nactivation\nActivation\nAdd-on Provisioning\nadd-on_provisioning\nProvision\nGitLab Advisory Database\nadvisory_database\nVulnerability Research\nAI Abstraction Layer\nai_abstraction_layer\nAI Framework\nAI Agents\nai_agents\nMLOps\nAI Evaluation\nai_evaluation\nAI Framework\nAI Research\nai_research\nAI Framework\nAPI Security\napi_security\nDynamic Analysis\nApplication Instrumentation\napplication_instrumentation\nAnalytics Instrumentation\nArtifact Security\nartifact_security\nPipeline Security\nAttack Emulation\nattack_emulation\nDynamic Analysis\nAudit Events\naudit_events\nCompliance\nAuto DevOps\nauto_devops\nEnvironments\nBackup/Restore of GitLab instances\nbackup_restore\nDurability\nBuild\nbuild\nGitLab Build\nCapacity Planning\ncapacity_planning\nObservability\nCell\ncell\nCells Infrastructure\nVariables\nci_variables\nPipeline Authoring\nCloud Connector\ncloud_connector\nCloud Connector\nCloud Native Installation\ncloud_native_installation\nSelf Managed\nCode Quality\ncode_quality\nStatic Analysis\nCode Review Workflow\ncode_review_workflow\nCode Review\nCode Search\ncode_search\nGlobal Search\nCode Suggestions\ncode_suggestions\nCode Creation\nCode Testing and Coverage\ncode_testing\nPipeline Execution\nCompliance Management\ncompliance_management\nCompliance\nComponent Catalog\ncomponent_catalog\nPipeline Authoring\nConsumables Cost Management\nconsumables_cost_management\nUtilization\nContainer Registry\ncontainer_registry\nContainer Registry\nContainer Scanning\ncontainer_scanning\nComposition Analysis\nContinuous Delivery\ncontinuous_delivery\nEnvironments\nContinuous Integration (CI)\ncontinuous_integration\nPipeline Execution\nCustom Dashboards Foundation\ncustom_dashboards_foundation\nPlatform Insights\nCustomersDot and quote to cash integrations\ncustomersdot_and_quote_to_cash_integrations\nFulfillment Platform\nDatabase\ndatabase\nDatabase Frameworks\nDataOps\ndataops\nDataOps\nGitLab Dedicated\ndedicated\nEnvironment Automation\nDelivery\ndelivery\nGitLab Deploy\nFramework\nGitLab Release\nDependency Firewall\ndependency_firewall\nContainer Registry\nDependency Management\ndependency_management\nSecurity Infrastructure\nSecurity Insights\nDeployment Management\ndeployment_management\nEnvironments\nDesign Management\ndesign_management\nProduct Planning\nPajamas Design System\ndesign_system\nDesign System\nDevOps Reports\ndevops_reports\nOptimize\nDisaster Recovery\ndisaster_recovery\nGeo\nDORA Metrics\ndora_metrics\nOptimize\nDuo Chat\nduo_chat\nDuo Chat\nGitLab Duo Settings\nduo_setting\nCustom Models\nDuo Workflow\nduo_workflow\nDuo Workflow\ndynamic_application_security_testing\nDynamic Analysis\nEditor Extensions\neditor_extensions\nEditor Extensions\nEnvironment Management\nenvironment_management\nEnvironments\nError Budgets\nerror_budgets\nObservability\nFeature Flags\nfeature_flags\nEnvironments\nFleet Visibility\nfleet_visibility\nRunner\nFulfillment Infradev\nfulfillment_infradev\nFulfillment Platform\nFuzz Testing\nfuzz_testing\nDynamic Analysis\nGeo Replication\ngeo_replication\nGeo\nGit\ngit\nGit\nGitaly\ngitaly\nGitaly\nGitLab CLI\ngitlab_cli\nCode Review\nGitLab Documentation Site\ngitlab_docs\nGlobal Search\nglobal_search\nGlobal Search\nGroups & Projects\ngroups_and_projects\nOrganizations\nHelm Chart Registry\nhelm_chart_registry\nPackage Registry\nGitLab Hosted Runners\nhosted_runners\nRunners Platform\nHosted Runners\nImporters\nimporters\nImport\nIncident Management\nincident_management\nPlatform Insights\nInfrastructure as Code\ninfrastructure_as_code\nEnvironments\nInsider Threat\ninsider_threat\nAuthorization\nInstance Resiliency\ninstance_resiliency\nAuthorization\nJob Artifacts\njob_artifacts\nPipeline Execution\nMarkdown\nmarkdown\nKnowledge\nMCP Server\nmcp_server\nMerge Trains\nmerge_trains\nPipeline Execution\nMLOps\nmlops\nMLOps\nMobile DevOps\nmobile_devops\nMobile DevOps\nModel Personalization\nmodel_personalization\nCustom Models\nNavigation\nnavigation\nPersonal Productivity\nNotifications\nnotifications\nPersonal Productivity\nObservability\nobservability\nPlatform Insights\nOKR Management\nokr_management\nProduct Planning\nOmnibus Package\nomnibus_package\nSelf Managed\nOn-call Schedule Management\non_call_schedule_management\nPlatform Insights\nOnboarding\nonboarding\nAcquisition\nOrganization\norganization\nOrganizations\nPackage Registry\npackage_registry\nPackage Registry\nPages\npages\nKnowledge\nPermissions\npermissions\nAuthorization\nPipeline Composition\npipeline_composition\nPipeline Authoring\nPlan Provisioning\nplan_provisioning\nProvision\nPortfolio Management\nportfolio_management\nProduct Planning\nProduct Analytics\nproduct_analytics\nPlatform Insights\nUS Public Sector Services\npubsec_services\nUS PubSec\nQuality Management\nquality_management\nProduct Planning\nRate Limiting Framework\nrate_limiting\nFoundations\nRedis\nredis\nDurability\nRelease Evidence\nrelease_evidence\nCompliance\nRelease Orchestration\nrelease_orchestration\nEnvironments\nRequirements Management\nrequirements_management\nProduct Planning\nReview Apps\nreview_apps\nPipeline Execution\nGitLab Runner Core\nrunner\nRunner\nSeat Cost Management\nseat_cost_management\nSeat Management\nSecret Detection\nsecret_detection\nSecret Detection\nSecrets Management\nsecrets_management\nPipeline Security\nSecurity Asset Inventories\nsecurity_asset_inventories\nSecurity Platform Management\nSecurity Policy Management\nsecurity_policy_management\nSecurity Policies\nSecurity Testing Configuration\nsecurity_testing_configuration\nSecurity Platform Management\nSecurity Testing Integrations\nsecurity_testing_integrations\nSecurity Platform Management\nSelf-Hosted Models\nself-hosted_models\nCustom Models\nService Desk\nservice_desk\nProject Management\nService Ping\nservice_ping\nAnalytics Instrumentation\nSettings\nsettings\nPersonal Productivity\nSoftware Composition Analysis\nsoftware_composition_analysis\nComposition Analysis\nSource Code Management\nsource_code_management\nSource Code\nSoftware Supply Chain Security\nsscs\nstatic_application_security_testing\nStatic Analysis\nSubscription Management\nsubscription_management\nSubscription Management\nSwitchboard\nswitchboard\nSwitchboard\nSystem Access\nsystem_access\nAuthentication\nTeam Planning\nteam_planning\nProject Management\nText Editors\ntext_editors\nKnowledge\nUser Management\nuser_management\nSeat Management\nUser Profile\nuser_profile\nAuthentication\nValue Stream Management\nvalue_stream_management\nOptimize\nVirtual Registry\nvirtual_registry\nContainer Registry\nVulnerability Management\nvulnerability_management\nSecurity Infrastructure\nSecurity Insights\nWeb IDE\nweb_ide\nRemote Development\nWiki\nwiki\nKnowledge\nWorkspaces\nworkspaces\nRemote Development\nFeatures by Group\nList of features by product group\nFeatures Category Quick Lookup\nLookup table of groups and slack channels by feature category\nGitLab the Product\nAbout GitLab the product\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 10863}
{"doc_id": "ede8b9c05d097887", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/developer-experience", "title": "Developer Experience | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nDeveloper Experience\nThe Developer Experience section is focused on improving the developer experience to enable all teams to ship high-quality changes\nMission\nOur mission is to empower developers to focus on innovation, build, and deliver high-quality products to our customers. We aim to achieve this through:\nState-of-the-art developer tooling.\nRobust and reliable test infrastructure.\nData-driven analysis for informed decision-making.\nStreamlined release and test governance to ensure consistency, compliance, and quality across the development lifecycle.\nContinuous performance profiling.\nTeam Structure\nInfrastructure Platforms Department structure\nDeveloper Experience group structure\ngraph TD\nDE[Developer Experience group]\nclick DE \"/handbook/engineering/infrastructure-platforms/developer-experience\"\nDE --> DA[Development Analytics]\nclick DA \"/handbook/engineering/infrastructure-platforms/developer-experience/development-analytics\"\nDE --> DT[Developer Tooling]\nclick DT \"/handbook/engineering/infrastructure-platforms/developer-experience/developer-tooling\"\nDE --> FR[Feature Readiness]\nclick FR \"/handbook/engineering/infrastructure-platforms/developer-experience/feature-readiness\"\nDE --> PE[Performance Enablement]\nclick PE \"/handbook/engineering/infrastructure-platforms/developer-experience/performance-enablement\"\nDE --> TG[Test Governance]\nclick TG \"/handbook/engineering/infrastructure-platforms/developer-experience/test-governance\"\nTeam Members\nManagement team\nName\nRole\nIndividual contributors\nThe following people are members of the\nDevelopment Analytics group\n:\nName\nRole\nAbhinaba Ghosh\nEngineering Manager, Test Platform\n, Development Analytics\nFullstack Engineer\nJay Montal\nSenior Fullstack Engineer\n, Growth::Acquisition\nPaul Gascou-Vaillancourt\nSenior Frontend Engineer\n, Foundations:Personal Productivity\nThomas Hutterer\nSenior Fullstack Engineer\n, Foundations:Personal Productivity\nThe following people are members of the\nDeveloper Tooling group\n:\nName\nRole\nMohga Gamea\nManager, Quality Engineering\nBackend Engineer\nManuel Sch√∂nlaub\nBackend Engineer\nKev Kloss\nFrontend Engineer\nMatias Alvarez\nBackend Engineer\nNao Hashizume\nBackend Engineer\nPeter Leitzen\nStaff Backend Engineer, Engineering Productivity\nThe following people are members of the\nFeature Readiness group\n:\nName\nRole\nThe following people are members of the\nPerformance Enablement group\n:\nName\nRole\nThe following people are members of the\nTest Governance group\n:\nName\nRole\nAmy Phillips\nSenior Engineering Manager, Dedicated\nAlberto Bignotti\nBackend Engineer\nAndy Hohenner\nSenior Software Engineer in Test\n, SaaS Platforms:US Public Sector Services\nBrittany Wilkerson\nSenior Software Engineer in Test\n, Dedicated:Environment Automation\nChance Feick\nStaff Backend Engineer\nChloe Liu\nStaff Software Engineer in Test, Development Analytics\nD√©sir√©e Chevalier\nSenior Software Engineer in Test\n, Test Governance\nHarsha Muralidhar\nSenior Software Engineer in Test, Govern\nJay McCure\nSenior Software Engineer in Test\n, Dev:Create\nJohn McDonnell\nSenior Software Engineer in Test\n, Systems:Gitaly\nJoy Roodnick\nSoftware Engineer in Test\n\", Test Governance\nMax Woolf\nStaff Backend Engineer\n, Analytics:Platform Insights\nMohga Gamea\nManager, Quality Engineering\nNivetha Prabakaran\nSoftware Engineer in Test\n, Dev:Manage\nPaul John Phillips\nBackend Engineering Manager, Cloud Connector\nRichard Chong\nSenior Software Engineer in Test\n, Developer Experience:Feature Readiness\nSanad Liaquat\nStaff Software Engineer in Test\n, Test and Tools Infrastructure\nSofia Vistas\nSenior Software Engineer in Test\n, Test and Tools Infrastructure\nTiffany Rea\nSenior Software Engineer in Test\n, CI:Verify\nTim Beauchamp\nSoftware Engineer in Test\nVishal Patel\nSoftware Engineer in Test, Core Platform:Systems\nWill Meek\nSenior Software Engineer in Test\n, Test Governance\nProject Management\nWe use epics, issues, and issue/epic boards to organize our work, as they complement each other.\nThe structure of epics, and the responsibilities of the DRI are documented on the\nThe Infrastructure Platforms Project Management handbook page\nWeights\nWhen estimating work, we use Fibonacci Series for weights and limit the highest number to 8. The definitions are as below:\nWeight\nDescription\n1 - Trivial\nSimple and quick changes such as typo fixes, test tag updates, or trivial documentation additions\n2 - Small\nStraight forward changes with no underlying dependencies needed, such as new tests that use existing factories or page objects\n3 - Medium\nWell understood changes with a few dependencies. Few surprises can be expected, such as new tests that require new factories or page objects/components\n5 - Large\nA task that will require some investigation and research, in addition to the above weights, such as tests that need framework level changes which can impact other parts of the test suite\n8 - X-large\nA very large task that will require much investigation and research. Pushing initiative level\n13 or more\nPlease break the work down further, we do not use weights higher than 8.\nBug Prioritization\nThis page describes the bug prioritization process performed by the quality engineering sub-department as part of the cross-functional prioritization process.\nDeveloper Experience Dashboards\nThis handbook page serves as a central repository for all our Developer Experience dashboard details\nDeveloper Experience Design Documents\nA design document describes a technical vision and a set of principles that will guide various ‚Ä¶\nDeveloper Experience Onboarding\nGuidelines for onboarding as a new Developer Experience Stage member\nDeveloper Experience Project Management\nGuidelines for project management for the Developer Experience Stage at GitLab\nDeveloper Tooling team\nThe Developer Tooling team enables all GitLab contributors to efficiently deliver results for customers by providing stable and performant software development tools, such as the GitLab Development Kit.\nDevelopment Analytics Group\nDevelopment Analytics Group under Developer Experience Stage\nFeature Readiness\nFeature Readiness group within Developer Experience sub-department\nPerformance Enablement\nPerformance Enablement group within Developer Experience sub-department\nQuality Engineering Learning Resources\nThe Quality Engineering Sub-Department has compiled a list of learning resources for SET and QEM growth.\nTest Governance Group\nTest Governance Group under Developer Experience Stage\nTest Platform Roadmap\nRoadmap for the Test Platform Sub-Department at GitLab\nLast modified May 21, 2025:\nUpdating the DevEx handbook page (\nda703ee4\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 868}
{"doc_id": "289de548581ae030", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/gitlab-delivery/build/maintenance", "title": "Distribution Team Infrastructure and Maintenance | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nGitLab Delivery\nGitLab Delivery:Build\nDistribution Team Infrastructure and Maintenance\nDistribution Team Handbook\nInfrastructure\nAs part of the team tasks, team has responsibility towards the following nodes/tasks:\ndev.gitlab.org\n: This internal GitLab instance runs nightly CE packages and\nis used for building official packages as well as hosting security release\nrelated MRs before publishing. Details of the node as well as the maintenance\ntasks can be found in\nthe dev.gitlab.org specific docs\n.\nBuild Machines: Runner manager machines that spins up machines that are used\nby various CI jobs for building and publishing packages. Details of the node\nas well as the maintenance tasks can be found in\nthe build machines specific docs\npackages.gitlab.com\n: This is a self-hosted package server managed by\nGitLab Infrastructure team. It‚Äôs used by Distribution team to ship GitLab CE and EE\nomnibus-gitlab packages along with Verify team to ship gitlab-runner packages\nto users. GitLab CE and EE packages are built via our CI pipeline on\ndev.gitlab.org\n.\nDistribution uses the package server as a tool and doesn‚Äôt have any\nmaintenance tasks associated with it. The package server is currently deployed\non our own infrastructure from a package provided by Packagecloud.io. If the\nInfrastructure team requires help, Distribution team should provide a best effort\nto resolve issues.\nKeeping SSH public keys\ngitlab.com\nand\ndev.gitlab.org\nup-to-date: The CI\nconfiguration of\nomnibus-gitlab\nuses public SSH keys of these servers\nduring execution. The keys are stored in the codebase (in\nsupport/known_hosts\n)\nand it is the responsibility of the team to update them in case any of them\nchanges. To do so:\nbundle exec rake infrastructure:known_hosts\ngit add support/known_hosts\ngit commit -m \"Update SSH keys\"\nPlease note that you need to push this change as a separate MR and ask the\nmaintainer for review.\nExternal Services\nAs part of the team tasks, the team uses the following external services:\ndependencies.io\n: This is used to automatically update\nsoftware components required by GitLab. See\nthe specific docs\nfor how to work with this service.\nDistribution Team Infrastructure and Maintenance - Build Infrastructure\nDetails and maintenance tasks for the Distribution Team's build nodes\nDistribution Team Infrastructure and Maintenance - dev.gitlab.org\nGuidelines for maintaining dev.gitlab.org, including manual package upgrades/downgrades, and GitLab configuration changes.\nDistribution Team Infrastructure: ARM\nDescribes the hardware and use of infrastructure for building ARM packages.\nDistribution Team usage of Renovate\nDescribes the external GitLab Projects used by the Distribution Team, how to handle MRs from these, and resources for Renovate maintenance and new dependency addition.\nLast modified June 4, 2025:\nCopy all distribution files to the newly created build folder (\nf319f415\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 446}
{"doc_id": "666ec297ed515f4a", "url": "https://handbook.gitlab.com/handbook/marketing/marketing-strategy-and-platforms", "title": "Marketing Strategy & Platforms | The GitLab Handbook", "text": "The Handbook\nMarketing\nMarketing Strategy & Platforms\nLearn more about the Marketing Strategy & Platforms.\nMarketing Strategy, Operations, and Analytics Team Charter\nMission & Objectives\nOur mission is to enable efficient operations and actionable analytics insights, working across all Marketing teams.\n1. Actionable Insights\n2. Continuous Optimization\n3. Experience Integration\nTeam(s)\n- Strategy & Analytics\nTeam(s)\n-\nMarketing Operations\nTeam(s)\n- Globalization\nTheme\nIncrementality\nTheme\nExperimentation\nTheme\nGuided Journey\nResource Allocation\nBalance Short Term Focus & Long Term Goals. We will be disciplined yet stay nimble in resource allocation & prioritization.\nCore: ~ 70%\nDeliver conversion lift & pipeline goals across segments & sales motions\nProvide clear visibility and insights to marketing performance KPIs\nImprove operational efficiency\nEnhance security and privacy posture\nStrategic: ~ 25%\nBuild a strong foundation for global expansion\nDesign a seamless in-product, e-commerce, and web navigation experience\nVenture: ~ 5%\nLeverage embedded analytics to drive acquisition and expansion\nRoles & Responsibilities\nMarketing Technologists\nPerformance Assessment\nFour Funnels\nSelf-Serve\nSales-Assisted\nBottom-Up\nTop Down\nSales Motion\nNo Touch\nTransactional\nLand & Expand\nOutbound, ABM\nPersona / Segment\nSMB core user, Community user\nMid-Market core-user, SMB buyer\nLarge Mid-Market, Enterprise\nEnterprise\nKain Goal of the PLG Motion\nSelf-Serve Revenue\nPipeline Generation\nExpansion Revenue\nSales Enablement\nMain Funnel Goal\nSelf-Serve ARR\nExpansion ARR on top of Self-Serve ARR\nPipeline generation on top of new teams\nPipeline generation on key accounts\nFunnel\nCommunication Norms\nDevelop habits & make incremental progress\n1.01 ^ 365 = 37.78\n0.99 ^ 365 = 0.026\nCollaborate with & learn from diverse sources\n‚ÄúIf you want to go fast, go alone. If you want to go far, go together.‚Äù\nGround Rules\nWe learn from each other by fostering group intelligence\nWe lean towards innovation and collaborative decision-making by being bold, but not bully, and being thoughtful, but not lazy\nWe cultivate growth mindset by having the courage to try new things and fail better\nWe‚Äôre stronger as a team by sharing the workload, and not minding who gets the credit\n‚ÄúThe most important function of the leader is to encourage everyone to see him- or herself as a member of the larger system, pursuing a common vision, holding common values, and cooperating with each other in an environment of mutual support and respect.‚Äù\nInterdependencies\nWithin Marketing\nTeam\nInterdependencies\nProduct Marketing\n- Messaging & Content\nIntegrated Marketing\n- Campaign Strategy & Execution Plan\n- Field & Partner Rules of Engagement\nBrand\n- Brand Design\nOther Functions\nTeam\nInterdependencies\nFinance & Business Technology\n- Financial Planning & Budget\n- Data Engineering\nField Sales & Operations\n- Segment & Global Expansion Priority\n- Sales Process, Rules of Engagement & Salesforce Data Quality\nProduct & Engineering\n- E-commerce Product Roadmap\n- Engineering Resource\nLegal\n- Regulations & Compliance Related to User Analytics\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 480}
{"doc_id": "6c786b05edb8f03a", "url": "https://handbook.gitlab.com/handbook/hiring", "title": "Hiring & Talent Acquisition Handbook | The GitLab Handbook", "text": "The Handbook\nHiring & Talent Acquisition Handbook\nLanding page for many of the handbook pages the talent acquisition team at GitLab uses.\nAt the core of our team‚Äôs vision, mission, and strategy is our ability to impact GitLab‚Äôs overarching\nmission\n: to make it so that\neveryone can contribute to and co-create the software that powers our world\n. When\neveryone can contribute\n, users become contributors and we greatly increase the rate of innovation.\nAs a Talent Acquisition team, we have an outsized impact on GitLab‚Äôs ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce.\nTalent Acquisition Vision Statement\nTo create globally inclusive access to opportunities so that\neveryone can contribute to and co-create the software that powers our world\n.\nTalent Acquisition Mission Statement\nIt is the Talent Acquisition Team‚Äôs mission to predictably build distributed, representative teams that enable team members to\nco-create\nthe future of software.\nOur Guiding Principles\nAs we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future.\nExperience\n: Stakeholder experience is central to our craft. We are a partner, an advisor, and an essential component to building high performing teams and culture at GitLab.\nInclusivity\n: We design fair and equitable processes into the fabric of what we do. We believe Talent Acquisition has an outsized impact on the make-up of our teams, and we strive to continue to build them with inclusivity as a integral piece of our craft.\nPredictability\n: Our ability to have the right team members, in the right roles, at the right time is imperative to execute on our commitments and plans as an organization. We strive for predictability: to build accuracy in our forecasts and enable the business to look around corners through strong relationships and data driven decision making.\nOur Objectives and Roadmap\nWe strive to be as transparent as possible, but these sections are only available for our GitLab team members.\nTalent Acquisition Strategy\nTalent Acquisition Pages and Processes\nTeam Process Pages\nTalent Acquisition Productivity\nTalent Acquisition Alignment\nTriad Process\nQuarterly Updates\nNote: Internal only\nShared Definitions\nJob:\nA job refers to the job title (ex: Customer Support Specialist). This will also be what appears on external job boards. In the case there are multiple positions open that are the same, and we only want to list once, we can have multiple ‚Äòopenings‚Äô (see next section) opened within one ‚ÄòJob‚Äô. Each job will have a unique identifier called a Requisition ID (example- 1001).\nOpening:\nA job can have multiple openings attached to it (ex: you are hiring 3 Customer Support Specialists. You would then have 1 ‚ÄòJob‚Äô and 3 ‚Äòopenings‚Äô against that job). A job can have multiple openings against it, but an opening can not be associated with multiple jobs. Each opening will have a unique identifier called an Opening ID (example- 1001-1, 1001-2, 1001-3).\nGHPiD:\nGHP ID is the link between Adaptive (what we use to track our operating plan) and Greenhouse (our ATS). A GHP ID has a one to one relationship with an Opening ID. It is the key interlock between our hiring plans and our Talent Acquisition activity. This is a custom field in Greenhouse.\nTeam Playbooks\nRecruiter Playbook\nHiring Manager Playbook (coming soon)\nInterviewer Playbook (coming soon)\nCandidate Handbook Pages\nPlease find pages for potential and active applicants below.\nCandidate Handbook Page\nTalent Acquisition Privacy Policy\nInterviewer Processes\nInterviewer Prep Requirements\nConducting a GitLab Interview\nGreenhouse for Interviewers\nHiring Manager Processes\nConducting a GitLab Interview\nGreenhouse for Hiring Managers\nCandidate Experience Specialist Processes\nCandidate Experience Specialist Responsibilities\nModernLoop\nHow to Complete a Contract - CES Process\nRecruiters and Sourcers\nOpening a job\nGet your headcount assignments\nHow to open headcount on R&D\nHow to open headcount on Sales and G&A\nOpen a req in Greenhouse\nInstructions here\nOpen a kickoff session\nEvergreen requisitions\nCreating an evergreen req\nEvergreen req guide\nAn Evergreen Job is a requisition that is ‚Äòalways open‚Äô. More specifically, it is used when we have at least 3 openings for a particular job repeated each quarter. There is then one Evergreen job posted for internal, external and passive candidates. It is important that no candidate is hired to an Evergreen job, and instead is moved to an approved opening (aka an opening with a single corresponding GHPiD). TA Leadership will open EVG roles at the start of a fiscal year, with a quarterly review cadence, by leveraging the hiring plan and attrition assumptions. See the pages above for more information.\nTips and Tricks\nKnow your department before you open your req. If you need to change the department name later, the approval chain will not automatically update. If this happens to you, please contact Enablement.\nWe do not re-open jobs after they have been closed. This is because permissions and approvers may have changed in the time since the job was first closed.\nPost a job in Greenhouse\nPost an\ninternal\njob\nPost an\nexternal\njob\nUsing Rules\nAuto-tags\nTips and Tricks\nSalary transparency: In select US states, GitLab discloses salaries in job descriptions in accordance with local laws. Total Rewards will add this information to the job‚Äôs approvals page. When you create your\nexternal\njob post, utilize Pay Transparency Rules and select Hiring in the USA. If the job will not be posted in the US, select N/A.\nEEOC questions should be checked off in the US only\nClick here\nfor more information on selecting the correct location for your job. This will help ensure that your LinkedIn listings are posted in the correct countries.\nOur jobs are now set up to automatically go to Indeed and Glassdoor and be posted as remote roles on both sites. Recruiters should unselect or leave unselected the option in Greenhouse to ‚Äúpublish to free job boards‚Äù as this requires us to input city, state, and country data that overrides the remote job listing. There is an automation in place to automatically send jobs to Indeed and Glassdoor.\nReq access and permissions\nAs a member of the Talent Acquisition team, you have the ability to add team members to view your job with differing layers of access. By default, all team members can access the interview kit & scorecard of someone they‚Äôre interviewing and this access does not need to be granted. For team members who require additional access, such as a Hiring Manager or their EBA, you will need to grant that access where appropriate. You can use\nthis guide\nto help determine the appropriate access.\nAs you are deciding what access level someone should have, default to the setting that allows the most confidentiality for a candidate. If a team member does not need access to scorecards, for example, we should be choosing an access level that does not allow them to see them. A job admin (someone with higher level permissions) typically should not be at the same level or a direct report of a job they have access to. Recruiters typically grant only Hiring Manager access - interviewers do not need special access and cannot access scorecards or candidate profiles through Greenhouse.\nTo add or remove access in a job, go to ‚Äòjob setup‚Äô and click ‚Äòhiring team‚Äô. Add or remove access under ‚ÄúWho can see this job?‚Äù. Unfortunately, there is no way to bulk add or remove access. You can also add and remove access when creating your job from a template. If you are searching for a team member and cannot find their name, ensure that you do not have filters activated.\nDo not grant admin access through templates,\nbecause this could create problems in the future.\nSet up scorecards and interview plans\nThere are two elements of a scorecard: the Scorecard section and the Interview Plan section. Both are accessible through Job Setup.\nScorecard\nDepending on your department, you may have a lot of your scorecard options pre-filled. R&D scorecards are always set up for you, and may only require small tweaks depending on technical language or job grade.\nInterview Plan\nTips and Tricks\nName your interviews in a way that will help your Candidate Experience Specialist partner schedule your interview. We recommend ‚ÄòTopic -  Interviewer - Time‚Äô i.e. ‚ÄòValues Interview - Beyonce Knowles - 45 min‚Äô. If you are pulling from a large interviewer pool, you can discuss with your Candidate Experience Specialist partner if it makes sense to create a Prelude interviewer pool that will help with scheduling.\nOnce you have set up the stages and interview names, add the specific interview questions asked into the ‚ÄúInterview Questions‚Äù section of the Interview Plan.\nIf you need to make bulk changes to a large number of jobs‚Äô scorecards at once, Enablement has the ability to make bulk changes. Please contact them for assistance.\nRecruiters don‚Äôt need to be the only ones adding interview questions to the interview plan. Invite your Hiring Manager to complete this task alongside you.\nInterview Stages\nStages Overview\nPlease note that the names of stages is important, and we should only have stages with the names listed below. Anything outside of these stages will not appear on reporting.\nScorecards are required in all stages that require interviews. Confidential, personal information and disclosures about being part of a protected class are never to be written in scorecards. Recruiters can add salary information into Private Notes outside of the scorecard to maintain confidentiality.\nGet to Know Us:\nThis is an application review stage.\nQualified:\nThis is the stage where positive applications will be triaged. Candidates can wait here to be scheduled for interviews, to ensure the right mix of well-qualified candidates are screened at the right times.\nScreening:\nPhone or video interview with a recruiter, scheduled through Calendly.\nAssessment:\nThis is an optional stage where written assignments can be submitted. Learn more\nhere\n.\nInitial Interview:\nThis is the first video interview with a member of the team, which helps determine if they will move forward to additional interviews. This stage ensures we are utilizing the interviewers‚Äô and candidates‚Äô time thoughtfully, and is typically either a Hiring Manager or Technical interview.\nTeam Interview:\nAll other team interviews live here.\nDebrief:\nThis will come after the reference check stage for Engineering requisitions, because the reference checks will be initiated as the Justification (R&D‚Äôs process for the Debrief stage) is initiated. For non-Engineering departments, this will be a holding stage where candidates wait until a decision is made, to track the time it takes for us to reach a decision on a candidate who has completed their interviews. See the\nEngineering‚Äôs Justification process\n.\nReference Check:\nThe reference check stage can sometimes be done in tandem with the Debrief and Background Check and Offer stages. They can be completed by the Hiring Manager or Recruiter.\nBackground Check and Offer:\nRecruiters move candidates into this stage once they‚Äôre ready to receive their verbal offer. Before that time, this stage is where an offer is prepared and goes through approvals. This is the final stage in the process.\nScheduling tools in Greenhouse\nCandidate Experience Specialists use\nModernloop\nto schedule.\nGreenhouse for internal candidates\nThere are a few elements of Greenhouse that are different for internal candidates. Please note that internal candidates refer to current, full time team members. Interns converting to full time, contractors, or rehires are not considered internal candidates.\nInterviews will always be scheduled as ‚Äúprivate‚Äù events to ensure the candidate‚Äôs privacy. Interviews will show up as ‚Äúbusy‚Äù events on candidate and interviewers calendars rather than showing as interviews.\nIf internal applicants apply via our internal job board, the yellow ‚Äúinternal applicant‚Äù tag will automatically show in the GH profile. If you don‚Äôt see this tag, you can add it by navigating to the ‚ÄúDetails‚Äù tab in GH and scroll down to ‚ÄúSource & Responsibility‚Äù. Click the pencil next to Source and select Internal Applicant from the drop down.\nCES will use the internal applicant‚Äôs Google Calendar to find an appropriate time for them to meet, and do not need to be sent an availability email.\nFormer GitLab team members who re-apply are not considered internal candidates. Their source should be whatever they used to apply (ie application), and you should add a ‚ÄúFormer Team Member‚Äù tag to their profile.\nCandidate Hygiene\nMerging candidates\nRecruiters should\nmerge applicant profiles\nwhenever you see the opportunity and can verify that the candidates are the same. Merging applicant profiles allows you to keep data up to date, and also ensures that you know the full application history of anyone who applies. Aside from Internal candidates who should be merged right before hiring, you can merge candidates at any stage of the process.\nAll of Talent Acquisition has access to merge profiles. You can merge candidate profiles by viewing the right hand toolbar on an applicant profile, and clicking on either the alert that appears at the top of the toolbar or ‚ÄòSee More‚Äô in the ‚ÄòTools‚Äô section.Before beginning, please ensure that the profiles are a match for each other by verifying that their emails, phone numbers, and/or resumes are the same.\nWhen selecting which profile is Primary (right side), consider the following:\nAs a default, the most recent applicant profile should most likely be the Primary one, unless the most recent is a Prospect.\nIf this is an internal candidate, the most recent profile should always be Primary, but should not be merged until the candidate has accepted their offer to minimize the number of people with access to this information.\nAfter merging, check the Activity Feed and Details tabs to see what information was removed from old profiles and ensure that you have the most accurate Recruiter, Coordinator, and Source.\nIf you have any questions, please contact the Enablement Manager because profile merges cannot be undone.\nAdding or transferring candidates between jobs\nIf a candidate is in one job and needs to move to another, it‚Äôs important to correctly determine whether they should be added or transferred. Both are accessible by clicking the ‚ÄòAdd, Transfer, or Remove Candidate‚Äôs Jobs‚Äô button on the bottom right corner of your candidate profile.\nBefore making any moves, always ensure the candidate does not have any interviews scheduled. Transferring will automatically remove scheduled interviews and make them invisible on the candidates‚Äô Guide, but will not cancel the interview from the interviewers‚Äô calendar or inform the candidate of what is happening. Always wait until the interview has been completed, or fully cancel the interview and reschedule under the new req.\nWhen you add a candidate to a new job, the candidate starts the new job with a clean slate. There will be no scorecards or forms from any other position. This should be chosen when you are starting a brand new hiring process and will not be considering scorecards from any other job, and want their application date to be the date that you add them.\nWhen you transfer a candidate from one job to another, most of their data before the reference check stage moves with them. Scorecards will be visible in the ‚ÄúScorecards‚Äù tab and their original application date will remain. Scorecards that have not been submitted cannot be submitted after transfer, so make sure you collect those before you make your move. Offers and forms are also not transferable, so it‚Äôs important to transfer before a candidate hits the Reference Check stage. When you are moving someone from an Evergreen req into the role they will be hired into, you should always transfer. There will be no record of the previous job in any reporting.\nSometimes, deciding whether to add or transfer can be tricky. If a candidate interviewed for a role that was filled by someone else, and you get a new headcount a few months later, should you transfer them into the new job or add them and start over? One thing to consider is the implication your choice will have on the data. In this case, a candidate who transfers will appear to have been in the hiring process for months, when you‚Äôve actually only been talking to them about this opening for a few days. At the same time, you want to save their scorecards because they‚Äôll be relevant for the new job. In another situation, you could have an applicant who was being considered for the role, was rejected by the Hiring Manager, but contacted a few months later when the scope of the role changed and they were now considered a good fit. The key to knowing when to transfer is understanding what impact it would have on our data, and what solution would paint the most\naccurate\npicture. If you‚Äôre not sure whether to add or transfer, you should check in with Enablement to get another opinion.\nRejecting candidates\nWhen rejecting candidates, it‚Äôs important to carefully review all rejection reasons and pick the one that most accurately describes why a candidate is being rejected. This is because data is analyzed on a quarterly basis by the Talent Acquisition Leadership team, People Leadership Team, and E-Group.\nOnce you‚Äôve clicked the most detailed reason, include detailed context on the reason in the ‚ÄúRejection Notes‚Äù box. Please be as specific as possible. For example, instead of writing ‚Äúthe candidate rejected because of compensation‚Äù, write ‚Äúthe candidate rejected because the salary and equity that we offered was much lower than a competing offer.‚Äù\nPlease note that you cannot submit scorecards after rejecting a candidate.\nWe will not cancel an interview within less than 24 hours‚Äô notice if the candidate is being rejected. The recruiter will notify the candidate that they are no longer in consideration for the role and present them with the option to continue with the scheduled interview slot. The interviewer must be informed, and will not discuss the feedback that led to the decline. The conversation will pivot to general opportunities at GitLab and answering any questions about the company and team that the candidate may have.\nIf the candidate‚Äôs interview is outside 24 hours, the interview should be deleted in Greenhouse before the candidate is rejected and notified. The candidate should always be notified if they‚Äôve been rejected, and the recruiter  is responsible for declining the candidate. Any interviews scheduled will also not be automatically canceled, so you‚Äôll need to ensure this happens first.\nIf the candidate does not join the interview room within 10 minutes or fails to complete their MR within the specified time before the interview, the interview will be cancelled and the recruiter will get in touch with the candidate and not schedule further interviews.\nIf the candidate notifies us that they are unable to attend the interview before the scheduled time, CES can automatically reschedule using the candidates‚Äô current availability or by requesting fresh availability.\nIf we have rescheduled at the request of the candidate and the candidate requests to move the interview again without reasonable explanation, the recruiter will automatically reject the candidate.\nWe understand that there may be extenuating circumstances leading to the above situations where a candidate is unavailable or unprepared. It is at the recruiter‚Äôs discretion to reengage or choose to reschedule.\nOffers and Closing Reqs\nReference Checks\nReference check information\nReference check forms are mandatory. If you receive reference check information outside of the form and don‚Äôt want a candidate to fill it out again, Enablement can help you adjust the form to collect the remaining information. These forms are important because they provide necessary information for the accuracy and completion of a contract.\nTips and Tricks\nThese forms, just like an offer in Greenhouse,\ndo not transfer\nwhen you move a candidate from one job to another. Ensure that your candidate is in the role they‚Äôll be hired for before sending.\nCompleted forms live in a candidate‚Äôs ‚Äúapplication‚Äù tab. If you can‚Äôt find the form, it‚Äôs likely there!\nWhile nicknames, preferred last names, and PIAA details will save to the details page automatically, legal name will not. Please ensure the legal first and last name is set as the candidates‚Äô name before sending contracts.\nIf you have a candidate in the Netherlands, they are required to provide their BSN and date of birth. Recruiters should add those fields into the offer.\nOffers\nCreating an offer in Greenhouse\nCommon approval challenges\nOffer stuck in approvals: If the offer is stuck in the approvals chain because someone is out of office, the recruiter can talk to the approver‚Äôs manager about an appropriate temporary adjustment and recommend this to the Enablement team. Recruiters should be proactive in reaching out to approvers if an offer is urgent or a candidate is being inconvenienced by a long wait time. If there is a known OOO, this discussion should happen before there‚Äôs an offer waiting for approval. Enablement can help with any changes needed.\nOffer approvals chain is incorrect: If approvers are missing or incorrect, the Recruiter should contact a member of the Enablement team to adjust. The only people with access to make approvers changes are Enablement and Director, Executive Recruiting, who change approval chains to maintain confidentiality for executive positions. Often, approval chains are incorrect because you have chosen the wrong department, so it‚Äôs important to choose the right one before opening your req.\nVerbal offer information\nDeclined offer steps\nBackground screens\nContact the Senior Background Check Specialist at\nbackgroundchecks@gitlab.com\nwith any questions or requests for status updates.\nThe most commonly asked question for candidates outside the US is, ‚ÄúWhy can‚Äôt I enter more than one past employer?‚Äù Outside of ‚Äãthe US, candidates will only submit one former employer and Sterling is working as expected.\nSourcing at GitLab\nSourcing overview\nIdentifying prospects\nNotifications\nThere are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations.\nSlack\nTo set up Slack to notify you when you‚Äôre tagged in candidate notes, select your initials in the upper right hand corner of Greenhouse. From there, you can activate your Slack integration. Toggle the button to send @mentions to Slack. This is also a great button to point out to Hiring Managers so they are easier for the team to reach.\nAdditionally, you will see a section for ‚ÄúNotification Preferences‚Äù. Most recruiters will set these up, but they are optional if you prefer to only receive notifications by email.\nEmail notifications\nThere are two ways to set up your email notifications. The first is to select your initials in the top right corner of Greenhouse, and under ‚Äúnotification preferences‚Äù, select where you would like to receive notifications about jobs. This is an easy way for Hiring Managers to set up their preferences for all jobs at once, but may not be as easy for the Talent Acquisition team to remember to update.\nInstead, we would recommend setting your reminders either during your job setup process or after, by clicking into your Notifications tab of an individual job‚Äôs Job Setup. Here, we recommend that you stay in the loop on your candidates by electing to receive emails every time a scorecard is submitted, an internal candidate applies, a referral is submitted, and an offer is fully approved. You can choose your name or ‚ÄúCandidate‚Äôs Recruiter‚Äù, but you‚Äôll want to be sure that you‚Äôre listed as the recruiter on the role to make this work. Recruiters should double check during this time that no one is receiving notifications that should not (ie an interviewer receiving offer notifications) and adjust privacy settings accordingly.\nYou can sync your emails between Greenhouse and Gmail. Greenhouse has a Gmail add-on that can help with syncing communications. You can learn more about it by\ngoing here\n.\nTalent Acquisition Programs\nReferrals\nReferral Operations\nReferral Process\nDetails on who is eligible for referrals\nAcquisitions\nInternal Mobility\nInternal Hiring Process\nPosting a job internally\nIn the offer process\nEmerging Talent\nAssociate Engineer Development\nGlobal Hiring Resources\nGlobal hiring links\nThe\n‚Äúcountry hiring status‚Äù\nsection within the compensation calculator is the best place to look for a list of current countries available for hiring.\nThis country list\n, maintained by and accessible to recruiters, details specific information about each country that can help you answer candidate questions and prepare for potential hiring delays.\nFor general questions about specific policies or whether we support certain types of visas or sponsorship, message #people-group-confidential. If the request is more involved, or requires a conversation, you can slack Harley Devlin.\nPEO information and timelines\nFor candidates who are located in Countries where we do not have an entity, we use a PEO (Professional Employment Organization).  The actual employment contracts will be sent and issued by the PEO who also handles the processing and payment of payroll and associated taxes and compliance in each of the countries on behalf of GitLab. The contracts themselves are between the individual and the PEO.\nGitLab is currently hiring into three PEOs\nRemote.com\nGlobal Upside\nPapaya\nGlobal Expansion\nThe following timelines to onboarding are advised:\nRemote.com:\nremote.com onboarding timeline\nCountry\nWorking days\nDenmark\n3\nHungary\n4\nItaly\n3\nSweden\n3\nLuxembourg\n4\nSwitzerland\n8\nGlobal Expansion:\nProcessing contracts for candidates hired via Global Expansion could take up to 10 bueisness days.\nCountry\nWorking days\nAustria\n10 business days\nChile\n10 business days\nCosta Rica\n10 business days\nKenya\n10 business days\nLatvia\n10 business days\nMexico\n10 business days\nPhilippines\n10 business days\nSouth Africa\n10 business days\nGlobal Upside:\nCountry\nWorking days\nIndia\n10-14 business days\nPapaya\nProcessing for Italy (Dirigenti) could take up to a month, so we recommend start dates at least 6 weeks after the offer is generated.\nOther Hiring Pages\nGreenhouse\nTalent Acquisition Process Framework\nAdditional Resources\nOverview of Job Families\nBackground checks\nBenefits\nCompensation\nContracts\nGitLab talent ambassador\nOnboarding\nStock options\nVisas\nCandidate Handbook Page\nThis page outlines what hiring looks like at GitLab. We share the latest information about our processes and practices to ensure you have the information you need to feel confident during the interview process.\nConducting a GitLab Interview\nHelpful information about how to prepare and conduct interviews for GitLab\nContractor Conversions\nHow to convert a contractor to a full time team member\nEmerging Talent @ GitLab\nOverview of Emerging Talent @ GitLab\nGitLab talent ambassador\nKeeping with our mission that everyone can contribute, we want all GitLab team members to feel encouraged and equipped to take part in helping us find great talent and act as ambassadors for the company and our talent brand.\nGreenhouse\nGreenhouse is GitLab's ATS (Applicant Tracking System). All Hiring Managers and Interviewers will use Greenhouse to review resumes, provide feedback, communicate with candidates, and more.\nInterviewer Prep Requirements\nLearn more about the tools required to prepare you for interviewing at GitLab\nJob Families\nJob families are organized by function at GitLab and we use them to inform candidates of roles and current team members to evaluate their performance.\nMERGE: Ongoing Development for Associate Engineers\nCongratulations and welcome to the GitLab team! We‚Äôre excited to have you on board as you ‚Ä¶\nReferral Operations\nThis page is for information regarding the backend process of the Referral Process.\nReferral Program and Process\nWhile GitLab‚Äôs Referral program is fairly straight-forward, there are some nuances to be mindful of. Please take a moment to review the program rules outlined below before submitting a referral through Greenhouse to ensure eligibility.\nSourcing\nSourcing has proved itself to be a great channel for attracting the best talent, this page details how we source talent at GitLab.\nTalent Acquisition Alignment\nThis page is an overview of the search team alignment and the talent acquisition platform directly responsible individual in talent acquisition operations and talent brand.\nTalent Acquisition Process Framework\nThis page is an overview of the processes each party of the search team is responsible for. It links each party or process.\nTalent Acquisition Productivity\nTalent Acquisition team and individual productivity metrics.\nLast modified May 26, 2025:\nAdd playbook links to hiring page (\n81cd8e8e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4673}
{"doc_id": "f609fab7f12a634b", "url": "https://handbook.gitlab.com/handbook/company/culture/all-remote/live-doc-meetings", "title": "GitLab Meeting Best Practices: Live Doc Meetings | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nAll Remote\nGitLab Meeting Best Practices: Live Doc Meetings\nOverview of GitLab‚Äôs meeting best practices, which create efficient, transparent, documentation-based meetings\nGitLab meeting best practices\n‚Äú\nNo agenda, no attenda\n.‚Äù Every work-related meeting should have a\nlive doc agenda\naffixed to the calendar invite. To better understand how GitLab utilizes agenda docs, here‚Äôs a\ntemplated example\nyou can copy and use in your organization.\nCoffee chats\nare excluded from this given their function in informal communication.\nIf you determine that a meeting is needed to move a project forward, address a blocker, or resolve a miscommunication, follow the proven principles below.\nAgenda and sharing\nCreate the agenda in a Google Doc ahead of time using\nGitLab‚Äôs Agenda Template\n(this can be any shared document service, though GitLab uses\nGoogle Workspace\n). Please do not use\nGoogle Calendar‚Äôs automatic agenda/notes creation function\n, as it does not adhere to GitLab‚Äôs preferred agenda flow. If the automatic agenda doc has been created in error, edit the calendar invite and hover over the X to delete it from the agenda to avoid confusion.\nEnsure that the appropriate sharing settings are in place to prevent a chorus of ‚ÄúI can‚Äôt access the agenda‚Äù comments; agendas should be editable by all participants.\nLink the agenda in the meeting invite.\nEstablish the agenda as far in advance of the meeting as possible.\nAgendas should use\nnumbered lists\n, not bulleted lists.\nContext\nsection includes: The goal(s) of the meeting; clear pre-work or pre-watch/read instructions; intent and expected outcomes using\nlow-context communication\n.\nPre-work and meeting kick-off\nPre-read/watch or pre-work materials should be emailed to attendees at least 24 hours in advance.\nThe meeting host (\n) may summarize key points and context for the first 1 to 2 minutes of the meeting, but\nfew meetings should be presentations\n.\nQuestions should be\nwritten\nand listed in advance of the scheduled meeting time; this tends to increase the quality of questions.\nNote taking and structure during the meeting\nMake a proposal\nwhenever feasible. It should be possible to answer/comment with a simple ‚Äúyes.‚Äù\nLink any relevant piece of text to associated resources to prevent people from spending time searching or asking.\nFollow GitLab‚Äôs\nsmart note taking guidance\nby taking notes inline with the agenda rather than using a separate ‚Äúnotes‚Äù section. Real-time note-taking by multiple participants is encouraged.\nAnother good reference is the CEO Shadow\nhandbook page tips section\n, specifically\nIt's helpful if shadow one takes notes as the first speaker is talking, then shadow two starts when the next speaker continues the conversation. Shadow one can pick up note taking again when the next speaker contributes. By alternating this way, the shadows are better able to keep up with all the participants in the conversation.\nThis advice can be used in general meetings as well.\nIf you‚Äôre not talking in the meeting, at any given time, help take notes. If there isn‚Äôt a note taker listed in the document at the start of the meeting, people should self-note-take. Consider asking other people to write down the answers in real-time to allow the person who asked the question to focus on the answer. The person asking the question can touch up the answer when the conversation has moved on to something less relevant to them.\nNotes should be properly indented and structured to follow the conversation‚Äôs flow.\nNotes do not have to be verbatim, but they should capture key points made and be clear on any decisions or next steps.\nPreface questions and answers with the participant‚Äôs name, giving context to the origin.\nInclusion and transparency in meetings\nFollow the order of the questions instead of jumping around in the agenda; this prevents the proverbial loudest voice in the room from dominating a conversation.\nAlways ask if the name preceding the question would like to verbalize; if they wish not to, or are otherwise unavailable, the meeting host should verbalize on their behalf.\nReenact questions in the list by verbalizing them even if they were already asked and answered in the shared document. Hearing the question and answer allows everyone to think about it and respond to it. It might also happen that when verbalizing the question or answer more context is given since most people can talk faster and with less effort than they can type. Another advantage if you‚Äôre recording the meeting is that the recording contains everything.\nUnless the meeting contains\nNot Public\ninformation, record the meeting to share with those who cannot attend live and consider livestreaming for maximum transparency and feedback potential.\nIf a portion of a meeting does not pertain to you,\nit‚Äôs OK to look away\n. You are the\nmanager of your own time and attention\n.\nQ: What are the benefits of live doc meetings?\nEstablishing a culture where team members are cognizant that they work with others who may be in a different location, or unable to attend a meeting live, is critical. Documentation is a vital part of avoiding team\ndysfunction\n.\nImproving your meeting hygiene can start by shifting to live doc meetings. It is a relatively simple step, and tends to create an understanding of the value of documentation. If you‚Äôre looking for a place to start in capturing team-wide buy-in on documentation, consider adding agendas to all work-related meetings and insist on live documentation during them.\nIt prevents\nknowledge leaks\n. Meetings without agendas are only useful to those in it, and even then, it‚Äôs likely that outcomes will be forgotten, or critical pieces of the puzzle will become less familiar over time.\nIt creates a more inclusive meeting atmosphere. People can add questions and insights before (and even after) a synchronous meeting. Plus, those who are less comfortable verbalizing points in front of management can use the agenda doc to properly articulate their complete thoughts.\nIt creates a takeaway. The agenda doc lives longer after the meeting. If you want to share it further, perhaps sending to a person or team that you realize would have benefited from attending, you‚Äôre able to do so.\nIt shifts the memorization burden away from humans. If there‚Äôs an agenda doc affixed to each calendar invite, you can easily search your calendar for key words (marketing, CEO, engineering, etc.), find a given meeting, and immediately access a documented history of what was discussed.\nQ: When should I use a meeting over async?\nNot all meetings are inherently bad. We encourage managers to establish\nregular 1:1 meetings\nwith their team, for example. There are instances where a brief synchronous chat can replace multiple hours of asynchronous work. Strategically leveraging sync and async is an art, not a science.\nMany meetings can be avoided by understanding how to\nwork well asynchronously\n.\nFor a deeper dive on how GitLab implements meetings in a remote work environment, visit our\nall-remote meetings guide\n. To learn more about how GitLab communications, visit our\nCommunications page\n.\nQ: What is a live doc meeting?\nA live doc meeting is a GitLab specialty. It‚Äôs a work-related meeting (e.g. not a\ncoffee chat\n) where you document everything live (yes, everything)! Start documenting before the meetings begins by attaching a shared, editable agenda document to the calendar invite.\nQ: What is the agenda for a live doc meeting?\nHere is a\nsample template for a live doc meeting\n. Be sure to create a new Google Doc and attach a link to your live doc with every calendar invite. Please do not use\nGoogle Calendar‚Äôs automatic agenda/notes creation function\n, as it does not adhere to GitLab‚Äôs preferred agenda flow. Include the\nagenda\nfor the meeting, set the appropriate sharing permissions, and add instructions for expected engagement (in\nContext\nsection) so team members understand how to contribute whether they attend synchronously or asynchronously.\nQ: What is meant by ‚Äôlive document'?\nA live document is a document that may continually be edited and updated. Examples could include a shared Google doc, whiteboard being used by a team for collaboration, or\nGitLab‚Äôs handbook\n.\nQ: How can I participate in a live doc meeting?\nThere are two ways to participate in a live doc meeting: either synchronously, like when\njoining a live Zoom call\n, or\nasynchronously\n, by reviewing the documented discussion along with any recorded video after the meeting is over.\nQ: When are live doc meetings held?\nLive doc meetings are usually held in the host‚Äôs time zone. However, leaders should\nrotate meetings to accommodate a more diverse array of time zones\nas well as record them so that others can watch at a later time.\nQ: Where are live doc meetings held?\nLive doc meetings can happen fully in-person, fully online, or a on hybrid call ‚Äî which is a blend of both. It‚Äôs best to have everyone on a level playing field for communication and discussion, so\nhybrid calls should be avoided\n. If a hybrid call is necessary, have participants use their own equipment (camera, headset, screen) to avoid audio problems from delays and feedback.\nReturn to the main\nall-remote page\n.\nLast modified April 10, 2025:\nFix broken links (\n7fbeab40\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1539}
{"doc_id": "9584300e91bd25fb", "url": "https://handbook.gitlab.com/handbook/security", "title": "Security at GitLab | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Vision and Mission\nOur vision is to transparently lead the world to secure outcomes.\nOur mission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. This will be achieved through 5 security operating principles:\nAccelerate business success with a focus on:\nPrioritize ‚Äòboring‚Äô, iterative solutions that minimize risk\nFind ways to say Yes\nUnderstand goals before recommending solutions\nUse GitLab first\nEfficient operations with a focus on:\nTechnical controls over handbook rules\nLeverage automation first (robots over humans)\nResponsible decisions (Spending, Tooling, Staffing, etc) over low ROI (return on investment) decisions\nReusable or repeatable over singular solutions\nTransparency with a focus on:\nResponsible protection of MNPI (material non-public information)\nEvangelize\ndogfooding\nof GitLab publicly\nLead with metrics\nBalance security with usefulness\nRisk Reduction with a focus on:\nSecure by default\nPreventative controls over detective controls\nSolving root causes over treating symptoms\nVisibility through Coverage, Discoverability, Observability\nCollaborative Culture with a focus on:\nWorking together on common solutions\nSolve shared problems with shared solutions\nSimplifying language for everyone to understand\nAvoiding security jargon\nSeek opportunities to help others succeed\nTo help achieve the vision of transparently leading the world to secure outcomes, the Security Division has nominated a\nSecurity Culture Committee\n.\nDivision Structure\nThe Security Division provides essential security operational services, is directly engaged in the development and release processes, and offers consultative and advisory services to better enable the business to function while minimising risk.\nTo reflect this, we have structured the Security Division around four key tenets, which drive the structure and the activities of our group. These are :\nProduct Security\nSecurity Operations\nCorporate Security\nSecurity Assurance\nApplication Security\nInfrastructure Security\nSecurity Platforms and Architecture\nVulnerability Management\nData Security\nSecurity Logging\nSecurity Incident Response Team (SIRT)\nTrust and Safety\nRed Team\nThreat Intelligence\nSignals Engineering\nCorporate Security\nHelpdesk Support\nTech Stack Systems\nEngineering Teams\nField Security\nSecurity Compliance\nSecurity Governance\nSecurity Risk\nSecure the Product - The Product Security Department\nThe\nProduct Security Department\nis primarily focused on Securing the Product. This reflects the Security Division‚Äôs current efforts to be involved in the Application development and Release cycle for Security Releases, Infrastructure Security, and our HackerOne bug bounty program.\nThe term ‚ÄúProduct‚Äù is interpreted broadly and includes the GitLab application itself and all other integrations and code that is developed internally to support the GitLab application for the multi-tenant SaaS. Our responsibility is to ensure all aspects of GitLab that are exposed to customers or that host customer data are held to the highest security standards, and to be proactive and responsive to ensure world-class security in anything GitLab offers.\nProtect the Company - The Security Operations Department\nSecurity Operations Department\nteams are primarily focused on protecting GitLab the business and GitLab‚Äôs platform. This encompasses protecting company property as well as to prevent, detect and respond to risks and events targeting the business and our platform. This department includes the Security Incident Response Team (SIRT) and the Trust and Safety team.\nThese functions have the responsibility of shoring up and maintaining the security posture of GitLab‚Äôs platform to ensure enterprise-level security is in place to protect our new and existing customers.\nLead with Data - The Threat Management Department\nThreat Management Department\nteams are cross-functional. They are responsible for collaborating across the Security Division to identify, communicate, and remediate threats or vulnerabilities that may impact GitLab, our Team Members or our users and the community at large.\nAssure the Customer - The Security Assurance Department\nThe\nSecurity Assurance Department\nis comprised of the teams noted above. They target Customer Assurance projects among their responsibilities. This reflects the need for us to provide resources to our customers to assure them of the security and safety of GitLab as an application to use within their organisation and as a enterprise-level SaaS. This also involves providing appropriate support, services and resources to customers so that they trust GitLab as a Secure Company, as a Secure Product, and Secure SaaS\nProtect the Organization - Corporate Security\nGitLab is both a company and a product. The\nCorporate Security\ndepartment focuses on implementing and protecting the information technology (IT) related systems that the company uses to conduct business internally, and provides the hardware, software, and tools that our team members and 3rd party service providers (aka contractors) need to be productive and get their job done efficiently. The configurations that we implement for team members internally are designed to protect our customers and their data.\nWe have a 24x5\ntechnical support helpdesk\nfor team members and have engineers that configure and maintain many of our company-wide\ntech stack applications\n.\nWe invest heavily in\ndevice trust, identity management, and infrastructure governance\nto provide the highest level of security assurance for the administrators of our product and ensure all appropriate controls are in place when handling customer data.\nOther groups and individuals\nSecurity Program Management\nSecurity Program Management is responsible for complete overview and driving security initiatives across Product, Engineering, and Business Enablement. This includes the tracking, monitoring, and influencing priority of significant security objectives, goals, and plans/roadmaps from all security sub-departments.\nSecurity Program Manager Job Family\nSecurity Program areas of focus\nDrive Accountability & Visibility for Program Objectives & Goals\nDrive, Gather, & Examine Program Needs & Opportunities through Intra & Inter Organizational Collaboration\nProvide Insights & Suggestions Impacting Program Strategy & Roadmap\nAssist in Gathering & Prioritizing Program Risks, Requirements, & Alignment to Influence Remediation\nDrive & Define Acceptance Criteria, Value Proposition, Milestones to Visualize and Communicate Program Effectiveness\nDevelop Repeatable, Scalable, Efficient, Effective, Processes & Procedures\nProduct development\nIn keeping with our\ncore values\nand the belief that\neveryone can contribute\n, the Security Division is committed to\ndogfooding\nand contributing to the development of the GitLab product.\nContacting the Team\nReporting vulnerabilities and security issues\nFor information regarding GitLab‚Äôs\nHackerOne bug bounty program\n, and creating and scheduling security issues, please see our\nengaging with security\npage and our\nResponsible Disclosure Policy\n.\nReporting an Incident\nIf an urgent security incident has been identified or you suspect an incident may have occurred, please refer to\nEngaging the Security Engineer On-Call\n.  Examples include, but are not limited to:\nLost or stolen devices\nLeaked credentials\nEndpoint compromise or infection\nExposure of sensitive GitLab data\nGitLab provides a\npanic@gitlab.com\nemail address for team members to use in situations when Slack is inaccessible and immediate security response is required.\nThis email address is only accessible to GitLab team members and can be reached from their gitlab.com or personal email address as listed in Workday. Using this address provides an excellent way to limit the damage caused by a loss of one of these devices.\nAdditionally if a GitLab team member experiences a personal emergency the People Group also provides an\nemergency contact email\n.\nSub-groups and projects\nMany teams follow a convention of having a GitLab group\nteam-name-team\nwith a primary project used for issue tracking underneath\nteam-name\nor similar.\n@gitlab-com/gl-security\nis used for @‚Äòmentioning the entire Security Division\n@gitlab-com/gl-security/security-managers\nis used for @‚Äòmentioning all managers in the Security Division\nSecurity Division Meta\nis for Security Division initiatives,\n~meta\nand backend tasks, and catch all for anything not covered by other projects\nSecurity Assurance (@gitlab-com/gl-security/security-assurance)\n@gitlab-com/gl-security/security-assurance/sec-compliance\n@gitlab-com/gl-security/security-assurance/field-security-team\n@gitlab-com/gl-security/security-assurance/security-risk-team\n@gitlab-com/gl-security/security-assurance/governance\nProduct Security (@gitlab-com/gl-security/product-security)\nProduct Security Meta\nFor department wide management and planning issues.\n@gitlab-com/gl-security/product-security/appsec\nis the primary group for @‚Äòmentioning the Application Security team.\n@gitlab-com/gl-security/security-research\n@gitlab-com/gl-security/threatmanagement/vulnerability-management\nSecurity Operations (@gitlab-com/gl-security/security-operations)\nSecurity Operations Department\n@gitlab-com/gl-security/security-operations/sirt\nis the primary group for @‚Äòmentioning the Security Incident Response Team (SIRT).\nSIRT (private)\nfor SIRT issues.\n@gitlab-com/gl-security/security-operations/trust-and-safety\nis the primary group for @‚Äòmentioning the Trust & Safety team.\n@gitlab-com/gl-security/security-operations/redteam\nCorporate Security (@gitlab-com/gl-security/corp)\nFunctional Teams Org Chart\nIssue Tracker\n@gitlab-com/gitlab-com/gl-security/corp/managers\n- Management Team\n@gitlab-com/gitlab-com/gl-security/corp/helpdesk\n- End User Services Helpdesk Team (see\nSupport Handbook Page\n)\n@gitlab-com/gitlab-com/gl-security/corp/logistics\n- Laptop and Phone Logistics\n@gitlab-com/gitlab-com/gl-security/corp/code\n- Code Platforms Engineering\n@gitlab-com/gitlab-com/gl-security/corp/device\n- Device Trust Engineering\n@gitlab-com/gitlab-com/gl-security/corp/identity\n- Identity Engineering\n@gitlab-com/gitlab-com/gl-security/corp/infra\n- Infrastructure Governance Engineering\n@gitlab-com/gitlab-com/gl-security/corp/saas\n- SaaS and Tech Stack Engineering (shared responsibility handled by Device Trust and Identity Teams)\n@gitlab-com/gitlab-com/gl-security/corp/dept\n- Entire Department\nSlack Channels\n#security\n; Used for general security questions and posting of external links for the great discussions. Company wide security relevant announcements are announced in #whats-happening-at-gitlab and may be copied here.\n#security-division\n- Daily questions and discussions focused on work internal to the Security Division. Can be used for reporting when unsure of where to go.\n#abuse\n- Used for reporting suspected abusive activity/content (\nGitLab Internal\n) as well as general discussions regarding anti-abuse efforts. Use\n@trust-and-safety\nin the channel to alert the team to anything urgent.\n#security-team-standup\n- Channel for daily standups.\n#incidents\nand\nother infrastructure department channels\n#security-alert-manual\n- New reports for the Security Division from various intake sources, including ZenDesk and new HackerOne reports.\n#hackerone-feed\n- Feed of most activity from our HackerOne program.\nOther\n#security-alert-*\nand\n#abuse*\n- Multiple channels for different notifications\nhandled by the Security Division.\nUse the\n@sirt-members\nmention in any Slack channel to tag the members of the Security Incident Response Team (SIRT).\nUse the\n@sec-assurance-team\nmention in any Slack channel to tag the members of the Security Compliance, Risk, and Governance & Field Security teams.\nUse the\n@field-security\nmention in any Slack channel to tag the members of the Field Security team.\nUse the\n@appsec-team\nmention in any Slack channel to tag the members of the Application Security team.\nUse the\n@trust-and-safety\nmention in any Slack channel to tag the members of the Trust & Safety team.\nUse the\n@security-identity\nmention in any Slack channel (or\n#security-identity-ops\n) to tag members of the Identity team.\nDivision, Department, and Team updates\nWe believe it is important to share regular updates at various levels of the Security Division, and we use Slack as the primary mechanism for providing these updates. Our updates are open to all GitLab team members using the following process:\nStart of each month:\nA thread per-department is started in\n#security-division\nby each department leader (CorpSec, ProdSec, SecAssurance, SecOps). These threads are pinned for the duration of the month.\nThread template:\n<MONTH> <DEPARMENT> Weekly Updates\nExample:\nAugust Product Security Weekly Updates\nWeekly:\nAt least once a week, teams provide updates they wish to share within the appropriate thread. For example, updates from Vulnerability Management would be placed in the Product Security thread for the given month.\nThese weekly updates, while highly encouraged, are strictly optional and should represent content that ICs and managers feel should be highlighted. Teams are encouraged to define processes and DRIs around these updates that work for them.\nIndividuals providing the weekly updates are encouraged to use the ‚ÄúAlso send to #security-division‚Äù option within the thread to increase visibility.\nEnd of each month:\nDepartmental leaders prepare a monthly update, including no more than\nthree updates per team\n, and post it in\n#ciso\nwithin the first week of the following month.\nEach monthly update should include a brief preface written by the departmental leader covering any notable themes or other strategic updates.\nEach of the three updates per-team should be no more than 2-3 sentences and include at least one link to allow readers to gain additional context. Links should be to GitLab Issues or Epics wherever possible. If information is confidential and not able to be added to an Issue or Epic, a note should be added indicating this.\nIt is recommended that departmental leaders build their monthly update over the course of the month via a GitLab issue (\nsee an example\n) in collaboration with their managers and senior ICs.\nTwice-Monthly Security Leadership Meetings\nSecurity Leadership meets twice a month over Zoom to discuss division-wide topics. Individual contributors from across the security organization are invited to present their work, ideas, or projects to this leadership forum.\nIf you‚Äôre interested in presenting:\nDiscuss the topic with your manager first\nYour manager will help you:\nAdd your topic to the agenda with supporting materials\nRequest an appropriate time slot (5-25 minutes)\nCoordinate scheduling your presentation\nNote that these meetings are not on the general Security calendar. Your manager will ensure you receive the meeting invitation for your scheduled time.\nWe encourage all team members to take advantage of this opportunity to share your work and insights with security leadership.\nRansomware\nFor an overview of the communication and response process for a suspected ransomware attack, please see our\nResponding to Ransomware\npage.\nImportant topics\nTokens\nThe following best practices will help ensure tokens are handled appropriately at GitLab. For detailed requirements regarding the use of tokens at GitLab, please see our\ntoken management standard\n.\nWhen creating a\nPersonal Access Token\n, be sure to choose the appropriate\nscopes\nthat only have the permissions that are absolutely necessary.\nOftentimes a\nProject Access Token\nmight be sufficient instead of a Personal Access Token. Project Access Tokens have a much more limited scope and should be preferred over Personal Access Tokens whenever possible.\nAlways set an expiration for your tokens when creating them. Tokens should preferably expire in a matter of hours or a day.\nBe mindful to keep these personal access tokens secret. Be particularly careful not to accidentally commit them in configuration files, paste them into issue or merge request comments, or otherwise expose them.\nPlease consider periodically reviewing your currently active Personal Access Tokens and revoking any that are no longer needed.\nPersonal Access Tokens will be highly discouraged within the GitLab production environment, and disallowed/disabled wherever possible. Existing tokens shall remain, but additional issuance will not be permissible/possible.\nIf you believe a personal access token has been leaked, revoke it immediately (if possible) and\ncontact the security team\nusing the\n/security\nSlack command.\nReceive notification of security releases\nTo receive security release blog notifications delivered to your inbox, visit our\npage.\nTo receive release notifications via RSS, subscribe to our\nsecurity release RSS feed\nor our\nRSS feed for all releases\n.\nFor additional information regarding security releases, please visit the Delivery Team‚Äôs\nsecurity releases\npage.\nResources\nTools\nIncident-Tools (private)\nfor working scripts and other code during or while remediating an incident.\nIf the tool is applicable outside of the\nGitLab.com\nenvironment, consider\nif it‚Äôs possible to release when the\n~security\nissue becomes\nnon-confidential. This group can also be used for private demonstration projects for\nsecurity issues.\nsecurity-tools (mostly private)\ncontains some\noperational tools used by the security teams. Contents and/or configurations\nrequire that most of these projects remain private.\nCalendar\nWe welcome GitLab team members to join meetings that are on our shared\nSecurity Calendar\n.\nOther Frequently Used GitLab.com Projects\nSecurity crosses many teams in the company, so you will find\n~security\nlabeled\nissues across all GitLab projects, especially:\ngitlab-foss\ngitlab\ninfrastructure\nproduction\nWhen opening issues, please follow the\nCreating New Security Issues\nprocess for using labels and the confidential flag.\nOther Resources for GitLab Team Members\nSecurity Best Practices, using 1Password and similar tools, are documented\non their own security best practices page.\nSecure Coding Training\n.\nGitLab.com\ndata breach notification policy\n.\nGitLab Internal Acceptable Use\nPolicy\n.\nFor GitLab.com, we have developed a\nGoogle Cloud Platform (GCP) Security Guidelines Policy\ndocument, which outlines recommended best practices, and is enforced through\nour security automation initiatives.\nGitLab Security Tanuki for use on security release blogs, social media and security related swag as appropriate:\nWeb-RGB\nPrint-CMYK\nand one\nexclusively for stickers\n.\nSecurity READMEs\nWorking in Security\nContributing to GitLab the product as a Security team member\nThreat Modeling\nLast modified May 16, 2025:\nMove existing security standards to new section, which includes an index (\n840eb803\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2607}
{"doc_id": "47c7fea8d56b1520", "url": "https://handbook.gitlab.com/handbook/engineering/testing/pipeline-triage", "title": "Pipeline Triage | The GitLab Handbook", "text": "The Handbook\nEngineering\nTesting\nPipeline Triage\nOverview of GitLab‚Äôs E2E Pipeline Triage processes\nOverview\nThese guidelines gives GitLab team members on pipeline triage an idea on the priorities and processes that come with this responsibility. This builds from the information provided in\nOn-Call Rotation\n.\nThis guide is an extension of the\nBroken\nmaster\nengineering workflow and is intended to provide a more specific guide on how to triage end-to-end test pipeline failures. As a\nfirst step to identifying and resolving a broken master incident, please follow the steps in the broken master process.\nThe Pipeline triage\nis responsible for analyzing and debugging test pipeline failures. Please refer to the\nDRI weekly rotation schedule\nto know who the current DRIs are.\nFor information regarding debugging test pipeline failures, check out\nDebugging Failing E2E Tests and Test Pipelines\nGeneral guidelines\nFix tests failing in\nmaster\nbefore other development work\n:\nFailing tests on\nmaster\nare treated as the highest priority\nrelative to other development work, e.g., new features. Note that for pipeline triage DRIs,\ntriage and reporting\ntakes priority over fixing tests.\nFollow the\npipeline triage guidelines\nfor investigating, reporting, and resolving test failures\nFlaky tests are quarantined until proven stable\n: A flaky test is as bad as no tests or in some cases worse due to the effort required to fix or even re-write the test. As soon as it is detected, it is quarantined immediately to stabilize CI, fixed as soon as possible, and monitored until it is fixed.\nClose test failure issue (e.g example\nissue\n) when the test is moved out of quarantine\n: Quarantine issues should not be closed unless tests are moved out of quarantine.\nQuarantine issues should be assigned and scheduled\n: To ensure that someone is owning the issue, it should be assigned with a milestone set and have appropriate\n~\"quarantine\"\n, quarantine with type (e.g.\n~\"quarantine::bug\"\n) and failure with type (e.g.\n~\"failure::bug\"\n) labels.\nMake relevant stage group aware\n: When a test fails no matter the reason, an issue with related product group label (e.g.\n~\"group::ide\"\n) should be created and made known to the relevant product stage group as soon as possible.\nIn addition to notifying that a test in their domain fails, enlist help from the group as necessary.\nFailure due to bug\n: If one or multiple test failure(s) is a result of a bug, create a bug issue and provide as much details as possible (e.g. using issue‚Äôs Bug template, provide steps to reproduce, relevant screenshots, etc.). Link the\nall\nrelated test failure issues to the bug issue. Apply\n~\"type::bug\"\n, severity, priority, product group, feature category, etc. labels to ensure a fix is scheduled in a timely manner.\nTest failure issues are used for tracking and investigating purposes, they should not have\n~\"type::bug\"\nlabel. If the test failure is a result of a bug, apply\n~\"failure::bug\"\nlabel instead.\nEveryone can fix a test, the responsibility falls on the last who worked on it\n: Anyone can fix a failing/flaky test, but to ensure that a quarantined test isn‚Äôt ignored,\nthe last engineer who worked on the test is responsible for taking it out of\nquarantine\n.\nTriage flow\nThe flow of triaging the pipelines as a decision tree (nodes link to the relevant sections of the handbook)\nflowchart TB\n%% nodes\nslack_channels{check slack channel}\nnext_channel(move to next slack channel)\nfailed_pipeline(identify failure)\nexisting_issue{issue already reported?}\nnew_issue(create issue if does not already exist)\ntag_pipeline(notate issue in comment on pipeline run)\nincident{incident worthy?}\nnotify_incident(Notify about escallation)\nopen_incident(Open incident)\nupdate_incident(Update teams about incident)\neyes(tag pipeline run with :eyes: emoji)\nfire_engine(replace :eyes: with :fire_engine: emoji)\nboom(replace :eyes: with :boom: emoji)\nanother_failure{more failures?}\ninvestigate(investigate root cause for found failures)\nfix_tests(fix tests if possible)\nquarantine_tests(quarantine tests if necessary)\nmonitor_incident(participate in incident process)\ntag_issue_for_report(add your emoji to issue for the DRI gem)\npublish_results(publish your results to the triage issue with the DRI gem)\ndri_handoff(handoff to next DRI anything that is still in flight)\n%% external links\nclick failed_pipeline \"#review-the-failure-logs\"\nclick new_issue \"#create-an-issue\"\nclick existing_issue \"#known-failures\"\nclick investigate \"#investigate-the-root-cause\"\nclick incident \"https://handbook.gitlab.com/handbook/engineering/infrastructure/incident-management/#report-an-incident-via-slack\"\nclick notify_groups \"#notify-group-in-all-cases\"\nclick fix_tests \"#fixing-the-test\"\nclick quarantine_tests \"#quarantining-tests\"\nclick open_incident \"https://handbook.gitlab.com/handbook/engineering/infrastructure/incident-management/#failure-needs-escalation\"\nclick tag_pipeline \"#linking-issue\"\nclick eyes \"#emoji-used\"\nclick fire_engine \"#emoji-used\"\nclick boom \"#emoji-used\"\nclick tag_issue_for_report \"https://gitlab.com/gitlab-org/ruby/gems/dri#configuration\"\nclick publish_results \"https://gitlab.com/gitlab-org/ruby/gems/dri#4-publish\"\nclick notify_incident \"#failure-needs-escalation\"\nclick update_incident \"#notify-group-in-all-cases\"\n%% diagram\nopen_incident --> next_channel\nnext_channel --> investigate\nnext_channel --> publish_results\nsubgraph report the failure\neyes --> failed_pipeline\nfailed_pipeline --> existing_issue\nnew_issue --> boom\nboom --> notify_groups\nnotify_groups --> incident\ntag_issue_for_report --> tag_pipeline\nfire_engine --> tag_issue_for_report\ntag_pipeline --> another_failure\nend\nsubgraph escallate issue\nnotify_incident --> open_incident\nopen_incident --> update_incident\nupdate_incident --> monitor_incident\nend\nsubgraph follow up on test failures\ninvestigate --> fix_tests\ninvestigate --> quarantine_tests\nend\nsubgraph end of your day\npublish_results --> dri_handoff\nend\nHow to triage a QA test pipeline failure\nThe general triage steps are:\nReport the failure\nReview the failure logs\nInvestigate the root cause\nClassify and triage the test failure\nNotify relevant groups about the failure\nAfter triaging failed tests, possible follow up actions are:\nFixing tests\nQuarantining tests\nDequarantining tests\nRe-evaluating tests\nReport the failure\nYour priority is to make sure we have an issue for each failure, and to communicate the status of its investigation and resolution. When there are multiple failures to report, consider their impact when deciding which to report first. See the\npipeline triage responsibilities\nfor further guidance.\nIf there are multiple failures we recommend that you identify whether each one is new or old (and therefore already has an issue open for it). For each new failure, open an issue that includes only the required information. Once you have opened an issue for each new failure you can investigate each more thoroughly and act on them appropriately, as described in later sections.\nThe reason for reporting all new failures first is to allow faster discovery by engineers who might find the test failing in their own merge request test pipeline. If there is no open issue about that failure, the engineer will have to spend time trying to figure out if their changes caused it.\nKnown failures should be linked to the current\npipeline triage report\n. However, issues can be opened by anyone and are not linked automatically, so be sure to confirm there is no existing issue before creating one.\nSearch for existing issues that have already been created with the\nfailure::*\nlabel. By order of likelihood:\nfailure::investigating\nfailure::test-environment\nfailure::broken-test\nfailure::flaky-test\nfailure::stale-test\nfailure::bug\nfailure::external-dependency\nIf the issue has already been reported please use the existing issue to track the latest status.\nIf there is no existing issue for the failure, please\ncreate an issue\nusing one of\nclassification labels\nvia the steps below.\nIn the relevant Slack channel:\nApply the üëÄ emoji to indicate that you‚Äôre investigating the failure(s).\nIf there‚Äôs a system failure (e.g., Docker or runner failure), retry the job and apply the :retry: emoji. Read below for examples of system failures.\nIf an issue exists, add a üöí emoji. It can be helpful to reply to the failure notification with a link to the issue(s), but this isn‚Äôt always necessary, especially if the failures are the same as in the previous pipeline and there are links there.\nIf it is a new failure issue, add a üí• emoji.\nCheckout the list of\nSlack channels\nfor the pipeline-related channels.\nCreate an issue\nPlease use this step if there are no issues created to capture the failure. If there is already an issue please skip this step.\nCreate an issue for the test or system failure (if retrying the job does not resolve the latter) in\nhttps://gitlab.com/gitlab-org/gitlab/issues\nusing the\nQA failure\ntemplate. For failures in CustomersDot tests, open an issue in\nCustomersDot\nproject.\nApply the\n~\"type::ignore\"\nlabel to the issue until the investigation is complete and an\nissue type\nis determined.\nInform the counterpart SET about the failure.\nFor system failures, it may make sense to open an issue in a different project such as\nOmnibus GitLab\n,\nGitLab QA\n, or\nGitLab Runner\n.\nFor staging environment-related failures, you can post a question in\n#infrastructure-lounge\n, or open an issue in the\ninfrastructure project\nAsk for help in\n#s_developer_experience\nif you‚Äôre unsure where to file the issue.\nIn the relevant Slack channel, add the üí• emoji and reply to the failure notification with a link to the issue.\nAdd the issue as a related issue to the current pipeline triage report. If multiple issues are the result of 1 bug, add the bug issue to the report instead.\nReview the failure logs\nThe aim of this step is to understand the failure. The results of the investigation will also let you know what to do about the failure. Update the failure issue with any findings from your review. For more information about the failure logs, check out\nDebugging Failing Tests and Test Pipelines\nInvestigate the root cause\nDepending on your level of context for the test and its associated setup, you might feel comfortable investigating the root cause on your own, or you might get help from other SETs right away.\nWhen investigating on your own, we suggest spending at most 20-30 minutes actively trying to find the root cause (this excludes time spent reporting the failure, reviewing the failure logs, or any test setup and pipeline execution time). After that point, or whenever you feel out of ideas, we recommend asking for help to unblock you.\nNote:\nPlease avoid logging in via\ngitlab-qa\nand all the other bot accounts on Canary/Production. They are monitored by\nand will raise an alert if someone uses them to log in. If it is really needed to log in with these accounts, please give a quick heads-up in\n#security-division\nthat someone is logging into the bot and tag\n@sirt-members\nfor awareness.\nBelow is the list of the common root causes in descending order of likelihood:\nCode changes: Check if the new code was deployed to the environment.\nFind the diff between current and previous GitLab versions using this example\nhttps://gitlab.com/gitlab-org/security/gitlab/-/compare/start_commit_sha...end_commit_sha\nto see if there was a change that could have affected the test.\nFeature Flag: Check if a new feature flag is enabled in the environment.\nWhen a feature flag is enabled, it‚Äôs being reported to specific QA pipeline Slack channel. This also triggers a Full QA job and it may help to identify which specific feature flag caused the failure.\nA list of logs containing details on both recent and historic feature flag changes can also be viewed by visiting the\nfeature-flag-log\nproject. Each time a feature flag is updated, a new issue is generated in the project with helpful information such as when the feature flag was changed, who performed the update and on which environment. The project contains several\nhost\nlabels that can help filter by environment when searching through issues (ex:\n~host::staging.gitlab.com\n)\nYou can also reference this\ndashboard\nfor a visual representation of feature flag statuses.\nEnvironment / Infrastructure: If there were no code or feature flag changes and the environment has flaky errors, first start with analyzing\nSentry errors and Kibana logs\nto further investigate the issue.\nReview the\n#incidents-dotcom\nchannel to check if any ongoing incidents may be contributing to the failures.\nIf\nvalidate_canary!\ncheck\nis failing, check if\ncanary is not disabled on the environment\nby running\n/chatops run canary --production\non\n#production\nor\n/chatops run canary --staging\non\n#staging\nSlack channels. If canary is enabled, each server should report a few connections\n.\nThere is\nknown intermittent issue\nwith the traffic not getting directed to canary even though the\ngitlab_canary=true\ncookie is set.\nGitLab‚Äôs\nTamland\nmay also be a helpful resource to review. Tamland is used to help forecast the utilization and saturation of various services, such as Sidekiq. For example, if high saturation is predicted, this could surface as flaky behavior in our tests due to performance degradation from that service. More information about Tamland can be found\nhere\n.\nYou may also reach out to the Infrastructure team at\n#infrastructure-lounge\nand ask if something was changed recently on the environment in question.\nTest Data: Check that test data is valid. Live environments like Staging and Production rely on pre-existing data (QA users, access tokens).\nNew GitLab QA version: Check if a new\nGitLab QA version\nwas released.\nFailure examples can be seen in\nTraining Videos\n.\nClassify and triage the test failure\nThe aim of this step is to categorize the failure as either a stale test, a bug in the test, a bug in the application code, or a flaky test.\nWe use the following labels to capture the cause of the failure.\n~\"failure::investigating\"\n: Default label to apply at the start of investigation.\n~\"failure::stale-test\"\n:\nStale test due to application change\n~\"failure::broken-test\"\n:\nBug in the test\n~\"failure::flaky-test\"\n:\nFlaky test\n~\"failure::test-environment\"\n:\nFailure due to test environment\n~\"failure::bug\"\n:\nBug in the application\n~\"failure::external-dependency\"\n:\nFailure due to an external dependency\nBugs blocking end-to-end test execution (due to the resulting quarantined tests) should additionally have severity and priority labels. For guidelines about which to choose, please see the\nblocked tests section of the issue triage page\n.\nNote\n: It might take a while for a fix to propagate to all environments. Be aware that a new failure could be related\nto a recently-merged fix that hasn‚Äôt made it to the relevant environment yet. Similarly, if a known failure occurs but\nthe test should pass because a fix has been merged, verify that the fix has been deployed to the relevant environment\nbefore attempting to troubleshoot further.\nStale test due to application change\nThe failure was caused by a change in the application code and the test needs to be updated.\nInclude your findings in a note in the issue about the failure.\nApply the\n~\"failure::stale-test\"\nlabel.\nIf possible, mention the merge request which caused the test to break, to keep the corresponding engineer informed.\nSee\nQuarantining Tests\nBug in the test\nThe failure was caused by a bug in the test code itself, not in the application code.\nInclude your findings in a note in the issue about the failure.\nApply the\n~\"failure::broken-test\"\nlabel.\nSee\nQuarantining Tests\nBug in the application\nThe failure was caused by a bug in the application code.\nApply\n~\"failure::bug\"\nlabel to the test failure issue(s).\nCreate a new issue link all related test failure issue(s) to this issue.\nInclude your findings in a note in the bug issue about the failure.\nAdd the steps to reproduce the bug and expected/actual behavior.\nApply the\n~\"type::bug\"\nlabel, and cc-ing the corresponding Engineering Managers (EM), QEM, and SET.\nApply the\n~\"found by e2e test\"\nlabel to the bug issue (or bug fix MR if it is fixed immediately) to indicate the bug was found by the end-to-end test execution.\nIf the problem adheres to the definition of a\ntransient bug\n, apply the ~‚Äúbug::transient‚Äù label as well.\nIf there is an issue open already for the bug, use this issue instead and apply the above steps.\nCommunicate the issue in the corresponding Slack channels.\nQuarantine\nthe test right after the bug issue has been created. Leave a note on the bug issue with the link to the quarantined test and mention that it should be un-quarantined with the fix.\nWhen the reason for quarantining a test is because of a low severity bug in the code which will not be fixed in the upcoming couple of releases, add the\n~\"quarantine\"\n, quarantine with type and\n~\"failure::bug\"\nlabels to the test failure issue(s).\nWhen the bug is fixed, the related quarantined tests should be unquarantined and verified as well. The bug issue and all related test failure issues should be closed out together.\nNote\n: GitLab maintains a\ndaily deployment cadence\nso a breaking change in\nmaster\nreaches Canary and Production fast. Please communicate broadly to ensure that the corresponding\nProduct Group\nis aware of the regression and action is required. If the bug is\nqualified for dev escalation\n(example:\npriority::1/severity::1\nissue that blocks the deployment process), consider involving\nOn-call Engineers\nin the\n#dev-escalation\nchannel. To find out who‚Äôs on-call follow the links in the channel subject line.\nTo find the appropriate team member to cc, please refer to the\nOrganizational Chart\n.\nSee\nQuarantining Tests\nFlaky Test\nRead more\n:\nWhat is a flaky test?\nWhat are the potential causes for a test to be flaky?\nProcess\nInclude your findings in a note in the failure issue.\nApply the\n~\"failure::flaky-test\"\nlabel to the failure issue.\nApply a\n~\"flaky-test::*\"\nscoped label\nto the failure issue.\nFlakiness can be caused by a myriad of problems. Examples of underlying problems\nthat have caused us flakiness include:\nNot waiting appropriately for pages to load or transitions from one state to another to complete.\nAnimations preventing tests from interacting with elements.\nNon-independent tests (i.e. test A passes when run first, but fails otherwise).\nActions not completing successfully (e.g. logging out).\nFor more details, see the list with example issues in our\nunhealthy tests\ndocumentation.\nSee\nQuarantining Tests\nFailure due to test environment\nThe failure is due external factors outside the scope of the test but within a test environment under GitLab‚Äôs control. This could be due to environments, deployment hang-ups, or upstream dependencies within GitLab‚Äôs control.\nInclude your findings in a note in the issue about the failure.\nApply the\n~\"failure::test-environment\"\nlabel.\nIdentify the general category of improvement and add the failure issue to the approprite\nTest Reliability\nissue listed within the\nImprove test environment reliability and reduce flaky/transient test failures\ntracking issue.\nA job may fail due to infrastructure or orchestration issues that are not related to any specific test. In some cases these issues will fail a job before tests are ever executed. Some examples of non-test related failures include:\nFailed to download container from GitLab Container Registry\nFailed to complete orchestration of a Geo cluster\nCI runner timeouts\n500 error while uploading job artifacts\nExpired tokens (For more information, check out how to\nRotate Credentials\n)\nFailure due to external dependency\nThe failure is due to an external dependency the test is reliant on, but is outside of GitLab‚Äôs control. This could be due to outages in external package management systems, or outages in third-party integrations. If possible, external dependencies should be avoided to increase the reliability of the test suite.\nInclude your findings in a note in the issue about the failure.\nApply the\n~\"failure::external-dependency\"\nlabel.\nInclude a link to the external dependency‚Äôs outage notice, if available.\nSome examples of external dependency failures could include:\nOutages in package or container management systems such as registry.npmjs.org, RubyGems.org, NuGet or dockerhub\nOutages in third-party integrations such as Zuora\nNotify relevant groups about the failure\nFailure needs escalation\nIf the failure is in a\nsmoke\ntest, it will block deployments. Please inform the release managers of the root cause and if a fix is in progress by Quality. On GitLab.com, you can use\n@gitlab-org/release/managers\n. In Slack, you can use\n@release-managers\n.\nIf the failure could affect the performance of\nGitLab.com\nproduction, or make it unavailable to a specific group of users, you can\ndeclare an incident\nwith\n/incident declare\nin the\n#production\nSlack channel, this will automatically prevent deployments (if the incident is at least an S2).\nNotify group in all cases\nPlease also raise awareness by looping in the appropriate team members from the product group, such as SET or EM. The SET/EM can be identified by looking for who is assigned to that\nstage/group\n. Many tests are tagged with a\nproduct_group\nwhich will help with identification. You may also want to post in Quality‚Äôs Slack channel\n#quality\ndepending on the impact of the failure.\nFollowing up on test failures\nFixing the test\nIf you‚Äôve found that the test is the cause of the failure (either because the application code was changed or there‚Äôs a bug in the test itself), it will need to be fixed. This might be done by another SET or by yourself. However, it should be fixed as soon as possible. In any case, the steps to follow are as follows:\nCreate a merge request (MR) with the fix for the test failure.\nApply the ~‚ÄúPick into auto-deploy‚Äù, ~‚Äúpriority::1‚Äù, and ~‚Äúseverity::1‚Äù labels if the fix is urgent and required to unblock deployments.\nIf the test was flaky:\nConfirm that the test is stable by ensuring it passes 3 to 5 times while in quarantine.\nNote\nThe number of passes needed to be sure a test is stable is just a suggestion.\nYou can use your judgement to pick a different threshold.\nIf the test was in quarantine,\nremove it from quarantine\n.\nQuarantining Tests\nThe aim of quarantining a test is not to get back a green pipeline, but rather to reduce the noise (due to constantly failing tests, flaky tests, and so on) so that new failures are not missed. If you‚Äôre unsure about quarantining a test ask for help in the\n#quality\nSlack channel, and then consider adding to the list of examples below to help future pipeline triage DRIs.\nExamples of when to quarantine a test:\nBug in test code (\n~\"failure::broken-test\"\n), and a fix won‚Äôt be ready for review within 24 hours\nStale test (\n~\"failure::stale-test\"\n), and a fix won‚Äôt be ready for review within 24 hours\nExamples of when not to quarantine a test:\nTest failure is environment-related (\n~\"failure::test-environment\"\n), and neither the application code nor test code are the cause of the failure\nA merge request to fix the failure will be ready for review within 24 hours\nA flaky smoke test.\nThe\n:smoke\ntag should be removed from the test to prevent it running with the\nsmoke\nsuite, but still allowed to run elsewhere while the flakiness is under investigation or being worked on to unblock deployment.\nCreate an issue to follow up and restore the\n:smoke\ntag as soon as possible. Tests at the\n:smoke\nlevel should be given priority when addressing flakiness within our test suites.\nCreate a\nnote in the test as a reminder with a link to the previously created issue url. For example:\n# TODO restore :smoke tag and close https://gitlab.com/gitlab-org/gitlab/-/issues/######\nNote\nThe time limit for the fix is just a suggestion.\nYou can use your judgement to pick a different threshold.\nFast quarantine\nIf a test is failing and you have good reason to quarantine it quickly you can\nfast quarantine\nit. Fast quarantine can be done by a single person, without requiring review by another engineer.\nYou should use fast quarantine to unblock deployment pipelines and MRs if the failure is disruptive and you‚Äôve ruled out bugs as the cause of the failure (e.g., you‚Äôve identified that the test is stale, or flaky).\nNote\n: Failing\ngdk-instance\njob in the\ne2e: test-on-gdk\nchild pipeline will block MR pipelines as well as scheduled master pipelines. Failures of those tests are good candidates for fast quarantine.\nAfter fast quarantining, please follow the long-term quarantine process below.\nLong-term quarantine\nAdd the\n:quarantine\nmetadata to the test with a link to the issue (see\nquarantined test types\n)\nNote\nIf the example has a\nbefore\nhook,\nthe\nquarantine\nmetadata should be assigned to the outer context\nto avoid running the\nbefore\nhook.\nCreate a merge request using the\nQuarantine end-to-end Test\ntemplate.\nThe merge request shall have the labels:\n~\"Quality\", ~\"QA\", ~\"type::bug\"\n.\nThe merge request may have auto-deploy labels:\n~\"Pick into auto-deploy\", ~\"priority::1\", and ~\"severity::1\"\n. Please note that this is reserved for emergency cases only, such as blocked deployments, as it will delay all other deployments by around two hours.\nThe merge request may have stage or group labels. E.g.\n~\"devops::create\" ~\"group::source code\"\n.\nThe merge request shall have the current milestone.\nThe merge request shall link to (but not close) the failure issue.\nThe failure issue should remain open and be assigned a DRI for fixing, re-evaluating, or dequarantining the test as needed.\nTo be sure that the test is quarantined quickly, ask in the\n#quality\nSlack channel for someone to review and merge the merge request, rather than assigning it directly.\nHere is an\nexample quarantine merge request\n.\nNote\nBe aware that for blocked release cycle auto deploy with quarantined test will not work. During canary deployment we trigger tests against both staging and canary. Spec is not quarantined on staging yet because quarantined MR didn‚Äôt reach it. That leads to environment circular dependency problem.\nIn that case the Release Managers should decide whether it is possible to rollback Staging, or whether to\nmanually deploy the quarantined MR to Staging\n. Manually deploying the fix to Staging will reduce the amount of mixed-version testing but may be the only option to allow deployment pipelines to continue.\nQuarantined Test Types\nIf a test is placed under quarantine, it is important to specify\nwhy\n. By specifying a quarantine type we can see\nquickly the reason for the quarantine.\nBelow is a list of quarantine types you may use, and their purpose. If the reason for quarantine is not listed\nbelow, please consider contributing to this list:\nQuarantine Type\nDescription\n:flaky\nThis test fails intermittently\n:bug\nThis test is failing due to a bug in the application\n:stale\nThis test is outdated due to a feature change in the application and must be updated to fit the new changes\n:broken\nThis test is failing because of a change to the test code or framework\n:waiting_on\nThis test is quarantined temporarily due to an issue or MR that is a prerequisite for this test to pass\n:investigating\nThis test is a\n:flaky\ntest but it might be blocking other MRs and so should be quarantined while it‚Äôs under investigation\n:test_environment\nThis test is failing due to problems with the test environment and will not be fixed within 24 hours\n:dependency\nThis test is failing due to an external dependency the test is reliant on, but is outside of GitLab‚Äôs control\nNote\n: Be sure to attach an\nissue\nto the quarantine metadata. We use this issue for tracking the average age of the quarantined tests.\nExamples\nit\n'is flaky'\n,\nquarantine\n:\n{\nissue\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/12345'\n,\ntype\n:\n:flaky\n}\nit\n'is due to a bug'\n,\nquarantine\n:\n{\nissue\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/12345'\n,\ntype\n:\n:bug\n}\ncontext\n'when these tests rely on another MR'\n,\nquarantine\n:\n{\ntype\n:\n:waiting_on\n,\nissue\n:\n'https://gitlab.com/gitlab-org/gitlab/merge_requests/12345'\n}\nNested contexts\nYou should apply the quarantine tag to the outermost\ndescribe\n/\ncontext\nblock that has tags relevant\nto the test being quarantined.\n## Good\nRSpec\n.\ndescribe\n'Plan'\n,\n:smoke\n,\nquarantine\n:\n{\nissue\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/12345'\n,\ntype\n:\n:flaky\n}\ndo\ndescribe\n'Feature'\ndo\nbefore\n(\n:context\n)\ndo\n# This before(:context) block will only be executed in smoke quarantine jobs\nend\n## Bad\nRSpec\n.\ndescribe\n'Plan'\n,\n:smoke\ndo\ndescribe\n'Feature'\n,\nquarantine\n:\n{\nissue\n:\n'https://gitlab.com/gitlab-org/gitlab/issues/12345'\n,\ntype\n:\n:flaky\n}\ndo\nbefore\n(\n:context\n)\ndo\n# This before(:context) block could be mistakenly executed in quarantine jobs that _don't_ have the smoke tag\nend\nDequarantining Tests\nFailing to dequarantine tests periodically reduces the effectiveness of the test suite. Hence, the tests should be dequarantined on or before the due-date mentioned in the corresponding issue.\nBefore dequarantining a test:\nIf the test failure was originally discovered in\ngitlab-org/gitlab\nnightly schedule pipeline\n, MR or\nmaster\npipeline, please make sure that the test passes on your local against GDK with latest code and that it has passed a few times\nin the nightly pipeline‚Äôs quarantine job for that test.\nIf the test failure was originally discovered in\nstaging\n,\ncanary\nor\nproduction\npipeline, please make sure that the test passes in the CI pipeline against that environment.\nYou can trigger a CI pipeline against a live environment by clicking ‚ÄúRun Pipeline‚Äù button on the\nstaging\n,\ncanary\nor\nproduction\npipelines page\nand setting the\nvariable to the release that has your changes. See\nRunning GitLab-QA pipeline against a specific GitLab release\nfor instruction on finding your release version created and tagged by the Omnibus pipeline.\nTo dequarantine a test:\nCreate a merge request that removes the\n:quarantine\ntag using the\nQuarantine End to End Test\nMR template.\nClose the issue created as part of the quarantining process.\nAs with quarantining a test, you can ask in the\n#quality\nSlack channel for someone to review and merge the merge request, rather than assigning it.\nRe-evaluating tests\nIf the due date of a failing test issue is reached, you should re-evaluate if the failing test should really be covered at the end-to-end test level, or if it should be covered in a lower level of the\ntesting levels pyramid\n.\nIf you decide to delete the test, open a merge request to delete it and close the test failure issue. In the MR description or comment, mention the stable counterpart SET for the test‚Äôs stage for their awareness. Then open a new issue to cover the test scenario in a different test level.\nIf you decide the test is still valuable but don‚Äôt want to leave it quarantined, you could replace\n:quarantine\nwith\n:skip\n, which will skip the test entirely (i.e., it won‚Äôt run even in jobs for quarantined tests). That can be useful when you know the test will continue to fail for some time (e.g., at least the next milestone or two).\nQuarantined test report\nEvery week, a list of the current\nlong-term quarantined\nE2E tests in both the GitLab and CustomersDot project is reported to the\n#quality-reports\nSlack channel.\nThis report is generated from the Test Platform Department‚Äôs\ntoolbox\nproject.\nTraining videos\nThese videos walking through the triage process were recorded and uploaded to the\nGitLab Unfiltered\nYouTube channel.\nQuality Team: Failure Triage Training - Part 1\nCovers the basics of investigating pipeline failures locally.\nQuality Team: Failure Triage Training - Part 2\nContinued discussion with a focus on using Docker containers that were used in the pipeline that failed.\nQuality Engineering On-call Rotation and Debugging QA failures\n(\nprivate video\non GitLab Unfiltered)\nOverview of QE on-call rotation process, GitLab deployment process and how to debug failed E2E specs with examples.\nQuality Engineering: Test environments show and tell\nA show and tell presentation that gives an overview of our test environments. Originally presented for an audience of our counterparts.\nRunner Taskscaler and Fleeting Test Plan Discussion\nA high level discussion on the new runner architecture, including the new\ntaskscaler\nand\nfleeting\n, the components replacing docker-machine for\nrunner autoscaling\n.\nLast modified July 18, 2025:\nFix links that were broken cause the page moved (\nad7d8058\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5115}
{"doc_id": "8d1865f948f79e59", "url": "https://handbook.gitlab.com/handbook/total-rewards", "title": "GitLab's Guide to Total Rewards | The GitLab Handbook", "text": "The Handbook\nGitLab's Guide to Total Rewards\nCompensation\nWhy:\nOur Compensation Principle\nWhat:\nCompensation Calculator Inputs\nHow:\nCompensation Review Cycle\nBenefits\nWhy:\nOur Benefits Principle\nWhat:\nGeneral Benefits\nEquity\nWhy:\nWhy we grant Equity to Team Members\nWhat:\nWhat we grant to Team Members\nHow:\nAccepting, Understand and Exercising Awards\n* Compensation at GitLab is currently being updated as part of our Job Architecture Project. All information in related compensation handbook pages is subject to change during or at the conclusion of this transition. Please see the Job Architecture Project section for more information.\nMeet the Total Rewards Team\nWho\nJob Title\nAllia McCrank\nVP, Total Rewards\nAngela Chung\nDirector, Executive Compensation & Equity\nDenise Parsonage\nDirector, Global Benefits Strategy\nRaisha Kole\nSenior Benefits Program Manager\nVanessa Crisostomo\nSenior Benefits Analyst\nCharles Reveil\nSenior Benefits Analyst\nJackie Grubbs\nSenior Absence Management Specialist\nTeranay Dixon\nSenior Absence Management Specialist\nMorgan Wilkins\nManager, Compensation\nShahrukh Talat\nCompensation Analyst\nAri Weir\nCompensation Partner, GTM\nMike Kitlas\nCompensation Partner, R&D\nContact The Team\nFor feedback or questions relating to compensation, benefits and equity, you can reach out to us via:\nHelpLab:\nTo get in touch with People Connect who can answer your question or help direct it to the proper person/team.\nBenefits\nFind answers to your questions about GitLab's benefits.\nCompensation\nFind answers to your questions about GitLab's compensation framework.\nEquity Compensation\nLearn more about Equity Compensation at GitLab\nIncentives at GitLab\nThe page contains information about incentives available for GitLab team members.\nLast modified June 3, 2025:\nRemoval of Comp Calc References & Job Architecture Transition Updates (\nf0896a99\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 274}
{"doc_id": "e75a041a42800fac", "url": "https://handbook.gitlab.com/handbook/marketing/channel-marketing/hyperscalers", "title": "Hyperscaler Campaign | The GitLab Handbook", "text": "The Handbook\nMarketing\nGlobal Channel Marketing\nHyperscaler Campaign\nNaming Convention Requirements\nWhen working with hyperscaler partners like AWS and Google Cloud, it‚Äôs important to follow specific naming conventions and configuration procedures. This guide explains each component of this process in detail.\nEvery campaign involving a hyperscaler partner must specify the Hyperscaler Partner Name after the date:\nYYYYMMDD_HyperscalerName_Campaign_CampaignType_Region\nExamples:\n20251202_AWS_AWSreinvent_Booth\n20250409_GCP_GoogleCloudNext_Booth\n20241114_AWS_devops.com_ModernizingFinServe_emea_amer\nIf there are Hyperscaler Funds involved, ensure you include the type of Funds are applied to the Campaign after the Hyperscaler Name.\nMDF: Market Development Funds for 50% coverage\nCR: Credits for 100% coverage\nExamples:\n20250307_AWS_MDF_Campaign_CampaignType_Region\n20250307_GCP_CR_Campaign_CampaignType_Region\nReference the\nCampaigns and Programs\npage for naming conventions for specific campaign types.\nSalesforce Configuration Requirements\nWhen setting up these campaigns in Salesforce, you need to take two critical actions:\nSet the field\nIs Hyperscaler Involved?\nto\nTrue\n- This flags the campaign as a partnership activity.\nSelect the appropriate partner under the\nHyperscaler\nfield - Choose either:\nAmazon Web Services\nGoogle Cloud (Partner)\nSelect the Fund Type under\nWill there be Hyperscaler Funding?\nCredits\nThis configuration ensures proper attribution and tracking of partnership activities. Note that, Hyperscaler MDF is only in referrance to AWS MDF, as that is currently the MDF that‚Äôs available for GitLab.\nCampaign Types Covered by These Guidelines\nThese naming conventions and configuration requirements apply to all activities where hyperscalers are involved, including:\nExhibition booths at hyperscaler-hosted events (such as Google Cloud Next or AWS Summit)\nPresence at major corporate events (like AWS reInvent)\nJoint webinars with hyperscaler partners\nDigital marketing campaigns including content syndication and advertising\nAny events or activities that utilize AWS MDF (Market Development Funds) or Google credits\nSpecial Instructions for Content Syndication Teams\nIf you work with content syndication, you have an additional step: You must update the Asset Name in the Marketo token of the Content Syndication Folder to include the Hyperscaler Name.\nThis ensures consistency across all platforms and makes reporting and attribution more accurate. The Marketo Program Description field has been recently updated to include a reminder about adding hyperscaler partner names to campaign names whenever these partners are involved.\nFollowing these guidelines carefully ensures proper tracking, reporting, and compliance with partnership agreements, while also making campaigns easier to find and manage across systems.\nHyperscaler Funded Campaign\nHyperscaler funded campaign represent a strategic partnership mechanism through which cloud hyperscalers like Amazon Web Services (AWS) and Google Cloud Platform (GCP) provide financial support to partners like GitLab for joint marketing initiatives.\nPresently, the Hyperscaler funds are\nonly available to the Regional Marketing team\n. We will be working in iteration to support additional marketing teams.\nThese funding programs operate under different models that reflect each hyperscaler‚Äôs partnership approach:\nAWS MDF Program\n: Follows a matching investment model. This means for every dollar AWS contributes, GitLab must match with its own dollar.\nGoogle Credits Program\n: Unlike AWS, Google offers 100% reimbursement for approved marketing activities. This model allows GitLab to execute campaigns and receive full reimbursement upon providing proof that the activities were completed successfully.\nFrom GitLab‚Äôs perspective, these funds enable more expansive marketing campaigns than possible while strengthening strategic partnerships with major cloud providers. The partnership creates a ‚Äúbetter together‚Äù narrative that helps customers understand the enhanced value proposition of GitLab running on these cloud platforms.\nKey Roles in the Hyperscaler Funded Campaign\nProgram Owner (Francine): Primary contact with Hyperscaler Partners\nOversees the entire MDF program\nReviews internal MDF request entries with Hyperscalers\nSubmit MDF request, when approved, we‚Äôll receive a PO\nRequest an invoice from AR team provide the PO and MDF Approval Email via issue\nSubmit claim with proof of performance (receipt) to the Hyperscaler portal\nFund Requesters: Initiates funding requests\nFill out the\nappropriate spreadsheet\nwith campaign details\nProvides Target MQL and Target Pipeline Goals\nCampaign Owners/Operations (Fund Requester can also be a Campaign Owner)\nSet up the Allocadia activity\nCreate the GitLab Hyperscaler Funds issue\nAdd Hyperscaler Funds issue link to\nspreadsheet\nActivate issue sync to create Asana project to manage their campaign\nManages execution and setup for Marketo and Salesforce\nOpen Zip request\nSend Program Owner receipts for Proof of Performance\nApplication Process\nComplete the Google Sheet:\nMarketing calendar - spreadsheet\nComplete all required fields, including:\nStrategic Alignment\nRegion\nActivity Type and Description\nProposed Start and End Date\nTotal Cost\nAmount Requested\nTarget MQL\nTarget Pipeline\nSubmit for Review:\nTag Francine for approval in the Google spreadsheet\nInclude any supporting materials that strengthen your case (past performance of similar activities, customer interest data, etc.)\nApproval Process\nInitial Screening: Francine will review your application to ensure it meets basic requirements and aligns with strategic priorities.\nHyperscaler Partner Approval: Upon preliminary approval, Francine will review and seek approval for the activity and confirm funding amount from the Hyperscaler Partner.\nSystem Configuration: Once approved by the Hyperscaler Partner,\nCampaign Owner will open the Allocadia activity and Hyperscaler Funded GitLab issue\nCampaign Owner will be responsible for creating the Marketo campaign and sync to Salesforce using the Allocadia Subcategory ID (found in the Hyperscaler Funded GitLab issue)\nSet up\nAllocadia\nThe Campaign Owner will be responsible for opening the Allocadia activity under the\nRegional Marketing > AMER > Hyperscaler\nplan.\nCreate subcategory and line item\nDifferent accounting approaches apply based on the hyperscaler. AWS campaigns show both the positive contribution and the matching negative amount, while GCP campaigns show the full reimbursable amount.\nDetails panel\nPlanning:\nNew FO or Growth\nTarget MQL (syncs to SFDC Planned MQL)\nTarget Pipeline (syncs to SFDC Planned Pipeline)\nSales Dev Onsite Support\nSales Dev Invite Support\nSubcategory (FM)\nGTM Motion\nStart Date\nEnd Date\nTriple Play\nEmbedded Systems\nIs Hyperscaler Involved? = True\nHyperscaler\nWill there be Hyperscaler funding?\nHyperscaler Funding Amount\nSA Support\nSegment\nGeo\nCountry\nVendor\nWishlist/Cancelled\nCancelled\nCampaign Details\nExisting Salesforce Campaign\nCampaign Link\nHave you selected an existing Campaign above or will you be creating a new one?\nCampaign Name to be Created (Mkto/SFDC)\nCampaign Owner\nBudget Holder = hyper\nCampaign Type\nGitLab Issue Details\nRequester User Handle\nCampaign Operations User Handle (fill this out if you aren‚Äôt FM)\nOperational Program Owner = Francine\nPartner User Handle = @fanthony2\nIn Person Event Type\nGitLab Issue Template = Hyperscaler\nOfficial Event/Campaign Name\nGitLab Marketing Issue Link (Auto-populated)\nGitLab Issue URL Reference (Manual entry)\nAction: Create GitLab Hyperscaler Funded Issue in the Regional Marketing GitLab Project\nGitLab Issue\nThe GitLab Hyperscaler Funded Campaign issue will be used as an intermediate step prior to syncing to Asana.\nCampaign Owner will be responsible for entering the details include region and activity quarter labels to GitLab Hyperscaler Funds issue.\nProgram Manager will request for invoice from AR using the finance issue, including PO and payment terms. MDF -\nExample\nOnce the GitLab Hyperscaler Funds issue details are complete, Campaign Owner adds the\nAsana-Sync-Project\nto the GitLab Hyperscaler Funds issue and the FMM and FMC to start the\nPlan to WIP process\nCampaign Owner will add the Asana project link to the Resources section in the GitLab Hyperscaler Funded Campaign issue\nAsana Project\nTo accommodate the Regional Marketing process in Asana, we have integrated the steps for Hyperscaler Funded Campaigns into the\nPlan to WIP process\n. The Regional Marketing Asana template incorporates the hyperscaler process details in the appropriate tasks.\nPre-Event\nCreate Marketo/ SFDC campaign with add the Hyperscaler Name and Hyperscaler Fund Type after the date in the Campaign Name - reference a handbook for\nnaming convention\n. _Examples: 20250307_AWS_MDF_ActivityType_ActivityName_Region;\n20250307_GCP_CR_ActivityType_ActivityName_Region (Details provided in the program tracking task in the Regional Marketing Asana template)\nCreate Marketo program under the\nHyperscaler Funded Campaign folder\nSync the Marketo program to Salesforce using the Hyperscaler Funded Campaign Allocadia Subcategory ID\nUpdate the links to Marketo and Salesforce in the Asana Project Overview\nOpens the Zip request (Details provided in the contract request task in the Regional Marketing Asana template)\nAcquire Contract/Invoice for the Marketing Activity\nSelect the appropriate purchase type: Sponsorships & Regional Marketing\nEnter the amount of the total contract cost\nIn the Allocadia ID, specify the Line Item ID (positive value) of the Hyperscaler Fund Allocadia activity in the Zip request\nAdd Francine as a follower to the Zip request\nUpdate the link to Zip request in the Asana Project Overview\nPost-Event\nDetails provided in the Ecosystem section in the Regional Marketing Asana template\nAttach Proof of Payment (POP) to the Asana Project and tag Francine\nThird-party receipts showing actual costs are required for cash reimbursement. It should clearly show a date, after the fund requests approval and the paid amount.\nUpdate the appropriate\nhyperscaler spreadsheet\nwith Actual MQL and Pipeline 2 weeks after the end of the event.\nTransfer Budget to Hyperscaler\nWhen marketing teams have additional budget to spare, they can strategically\ntransfer funds\nto maximize partnership opportunities. By submitting a\nbudget transfer request\nto the Hyperscaler Activity Plan, teams can unlock co-marketing resources, potential matching funds, and expanded collaborative campaigns. If you have any questions regarding transferring funds, please reach out to your FP&A POC.\nPLEASE NOTE: FP&A is involved in this process and will be tracking all fund transfers for future budgeting.\nWhen submitting the Zip request, it is critical to ensure the Allocadia ID reflects a positive value, which accurately supports proper financial tracking.\nUnderstanding Data Flow: From Lead to Opportunity\nOne of the most complex aspects of hyperscaler campaigns is tracking the customer journey from initial interest to closed business. This journey involves multiple handoffs:\nLead Identification: When a lead comes from a hyperscaler campaign, it‚Äôs tagged with the appropriate CRM Partner ID and campaign information.\nLead-to-Opportunity Conversion: As leads convert to opportunities, the system maps partner and campaign information to maintain attribution.\nNotification Systems: Automated notifications alert Cloud ESMs (Ecosystem Sales Managers) and regular ESMS are involved when new opportunities arise from hyperscaler campaigns.\nCo-Sell Integration: Labra facilitates referrals between GitLab and Hyperscalers for co-sell opportunities, creating a structured engagement process.\nUnderstanding this flow helps teams recognize that not all Hyperscaler campaign leads will become co-sell opportunities, but tracking remains important to demonstrate overall program impact.\nLast modified June 24, 2025:\nHB WIP: MktgOps June 18 (\nf9154821\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1688}
{"doc_id": "8d187acdd84c7a95", "url": "https://handbook.gitlab.com/handbook/security/corporate/systems/1password/setup", "title": "1Password Setup Guide | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec Systems and Tech Stack\n1Password\n1Password Setup Guide\nYou will receive an invitation to get started in your email on your first day. You will get access to service or team-specific vaults in your onboarding or through access requests.\nAs an added benefit, we give all team members a free\nfamily account\nfor securing your personal passwords as well in two separate accounts with respective vaults.\nVendor Docs - Getting Started\nVendor Docs - Install Password on Mac\n1Password Chrome Extension\nVendor Docs - Getting Started on Mac\nVendor Docs - Save and Fill Passwords\nVendor Docs - Sharing a Password Securely\nTroubleshooting Tips\nAdmin Account 1Password Extension Integration\nFor users with access to secondary 1Password accounts, please make sure that the 1Password Chrome extension in your Black Chrome profile is NOT set to automatically integrate with the desktop app. This setting may re-enable itself after a major 1Password or Chrome update.\nIn the top right corner of Chrome, click the\nplugin icon\n(puzzle piece), click the\n3 dots\ndropdown menu next to 1Password, then choose\nSettings\n.\nIn the\nGeneral\nsection in the left sidebar, ensure that\nIntegrate this extension with the 1Password desktop app\nis disabled.\nIn the left sidebar, navigate to\nAccounts & vaults\n.\nIf your normal user account (\n{handle}@gitlab.com\nand not\n{handle}-admin@gitlab.com\n) is listed, click the three dots and choose\nSign Out\n. Repeat these actions for any other accounts that appear (ex. your personal 1Password email address).\nIf your admin account is not listed, click\nSign in to another account\n. After redirecting to the 1Password website, choose the\ngitlab.1password.com\ntile and verify that your\n{handle}-admin@gitlab.com\nemail address is shown, then type in your master password.\nThe 1Password extension in the top right corner should now show your admin creentials.\nLast modified November 1, 2024:\nRemove trailing spaces (\n6f6d0996\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 325}
{"doc_id": "477603f21f6e351f", "url": "https://handbook.gitlab.com/handbook/people-group/general-onboarding", "title": "GitLab Onboarding | The GitLab Handbook", "text": "The Handbook\nPeople Group\nGitLab Onboarding\nOnboarding at GitLab and Onboarding Issue Templates\nOnboarding is\nincredibly important\nat GitLab. We don‚Äôt expect you to hit the ground running from day one.\nWe highly recommend taking at least two full weeks for onboarding and only in week three starting with team specific onboarding and training. Please feel free to participate in your team‚Äôs work in your first two weeks, but don‚Äôt feel like you have to contribute heavily.\nAll onboarding steps are in the\nonboarding issue template\nwhich is owned by the People Connect team. The onboarding process for the new team member is\nself-driven and self-learning\n, whilst also remaining as\nasynchronous\nas possible settling into the remote life at GitLab.\nAt GitLab we take great pride in\ndogfooding\nour own product, that is why all onboarding tasks are completed in a GitLab issue. First of all, what is an issue? You can learn more about what an issue is\nhere\n.\nThe People Connect Specialist assigned to the team members specific onboarding will\nopen\nthe onboarding issue at least 4 days prior to the hire date.\nEach onboarding issue has a main section that contains tasks relevant to all GitLab team-members and a due date of 30 days. Below the main section are department and role-specific tasks. Some roles and departments have tasks that link to a supplemental issue template or an additional onboarding page.  Reach out to your\nonboarding buddy\nor other GitLab team members if you need help understanding or completing any of your tasks.\nThrough onboarding issues, you should gain access to our team member\nbaseline entitlements\n. On Day 2 of onboarding an\nAccess Request\nwill be generated, if a template has been created for the role. Access requests are owned by the IT team. If you have any access requests related questions, please reach out to\n#it-help\nin Slack.\nIn certain instances, the People Connect team may not be able to assist with onboardings due to a national holiday or Family and Friends Day. These specific dates are documented in the People Connect team\navailability\n.\nTaNewKi Welcome Call\nThe People Connect team hosts a\npre-onboarding call\nknown as the Ta-New-Ki call (a play on the abstract Tanuki i.e. Japanese raccoon dog you will find in our logo). The purpose of this call, which is hosted in Zoom, is to give soon to onboard team members the chance to meet / socialise and to provide an opportunity to ask any lingering questions\nahead\nof their start date. Internally we refer to this as an AMA (Ask Me Anything) call.\nHiring managers and current team members (such as onboarding buddies), are more than welcome to join the call.\nThis call occurs every two weeks on Thursday at three times to account for timezones.\n04:00/16:00\n12:00/00:00\n08:30\nFor current team members: To add the invite to your calendar, review the GitLab Team Meeting Calendar.\nFor future team members: You will receive an email with the future dates.\nPlease note that this call will take a place a week or two before your actual start date.\nAgenda\nGeneral Topics Covered\nReview the onboarding process on Day 1\nEncourage team members to take their time\nSelf Driven and self service\nQuestions from the new team members\nSending out the TaNEWki Call Invite\nInvites are sent by the People Connect Specialist in the respective rotation. This email should be sent out at least one week before the call.\nOpen the Ta\"NEW\"ki Folder located People Experience/Ops Shared Drive>People Experience>Ta\"NEW\"ki Call\nUpdate the google form to include the next two TaNEWki call dates (AMER/APAC, APAC/EMEA and EMEA/AMER times)\nUse this\nemail template\nAdd the new team members emails to the BCC line and CC the People Connect team.\nThe People Connect team can check who will be attending the call by looking at the Google response sheet.\nOnce new hires have completed the form an auto-response (via Document Studio) will reply with the zoom link and the date selected.\nSlack Channel Support for New Team Members\nBy default, all new team members are added to the below Slack channels from day 1 to ensure that they are able to ask any questions or for assistance in the correct channels upfront:\n#new_team_members\n(go say hi and introduce yourself)\n#diversity_inclusion_and_belonging\n(connect with other team members to find out more about what we do in Diversity, Inclusion and Belonging)\n#it_help\n(any IT related support needed, such as issues with laptop, 1Password, Okta, JAMF, etc)\n#questions\n(anything that the Handbook can‚Äôt help with)\n#donut-be-strangers\n(need some help setting up a coffee chat)\n#team-member-updates\n(new team member, anniversaries, goodbyes)\n#thanks\n(want to acknowledge and thank someone at GitLab, this is the channel)\n#whats-happening-at-gitlab\n(all important updates/reminders/notifications related to GitLab)\nManagers of New Team Members\nAn issue is created for new team members at least 4 business days prior to their start date. The Manager and a People Connect Team member will be assigned to this issue.\nManagers and People Connect\nall have tasks that need to be completed\nprior to the start date\nto ensure a smooth and successful onboarding process. For questions or help with any of these tasks feel free to reach out in the issue or by creating a request via HelpLab.\nCompliance\nThe\nSenior People Connect Specialist\ncompletes a monthly audit of all open onboarding issues to ensure that the new team member, manager and People Connect team tasks are completed. More importantly, there are certain tasks which need to be completed in line with our company compliance (security, payroll, etc).\nIf any tasks are still outstanding, the People Connect Specialist will ping the relevant members on the issue requesting action on the items or checking whether the issue can be closed.\nIt remains the responsibility of the People Connect Specialist to close the issue and remain compliant.\nThe employment bot will automatically close any onboarding issues still open after 60 days.\nCompleting Onboarding Issue\nFirst of all, what is an issue? You can learn more about what an issue is\nhere\n.\nTo ensure a successful completion of the onboarding issue, it is important that all tasks are checked off, whether the task is applicable to the onboarding team member or not. Checking the box indicates one of the following:\nI have completed this task\nI have checked and this task is not applicable to me\nOnboarding Issue Template Links\nThese templates are used by the People Connect team to onboard new team members.\nAll GitLab team-members\nIntern\nRole Specific Templates\nAll onboarding related employment templates (country and role based) can be found in the\npublic repository\nSupplemental onboarding issue templates\nInterviewing training issue\nMonitor group onboarding issue\nBecoming a GitLab manager issue\nProduction engineering onboarding issue\nSecurity products technical onboarding issue\nSupport engineer onboarding issue\nTemporary Service Provider (Contractor/Consultant) Onboarding\nThe People team is not involved in the process for hiring, onboarding, or offboarding temporary service providers. You can work with the Procurement team on these onboardings and review the\ntemporary service provider internal handbook page\nfor templates and other helpful information.\nAdditional onboarding pages\nDeveloper onboarding\nGitLab onboarding buddies\nMerge Request buddies\nOnboarding Processes\nDeveloper Experience Onboarding\nSales team onboarding\nSupport team onboarding\nSRE onboarding\nUX Researcher onboarding\nGitLab Onboarding Buddies\nOnboarding Responsibilities and Process\nMerge Request Buddies\nMerge request buddies at GitLab\nTaNewKi Tips\nNew Hires Guide to Starting at GitLab\nLast modified June 13, 2025:\nMove IT under CorpSec (\n5b5a36c1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1252}
{"doc_id": "db31c1b509c1816a", "url": "https://handbook.gitlab.com/handbook/product/ux/collaborators-playbook", "title": "Design collaborator's playbook | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nDesign collaborator's playbook\nThis page acts as a quick reference of mental models for sync and async collaboration.\nWhat‚Äôs it for?\nThis page acts as a quick reference of mental models for sync and async collaboration. Its purpose is to create a common language for collaboration between designers, GitLab team members and the broader GitLab community. It should be used to understand and label patterns in collaboration, pain points, where we get stuck and how to get unstuck. It is not our\ndesign workflow\n.\nWhy is this important?\nCollaboration\nis one of GitLab‚Äôs key values. At GitLab, we believe that everyone is a designer and everyone can contribute. This means the UX department is a\nhumble facilitator of design\n. The design team can support collaboration across GitLab (and our broader community) by leveraging and sharing the mindsets, methods and tools of\ndesign thinking\n.\nMental models\n2 steps forward, 1 step back design\nAt GitLab we ship using the\nMinimal Valuable Change\n(MVC). Designing in this context can often be confusing for newcomers because it‚Äôs important to consider the big picture as well as the steps for how we get there. To deal with this dichotomy, we design by initially thinking about the mid to long-term vision and then reducing the scope of the experience (in a lovable way) to make implementation quicker. In other words, we design by taking 2 steps forward and 1 step back.\nActions\nUse this model with your team to break a vision down into a series of small (MVC) issues\nDivergent & convergent thinking\nFrom a young age we are often trained to jump to solutions as quickly as possible. This prevents us from taking the time to explore fully all our options. We can overcome this challenge by understanding and leveraging divergent and convergent thinking. These are two of the foundational modes of creative problem-solving:\nDivergent thinking (go broad): Generating lots of different ideas and exploring options without too many constraints in place.\nConvergent thinking (focus in): Reflecting on your options and ideas, combining them together in unique ways, analysing them, and converging on a solution (with constaints in mind).\nActions\nWatch short video\nDiscuss with your team whether it is time for diverging or converging\nLeverage a synchronous\ncollaborative cycle\nSummarise text in a divergent thread and ask to converge on a solution (\nexample\n)\nLadder of abstraction\nWe can‚Äôt design in isolation. All the decisions we make are in the context of a broader system. We must zoom in and out between the system and its component parts to do our best work. Unfortunately, humans can only hold 5 (plus/minus 2) pieces of information in working memory at any one time (see\ncognitive load\n,\nMiller‚Äôs Law\n). Therefore, we need to think at different levels of abstraction to manage this limitation. The ladder of abstraction is a useful mental model to recognise what level of abstraction you are currently working in. You can move up the ladder (more abstract) by asking ‚Äúwhy?‚Äù or ‚Äúwhat does that mean?‚Äù. You can move down the ladder by asking ‚Äúhow does that work?‚Äù or ‚Äúcan you give me an example?‚Äù.\nExample:\nVery abstract:\n‚ÄúThis is how I commute to work‚Äù\nModerately abstract:\n‚ÄúThis is my personal transportation device‚Äù\nConcrete:\n‚ÄúThis is a bicycle‚Äù\nActions\nRead ‚Äú\nUp and Down the Ladder of Abstraction\n‚Äù\nUse the ‚Äú\n5 Whys exercise\n‚Äù to move up the ladder of abstraction\nUse sketches and prototypes  to move down the ladder of abstraction\nResources\nSalesforce Workdifferently\nSalesforce Workdifferently: Method cards\nIBM enterprise design thinking\nCollaborative exercises\nAs designers, we‚Äôre generally embedded within stage groups. As we work to create designs, it can be helpful to include our engineering and product counterparts in our ideation processes. Collaborative exercises can sometimes be quite useful for this purpose. Conducting these exercises periodically within our teams can help build trust and generate buy-in. It can also help surface ideas and things to consider earlier rather than later in the design process.\nAs we are distributed globally you may opt for either an async or a sync collaborative exercise, depending on your goals and desired outcomes.\nBelow are a few of the exercises teams have run, organized by which stage of the design process you‚Äôre in.\nProduct direction and vision\nWhen you‚Äôre defining your product direction and vision, putting together an async board for your team to review your ideas ‚Äì and add their own ‚Äì can be quite useful. Some teams have run product direction workshops, which can either be\nbroadly\nor more\nnarrowly focused\n, depending on your needs.\nAn\naltitude exercise\nis an another approach. An altitude exercise solicits feedback at the satellite-level, airplane-level, and ground-level. This exercise can help gather feedback about strategy and the particular design details simultaneously.\nIdeation\nIf you‚Äôre at the ideation stage of the design process, you might consider an asynchronous\nideation workshop\n. If you have a number of options you‚Äôre weighing as a team, a sync\nlighting decision jam\ncould help the team align on a way forward.\nSpecific design feedback\nIf you‚Äôve developed a design direction and want to give the team space to ask questions synchronously, an ‚Äúask me anything‚Äù style meeting can be useful. When running this type of session, ensure you share your design direction prior to the meeting so everyone has a chance to review and you can gather the best feedback.\nAlternately, if you‚Äôd like feedback on common areas of\nconfusion\nor on the\ntechnical feasibility\nof your proposal, putting together an async board for your team to review can be a great way to start these conversations.\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 971}
{"doc_id": "c49d65f986027c3e", "url": "https://handbook.gitlab.com/handbook/product/ux/ux-research/how-to-conduct-ux-research-workshops", "title": "How to Conduct UX Research Workshops | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nUX Research at GitLab\nHow to Conduct UX Research Workshops\nThe UX Research workshop process at GitLab\nUX research workshops are activities that UX Researchers can utilize to collaborate with other team members at various phases of a research project. They can be performed before or after research is conducted to gather consensus from the group.\nBenefits of UX research workshops\nUX research workshops are useful because they offer UX Researchers a way to collaborate with their Product teams to plan out a future research study or align on how to tackle users‚Äô pain points. They are a very collaborative activity, especially when teams are not co-located or lack a recurring meeting time to focus on a research project.\nGetting started\nThis handbook page covers the main steps involved to conduct a UX research workshop. If you have any questions about this process, please contact your\nUX Researcher\n. They can assist with setting up and/or leading a UX research workshop for your team.\nStep 1: Select a UX research workshop\nThere are 5 different types of UX research workshops that can be used whenever a UX Researcher is about to start or finish a project. Within this section, we define each of the workshops and provide links to FigJam templates, which can help UX Researchers with the initial setup process.\nEarly phases of research\nResearch project planning workshop:\nA process for coming to a consensus about a future research project direction and vision. This type of workshop is used to obtain stakeholder buy-in before a research effort is started. (\nFigJam board template\n)\nUsability benchmark kickoff workshop:\nSimilar to a research planning workshop, but with a focus on the main jobs to be done (JTBD) statements, user tasks, recruiting criteria, research questions, and metrics for an upcoming benchmarking study. (\nFigJam board template\n)\nLate phases of research\nResearch recommendations alignment workshop:\nA process for coming to a consensus with a Product team on which user pain points, identified through the research, the team should fix and how to fix them. This type of workshop helps to eliminate any surprises in a final research report since recommendations are discussed and agreed upon ahead of time by the team. (\nFigJam board template for async based workshop\n; (\nFigJam board template for sync based workshop\n))\nResearch retrospective workshop:\nAn open dialog between UX Researchers and/or stakeholders that is used to reflect on the positives and negatives of a research project. Also, this workshop is used to identify areas of improvement and action items for future related projects. (\nFigJam board template\n)\nResearch summary workshop:\nA way to collaboratively analyze research data within the team as it is obtained, so stakeholders are able to contribute to the final research output. This is used to increase stakeholder buy-in with the research findings and help reduce the amount of time spent on data analysis. This type of workshop helps to eliminate any surprises in a final research report since recommendations are discussed and agreed upon ahead of time by the team. (\nFigJam board template\n)\nUsability Benchmark recommendations alignment workshop:\nAfter running a\nUsability Benchmark\nthis is a process for running a recommendations alignment workshop with your stakeholders. (\nFigJam board template\n)\nIf the UX Researcher determines a UX research workshop would be best for their project, they should allocate approximately\n1 week\nof setup time for a workshop. The following sections highlight the main aspects to consider ahead of time.\nStep 2: Choose between async or sync workshops\nAt GitLab, we lean towards\nasync communication by default\n, so we recommend utilizing async workshops whenever possible. However, there are some situations when sync workshops may work better for your use case. The table below highlights some of the main differences between async and sync workshops.\nPros of async workshops\nAllows more attendees to contribute across a variety of timezones since there is no set meeting time.\nProvides attendees the flexibility to complete the workshop tasks on their own time.\nWorkshop tasks are broken up into smaller more manageable chunks instead of having to be completed all at once.\nPros of sync workshops\nAllows attendees to have open discussions and get questions answered in real time.\nWorkshop tasks can be completed in a faster time frame since everything is condensed into one or a few large scale meetings.\nStep 3: Determine time needed to complete workshops\nAsync workshops\nAny async tasks assigned to attendees should include a clear due date with ample time to complete. In most cases,\n1-2\nweeks of notice should suffice. There will be times where a due date conflicts with an event (e.g., company or country holiday, milestone deadline, etc.). When messaging the attendees, be open to feedback about the proposed due date and be willing to compromise to ensure greater overall participation.\nSync workshops\nThe length of a sync workshop depends on the size and scope of the effort. UX Researchers can estimate the amount of time needed in general by thinking through how long the individual workshop tasks should take. Since there will often be group discussions happening during a sync workshop, it is better to overestimate the amount of time allotted to each task, so UX Researchers don‚Äôt end up rushing through their planned agenda.\nWhen sync workshops are expected to last longer than\n2 hours\n, UX Researchers need to include ample breaks or consider splitting up the workshop across multiple days to avoid burning out their attendees. It is important that attendees are able to stay focused in the workshop. By limiting what you ask attendees to accomplish in a single sync session, UX Researchers will get a higher quality of output from them.\nStep 4: Identify list of workshop attendees\nUX Researchers need to ensure that they are being inclusive of any team members who can assist with conducting the research and implementing changes from the uncovered actionable insights. The following roles should be considered when setting up a new research workshop:\nProduct Managers\nProduct Designers\nEngineering Managers\nFrontend Engineers\nBackend Engineers\nUX Researchers who support other teams (if applicable)\nUX Research Managers (if applicable)\nIf UX Researchers are unsure about who to invite to the workshop, they can ask the team‚Äôs Product Manager or their UX Research Manager for guidance.\nStep 5: Provide workshop materials\nWhen setting up a research workshop, attendees need to have context about what they are being asked to do, so they can understand how they can best support the effort. UX Researchers should consider providing various resources and giving explicit pre-work upfront to attendees, so they can start the workshop feeling fully prepared. The list below can be used to advise on what kinds of resources or pre-work to include:\nResearch report\nResearch issue/epic\nHighlight reels of relevant research clips (ex: usability feedback, participant interviews) contained within Dovetail\nFigJam board with instructions\nYouTube video(s) with instructions\nAt GitLab, we lean towards overcommunication to ensure that attendees are aware of the upcoming workshop. Thus, we encourage you to share resources and pre-work in multiple applications (for example: Slack, GitLab, Google Calendar), so attendees do not miss any details about the workshop.\nAsync workshop kickoff message example\nSync workshop kickoff message example\nMake the FigJam board available to team members\nThis\nhandbook page\nhas information on how to set the appropriate level of access for your FigJam boards.\nStep 6: Create and share workshop outcomes\nWhen the workshop is complete, the UX Researcher should review the FigJam board to determine if there is some synthesis required before communicating any final outcomes. In most cases, there will be some additional analysis needed to identify themes or reorganize the workshop data into a final state.\nFrom there, the UX Researcher can broadly share the outcome of the workshop with attendees and other interested teams. It is recommended to communicate outcomes through GitLab issue comments and relevant Slack channels (#UX_Research_Reports, #Product, #UX).\nSome types of workshop outcomes include:\nActionable insight issues\nCompleted FigJam board\nSummary of insights or learnings\nRetrospective issue threads\nVideo recordings of workshops (sync workshops only)\nAsync workshop outcome message example\nSync workshop outcome message example\nLast modified April 9, 2025:\nUpdating the UXR page on how we operates (\nbd1ab4c5\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1392}
{"doc_id": "cf251ae3495cdb98", "url": "https://handbook.gitlab.com/handbook/customer-success/csm/segment/cse", "title": "CSEs | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nCustomer Success Management Handbook\nCustomer Success Teams\nCSEs\nView the\nCSM Handbook homepage\nfor additional CSM-related handbook pages.\nOverview\nAt GitLab, we take customer success seriously, and our Customer Success Engineer (CSE) team plays a pivotal role in ensuring our global customer base receives unparalleled support and assistance throughout their journey with us. As a team, we oversee key processes (listed below) that are designed to empower our customers, enable our sales counterparts, and drive overall customer satisfaction. This aligns perfectly with the common pattern of being customer centric across our company strategy.\n1.\nCustomer Enablement Webinar Program\n:\nInformative and interactive webinars for customers.\nEmpowers customers with GitLab knowledge and skills.\nLive Q&A session providing immediate answers to customer questions.\n2.\nCustomer Enablement Hands-on Lab Program\n:\nHelp customers gain practical experience with GitLab‚Äôs features.\nInteractive sessions with Live Q&A.\nEnhances adoption, productivity, and business goals.\nDirect interaction with CSEs fostering trust and collaboration.\n3.\nPooled CSE Model:\nCollaboration with Account Executives and Renewal Manager on how the customer is adopting the platform, including any potential risks or areas for improvement.\nOffers technical expertise and support for high-risk or expansion accounts.\nEnsures top-tier attention, leading to retention and expansion.\nDrives ultimate customer success.\n4.\nAutomated Email Campaign Process:\nTimely automated emails at key customer lifecycle points.\nProvides valuable insights, tips, and resources.\nSupports customer success and keeps customers engaged.\nEnhances communication and customer satisfaction.\nEmail Content - GitLab Internal Only\nCSE Operating Rhythm\nThe\nCSE operating rhythm\noutlines procedures CSEs use to engage with customers as well as how account owners can request CSE engagement outside of the normal operating rhythm during the customer lifecycle.\nFor the ARR thresholds for the CSE customer segment please reference this Wiki page\n(GitLab Internal).\nThe\nCSE DCI matrix\nprovided below is designed to serve as a guiding framework to improve collaboration across teams. Please note that this is applicable only to accounts interacting with a CSE. For accounts managed by a CSM or CSA, refer to the\nCSMA‚Äôs DCI\non Rules of Engagement.\nJourney Stage: Pre-Sales & Alignment\nActivities\nTasks\nSupport\nExecutive Sponsor\nProduct and Engineering\nIdentify Tech Champion(s)\nDefine and engage key user personas for solution tailoring.\nSales to Customer Success (CS) Handoff\nEnsure detailed information transfer from sales to CS for seamless transition.\nJourney Stage: Onboard\nActivities\nTasks\nSupport\nExecutive Sponsor\nProduct and Engineering\nGeneral Advice for GitLab Setup and features implementation\nAs part of the onboarding campaign, an automatic post-onboarding email is sent by Gainsight. The customer can book a call with a CSE to go through their setup and needs.\nTechnical Integration and Setup Support\nProvide direct assistance setting up GitLab (for example, architecture and deployment strategies) to fit customers‚Äô needs and goals.\nJourney Stage: Enable\nActivities\nTasks\nSupport\nExecutive Sponsor\nProduct and Engineering\n1:1 Engagement with the customer, triggered by AE/RM, depending on the needs from the customer\nTransactional engagement between the customer and the CSE to discuss a specific topic, which should be clearly defined by the AE/RM before the meeting with the customer.\nConduct 1:N Workshops and Webinars focused on customer enablement\nOrganized workshops and webinar sessions hosted for different customers aiming to enable and help users with key product topics.\nBreak‚Äôn‚Äôfix scenarios where there is a bug/the platform not behaving correctly\nCases where the customer expects someone to troubleshoot a bug or help with a specific feature setup. (In specific situations, the Support Engineering might communicate and inform the CSE about the support ticket)\nMeasure Primary Use Case Adoption\nTrack and analyze the adoption rate of primary use cases when associated to requests originated from Renewals Managers or Account Executives.\nComments: (C,I) - It will depend on the situation.\nJourney Stage: Expand\nActivities\nTasks\nSupport\nExecutive Sponsor\nProduct and Engineering\nExpansion Discovery\nIdentify and pursue upsell and cross-sell opportunities.\nAccount Health Checkups\nConduct regular assessments of account health to ensure ongoing customer success.\nComments: (C),(I) - It will depend on the situation.\nJourney Stage: Optimize & Renew\nActivities\nTasks\nSupport\nExecutive Sponsor\nProduct and Engineering\nBusiness Review (BR)\nConduct BRs to review successes, challenges, and future plans.\nRenewal Discussions\nInitiate early discussions about renewal, leveraging insights from the customer journey.\nMonitor Client Satisfaction\nImplement a structured feedback process to capture and act on customer insights, driving continuous improvement.\nFacilitate Product Collaboration\nClearly capture customer needs via feature requests to assist Product Managers with feature prioritisation and product enhancement.\nOngoing Risk Review\nActive management of risk in a customer account, quickly turning a customer to red when there is any potential risk of contraction or churn and frequently updating the status.\nEscalation Management\nTrigger/leading the escalation process (account escalation / STAR) where needed.\nComments: (C), (C,I) - It will depend on the situation.\nFor an additional overview of our CSE team-specific responsibilities, please reference our Job Family:\nCSE Responsibilities & Requirements\nCSE Content Handbook\nContent/1:many is a critical part of our strategy to drive customer adoption at scale across our very large book of business.  This requires dedicated resources/DRIs to execute this strategy.\nTo learn more visit our\nCSE Content Team Handbook\npage.\nCSE Content\nLearn about the Customer Success Engineering content team, catalog, creation and contribution workflows.\nCSE Direct Responsible Individuals (DRI)\nThis page is intended to list all DRIs and the CSE leadership sponsors\nCSE Operating Rhythm\nView the CSM Handbook homepage for additional CSM/CSE-related handbook pages.\nCSE Team Customer ‚Ä¶\nCSE Playbooks page\nView the CSM Handbook homepage for additional CSM/CSE-related handbook pages.\nSAFE information\nThis ‚Ä¶\nCSE Team Member Onboarding\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nOverview\nAs a Customer ‚Ä¶\nCustomer Onboarding Best Practices\nView the CSM Handbook homepage for additional CSM/CSE-related handbook pages.\nOnboarding Best ‚Ä¶\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 974}
{"doc_id": "2c277cfab3a01d01", "url": "https://handbook.gitlab.com/handbook/customer-success/csm/gainsight/c360-overview", "title": "Customer 360 | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nCustomer Success Management Handbook\nUsing Gainsight as a CSM\nCustomer 360\nAn overview of the key components in Customer 360.\nFor an overview of Gainsight, and information about how to login, please refer to the\nGainsight Overview Page\n.\nFor an overview of how CSMs use Gainsight, please refer to the\nGainsight CSM Overview Page\nCustomer 360\nThe Customer 360 (or C360) is the full overview for each individual account.\nThe left side panel of the 360 contains the following sections:\nSummary - high-level overview of the account\nAttributes - account-related details and links; for lifecycle stage definitions, see our\nvision handbook page\n, and for deployment types see our\ndefinitions\nScorecard -\nhealth score\nSuccess Plan -\nsuccess plans\nAccount Hierarchy - provides a tree of parent and child account hierarchy if applicable\nCockpit - holds all of your tasks and\nCTAs\nfor the account\nContacts - all contacts for the account (\nsynced from Salesforce\n)\nOpportunities - open opportunities (\nsynced from Salesforce\n)\nLicense Utilization -\nlicense utilization\nProduct Usage Trends -\nproduct usage trends\nProduct Usage Scorecard Calcs - shows\ncalculations\nof product usage health score\nInstance and Namespace Details -\ninstance and namespace details\nWhitespace (Use Case) -\nuse case technology tracking\nWhitespace (Use Case Visual) - visualization of inputs from above report\nWhitespace (Stages until transition) - tracks whitespace information based on stage\nWebinar Participants - gives insight into registrations / attendance for 1:many events (webinars, hands-on labs, etc)\nSurvey - holds all survey response data from Journey Orchestrator customer programs\nProgram Logs - automatically logs Journey Orchestrator customer program emails to the account history for visibility\nIf you‚Äôd like, you can toggle the ‚ÄúScrolling‚Äù button at the top of any 360 page to enable scrolling through all of the sections, rather than having to click into them.\nNote at the top of the 360 page, there is a button for\nTimeline\n, which shows all logged activities for that specific customer. Gainsight has a number of options for logging a CSM‚Äôs interactions with a customer. These are useful to build a historical record of what the customer has done with us, and the initiatives we‚Äôve worked on.\nFollowing accounts\nOn each account‚Äôs 360, there is a ‚ÄúFollow‚Äù button next to the account name. If you are assigned as a CSM to an account, there is no need to follow the account, as you will automatically receive all notifications for that account. If you are not the CSM assigned to an account, you can follow the account to receive the same notifications the CSM assigned does.\nReferenceable customers\nThe\nReferenceable Customers\nfield on the C360 Attributes section highlights\nif a customer is a Referenceable Customer\n. If a Customer is\nnot\na Referenceable Customer and they would make a great one, follow the process to Nominate a Reference Customer.\nNPS and CSAT Scores\nFor information on customer surveys and how the NPS and CSAT scores are calculated and the types of questions asked, please refer to the\nNPS and CSAT scores handbook page\n.\nLast modified November 7, 2024:\nFixing typo - Update c360-overview.md (\nc17d3d69\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 535}
{"doc_id": "f5b110dce7015620", "url": "https://handbook.gitlab.com/handbook/business-technology", "title": "IT Enterprise Applications | The GitLab Handbook", "text": "The Handbook\nIT Enterprise Applications\nAbout Us\nThe\nIT Enterprise Applications\noversees the business technology architecture and systems that power GitLab as a business entity. We ensure that the systems are fit-for-purpose, available, reliable, integrated and secure.\nWe continue to build business aligned technology to run operations, layering integration and automations to support remote work, enhance team member and customer experience, and generate value.\nOur Vision\nBe a trusted business partner providing world-class solutions and value.\nOur Mission\nProvide a stable, secure, compliant and highly integrated solutions ecosystem to empower business with technology and services that enables productivity to fuel growth of GitLab.\nStrategic Objectives & Operating Principles\nBreakdown Silos:\nAs a centralized team we talk to every part of the business. Business partners effectively connect the dots and bring people together to solve business problems.\nArchitect & Iterate:\nKnow where you are going and then work toward the goal in small parts. This is true for finance, analytics or engineering work.\nBe The Solution:\nBe empowered to drive change within our team and the company. We want to solve the most interesting problems. This leads to one of the best career experiences of our lives.\nLead With Data:\nOur teams have tier 1 metrics to define success. Create strong business processes and systems that capture data. Use the data to drive optimal business decisions across GitLab.\nGitLab for GitLab:\nWe keep to our core values and the belief that everyone can contribute, we are committed to dogfooding, actively use, give feedback and contribute to the development of the GitLab our product.\nOur Functional Structure\nArchitecture, Integrations & Automation\nG&A Systems\n&\nCRM Systems\nServices & Operations\nIT Strategy & Planning\nAOP & Budget Management\nPortfolio & Project Management\nBusiness Analysis\nEnterprise & Applications Architecture\nIntegrations\nApplication Management\nGTM, L2C, ERP, HCM\nApplication Engineering\nSystems Administration\nData & Application Reporting\nGlobal Support Services\nRPA and AI Operations\nVendor Management\nIT Compliance & Governance (SOX & Security Compliance)\nWhat do we do?\nCompany-wide Business Technology\n-\nTech Stack\nApplication EcoSystem We Support\nZuora (CPQ & Billing)\nZuora Revenue\nTesorio\nNetSuite\nCoupa\nStripe\nNavan Travel\nNavan Expense\nAvalara\nAdaptive Planning\nXactly\nMavenlink\nDocuSign eSignature\nServiceNow\nTropic\nSupplier IO\nUI Path\nWorkato\nSalesforce\nOwnbackup\nServices\nIT Strategy and Management\nIT Portfolio, Program & Project Management\nEnterprise Architecture\nDiscovery & Research\nApplication Implementations\nApplication Engineering\nIntegrations & Automation\nIT Compliance\nTraining\nOperations\nTechnical SaaS Production Support\nSystems Administration\nRelease Management\nChange Management\nInternal Major Incident Management\nBusiness Systems Analysis: Research and evaluate existing and emerging technologies to understand where new systems can be used to achieve organizational objectives and plan for how the organization will utilize systems for its gain in the near- and far-term future.\nProcurement and Technology Acquisition\nVendor & Contract Management\nNew Technology Evaluations: Evaluate, negotiate and purchase technology. Set criteria for when, others within the organization can purchase, implement and deploy technology\nDigital Transformation: The adoption of digital technologies to innovate and reimplement existing business, talent, and operating models to drive growth, business value, and improved customer experience.\nServices We Support: Finance Systems Service Desk\nNew SKU Request\nOpen a\nNew SKU issue\nusing the CM: Add_New_SKU template or CM: Add_New_PS_SKU for a Professional Services SKU.\nRetire SKU Request\nOpen a\nRetire SKU issue\nusing the CM: Retire_SKU template.\nEntApps System Configuration Change\nIf the system change is a quick change which does not require additional cross-functional alignment, scoping, or testing, and is not an output of a larger project, submit a Change Request.\nOpen a\nConfiguration Change issue\nusing the CM: Configuration Change [Generic] template.\nDepartment Change Request\nOpen a\nDepartment Change issue\nusing the CM: Department Request template.\nEntApps System Incident Log\nOpen an\nIncident issue\nusing the IM: FinSys Incident template.\nCoupa Sandbox Refresh\nOpen a\nCoupa Sandbox Refresh issue\nusing the Sandbox - Coupa Refresh template.\nNetSuite Sandbox Refresh\nOpen a\nNetSuite Sandbox Refresh issue\nusing the Sandbox - NetSuite Refresh template.\nZuora Central Sandbox Refresh\nOpen a\nZuora Central Sandbox Refresh issue\nusing the Sandbox - Zuora Central Refresh template.\nPartnerships & Collaborations with:\nData Team\n: Empower and generate business value from our data assets by using the data to drive optimal business decisions across GitLab.\nProcurement Team\nPeople Operations Systems Team\nSecurity Team\n: Conform to the established cybersecurity framework and requirements\nJoin Our Team\n-\nCurrent Job Openings\nFor Technical Support, Service Requests or General Questions:\nHelpLab -\nIT Break/Fix Request\nSlack Channels\n#\nenterprise-apps\n#\nbusiness-technology\nOther References\nQuote to Cash Documentation\nEnterprise Application Guides:\nGitLab‚Äôs Enterprise Application Guides for Finance Systems\nBusiness Technology - Tech Stack Details\nA list of tools and applications used internally at GitLab and how to access them.\nDocumentation\nThis is the landing page for Enterprise Applications policis, procedures and documentation\nEnterprise Applications READMEs\nInfrastructure Reference Links\nThis page provides helpful links and reference material for the infrastructure team.\nOrganizational Structure\nThe Enterprise Applications Team implements and supports specialized applications that support our business processes within GitLab.\nRolly\nA handy automation tool to generate status rollup issues for large projects and programs\nServices\nThis page lists down the services which IT Enterprise provides GitLab\nTech Stack Applications\nInstructions for how to access the GitLab tech stack and request updates to it\nTech Stack Guide Reference\nReference for how to create and maintain Tech Stack Guides.\nTools\nLast modified January 17, 2025:\nFix Broken PMO Link on Enterprise Applications Handbook Page (\nba05f8f0\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 914}
{"doc_id": "c6d47609edce70b6", "url": "https://handbook.gitlab.com/handbook/legal/publiccompanyresources", "title": "Corporate & Compliance Legal | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nCorporate & Compliance Legal\nThis page offers a single source related to corporate legal information.\nPlease note that all links are GitLab-internal only.\nTrading Window Status\nGitLab Team Members can view the current trading window status via the\nTrading Window Status Issue\n.\nWorking with Corporate Legal\nFor questions related to corporate matters, please review the content and materials within\nAnswerBase\n. The team will continue to update the Corporate Library.\nIf the question a team member has is not answered within\nAnswerBase\n, please open an Issue pursuant to the\nRFP Process\nInsider Trading Policy and Insider Trading Policy FAQ\nInsider Trading Policy\nInsider Trading Policy FAQ\nDesignated Insiders\nDesignated Insider Pre-Clearance Process & FAQ\nLegal Office Hours: Designated Insider Agenda & Notes\nDesignated Insider Slack Communication\nNote:\nThis was the inital communication posted to\n#designated-insiders\nDesignated Insider: Pre-Clearance Form Demo\nPolicies & Guidelines\nCompany Information\n- general information about each legal entity of the company\nCorporate Governance Guidlines\n- guidelines to assist the Board of Directors in the exercise of its governance responsibilities and serve as framework within which the Board of Directors may conduct its business\nCorporate Resources\nTemplate: Year & Quarter End and Annual Meeting Calendar\nNote: This resource is shared with specific Team Members who participate in Quarter & Annual Filings\nQuarterly Open Window and Designated Insider Process Guide\nNote: This resource is shared with Corporate, Legal Operations, Finance and Stock Adminstration Team Members who participate in Quarterly Open Window processes\nLast modified April 3, 2025:\nUpdate link to Insider Trading Policy (\n538b8a94\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 274}
{"doc_id": "44ed9d2e7e7d0df9", "url": "https://handbook.gitlab.com/handbook/company/culture/all-remote/guide/finance", "title": "Remote Guide for Finance Teams | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nAll Remote\nGitLab's Guide to All-Remote\nRemote Guide for Finance Teams\nCheck any online job board and you will find thousands of companies recruiting for finance professionals to work remotely. Like their counterparts in other parts of enterprises, CFOs and their direct managers understand the importance of recruiting the best and brightest finance professionals and then finding ways to integrate them into the company fully. On-premise finance work as the norm is today less important than a fully prepared, flexible and resilient finance team ready, willing and able to work in an all-remote way.\nCalculating sudden all-remote preparedness\nMany organizations have already discovered their finance groups can function quite well remotely. According to an\nOwl Labs survey\n, approximately 7% of finance/legal professionals work remotely. If your company had not previously dipped its toe into remote-work waters, COVID-19 ‚Äúwork from home‚Äù directives  likely required your company to  implement some or all of the following strategies:\nMove away from or fully off on-premise technology:\nThe  ability of a Finance team‚Äôs members to access what is needed remotely minimally means accessing on-premise solutions via VPN, along with being well-equipped with the commensurate equipment to have a fully functioning workstation. A heavier lift is making the move to the cloud. In times of disruption, Finance can induce a sense of calm across an organization by operating with fewer (or without) hiccups.\nGo paperless:\nSave time from having to shred. Make sure the Systems team backs everything up. Twice. You can do it. Thrust suddenly into an all-remote scenario, paper files will be your Achilles heel, as they will immediately become inaccessible if you didn‚Äôt take them with you when the doors to the office shut behind you.\nCommunication Tools:\nOrganizations that permit the use of a multitude of varying tools for collaboration to accomplish the same things‚Äîvoice, video conferencing, chat, file sharing‚Äîpermit confusion to creep in. All-remote productivity can be increased by using a finite set of company sanctioned tools. Further, a minimal set of tools ensures remote or asynchronous communication remains clear, focused and consistent, curbing loss of productivity. Minimize email for the sake of more immediate responses and feedback. Now that you‚Äôve identified the right company communication tools, use them!  Especially early on in a sudden onset all-remote environment, frequent synchronous/real-time communication is key to gauging how your coworkers or those who report to you are doing. Simply put, people handle stressful events very differently.\nFlexibility with Shifting Schedules\n:\nWith a company‚Äôs new ‚Äúeveryone at home‚Äù dynamic, an adjustment period is necessary due to the simple fact that personal and business lives are far more acutely intermingled than before. Finance teams are not immune to this and a new paradigm of shifting schedules becomes the new norm. This forces teams to prioritize tasks and deliverables. Leaders need to keep a sense of routine, but, at the same time, be flexible as the dust settles into new patterns and the team finds its new rhythm.\nTransparency\n:\nTransparency in a remote Finance team builds trust and confidence across the group.  Some highly remote companies share everything across the board to everyone, except salaries, and some even share that info as company-wide policy. The tendency is for the workforce to embrace their lane and know how they fit in the construct of the team and the business as a whole. Information and access flows much more freely within transparent organizations, democratizing access while maintaining control. It also allows team members to view each other as partners rather than pegs in a hierarchical structure. Team members need to be intentional about relationships with their  colleagues.\nAutomate:\nIf transactions, invoicing, reporting, etc. can be automated, automate it. It frees up the team to work towards greater business goals, and encourages them to expand their vision into other areas that might otherwise suffer from inattention. It enables a Finance team to stay lean and nimble and keep the team‚Äôs collective eyes on results.\nTools to make the change\nKey tools and technologies needed to make the shift from in-person to all-remote collaboration for Finance teams might include:\nSynchronous messaging tools (e.g. Slack, Microsoft Teams, IRC, etc.) to maintain velocity through real-time interaction and collaboration;\nDocument sharing (Google Drive, Box, Dropbox, etc.)\nSaaS-based accounting software solutions (ADP, Quickbooks, etc.)\nVideo conferencing (e.g. Zoom, Skype, Google Meet) for synchronous discussions with recording for later viewing by those who could not attend; and\nCloud-based planning and documentation platform (e.g.\nGitLab\n).\nChecks and balances\nIn order for a Finance team to run well after being suddenly dropped into working all-remote, it bears repeating that it‚Äôs not for everyone. Human beings are social creatures after all. Be mindful of the following pitfalls your group may encounter when making the shift, forced or not:\nLack of face-to-face supervision means team members may not speak up as quickly when they encounter a challenge or block. Check in more regularly with your supervisor and those who report to you - at least until your team has its rhythm down. Managers who go ‚Äúinvisible‚Äù run the risk of having their employees feel that the manager is out of touch with employee needs.\nWithout routine communication, especially if coupled with a lack of access to information, team members lower their willingness to give others the benefit of the doubt. Taking extra time to listen rather than just talking at other team members is really important to keep the business culture buoyed and to ensure that top priorities are handled first.\nOn a more practical note, human and technical errors with the tools utilized for working remotely may be a real challenge resulting in unnecessary delays. This is especially a challenge if an employee is not technically inclined. Even the most well-intentioned shifts in the right direction to working productively while remote can backfire or may not have been fully analyzed. Some key automation may not exist yet or that paperwork you really need may not have been scanned into the system.\nExperiment: Request daily feedback from Finance team members on new and better ways to communicate, collaborate and increase the velocity of project work. While feedback cycles may slow initially when going all remote, finance team leaders should implement and demand robust feedback loops.\nBlock time: In all-remote environments, finance team members will likely rely on email and chat more than before. As such, it‚Äôs important to allow finance teams to block ‚Äúwork time‚Äù to avoid more frequent interruptions. Example: No emails or phone calls between 10:30 am and 2:30 pm.\nDocument everything\n:\nIn a traditional environment, documentation becomes second nature. In a suddenly all-remote environment, the need to document and over-communicate everything becomes paramount.\nGet together\n:\nAn all-remote work environment does not mean an always-remote work environment. It‚Äôs important for finance team members to interact with each other in person, even if only annually. Find ways to host a retreat for team members for this purpose.\nThe upside of disruption\nAs companies evolve to being able to shift to an all-remote setting on the fly, naturally their outlook about conducting business more routinely in a remote setting will also change. With that comes a number of great perks to their bottom line:\nTalent Acquisition and hiring:\nRemote work environments open up greater access to talent because there are no longer any geographical restraints to hiring. Additionally, not only does the talent pool get expanded because of lack of geographical constraints, but also because today‚Äôs workforce actively seeks more flexible work environments Consequently and especially if a company is based in a high-cost urban location, hires can be made for significantly less money than local talent would require.\nWorkdays extend across time zones:\nThe company can gain better coverage/distribution so work happens more consistently throughout the day, rather than being focused into a tighter window of hours.\nInsulation against localized failures:\nFurthermore, a company‚Äôs ability to weather localized infrastructure failures like power outages, internet disruptions, natural disasters, etc. and business continuity plans improve if the workforce is dispersed geographically.\nLower overhead:\nMore remote workers means less need to maintain commercial office space lowering overhead costs.\nBottom line\nThis guide will help Finance teams discover a natural rhythm to operating in a suddenly remote way. This rhythm will allow teams to identify key priorities, manage them effectively, and learn from their implementation in an iterative fashion, further informing the next priority tier as appropriate. As in any professional environment, open communications about learning as you make your way is essential.\nReturn to the main\nall-remote page\n.\nLast modified April 10, 2025:\nFix broken links (\n7fbeab40\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1448}
{"doc_id": "bd26664cee962fba", "url": "https://handbook.gitlab.com/handbook/marketing/team-member-social-media-policy", "title": "Team Member Social Media Policy | The GitLab Handbook", "text": "The Handbook\nMarketing\nTeam Member Social Media Policy\nThis is the GitLab employee social media policy\nIntroduction\nWe recognize that many team members engage in social media activity. This policy establishes a set of rules and guidelines for any activity and participation on social media channels when commenting about GitLab or GitLab-related topics.\nThese rules are intended to be adaptable to the changes in technology and norms of online communication and behavior and may be amended by GitLab at any time, for any reason, without notice to team members. However, we will work to be as transparent as possible when communicating changes, what those changes are, and when they are expected to go into effect.\nThis policy also applies to social media activity when on or off duty, while using the Company‚Äôs or personal electronic resources, and whether the team member posts anonymously or using a pseudonym.\nBe diligent, and if it‚Äôs questionable, don‚Äôt say it. You are personally responsible for the social posts, likes and shares, and replies you post on social media while representing GitLab. Everything you publish is publicly viewable and will be available for a long time, even if redacted. Remember that you represent GitLab and our culture. When commenting on posts, please keep in mind: ‚ÄúDon‚Äôt argue but represent‚Äù.\nSocial Media Policy for Team Members\nYou‚Äôll be asked to confirm reading this section during your onboarding to the company. We‚Äôll ask everyone to review and sign off on review in partnership with legal for existing employees.\nIf you‚Äôve been identified as a spokesperson for the company or a specific function within GitLab, you may have unique circumstances. Please refer to your team guidelines or the communications team for more information about your work as a spokesperson and the social media policy.\nDefinition of social media\nThe GitLab Social Media policy for team members applies to traditional social media channels, like Twitter, LinkedIn, Facebook, and Instagram, as well as ‚Äúsocial-like‚Äù sites, like YouTube, HackerNews, Reddit, blogs (on the GitLab website, Medium, or any other online journals or diaries), message boards, forums (including the GitLab Forum, private groups or forums on public sites like Facebook Groups), and private/direct messages on public social media channels (Twitter DMs, Instagram Directs, etc.).\nThe term ‚Äúsocial media‚Äù applies to any online technology in use now or in the future that enables you to send or receive information and communicate or interact with others. Any site where you can share a post or comment on a post would be considered a social media website for the purposes of this policy.\nExclusions for anonymous review sites\nThis policy is not intended to limit team members from sharing their feedback or reviews of their experiences at GitLab on sites like Glassdoor, Fishbowl, Indeed, or similar sites. While we encourage you to share feedback with your manager and the people ops team, we celebrate our value of transparency and welcome feedback from team members on these sites, as long as the feedback follows our\nSAFE Framework\n.\nAll other GitLab codes of conduct and policies also apply to our social media policy\nPlease adhere to the\nCommunity Code of Conduct\n,\nAnti-Harrassment Policy\n, which includes sexual harrassment and discrimination policies, and our\nCode of Business Conduct and Ethics\n. These policies all apply to team member behavior within social media and in public online spaces.\nSocial Media sometimes generates press and media attention or legal questions\nPlease refer all inquires to the Communications Team in the #external-comms Slack channel\nWhat you should do\nClick each recommendation below for more details\nDo disclose that you're a team member\nIf you talk about work-related matters within your job responsibility area, you must disclose your affiliation with GitLab. If you have a vested interest in something you're posting on social, point it out. You can identify yourself as a team member in your profile bio, list GitLab as your employer, or mention that you're a team member in the post itself. You can also add #LifeAtGitLab to the end of your social posts about GitLab-related topics. How you choose to disclose is up to you.\nDo state that it's your opinion\nWhen commenting\non\nthe business, you're not commenting\nfor\nthe business. Unless authorized to speak on behalf of GitLab and through comms training. However, don't add your opinion to content from a news source that includes financial figures or forecasts. If you would like to share content that includes financial figures or a forecast, please only share it without adding your commentary. Not sure if you should share? Ask in the #safe Slack channel.\nDo protect yourself\nConsider what information you're sharing online and how it can be used to identify you. Everyone has a different level of privacy they want to abide by, have you thought about yours? Some of the things folks opt-out of to protect their privacy include: not tagging specific locations in posts while you're still on-site, not including phone numbers or email addresses in plain text because bots sweep for contact info, and not showing the faces of their children on public channels. You aren't required to follow any of these specifics, but consider what kind of information will be available to the public when publishing on your social media profiles.\nDo act responsibly and ethically\nDon't misrepresent yourself. If you're not a director in your role, don't say you are. Don't imply that you're a member of a team if you're not. Share your thoughts, but disclose your role. Furthermore,\nour team members are bound by the same code of conduct we provide to the community\n.\nDo try to live our values\nEasier said than done, but consider our values when engaging online. The same space and respect we grant each other is needed with strangers on social media.\nDo share GitLab content that is already published\nIf it's written in a blog, presented at a public conference, or simply on GitLab's website, it's publicly available to share on social media. GitLab's social media advocacy tool will have a lot of preapproved content, including links, images, and copy, available to all team members. Anything already in the public domain, posted in the #newswire Slack channel, or in the company social media advocacy tool can and should be shared freely. Some items in the #newswire Slack channel may say \"shareable internal only\", so please do not share those stories on social media.\nExamples of what you should, and are encouraged, to share on social media\nGitLab\nblogs\nand\npress releases\nPositive news media that mentions GitLab and is shared in the #newswire Slack channel (team member adds no commentary/copy to the post) or is available to share in the social media advocacy tool (with commentary/copy to share)\nIndustry reports that are publicly available and are ungated\nVideos from either our\nbrand\nor\nUnfiltered\nYouTube Channels\nThird-party articles that don‚Äôt bash competitors (mentioning them or comparing GitLab and competitors is fine)\nRetweeting or sharing GitLab brand social channel posts from\nTwitter\n,\nLinkedIn\n,\nFacebook\n, or\nInstagram\nAll of the above from our eco and alliance partners\nItems that are not connected to your job or GitLab at all! Social Media is best when you bring your true-self to the mix. DevOps isn‚Äôt the only thing you‚Äôre interested in, so consider posting about other passions and topics.\nLearn more about what is encouraged and how GitLab helps to enable you to become great at using social media on our team member advocacy page.\nIt‚Äôs your job to protect GitLab, our customers, and our team members\nWhether you‚Äôre an intern or our CEO, protecting the GitLab brand, the company, and our entire team is a part of your job description.\nYou can protect GitLab by not sharing the following data with the public on your social media profiles\nClick each recommendation below for more details\nDon't speculate or add forward-looking statements\nForward-looking statements predict, project, or use future events as expectations or possibilities. Team Members mustn't speculate or add forward-looking statements to their opinions written on social media. Forward-looking statements could include company valuation, details on customer volume, subscription growth, and more. This would include forecasting, or when data is presented to argue for or against future trends. Sometimes an article from a news source will use speculative information in their story. While this is okay to share, it is not okay to share your commentary with speculative information. Not sure if it's public? Ask in the #safe Slack channel or\nreview the SAFE handbook page\n.\nSome language indicators that you're talking about forward-looking statements would be using one of the following words: \"will,\" \"may,\" \"should,\" \"expects,\" \"intends,\" \"plans,\" \"aims,\" \"anticipates,\" \"believes,\" \"estimates,\" \"predicts,\" \"potential,\" \"looking to,\" or \"continue,\".\nDon't share customer or Team Member personal information\nTeam Members are prohibited from using social media to post or display comments about co-workers or supervisors/managers of GitLab that are knowingly false, vulgar, obscene, threatening, intimidating, disparages GitLab‚Äôs products or services, depicts the team member engaging in conduct that is unlawful or in violation of GitLab‚Äôs workplace policies against workplace violence or discrimination and harassment based on any protected status under federal, state or local law. Allow the team member(s) to own the decision on what is and isn‚Äôt public about them.\nFor customers, any\ncustomer with a published case study\nis available to share publicly. If you would like to share information about a customer please reach out to the customer reference team first before sharing any content on social media.\nDon't bash competitors\nWhile sharing your opinion is a critical part of being authentic on social media, it's equally important to limit overly negative responses to competitor posts. We don't like trolls, and neither do our competitors. Providing constructive feedback is read very differently than trolling. Trolling occurs when you respond to social media posts with intentionally provocative or offensive messages.\nDon't share legal information\nNever share anything to do with a legal issue, legal case, or attorneys without first checking with legal in the #legal Slack channel. Note, that if you're looking to connect on whether or not you should publicly disclose legal issues, the answer is probably a no.\nDon't share confidential information\nDon't share information that is considered personal or GitLab proprietary confidential. If it's related to work in an issue, consider reviewing whether or not the issue was made confidential. It is inappropriate to use or disclose confidential personal information about another individual or use or disclose GitLab's proprietary confidential information in any form of social media.\nConfidential personal information refers to information that could be used to commit identity theft such as an individual's Social Security Number, financial account numbers, driver's license number or personal medical information (including family medical history).\nGitLab's proprietary confidential information refers to internal information regarding GitLab's finances, future business performance and business plans, business and brand strategies and information which is or relates to GitLab's trade secrets.\nDon't use third-party materials (including images, videos, or text) without permission from the owner\nImages, videos, and text, even if posted publicly on the internet, are copyright-protected materials and should not be used without the permission of the owner.\nIf you're unable to obtain permission from the owner, hyperlink to the relevant material rather than copying it.\nConsider using a source of permissively-licensed images, like\nunsplash.com\n, which provides free to use materials which\ndo not require attribution\n.\nYou can (and are encouraged to)share GitLab-made assets even if these contain third-party materials\nIf you're unsure what's permissible, reach out to the #legal Slack channel.\nDon't create images with, or manipulate, third-party logos without the permission of the owner\nLogos (including those indicating companies, and products and services) are registered trademarks. You must obtain the consent of the owner before using, for any purpose, any third-party logo.\nIf you're wanting to share content from GitLab's website or social channels and it has logos or trademarks from other companies, this is okay to use. The various marketing teams at GitLab are responsibile for confirming the company's use of these logos and trademarks and sharing links or images that GitLab produced does not violate this policy.\nYou can refer to other companies, or products and services, by name (without using a logo) provided that (i) the company, product or service in question could not easily be identified without using its name; and (ii) your use does not imply endorsement by, or affiliation with, the trademark owner.\nYou can (and are encouraged to)share GitLab-made assets even if these contain third-party logos\nIf you're unsure what's permissible, reach out to the #legal Slack channel.\nDon't use social media, blogs, or other digital channels for GitLab-related communications with other team members\nWhile GitLab is a transparent company, we like to keep negative feedback 1:1. Team members should not discuss work-related situations in public forums. For all communications that can be public-facing, please use issues and epics and mark them as not confidential.\nConnecting with Team Members on Social Media\nIn case you want to connect with fellow team members of GitLab on social media, you have to keep it professional. With this communication, we would like you to consider GitLab‚Äôs\nCommunication Guidelines\nat all times. Aligned with our\nAnti-Harassment Policy\n, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times.\nMimicking the GitLab brand\nKeep your identity clear on social media channels by not using the GitLab logo as your profile image, not adding GitLab to your @handle, and not adding the company name to your display names.\nUpon first glance of your social media profile, there should be immense clarity that you are a team member of GitLab and not GitLab the company. Use common sense when selecting pictures and names to use. We‚Äôll always work to get profile names and visuals updated to reflect who runs the account. If the corporate marketing team comes across profiles that don‚Äôt respond to these requests, we will report them for impersonating our brand.\nUnauthorized GitLab brand social media accounts\nAs a Team Member of GitLab, you aren‚Äôt authorized to create company/brand social media profiles to use for your work. If promoting content should come from the company, you‚Äôll need to\nopen a request issue with the organic social team\n. If the corporate marketing team encounters unauthorized profiles, they will be treated as external threats and reported for impersonation. There is no formal method for requesting new brand channels, nor is there an outline for managing to do so. It‚Äôs best to use personally identified social media profiles to share your posts.\nContests or sweepstakes on your social media profiles\nAs part of your role at GitLab, you may be responsible for a contest or a sweepstakes with social media elements. It‚Äôs important to follow legal guidelines. Essentially, as a representative of GitLab, if you‚Äôre promoting the contest on your social media channels, it will need to follow the same rules as what the GitLab brand channels will need to follow. You can\nlearn more about legal and contests in the handbook here\n.\nFollow website terms of use\nMost social media websites/services have rules concerning the use of and activity conducted on their sites. These are sometimes referred to as ‚ÄúTerms of Use.‚Äù Team Members must follow the established terms and conditions of use that have been established by the website, social media network, or channel and not do anything that would violate those rules.\nRamifications of not following the social media policy\nIf the company finds any statements or claims that are false or misleading, or we discover an activity that does not follow the policy, we will contact you to correct the situation.\nIf you are consistently disregarding the social media policy, especially if you fail to disclose your relationship to GitLab, make false or misleading statements about GitLab or our products and services, GitLab retains the right to discipline, up to termination of employment with anyone that does not comply with this policy.\nConflicts with local laws\nIn the event there is any conflict between this social media policy and local laws and/or regulations for your region, the local laws and/or regulations prevail over our policy and must be followed. However, if the conflict is simply because of practice or customs varying between regions, our social media policy must still be followed.\nAny conduct which is impermissible under the law if expressed in any other form or forum is also impermissible if expressed through social media.\nSee section below for location-specific details that are necessary to review.\nLocation-specific social media policy details\nUnited States\nConfidential proprietary information does not include information lawfully acquired by non-management employees about wages, hours or other terms and conditions of employment, if used for purposes protected by Section 7 of the National Labor Relations Act such as joining or forming a union, engaging in collective bargaining, or engaging in other concerted activity for their mutual aid or protection.\nGitLab will not enforce the social media policy in a manner that would interfere with team members‚Äô rights under the National Labor Relations Act to discuss the terms and conditions of employment.\nUnited Kingdom\nYou may not use data obtained in the course of your employment with GitLab in any way which breaches the provisions of the Data Protection Act 1998.\nTransform this policy into action with a social media training and certification\nTake this policy and turn it into a social media certification in less than 45 minutes with the\nsocial media 101 training and certification\n. You‚Äôll find details on the training and what to expect\nhere\n.\nLast modified November 26, 2024:\nFix broken external links (\nbc83f2be\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2969}
{"doc_id": "8d6bb15c0c4045e5", "url": "https://about.gitlab.com/community/contribute", "title": "Contribute to GitLab | GitLab", "text": "Contribute to GitLab\nJoin 4,000+ contributors in GitLab√¢¬Ä¬ôs open source community and co-create the platform millions of people use to deliver software faster.\nStart onboarding\nGet help\nWhy Contribute?\nCo-Create GitLab\nLearn how GitLab's customers are working directly with product and engineering teams to propose and contribute new features. Improve the software you use every day.\nLearn more\nDeveloper Experience\nOpen source contributions build experience working with developers and product teams. Highlight your contributions and GitLab achievements on social media or in your resume.\nLearn more\nJoin a Community\nWith 4,000+ contributors, GitLab√¢¬Ä¬ôs open source community can help you with pair programming sessions, community events and chat support. Come say hello in the GitLab Community Discord!\nLearn more\nAchievements\nOnboard as a first-time contributor, then level up to achieve badges, GitLab swag, and organizational awards. Contribute your way into the GitLab Hall of Fame!\nLearn more\nTutorial: Make a GitLab Contribution\nLearn how to make code changes and create a merge request\nOnboard with GitLab's open source community and choose your development environment. Select between in-browser remote options or configure the GitLab Development Kit (GDK) for full local development.\nStart contributing\nCommunity Events\nHackathon\nClimb the Hackathon leaderboard alongside the GitLab community to contribute, learn, and win exciting prizes!\nLearn more\nPairing Sessions\nJoin our weekly community pairing sessions to meet community members, learn a new area of GitLab or work on a contribution.\nLearn more\nLivestreams & Recordings\nCheck out livestreams and recordings of pairing sessions and other events on the Community Coders for GitLab YouTube channel.\nLearn more\nCI/CD Components Community Office Hours\nMeet the CI Components team and learn how to create your own components in the CI/CD Catalog.\nLearn more\nGet Help.\nHow to find help contributing to GitLab:\nType\n@gitlab-bot help\nin a comment on a merge request or issue.\nJoin the\nGitLab Community Discord\nand ask for help in the\n#contribute\nchannel.\nEmail the Contributor Success team at\n[email¬†protected]\n.\nContribution Guidelines\nDevelopment\nAdd features, fix bugs, help with reviews, and more. You don't need to know how to write code to contribute.\nLearn more\nDocumentation\nFrom fixing typos to rewriting pages, anyone can contribute to the GitLab documentation.\nLearn more\nTranslation\nJoin the 1,500+ community members who translate GitLab into more than 35 languages.\nLearn more\nUX Design\nHelp make GitLab easy to use for a diverse group of people. Propose features, fix design bugs, and enhance code.\nLearn more\nProject Templates\nCreate default templates, repositories, and CI/CD pipeline definitions. Help others around the world get started more quickly.\nLearn more\nEveryone Can Contribute\nIt is GitLab's mission to make it so that everyone can contribute.\nDiversity, Inclusion, and Belonging\nis one of GitLab's values and we want to create a welcoming community for every contributor. GitLab earned a\nCHAOSS DEI Badge\nfor our\nDiversity, Equity, and Inclusion Project Statement\n, which documents our commitment to DEI within our open source community.\nPlease visit our\nCode of Conduct page\nto learn more about our pledge and standards for an open and welcoming environment.\nAll contributions to GitLab are subject to the\nDCO or a CLA\n.\n4,039+ Contributors\nStart contributing", "num_words": 528}
{"doc_id": "730628eeaa71fb32", "url": "https://handbook.gitlab.com/handbook/engineering/open-source", "title": "Open Source at GitLab | The GitLab Handbook", "text": "The Handbook\nEngineering\nOpen Source at GitLab\nWe believe in Open Source\nAs a company, GitLab is dedicated to open source. Not only do we believe in it, but we use it, and we give back to it. Not just through GitLab, but through contributions to other open source projects.\nThe purpose of this page is to document how a GitLab employee can:\nCreate an open source project on behalf of GitLab\nContribute to a third-party open source project on behalf of GitLab\nUse a third-party open source code in a GitLab‚Äôs project\nGrowth Strategy\nAs an open source project, we want to stay healthy and be open for growth, but also ready to accommodate a 10x factor of\nour community. In order to achieve that, we‚Äôve\noutlined a strategy\nthat is a collaboration between multiple departments.\nGeneral notes\nGitLab Code of Business Conduct and Ethics\nCreating an open source project\nSee\nCreating a new project\nfor the instructions.\nContributing to a third-party project on behalf of GitLab\nContributor License Agreements (CLAs)\nIf you‚Äôre contributing to an open source project on behalf of GitLab, you may be required to enter into a CLA.\nIn accordance with the\nAuthorization Matrix Policy\n, Legal approval is required in order for you to enter into a CLA on behalf of GitLab.\nVisit the\nLegal & Corporate Affairs Product handbook\nfor further information on this process.\nContributing to a project on GitHub\nIf your GitHub account‚Äôs primary email is not your @gitlab.com email, you can add it as an additional address. No need to create a separate account.\nFork the repository you want to contribute to into your account\nFollow the usual\npull request flow\n.\nIn the future, we might have a single organization for forks. That will allow us to track various metrics about contributions made by GitLab employees.\nIf a project does not have a license\nGitLab allows contribution to open source licensed projects. If the project to you which you wish to contribute does not have a license:\nHold off making any contributions to the project until a license is in place.\nOpen an issue in the project (or contact the maintainers through other documented means).\nRequest the project adds an appropriate license citing an inability to contribute to unlicensed code.\nPotentially refer to licenses used in other projects in the same group/organization as an easy reference for the maintainer.\nIf an open source license is added, you may then contribute to the project.\nUsing open source software\nThe guidance for using open source software, including details of which licenses are pre-approved for use, is now available in the\nLegal & Corporate Affairs handbook\n.\nUsing forks in your code\nAvoid using forked code and try to contribute your change upstream.\nIt‚Äôs typical for forks to fall far behind the upstream repository and such dependencies become a source of pain:\nRebasing the branch may become non-trivial and it‚Äôd become hard to bring such dependency up to date.\nSome other library in your project might depend on the original version, creating a\ndiamond dependency problem\n.\nThere may be good reasons to create a fork:\nTo fix a security issue that is not being fixed upstream fast enough if it‚Äôs affecting us or our customers\nAny other reasons? Talk to your peers and use your best judgement.\nIf you decide to create a fork, make sure you open an issue that:\nDescribes the reason for the fork to exist\nLinks to the MR(s) where the fork was introduced as a dependency\nLinks to any relevant issues in the upstream project. If the issue was not reported already, make sure you report it in the project‚Äôs issue tracker. This is important because if the project‚Äôs maintainers don‚Äôt know about it they will not fix it\nLinks to any opened MRs/PRs to fix the issue upstream\nDescribes the remediation work needed to start using the upstream code again\nIf it‚Äôs not just changes in the forked code, but also some modifications in your code to use the fork, consider putting a TODO and a link to this issue next to that code in a comment\nGPL Cooperation Commitment\nVisit the\nLegal & Corporate Affairs Product handbook\nfor further information on this.\nOpen Source Growth Strategy\nStrategy We will be executing in 5 key areas in support of the company‚Äôs broader ‚Ä¶\nLast modified June 13, 2025:\nAdd section around contributing to unlicensed code/projects (\n8322846b\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 750}
{"doc_id": "b2b972e3249f2335", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/education-services/gitbasicshandsonlab2", "title": "GitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nGitLab Professional Education Services\nGitLab with Git Fundamentals - Hands-on Lab: Work With Git Locally\nThis Hands-on Guide walks you through using Git commands to work with both a remote and local repository.\nEstimated time to complete: 45 minutes\nObjectives\nIn this lab you will practice using a repository on your local computer and learning about the following concepts:\ncloning a repository\ncreating, using, and merging a branch\nediting and committing a file\npushing and pulling changes to and from a remote repository.\nPlease take time to understand any code that you are asked to copy and paste in any lab. Ask your instructor to explain any code that‚Äôs not clear.\nMany of the Git commands used in this lab are summarized in GitLab‚Äôs helpful\ngit cheat sheet\n. This lab will require you to be able to use your local computer to have SSH access to the internet. Please make sure your machine has the required permissions.\nTask A. Verify that Git is installed locally\nOpen a terminal on your computer and type this command:\ngit version\nIf the output prints a version number, Git is installed. If the command throws an error, see the\ndocumentation\nfor installing Git.\nTask B. Generate an SSH key\nGitLab uses the SSH protocol to securely communicate with Git. When you use SSH keys to authenticate to the GitLab remote server, you don‚Äôt need to supply your username and password each time. You can learn more in the\ndocumentation\n.\nWe will use OpenSSH client, which comes pre-installed on GNU/Linux, macOS, and Windows 10. To check your current version run the following command in your terminal or Powershell:\nssh -V\nCreate a public and private key pair by running this command in your terminal or PowerShell.\nssh-keygen -t ed25519\nThe first prompt will ask you where you would like to save your SSH key. Take note of the location that the command is saving the key to. By default, the path will be\n~/.ssh\n. Press\nEnter\nto accept the default key location and name.\nIf preferred, you can also provide a custom file path and key name for this step.\nThe second prompt will ask you to set a password for the key file. Press\nEnter\nto use a blank passphrase for the local key file.\nTo keep the steps simple, we are opting to not set a password for the key file. Blank passphrases are not generally considered best practices. You can set a passphrase if desired.\nTask C. Add an SSH key to your GitLab profile\nOpen your browser to the project that you created in Lab 1.\nClick your user avatar in the top left corner.\nFrom the dropdown menu, click\nEdit profile\n.\nIn the left-hand navigation pane, click\nSSH Keys\n.\nOpen your existing terminal window. Navigate to the directory that you saved the SSH key in by using\ncd ~/.ssh\nand print a list of all files in that directory by using the\nls\ncommand, as seen below.\ncd\n~/.ssh\nls\nIn Windows:\ncd\n~\n\\.\nssh\nBy default, the key will be saved in the\n~/.ssh\ndirectory. If you saved the key to a different directory, you will need to\ncd\nto that directory instead.\nYou should see two key files: a public key (ex.\nid_ed25519.pub\n) and a private key (ex.\nid_ed25519\n). The public key ends with\n.pub\nand is what you need to share with GitLab.\nSecurity Warning:\nYou should never share your private key or paste it into any website form field. Only your public key should be shared.\nDisplay the contents of your public key by using the command as seen below.\ncat id_ed25519.pub\nIf you used a different file name, you command will be\ncat <filename>.pub\nCopy the content of the file displayed to your screen to your clipboard.\nIn your web browser in the GitLab Web UI, click the\nAdd new key\nbutton.\nPaste the public key contents into the\nKey\nfield.\nType any title you want in the\nTitle\nfield (ex. your computer‚Äôs hostname), and click\nAdd key\n.\nTip:\nTo easily identify where your key is used at, you should use your computer‚Äôs hostname or description (ex.\nalextanuki-m2-mac\n) if you don‚Äôt have a different preferred naming schema.\nFor\nUsage type\n, make sure\nAuthentication & Signing\nis selected\nThis usage type allows your key to be used to authenticate with GitLab, as well as for signing commits. You can learn more about signed commits in the\ndocumentation\nFor\nExpiration date\n, keep the default date.\nIt is ideal to set an expiry date on keys and rotate the keys periodically. The recommended value for the key expiration date will depend on your security requirements.\nClick the\nAdd key\nbutton.\nIn your terminal, run the following command to test your connection.\nIf your instance URL includes\ngitlab-learn-labs/*\nrun:\nssh -T git@gitlab.com\nIf your instance URL includes\nilt.gitlabtraining.cloud\nrun:\nssh -T git@ilt.gitlabtraining.cloud\nIf the command completes with a welcome message instead of an error, your SSH key is set up correctly.\nIf you receive an error stating the connection is refused or the command does not work, this may be because your network is blocking connections via SSH. If that is the case, continue onto the next task.\nTask D. Clone a GitLab project repository to your local computer\nWhen you clone a repository, the files from the remote repository are downloaded to your computer, and a connection is created. You can learn more in the\ndocumentation\n.\nNavigate back to the\nTop Level\nproject that you created in Lab 1.\nIn the left sidebar, click on\nCode > Repository\n.\nOn the right side of the project repository, click the\nCode\nbutton. Copy the URL under\nClone with SSH\nto your clipboard.\nIn your terminal or PowerShell window, create a new directory called\ntraining\nin your home directory, and navigate into it via the commands below.\nmkdir ~/training\ncd\n~/training\nIn Windows:\nmkdir\n~\\training\ncd\n~\\training\nRun the\ngit clone\ncommand, using the command you copied from\nClone with SSH\n.\ngit clone <Clone with SSH Command>\nIf you receive an error stating that the connection has timed out or has been refused, it may be because your network blocks connections on port 22 due to a firewall. If this happens, repeat the steps in Task D, but use the\nClone with HTTPS\nselection in the\nCode\nbutton instead.\nOn a Mac, to locate your cloned project on your machine, you may need to navigate to the home directory. From Finder, click Go > Go to Folder > search by machine username to open your home directory. Or, in Finder, hold down the\nOption\nkey (Alt) and select your machine username from the menu that appears in the bottom left.\nMove into the repository you just cloned via the\ncd\ncommand. All files in this directory will be tracked by Git, and any Git commands you run in this lab should be run from this directory.\ncd\ntop-level-project\nShow the contents of the directory, including hidden files and directories beginning with a period with the\nls -a\ncommand.\nls -a\nNotice the presence of the\n.git\ndirectory. The\n.git\ndirectory stores the metadata and object database for your project.\nCheck the status of your repository by running the following command:\ngit status\nYou‚Äôll see\nnothing to commit, working tree clean\nin the output, which means the files in this directory have the same contents as the versions of these files that are stored in Git.\nTask E. Work on a branch\nBranches are versions of a project‚Äôs working tree. When you create a new project, GitLab creates a default branch for your repository named\nmain\n(formerly\nmaster\n) that cannot be deleted. Default branch settings can be configured at the project, subgroup, group, or instance level. You can learn more in the\ndocumentation\n.\nCreate a new branch called\ntemporary_branch\non your computer.\ngit branch temporary_branch\nSwitch to the branch you just created.\ngit checkout temporary_branch\nList all the branches in the repository.\ngit branch -a\nTo exit the branch list, press\nq\n(for quit) on your keyboard.\nThe red branches are on the remote server, which is the GitLab instance where your repositories are stored at.\nThe asterisk indicates the branch you are currently on.\nTask F. Edit a file\nUsing any text editor (Visual Studio Code, Sublime Text, notepad, vi, etc.), add this line to the end of\nREADME.md\nand save the file.\na line added to temporary_branch locally\nSee if Git has noticed that the file has been modified.\ngit status\nThe output shows the\nfile in read, with a status of\nmodified\n. The red font color indicates that the\nfile has not been added to Git‚Äôs staging area yet.\nTask G. Add the edited file to Git‚Äôs staging area\nAdd the file to the staging area using the\ngit add\ncommand. If the command is successful, there will be no output.\ngit add README.md\ngit add\ndoesn‚Äôt move\nREADME.md\non your filesystem, but it does add it to Git‚Äôs ‚Äústaging area‚Äù.\nMake sure that\nREADME.md\nis now ready to be committed (that is, it has been successfully staged).\ngit status\nYou will now see that the\nfile has a green font color. This indicates that the change is now tracked in Git‚Äôs staging area.\nTask H. Commit the edit\nCommit the staged file using the\ngit commit\ncommand below. It is important to have a descriptive commit message with each commit.\ngit commit -m\n\"Add a line to README.md\"\nYou have now created a snapshot of the file that you can refer to later, if needed.\nMake sure the staging area is empty again.\ngit status\nTask I. Push your changes to the GitLab instance\nCreate a new branch in the remote Git repository on the GitLab server called\ntemporary_branch\n, and push your changes to that branch using the\ngit push\ncommand.\ngit push -u origin temporary_branch\nIf you‚Äôre ever unsure of the exact command to push your changes to the remote server, type\ngit push\nand Git will output an error message with the correct command for you to copy and paste.\nTask J. Edit, commit, and push the file again\nIn your local machine‚Äôs text editor (not GitLab‚Äôs in-browser editor), add this new line to the end of your local copy of\nREADME.md\nand save the file.\na second line in README.md\nIn your terminal, move the edited file to Git‚Äôs staging area via the\ngit add\ncommand.\ngit add README.md\nCommit the staged file using the\ngit commit\ncommand. Make sure you have a descriptive commit message, or feel free to use the example below.\ngit commit -m\n\"Modify README.md\"\nSee a description of the commit you just made by using the\ngit log\ncommand.\ngit log\nPress\nq\nto exit the\ngit log\noutput screen.\nPush your commit up to the remote repository on the GitLab instance by typing in the\ngit push\ncommand.\ngit push\nTo commit your changes to the upstream branch (that is, an already-existing branch on the remote repository with the same name as the branch on your local machine), you can just run\ngit push\ninstead of the longer command you used the first time you pushed your commit up to the GitLab instance. The system only needs to set the upstream branch once.\nNavigate to your project in the GitLab Web UI.\nOnce you‚Äôre on the project‚Äôs main page, navigate to\nCode > Branches\n.\nClick on\ntemporary_branch\nto switch to that branch. Confirm that the changes you made to\nREADME.md\non your local branch were pushed up to the remote repository.\nTo see all of the changes applied, click the\nHistory\nbutton. This will show all of the commits applied to a branch.\nTask K. Edit a remote branch\nLet‚Äôs simulate someone else in your organization making a change to the\ntemporary_branch\nthat lives in the remote repository on the GitLab instance. When we‚Äôre done with this section, the remote and local versions of\ntemporary_branch\nwill be different: the code on that branch will have moved under your feet (so to speak). In the section after this one, we‚Äôll see how to reconcile this difference.\nIn GitLab, navigate to the\nTop Level Project\nlanding page. If you‚Äôre not already on\ntemporary_branch\n, go to the left-hand navigation pane and click on\nCode > Branches > temporary_branch\n.\nYou are now looking at files in\ntemporary_branch\n. Click\nREADME.md\nto see its contents.\nClick\nEdit > Edit single file\nin the top right corner to edit the file.\nAdd a new line to the end of the file.\na third line added on the remote copy of temporary_branch\nClick the\nCommit Changes\nbutton on the upper-right side of the page.\nEnter an appropriate commit message.\nSet the target branch to\ntemporary_branch\n.\nClick the\nCommit changes\nbutton.\nAfter making this commit, the remote repository on the GitLab instance is now one commit\nahead\nof your local repository.\nTask L. Get metadata about changes to the remote\ntemporary_branch\nYour local\ntemporary_branch\nis out of sync with the remote\ntemporary_branch\non the GitLab instance. The\ngit fetch\ncommand gets the updated state of remote branches without updating the contents of your local branches. In other words, it tells you how many commits your local branches are behind the remote branches, but it doesn‚Äôt make any changes to the files in your local branches.\nRetrieve metadata about branches on the remote copy of the repository using the\ngit fetch\ncommand.\ngit fetch\nFind out how many commits are in the remote copy of the repository but not your local copy, or vice versa.\ngit status\nYou will see that your branch is one commit behind in the\ngit status\noutput.\nTask M. Pull from the remote repository\nYou need to update the contents of your local copy of\ntemporary_branch\nby merging in changes from the remote copy of\ntemporary_branch\n.\nIn your terminal, merge the remote copy into your local copy using the\ngit pull\ncommand.\ngit pull\nView the updated contents of the file by typing in the\ncat README.md\ncommand. You should see the third line that you added in the GitLab Web IDE.\ncat README.md\nTask N. Merge changes back into the main branch\nNow that your local\ntemporary_branch\nis identical to the remote\ntemporary_branch\n, you can merge it into your local\nmain\nbranch. This will add your edits to the stable codebase that lives in\nmain\n.\nSee what branch you are currently working on by typing in\ngit branch\n.\ngit branch\nSwitch to the\nmain\nbranch by using the\ngit checkout\ncommand in the terminal.\ngit checkout main\nIncorporate all changes from your local\ntemporary_branch\n(in this case, just the modified\nREADME.md\n) into your local\nmain\nbranch by typing in\ngit merge temporary_branch\n.\ngit merge temporary_branch\nTask O. Update the remote repository\nMake sure there are no edited files that you need to stage or commit and to confirm that you are on the\nmain\nbranch by typing in\ngit status\n.\ngit status\nUpdate the remote copy of the\nmain\nbranch with any changes from your local copy by typing in\ngit push\n.\ngit push\nReturn to the GitLab page in your browser and view\nREADME.md\nin your project‚Äôs\nmain\nbranch to view the changes you just pushed to the remote copy of\nmain\n.\nLab Guide Complete\nYou have completed this lab exercise. You can view the other\nlab guides for this course\n.\nSuggestions?\nIf you‚Äôd like to suggest changes to the lab, please submit them via merge request.\nLast modified May 5, 2025:\nFix typo in gitbasicshandsonlab2.md (\n26d6f87c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2646}
{"doc_id": "9caf46749cab4ede", "url": "https://handbook.gitlab.com/handbook/about/changelog", "title": "Handbook Changelog | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nHandbook Changelog\nThe last 100 Merge Requests to the Handbook\n2025-07-19\n!14870\n- Remove anti-abuse tableau metrics\n!14868\n- Eriklentz 2025 07 18 lumos AR status\n2025-07-18\n!14864\n- Adding new enablement session\n!14805\n- Add new exit criteria\n!14862\n- Fixed Capitalize and Typo\n!14757\n- Update Architecture document to define static ref tracking approach\n!14861\n- Update file lead-lifecycle.md\n!14847\n- Post to slack channel updates - Update file _index.md\n!14839\n- Fix links that were broken cause the page moved\n!14832\n- Remove swag email\n!14777\n- Remove Tableau dashboards from the Distribution Team page\n!14854\n- Fixes broken steps in lab\n!14851\n- Removes all Tableau metrics from public Growth pages\n!14846\n- Add wg member representing PSIRT - Update file ai-security.md\n!14852\n- Added Line\n!14838\n- Add SDLC Standard as Controlled Doc\n!14849\n- Update file link for DevSecOps Adoption Path\n!14835\n- snowflake provisioning local testing\n!14848\n- Remove #fy23_support_promotions channel\n2025-07-17\n!14842\n- Update file campaigns-and-programs.md\n!14840\n- Updating pageinfo section to indicate CMPs are deprecated\n!14841\n- Clarify steps for requesting access\n!14837\n- goldcast update\n!14788\n- Adjusting approval window for app int requests\n!14817\n- Removes outdated strategy page\n!14829\n- Updated Technical Reviewer details\n!14804\n- chore: Update team member table in Editor Extensions group page\n!14812\n- Add link to internal docs direct aigw calls\n!14814\n- rename Geo to region and typo fix\n!14822\n- Document internal events for work item statuses\n!14820\n- Resolve \"Correct minor typographical error in Security Essentials Lab #3\"\n2025-07-16\n!14811\n- Adds Exec Meeting SLA\n!14809\n- remove people who are no longer at GitLab\n!14808\n- Edit _index.md\n!14807\n- Executive Meetings\n!14806\n- remove Edmond Chan from ride along list\n!14794\n- Replaced Zoom with Gmail in the page description\n!14775\n- Change DNT References to GPC\n!14798\n- Added prefilled issue title to URLs for account deletion issue links\n!14799\n- Fixed CMOC handover issue link\n!14797\n- Add Ameya Darshan to AI security WG members\n!14780\n- Update ManuLife Plan details\n2025-07-15\n!14778\n- EUS Support - Gmail\n!14791\n- Remove Tableau dashboards from Fulfillment Development _index.md\n!14790\n- Remove Tableau charts from dib.md\n!14789\n- Removes instruction to link to EE version of docs\n!14784\n- Removed Tableau dasboard from Platform Insight Team page\n!14705\n- Add SupportLogic subscription overview\n!14786\n- Remove AI-Powered Stage Lead in Update file _index.md\n!14782\n- Added instructions to how to add a survey to the Zoom Configuration Instructions.md\n!14755\n- Add July end date\n!14781\n- Updating UK Pension Webinar and Presentation Links\n!14748\n- Update Legal Review Section\n!14783\n- Resolve \"Correcting Formatting and Number Sequencing in Security Essentials Labs\"\n!14740\n- Add MR review guidelines to L10n handbook\n!14776\n- CODEOWNERS Removal - ericrubin - 2025-07-11\n!14769\n- Update day-in-the-life to refer to 2024 State of DevOps report instead of 2021\n!14768\n- Add Duo Code Review Usage Dashboard\n!14759\n- Update Composition Analysis page with near breached SLA vulns\n!14735\n- update link for AI Tool usage requirements\n!14773\n- Update link to docs release info\n2025-07-14\n!14770\n- Edit _index.md\n!14766\n- Remove Nick, Michael, Mark, Veethika from AI\n!14765\n- Added feature 364\n!14764\n- Rename ‚ÄúSkill Up-Level‚Äù to ‚ÄúUp-Skill‚Äù in Design Reach program\n!14763\n- Update LACA EBA Coverage\n!14721\n- Refresh Data Team internship page with latest information\n!14754\n- Update doc stats for June 25\n!14737\n- Remove UX PIs from public handbook\n!14758\n- Update the innactive link for the password generator\n!14708\n- Updates requirements for Incident Managers\n!14747\n- Update role and team\n!14743\n- CODEOWNERS Removal - ameeks - 2025-07-08\n!14744\n- CODEOWNERS Removal - jwrs - 2025-07-08\n!14703\n- Update Production Engineering Group/Team Labels\n!14742\n- Assign monthly docs maintenance tasks for Dec 2025 and Jan 2026\n2025-07-11\n!14725\n- updating handbook page\n!14752\n- Handbook: Update link to 1Password CLI getting started guide\n!14738\n- Update L10n handbook to remove extra heading\n!14751\n- Update guidance for executives joining customer calls\n!14750\n- Add link to NDA Request issue template\n!14741\n- Removed unused pages and content\n!14745\n- Removing JS from HB page\n!14733\n- Rephrase claim service based on feedback\n!14736\n- Update links\n!14734\n- Typo fix\n!14720\n- Fix typo on Performance Testing page\n!14732\n- Mark The New Auth Stack redesign as ongoing\n!14728\n- Document custom lifecycle and status permissions\n!14715\n- Update roles.yml link\n!14726\n- Remove Shaun as he's no longer at GitLab\n2025-07-10\n!14727\n- Update change request to be internal\n!14724\n- Update Eng Dashboard page to include Tableau hub page\n!14719\n- fixed indentation of the list\n!14718\n- Resolve \"Some Improvements to Advanced CI/CD Labs as Noted During a Recent Training Session\"\n!14711\n- Explains sequence altering during the bootstrap process\n!14710\n- Add IPTM dashboard to handbook\n!14707\n- Dev Advocacy: Remove internal deprecated GDoc URLs\n!14706\n- Update file dedicated_logs.md to add duo chat debug information\n!14701\n- Remove reference to /-/organizations\nView page source\n-\nplease\ncontribute\n.", "num_words": 854}
{"doc_id": "f7698e2466cbc6b0", "url": "https://handbook.gitlab.com/handbook/sales", "title": "Sales | The GitLab Handbook", "text": "The Handbook\nSales\nThe GitLab Field team includes multiple functions: Enterprise Sales, Commercial Sales, Customer Success, Channel Partners, Alliances, Field Operations\nWelcome to the Sales team homepage\nThe GitLab Field team includes multiple functions: Enterprise Sales, Commercial Sales, Customer Success, Channel Partners, Alliances, Field Operations.\nThis page serves as our home base. From here, you can find a wealth of resources from all of the teams in our department.\nInterested in collaborating with the Sales team? See our\nHow We Work\nand\nCommunicating with the Team\nsections.\nWant to learn more about our goals? Check out our\nmost recent Objectives and Key Results (OKRs)\n.\nQuick Reference Guide\nWhere to Begin\nField Enablement Resources\nSales Processes & Standard Operating Procedures\nSales Meetings & Events\nSales & Customer Success Onboarding\nSales Training\nSales Order Processing\nPresident‚Äôs Club\nCommercial Sales\nSales Enablement Sessions\nEngage & Educate the Customer\nSales Kickoff\nEnterprise Sales\nCommand of the Message\nFacilitate The Opportunity\nSales Meetings\nInside Sales\nMost Commonly Used Sales Resources\nDeal Closure\nChannels\nField Certification Program\nRetain and Expand\nSales Territories\nSales Manager Best Practices\nForecasting\nSales Term Glossary\nField Flash Newsletter\nInvestor Sales Support\nACV Deep Dive\nField Team Recognition Programs\nCustomer Planning\nARR Deep Dive\nHighspot - GitLab Sales Asset Management Tool\nRules of Engagement for Selling GitLab & Partner Professional Services\nField Operations Teams and Resources\nCustomer Success Resources\nHelpful Sales Handbook Tips\nSales Resources Outside of the Sales Handbook\n‚Äî‚Äî\nField Operations\nCustomer Success Teams\nFAQ from Prospects\nResellers Handbook\nSales Operations\nHow to Engage a Solutions Architect\nClient Use Cases\nCustomer Reference Sheet\nDeal Desk\nAccount Planning Template for Large Accounts\nDealing with Security Questions From Prospects\nCustomer Reference Case Study Dynamic Board\nField Enablement\nHow to Engage a CSM/CSE\nHow to conduct an executive meeting\nGitLab Support Handbook\nSales Strategy\nCEO Preferences when speaking w/ prospects/customers\nSales Systems\nBest Practices for Building Value with Customers\nCommissions\nUnderstanding How Our Customers Use GitLab\nCustomer Success Operations\nProspect Engagement Best Practices\nAccount Ownership Rules of Engagement\nParent and Child Accounts\nOpportunity Stages\nGrowth Resources (Finding Seat Count)\nRecord Ownership\nRouting Rules\nForecasting Definitions and Processes\nData Intelligence\nAssociating emails to Salesforce\nEarly to Mid-Stage\nLate Stage\nPost Sales Processes\nTeam Member & Manager Resources\n‚Äî‚Äî\nOpportunity Types\nSubmitting an Opportunity for Approval\nHow to Amend a Subscription Quote\nLeadership Handbook\nOpportunity Naming Conventions\nHow to Handle Vendor Setup Forms\nHow to Renew a Subscription Quote\nHow to Create an Opportunity\nTrue Ups\nGitLab Competencies & Certification Process\nMEDDPPICC Qualification\nContract Resets\nGitLab Diversity, Inclusion & Belonging\nSales Discovery & Qualification Questions\nPeople Business Partner Alignment for Sales\nGitLab ROI calculator\nProof of Value\nCreating a Quote\nQuote Approval Matrix\nDelivering a Quote via DocuSign\nMarketing Resources\nStrategic Marketing\nProduct Resources\n‚Äî‚Äî\nMarketing\nStrategic Marketing Handbook\nProduct Team Handbook\nSales Development Handbook\nProduct Marketing Manager Assignments\nEngaging Product Management\nGitLab Value Proposition\nCustomer-Facing Presentations\nAsking Questions/Giving Feedback on a Feature\nLead and Contact Statuses\nPrint Collateral\nProduct Categories\nInbound Lead Generation\nSales Collateral Google Drive\nFeatures by Group\nFinance Process\nBusiness Operations Process\nLegal Process\n‚Äî‚Äî\nDeal Desk: Assistance with Quotes\nBusiness Operations Handbook\nCollaborating with Legal - Sales\nDeal Desk: Approval Process\nData Team Handbook\nLegal Page\nSending a Quote to Zuora\nData Quality Process\nEngaging Legal in Deals\nHow to Initiate a Refund\nIT Ops Handbook\nAccess Requests\nWho We Are\nThe Sales team is led by the\nChief Revenue Officer (CRO)\n. Reporting into this individual are the:\nVP, Enterprise Sales\nVP, Commercial Sales\n(Mid-Market and SMB)\nVP, Field Operations\nVP, Customer Success\nVP, Global Channels\nVP, Alliances\nChief of Staff, CRO\nThe Sales team is organized into Large, Mid-Market, and SMB segments. (Descriptions of Sales segments can be found in the\nField Operations Handbook - Segmentation section\n.)\nThe people working with each segment and their quota are:\nLarge:\nStrategic Account Executive\nMid-Market:\nMid-Market Account Executive\nSMB Account Executive\nHow We Work\nThe GitLab Sales team embodies our CREDIT values in every aspect of our work. Specifically, we constantly work to overperform and achieve strong\nresults\n. We prioritize\nefficiency\nin our processes and operations. We succeed because of\ntransparent\n, cross-functional\ncollaboration\n. We are committed to hiring for and celebrating\ndiversity\n, and we strive to create an environment of\ninclusiveness and belonging\nfor all. And, we embrace a spirit of\niteration\n, understanding that we can always improve.\nSales Tech Stack\nFor information regarding the tech stack at GitLab, please visit the\nTech Stack Applications page\nof the Business Operations handbook where we maintain a quick reference table of who should have access to various tools and the designated owner for each to contact with questions. To see a full list of the tools that make up our tech stack, visit the\nTech Stack Details page\n.\nCollaborating with the Team\nPlease\nuse the Handbook\nas much as possible to document important information. You should also use the Handbook as a starting point for any questions.\nRead here\nfor guidance on how we take notes on the GitLab Sales team.\nDogfood\nGitLab whenever you can ‚Äì to collaborate on ideas, gather feedback, organize projects, and more.\nWhen you have to use office applications, always use\nG Suite applications\ninstead of Microsoft Office; for example, Google Sheets instead of Excel, Google Docs instead of Word, and Google Slides instead of Keynote or Powerpoint. Give the entire company editing rights whenever possible so everyone can contribute.\nCommunicating with the Team\nThe Sales team primarily communicates via Slack in our day-to-day work. Our main team channels are\n#sales\n, our general channel, and\n#field-fyi\n, our read-only channel for official field team announcements.\nEmail is used in some segments where customer privacy dictates additional security measures.\nFor a full breakdown of all Field Slack groups and the hierarchy of our Google Groups, see the\nCommunicating with the Field Handbook page\n.\nPlease reference the\nSales Support and Sales Operation Handbook page\nfor a summary of how to engage with deal desk resources.\nChatter @contracts on the specific record in Salesforce where you will need assistance from the legal team.\nPlease avoid contacting individuals directly so that discussions can be available for everyone to review and learn from. We strongly encourage every team member to review the\nGitLab Communication Handbook page\nupon joining the team, and occasionally return to it during your tenure here as a refresher. (You can also get\ncertified\non communication at GitLab.)\nSupporting Teams\nThe Sales team works cross-functionally, both with teams within and outside of our organization. These teams include:\nCustomer Success\nThe Customer Success department is part of the GitLab Sales function and partners with our large and strategic customers to deliver value throughout their journey with GitLab. See our\nCustomer Success page\nin the Handbook for more details.\nInside Sales\nThe Inside Sales department is part of the GitLab Sales function and partners with the sales and customer success teams to deliver maximum value to GitLab customers throughout their journey with GitLab. See our\nInside Sales page\nin the handbook for more details.\nChannels & Alliances\nThese teams help accelerate GitLab‚Äôs trajectory by connecting our business and customers to companies that can help compliment our product mission and/or drive customer adoption and usage of the GitLab platform. See our\nChannel\nand\nAlliances\nHandbook pages for more details.\nSales Development Organization\nSales Development Representative (SDR) - focused on inbound leads\nBusiness Development Represenative (BDR) - focused on outbound leads\nThis team sits within the Marketing department and provides territory support to Sales team members through outreach, prospecting, and lead qualification. Key priorities include:\nAlign on accounts and prioritize prospecting targets (both on the account and title levels).\nBDRs and SDRs are to set ‚Äòat bat‚Äô meetings utilizing sales development best practices\nDrive brand awareness within target accounts\nSee the\nSales Development page\nin the Handbook for more details.\nSupport\nThis team provides technical support to GitLab.com and Self-Managed GitLab customers. For an overview of support levels based on plan tier, see the\nSupport Page\n. The Support ‚Üí Customer Success Manager (CSM) escalation process can be found\nhere\n.\nDuring the sales cycle, potential customers who have questions that are not within the scope of Sales can have their queries escalated in different ways depending on the account size:\nFor Strategic/Large accounts that will have a dedicated Solutions Architect,\nengage the SA\nso that they can triage and develop the request.\nFor questions that you think technical staff can answer in less than 10 minutes, please use the #questions Slack channel. For more information, see the\ninternal support\nsection of the Support Handbook.\nBy default, trial licenses do not include support. If you‚Äôve been contacted by a prospect whose evaluation of GitLab includes evaluating support expertise or SLA performance, as a member of the Sales team you can grant temporary support for their trial license. See the\nInternal Support Handbook\nfor more details.\nIf your customer contacts you requiring technical support, please immediately direct them to open a ticket through the Support Portal(\nhttps://support.gitlab.com/)\n. Please do not open a support ticket on behalf of a customer. More details\nhere\n.\nFor escalating a Support ticket, see the\nI want to escalate a ticket\nsection.\nProduct\nWe work with the Product team to help drive the\nGitLab Direction\nbased on customer feedback and needs.\nWhen you hear of feedback or you personally have feedback, you are encouraged to comment within the issue, if one exists, or create your own issue on our\nIssue Tracker\n.\nWhen you have an organization that is interested in a feature and you have commented in the issue and added a link to the account in Salesforce, please follow the\nprocess outlined on the Product Handbook\nto arrange a call with the product manager and account to further discuss the feature request.\nIf a client has a question or suggestion about a particular part of the product, find out which individual on the Product team you need to speak by looking under\nDevOps Stages\non the Product stages, groups, and categories page.\nCoronavirus Impact to Business Tracking\nTo standardize our messaging around Coronavirus and the impact it is having on our prospects and customers, please reference the below processes:\nUse this for\nguidance on a standardized conversation\nUse this to\ncapture anecdotal feedback from prospects & customers\nAdd the string\n#covid\nin the SFDC Opportunity field\nClose Plan to indicate you have had this conversation with your prospect/customer and use this report to confirm your Opportunity is tagged correctly:\nCOVID Mentions in CP Close Plan\nAssess and flag each SFDC Deal using the ‚ÄúCOVID-19 Risk Scale‚Äù field with the following definitions:\nBlank: No conversation or insight has been gathered yet\nPending: Engaged with customer to validate current situation\nNo impact: Oppty proceeding on close plan in customer‚Äôs words\nMed: Customer validates change to budget or timing but some ‚Äúhigh priority‚Äù purchases still happening\nHigh - Budget Change: Customer‚Äôs words: all budget gone in formal response to economy\nHigh - Priority Change: Customer‚Äôs words: Timing must push in direct response to economy\nAdd high-level summary of impact to ‚ÄúCOVID Comment‚Äù and original amount prior to impact in ‚ÄúPre-COVID iACV‚Äù SFDC fields on the opportunity\nA note for Commercial Account Owners: add the string\nc19\nto any activity record where a discussion was held.\nExport Control Classification, and Countries We Do Not Do Business In\nGitLab‚Äôs Export Control Classification (or ECCN) is 5D992.c. As a consequence of this classification, we currently do not do business in: Cuba, Iran, North Korea, Syria, Russia, Belarus, and the Crimea, Donetsk, and Luhansk regions of Ukraine.\nPerformance Indicators\nSales KPIs\nare\nNot Public\nand documented in\nthe Internal handbook\n.\nAccount Planning\nAccount planning helps all AE's and the larger account team elevate opportunity-driven conversations into value-based conversations that focus on the customer's value drivers.\nAssociating emails to Salesforce\nA quick guide on associating emails to Salesforce\nBest Practices for Building Value with Customers\nAn overview of some of the GitLab Field team's best-practices to build value with customers.\nCommand of the Message\nGitLab has adopted Force Management's Command of the Message customer value-based sales messaging framework and methodology\nCommercial Sales\nWelcome to the Commercial Sales Handbook The Commercial Sales department is part of the overall ‚Ä¶\nCommissions\nCharter Sales Commissions is a part of Field Operations, reporting into Sales Operations. Our goal ‚Ä¶\nCommunicating with the Field\nGuide to communicating with and within the GitLab Field team using both Slack and email\nCRO Career Development Day\nCRO Career Development Day is a direct result of the feedback we received from you in our FY22 Engagement Survey on Career Development. It will include time to think big about your career, hear from team members across GitLab, and guidance to help you get your plan into writing and talk about it with your manager.\nCustomer & Partner Fireside Chat\nWhat is a fireside chat? Fireside chats are less formal than an interview but more structured than a ‚Ä¶\nEnterprise Sales\nThe Enterprise Sales department at GitLab focuses on delivering maximum value to strategic and large prospects and customers throughout their entire journey with GitLab.\nFAQ from prospects\nSee FAQs about GitLab's features, user management, statistics/logs, performance, installation, and support\nField Communications\nThe Field Communications team is responsible for creating effective, timely, and easily consumable communications with Sales and Customer Success audiences\nField Manager Development Program\nThe Field Manager Development Program equips managers with a foundational set of skills & practices for effectively managing remote teams across GitLab's field organization\nField Operations\nThe Field Operation team's vision is to manage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics\nField Team Meetings\nOverview of the primary meetings for the worldwide GitLab Field team\nGitLab Field QBRs\nOverview of GitLab's Quarterly Business Review process\nHigh Velocity Sales and First Orders Team at GitLab\nThe High Velocity Sales and First Orders is responsible for delivering a cohesive GTM that enables customers and prospects to self-serve: from discovery and adoption, purchasing, expanding, and managing their GitLab subscription\nIdea to Production Demo\nInside Sales Department\nThe Inside Sales department is part of the GitLab Sales function who partners with the sales and customer success teams to deliver maximum value to GitLab customers throughout their journey with GitLab.\nInterview with an IT Agility Director\nClips from an April 2020 interview with an IT Agility Director at a Fortune 500 energy company\nManager Operating Rhythm\nA consistent management operating rhythm (MOR) fosters efficient, predictable growth by codifying best practices for how front-line managers in GitLab's field organization lead their teams\nMEDDPPICC is a proven methodology used for strategic opportunity management and complex sales process orchestration for enterprise organizations\nNegotiate to Close\nA sales negotiation is a strategic discussion (or series of discussions) between buyer and seller that ideally leads to a deal being closed. The main goal of the negotiation process is to reach an agreement that's acceptable to everyone.\nPresident's Club\nPredident's Club at GitLab\nPublic Sector\nPublic Sector at GitLab\nREADMEs\nSales Discovery and Qualification Questions\nAn effective questioning strategy is critical to engaging customers in dialogue to truly understand their needs, build credibility and trust, and qualify the opportunity\nSales Forecasting\nThis page details the Sales Forecasting process\nSales Operating Procedures\nGitLab sales process documentation\nSales Order Processing\nThis page has been deprecated and moved to Business Operations\nSales Processes\nSales Prospecting\nProspecting is the process of initiating and developing new business by searching for potential customers, clients, or buyers for your products or services\nSales Quick Start\nSales and Customer Success Onboarding at GitLab is a blended learning experience focused on what new sales/ customer success team members need to know, do, and be able to articulate within their first 30 days or so on the job\nSales Renewals Process Guide\nRenewals Lifecycle Management Process Guide for GitLab Sales\nSales Revenue Programs\nThe purpose of GitLab's Revenue Program is to improve the quantity of opportunities and closed business with defined, cross-functional sales motions to ultimately generate more ARR for GitLab.\nSales Term Glossary\nDefinitions of key terms for the WW Field Team\nSales Territories\nPlease see the Sales Handbook Definitions Document\nSales Training\nGitLab's sales learning framework and sales training resources\nTerritory Planning\nOverview Every Account Executive regardless of segment or geo should have a plan for how ‚Ä¶\nThe Customer-Ready Shadow Program\nThe Customer-Ready shadow program offers a hands-on way to learn how different GitLab roles represent GitLab. We often learn best when we have the opportunity to learn from our peers, practice, and get feedback in an interactive way. It's also a great way to make new hires feel welcome and a part of our sales culture at GitLab.\nTips for Selling GitLab or Partner Professional Services\nPlease see the Internal Sales Definitions Document\nTotal Addressable Market\nPlease see the Sales Handbook Definitions Doc\nUnderstanding How Our Customers Use GitLab\nGuidance to GitLab sales team members to gain a better understanding of how customers are using GitLab\nUsing Gainsight at GitLab\nThe key aspects of using Gainsight at GitLab to drive success for your customer\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2886}
{"doc_id": "b2b3f890f57e1cbb", "url": "https://about.gitlab.com/sales", "title": "Sales", "text": "Talk to sales\nLet's connect you with the best person to help\nPlease complete all fields\nOur sales team can help you:\nGet pricing information\nSchedule a demo\nExplore solutions for your team\nFor technical help, please visit\nGitLab Support\nWhy GitLab?\n80%\nreduction in debugging time\nSource: 2024 commissioned Forrester Consulting Total Economic Impact\nWhy GitLab?\n75%\nfaster developer onboarding\nSource: 2024 commissioned Forrester Consulting Total Economic Impact\nWhy GitLab?\n13x\nfaster security scanning\nSource: CACI customer story\nslide-0\nslide-1\nslide-2\nTrusted by industry leaders\nFAQs\nLicense and Subscription\nShow all\nI already have an account, how do I upgrade?\nHead over to\nhttps://customers.gitlab.com\n, choose the plan that is right for you.\nCan I add more users to my subscription?\nYes. You have a few options. You can add users to your subscription any time during the subscription  period. You can log in to your account via the\nGitLab Customers Portal\nand add more seats or\ncontact sales\nfor a quote. In either case, the cost will be prorated from the date of  quote/purchase through the end of the subscription period. You may also pay for the additional  licenses per our true-up model.\nHow will I be charged for add-on users?\nIf you have\nquarterly subscription reconciliation\nenabled (default option for new and renewing  subscriptions after Aug 1, 2021), users added during a quarter will only be charged for the remaining  quarters of their subscription term as opposed to the full annual subscription fee(s) with annual  true-ups. For example, if you add 50 users to your subscription during the third quarter of your  subscription term, the 50 users will only be charged for the fourth quarter of your subscription term  as opposed to all four quarters as per annual true-ups.\nIf you do not have quarterly subscription reconciliation enabled, add-on users will be charged annual  true-ups for the full term during which they were added. For example, if you have 100 active users  today, you should purchase a 100 user subscription. Suppose that when you renew next year you have  300 active users (200 extra users). When you renew you pay for a 300 user subscription and you also  pay the full annual fee for the 200 users that you added during the year.\nWhat happens when my subscription is about to expire or has expired?\nYou will receive a new license that you will need to upload to your GitLab instance. This can be done  by following\nthese instructions\n.\nWhat happens if I decide not to renew my subscription?\n14 days after the end of your subscription, your key will no longer work and GitLab Enterprise  Edition will not be functional anymore. You will be able to downgrade to GitLab Community Edition,  which is free to use.\nCan I acquire a mix of licenses?\nNo, all users in the group need to be on the same plan.\nHow does the license key work?\nThe license key is a static file which, upon uploading, allows GitLab Enterprise Edition to run.  During license upload we check that the active users on your GitLab Enterprise Edition instance  doesn't exceed the new number of users. During the licensed period you may add as many users as you  want. The license key will expire after one year for GitLab subscribers.\nPayments and Pricing\nShow all\nWhat is a user?\nUser means each individual end-user (person or machine) of Customer and/or its Affiliates  (including, without limitation, employees, agents, and consultants thereof) with access to the  Licensed Materials hereunder.\nIs the listed pricing all inclusive?\nThe listed prices may be subject to applicable local and withholding taxes. Pricing may vary when  purchased through a partner or reseller.\nWhat features are included in GitLab self-managed and SaaS across the pricing plans?\nYou can find an up to date list on the\nfeatures page\n.\nCan I import my projects from another provider?\nYes. You can import your projects from most of the existing providers, including GitHub and  Bitbucket.\nSee our documentation\nfor all your import options.\nDo you have special pricing for open source projects, educational institutions, or startups?\nYes! We provide free Ultimate licenses, along with 50K compute minutes/month, to qualifying open  source projects, educational institutions, and startups. Find out more by visiting our\nGitLab for  Open Source\n,\nGitLab  for Education\n, and\nGitLab for Startups\nprogram pages.\nHow does GitLab determine what future features fall into given tiers?\ncapabilities\nand those are meant to be filters on our\nbuyer-based open  core\npricing model. You can learn more about how we make tiering decisions on  our\npricing handbook\npage.\nGitLab SaaS\nShow all\nWhere is SaaS hosted?\nCurrently we are hosted on the Google Cloud Platform in the USA\nWhat features are not available on GitLab SaaS?\nSome features are unique to self-managed and do not apply to SaaS. You can find an up to date list  on the\nfeatures page\n.\nStorage Limits\nShow all\nWhat are the current GitLab.com storage limits?\nProjects on GitLab.com have a\n10 GiB storage limit\non their Git repository and LFS storage.\nCompute minutes\nShow all\nWhat are compute minutes?\nCompute minutes are the execution time (in minutes) for your pipelines on our shared runners.  Execution on your own runners will not increase your compute minutes count and is unlimited.\nWhat happens if I reach my minutes limit?\nIf you reach your limits, you can\nmanage your compute usage\n,\npurchase additional compute minutes\n, or upgrade your account to Premium or Ultimate. Your own runners can still  be used even if you reach your limits.\nDoes the minute limit apply to all runners?\nNo. We will only restrict your minutes for our shared runners (SaaS only). If you have a\nspecific  runner setup for your projects\n, there is no limit to your build time on GitLab SaaS.\nDo plans increase the minutes limit depending on the number of users in that group?\nNo. The limit will be applied to a group, no matter the number of users in that group.\nWhy do I need to enter credit/debit card details for free compute minutes?\nThere has been a massive uptick in abuse of free compute minutes available on GitLab.com to mine  cryptocurrencies - which creates intermittent performance issues for GitLab.com users. To discourage  such abuse, credit/debit card details are required if you choose to use GitLab.com shared runners.  Credit/debit card details are not required if you bring your own runner or disable shared runners.  When you provide the card, it will be verified with a one-dollar authorization transaction. No charge  will be made and no money will transfer. Learn more\nhere\nIs there a different compute minutes limit for public projects?\nYes. Public projects created after 2021-07-17 will have an allocation of\ncompute  minutes\nas follows: Free tier - 50,000 minutes, Premium tier - 1,250,000 minutes,  Ultimate tier - 6,250,000.\nJust want to take GitLab for a spin?\nStart your free trial", "num_words": 1158}
{"doc_id": "090c5f609f36b65e", "url": "https://handbook.gitlab.com/handbook/marketing/growth", "title": "Growth Direction | The GitLab Handbook", "text": "The Handbook\nMarketing\nGrowth Direction\nGrowth Section Overview\nThe GitLab Growth section is dedicated to making it easier for teams to find value and increased efficiency within the GitLab platform. We work across stages within the product experience to make the product as easy as possible to adopt and use.\nThe Growth section lives within Marketing & Strategy to ensure we‚Äôre aligned in our go-to-market strategy and we‚Äôre as efficient as possible in finding the right prospects, convincing them to become product users, and assisting in converting them into paying customers. Since the work within the section occurs within the product experience our engineering and user experience counterparts are within the\nDevelopment division\n. This approach ensures that we have proper alignment on our priorities from a go-to-market and business perspective while ensuring our\ndevelopment team\nis set up for success to operate within the development division.\nGrowth Section‚Äôs Principles\nThe Growth team works cross functionally within the organization to increase user and business value. We ground ourselves in four core principles.\nPartner with stakeholders in Marketing, Sales, and Product to establish metrics informed by quantitative and qualitative data that meet the business needs while supporting our users\nEmpower teams to find value efficiency in the GitLab platform\nEnable teams to quickly and intuitively adopt multiple stages with multiple users\nEmpower teams to find enterprise value within features that live in our Ultimate offering\nCore metrics, findings & experimentation results\nMetrics\nAcquisition - Valuable signup\nInternal team members can view this metric\nhere\nActivation - Team activation\nInternal team memmbers can view this metric\nhere\nFindings and experimentation results\nOur core findings and experiment results are considered non-public information. Internal team members can reference the internal handbook growth page for a detailed review of our findings.\nVision\nOur vision is to make it seamless for teams to find, adopt, and discover value along with increased efficiency in the GitLab platform.\nThis includes\nAligning internally with signups we want to prioritize as a business\nEnsuring the signup experience is balanced by collecting the information required for the business while collecting the needed user information (JTBD) to provide a tailored product experience\nAssisting users in finding product value (ah-ha moments) as quickly as possible including increasing access to enterprise value\nAssisting users in their product adoption experience that aligned with their defined JTBD\nProviding users with the purchase experiences that align with their business\nFor SMBs this means uncovering the value in the paid tiers through in-product experiences including trials married with related marketing and sales content related to their usage\nFor larger businesses, this encompasses empowering namespaces owners to understand what features their teams are using and which paid features they are requesting access to. While also providing them with the ability to connect directly with their dedicated point of contact within sales. This could include in-app messaging, and the ability to book time on their point of contact calendar directly within the app.\nGroups\nThe growth division is currently grouped under the Acquisition team that contains a shared growth backlog while we actively hire additional team members to build out a activation team.\nAcquisition\nTeam description, dedicated handbook page and specific vision is a work in progress.\nActivation\nTeam description, dedicated handbook page and specific vision is a work in progress.\nProduct ownership\nThe Growth section owns the following areas of the product experience.\nThe\nfree user\nand\ntrial registration\nexperience\nThe new user\nonboarding experience\nGitLab Experiment Gem (also refered to as GLEX)\nInstance review\nProduct Qualified Leads\nWhile we own these areas our work is not limited to these specific areas as the teams work cross-functionaly with other product and business teams to improve the user experience the most efficient way possible.\nEngineering\nGrowth engineering\nhandbook pages.\nGrowth Coffee & Learn Sessions\nGrowth requires constant learning, and many compaines face similar challenges or go through similar journeys. At GitLab, we believe hearing from growth experts and practitioners with diverse background is the best way to learn, and we want to share that with the community as much as possible. Therefore, we started a growth Coffee & Learn series since 2020. Below is a list of exerperts we invited to share their wisdom with us. We appreciate their time and insights, note that some videos/notes are viewable by internal team only.\nExpert\nBackground\nTopic\nVideo\nNotes\nChris More\nVP Growth @ Fusebit & Former Head of Growt@ Mozilla\nAMA on Open source & growth\nAMA Notes\nHolly Chen\nGrowth advisor, former head of global marketing @ Slack\nGrowth Loop & Journey of Slack\nVideo\nSummary\nLinsha Chen\nHead of Growth Data Science, Airbnb\nHow Airbnb does experimentation\nVideo\nAMA Notes\nJike Chong\nAuthor, How to Lead in Data Science, former data science executive @ LinkedIn, Acorns\nHow to Lead in Data Science\nVideo\nAMA Notes\nAnuj Adhiya\nAuthor, Growthhacking for Dummies, VP Growth\nHigh Performing Growth Teams\nVideo\nAMA Notes\nRobert Neal\nDirector of experimentation @ LaunchDarkly\nExperimentation system AMA\nVideo\nAMA Notes\nCarl Gold\nFormer Chief Data Scientist, Zuora\nFighting Churn with data\nVideo\nAMA Notes\nGrowth Definitions\nSign-up Experience:\nRegistering to be a user of GitLab. It generally starts on\nabout.gitlab.com\nand ends when the user is registered and can log in to the application. We have free, trial and direct to paid sign-up options.\nRegistration Flow:\nThe ‚Äúhappy path‚Äù flow a new user goes through when registering for GitLab and landing in the app for the first time. This is a more confined user flow, as we narrow down options so they can experience GitLab without being overwhelmed by all the other features. It starts at\nabout.gitlab.com\nand ideally ends with them using Create features.\nTrial Experience:\nThe experience of selecting and starting a trial, as well as testing/trialing features in GitLab.com or a self-managed instance during the trial. This could be done by net new users of GitLab, or existing users of GitLab who are interesting in exploring paid features.\nUser Onboarding:\nA general term that refers to experiences we create to support users during their first 90 days, or any time they engage with a new stage.\nContinuous onboarding:\nSpecifically our onboarding experience that allows users to choose when and if they want to continue onboarding tasks. It starts with simple tasks and builds to more complex ones.\nOnboarding Emails:\nRefers to emails that are sent to Saas and self-managed users intended to drive stage adoption via the email service the instance sets up.\nSaaS Purchase Flow\n- We consider the SaaS purchase flow (or ‚Äúfunnel‚Äù) to begin with the first screen of the checkout experience (the first page that displays the total cost of their GitLab subscription) and continues through the payment sequence with the last step of the flow being the successful first-time purchase of a GitLab paid tier. A potential customer can enter this experience directly within the SaaS app from the /billings page or on\nabout.gitlab.com/pricing\n.\nGrowth Shared Calendar\nWe use Growth PTO shared calendar to ensure all time off events are visible to everyone on the Growth team. To enable syncing your PTO from Time Off by Deel with this calendar follow these instructions:\nIn Slack open app\nTime Off by Deel\nEnsure you are on\nHome\ntab and select\nCalendar Sync\nfrom the dropdown menu\nUnder the section\nAdditional calendars to include?\nclick\nAdd calendar\nCopy & paste this calendar ID:\nc_5e5a9e4df8718fb25c518f165ca78fbccd42a7b6e1437a3caa6650e8e8dffbea@group.calendar.google.com\nCongratulations! üéâ From now on all your PTO events will be automatically synced to our shared calendar!\nHelpful Links\nEngineering Growth Section\nGrowth Product Handbook\nLast modified September 23, 2024:\nFix broken links (\nd748cf8c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1278}
{"doc_id": "aa6ccf1b21bd076f", "url": "https://handbook.gitlab.com/handbook/support", "title": "Support Team Handbook | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nThe GitLab Support Team Handbook is the central repository for why and how we work the way we do.\nWelcome to the GitLab Support Team Handbook\nThe GitLab Support Team provides technical support to GitLab.com and Self-Managed GitLab customers. The GitLab Support Team Handbook is the central repository for why and how we work the way we do.\nIf you are\nYour Need\nWhere You Should Look\nA customer, or an advocate for a customer\nTechnical assistance\nPublic\nSupport Page\n, which describes the best way to get the help you need and lists GitLab‚Äôs paid service offerings\nGitLab team member\nTechnical assistance\nInternal Support for GitLab Team Members page\nNew Support Team member\nOnboarding / Learning\nSupport Engineer Responsibilities\npage and\nSupport Learning Pathways\nNew Support Manager\nOnboarding / Learning\nSupport Manager Responsibilities\npage and\nSupport Manager Pathways\nKnow someone who might be a great fit for our team? Please refer them to the job-family descriptions below.\nSupport Engineering Job Family\nSupport Management Job Family\nWhat does the Support Team do?\nWe care for our customers\nAlways assume you are the person responsible for ensuring success for the customer.\nWhen supporting a customer, any issue, incident or loss is\nGitLab‚Äôs loss\n.\nWhen a customer experiences trouble or downtime, take action with the same urgency you‚Äôd have if GitLab were experiencing downtime.\nWhen a customer is losing productivity, take action with the same urgency you‚Äôd have if GitLab were losing productivity.\nA customer with 2,500 users whose instance is down, gets the same urgency as if GitLab were losing $1,000,000 per day.\nEscalate early. Visibility across GitLab, up to and including the CEO, is always better earlier rather than later. Ensure all resources needed are on the case for customers early.\nRemember, as members of the support team we are the first to interact with someone when they have a problem or question. As such it is up to us to represent the company and make sure we present ourselves properly. Therefore we are expected to:\nAlways be friendly and respectful.\nBe open to new ideas and points of view.\nBe OK if you don‚Äôt know something. You can always ask someone else.\nBe comfortable saying no to a customer (but try to suggest a workaround and escalate to a Senior if necessary).\nWe are not commissioned or bonused\nOur goal is to provide guidance that will lead to the best results for our customers as they use GitLab. In that, we will often point to documentation, product functionality, or open bugs/feature requests.\nHowever, there are times when customers will be best served through one of our commercial offerings.\nSupport is part of the\nEngineering Department\nand Support Engineers are not commissioned or bonused for upsell for additional services, customer purchases, or lead generation.\nIf you recommend\nProfessional Services\nor moving to a different tier or offering you may link to this section in your recommendation to give the customer assurance you‚Äôre doing so with no mixed motivations.\nOur role within GitLab\nGitLab Support is part of the\nEngineering division\n.\nWhile most engineering departments are part of the R&D cost center,\nSupport is part of the Cost of Sales (or sometimes Cost of Goods Sold (COGS)) cost center.\nThis unique arrangement is expressed in our\nKey Performance Indicators\n,\nwhich are largely focused around pursuing customer success and satisfaction\nwhile driving efficiency by increasing output while keeping costs within a\npredefined range.\nThis is also why\nSupport Engineer responsibilities\ninclude contributing code and documentation and working alongside Product\nManagers on our products: By using the knowledge gained from interacting with\nour customers to make our products or docs better, we solve problems before\nthey become one. This reduces support case load while increasing efficiency for\nthe wider GitLab organization. For example, the Sales department can rely on\nour docs to answer customer queries instead of leaning on Support or Customer\nSuccess for help, freeing up more time to close sales.\nBuilding customer empathy\nPart of Support‚Äôs role is to amplify the voice of the customer. One way of doing this is inviting other GitLab team members into\nexperiences that will help them understand customer challenges with the product or our own obstacles in helping customers overcome those challenges.\nBefore you start, make sure you get light-agent access in Zendesk so that you can view Support tickets.\nIf you‚Äôre looking to get more exposure to customers, there are a few ways to get involved with Support:\nSupport Shadow Program\nGitLab team members interested in learning about the GitLab Support team and our responsibilities are encouraged to participate in the Support Shadow Program. The Support Shadow Program is a way that team members outside of Support can spend time shadowing, learning, collaborating, and working together with the GitLab Support team.\nIf you‚Äôre not part of the Support team and you‚Äôd like to participate in this program, open\na Support Shadow Program issue\nin the\nsupport-team-meta\nproject. This issue will be used to organize, plan, and track progress toward this program.\nGitLab Support uses Calendly to facilitate scheduling Shadow pairing sessions with participants. If you‚Äôre part of the Support team and you‚Äôd like to volunteer to host Support Shadow Pairing sessions with folks outside of Support, please\nopen a Schedule update request issue\nrequesting that Support Ops add you to the Support Shadow Program Calendly rotation.\nJoin Support Calls\nSupport calls are published on the\nGitLab Support Calendar\n. There are:\nCustomer calls\nbetween customers and engineers. The description will include a ticket ID. Go to\nhttps://gitlab.zendesk.com/agent/tickets/<id>\nto view the ticket.\nPairing sessions\nbetween two or more engineers working on one or more tickets.\nOffice hours / Help sessions\nwhere more experienced Support engineers share their knowledge.\nTraining sessions\nwhere a member of the support team is presenting on a specific topic\nJoin an Emergency Call\nA great way to get involved is to join a customer emergency call. You can monitor\n#support_self-managed\nfor PagerDuty alerts. Alternatively,\nif you have access to PagerDuty you can be scheduled into a\nshadow rotation\n.\nHow our team helps fellow team members at all levels ‚Äì Helping Hierarchy\nIf you go through the responsibilities for each role in Support you can piece together how the organization works. We wanted to make a simple clear way to think about how the roles work together to solve problems:\nSupport Engineers help solve customer problems via tickets, merge requests, and other customer facing activities.\nManagers help solve Support Engineer problems by removing obstacles, joining in on customer facing activities, and working with support engineers to build systems that work to reduce friction and enable results and efficiency.\nSenior Leaders help resolve and avoid scaling problems by addressing team performance to KPIs, prioritizing initiatives and being responsible for the achievement of global results.\nVP of Support helps resolve and avoid company wide problems, by identifying growth and team design challenges, and reporting on progress to the Executives and Board.\nThis simple list helps to give an easy way to set expectations and align problem solving in different roles.\nHow we measure our performance\nWe use\nKey Performance Indicators\n(KPIs) to keep track of how well each Engineering Department is doing, including the Support team, as a whole.\nThe KPI measurements can be found under the\nReporting\ntab in Zendesk if you have the appropriate access, but progress on meeting these KPIs is also tracked via the aforementioned KPI link.\nWe review these KPIs weekly in the\nSupport Week-in-Review\n.\nOur Success Pillars\nIn service of achieving our KPIs and OKRs, there are three key pillars that we must balance to achieve success:\nPeople: Continue to hire excellent engineers and managers, at the right time, and the right places. Support our existing engineers and work with each team member towards realizing their full potential through professional development and smart tooling.\nProcess: Iterate on existing processes and develop new, simplified processes that enable global scaling.\nPerformance: People understand how their contributions help the global team attain our results, with guidance on what these contributions look like in practice.\nAt various times it‚Äôs easy to over-optimize on one of the pillars to solve a problem, but considering all three is key to avoiding short-sighted decision making.\nAbout the Support Team\nThe\nSingle Source of Truth\nfor information about Support Team Members - everything from email address and\npersonal interests to product skills and group memberships - is the\nsupport-team project\n.\nThe\nSupport Team Home Page\nis\nbuilt from the information in that project. Many other Support tools and\nautomations make use of it also. See the\nSupport team entry page\nof the\nSupport Team wiki\nfor details of the structure of an individual Support team member‚Äôs file.\nInformation for and about the different parts of the Support Team can be found in the following sections of the Support Handbook:\n/support/engineering\nis content that is for Support Engineers. Think: Zendesk workflows and technical resources.\n/support/license-and-renewals\nis content for the Licensing and Renewals Support Engineers and Managers. Think:\ncustomers.gitlab.com\nand working with the Fulfillment Product Team.\n/support/managers\nis content that is for Support Managers. Think: how to manage issues, run 1:1s and leadership sync information.\n/support/readiness\nis the landing page for Support Readiness. Think: how is the support team preparing for X?\nBelow we also have some commonly referenced pages:\nSupport Engineer responsibilities\nSupport Engineer knowledge areas\nSupport Engineer career path\nSupport Manager responsibilities\nFY25 Direction\nGitLab Support‚Äôs vision is to deliver a consistent, ‚Äúdelightful‚Äù experience to our customers. Our team members will collaborate across all timezones to seamlessly deliver the results our customers care about while continuing to strengthen and scale the team.\nThe overall direction for Support in FY25 will continue to build from the foundations laid in FY24. We will continue to focus on KPI achievement and evolve and iterate our approach to support, keeping the customer centered in our outcomes. Following on to the company‚Äôs overall strategic objectives, specific areas of focus are:\nOur ability to achieve business aligned results for our customers\nHow our team structure supports that ability\nMaintaining and augmenting the culture of our team\nDelighting our customers\nWhile our\npublicly visible OKR page\nand\nKey Performance Indicators\nreflect the focus and progress for the current quarter, the following provides more detail on the items included in the themes for the entire FY25.\nImproving our ability to achieve results for our customers\nFY24 was a challenging year in many aspects. As the workload and customer expectations grew, we needed to look at how we could improve efficiency and create a differentiated Support experience. FY25 is a year to focus and align on our customer needs and put our customers at the center of our understanding of their situations, perceptions, and expectations. To that end, we will:\nIterate our support model, keeping our customer experience and business vision at the forefront of our decision making.\nAdopt a prioritization strategy incorporating our customers‚Äô business impact and GitLab business need, while building an understanding within the Support team for the why behind it.\nExamine and shape the macro and micro trends in group performance and individual efficiency.\nBuild a compelling customer digital support experience that will improve the customer journey and reduce toil for our team.\nTeam structure and how it supports our ability to achieve results\nIn FY23 / FY24 we moved towards dividing the team into globally distributed groups of engineers. In FY25 we‚Äôll build on that foundation and extend towards differentiating support offerings to better align with customer requirements. This year, we will:\nProgress enhanced support offerings while partnering more closely with the Customer Success Team to meet our customers‚Äô business needs.\nImprove how we route and address customer tickets to an appropriate expert with a mind for growing individual engineers from just starting their support journey to complete stewardship of the support journey experience.\nTeam culture and how it supports our ability to achieve results\nAs GitLab grows, Support‚Äôs influence within the company as advocates for customers must also grow. We need to continue to strengthen the Values-driven cultural attributes that promote efficient collaboration and results for customers while maintaining GitLab Support as a great place to work. In FY25 we will:\nBuild leaders and influencers within GitLab as advocates for customers.\nExpand our enablement, training, and education to prepare the current and future generations of Support Engineers to meet the needs of our customers.\nDelight our customers\nFY24 was a year of better understanding the needs of our customers. In FY25 we will focus on\ndelighting\nthem. We will:\nPair with our customers and train engineers in setting and exceeding customer expectations.\nImprove our ways to serve customers and resolve their problems before a ticket is even opened while keeping that context to enrich tickets for Support Engineers if a ticket\nis\nneeded.\nImprove our understanding of Support Delivery Quality and how we can consistently provide world class service.\nWe are also Product Development\nUnlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our\ncore values\n:\nDogfooding\nEveryone can contribute\nAs such, everyone in the department should be familiar with, and be acting upon, the following statements:\nWe should all feel comfortable contributing to the GitLab open source project\nIf we need something, our first instinct should be to get it into the open source project so it can be given back to the community\nTry to get it in the open source project first, rather than later, even if it‚Äôs 2x harder\nWe should be using the whole product to do our jobs\nWe are all familiar with our\nDogfooding process\nand follow it\nWe should not expect new team members to join the company with these instincts, so we should be willing to teach them\nIt is part of managers‚Äô responsibility to teach these values and behaviors\nDogfooding in Support\nCiting our\ndogfooding\noperating principle, people sometimes ask why GitLab Support doesn‚Äôt use\nService Desk\n.\nDogfooding is using a piece of GitLab\nfor its intended purpose\n. For example, one\ncould\nuse GitLab issues as a newsletter (and we do! See:\nSupport Week in Review\n), but creating merge requests to help Issues serve as a newsletter more effectively wouldn‚Äôt be dogfooding unless that improvement also helps its core use case.\nIn other words: Dogfooding is using the product in the way that our customers would use it to the end of discovering and solving pain points that they have. Dogfooding supports customer results.\nAt GitLab Support we use Service Desk to process\nPersonal Data Requests\n, but not for our global support because the customer for Service Desk is primarily small teams soliciting\nbug reports, feature requests, or general feedback\n. Through our use of Service Desk in this smaller setting we‚Äôve been able to influence product direction towards adding features like\ninternal notes\n.\nWe continually evaluate product features for use-cases within Support and provide feedback and feature requests where blockers exist. Support will always prioritize customer results over any other consideration.\nOKRs\nCurrent Quarter\nThese were previously populated via a tool we are no longer using.\nTODO: Replace with current GitLab implementation\nPrevious Quarter\nThese were previously populated via a tool we are no longer using.\nTODO: Replace with current GitLab implementation\nHazards and Challenges\nSee\nManagers/Hazards page\nCommunications\nThe GitLab Support Team is part of the wider Engineering function. Be sure to check the\ncommunications section in the Engineering handbook\nfor tips on how to keep yourself informed about engineering announcements and initiatives.\nHere are our most important modes of communication:\nSupport Week in Review\n. Important updates for everyone in support.\nThe SWIR is expected reading/listening for all support team members. You should try to check the SWIR at least once a week. If you have something to share with the entire team this is the best place to do it. For example, if you have an issue for a common bug, an issue that requires feedback, or an issue about an external project you‚Äôre working on.\nSlack channels\nfor\n‚Äúinformal‚Äù\ncommunication.\nDue to our data retention policy in Slack, things shared there will eventually be deleted. If you want to share something there, please make sure it also has a more permanent place in our docs, handbook, issue tracker, etc.\nMeta issue tracker\nfor any issues regarding workflows,\ngeneral team suggestions, tasks or projects related to support, etc.\nWhere we want to ensure that important messages are passed to the global support team, we will use this\nmessaging template\n. This ensures that these messages are delivered across our communications channels in a structured and documented manner.\nGitLab.com\nGroups\nWe use the following GitLab Groups to notify or add support team members to issues and merge requests on\nGitLab.com.\nGroup\nWho\n@gitlab-com/support\nAll Support Team members\n@gitlab-com/support/amer\nAMER Support\n@gitlab-com/support/apac\nAPAC Support\n@gitlab-com/support/emea\nEMEA Support\n@gitlab-com/support/dotcom\nSupport members with primary SaaS focus and GitLab.com admin access\n@gitlab-com/support/dotcom/console\nSupport members with GitLab.com console access\n@gitlab-com/support/customers-console\nSupport members with CustomersDot console access\n@gitlab-com/support/licensing-subscription\nSupport members focused on License and Renewals\n@gitlab-com/support/managers\nAll support managers\n@gitlab-com/support/managers/amer\nAll AMER support managers\n@gitlab-com/support/managers/apac\nAll APAC support managers\n@gitlab-com/support/managers/emea\nAll EMEA support managers\nProjects\nOur team projects and issue trackers can be found in the\nSupport parent group\n. Here are some selected projects\nwhich are relevant to team communications.\nProject\nPurpose\nsupport-team-meta\nIssues to discuss and improve Support processes\nsupport-training\nCourses and training for Support team including onboarding\nsupport-pairing\nRecord of pairing sessions where we work together on tickets\nfeedback\nCollects SSAT survey responses from Zendesk in the form of issues\nsupport-operations\nSupport Operations team project\nsupport-readiness\nSupport Readiness project\nSupport team meta issue tracker\nWe use the\nSupport meta issue tracker\nfor tracking issues\nand creating issues that may require feedback around support.\nIf you‚Äôre interested in working on a project or task related to\nsupport feel free to create an issue and link to any external issues or projects so that we can:\nBe transparent to the entire team what we‚Äôre working on\nHave the opportunity to collaborate on external projects or tasks with other team members who are interested\nAvoid having team members do duplicate work\nIssues regarding documentation or features for GitLab, our FOSS project or any of the GitLab\ncomponents should not go in this issue tracker, but in their appropriate issue tracker.\nIf you have a proposed solution that is actionable, it‚Äôs best to\nstart a merge request\n, tag the team for feedback and link in the\nSupport Week in Review\n.\nSlack\nWe follow GitLab‚Äôs\ngeneral guidelines for using Slack\nfor team communications. As only 90 days of activity will be retained, make sure\nto move important information into the team handbook, product documentation,\nissue trackers or customer tickets.\nspt_vs. support_ prefix\nWhen naming channels, ‚Äúspt‚Äù is meant for internal channels, meaning those that will be of use to the Support Team mainly. They should be public so others may join if they choose. If a channel has a ‚Äúsupport‚Äù prefix, it is meant as a public interface where other teams will interact with the Support Team.\nDaily Stand-up bot\nThe\nSupport Daily Slackbot\nis an automated tool designed to facilitate daily standup Slack threads across\nvarious teams and regions at GitLab. It posts customized messages to specific\nSlack channels based on type and target. For further details of the different\nvariations, please refer to the\nREADME file\n.\nChannels\nChannel\nPurpose\n#support_team-chat\nSupport team lounge for banter, chat and status updates\n#support_gitlab-com\nDiscuss GitLab.com tickets and customer issues\n#support_self-managed\nDiscuss self-managed tickets and customer issues\n#support_gitlab-dedicated\nDiscuss GitLab Dedicated tickets and customer issues\n#support_licensing-subscription\nDiscuss Licensing & Renewals tickets and customer issues\n#support_ticket-attention-requests\nDiscuss escalated tickets with the Support Manager On-Call\n#support_operations\nDiscuss operational items related to how Support works\n#support_leadership\nDiscuss support team internal matters which require support managers‚Äô attention\n#recruiting-support-engineering\nDiscuss support team hiring-related matters\n#spt_amer_global\nDiscuss topics specific to Global SEs in AMER\n#spt_emea\nDiscuss topics specific to Global SEs in EMEA\n#spt_apac\nDiscuss topics specific to Global SEs in APAC\n#spt_pairing\nUsed when working together on tickets and issues\n#spt_us-government\nDiscussion about topics pertaining to US Fed Support\n#spt_onboarding\nNew here? Topics related to onboarding\nPrivate Channels\nAt GitLab we are to be\npublic by default\nunless there is a valid reason for it to not be public. While Slack\nis not public, the spirit of opening up discussions so that\neveryone can contribute\nmeans that private channels should be kept to a minimum.\nThe following private channels are permanent fixtures in support. Usage estimates are approximate based on traffic in Feb 2022.\nChannel\nWho is in it\nPurpose\nHow often is it used?\n#spt-vp-directors\nDirectors+\nUsed for Senior leadership to discuss and coordinate on sensitive topics / budget / etc.\n3-4 threads per week\n#spt_managers-internal\nManagers+\nUsed for sensitive topics that are applicable to managers that aren‚Äôt appropriate for public channels\n4-5 threads per week\n#spt_managers-internal-apac\nAPAC Managers+\nUsed for sensitive topics that are applicable to APAC managers that aren‚Äôt appropriate for public channels\n3-4 threads per week\n#spt_managers-emea\nEMEA Managers+\nUsed for sensitive topics that are applicable to EMEA managers that aren‚Äôt appropriate for public channels\n4-5 threads per week\n#spt_managers-amer\nAMER Managers+\nUsed for sensitive topics that are applicable to AMER managers that aren‚Äôt appropriate for public channels\n1-2 threads per week\n#spt_hiring-mgmt\nManagers+, Recruiting, Finance\nUsed for coordinating offers and discussing hiring specifics that can be shared in the public channel\n1-2 threads per week\n#spt_leadership_internal\nManagers+, Staff+\nPrivate version of\n#support_leadership\n, used for sensitive topics where Staff and Managers are the appropriate audience\nrarely used\n#spt_staff_internal\nStaff+\nUsed for sensitive topics that are applicable to Staff Engineers that aren‚Äôt appropriate for public channels\nrarely used\nBefore starting a new private channel, ask yourself\nWhy\ncan‚Äôt\neveryone contribute here?\nAppropriate answers might be:\nthis channel will be used to discuss material, non-public information that may affect designated insider status.\nthis channel will be used to discuss something that would negatively affect the privacy of an individual or group of individuals, such as performance, compensation or other sensitive matters\nPrivate channels are not appropriate for:\nReducing noise (create a new public channel for this)\nLong-lasting discussions (unless included in the table above)\nGetting materials ready for public comment\nValues are only values if you do them when it is hard. See more discussion on\n.\nUser Groups\nGroup\nWho\n@support-dotcom\nSupport Team Members with GitLab.com Admin Access\n@support-selfmanaged\nSupport Team focused on Self-Managed tickets\n@support-team-apac\nSupport Team APAC\n@support-team-emea\nSupport Team EMEA\n@support-team-americas\nSupport Team AMER\n@supportmanagers\nSupport Managers\n@support-managers-apac\nSupport Managers APAC\n@support-managers-emea\nSupport Managers EMEA\nIf you need to be added to one or more of these groups, please open an issue in\nthe\naccess requests project\n.\nGoogle Calendar\nWe use the following team calendars to coordinate events and meetings:\nGitLab Support\nCalendar ID\ngitlab.com_9bs159ehrc5tqglur88djbd51k@group.calendar.google.com\nSupport - Time off\nCalendar ID\ngitlab.com_as6a088eo3mrvbo57n5kddmgdg@group.calendar.google.com\nSupport - Customer Events\n- EXPERIMENTAL: see\nsupport-team-meta#5153\nAdd these calendars to your GitLab Google calendar by clicking on the ‚Äú+‚Äù sign next to ‚Äúother calendars‚Äù, and choose ‚Äúsubscribe to calendar‚Äù. Enter the relevant ID mentioned above. If you need access to these calendars, ask a support team member for help.\nZoom\nZoom name format\nPlease use the following formats for your name in Zoom as described in\nadding your title to your name in Zoom\n. As a primarily customer facing team, these formats were chosen to help identify you by vendor and role in calls\nwhere customers are present.\nFor the sub-department, use the smallest unit you belong to. Again, bias for customer understanding over technical correctness.\nFor example,\nCustomer Support -> Support Engineering (use Support Engineering)\nCustomer Support -> Support Readiness -> Support Operations (use Support Operations)\nCustomer Support -> Support Engineering -> US Federal Support (use US Federal Support)\nExamples\nIntermediate Support Engineer:\n-\nSupport Readiness Specialist - Ops:\n-\nSenior Support Engineer:\n-\nStaff Support Engineer:\n-\nSupport Manager:\n-\nSenior Support Manager:\nDirector:\nVice President:\n-\nWeekly Meetings\nThe Support Team has several meetings each week. These allow us to coordinate and\nhelp us all grow together. Each meeting has its own agenda and is led by a different member of the team each week.\nDiscussions are encouraged to be kept in issues or merge requests so the entire team can collaborate, regardless of time zone.\nAny demos or announcements that need to be shared with the entire team should be shared in the\nSupport Week in Review\n.\nAll Zoom and agenda links can be found on the relevant calendar entry in the\nSupport Calendar.\n.\nSupport Team Call\nSupport team members in some regions meet up regularly.\nDetails of these calls are on the\nWeekly Support Team Call workflow page\n.\nSupport Leadership Meetings\nThe Support management team meets regularly. Details of these calls are on the\nSupport Managers page\nSupport Monthly Business Review (MBR)\nThe leadership team (Staff, Managers, Senior Managers, Directors) meet monthly to align on business objectives and cross-region collaboration. There is SAFE data shared, but a read-out is disseminated for wider team awareness.\nSupport Regional Team Meetings\nSome regional Support teams have meetings oriented around company news, Support initiatives, training plans, and connectedness.\nWeekday\nRegion\nMeeting Name\nPurpose\nTuesday\nTeam Meeting\nTuesday\nTeam Meeting\nThursday\nTeam Meeting\nSenior Support Engineer Office Hours\nSenior and Staff Support Engineers are encouraged to host office hours. These office hours are intended to strengthen\nthe team through mentoring. It is up to each Senior/Staff Support Engineer whether they schedule office hours, and how\noften. Please see the ‚ÄúGitLab Support‚Äù Team calendar to view office hours and invite yourself.\nWe encourage hosts to include what they will cover in the calendar event description and optionally a document to track.\nSome ideas of what one can expect at a Senior/Staff Support Engineers‚Äô office hour:\nTroubleshooting a difficult ticket\nTrying out a GitLab feature (Geo, CI, SAST, k8s, etc.) or a new workflow\nReproducing a particular bug\nFixing a bug\nCreating or updating documentation\nThinking through a particular problem\nHosting a ticket crush session\nCreating a Meeting\nYou may wish to host a sync call. To do so, you can create an event on the\nSupport Calendar.\n. To invite team members to the event, you can use the appropriate\nSupport email alias\n(internal Handbook, GitLab team members only)\nSupport Week in Review\nEvery Friday, we do a week in review, inspired by the\ngreater Engineering organization week in review\n.  You can add topics any time by using the SWIR\ntopic form\n.\nAny workflow changes or announcements should be shared in the SWIR and we recommend you check at least once a week to stay up to date on recent changes. Ideally, the information shared here should have a permanent location such as an issue or merge request.\nHow to read/listen to the SWIR\nYou can read the Support Week in Review by viewing the\nmore recent issue\nwith the\nSWIR::Digest\nlabel in the\nSWIR project\n.\nYou can subscribe to this label to be notified when the latest SWIR has been generated.\nFor audio editions recorded after 2022/07/01, you can find a link to the audio edition of the SWIR within the respective issue (this is so we comply with the\nSAFE framework\n. An archive of all audio editions can be found in the\nSupport Week in Review - Audio Edition folder\non Google Drive (internal only).\nWe encourage anyone in the team to share.\nSWIR Topics\nWe currently have the following topics, each in its own section in the SWIR:\nActionable\n. For items that require a decision to be made or action to be taken (such as, asking for feedback on an issue).\nThings to know about\n. Share items that you would like to share with the team, like projects you‚Äôre working on, known bugs, new workflows, cool articles you found, etc.\nTeam Member updates\n. New team members, internal transfers and nother news about our team members!\nWhat Did we Learn this Week\n. A space to share things you‚Äôve discovered (or rediscovered!) and learnt.\nSupport Operations Corner\n. Announcements and information from the Support Operations team\nKudos\n. Give a special kudos to other team members or highlight something they did.\n-\n. A selection of the positive SSAT feedback received from customers during the week\nMetrics report\n. Review the support metrics for the span of the week.\nSWIR Labels\nSWIR Issues can also have their own Tags or Labels in the GitLab project. These are used to highlight specific Areas of Focus (L&R, SaaS‚Ä¶). Labels are used on the Issues only, they do not appear in the digest Issue nor in the Google doc.\nOne label,\nManager Attention\n, is used for policy changes or other topics of\nwhich Support Managers should specifically be made aware. You can find the\nManager Attention\nlabel\nhere\n]\nand subscribe to it.\nYou can read about the origins of the auto-generated SWIR\nin this issue\n.\nCross-Department Roles\nThe Support Team collaborates with many other departments throughout GitLab -\nSales, Channel, Product and Legal, to name a few. And we have created two\ndifferent roles to help those collaborations to be as effective and efficient\nas possible.\nSupport Stable Counterpart\nThe Support Stable Counterpart role is designed to provide a strong connection\nbetween a product or non-product team and Support. The purpose is discussing\nproduct issues, sharing product knowledge and representing customer needs, as\nwell as sharing knowledge about each team‚Äôs work and developing processes and\ndocumentation to allow the two teams to work together well. If you are interested\nin becoming a Support Stable Counterpart, or would like to learn more about the\nrole, read the\nSupport Stable Counterparts\npage.\nProcesses\nUpdating Support Team documents using merge requests\nThe Support Team records our institutional knowledge, processes and workflows\nin multiple places, such as the handbook and project issues templates. When\nupdating such documents, make sure to have visible artifacts of approval on\nyour merge requests before merging even if you have received approval somewhere\nelse. This avoids the impression of changes being made without any oversight\nor accountability.\nArtifacts of approval can include:\nGetting a peer or manager to review and merge your MR\nA peer or manager showing their approval using\nMR approvals\nA peer or manager commenting ‚Äúlooks good to me‚Äù\nSupport Workflows\nInternal Policies and Procedures Wiki\nHow to Work with Tickets\nHow to Submit issues to Product/Development\nHow to Submit Code to the GitLab Application\nHow to Submit Docs when working on customer issues\nLicense & Renewals Workflows\nSlack Workflows\nEach Slack channel within Support has a number of\nWorkflows\nattached to them that are used to provide information to users. The source files for each workflow live in the\nslack-workflows\nproject.\nIssue Notification\nSome workflows are meant to notify the team of new issues created in the relevant project.\nIn these cases, a\nproject webhook\npasses information to\nZapier\n,\nwhich then sends the information to a Slack workflow.\n#support_gitlab-com\nGitLab Project\n,\nZap\n,\nSlack workflow\n#support_licensing-subscription\nL&R related internal requests\nGitLab Project\n,\nZap\n,\nSlack workflow\nEmoji Reaction\nProviding information by reacting to a message with a specific emoji.\n#support_escalations\nTicket Escalation\n-\n:escalate:\n- Directs the user to follow the proper procedure to escalate a support ticket or internal issue.\n#support_gitlab-com\nTicket Escalation\n-\n:escalate:\n- Directs the user to follow the proper procedure to escalate a support ticket or internal issue.\nQuestion Redirect\n-\n:leftwards_arrow_with_hook:\n- Directs the user to post their question in a more appropriate Slack channel.\nRemove Link Preview\n-\n:slack:\n- Politely asks the user to remove any unfurled link previews in their message.\nWelcome\n- This automated workflow automatically sends a direct message to new members of the channel that contains helpful information.\nContact Management -\n:admission_tickets:\n- Direct the user to follow the proper procedure to manage the support contacts for a Zendesk Global organization.\n#support_self-managed\nTicket Escalation\n-\n:escalate:\n- Directs the user to follow the proper procedure to escalate a support ticket or internal issue.\n#support_licensing-subscription\nTicket Escalation\n-\n:escalate:\n- Directs the user to follow the proper procedure to escalate a support ticket or internal issue.\nTime Off\nSee the\nSupport Time Off page\nOnboarding\nSee the\nSupport Onboarding page\nPromotion\nAfter getting promoted, make sure to update your title in:\nour\nSupport team page\n, and the change would be reflected in Zendesk\nthe company team page following the same steps in\nAdd yourself to the Team Page\nConsider updating the title on Slack and on Zoom, following the guidelines in\nZoom name format\n.\nSupport Pods\nIn GitLab Support, we use\nSupport Pods\nto organize support engineers as they\nwork. Each Support Pod is a cross-region, single skill group of engineers who\nare interested in their Support Pod‚Äôs specific product area. They are engineer-\nlead. To join or start a Support Pod you can read more below.\nSee the\nSupport Pods handbook page\nand the\nWorking with Support Pods workflow page\n.\nImproving our processes - ‚ÄòActive Now‚Äô issue board\nThe Support team uses\n‚Äòsupport-team-meta‚Äô project issues\nto track ideas and initiatives to improve our processes. The\n‚ÄòActive Now‚Äô issue board\nshows what we‚Äôre currently working on. It uses three labels:\nBlocked\n- waiting for another team or external resource before we can move ahead\nDiscussing this week\n- under active discussion to arrive at a decision\nIn Progress\n- actively being worked on\nSome principles guide how these labels are used:\nmaximum of six issues\nat any time for each label (18 total issues)\nAll issues with one of the above labels must be\nassigned\nto one or more support team members\nAll issues with one of the above labels must have a\ndue date\nno longer than a week ahead\nIf an issue is too big to complete in a week it should be\nsplit into smaller parts that can be completed in a week\n(a larger ‚Äòparent‚Äô issue is OK to keep in the project, but it shouldn‚Äôt make it onto the ‚ÄòIn Progress‚Äô column)\nEach week we look at the board and discuss the issues to keep things moving forward.\nBy keeping a maximum of six issues for each label, we\nlimit work in progress\nand make sure things are completed before starting new tasks.\nAdding and managing items on the board:\nSupport managers will regularly review the board to keep items moving forward.\nThe team can\nvote on issues not on the board\nby giving a ‚Äôthumbs up‚Äô emoji so we can see\npopular issues\n.\nSupport managers will look at popular issues and add them to the board when there is room.\nSupport managers will\ncurate\nissues to prevent a large backlog. Unpopular or old issues can be closed / merged to keep the backlog manageable.\nSupport Slackbot\nThe\nSupport Slackbot (archived)\nhas been retired.\nSupport Resources\nHandbook links\nGitLab Team page\nProduct Categories\n- Find out what team handles what\nStatement Of Support\nSupport Managers\nSupport Hiring\nSupport Channels\nOn-Call\nLicense & Renewals\nAdvanced Topics\nBrowser extensions\nAI and Support Work\nDocumentation\nGitLab\nGitLab.com Status\nGitLab Releases\nWriting docs\nGitLab Documentation guidelines\nDocumentation Style Guide\nGitLab Markdown\nSetting up GitLab\nGitLab Architecture Overview\nRequirements\nInstallation methods for GitLab\nBacking up and restoring GitLab\nOmnibus configuration settings\nOmnibus Configuration options\nOmnibus Database settings\nDebugging GitLab\nLog system\nRake tasks\nMaintenance Rake Tasks\nDebugging resources for GitLab Support Engineers\nGitLab Rails Console Cheat Sheet\nGitLab features\nInstall GitLab Runner\nGitLab CI example projects\nElasticsearch\nConnecting GitLab with a Kubernetes cluster\nDeveloping GitLab\nGitLab development utilities\nFeature flags\nWhat requires downtime?\nAdvanced Support Topics\nTraining modules that Support team members can complete to gain expert skills.\nAI and Support Work\nGuidelines and best practices for Support Team AI use, including tool recommendations, workflow integration, and responsible AI principles\nBrowser Extensions\nDocumentation for managing, developing, and publishing browser extensions for the GitLab Support team\nCustomer Support Department Performance Indicators\nDisplays Support KPIs, pulled from full list of company performance indicators.\nEnhanced Support Offerings\nEverything about Support's Enhanced Support Offerings\nGitLab Support On-Call Guide\nFor customers that have Priority Support, the Support Engineering Team is on-call and available to assist with emergencies\nGratis Support for Prospects\nDetails on how to request support for prospects\nKnowledge Base\nGitLab Support's Knowledge Base\nLicensing & Renewals\nLicensing & Renewals (L&R) comprises efforts to resolve problems customers face when they purchase or renew their GitLab subscription.\nPartnerships\nSupport specific information on partnership's workflows, automations and processes.\nProviding Excellent Customer Service\nGuidance for delivering a great experience to our customers\nReadiness Team\nEverything you wanted to know about the Readiness sub-department\nRequesting Gratis Support\nDetails on how to request gratis support for customers and prospects\nSupport Channels\nCommunication channels for GitLab Support\nSupport Engineer Career Path\nThe details of this page are to outline more specific guidance around promotions for Support team members. Page should not be moved without a Support Global Change Management issue.\nSupport Engineer Resources\nIf you want to learn more about what support engineers do and how they do it, this is the place.\nSupport Engineer Responsibilities\nA detailed listing of the responsibilities of Support Engineers in GitLab. Page should not be moved without a Support Global Change Management issue.\nSupport Engineering Data Analysis Community\nPurpose This page serves as the cornerstone for a Support Engineering data analysis community of ‚Ä¶\nSupport Glossary\nThe Support Glossary contains definitions and explanations for support-related acronyms and terms.\nSupport Incident Response Framework\nDelivering customer results during critical moments through collaboration, iteration, and transparency‚Äîtransforming incidents into opportunities for trust.\nSupport Learning & Training\nLearning Pathways available to Support team members\nSupport Managers\nSupport Managers activities and references\nSupport Pods\nFlexible interest groups to focus on collaboration within Support and across functions\nSupport Stable Counterparts\nAn overview of the Support Stable Counterpart role and related expectations and goals.\nSupport Team APAC\nSupport Team APAC home page\nSupport Team Member Time Off\nGuidelines for how time off applies to Support team members and what actions need to be taken. Page should not be moved without a Support Global Change Management issue.\nSupport time off buddy system\nGuidelines for leveraging the Support time off buddy system\nSupport Workflows\nAI AI Workflow Duo Chat case scenarios for support GitLab Dedicated GitLab Dedicated Logs GitLab ‚Ä¶\nWorking With GitLab Support\nHow GitLab team members can work with and best ways to contact Support.\nLast modified July 18, 2025:\nRemove #fy23_support_promotions channel (\nd3ab8a91\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6475}
{"doc_id": "24b3c5019ab234d6", "url": "https://handbook.gitlab.com/handbook/sales/field-operations/field-enablement/gtm-enablement", "title": "Go-to-Market (GTM) Enablement motion | The GitLab Handbook", "text": "The Handbook\nSales\nField Operations\nField Enablement\nGo-to-Market (GTM) Enablement motion\nThe GTM Enablement function is designed to ensure that new products, SKUs, and offers are supported effectively and efficiently as they launch to field teams and ultimately go to market. This framework outlines the processes and standards necessary for successful GTM enablement launches, aligning and integrating closely with both the New Product Introduction (NPI) process and the Field Enablement team.\nThis page defines the GTM Enablement motion and how it aligns to current processes here at GitLab. The GTM Enablement function is designed to ensure that new products, SKUs, and offers are supported effectively and efficiently as they launch to field teams and ultimately go to market. This framework outlines the processes and standards necessary for successful GTM enablement launches, aligning and integrating closely with both the New Product Introduction (NPI) process and the Field Enablement team.\nThis framework standardizes the approach to GTM enablement across different product launches and offerings and reconciles related frameworks, including:\nNew Product Introduction (NPI) Process Criteria\nField Enablement High-Complexity to Low-Complexity GTM framework\nField Communications Tier 1-5 model\nProduct Marketing Tier 1-3 model\nGTM Revenue Play criteria\nRoles & responsibilities across GTM motion\nThe New Product Introduction (NPI) SteerCo\n:\nAssesses and approves the launch of the NPI process based on business cases presented by DRIs. These business cases must address product functionality, target market, value proposition, and financial opportunity. Once the SteerCo decides to proceed, they commit to a scope & launch timeframe (Step 4 in NPI Process: Planning Phase).\nThe NPI DRI\ndrives the feature or service strategy and is the primary business owner. This is the person requesting a new product, service, or SKU. The person is responsible for delivering the initial business plan, and ensuring that the launch meets business goals.\nThe NPI Program Manager\ncoordinates and directs the multiple parallel work streams required by the NPI process. In some cases, the DRI and the Program Manager may be the same person.\nGTM Enablement:\nGenerally, GTM Enablement leads the land and adopt strategy for net-new product and initiative launches at GitLab. This function works closely with the\nField Communications\nteam to land initiatives in the field. This team is responsible for creating effective, timely, and easily consumable communications with the Field team (Sales, Customer Success, Channel, Alliances, Revenue Strategy, Operations & Enablement).\nKey initiative areas are limited to:\nNew product introductions\nNew major SKU launches\nGTM Revenue Plays & Sprints\nSales Offers\nMajor Feature GAs & Product Updates\nCRO Annual Fiscal Year Launch\nFor this reason, GTM Enablement is one input into the NPI process. They provide guidance to the NPI SteerCo leads on what enablement considerations should be addressed when considering a launch timeline, including: potential enablement requirements, risks, and impact to field & partner teams. They also raise requirements from downstream workstreams as the main liaison between the field and launch teams. For launches that do not require the NPI process, GTM Enablement supports according to a tiered structure of effort.\nField Enablement:\nFocuses on the ‚ÄúReinforce & Sustain‚Äù motion, cascading information and training to field sales and customer success teams around new launches and initiatives to ensure long-term adoption, sustainment, and integration of new products and initiatives. For more information about the Field Enablement team, visit the\nteam handbook page\n.\nGTM Enablement coordination goals\nView\nlist of cross-functional stakeholders\nwith which this function collaborates. The GTM Enablement function adopts the sames goals as the New Product Introduction team in orchestrating downstream:\nEmpower teams:\nProvide teams with a way to identify when & how we need to fix problems or adjust course.\nInclude all relevant expertise:\nTeams participate in decisions that need to incorporate their requirements. We create more robust & efficient solutions by leveraging teams‚Äô expertise.\nProvide clarity and certainty:\nWe document decisions, and communicate them widely and as early as possible. We lock down decisions at various points in the process so that teams have a shared understanding and can move forward.\nIntroduce process without being overly prescriptive:\nProvide process to address coordination gaps. Balance this with empowering individual team members with expertise to make decisions.\nGTM Enablement Briefing Requirements\nTo launch the GTM Enablement process, a requester should fill out the\nintake form\nto determine level of effort and support.\nThe GTM Enablement DRI must be able to understand the following\nAnticipated Impact to the field:\nHow much does this change for them, how many does this affect, relevancy to segments and partners, level of attention needed, and time needed from the field to reach the desired outcome. Additionally, what is the actual projected impact (revenue, strategic importance, and geographic relevance) so we can understand the scope and level of behavior change needed.\nLevel of leadership buy-in\n: The requester should provide a list of leaders who have reviewed and signed off on the project\nTimeline confidence:\nThe requester should present dates that have already been confirmed by initiative leads as non-MNPI and with high confidence\nRelated materials & cadences:\nProject issue or epic, Key project milestones, Draft Program tracker, Plan for recurring async updates\nBased on this information, the GTM Enablement DRI will assign a Support Tier:\nThe GTM Enablement DRI will determine level of support that will be provided and anticipated outcome. Timelines associated with each Tier cannot be adjusted; instead the outcome will need to change to reflect the available timeline.\nDownstream teams, in turn, should raise\nAny internal factors (Field quiet periods, month/quarter/year end financial close, etc.) that create timing requirements\nAny bandwidth constraints or gaps in support\nFor reference, in order to launch the NPI process, the NPI DRI must communicate\nWhat\nwe‚Äôre launching: product features & functionality, service entitlements, or something else\nWhy\nwe‚Äôre launching: value proposition, strategic value, and scale of financial opportunity (understand that finance will not have built detailed models, but some financial justification must exist)\nWho\nwe‚Äôre targeting: Ideal Customer Profile (ICP) and target market\nWhen\nwe need to launch: any internal (e.g.\nField blackout periods\n, month/quarter/year end financial close, quiet periods, etc.) or external factors that create timing requirements\nThat we‚Äôre able to launch:\nproduct development is sufficiently far along that it makes sense to start the process, and GTM teams have sufficient bandwidth to do the work in the required timeframe\nGTM Enablement Operating Rhythm Overview\nPhase 1: Briefing & planning\nPhase 2: Project execution & launch\nPhase 3: Feedback & initial results\nPhase 1: Briefing & planning\nGTM DRI briefed and determines tiered support based on initiative and field impact\nBuilds workback plan in collaboration with workstream leads for confirmation (NPI, PMM, and/or Sales Strategy)\nIdentifies cross-functional working group and aligns to open cadences set by initiative DRI (NPI, PMM, Sales Strategy)\nProvides clear briefing to downstream teams for input and collaboration. Surfaces concerns or requirements back to upstream teams.\nDownstream teams inform their leadership and plan their reinforce & sustain motions by audience and desired impact\nPhase 2: Project execution & launch\nGTM DRI orchestrates launch and drives process\nMaintains close coordination on decisions & steps that affect others\nDelivers updates on progress & results to stakeholder groups upstream and downstream\nFE DRIs collaborate on reinforcement & cascades. Raise concerns and create open feedback loop with downstream teams.\nPhase 3: Feedback & initial results\nGTM DRI delivers wrap-up & final results reporting\nGTM DRI creates retro with FE teams. Participates in retros upstream & raises feedback from downstream\nFE DRIs reinforce & sustain motions begin\nIntegration with the NPI & Field Enablement teams, activities, and processes\nIn this process, GTM Enablement is integrated as main liaison to field enablement for land & adopt motion.\nNPI Planning:\nBased on the process within the\nNew Product Introduction (NPI) Handbook page\n. The NPI Program Manager communicates the plan & organizes logistics with the wider working group. This includes two key meetings:\nStakeholder kickoff (process-focused): Meeting with all NPI stakeholders to launch the process: share overview of timeline, milestones, what success looks like, expected challenges.\nProduct review (product-focused): Product Manager to present overview to all stakeholder teams. This is a deeper dive than stakeholder kickoff, and more focused on the product. GTM teams use this information for additional due diligence & clarity, and as an input to start developing their own strategies and roadmaps. (e.g. Deal Desk may have questions around usage boundaries, approval processes for non-standard steps, etc.)\nThese meetings are a chance for the various stakeholders and Subject Matter Experts (SMEs) in the organization to raise risks/issues sooner rather than later. The SMEs may ask questions that can‚Äôt be answered yet; that‚Äôs an opportunity for further discussion later in the project. For stakeholders this is a chance to understand what will be expected of them in the coming weeks/months.\nNPI Program Manager completes GTM Enablement intake issue to begin the briefing process. The intake issue reflects the briefing requirements outlined in the NPI process alongside GTM Enablement requirements. Enablement DRI schedules a briefing session depending on the contents of the issue.\nGTM Enablement DRI is briefed and determines tiered support based on initiative and field impact. Provides initial feedback or considerations to NPI lead that may affect timeline or impact.\nGTM Enablement DRI and Product/Product Marketing Lead align on approach & launch timeline as well as MNPI restrictions. (NPI‚Äôs might be\nlimited access\nin which case, details would not be open to all team members only those that need-to-know).\nGTM Briefing & Planning:\nGTM Enablement lead participates in topical deep dives, and builds a workback plan in collaboration with NPI workstream leads for confirmation. They also identify the downstream cross-functional working group that needs to be informed.\nGTM Enablement DRI aligns to open cadences set by initiative DRI and workstream leads (NPI lead, PMM lead, Sales Strategy, FE leads)\nGTM Enablement lead schedules and provides a briefing to FE leads once any MNPI restrictions are lifted.\nFE leads inform their leadership and plan their reinforce & sustain motions by audience and desired impact.\nThis action reflects the NPI process approach where workstream leads are empowered to deliver and manage their work accordingly. A framework will be provided that allows flexibility for these SMEs to determine the best path for reinforcement & sustainment.\nFE leads and the GTM FE DRI check-in async or in established team cadences to ensure that work is on track against the defined timeline. The GTM FE DRI should partner with teams to facilitate decision making and problem solving where needed. NPI projects can be highly complex and the teams will need to discuss challenges regularly.\nThe GTM FE DRI will surface challenges covered with FE leads to the NPI team for consideration, action, or as part of the retrospective process.\nGTM Execution and Launch:\nGTM FE DRI orchestrates the launch and drives process, using packaged enablement templates defined by cross-functional teams and collaborating closely with Field Enablement to ensure a seamless transition.\nSimilar to NPI process: Both workstreams maintain close coordination on decisions & steps that affect others\nGTM FE DRI Delivers updates on progress & results to stakeholder groups upstream and downstream\nFE DRIs collaborate on reinforcement & cascades. Raise concerns and create open feedback loop with downstream teams.\nPost-Launch Evaluation:\nGTM Enablement delivers closed-loop reporting on all enablement activities and engagement aligned to the GTM Enablement Framework.\nGTM Enablement participates in\nretrospectives\nupstream and downstream (merging where possible) with various working groups and engages in feedback loops to assess the launch‚Äôs success and identify areas for improvement, ensuring continuous enhancement of the NPI and enablement processes.\nField Enablement reinforce & sustain motions begin.\nLast modified December 13, 2024:\nRemove trailing spaces (\na4c83fb3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1948}
{"doc_id": "cb3bb3847a255c2b", "url": "https://handbook.gitlab.com/handbook/engineering/ai/search", "title": "Global Search Group | The GitLab Handbook", "text": "The Handbook\nEngineering\nAI Engineering\nGlobal Search Group\nThe Global Search team is focused on bringing world class search functionality to GitLab.com and self-managed instances.\nVision\nThe Global Search Group focuses on bringing world class search functionality to GitLab.com and self-managed instances.\nThis page covers processes and information specific to the Global Search group. See also the\nGlobal Search\nand\nCode Search\ndirection pages.\nMission\nThe group is responsible for improving and expanding upon our current global search implementations using Elasticsearch, PostgreSQL, Zoekt, and Gitaly. Areas of responsibility will include global search functionality, UI, ingestion mechanisms, optimal indexing, administrative tools, and installation mechanisms for self-managed installations.\nAdditionally, we build and maintain critical AI context infrastructure, including:\nAI Context Abstraction Layer\n: A unified interface for Retrieval Augmented Generation (RAG) across multiple vector databases (Elasticsearch, OpenSearch, PostgreSQL with pgvector), enabling AI features to work regardless of underlying storage\nGitLab Zoekt\n: GitLab‚Äôs scalable exact code search service and file-based database system, with flexible architecture supporting various AI context use cases beyond traditional search. It‚Äôs built on top of open-source code search engine Zoekt.\nThese systems will be fundamental to providing high-quality context for AI features via Retrieval Augmented Generation work, which includes:\nIdentifying and preparing new useful data for our AI-powered features in collaboration with feature teams and the AI Framework team\nStoring vector embeddings of epics, issues, MRs, source code, and more\nProviding retrieval APIs for those vector embeddings, metadata filtering, and ensuring permissions are enforced\nEnabling fast, precise code search and context retrieval essential for AI context\nThis team doesn‚Äôt own custom searches for specific features, such as the ‚Äúfilter bar‚Äù on issues which is part of the\nIssue Tracking\ncategory owned by the\nProject Management group\n.\nTeam Members\nThe following team members are permanent members of the Global Search Group:\nName\nRole\nChangzheng Liu\nBackend Engineering Manager, Global Search\nArturo Herrero\nStaff Backend Engineer, Global Search\nDmitry Gruzd\nStaff Backend Engineer, Global Search\nJohn Mason\nSenior Backend Engineer, Global Search\nMadelein van Niekerk\nSenior Backend Engineer, Global Search\nRavi Kumar\nBackend Engineer, Global Search\nSiddharth Dungarwal\nBackend Engineer, Global Search\nTerri Chu\nStaff Backend Engineer, Global Search\nTom√°≈° Bulva\nSenior Frontend Engineer, Global Search\nStable Counterparts\nThe following members of other functional teams are our stable counterparts:\nName\nRole\nBen Venker\nSenior Product Manager, Global Search\nAshraf Khamis\nSenior Technical Writer\nCleveland Bledsoe Jr\nSenior Support Engineer\nBrenda Nyaringita\nSupport Engineer(EMEA)\nShared Responsibilities\nThe Global Search team shares responsibilites with the AI Framework team in the area of\n(RAG). Specifically, we will collaborate in the data preparation stage and information retrieval stage of the RAG process.\nAI Context Infrastructure and Advanced Search data stores\nThe Global Search team maintains several key systems that power both traditional search and AI context capabilities:\nCore Infrastructure Components\nElasticsearch\n: Powers Advanced Search functionality with full-text search, aggregations, and vector similarity search capabilities\nGitLab Zoekt\n: GitLab‚Äôs scalable file-based database system providing exact code search with enterprise-scale performance (48+ TiB indexed on GitLab.com). Beyond code search, Zoekt‚Äôs flexible architecture serves as a foundation for various AI context use cases\nAI Context Abstraction Layer\n: A unified Ruby gem interface enabling RAG across multiple vector databases (Elasticsearch, OpenSearch, PostgreSQL with pgvector), ensuring AI features work regardless of underlying storage solution\nThese systems work together to provide comprehensive search and AI context capabilities, from traditional keyword search to sophisticated vector similarity matching for AI features.\nAdvanced Search as an Enabling Framework\nBeyond powering GitLab‚Äôs global search functionality, Advanced Search serves as a critical framework that enables other teams across GitLab to overcome the inherent limitations of PostgreSQL for complex search and analytics use cases. Teams leverage Advanced Search infrastructure to:\nScale beyond PostgreSQL constraints\n: Handle large-scale text search, aggregations, and analytics that would be prohibitively expensive or slow in PostgreSQL\nEnable sophisticated filtering\n: Support complex multi-field queries, faceted search, and advanced filtering capabilities\nPower analytics and insights\n: Generate aggregations, statistics, and insights from large datasets without impacting primary database performance\nSupport AI and ML workflows\n: Provide vector similarity search, embeddings storage, and retrieval capabilities essential for AI features\nThis framework approach allows feature teams to focus on their domain expertise while leveraging battle-tested, scalable search infrastructure maintained by the Global Search team.\nA note on basic search\nBasic search utilizes Postgres for text searching and Gitaly for code searching. Both functionalities are significantly limited compared to with Advanced search.\nCurrent state of Advanced Search scopes\nThere are many data types and search scopes already available via the Advanced Search interfaces. Below is a table that outlines the various available data types and the status of various functional elements, such as permissions, cross-group searching, and embeddings.\nData type / scope\nPrivacy / Permissions\nCross-namespace / cross-group searching\nKeyword search\nSimilarity search & Embeddings\nMetadata filtering\nCode\nYes\nIn progress\nGroup, Project, Include/exclude archived, include/exclude forks, Language, Filename, Path, Extension\nIssues\nYes\nGroup, Project, Status, Confidentiality, Labels, Include/exclude archived\nMerge requests\nYes\nNo\nGroup, Project, Status, Include/exclude archived\nEpics\nYes\nNo\nGroup, Project\nComments\nYes\nNo\nGroup, Project, Include/exclude archived\nUsers\nYes\nNo\nGroup, Project\nCommits\nYes\nNo\nInclude/exclude archived\nMilestones\nYes\nNo\nGroup, Project, Include/exclude archived\nProject\nYes\nNo\nGroup\nWiki\nYes\nNo\nGroup, Project\nMeetings\nWhenever possible, we prefer to communicate asynchronously using issues, merge requests, and Slack. However, face-to-face meetings are useful for establishing a personal connection and addressing items that would be more efficiently discussed synchronously, such as blockers.\nThe Global Search Group meets weekly on Tuesdays at 14:00 UTC.\nThe Global Search Group also has an Open Discussion Hour on Thursdays at 12:30 UTC\nWork\nWe follow the general workflow and principles defined in\nProduct Development Flow\nand\nEngineering Workflow\n. To bring an issue to our attention, please create an issue in the relevant project. Add the\n~\"group::global search\"\nlabel and any other suitable labels. If it is an urgent issue, please reach out to the Product Manager or Engineering Manager listed in the\nStable Counterparts\nsection above.\nBelow are a few guidelines the team follows in the day-to-day work.\nWe use asynchronous communication with each other and with other GitLab teams via GitLab, Slack, Google Docs, etc.\nWe have weekly team meetings, 1-on-1 meetings, and virtual happy hours via Zoom to discuss various topics and create team bonding.\nWe encourage all backend engineers in our team to have their changes reviewed by someone else in our group. It‚Äôs great for knowledge sharing.\nWe organize our tasks under Epics and Issues. The Product Manager and Engineering Manager go through the backlog at the planning phase of each release and put issues into the next one or two milestones. The issues on the\nmilestone board\nare sorted based on priority. The higher priority issues are placed on the top.\nWe apply the Deliverable label to the issues that we intend to close in a milestone before the milestone starts. Issues added during a milestone should not have the Deliverable label applied. We review these issues in the middle of the milestone, usually the first week of each month. We will remove the Deliverable label from the issues that are not likely to make it into the release.\nWe apply the Stretch label to the issues that we intend to start during a milestone but are not committing to closing.\nWe work with the UX team for features that need their design input by labeling the issues with a UX workflow label and adding the corresponding UX team counterpart as the assignee. We use\nworkflow::problem validation\nand\nworkflow::solution\nvalidation for user research and\nworkflow::design\nfor UI design and prototyping. Once the design is finished,\nworkflow::ready for development\nlabel will be added as an indicator that development can start. For minor UX/UI changes, we contact our UX counterpart or the Product Design Manager to request a review for fast iterations.\nWe work with the Quality team for issues that require input from a testing perspective by labeling the issues with\nworkflow::planning breakdown\nand adding the SET counterpart as an assignee. Once SET reviews the issue, they acknowledge back with the label\nquad-planning::complete-action\nor\nquad-planning::complete-no-action\nWe work with the Technical Writing team for issues that need documentation change by labeling the issues with\ndocumentation\nand adding our counterpart in the Technical Writing team as assignee. Our technical writer helps us update the corresponding document. The documentation change normally happens together with the code change.\nWe work with our stable counterpart in the Security team for issues that need input from a security perspective. We suggest using team planning issues, for example,\nthis one\n, for communication.\nWe work with the Support Engineering team by collaborating on issues directly. We invite our counterpart in the Support Engineering team to our team meeting every month to have direct communication.\nWhen team members are ready for their next tasks, they will pick an issue from the milestone board and become the issue owner by assigning the issue to themselves. Team members should prioritize issues with the Deliverable label. The issue owner will be responsible for finding the solution to the issue. They can propose a solution by opening a Merge Request. They can also break down the issue into smaller sub-issues if it makes sense to take an iterative approach.\nBefore going out of office for an extended time, assign items still in review to the Engineering Manager. The Engineering Manager can reassign as needed.\nWhenever a team member reviews an author‚Äôs work that is out of office for an extended time, they are welcome to complete the changes requested if they deem themselves comfortable with the remainder of the work.\nWe review and prioritize bugs every week. It is common for bugs to represent the problem without identifying the impact. Because the Product Management and QA share the responsibility of assessing every bug for priority, severity, and details. Severity uses an approximation of the Risk Matrix to identify potential risk and frequency. Priority is based on total impact over time. Occasionally, something of a lower priority/ severity will be added to a milestone when it relates to work currently scheduled.\nReview all new bugs for content, priority, severity, and milestones\nReview any bugs missing priority or severity\nPrioritize bugs for the current milestone. 10% of scheduled work should be focused on bugs\nSchedule bugs for future milestones based on capacity, severity, priority, and relationship to any scheduled work\nBreaking changes process\nBefore a major milestone starts, we prepare an epic with all the breaking change issues linked. As usual, we work to get approvals but keep the MR in draft to prevent it from merging before the major milestone. If an MR is independent, we can have the\nmaster\nas a target branch. If not, we can have a sequence of MRs with target branches set to each other. As soon as the first one merges, the next will automatically target\nmaster\n.\nEvery MR that was created before the breaking change milestone should have this or a similar warning in the description:\n:warning: This MR must be kept as a draft and cannot be merged until **DATE** :warning:\nBugfix backport process\nWe review the bugfix merge requests every week. To facilitate this process, we have created scoped labels:\nbackport::required\n,\nbackport::skip\n, and\nbackport::complete\n.\nThe\nbackport::skip\nlabel will be added to merge requests if no backport is needed.\nThe\nbackport::required\nlabel will be added to the merge requests that need to be backported to a previous release in the initial review. The DRI will follow the\npatch release process\nto backport the fix to a previous release. Once the backport is done, the\nbackport::complete\nlabel will be added to indicate the whole process is complete.\nAdvanced Global Search Rollout on GitLab.com\nThe team has been actively working on enabling Elasticsearch powered Advanced Search on GitLab.com.\nBased on our analysis\n, we set our first target to roll this feature out for all the paid groups on GitLab.com. You can find more details about the timeline and progress in the links below.\nPlan of Advanced. Search Rollout on GitLab.com\nSteps and Enhancements of Advanced Search Rollout on GitLab.com\nSeverity Labels for Search Issues (\n~advanced search\n,\n~global search\n)\nType of Operation\n~severity::1\n- Blocker\n~severity::2\n- Critical\n~severity::3\n- Major\n~severity::4\n- Low\nRecall Record, Global\nAbove 10 seconds to timing out\nBetween 7 and 10 seconds\nBetween 4 and 7 seconds\nBetween 2 and 4 seconds\nTime until inserted record is recallable\nAbove 15 minutes\nBetween 15 and 10 minutes\nBetween 10 and 5 minutes\nBetween 3 and 5 minutes\nThe two types of operations we detail severity metrics for above are:\nRecall Record, Global: This is the time it takes to recall a record using a globally scoped search of GitLab.com. Records could be entities such as projects, users, groups, etc.\nTime until inserted record is recallable: This is the elapsed time between adding a new record and having that new record be recallable via a search. This process depends on many underlying technologies such as the\nGo indexer\n,\nSidekiq queues\n, and the Elasticsearch database.\nWeighting for Search Issues\nWe use the Fibonacci rating system to assign weights to Search issues. Below are a few guidelines when setting issue weight:\nIssues that include\n~backend\nand\n~frontend\nwork should have the weights added for a total weight representative of the work effort.\nSpike issues are assigned a weight to help timebox the effort.\nBugs will not be given a weight.\nAny issue weighted over 5 should be broken down into smaller iterative steps if the issue does not contain\n~backend\nand\n~frontend\nwork.\nWeight\nDescription\n0\nNo effort or trivial effort (example: Documentation typo or Feature Flag Rollout)\n1\nLow effort (No Database migrations or Advanced Search migrations)\n2\nLow-Medium effort\n3\nMedium effort\n5\nHigh effort\nMR reviews\nWe have the following guidelines for doing reviews on Global Search Team MRs:\nThe MR author is responsible for deciding if the initial or maintainer reviews should be done by a Global Search Team member and can indicate that in a comment or by assigning the reviewers.\nDraft status indicates that the MR is not ready to be merged, but the author could decide to assign a reviewer while in draft mode. Unless a review is urgent, the author should wait for the pipeline to pass before assigning a reviewer.\nWe use\nConventional Comments\nto communicate effectively in review comments.\nThe merge request author resolves only the threads they feel they have fully addressed and all discussions have been closed, anything else is resolved by the reviewer. When a merge request has many threads, it is helpful for the reviewer to go back to open threads to pick up where the previous discussions were left off.\nOncall escalation coverage\nAs the Global Search Team requires special domain knowledge, such as Elasticsearch, we borrow team members with this domain knowledge from other groups to cover the on-call escalation when we are understaffing, especially during the holiday seasons. In general, we will follow the\ndev\non-call process. The Elasticsearch domain experts, identified by domain_expertise on their profile, may be contacted when SRE and dev on-call engineers cannot resolve the production incidents. We don‚Äôt expect the domain experts to work outside their normal working hours. In case of emergency, we will follow the rules and best practices outlined in our\nIncident Management\nhandbook. To assist team members in catching up on the latest development status and resolving potential incidents, we have created a\nGlobal Search Incident Management document\nas a reference.\nOnboard domain experts from other groups to cover production incident escalation\nWhen onboarding domain experts from other groups to help cover production incident escalation, we may consider the following actions:\nSuggest the team member add\nelasticsearch\nas their\ndomain_expertise\nin their team member profile\nAdd the team member to the Slack group global-search-team which can be used by SREs and other on-call engineers to contact in case of emergency\nCreate the access request for the team member to grant them access permissions to Elasticsearch cluster\nSchedule\nwalk-through sessions\nwith the team member to go over the latest architecture and development status\nOffboard domain experts from production incident escalation coverage\nRemove the team member from the Slack group global-search-team\nRevoke the team member‚Äôs access permission of Elasticsearch cluster\nGlobal Search Team Milestone Board\nGlobal Search Team Workflow Board\nGlobal Search Team Epics\nGlobal Search team slack channel (internal)\n#g_global_search\nGlobal Search Roadmap\nBug Review Board\nWe utilize the\nJobs to be Done\n(JTBD) framework to better understand our customers‚Äô and users‚Äô needs. You can view the current list of our JTBD\nhere\n.\nPerformance Testing\nWe are exploring\nRally\nfor performance testing the Elasticsearch cluster. Workload data is determined using Kibana and stored in a\nGoogle Sheet\n(internal)\nResources\nDocumentations\nSearch and Advanced Search\nGitLab Elasticsearch Integration\nGitLab Advanced Search Development Guidelines\nGDK Elasticsearch Setup Instructions\nAI Context Infrastructure\nZoekt Design Document\n- Comprehensive architecture and implementation details\nGDK Zoekt Setup Instructions\nAI Context Abstraction Layer Design Document\n- Unified RAG interface architecture\nAI Context Abstraction Layer Source Code\n- Ruby gem implementation\nBlog Posts\nLessons from our journey to enable global code search with Elasticsearch on GitLab.com\nUpdate: The challenge of enabling Elasticsearch on GitLab.com\nUpdate: Elasticsearch lessons learnt for Advanced Global Search 2020-04-28\nHow the Search Team at GitLab Implemented a Risk Map to Direct Automated Testing Efforts\nGitLab‚Äôs data migration process for Advanced Search\nProduct Demos\nGitLab search with Custom Search Engines\nUse the GitLab search bar to navigate\nSearch suggestions for recently viewed issues and merge requests\nHow to search for epics in GitLab\nElasticsearch Migrating Issues To Separate Index Technical Overview\nAdvanced Global Search Rollout on GitLab.com\nSteps and Enhancements 2019-11-05: Search security rapid action started.\nAdvanced Global Search went ‚Ä¶\nGlobal Search - JTBD\nThe jobs-to-be-done that the Global Search group is solving for.\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3014}
{"doc_id": "84668c5dfdebd5c4", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/education-services/ilt-labs/sysadminhandsonlab1k8s", "title": "GitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nGitLab Professional Education Services\nGitLab Professional Education Services ILT Labs\nGitLab System Admin - Hands-On Lab: Exploring the Kubernetes Admin Dashboard\nThis Hands-On Guide demonstrates the admin dashboard of the Kubernetes GitLab installation.\nObjectives\nIn this lab, you will start to get familiar with the GitLab Admin dashboard. The Admin dashboard is one of the key areas administrators will use to manage their GitLab instances.\nTask A. Accessing the Admin Dashboard\nNavigate to your GitLab instance.\nAuthenticate to the instance as your root admin user.\nIn the left sidebar, select\nAdmin\n.\nTake some time to explore the various sections of the Admin area.\nTask B. Configure Instance Sign Up and Sign In\nTo help secure your GitLab instance, you can customize the way users sign up and authenticate with your instance. In this task, you will enable two-factor authentication and Admin Mode. Admin Mode will introduce additional authentication for Admin tasks in your GitLab instance.\nNavigate to the Admin area of your GitLab instance.\nIn the left sidebar, select\nSettings > General\n.\nSelect\nExpand\nnext to\nSign-up restrictions\n.\nIn\nAllowed domains for sign-ups\n, enter your company domain. This ensures only your company‚Äôs users can register an account.\nSelect\nSave\n.\nSelect\nExpand\nnext to\nSign-in restrictions\n.\nCheck on\nEnforce two-factor authentication\n.\nCheck on\nEnable Admin Mode\n.\nSelect\nSave\n.\nWhen you are navigated to the two-factor authentication page, select\nConfigure Later\n.\nTo re-enter Admin Mode, select your profile image in the left sidebar. In the resulting menu, select\nEnter Admin Mode\n.\nInput your Admin password in the prompt, then select\nEnter admin mode\n.\nLab Guide Complete\nYou have completed this lab exercise. You can view the other\nlab guides for this course\n.\nSuggestions?\nIf you‚Äôd like to suggest changes to the GitLab System Admin Basics Hands-on Guide, please submit them via merge request.\nLast modified November 14, 2024:\nUpdating names (\n23df6bff\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 339}
{"doc_id": "786d040399471af5", "url": "https://handbook.gitlab.com/handbook/company/pricing", "title": "Pricing model | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nPricing model\nMost GitLab functionality is and will be available for free in our Free tier. Paid tiers include features targeted for managers, directors, and executives.\nGitLab‚Äôs pricing strategy is set by the CEO. Everyone can contribute, and the best way to communicate is on the #pricing Slack channel.\nContributions are part of the day-to-day jobs of the following people:\nPrincipal Pricing Manager (Sean Hall)\nSenior Pricing Manager (Sarah DeVries)\nVP, Product Management (Justin Farris)\nPricing Strategy\nMost of GitLab functionality is and will be available for free in our Free tier. Our paid\ntiers include features that are\nmore relevant for managers, directors, and executives\n.\nWe promise\nall major features in\nour scope\nare available in Free too. Instead of charging for specific parts of our scope\n(CI, Monitoring, etc.) we charge for smaller features that you are more likely\nto need if you use GitLab with a lot of users. There are a couple of reasons for\nthis:\nWe want to be a good\nsteward of our open source product\n.\nGiving a great free product is part of our go to market, it helps create new users and customers.\nHaving our scope available to all users increases adoption of our scope and helps people see the benefit of a\nsingle application\n.\nIncluding all major features in Free helps reduce merge conflicts between CE and EE\nBecause we have a great free product we can‚Äôt have one price. Setting it high\nwould make the difference from the free version too high. Setting it low would\nmake it hard to run a sustainable business. There is no middle ground that would\nwork out with one price.\nThat is why we have\nPremium and Ultimate tiers\n.\nThe price difference between them is half an order of magnitude (5x).\nWe will charge per user, per\napplication, or per instance. We do include free minutes with our subscriptions\nand trials to make it easier for users to get started. As we look towards more\ndeployment-related functionality on SaaS it‚Äôs tempting to offer compute and\ncharge a percent on top of, for example, Google Cloud Platform (GCP). We don‚Äôt\nwant to charge an ambiguous margin on top of another provider since this limits\nuser choice and is not transparent. So we will always let you BYOK (bring your\nown Kubernetes) and never lock you into our infrastructure to charge you an\nopaque premium on those costs.\nThe Value of Free users\nAs a commercial organization, we always want to grow the number of paying customers, therefore we are focused on increasing the free to paid conversion rate. However, GitLab offers a free product, and our free users bring tremendous value to the company beyond just the likelihood of converting to a paid customer one day.\nAwareness/Mindshare: A large free user base helps GitLab become known to the developer community and stay top of mind.\nProduct Familiarity/Training: Offering a free product invites anyone to try out GitLab without any barrier so many developers become familiar with GitLab. Through using the free product, many users are trained on how to use GitLab functionality which makes them more effective when using GitLab for their job.\nAdvocacy/Internal Champion: Happy loyal free users become advocates of GitLab, which brings more users and strengthens our brand. We often see users of GitLab for personal projects then become an internal champions to advocate their employers to buy GitLab. This personal use -> organizational use cross over and bottoms-up growth can‚Äôt happen without our free product.\nContributions/Community: Many free users are also active contributors to the product so they make GitLab better. They also help grow our community which becomes an even more valuable asset to all free and paid customers.\nThird party support/Platform: Free users increase our total user base, and a large user base makes 3rd party tools/APIs/integrations more likely to support GitLab, growing our ecosystem and enhancing our platform status.\nEnable product-led growth & Reduce Customer Acquisition Cost: our free product enables GitLab to acquire more users at a lower customer acquisition cost, as some of them will purchase via self-service funnel since they are already familiar with GitLab and won‚Äôt require a full sales cycle to be convinced to buy.\nUser habit/Retention lever: offering a free product allows users to develop a habit before they pay, therefore the paid customers are more likely to see higher ROI of GitLab. Additionally, even if the customer stays on the free plan, we are not losing the customer to a competitor.\nPricing Philosophy\nOur pricing philosophy is aligned with our\n.\nCollaboration\n: We want to keep the trust of our customers through a pricing approach that supports long-lasting customer relationships.\nResults\n: We aim to get a great ROI for our customers while maximizing IACV for GitLab over the long-term.\nEfficiency\n: Our pricing approach should be easy to understand, plan, and order.\nDiversity, Inclusion and Belonging\n: We build GitLab to be the best option for a wide variety of organizations, including educational institutions and organizations in different geographic regions.\nIteration\n: We want to encourage the full scope of GitLab to be adopted over time.\nTransparency\n: We are public and explicit about what our pricing is based on.\nPricing Methodology\nWe take a value-based pricing approach at GitLab. The core of the value-based pricing is to understand the value proposition that our innovations provide to our current and future customers for that offering. We aim to price our offerings to achieve continued growth and financial success for both the customer and GitLab.\n1. Value Proposition\nTo understand the value that we deliver to our customers, we focus on the benefits that our customers can receive to achieve their business goals. The value to our customers can include:\nDevelopment cost reduction\nRevenue gain due to decreased time to market\nImproved reliability and security\nGreater and more effective collaboration\nEmotional contribution of having delighted users\n2. Customer Collaboration\nDefining and quantifying the value being delivered does not happen in isolation. We regularly engage with customers to understand how our solutions help them. These engagements are important as they will provide insights on how our innovations are valued by the customers and how it impacts our customers‚Äô willingness to pay. Willingness to pay is a crucial element when we decide on how to price and packaging our offerings.\n3. Competitive Landscape\nWe understand that customers have choices when they decide to make a purchase. Hence,  understanding the competitive landscape of our products is very critical. With respect to competition, we focus on the key differences between our value proposition and the competition‚Äôs value proposition. Our pricing aims to reflect the differential value that we provide. We aim to design the pricing structure that works best for our customers compared to our competitors inclusive of pricing metric.\n4. Mutual Success\nTo following our pricing philosophy, we aim to support long-lasting customer relationships. When we develop our pricing, the target is that both our customers and GitLab become successful together. For long term success, where we can run a sustainable business and meet our company‚Äôs financial goals, we do also consider cost to serve and margins as factors when pricing is determined. It is important to note that while costs and margins are factors in pricing, value provided to our customers is the foundational element.\nDepartments and Decision Making\nPricing affects Product, Marketing, and Sales.\nTherefore, general pricing decisions are made by the CEO.\nProduct makes most decisions on a day-to-day basis about what feature should go\nin what plan based on\nthe paid tiers\n.\nThe following table describes how large cross-functional pricing decisions should be made.  This decision making method differs from our normal\nmethod due to the extremely cross-functional nature and business risk of large pricing decisions.\nResponsibility\nRole\nDescription\nResponsible\nGroup Manager, Pricing\nResponsible for analysis and recommendation\nAgree\nVP Monetization, Chief Product Officer, CRO\nShould ideally agree with the recommendation\nPerform\nPricing, Fulfillment, Sales Ops, Product Marketing, and Website teams\nExecutes the recommendation\nInput\nShould be consulted and allowed to provide input prior to decision\nDecide\nFinal decision maker\nTo ensure alignment across stakeholders, a monthly Pricing Steering Committee is held to align on upcoming monetization decisions, discuss historical insights/trends, and prioritize areas of opportunity.\nThree Tiers\nWe have three pricing tiers.\nHow we make decisions on a day-to-day basis is specified on our\nstewardship page\n.\nSelf-Managed/SaaS tier\nFree\nPremium\nUltimate\nPer user per month\n$0\n$29\n$99\nWho cares most about the feature\nIndividual Contributors\nDirectors\nExecutives\nMain competitor\nGitHub Team\nGitHub Enterprise\nVeracode, Checkmarx\nType of sell\nNo sell\nBenefit/solution\nTransformation\nBuyer Based Tiering Clarification\nWhen considering buyers as part of product tiering decisions we use the following guidance:\nFree is for a single developer, with the purchasing decision led by that same person\nPremium is for team(s) usage, with the purchasing decision led by one or more Directors\nUltimate is for strategic organizational usage, with the purchasing decision led by one or more Execs\nWhen the tiering of a feature is being evaluated, the\nstewardship promise\nwill override this guidance.\nExamples\nUnderstanding the distinction of our buyer-based model can be difficult. In it we focus not on the user of the feature, but on the buyer and in what cases a feature would be useful to that buyer even in cases where the buyer is not the user. When making these decisions we ask questions like:\nWho would drive the demand for this feature?\nAt what level of an organization does this feature add value?\nBelow we list product categories and the current and proposed features which reside in a given tier to highlight how the buyer-based model works in practice.\nFeature - Kanban Boards\nProject and Group Boards (Free)\n: The primary user and buyer for Issue Boards in general is Individual Contributors. While group boards likely span teams, there are also valid use cases for an individual to organize code in several projects and manage issues across those projects at the group level. The key differentiation is that an Individual Contributor will likely only ever need a single group level Issue Board; whereas Managers need several group level Issue Boards to facilitate their team‚Äôs workflows. (\nDocumentation\n)\nIssue Weight on Boards (Premium)\n: The users assigning issue weights are individual contributors but the value of that weight is for Directors of teams to ensure proper milestone planning. (Documentation\nwith respect to boards\n)\nMultiple Group Issue Boards (Premium)\n: Issue boards which span groups are valuable to and also utilized by groups of groups which aligns to Director level likely buyer. (\nRelated documentation\n)\nIssue Board Epic Swimlanes (Ultimate)\n: Everyday users of swimlanes might be individual contributors but their value is in the visualization of activity for company wide portfolio management by Executives. (\nRelated issue\n)\nFeature - Merge Requests\nMerge conflict resolution (Free)\n: Resolving merge conflicts is part of the daily workflow and valuable to Individual Contributors. (\nDocumentation\n)\nMerge approvals (Premium)\n: Requiring approvals on merge requests is only useful when there is a team working on a project and their Director (who isn‚Äôt likely to be the user of approvals) requires specific individuals to provide their approval. (\nDocumentation\n)\nMerge request reviews (Premium)\n: Merge request reviews enables the expedient review by multiple team members on merge requests. Typically large enough teams to value the reduced chatter accompanying MR reviews reside under Directors. (\nDocumentation\n)\nFeature - Pipelines\nBuilt in CI Pipelines (Free)\n: CI Pipelines are integral to GitLab and used primarily by Individual Contributors. (\nDocumentation\n)\nShow pipeline code coverage rate (Premium)\n: The ability to determine code coverage rate is particularly valuable to Directors. (\nDocumentation\n)\nPipeline dashboards (Premium)\n: Dashboards of pipelines across groups and projects are primarily used and valued by Directors. (\nDocumentation\n)\nDownloadable all pipeline logs (Ultimate)\n: Pipeline logs would be generated and even downloaded by individual contributors, but the value of collating these logs is provided to Executives responsible for ensuring compliance.\nUsage can be more important than buyer-based tiering\nWhile our\ntiers\nare based on who leads the purchasing decision there are occasions where driving increased usage takes precedence over the natural buyer-based tiering, always in favor of moving features to lower tiers. Here‚Äôs why:\nAs GitLab develops new categories that are likely to be in paid tiers, it is still reasonable (and in many cases advisable) to get the early MVC versions to land in the free or lower paid-tier to spur adoption, encourage contributions and gain feedback from the wider user base. Over time, the team can then add more features on top of the MVC functionality that will be placed in the paid-tiers. However, Product Managers should not move features down in violation of the buyer-based model unless there is a concrete high confidence plan to follow up with meaningful additions to the base feature that can be added to and monetized with the right paid tier\nOur dual flywheels work because of increased users.  Having capabilities in open-source - even for those oriented towards teams encourages more usage - increased users. Those users are essential to creating contributors, an improved product and future tiered features.\nWhen considering tiering, if the feature is geared to be used (not purchased) by individuals and the answer to the question of\nwho cares most about this feature?\nis\ntoday - very few people\nwe should consider open-sourcing it to get more usage and contributors. Regardless of the reasoning behind the down-tiering of a feature, the\nprocess\nshould still be followed.\nPrevent the ability to circumvent tiering\nIf a feature in the free tier (typically useful to ICs, but also to others) will open up the possibility to circumvent or abuse our tiering policy, we should exercise extreme caution and err on the side of maintaining the feature in a paid tier. An example of this is\nrepo pull mirroring\nthat is useful for ICs and can also be great for adoption (i.e. trying out GitLab.). However, it may also lead to larger instances in Free tier mirroring to smaller instances in paid tiers to make use of paid-tiered features. This goes against our pricing terms & conditions and therefore we chose to keep the feature in a paid tier instead of Free tier.\nPartner integration considerations\nWhen building integrations to partners it is possible to make exceptions to our buyer-based model when our tiers don‚Äôt align well with those of the partner, but only in favor of lower tiers. As an example - a partner who provides a team collaboration tool with a free tier might desire any GitLab integration to be present in our free tier despite it clearly being appropriate for single team usage. The go-to-market benefits of this partnership can outweigh the divergence from our buyer-based model.\nThemes\nWe‚Äôve found that bundling our features within tiers into themes\nresulted in improved conversion performance on our pricing page\n. While it is how we present the value of our tiers, this themes-based representation serves as an additive filter for, and is not a replace of, our Buyer Based Tiering decision.\nThemes are then bundled into\ncustomer value drivers\n.\ngraph TD;\nFeatures-->Categories;\nCategories-->Groups;\nGroups-->Stages;\nStages-->Sections;\nFeatures-->Themes;\nThemes-->ValueDrivers(Value Drivers);\nCurrent Theme List\nThe following are our current set of capabilities:\nPremium\nFaster code reviews\nAdvanced CI/CD\nEnterprise agile planning\nRelease controls\nSelf-managed reliability\n10,000 compute minutes per month\nSupport\nUltimate\nAdvanced security testing\nSecurity risk mitigation\nCompliance\nPortfolio management\nValue stream management\nFree guest users\n50,000 compute minutes per month\nSupport\nWhat happens when themes don‚Äôt match our Buyer Based Tiering Decisions?\nBecause themes are filters for our Buyer Based tiers, there can occasionally be instances where a feature‚Äôs tier and its natural theme don‚Äôt match. In that case we should either:\nAdjust the feature‚Äôs tier to match\nAdjust the feature to a different theme to match\nAdjust the naming of the theme to better capture the distinction between tiers\nNote - it is OK for the features of a theme to be in the listed tier and any lower tier.\nLower tiers have more relative value\nOur lower tiers have:\nA lower price.\nA lower discount we give (price after discount is closer to list price both absolute and as a percentage).\nThe price charged for value generated is lower.\nMore value per dollar as a percentage (in absolute numbers higher tiers generate more net value)\nOur higher tier is still the best option for our customers:\nHigher tier adds much more absolute value. For example our top tier can add 2000% more value than our lower tier while still adding less relative value.\nThe Return On Investment (ROI) for higher tiers tends to be better than our lower tiers due to costs outside of the subscription. For example, when you switch to GitLab you will have a fixed cost in implementation and training. And if you use a lower tier you need to find a workaround for features you are missing out on, increasing cost and decreasing efficiency.\nThere are multiple reasons why our lower tiers have more relative value:\nThe lower tiers are older so they had more time to accumulate features.\nAny pricing model will have to be compatible with our open source tier. The open source tier should be the top alternative to our priced tiers. That tier has zero cost, zero discounting, a zero price charged for value generated, and infinite value per dollar. Our lowest tier should be the tier that is closest to that to make it possible for people to go from free to paid. As soon as they are paid we can help them to generate more value with GitLab, for example by using more stages. If they realize more value we can move them up in tiers.\nThe lower tiers (including open source) are a pipeline of future customers for the higher tiers.\nWe can easily increase revenue in the next 3 years by raising prices and/or making lower tiers less attractive (of course\nnever by moving features up\n). But we are optimizing the Net Present Value (\n) of the company with a 10% a year discount rate. This means we have to look beyond 3 years.\nRaising prices on our lower tiers might cause more revenue in the short term, both directly and by compelling most organizations to move to higher tiers. But the minority of organizations that switch to a competition will cause them to be much harder for us to reach in the future and will allow competitors a flywheel effect of their own. This tradeoff has to be calculated explicitly when raising prices.\nThat our lower tiers are popular is not a pricing problem but a communication problem. Higher priced tiers have less value per dollar as a percentage but generate more net value in absolute terms. It is up to us to explain that value in the product, with marketing, and in our sales interactions.\nOpen core projects capture (ratio of value created vs. captured) less value than proprietary projects. Because the pricing tiers are low relative to the value created the difference between the tiers can be much higher than with proprietary software. If you capture 1% you can easily introduce a new tier at 5x, if you capture 50% even doubling your price will take away all benefit for the customer.\nWe see customers on Premium but not users on Free. If we focus only on the visible customers that are on Premium we miss the largest opportunity. Premium is priced too if the conversion from Premium to Ultimate is lower than organizations becoming customers after using free. Currently this is not the case because it is much harder reaching out to free users since they aren‚Äôt customers and we don‚Äôt have a point of contact to discuss the value of higher tiers.\nArguments in favor of raising the price of the lower tier (which we won‚Äôt necessarily do) are:\nOur sales effort don‚Äôt change much with the plan, making lower tiers relatively much more expensive to sell.\nOver time we keep adding features to the lower tiers due to our\nBuyer Based Open Core model\nso you would expect prices to rise.\nWhile the absolute value of higher tiers is better and that seems the most rational measure people also do look at relative value and we should make sure that the price to go to a higher tiers is perceived well.\nMany successful open source companies charge a relatively high price for their most affordable plan.\nThe future growth of GitLab is much more influenced by how many people are using the open source version than our lower tier, so having fewer paid users is a relatively small impact.\nThe future competition for GitLab is much more likely to come from an open source project than a proprietary only product competing only with our lowest tier.\nWe can reduce the relative attractiveness of the lowest tier by open sourcing features, although this too makes it harder to raise the price of that tier.\nLots of companies don‚Äôt want to forgo support, especially in their first year, and there is little price elasticity there.\nPlease note that all the above is not a plea to add more or fewer features to lower tiers, we should just follow our\nBuyer Based Open Core model\n.\nConsistent names\nWe use the same names for SaaS and Self-Managed tiers because:\nThe feature set for our SaaS and Self-Managed offerings is largely consistent and we want SaaS and Self-Managed tiers to be as similar as possible.\nConsistent naming is easy to understand and use for our customers.\nType of sell\nA feature sell means that people want to buy the extra features. This can be done self-serve.\nA benefit sell means that people buy the business outcomes that come with fully utilizing GitLab. You need case studies, metrics like\nDevOps Score\n, and a quarterly check-in with a Customer Success Manager from Customer Success to review the status of the adoption plan. A competitive process can include a bake-off to show people are 10x faster in starting new projects with GitLab.\nA transformation sell means that people want to transform as an organization. They want to reduce cycle time by 10x and want us to help them. We do workshops with transformation consultants and define a complete, shared project.\nHybrid sales model\nThere is a big price difference between the different tiers (0$, $29, $99 per user per month, a price difference of infinite, 5x). For GitLab Inc., the majority of revenue comes from large enterprises buying the top two tiers.\nMost companies in a similar situation would focus only on the highest tiers.\nBut we want to make a our hybrid model work for the following reasons:\nWe want to keep being a\ngood steward of the open source project\n.\nThe free tier is a scalable way to create future customers.\nA 5x higher price doesn‚Äôt mean there is 5x more value, just like the Premium tier doesn‚Äôt provide infinitely more value than the gratis Free tier.\nWhen deciding between tiers, organizations should look at the ratio between how much extra value they get divided by how much extra they pay.\nIf this ratio is comfortably above 1, it makes sense to move to a higher tier.\nThe value is in making people more effective, saving time on integrating tools, driving faster time to value, and retiring other tools.\nThis should more than pay for the increased price of a tier.\nAn analogy would be Apple‚Äôs iPhone: it is twice as expensive as an average Android phone, and while it doesn‚Äôt deliver twice as much value, the extra value is worth the extra cost.\nAs\nStripe documented\n: hybrid is hard, because ‚ÄúThe most common result of attempting both models simultaneously is that only one of the models receives any traction, and (because these models weave themselves into all operations of the company) it typically strangles the other.‚Äù\nThis hybrid models is how we\nbridge the chasm\nbetween self-service and enterprise.\nCombining features in plans\nWe tried selling one feature at a time, but this was not feasible.\nAn improved version of that would be selling 7 main features, instead of 3 plans.\nExamples of main features would be: High Availability, Security, Service Desk, etc.\nThe advantages are:\nGradual upgrading to more expensive features.\nPay only for the features you use.\nAdd-ons are a common way of selling this.\nThe disadvantages are:\nIt is\nsuboptimal for both the buyer and GitLab Inc.\n.\nIt is hard for the buyer to estimate how much of each feature they will need.\nThe complexity can lengthen the sales process when buyers have to make separate tiering decisions for each group.\nFor users, it is unclear what features they can use.\nIt is not common in the industry, buyers don‚Äôt expect it, and it isn‚Äôt a boring solution (an operating principle under our\nefficiency value\n).\nThe true-up process becomes more complex.\nThe customer has to administer a process for how users can get more features.\nFeatures get less usage, and therefore the improvements are slower.\nIt is hard to do with a hybrid sales model, where there is a 25x difference between the lowest and highest paid plans.\nWe currently think the disadvantages outweigh the advantages.\nSingle plan for one customer\nThe advantages are:\nUsers can use more features from more stages uniformly. Taking advantage of the power the one DevOps application results in better ROI for the customer.\nBuyers do not have to estimate how much of each tier they will need.\nThere will not be confusion on what users can or can‚Äôt use.\nSimple pricing and true-up process.\nThere‚Äôs no increased product complexity to turn features on/off on a per user basis.\nSimpler administration: the customer will not have to administer a process to move users between tiers.\nThe disadvantages are:\nCustomers may be paying for feature they feel not enough users are using.\nMay lead to multiple instances with separate licenses for different groups.\nMore negotiation up front.\nIncreased renewal risks.\nWe believe having a single plan for one customer works because the advantages outweigh the disadvantages.\nFor the GitLab sales team and for GitLab customers, we suggest handling the objection by focusing on the\nvalue and business outcomes\nReporter User Permission Pricing\nAs our customers adopt GitLab as the single application for their entire DevOps lifecycle, we are hearing more and more non-developer use cases using GitLab for Agile project management. The main functionality that some non-developer roles need aligns fairly well with our\nreporter permission\naccess, including Managing Labels, Assigning Issues, and Creating and Editing Epics, etc. Those users don‚Äôt really need to use much other developer functionality.\nCurrently, we do not offer a different list price for users who only need the reporter permission because:\nThis pricing approach aligns with our\nBuyer Based Open Core model\n.\nThe list prices of our plans are blended prices with consideration for both developer and non-developer use cases.\nWe are\nselling a suite\nand taking care of specific non-developer use cases by making a discount conditional on not using part of the product.\nA simplified pricing and packaging (PnP) strategy serves customers in the optimal way per the industry best practice. More SKUs lead to a more complex PnP model as a company scales, which eventually causes huge confusion to customers.\nWe do not limit a license to the\nreporter permission\nin GitLab. Any reporter user can be updated to a regular developer user by using the same license.\nWe understand that our customers have non-developer use cases. Please\ncontact our sales team\nor connect with us via\nthis issue\nto discuss your specific use cases.\nTrue-up pricing\nWith true-up pricing, the license/sale is never blocking user growth.\nWe currently charge 100% for users added during the year, because some organizations gave an intentionally too-low estimate when we charged 50%. If we technically can count ‚Äúuser days,‚Äù we can make it fair for everyone. A pre-requisite of this would be customer adoption of\nCloud Licensing\n.\nFor customers on Cloud Licensing, we offer\nQuarterly Subscription Reconciliation\n.\nConsumption pricing principles\nThese are some principles we think are useful. These are not a promise not an entitlement. Our\npricing page\ncontains our current pricing which might deviate from the principles below.\nOur price is 5x the on-demand cost of the clouds, so we have 80% margin. This seems to be what‚Äôs common in our market (for example:\nGitHub\nand\nCircleCI\n), but we‚Äôre open to other companies fact checking us with list prices. Here‚Äôs\nour long-term cost model\nwhich shows how this enables us to get a 20% profit margin.\nThe user has the flexibility to bring their own resources whenever practical (for example, runners and clusters). This can be their on-premise equipment or from their own cloud contract.\nWe don‚Äôt want to compete with the major clouds because they are our partners. The only reasons we‚Äôd offer our own are because it needs to be in our infrastructure (repository storage) and it‚Äôs convenient for the end user (runners).\nWe reap the benefits of scale and sustained-use discounts. We use that to sponsor the resource use that isn‚Äôt priced. For example: Coordinating the runners, logging in, showing the interface, and sending emails.\nAs costs become more significant, we might start charging for it (E.g. bandwidth costs).\nWe can offer new services that make it easier to use GitLab, like for clusters that run Static Application Security Testing (SAST), Dynamic Application Security Testing (DAST), and other Auto DevOps features.\nThe consumption differences between the tiers should be proportional to the price difference between the tiers for the paid plans. The free tier should have an equal difference. Currently it is 5x between all the tiers.\nWe anticipate that not all of the consumption that is included in the accounts is used.\nWe simplify the pricing model for our customers whenever we can. For example, our pricing is one fee for storage, while the underlying repository might be on a Solid State Drive (SSD) or Hard Disk Drive (HDD).\nIn the future we can offer extra credits if users do something that generates value to the company. Similar to the Dropbox ‚Äúget GBs for inviting a friend‚Äù offering. Examples: Using new stages, linking to a partner (AWS/GCP), and inviting new users.\nPrepay vs. postpay: We select prepayment since it solves non-payment problems like bitcoin miners. It‚Äôs also more predictable for users with fewer unexpected bills, so it makes budgeting easier. Postpay reduces the risk of infrastructure going down due to the lack of funds. In GitLab, most of the consumption is driven by people in the organization instead of their customers. This makes it more likely that we can get them to pay quickly when that is needed. We should think about emergency processes for enterprise customers that have long ordering cycles.\nManual vs. automatic ordering: We need both. We‚Äôll start with manual ordering since that is simpler to make, we need it anyway, and it leads to fewer unexpected bills for customers. Automatic ordering will help customers prevent their developers being ineffective because they don‚Äôt have minutes. At some point, we might change the default from manual to automatic. If we do, we should communicate this well and always give customers the option to keep it manual.\nRecurring vs. non-recurring: We will make it recurring for anything that was manually ordered and non-recurring for anything that was automatically ordered. Recurring reduces work on the side of the customers. Non-recurring reduces the chance of customers paying for consumption they don‚Äôt use.\nRefundable vs. non-refundable: We‚Äôll make it non-refundable for now, since refundable is complex to implement, has legal constraints, and makes revenue recognition harder. Refundable would be better for customers that have more consumption purchased than they need.\nSplit vs. combined pricing: Do you charge separately for storage and minutes, or do you buy a bunch of credits you can use for both? We select split pricing, because it makes it simpler to understand. The hyperclouds are also going this way with\nreserved instances\nand\nfree tiers\nare also for specific products.\nDollars vs. credits vs. native: Do we add x dollars to an account, add credits, or add compute minutes and storage GBs. We choose native since it is simplest to understand if you do split pricing. Not all minutes are the same (sizes, operating system) but we can use a multiplication factor for that. More than 95% of the minutes are of the 1x type, so native instead of credits makes it easier in most situations.\nPartial vs. full refill: We do a full refill since it is simpler to communicate, understand, bill, and administer. CircleCI does a partial refill for 25% of your normal credits.\nHow much free? We should probably do 5x less than the lowest tier since we have 5x between the paid tiers. GitHub followed our pricing so that isn‚Äôt a good source of comparison. CircleCI does 250 minutes on the free plan.\nAccumulative vs. non-cumulative:\nWe currently think the pros with the non-cumulative approach outweigh the pros with the cumulative approach.\nIt seems that per namespace is easier to communicate.\nCustomers don‚Äôt need to do calculations on the total minutes and storage they are getting when signing on contracts, renewals, adding users, etc. as long as they stay under the total it is a predictable bill.\nIt is simpler to implement, and we already have it.\nThe allotment with the plan is to get people started, not for serious consumption, that you can buy separately.\nIt looks like a bigger number of minutes and storage.\nThis gives the most to free users, for whom purchasing consumption is a big hurdle to try GitLab.\nWe need to make sure that a paid tier doesn‚Äôt benefit from free users quota.\nSome other vendors‚Äô pricing metrics are like this as well.\nIt makes more logical sense.\nIt is more fair as customers will have more minutes and storage as they sign up more users.\nIt is aligned with our tier pricing metric.\nIt incentivizes more users per namespace of which we know it drives conversion.\nIt drives free users to more quickly buy consumption and convert them into customers.\nPer user vs. per namespace: Are the consumption limits provisioned per user or per namespace?\nIn the case of per namespace, the user gets more minutes and storage when they create another namespace. In the case of per user, the user receives fixed minutes and storage across all their contributions. We currently provision consumption limits per namespace. A user namespace also receives the group namespace‚Äôs quota.\nDoes storage pricing include other storage types: attachments, containers, etc.?\nThe single storage pricing covers registry (containers are part of it), repository, artifacts, and attachments, etc.\nPricing is not a substitute for scalability. For example, putting something in a higher tier if we are worried about its scalability is not what we do. We should rather start with Beta, limited access, or mailing lists etc.\nPrice difference between self-managed and SaaS\nArguments to charge more for SaaS:\nThe costs of SaaS are higher for GitLab.\nIt is more logical in revenue recognition.\nArguments to at least make them equal:\nSelf-managed pricing tends to be higher, in general.\nThere is more market demand for self-managed.\nNo incentive for sales to sell SaaS over self-managed.\nWe want to incentivize customers to move to SaaS with us because we have more data (better customer success outcomes) and we don‚Äôt have to rewin their business when they do move from self-managed to SaaS\nNot sure what is normal in the market. Adobe did a good job, but they moved from perpetual licensing to subscriptions, where it is hard to\ncompare the two prices\n.\nWhen is a dollar not a dollar?\nThis is the title of a\ngreat article\nof which we‚Äôll apply the 8 points to GitLab below:\nCost vs. revenue: we can help both to reduce costs and increase revenue, make sure you align to what the priorities of the prospect are.\nPrinciple agent problem: for a VP of Engineering, you probably want to highlight our features that provide more visibility over features that save developers time.\nExisting expense vs. new expense: we can make use of existing budgets, be aware that multiple can apply (dev tools, security, operations, DevOps transformation).\nAbove vs. below discretionary spending limits: one more reason to have multiple pricing tiers.\nSelling services vs. customized products vs. off-the-shelf products: we‚Äôre selling a high-margin product and augment with services when needed to make the customer more successful.\nSelling to many stakeholders vs. one stakeholder: this is another reason for our multiple tiers‚ÄîPremium is sold to the single stakeholder of development teams, Ultimate is sold to multiple stakeholders and will need the CIO to enforce the transformation.\nMonthly vs. upfront payments: that is why we prioritize yearly upfront, sometimes even multi-year upfront. Also, yearly is the standard for enterprises (Salesforce sells it like this) and helps reduce support costs that are an order of magnitude greater for SaaS (most likely to be monthly) vs. self-managed.\nSelling vs. upselling: this is why we have multiple tiers.\nAnnual pricing is prioritized over monthly pricing\nAnnual, up-front pricing is currently our only offering.\nAll internal systems should show only annual pricing to keep comparisons simple.\nWe do show monthly pricing externally.\nArguments supporting annual up-front pricing:\nOn\nslide 7 of the 2020 Go To Market (GTM) Survey of Redpoint\nit showed that Annual pricing was the majority from $5k up.\nIt helps to recover the costs of acquiring, onboarding, and supporting a customer.\nIt enables reinvestment to speed delivery of new product capabilities for customers.\nIt aids customer self-selection and commitment to drive to successful deployment and enough time to see successful outcomes with the product.\nIt can be offered at a discount relative to monthly pricing.\nWe offer a wide range of product tiers, including a free tier to appeal to many customer types and free trials of any tier.\nCosts are lower for sales, billing, and customer support.\nBetter customer experience due to ongoing product availability and less frequent administration and billing contact.\nIt is much easier to enforce license entitlement only once per year and yields lower product development cost.\nIt enables a more predictable business and more up-front investment in customer success to ensure great outcomes from use of the product.\nAnnual pricing lends to a more simple revenue recognition model where consumption is not relevant since revenue is recognized evenly over the course of the term. To get the equivalent with monthly pricing you need a ‚Äòuse it or lose it‚Äô condition per month, while the industry standard is to allow carry-over into the next month.\nIt helps to reduce churn with SMB customers, as that has been a problem in the industry.\nArguments supporting also offering monthly pricing:\nMonthly billing gives customers another way to buy and thus reduces barriers to adoption of the product.\nMonthly pricing can align with billing of combined or dependent products/services that are already billed monthly. (ex: if bundled with another monthly service)\nWhy show monthly pricing on the website\nAlmost all SaaS products show monthly pricing on their pricing pages. GitLab shows\nmonthly pricing on our website\nand notes clearly that it is billed annually. This is also a standard practice followed by companies like\nSalesforce\n. We previously have tried showing annual pricing on the website, but repeatedly heard from customers that they were confused by it. They often thought our product was priced significantly higher than it actually was because they expected the pricing to be displayed in monthly units and read the annual price as though it were per month.\nOnly sell a suite\nMost companies evolve in the following way:\nSell one product\nSell multiple products\nSell multiple products and a suite of them\nOnly sell a suite\nAn example is Microsoft Office, where it is costly to buy components of Office365 separately, although higher tiers include more products.\nAt GitLab, we decided to skip the intermediate steps and immediately only offer a suite that includes all our products.\nHaving our complete scope included in our open source version is even part of our\nstewardship promises\n.\nSelling only a suite has risks, after the => is how we mitigate those at GitLab:\nLeave money on the table, if people want all products. => Offer an Ultimate tier that is great value, if you adopt everything of GitLab.\nDiscount because people don‚Äôt want all the products. => Make a discount conditional on not using part of the product.\nTiers are harder to define than if you would have separate products. => Hard to mitigate, we have to work extra hard on communicating the differences.\nNo revenue feedback from customer about what products they value more. => The product function focuses on usage data as our best proxy for value.\nCompanies evolve to selling only a suite for the following reasons, after the => is how this applies to GitLab:\nMakes it easier for organizations to adopt the other products. => This is essential; organizations have official solutions and GitLab grows with organic adoption from developers.\nShow customers the benefit of a\nsingle application\n. => This is essential, since people are skeptical (showing beats telling).\nMore usage of all the products. => This is essential for us, due to our seed then nurture product strategy.\nHarder to displace the suite, once it is in place. => This will help if competitors offer a service based on our open source code.\nWe‚Äôre going even further than selling a suite by integrating everything in a single application. We do that because of the advantages mentioned on our\nhandbook page about us being single application\n. A secondary effect is that the user doesn‚Äôt have to make a buying, or even an adoption, decision.\nCharging one price that incorporate all our stages is the\nperfect bundle\n.\nValue creation\nThere are two factors that determine how much value GitLab creates for an organization, in order of importance:\nScope: how many parts of GitLab you use, indicated by the DevOps score, how many components of GitLab are in use.\nSize: how many people work in an organization and use GitLab.\nWhen an organization is larger, the benefits of GitLab are larger because:\nCoordination takes up a greater amount of the work. 80% is coordination costs; it is much more valuable to reduce that than when it is 20%.\nHarder and more expensive to train people and enforce best practices.\nMore silos that benefit from innersourcing.\nMore cancellations, longer cycles, more time to win.\nHigher requirements for governance.\nValue capture\nSince GitLab is an open core project, we‚Äôll always create much more value then we (are able to) capture. Based on the value created, the straightforward way to capture value would be to:\nScope: charge a higher price per user the more of GitLab you use.\nSize: Charge a higher price per seat the more users you have.\nThese straightforward ways are not possible for the following reasons:\nScope: charging more for adoption would hurt the adoption of GitLab for the whole lifecycle. In January 2018, version control is 10 times more popular than the next feature (CI). We need the features to spread organically, so people can create more value with GitLab. People are much more willing to pay when they are already using a part of the lifecycle.\nSize: many other software companies limit the maximum amount of users in certain\ntiers\n. For GitLab, we can‚Äôt do this because we\npromise the open source version won‚Äôt contain artificial restrictions\n. We can do it in our proprietary tiers, but this doesn‚Äôt seem symmetrical. It also feels unfair, if you have to pay more simply by being a bit larger than the limit.\nSo we‚Äôre left with charging for features.\nWe can‚Äôt charge for each feature separately, since that is unwieldy for the customer.\nSo we charge for tiers that contain a bundle of features.\nWe select features in the (more expensive) paid tiers that:\nScope: become more useful and valuable as your DevOps score increases\nSize: become more useful and valuable as your organizational size increases\nAdding features to a (more expensive) paid tier is not the only thing stopping users from adopting them, but it is a very important factor.\nTo simplify the above, we base our feature groupings on champion position (see below).\nBuyer-Based-Open-Core\nWe make feature tiering decisions based on:\n‚ÄúWho cares most about the feature‚Äù\n.\nOur\nthree tiers\nare differentiated based on\nthe buyer persona\nor IC who buys GitLab, from individual contributor, to manager/director, to executive. Every person in the company\nis on the same tier\n, even if they don‚Äôt use all the features.\nThe feature is put in the plan based on what champion is most likely to\ncare\nabout it.\nBuyers make sense, since a higher-cost plan needs a higher-placed buyer.\nAlternatives that don‚Äôt work:\nPricing based on company size doesn‚Äôt work; some small companies need the features of the most expensive plan.\nScope and size\ndon‚Äôt work.\nPricing based on maturity is strange, because organizations at the beginning of their journey should pay the most, since in a greenfield you benefit the most quickly and extensively from GitLab.\nMore detail about this in Sid‚Äôs presentations about Buyer-Based-Open-Core at the\nOpen Source Leadership Summit in 2019\nand at\nHeavybit\n.\nAlso, see\nfork and commoditize\n(internal) in our list of concerns.\nExample template for customer response\nA customer asked why merge request approvals were not included in free:\nThanks for asking. We think that managers are more likely to care about merge requests approvals than individual contributors. That doesn‚Äôt mean that individual contributors don‚Äôt care about them. And it doesn‚Äôt mean that in all cases managers care more, just in most cases. For more information please see our Buyer Based Open Core model:\n#buyer-based-open-core\n.\nBelow is a video of the CEO talking about monetizing open source with co-founders from Infracost.io\nIf a feature can be moved down do it quickly\nWe should not hesitate to open source features. When we put a feature into too high of a tier we should move it quickly because not having it in all tiers limits who can use the feature and this hurts:\nGetting more users: having the product sell itself makes us much more efficient, for it to sell itself it has to get used, more open source features can increase the popularity of GitLab compared to rival offerings.\nGetting more\nstages per user\n(internal): if an open-source feature gets a user to adopt a new stage, the value one user gets from GitLab increases greatly because the\nsingle application\nbenefits grow exponentially when you adopt more stages.\nGetting more open source contributions to improve the feature: since the number of contributions grows with the number of users.\nIncrease demand for paid features on top of what you open source: When you move a feature down this increases the usage of the specific feature, for example our service desk functionality. When a feature is popular this creates more demand for paid features that we can add later like custom templates for service desks.\nIn most cases the following guidelines apply:\nPrioritize feature adoption in free prior to attempting to monetize it.\nIf other paid features will be within reach of more users by using this features we should probably open source it. An example is the support for multiple Kubernetes clusters that can drive adoption of adding Kubernetes clusters which allows people to use the paid feature of browser performance testing.\nIf no buyer cares about the feature, that means it isn‚Äôt the focus of any buyer, and we should open source it.\nWe should make sure that the basic features of a comparable offerings are open source. We should charge for the features that the comparable offerings charge extra for. We do need features to be open source to drive initial adoption.\nBelow is a video with the CEO discussing the philosophy of this with a Product Manager:\nDefault to move features down\nWhen in doubt, we will default to moving features to a lower tier,\nmoving it down quickly\nif\ndata shows that this is more appropriate. Not all tier changes will involve moving things to lower-priced plans and paid features may move into the higher tier, but\nopen source features should never move to paid tiers\n.\nOccasionally, a feature may unintentionally become available at a lower-tier due to a bug. This can include the free (open source) tier. When we fix the bug and return the feature to the correct tier, this is not the same as moving an open source feature to a paid tier. The definitive source for a given feature‚Äôs tier is\nour documentation\n.\nWe should focus on building new features that buyers want and making sure that the initial assessment of new features is never too low. While we reserve the\nability to move features up in tier, proving the necessity has a much higher bar since we are constraining the existing reach of a feature rather than expanding it.\nPlease also note that the CEO is in charge of pricing and tiers; this is delegated to product for the day-to-day work.\nWhile other parts of the GitLab organization are consulted, the CEO is the\ndirectly responsible individual\n.\nChanging tiers and pricing changes\nTo propose a change that impacts pricing or changes a feature‚Äôs tier (e.g. moving a feature from Premium to Free), please follow the process outlined in the\nFeature Tier or Pricing Change issue template\n.\nDevOps score is not maturity\nWhat is interesting is that GitLab creates more value as you adopt more of it.\nThis shouldn‚Äôt be confused with DevOps maturity.\nDevOps maturity is how advanced your practices are and how fast your DevOps lifecycle is, shown in\ncycle analytics\n.\nWith the best practices embedded in GitLab, you will mature faster than without it. GitLab enables a 200% faster DevOps lifecycle.\nBut DevOps maturity is mostly about organizational change. GitLab the product is just an enabler of it.\nEven if an organization uses everything of GitLab (high DevOps score), they can still have a slow process (slow lifecycle).\nWe know there is a correlation between a higher DevOps score and a faster lifecycle; but especially in organizations new to DevOps, it is a trend, not an absolute.\nLinking our tiers to maturity would mean we don‚Äôt ask any money from the large organizations that currently have a slow lifecycle but that are making it faster by adopting all of GitLab.\nThese large organizations with a slow lifecycle benefit the most from GitLab, since they can adopt it completely, because they are not held back by an existing toolchain.\nLocation based pricing\nAs suggested by\na user on X\n(X login required).\nThis is a good suggestion to consider given the GitLab approach to adapting to local markets throughout the business. GitLab will assess viability of the idea in our overall pricing strategy planning. It is difficult to do and our assessment of this will consider:\nThis is a complex issue and requires that all parties are better off if a change is made to account for geography. We fully admit that this would be hard to pull off successfully.\nIf there is a way this could be good for customers and for GitLab, we will not treat this separately. We will treat it as part of a unified pricing strategy\nIn a global and digital marketplace it is difficult to positively identify where a customer is geographically located either because we rely on that customer to self-identify or because it is a large organization with users in several geographical locations.\nWe may be able to solve with a simpler discounting policy\nAny overall reduction in cost per license must be more than made up by increased volume at the new pricing\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 8741}
{"doc_id": "2f6dc9ee9b2cbb3f", "url": "https://handbook.gitlab.com/handbook/product/product-management", "title": "GitLab Product Management | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nGitLab Product Management\nThis document describes what Product Management does, where, when, and how to engage with the product management team.\nWhat does Product Management do?\nAt GitLab, the PMs lead their specialization. That is, the Create PM decides what the Create group works on, for which release, and makes sure this furthers our goals. This includes bugs, features, and architectural changes.\nThe PM can‚Äôt be expected to parse every single bug or issue that comes by, so they have to rely heavily on the input of the various stakeholders. To be able to achieve this, both the PM and the stakeholders have to actively work together. It‚Äôs a two-way street.\nIn general terms, if you require something to happen with the product or if you need engineering staff for a particular change, you approach a PM. Preferably through creating an issue (the GitLab way), and mentioning them there.\nIn the same vein, PMs are required to ask for feedback from the stakeholder on particular changes. If a change will affect GitLab.com and its maintenance, a PM should proactively reach out to infrastructure engineers to help with the scope, design, and decisions regarding this change.\nIt is then up to the PM to weigh all these inputs and decide on a prioritization. It is to be expected that they are the best equipped to make this prioritization, while also keeping in mind all goals of GitLab.\nHow to engage Product Managers\nWhere to reach Product Managers\nPublic Issue Tracker (for Product)\n; please use confidential issues for topics that should only be visible to team members at GitLab.\nChat channel\n; please use the\n#product\nchat channel for questions that don‚Äôt seem appropriate for the issue tracker.\nWhich Product Manager should I contact?\nPlease see the\nProduct Categories\nto know which product manager handles which category.\nHow do I share feedback?\nGenerally speaking, all product feedback should be provided via issues. For detailed overview of how to create an issue, please\nread this section on the process\n. If you have any product-related questions, comments, input, or otherwise, the Product Manager is the primary person you should talk to,\nif creating an issue does not suffice\n.\nCreating an issue includes, but is not limited to, features, bugs, and other changes that need to be prioritized, changed, discussed, or need more attention. Product Managers will reach out to stakeholders when making or communicating any decision. The pressure of balancing priorities while ensuring we build excellent software is on the product managers and they need all the input they can get to achieve this. Paid features fall under their respective PMs, not under one PM in particular. For instance,\nService Desk\nfalls under the\nPlan PM\n.\nAll feedback must follow the\nGitLab Community Code of Conduct\n. Failure to do so will result in the issues or comment being deleted.\nCustomer feature requests\nIf a customer has a feature request that doesn‚Äôt already exist, refer to the\nprocess to create an issue\nin the\ngitlab-org issue tracker\nand choose the\nFeature Proposal\ntemplate, following the instructions and providing as much information as possible. Once you‚Äôve created the issue,  make sure to add the appropriate labels for the\nproduct stage and/or group\n(e.g\n~\"devops::plan\"\n) if known and add a comment tagging the appropriate Product Manager. If an issue already exists, make a comment on the issue with their information and use case.\nWhenever you‚Äôre sharing feedback on an issue (e.g. ‚ÄúCustomer X wants this‚Äù), please make sure to do the following:\nLink to the source. Usually, this is a link to Salesforce or Zendesk\nUse the Salesforce Account URL when it‚Äôs a paying customer and you want to relate the ARR\nUse the Salesforce Opportunity URL when it‚Äôs related to a prospect or significant growth opportunity\nProvide context: if a customer wants this feature, include\nwhy\nthey are interested in this. If you don‚Äôt know, make sure to ask or bring the relevant PM in contact with the customer\nInclude any further useful context (e.g. what kind of software is this customer building, or how they will use the feature)\nMention the\nProduct Manager\nFeel free to ask them anything that isn‚Äôt clear to you (e.g. it‚Äôs not clear what the status is of the issue, etc)\nIf a customer expresses interest by simply mentioning an issue number or e.g. ‚Äúan integration with X‚Äù, that is not sufficient information. Before creating or commenting on an issue, make sure to ask them:\nWhy do you want this?\nWhat problem are you trying to solve?\nWhat parts of this issue/integration are important to you and why?\nHave you tried workarounds?\nHow important is this to you?\nThe Product Manager is responsible for figuring all of this out, but being one step ahead of them will speed things up.\nIf a customer is a member of our Product\nCustomer Advisory Board\n, the CSM should add two labels:\n~CAB Takeaway\nand\n~CAB Takeaway Qx FY20xx\nto the issue.\nIt is highly recommended to use the feedback template below to make this easier.\nFeedback template\nYou can copy/paste this to make sure you don‚Äôt miss anything or\ncreate a comment template\nfor reusability:\n<!-- Select the appropriate subscription and product text below and remove the others (note: do not add them as labels)>\n<!-- Click on ~customer priority:: below to select an appropriate label 1 through 10 with 10 being the highest>\nThe following ~customer is interested in this capability\n-\nSubscription: ~\"GitLab Ultimate\" OR ~\"GitLab Premium\" OR ~\"GitLab Free\"\n-\nProduct: ~\"self-managed\" OR ~\"gitlab.com\" OR ~\"GitLab Dedicated\"\n-\nLink to request:\n-\nPriority: ~customer priority::\n-\nWhy interested:\n-\nProblem they are trying to solve:\n-\nCurrent solution for this problem:\n-\nImpact to the customer of not having this:\n-\nQuestions:\n-\nPM to mention:\n-\nCSM to mention:\nThe\n~customer priority::*\nlabels are inputs for the prioritization model powering the customer issue prioritization framework dashboard:\nCustomer Requested Issues\nThese dashboards represent the relative importance of a given issue to the specific customer. 1 is the lowest priority and 10 is the highest. These can be updated at any point in time and will be reflected in the model within 24 hours. You can find more context about priority labels on the\ncustomer issues prioritization framework handbook page\n.\nGood example\nA customer with more than 1000 users mentioned they are interested in this feature to be able to do their sprint planning more effectively. The problem they are trying to solve is that with the current implementation, they can‚Äôt X and need to do so because Y. They are using software X to do this today, but would be able to move to GitLab if we would do this.\n@productmanager this issue doesn‚Äôt have a milestone right now, are we planning to address this in the near term?\nBad example\nsalesforce.com/blabla\nCustomer collaboration projects\nCustomers that are assigned a Customer Success Manager typically have a\ncollaboration project\non GitLab.com, which is used to share information, document customer details, and track issues in a place that both the GitLab team and the customer‚Äôs team can access.\nGenerally, CSMs maintain a main issue and/or enable the\nCS-Tool - TAM issue tracker\n, which lists out all feature requests the customer is interested in with links to the public GitLab issue.\nWhen a customer expresses interest in a feature, the CSM should capture that in the public GitLab issue, as well as add it as an entry in the main feature tracking issue of the\ncustomer‚Äôs collaboration project\n.\nThe feature tracking issue should be maintained regularly by updating priority (elaborated on below) and milestones as the single source of truth on customer product needs. It can also be used for reviewing metrics of previously delivered feature requests.\nIf there is a lot of discussion with the customer about a specific feature request, create an issue on the customer\ncollaboration project\nabout it and list that issue as a related issue on the main GitLab issue. This is another signal of the main product issue of customer interest and also allows discussion with the customer and internal GitLab team members about their needs and concerns.\nHow do I escalate a feature request?\nIf you have followed the process of creating/commenting on issues and have not gotten traction, confirm that\nall of the necessary information is included in the issue\n. Follow up with the Product Manager again in the issue and in the product stage Slack channel (linking to the issue) to get additional attention and team member involvement.\nIf a customer has identified an issue that is high priority for them, such as a work-stoppage bug or a feature required for the customer to meet a deadline, follow the expected steps for logging and tracking customer feature requests above by adding the customer‚Äôs interest in a GitLab issue and including it in the collaboration project issue. In addition,\nreach out to the Product Manager\nwho is\nresponsible for the corresponding group\nand discuss it with them directly. A general idea of high priority is that the customer needs a particular feature as soon as possible.\nCritical Priority Requests\nare extremely rare, but, when they occur, they are agreed upon by both Product and Engineering, with the CSM facilitating the request. If a customer is unable to continue using GitLab without a specific feature, the CSM should begin the\ntriaging the account\n, follow the process to indicate customer interest in the issue, then set up regular check-ins with the Product and Engineering teams to assess the status of the feature, expectations, and potential secondary plans. For the product & engineering process, please refer to the details of a\ncritical customer merge request\n.\nWhy do product teams prefer we ask about the problem rather than the solution?\nThe following part of\nthis UX design article\nsums it up well:\nListening to the right customers at the right time is a great first start, but you also need to make sure you are interpreting their feedback/requests correctly. The reason for that is generally customers ask for something to be better, not different ‚Äî\nthey interpret their problems through existing solutions\n. A customer is unlikely to tell you what new product to create (that‚Äôs your company‚Äôs job!) but they will tell you what problem that product needs to solve.\nTo do this you need to get to the underlying why behind the feature request ‚Äî what is the basic problem to be solved, and then think about how to solve that problem in a fundamentally better (e.g., 10x faster, easier, cheaper) way.\nThis concept is best described by the (most likely misattributed) quote by the founder of the Ford Motor Company, Henry Ford: ‚ÄúIf I had asked people what they wanted, they would have said faster horses.‚Äù\nWhen the customer asks for a faster horse, you should then ask why. You would invariably hear things like:\nI‚Äôd like to shorten my commute from home to work\nI‚Äôd like to be able to sell my widgets to more cities\nI‚Äôd like to win the Kentucky Derby\nNow that you understand the basic problem to be solved (of which there are many solutions including a faster horse), its your job to think of a fundamentally better way to solve it\n‚Äî e.g., what does a 10x faster horse look like? And one potential solution to that is obviously a car.\nFeedback Examples\nExamples: A customer has a feature request\nIf you hear a feature request from a customer, and they do not have a CSM assigned to their account, you should follow the normal procedure: create an issue and label it correctly. Let‚Äôs say the customer requests an enhancement to Issues. You know by reading above that you‚Äôll have to label this with\nDiscussion\nand you can mention or reach out to the Plan PM to expedite this if warranted.\nA salesperson for an organization asking for a paid-tier feature request shall work with the product manager to arrange conversations to further explore the feature request and desired outcome. The process will be:\nSales schedules 1-hour zoom meeting with the product manager, customer, and themselves. Call recorded if the customer gives permission.\nProduct Manager prepares any additional questions they would like answered, beyond what is below.\nWhat version of GitLab are you currently using? CE / Premium / Ultimate?\nHow are you currently doing source code management? GitLab merge requests or another tool? How about CI/CD?\nHow are you currently doing issue management? How are you using HP ALM? Agile/Kanban? What do your sprint/iterations look like? 1 week? 1 month? 2 months?\nWhat is the integration like between issue management and source code management?\nHow do teams manage multiple repos? Does a team typically work on one repo at a time? Or do they work on multiple repos at the same time?\nSales sends questions to the customer prior to the meeting.\nMeeting is created in Salesforce.com\nSales creates a Google document for notes from previous calls with customer. Google Doc shared with product manager and sales manager\nSales and product manager schedule 15-minute pre-meeting to share what we know about the customer thus far, so as to not waste time asking questions we already know the answer to. Notes from this pre-meeting are added to the Google document.\nSales adds a link to the Google document under the account object as a note.\nIn the event that a paid customer is willing to pay for us to develop a specific feature, we should still respond as above. It‚Äôs great that they‚Äôre willing to pay for it: that means they really need it. However, we will not make a custom version of GitLab; even gitlab.com is running on GitLab Ultimate, and we move faster that way by minimizing technical complexity to determine features to follow after, it‚Äôs a trade-off to make. This doesn‚Äôt mean that ‚Äúno‚Äù is always going to stay ‚Äúno.‚Äù We keep an open mind to improvements.\nExample: Customer is looking for prescriptive advice for setting up GitLab\nFor example, they need support configuring a self-managed runner with a SaaS license.\nIf you need support with a specific customer and your Customer Success Manager is unable to configure what is being requested or you are being asked to provide very specific guidelines for use of GitLab, we suggest creating an issue using the\nProduct Support Request\n, and following the steps suggested in the issue.\nTo remain focused on\ncustomer results\nand\nefficiency\n, we recommend setting a due date on the issue in 5 business days and assigning the issue to the Product Leader of the section for triage.\nExample: Many support requests come in about a bug with CI\nSame as before, make sure an issue is made and make your case with the PM that this is becoming a problem and needs to be fixed. The PM will make sure that this is fixed or resolved in some other way.\nExample: I think creating new files is slow\nEverything in GitLab should be fast and creating files falls under the repository, so you create an issue and make the PM aware of it by mentioning it.\nThe PM in turn will investigate whether this is a general problem or one specific to GitLab.com, in collaboration with infrastructure and others, and schedule any necessary changes for an upcoming release.\nTableau\nThe Product team maintains a\nTableau dashboard\nto aggregate issues and customer interest in those issues. Information is automatically gathered from\nGitLab issues\nby scanning for Salesforce customer account links. The same dashboard can be used by Sales and CS.\nThe Tableau page automation will detect when Salesforce links are added and use the customer‚Äôs Salesforce data, such as Total Account Value and seat licenses, to add them to the page. This also maintains a customer‚Äôs privacy on public issues, since Salesforce links are only accessible to GitLab employees with proper credentials.\nReporting Bugs\nIf your customer would like to report a bug, refer to the\nexample of how to express the customer‚Äôs interest\nin an issue and use the\nBug\ntemplate, following the instructions and the same steps as above.\nYou can refer to the following steps if a medium priority bug has become stale on the Product Management\ntriage board\n. Another potentially helpful view is the\ntriage report label\n.\nFollow the same steps as for logging and tracking bugs as with feature requests, but be sure that steps to reproduce and workarounds are included whenever possible.\nProduct and CSM Collaboration\nIt is essential for the Product team and the CSM team to have a close working relationship, so that the business has a pulse on customer interests, feedback, and sentiment.\nProduct Collecting Customer Feedback\nIf you are on the Product team and seeking feedback from customers, you should consult with the Customer Success Management organization, as CSMs have direct access and regular communication with customers across all regions, tiers, use cases, and industries.\nTo request a meeting with a customer, open an issue in the\nCSM project\nand use the\nProduct Engagement\nissue template, filling out the appropriate fields. If you have a specific customer in mind that you‚Äôd like feedback from, please share the customer name in the issue and tag the CSM assigned if you know who it is (you can find this information in Salesforce if you have access; otherwise, someone else will check for you).\nThe CSM team gets notified via Slack whenever a new issue is opened, and they will respond in the issue with specific customers when they are available. If you don‚Äôt receive a response within a week (allowing the CSM to review with their customers), feel free to ping the\n@timtams\ngroup in the issue.\nCSMs Sharing Customer Feedback\nOne of the responsibilities of CSMs is collaborating with the Product team to help prioritize features by indicating demand from customers and relaying customers‚Äô use cases and experiences.\nFollowing the process described below will ensure that customer interest in features is shared with Product properly, so that Product can take appropriate action. Through following the documented process, we are able to increase our efficiences, decrease back-and-forth communication, build a better product, and get answers and resolutions to customers faster.\nProduct Joining Customer Calls\nIt can be very helpful for both Product and customers to be on a call together to discuss feedback, roadmaps, etc. Take the following steps to ensure an efficient and productive meeting:\nCollect Customer Context\nIn advance to the product call, have a conversation with the customer about expectations and their background.\nAsk the following questions, as applicable:\nWhat features and/or functionality do they want to discuss?\nHow familiar are they with those features and/or functionality?\nHave they had a demo of the features already or is this their first exposure?\nAre they actively using the features in production, in a POC, or have they not yet tried the features themselves?\nAre they more interested in an overview of the functionality that already exists or in future roadmap functionality?\nWhat are their goals for this call?\nContact the Appropriate PM\nIt is best practice to ask for a PM to join your call through the slack channel for their\ngroup or category\n. Direct messages are problematic because it is hard to loop in other PMs if the right person for the call is not included in the DM, and it limits visibility into topics that may be discussed. If you are unsure about the right group to reach out to, you can ask in the general\n#product\nchannel.\nBefore reaching out to the PM, fill out the\nPM Customer Meeting Briefing Document\nand send it to the PM along with your request. The PM will review the doc and let you know if they are able to attend the meeting. PMs may decline meeting requests if they do not receive the context doc or if it is only partially complete. We recommend sending this context along with your request at least 3 business days before the meeting. The PM will review the document and provide feedback to ask for further clarity if needed.\nIn addition, once the call is scheduled, make sure you have a detailed agenda set at least 24 hours before the call that is shared with both the customer and the Product team.\nEBR Preparation\nCSMs regularly hold\nExecutive Business Reviews\nwith their customers and often request involvement from Product Managers. When a CSM is looking for Product involvement, they will reach out to the PM (in their group Slack channel) with the date, time, and desired topic.\nThe CSM will involve the PM in preparation for the EBR, working with them to ensure expectations of content, timing, and desired outcomes are fully established.\nEBRs are usually quite long (60-90 minutes) and the product presentation is only a small portion (15-20 minutes) of the overall EBR, so the PM is welcome to only join when they will be speaking. Of course, if they want to join and/or participate in the full call, that is definitely welcome, as customers often share product feedback and requests throughout an EBR.\nRequests for Product Support\nThroughout the customer lifecycle, customer-facing teams (Support, Account Executives, CSMs, Solutions Architects, Professional Services, Renewals Managers, etc.) may need the assistance of a Product Manager. This can include a detailed discussion of our direction, and how to address specific use cases, or gaps in functionality, within an organization.\nTo ensure these requests can be quickly triaged, easily scheduled, and later tracked, there is a standardized request process based on issues.\nRequesting support from Product\nFor time-sensitive and high-impact requests, please paste a link to the issue in the\n#product\nSlack channel, and\n@mention\nthe recommended PM‚Äôs in the template.\nWorking with support requests\nWhen a support request is opened, labels will automatically be assigned to categorize the request.\nThree fields are particularly important when triaging requests:\nPriority: How time critical the request is,\nurgent\nrequests should be treated with a high priority\nImpact: Potential impact to the business, based on\ntotal contract value (TCV)\nStage: Which stage the request relates to\nAll Product Managers should ensure they are set up to receive label notifications for their respective stages:\nList the\nproduct project‚Äôs labels\nSubscribe to relevant stage labels\nGuide for Product Managers Engaging with Other Teams\nProduct group counterparts\nGitLab is designed and developed in a unique way.\nConsistent with our value of\nEfficiency\nthe product is developed with\ndirectly responsible individuals\nfrom Product, UX, Quality and Development working together.\nProduct Managers\nEngineering Managers\nUXers\nSETs\nSet\nmilestone priorities\nand define what features Engineering works on\nOwn the definition of done; decide what gets merged into Product. Prioritizes maintenance work\nProactively identify small and large strategic UX needs to aid Product Management prioritization\nOwn and identify test strategy and requirements to complete the definition of done\nAt GitLab, we develop our product for self-managed as well as SaaS-hosted customers. We realize that while we have DRIs there are many stakeholders who must have input, including Engineering, Quality, UX, Product, Security, and Infrastructure. For example, the Security team often has the deeper context of what it takes to run a secure SaaS system. Similarly, the Infrastructure team has insights into what we should build into the product to reduce toil and enable efficient, reliable, performant, and scalable systems.\nWe call this the\nProduct Group\nmodel. It is an extension of the classic quad concept at the leadership level and is currently comprised of Development, Quality, User Experience, Infrastructure, Product, and Security.\nThe Product Group can be used to facilitate a\nglobal optimization\n, including product-wide\ntechnical debt\n.\nWorking with Product Management across the company\nThere are many counterparts that PMs work with. Here are some best practices for working across the organization.\nWorking with Finance Business Partners\nIn some cases, Product Managers may have items that incur expenses toward the budget. These can be related to external vendors for research, contractors for development staffing, and infrastructure. The CProdO is the DRI for the product budget and all changes or requests for budget spend must be approved through them.\nTo request a forward-looking new budget item, open an issue in the Product project using the\nProduct Budget Request Template\nand assign it to the CProdO and manager. Budgets are planned annually and quarterly, so approval may not be immediately given because it depends on the timing of budget planning. The CProdO will bring the budget request to the next budget planning session with Finance.\nTo request approval for an increase in the expected spend for a pre-existing item, open an issue in the Product project using the\nProduct Budget Request Template\nassign to the CProdO and tag your manager. The CProdO will review, approve or decline the budget change. The CProdO will then notify the Finance Business Partner of changes for forecast updates.\nWorking with Content Marketing\nContent marketers and Product Managers can partner together when using a Blog to communicate product changes and engaging the market with thoughtful changes. See the\nblog post handbook page\nfor guidelines on when and how to start engaging Content Marketing for creating a blog post for a feature.\nWorking with Product Marketing (PMM)\nProduct marketers and managers should be joined at the hip. Just as a feature without documentation\nshould not be considered shipped, benefits of GitLab that we‚Äôre not actively talking about might\nas well not exist.\nProduct marketers rely on product managers to be guided to what is important and high impact.\nIn general, you should:\nalways mention the\nappropriate PMM\non epics and high level issues\nregularly meet/talk async with the PMM that is aligned with your product area\nproactively reach out for input when contemplating new features\ninvolve PMM as early as possible with work on important changes\nAdding Competitive Content to Use Cases\nA core element to use cases is effective objection handling against major competitors in the market. In order to effectively support this effort, a partnership between Product Marketing and Product Management to maintain adding competitor walkthroughs and competitive content to the existing use cases is critical. To date we have competitive sections on the following uses cases:\nGitOps\nIn FY22-Q2, we are taking on an effort to continually update these Tier 1 and Tier 2 use cases and are assigning DRIs, follow along this effort in\ngitlab&1446\nWorking with marketing\nWhen working on the release of larger features or new capabilities, it is important the product manager consider various aspects of the go to market plan and  inform or partner with the appropriate stable counterparts for strategic and logistical considerations.\nMarketing materials\nAs a PM you‚Äôre responsible for making sure changes you‚Äôve shipped are well represented\nthroughout GitLab‚Äôs documentation and marketing materials. This means that on\nrelease,\nfeatures.yml\nis updated, documentation is merged and deployed, and\nany existing content is updated where necessary.\nIt‚Äôs not acceptable to do this after the release. GitLab is very complex, and features\nand functions are easily missed, even those that provide significant value to customers\n(e.g. the many ways you can authenticate with GitLab).\nYou can recruit the help of the marketing and technical writing team if needed,\nbut it‚Äôs highly recommended to do small updates yourself. This takes less time\nand overhead than communicating what needs to be done to someone else.\nPages that read from\nfeatures.yml\nIt‚Äôs important to keep\nfeatures.yml\nupdated because there are a number of different pages (internal-facing and external-facing) that read from that file. These include:\nExternal\nPricing\nFeatures\nWhy GitLab Premium?\nWhy GitLab Ultimate?\nFeature Comparison\nDevOps Lifecycle\nDevOps Tools Landscape\nInternal\nSaaS vs. Self-managed\nFeatures by tier\nWorking with User Experience (UX)\nThe standard for working as a team at GitLab is the\nProduct Development Workflow\n. Product Managers and Product Designers should work together as strategic counterparts to better understand the problem and discover user needs. The Product Designer and the Product Manager will pair to understand the target audience, their challenges when using a particular feature and then designing a solution that helps users solve them.\nIt‚Äôs important to remember that User Experience (UX) does not only relate to visual features or interface design. UX is the intangible design of a strategy that brings us to a solution, so it also refers to the experience of writing code, working with .yml files, designing APIs, working with a CLI, etc. All of those functionalities are meant to be read and used by people. Involving a Product Designer into their planning and development can be highly beneficial. A guide to consider is: anytime a person is interacting with something, there is an opportunity for that interaction to be designed.\nAssessing user workflows\nAs the GitLab product matures, we know we must make important workflows easier to use through feedback-loop mechanisms as is captured in the ‚ÄúImprove‚Äù section of the\nProduct Development Flow\n. We can use the\nCategory Maturity Scorecards\nand\nUX scorecards\nas mechanisms to provide insights into how might be able to improve these user workflows.\nWhat if there is a conflict with the product direction plan and solution proposal?\nFor areas with minimal maturity, or low/internal-only adoption, iteration and quickly adapting the product is the priority. In cases where the product experience desired would take longer to implement than required for the current maturity stage, it is advised the Product Manager work with the Product Designer and/or Engineering Manager to scope an iteration plan to ensure the experience is delivered incrementally over time to provide value quickly with quality.\nFor areas with more adoption, or beyond viable maturity, we recommend using the below escalation path if there is a disagreement on the approach to solve for the product direction and experience for users/customers.\nAs a team, there may be cases where a proposal exceeds the expected time to market to achieve the optimal customer experience. As this impacts potential business results, product managers are the\nDRIs\nof the decision.\nAs DRIs, it is important to consider the input from other team members and to know when to trust in their experience and judgment. It is advised to use an\nopportunity canvas lite\n. The PM is expected to compile the canvas lite with inputs from the Product Designer and/or Engineering Manager. The PM then makes a decision after weighing input from the product designer and engineering, as appropriate. The PM should then share the decision, articulating the costs of waiting, and shipping earlier with less polish, as well as why no smaller iteration exists as part of this decision.\nIn the event that a decision is made to build something that is less polished, has a lesser user experience, or otherwise doesn‚Äôt live up to our standards of where we want this UI to end up the team should generate follow-up\nDeferred UX\nissues to be addressed in the next upcoming milestone(s).\nIf a quad member remains concerned and in strong disagreement with the decision made by the PM DRI, the quad member should exercise our\ndisagree, commit, and disagree value\n, by initiating an\nescalation\nto bring in management layers above into the decision.\nResults are the most important aspect to consider for the business and our users. If there is a perceived risk to potentially harm the business financially, reduce customer satisfaction or value, or lead to legal trouble, teammates are empowered to seek an alternative perspective for the product decision. Within the Product Division, we recommend escalating first to the management layer immediately above where the disagreement is happening for input and further escalating to PLT and ultimately the Chief Product Officer.\nWhat if your team doesn‚Äôt have a designer?\nProduct Designer assignments are listed in the team.yml file. Unfortunately, we are currently unable to assign a dedicated Product Designer for every group. Instead, Product Designers are assigned to the areas of highest business priority and will continue to provide focused support to those priorities throughout the year. Due to the limited capacity, we are also not able to do UX reviews on MRs for groups without a designer.\nIf there isn‚Äôt a designer listed for a group, then that team is expected to be self-sufficient in taking responsibility for the design needs of their product area. Product Design does not have the capacity to review complex proposed design solutions or provide design solutions for unsupported groups.\nIf you have questions or need support you can do so in the following ways:\nPMs who need to create designs can request access to Figma by creating an\nAccess Request issue\n.\nNote:\nWe cannot grant an Editor seat by requesting an upgrade within Figma. An access request issue is required.\nReview and follow the\nPajamas guidelines\n.\nIf you have a small design question, or the Pajamas guidance is not clear, reach out via the\n#ux\nor\n#ux_coworking\nSlack channel.\nIf you have a Community Contribution MR that needs a design review, follow the process for\nMR Reviews for Groups without a Designer\n.\nWorking with Product Management external to the company\nHere are some practices for how PMs work with groups outside of GitLab.\nWorking with community contributors\nProduct managers are the DRI for their group‚Äôs\nproduct direction\nwhich must include delivering on our greater company strategy of dual flywheels.\nCommunity contributions\nare a critical\npart of the product direction.\nTo support contributions product managers may consider the following guidelines:\nAim to review and respond to community contributions within 4 working days- see\nreview response SLO\n.\nContributions for well-defined\n~direction\nor\n%Backlog\nissues will be prioritised.\nFor contributions that impact user experience, following the\ncontribution guidelines\n,\nthe Product Designer for the group should review the MR and provide feedback on the MR.\nFor contributions that are for features we do not want in the product (either because\nof conflicts with our product direction, poor UX, maintenance concerns, or security reasons)\nthe Product Manager should review the MR and provide feedback on the MR so the contributor\nunderstands this feature is not being accepted by GitLab.\nIf not involved earlier, tag the PM of the group reviewing the MR before merging the MR.\nThis is to ensure that the PM stays informed about changes affecting their area and to\nallow them communicate the change via a release post, if necessary.\nRemember to practice our CREDIT values when communicating with contributors.\nProduct Internship - Best Practices\nThis document describes best practices for internship for learning with Product.\nInterning for ‚Ä¶\nProduct Management CDF and Competencies\nProduct Management Learning and Development\nThis page contains links to internal and external resources that Product Managers at GitLab can use to build their skills.\nThe Product Manager Role at GitLab\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5830}
{"doc_id": "2107c2d1bd4593c4", "url": "https://handbook.gitlab.com/handbook/about/escalation", "title": "Handbook Escalation | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nHandbook Escalation\nFor information on team members‚Äô roles and responsibilities, see\nContent Websites page\n.\nIntroduction\nThe Handbook is a critical part of empowering team members to do their jobs effectively. As such, we have a group of team members who assist in resolving issues affecting all team members.\nReporting an issue\nIf you‚Äôre looking for general help, please see the\nediting handbook page\n.\nAny work stopping issues should be reported in the\n#handbook-escalation\nchannel in Slack.\nOtherwise, consider creating an issue in the relevant\ncontent sites repository\nand posting in the\n#handbook Slack channel\n.\nWhen to escalate an issue\nIssues should only be escalated if it relates to:\nDefault branch being broken\nBroken infrastructure\nTime sensitive updates to the handbook where there is an issue in making the update\n‚ÄúKeep main green‚Äù group\nIf after posting in\n#handbook-escalation\n, you are not receiving a response, please ping the\nhandbook DRIs\nif it‚Äôs within their working hours.\nIf they are not available, the\n‚Äúkeep main green‚Äù group\nhave volunteered to assist when available. Please take into consideration a team member‚Äôs timezone, working hours according to their Slack profile, and their Slack status on whether they‚Äôre out of office.\nAdditionally, any GitLab team member can volunteer to join the\n#handbook-escalation\nchannel and help out.\nIf you would like to join the group, please ask anyone in the group to add you. Similarly, team members can leave the group at any time by leaving the GitLab group.\nExpectations for the group\nMake sure you are in and do not mute the\n#handbook-escalation\nchannel.\nWhen an issue is reported:\nAcknowledge the team member and let them know you are looking into it.\nYou can check on\n#production\n,\n#incidents-dotcom\n, and\n#is-this-known\nto see if it‚Äôs a known issue with infrastructure or other problems.\nProvide an update as soon as you are able to confirm their problem.\nYou can also post updates in\n#mr-buddies\nand/or\n#handbook\nas appropriate.\nOffer to have a Zoom call to help replicate or resolve the issue if it is not straight forward.\nResolve the problem, or provide feedback to the team member on how they can resolve it.\nIf you do not believe you can resolve it and need further assistance, consider any or all of the following:\nPing another member of the\nKeep main green group\n.\nPing the\nhandbook DRI\n, or a member of the code maintainer group.\nCreate a bug issue\nwith details.\nWhen to hand over to Reliability Engineering\nHandbook escalation deals specifically with matters relating to the\ncontent-sites\nprojects.\nIf a reported issue relates to the GitLab product or the infrastructure running the handbook, then it should be escalated to the Reliability Engineering team.\nTo report an incident follow the instructions on the Incident Management page:\nhttps://handbook.gitlab.com/handbook/engineering/infrastructure/incident-management/#reporting-an-incident\nCommon Incidents and Tips\nFailing pipeline\nPlease see the\nhandbook editing page\nfor guidance and examples.\nManaging broken main alerts in #handbook-escalation\nAll broken CI pipelines for the\nmain\nbranch of the\nhandbook\nrepository are automatically posted in the Slack channel.\nThese reports should be investigated and addressed where needed.\nOnce a report has been looked at, please leave a comment stating the nature of the problem, action taken, and add a ‚úÖ reaction to the message to show that it has been handled.\nIf for some reason there is a large amount of failures resulting in spamming the channel, the error reporting can be turned off in the repository settings:\nhttps://gitlab.com/gitlab-com/content-sites/handbook/-/settings/integrations\nStuck Merge Train\nTo see the status of the merge train (useful when team members are reporting that their MRs seem ‚Äòstuck‚Äô on the train), see\nthis issue to check the status and perform a workaround, if necessary\n.\nTL;DR for workaround: If the first/oldest MR\niid\nin\nthe FIFO list\n(\nsort=asc\nby ID) is actively running a pipeline and eventually gets merged, then things are moving along, just slowly.  If the first one in the list isn‚Äôt currently running any pipeline, remove it from the train and re-add it (it should go to the end).\nRunbook for\nabout.gitlab.com\nWhile the handbook is no longer on\nabout.gitlab.com\n, some of the information in the\nrunbook for about.gitlab.com incident handling\nmay be helpful.\nLast modified July 4, 2025:\nUpdate keep main green group info (\nc98fcfa8\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 728}
{"doc_id": "264cb6e5bcf5d328", "url": "https://handbook.gitlab.com/handbook/company/culture/inclusion/tmrg-gitlab-pride", "title": "TMRG - GitLab Pride | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nDiversity, Inclusion & Belonging\nTMRG - GitLab Pride\nWe are the GitLab Pride Team Member Resource Group (TMRG) founded in the fall of 2019. Learn more!\nThis group strives to connect employees at GitLab that are part of the LGBTQ+ community, or are allies, with professional and personal opportunities to meet others, speak at events, and share their lived experiences to improve and strengthen our community.\nMission\nTo ensure that GitLab is proactive in supporting, retaining, and recruiting from the LGBTQ+ community. This group also aims to help develop and coordinate mentoring in the workplace.\nStructure\nLeads\nAlex Hanselka\nKyle Yetter\nExecutive Sponsor\nRobin Schulman\nMembers\nSign up to get meeting invites by joining the\nGitLab Pride Google Group\nJoin the #lgbtq Slack channel\nProject\nGitLab Pride Issue Board\nEvents\nUpcoming\nTransgender Day of Visibility - March 31\nPride Month - June\nComing out Day - October 11\nWikipedia list of LGBTQ awareness periods\nPast\nComing Out Day Panel Discussion Recording\nAdditional GitLab Resources\nGender and Sexual Orientation Identity Definitions and FAQ\nResources for Being an Ally with the Pride Community\nGladd.org:\n10 Ways to Be an Ally & a Friend\nTechStars: Out At Work:\nHow To Support And Be An Ally To LGBTQ+ Colleagues\nForbes:\nHow To Be An LGBTQ Ally At Work\nVox:\nHere‚Äôs what a good LGBTQ ally looks like\nPFLAG‚Äôs\nResources to Being a Lifelong Ally\nOprah‚Äôs\nGuide to being an LGBTQ Ally\nThe GitLab Pride Mentorship\nMentorship opportunities for the members of our GitLab Pride TMRG, navigating a professional career in tech with authenticity\nLast modified April 8, 2025:\nUpdate Pride TMRG leads and add tanuki tab (\n73ac064e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 288}
{"doc_id": "84c131d396b55567", "url": "https://handbook.gitlab.com/handbook/product/ux/ux-research-coordination/research-coordinator-fill-in", "title": "How to fill in for a UX Research Operations Coordinator | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nUX Research Operations (ReOps) at GitLab\nHow to fill in for a UX Research Operations Coordinator\nThis page details the steps required to execute a successful recruit from start to finish\nThere are times when you will play the role of UX Research Operations Coordinator. This page details all of the ‚Äòbehind the scenes‚Äô steps needed to execute a successful recruit from start to finish. Are you interested in how to work with our UX Research Operations Coordinator? If so, you can find that information\nhere\n.\nThe Process\nStep 1 - Familiarize yourself and communicate to others\nThe UX Research Operations Coordinator will open a coverage issue in the UX Research project listing out the priority of projects, what needs to be done, and link to any resources that may be helpful while they are unavailble.\nThe UX Research Operations Coordinator will @ mention you on any ongoing recruitment issues that you need to pick up. They will provide you with a clear description of the status of the issue and what needs to be completed.\nThe UX Research Operations Coordinator will assign you to any of these ongoing issues so you can easily track them.\nThe UX Research Operations Coordinator will also share the Open Recruitment Projects sheet with you and tag you on projects that require assistance.\nIntroduce yourself, in the\n#product\nand\n#ux\nSlack channels, as the recruitment point of contact for the next X days and/or weeks.\nIf people attempt to raise recruiting requests in Slack, remind them to\ncreate a recruiting request issue\nand assign it to you for tracking and visibility purposes.\nRemind them an issue has been handed off to you once you confirm the handoff in a comment.\nBe sure to join the\n#uxr_reops\nSlack channel for easier coordination if there is more than one person covering for the UX Research Operations Coordinator.\nIf the UX Research Operations Coordinator is going to be unavailable for more than 7 consecutive business days they will open an MR on the Research Recruiting & Incentive Request Issue Template to make sure whoever is covering for them is auto-assigned to newly opened issues.\nStep 2 - Dealing with new recruiting requests\nNote: Remember to update the issue with every action you take and its results.\nAssess the desired timeline. Our SLA for recruiting is 2 weeks minimum depending on the criteria, although some requests are fulfilled much more quickly.\nKeep in mind:\nIf they say they want to speak with users ‚Äúin the next couple of days,‚Äù communicate that recruiting may take up to two weeks.\nThe more specific the recruiting criteria (the more qualifications they have or the greater number of respondents they need) the harder it will be to recruit and the longer it will take.\nExample: A request for five software developers who have used our global search feature would be very straightforward and quick to recruit for. A request for 100 self-managed admins who recently upgraded to Ultimate would be more difficult and time-consuming to recruit for.\nAssess the recruiting criteria to ensure you fully understand who they are looking to research. Is any of the criteria ambiguous to you?\nAsk questions until you can distill the criteria down to a few bullet points, for example:\nDevOps engineers\nResponsible for configuring environments for their team\nAt large organizations (500+ people)\nGitLab or non-GitLab users\nReview the Qualtrics screener\nAscertain if the current questions will provide the needed screening criteria. If not, provide feedback in the recruitment issue and suggest edits until the screener directly maps to their stated criteria.\nDon‚Äôt forget to reach out to the UX researcher for assistance. They help the PM and/or Product Designer put together the screener in Qualtrics.\nThe person requesting the research is responsible for creating the screener in Qualtrics and adding you as a contributor.\nStep 3 - Choose the best recruiting channel from these options\nData warehouse contacts\nRequires editor access & SQL knowledge\nContains GitLab SaaS user information.\nCan be used to identify respondents for surveys.\nPull contacts of GitLab SaaS users and then follow the usual process in Qualtrics.\nRespondent.io:\nGreat for quick turnarounds, or when participants don‚Äôt necessarily need to be GitLab users.\nHow to use it:\nLog into Respondent and build and launch the campaign, using the screener from the person conducting the research.\nTake care to double check your criteria and set the correct questions to ‚Äúdisqualify‚Äù participants. For example, you can specify that you only want Jira users by setting ‚ÄòJira‚Äô as a ‚Äòmust select‚Äô response in the relevant question. This will automatically disqualify anyone who chooses another response. This saves you time by reducing the volume of screener responses you need to comb through. It also helps non-researchers easily see who is qualified to take part in the study.\nUserTesting.com\nGood for unmoderated usability tests\nWe can leverage their panel to recruit technical users\nUsing Team members to socialize requests:\nHow to use it:\nPost in Slack channels like #ux, #product, and #whats_happening_at_gitlab . Include a concise call to action, due date, and share the link that you want people to post.\nDirect outreach\non LinkedIn:\nHow to use it:\nYou can search for the criteria you are looking for and use inMail credits to invite them.\nIf you do not have a Recruiter License, you will need to open an access request.\nWatch this\nvideo\nfor how to get started\nMarketing newsletter:\nNote: Reserve this for critical studies, like the SUS.\nThe newsletter is sent on the 10th and 25th of each month.\nHow to use it:\nSubmit a request for the survey to be included in the newsletter. Here is an example\nissue\n.\nSearch the Digital Marketing\nproject\nfor\nnewsletter 2020\nand select the issue for your target date. If an issue is not open yet, find the most recent issue and comment on it to ask about a request for the next newsletter. Make sure to @ mention the person who opened that issue.\nDocs site banner:\nWe can occasionally use a banner on the\nDocs site\nto promote larger surveys. It is a lightweight way to quickly fulfill surveys that otherwise would be restricted to panels or the data warehouse.\nThere are some biases that should be considered when sampling by this method. (People using the Docs site are usually looking for information on a potential road block they have.)\nThe docs team can choose not to allow your request. Typically it takes 1 week to get this up and running\nStep 4 - Paying participants\nParticipants are paid differently, depending on the recruiting channel you use\nRespondent.io\nPay users within the Respondent platform.\nThere should be credits loaded into the platform. Click the ‚Äúapprove‚Äù button to pay people who have attended sessions.\nIf there are sessions where participants have not been marked ‚Äúattended,‚Äù please remind the interviewer to do so ASAP, or to verify that they were a no-show. This should be done in a timely manner, so our platform profile can retain a good standing.\nTremendous\nThis method is currently being used for paying all UX Research participants that do not come through Respondent.io.\nAccess to the platform is restricted & an AR may need to be opened for the UX Researcher covering.\nSelect Send Rewards.\nNavigate to the campaign you want to process the incentives under.\nInput the participants email address and first name, as well as the reward value in USD. Tremndous will automatically offer the participants the relevant reward based on their location.\nClick Add Recipient. You will have the option to add more as required or you can also upload a csv.\nContinue to the payment screen.\nOn the payment screen select Pay with Credit Balance, and then click process.\nYour participants should receive their incentive same day, but allow up to 48 hours for processing.\nTransferring back to the UX Research Operations Coordinator\nYou made it! The UX Research Operations Coordinator is back in action and ready to take over.\nAssign the UX Research Operations Coordinator any recruiting issues that are still open.\n@ them in a comment and provide an update on the status of the issue and what still needs to be done.\nUpdate the coverage issue the day before the UX Research Operations Coordinator returns as not everyone is based in the same timezone and they may start their workday before yours.\nIf needed, the UX Research Operations Coordinator will open a new MR to remove the UX Researcher from being automatically assigned to new research recruitment requests.\nResources\nHow the UX Research Team Operates\nRecruitment case study\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1462}
{"doc_id": "896e0d0f385a8d5f", "url": "https://handbook.gitlab.com/handbook/total-rewards/stock-options", "title": "Equity Compensation | The GitLab Handbook", "text": "The Handbook\nGitLab's Guide to Total Rewards\nEquity Compensation\nLearn more about Equity Compensation at GitLab\nAbout Your Ownership in GitLab\nAt GitLab, we strongly believe in team member ownership in our Company. We are in business to create value for our shareholders and we want our team members to benefit from that shared success.\nThis guide is meant to help you understand the piece of GitLab that you‚Äôre going to own!  Its goal is to be more straightforward than the full GitLab 2015  & GitLab 2021 Equity Incentive Plans (the ‚Äú2015 Equity Plan‚Äù) and (the ‚Äú2021 Equity Plan‚Äù) and your stock option agreement or RSU agreement which you are advised to read, which both go into the full legal details. Please note, however, that while we hope that this guide is helpful to understanding the stock options and/or stock issued to you or RSU grants under the both Equity Plans, the governing terms and conditions are contained in the 2015 and 2021 Equity Plans and the related stock option agreement. You should consult an employment attorney and/or a tax advisor if you have any questions about navigating your stock options or RSU grants before you make important decisions.\nTwo things must happen for your stock options or RSUs to be meaningful,  for example:\nYou must meet the vesting schedule of the stock options (i.e. we have a 1 year cliff and 3 years of monthly vesting).\nRSUs are granted quarterly, with a six month cliff vest for new team members and quarterly thereafter up to 4 years.  Refresh grants vest quarterly over 4 years.\nIf a team member leaves GitLab, they have 90 days post termination to exercise their vested options. Unvested RSUs and options are forfeited upon the date of the team member‚Äôs exit from the company.\nEquity Incentive Plans\n2015 Equity Incentive Plan\nand related form agreements would cover information related to GitLab options.\n2021 Equity Incentive Plan\nand related form agreements would cover information related to GitLab RSUs.\n2021 Employee Stock Purchase Plan\nwould cover information related to GitLab ESPP purchases.\nStock Options\nIn the past at GitLab, we have given equity grants in the form of Incentive Stock Options (ISOs) and Non-Qualified Stock Options (NQs). It‚Äôs called an option because you have the option to    buy GitLab stock, subject to vesting terms, at the exercise price provided at the time of grant.\nThe difference in these two types of grants are, generally, as follows:\nISOs are issued to US employees and carry a special form of tax treatment recognized by the US Internal Revenue Service (IRS).\nNQs are granted to contractors and non-US employees.\nGitLab is not giving equity grants in the form of options at this time.\nRestricted Stock Units (RSUs)\nIn September 2021, in connection with our IPO that occurred on October 14, 2021, our board of directors and stockholders approved the  2021 Equity Incentive Plan (the ‚Äú2021 Plan‚Äù) as a successor to our 2015 Plan (together the ‚ÄúPlans‚Äù). The  2021 Plan authorizes the award of both stock options, which are intended to qualify for tax treatment  under Section 422 of the Internal Revenue Code, and nonqualified stock options, as well for the award of  restricted stock awards (‚ÄúRSAs‚Äù), stock appreciation rights (‚ÄúSARs‚Äù), restricted stock units (RSUs), and performance and stock  bonus awards. Pursuant to the 2021 Plan, NQ stock options may be granted only to our team  members. Since September 2021, we have issued RSUs for grants of shares of the Company‚Äôs common stock, the vesting of which is based on the requisite service requirement. Generally, the Company‚Äôs RSUs are subject to forfeiture and are expected to vest over two to four years ratably on a combination of bi-annual and quarterly basis. For RSU Grant Cadence and Vesting please see the following\nslide deck\nSell-to-cover - RSUs\nShares are sold to pay the taxes due on the RSU vesting.  This is an automatic sale and the shares sold are based on the tax rate for your country.  For example, if 100 shares vest, and your tax rate is 30%, then 30 shares will be sold to cover the tax and the remaining shares will be placed in your E*TRADE account.  Taxation for selling of options or GitLab stock owned:\nTaxation of Ordinary Income - RSU - More Detail\nCompensation - At the time of vest for RSUs, you will recognize ordinary income equal to the cash value of the shares that vest.\nTax Liability - Your tax obligation will be based on current tax rates due at the time of vest.  A portion of the shares are sold to pay your tax liability.   For each country, your local tax rates are used.\nFor example, for U.S. team members tax withholding at the time of vest is computed using your federal supplemental tax rate (a fixed percentage), plus state and local and other applicable taxes- such as disability, FICA and Social Security.\nRemaining Shares - The remaining shares from your RSU grants are fully owned by you and deposited in your E*Trade Securities stock plan account.\n(You should always consult with your own tax advisor concerning how holding periods, capital gains and losses, and your personal circumstances may affect your taxes, and before taking any action that may have tax consequences.  Your actual taxes paid will vary depending on your personal circumstances. )\nPlease note that all tax withholding is based on tax rates provided by Baker McKenzie - You can find our current Tax Matrix\nhere\nEmployee Stock Purchase Plan (‚ÄúESPP‚Äù)\nWhat is an ESPP?\nAn ESPP is a benefit GitLab offers that allows team members to optionally purchase shares of their company‚Äôs stock at a discount through regular payroll deductions over specified Offering Periods.\nIn September 2021, the Company‚Äôs board of directors and its stockholders approved the 2021 Employee Stock Purchase Plan (‚ÄúESPP‚Äù) to enable eligible team members to purchase shares of the Company‚Äôs Class A common stock with accumulated payroll deductions and provides a 15% purchase price discount of the fair market value of the Company‚Äôs Class A common stock on the IPO date or purchase date, whichever is lower. The 2021 ESPP also provides up to a 24-month look-back period with four purchase dates in May and November of each year, and the first purchase occurred in May 2022.\nEligibility Requirements\nTeam member is employed via a GitLab entity with 50+ headcount\nTeam members work more than 20 hours per week.\nMust be actively employed at the beginning of the Offering Period to enroll\nMust be actively employed on the last date of the Purchase Period to be able to purchase\nEligible ESPP GitLab Entities\nGITLAB CANADA CORP. (Canada)\nGitLab GmbH (Germany)\nGitLab B.V. (Netherlands/Belgium/Finland)\nGitLab Inc. (US)\nGitLab Federal, LLC (US)\nGitLab UK Limited (United Kingdom)\nGITLAB PTY LTD (Australia/New Zealand)\nGITLAB IRELAND LIMITED (Ireland)\nGitlab France S.A.S. (France)  - as of 2025-06-01\nChanging Contribution Amounts\nContribution increases and decreases are limited during Offering and Purchase Periods\nIncreases: Team members may not increase their contributions after the Offering Period begins.\nDecreases: Team Members  may decrease their contribution rates once during any Offering Period.\nStop Contributions\nTeam members may reduce their contribution to 0% during an offering period.\nAny prior contributions will be used to purchase shares on the scheduled purchase date.\nAt the end of the offering period, the team member will be automatically withdrawn from the offering period effective as of the day after the purchase date following the date of the request.\nTeam members would need to re-enroll as a new participant in the next open enrollment window and begin a new Offering Period  if they wish to participate in the future.\nWithdrawals\nTeam members may withdraw from the ESPP at any time and receive a refund of their withheld contributions. The refunds are processed through Payroll.\nTeam members who withdraw would need to re-enroll in order to participate in future Offering Periods.\nDetails on eligibility, enrollment, calculations, pricing and dollar value can be found at\nESPP Training Deck\nAlternate ESPP Non-US\nThe Alternate ESPP is for team members not eligible for the ESPP, mainly in PEO countries.  Team Members in the Alternate ESPP will be eligible to receive RSUs on the expected earnings as if they would have been able to participate in the ESPP.  There are no payroll deductions or contributions required. The RSUs will be automatically granted to team members as calculated by the following formula for each 6 month purchase period:  Details on eligibility, enrollment, calculations, pricing and dollar value can be found at\nESPP Training Deck\nWhat is an Offering Period?\nThe Offering Period consists of a 24-month period beginning on the applicable Enrollment Date and includes four six-month Purchase Periods.*\nTeam members can only be enrolled in one Offering Period at a time.\nYour Offering Period might be different from the one your coworker is enrolled in.\nESPP Calendar for Offering periods can be found at\nESPP Training Deck\nWhen do Purchases Occur?\nOn the respective Purchase Dates at the end of each Purchase Period. Only whole shares can be purchased.  Purchase dates are normally May 31 and November 30 of each year.\nOther ESPP references\nESPP FAQs\nESPP/RSU Vesting AMA\nGrant Levels\nRSUs and at times Option Grants (Option Grants are rare since September 2021) are determined by Grade Level. If you have any questions on what grant should be offered to a new hire, please reach out to the Compensation and Benefits team by email to\ntotal-rewards@gitlab.com\n. References and information for Grant Levels is held within the  compensation calculator.\nNote: All stock options and RSU grants are subject to approval by the Board of Directors and no grants are final until such approval has been made. The Company reserves the right in its own determination to make any adjustments to stock option grants at its sole discretion including the decision not to make a grant at all.\nPromotions\nPromotion grants are based on the differential between the new hire equity dollar value at the new grade minus the new hire equity dollar value at the current grade using the median of the compensation range. The vesting schedule for the new equity grant will align to the terms and conditions of the equity plan for\nRSUs\n.\nFormula for number of Promotion Equity Grant: (New Hire Equity Grant Dollar Value Median at Promoted Level - New Hire Equity Grant Dollar Value Median at Previous Level)\nFor example, if my current role is Backend Engineer and the median new hire equity grant dollar value grant for my role, level, and location is 20,000 USD, and I am promoted to Senior Backend Engineer and the median new hire equity grant dollar value for that role, level, and location is 40,000 USD, the calculation would be: 40,000 USD - 20,000 USD = 20,000 USD.\nThe output of this calculation will also be compared to 0.5x of the Refresh Equity Grant Dollar Value Median at the Promoted Level. If this calculation yields a higher dollar value than the standard Promotion Equity Grant Formula then this value will be used for the promotional grant value.\nRefresh Grants\nAs part of the updated\nAnnual Compensation Review process\n, eligible GitLab team members will be reviewed for a refresh grant once per year. Refresh grants use the formula above to determine the range of equity dollar value a team member may be eligible for in that cycle based on their current role/grade. Refresh grants will vest in accordance with the equity plan agreement between GitLab and the team members.\nNote: All equity grants are subject to approval by the Board of Directors and no grants are final until such approval has been obtained. The company reserves the right in its sole discretion to make any adjustments to equity grants including the decision not to make a grant at all.\nAnnual Refresh Grant Program Eligibility\nTeam members may be eligible to participate in the annual refresh grant cycle review if they have completed six months of service with the company. However, participation will be based upon individual team member talent assessments (including if a team member is currently in good standing) and\nkey talent criteria\n. Therefore, not all team members will receive a refresh grant in the annual review cycle. Leaders will have discretion on the size of the refresh grant based on talent assessments and equity budget as allocated to each E-group member‚Äôs division. All proposed grants will be reviewed by the People team for pay equality. All proposed equity grants are subject to review and approval by the GitLab Board of Directors.\nOption Vesting\nVesting means that you have to remain employed by, or are otherwise a service provider to, GitLab for a certain period of time before you can fully own the stock under your stock option grant. Instead of giving you the right to purchase and own all of the common stock under your stock option on day one, you get to own the stock under your stock option in increments over time. This process is called vesting and different companies offer vesting schedules of different lengths. At GitLab, our standard practice is to issue options with a four year vesting schedule so you would own a quarter of your stock after 12 months, half of your stock after two years, and all of it after 4 years. Vesting happens on a monthly basis after the first year for new hire grants and monthly after grant for refresh grants. A cliff on a new hire grant is the period at the beginning of the vesting period where your equity does not vest monthly, but instead vests at the end of the cliff period. At most companies, including GitLab, this cliff period is generally one year. This means that if you leave your job either voluntarily or involuntarily before you‚Äôve worked for a whole year, none of your options will be vested. At the end of that year, you‚Äôll vest the entire year‚Äôs worth (12 months) of equity all at once. This helps keep the ownership of GitLab stock to team members who have worked at the company for a meaningful amount of time.\nRSU Vesting & Grant Cadence\nRSUs are grants of shares of the Company‚Äôs common stock, the vesting of which is based on the requisite service requirement. Generally, the Company‚Äôs RSUs are subject to forfeiture and are expected to vest over two to four years ratably on a combination of bi-annual and quarterly basis. New hire grants vest after 6 months, quarterly thereafter over the 4 years.  Refresh grants vest quarterly over 4 years.\nPer our\nSAFE framework\n, we do not add specific dates to the handbook regarding equity. For more information on grant cadence & vesting, please see the following\nslide deck\n.\nRSUs begin vesting on the corresponding grant date.\nRSUs are reviewed for approval quarterly.\nNew Hire: 12.5% vest after ~6 months (depending upon grant date - some new hires may wait a bit longer); remaining RSUs vest quarterly thereafter for 3.5 years (four-year total vest).\nPromotion and Refresh Grants do not require a cliff, begin vesting quarterly for four-year vest.\nExercising Your Options\n‚ÄúExercising your options‚Äù means buying the stock per your option agreement. You pay the exercise price that was set when the options were first granted and you receive stock certificates back. To give team members an opportunity to benefit from any existing tax incentives that may be available (including under the US the Dutch tax laws and tax laws of your country of residence) we have made the stock immediately exercisable. This means you can exercise your right to purchase the unvested shares under your option to start your holding period. However, the Company retains a repurchase right for the unvested shares if your employment or other services ends for any reason. An early exercise of unvested stock may have important tax implications and you should consult your tax advisor before making such a decision.\nWhile the company has the right to repurchase the unvested shares upon your termination of services, the company is not obligated to do so. Accordingly you could lose some or all of the investment you made. Because we are a young company there are lots of risks, so be aware and informed of the risks.\nYou may exercise and hold your options even outside of an open trading window. If you are a Designated Insider, please email\nstockadmin@gitlab.com\nand they will enable you to do so in your E-TRADE account. Team members will have 5 trading days to execute their exercise. Please seek advice from your financial advisor or tax advisor prior processing your exercise.\nE-TRADE: Exercising your Shares in an Open Trading Window\nFor trading in an open trading window, please find the following instructions for specifics on exercise and trading options.\nGitLab Stock Plan Non-US\nGitLab Stock Plan RSUs & Stock Options\nPurchasing GTLB Stock\nIf you would like to purchase GTLB shares, this must be done through your E*TRADE retail account during an open trading window. We would ask that you send us a message at\nstockadmin@gitlab.com\nas we will need to get consent from you to track your GTLB retail shares.\nQuestions about your stock plan or retail account\nE-TRADE Team Member Education Sessions\nEquity 101: What You Need to Know About Your GitLab Restricted Stock Units (RSUs)\nU.S. Session\nNon U.S. Session\nDeck\nwith U.S. and Non U.S. materials attached\nE-TRADE Securities Customer Service\nUS Contact 12 a.m. Monday to 11:59 p.m. Friday ET  Closed holidays  (800-838-0908)\nNon-US local country contact phone numbers are found\nhere\nCustomer Service can assist with\nActivating your account\nNavigating the Stock Plan section of etrade.com\nFinding tax information\nDisbursing cash from and depositing cash to your brokerage account\nBuying and selling securities in your brokerage account\nQuestions on the portal\nOption Expiration\nIf you leave GitLab, you will generally be able to exercise your options that are vested (as of the last day of service).\nIn addition, if not otherwise expired (through termination of your employment), your stock options expire 10 years after they were issued.\nExercise Window After Termination\nIf your employment ends for whatever reason, you have a three month window to exercise your vested options, or lose them. During this window you would have to pay the exercise price and in some cases the tax on the gain in value of your stock options, which could be considerable.\nEquity Administration\nAdministration of (i.e. RSUs, stock options, ESPP share transactions) and equity grant transactions at GitLab are conducted on the ETrade platform.  Equity Grants are approved by the Board of Directors ‚Äúor their designee‚Äù at regularly scheduled quarterly board meetings, which contain  information relevant to the grant including the number of shares, exercise price, vesting period and other key terms. This information is then recorded in your account at ETrade. New participant grants, will need to accepted the Grant Agreements in ETrade document under ‚ÄúGrant Acceptance‚Äù under the Plan Elections section in your E-TRADE account. Please see\nGitLab Stock Plan RSUs & Stock Options\n.\nWith the implementation of WorkDay, interfaces to ETrade provide for electronic files for status updates to participants, such as terminations and change in Cost Centers.\nTaxes\nTax law is complex and you should consult a tax attorney or other tax advisor who is familiar with startup stock options before making any decisions. Please go to the\ntax team‚Äôs stock options\npage for more information on taxation of stock options.\nUS employees with Incentive Stock Options (ISOs)\nTaxation from the US perspective is not as straightforward as you might like. You aren‚Äôt taxed when you exercise your options. Tax is due on the gain or profit you make when you sell the stock. Depending on your holding period, the tax may be treated as ordinary income or capital gain. Moreover, when you hold the options long enough you may be subject to 0% capital gains tax. To outline the five possibilities of the different scenarios that may apply:\nExercise your options to purchase shares, and hold.\nExercise your options to purchase shares, and sell the shares within the same year.\nExercise your options to purchase shares, and sell the shares in less than twelve months, but during the following year.\nSell shares at least one year and a day after you exercised the options, but less than two years from the original grant date.\nSell shares at least two years from the original grant date.\nPlease note, however, that any gain upon exercise of an ISO (difference between the exercise price and fair market value at date of exercise), even if you do not sell the shares, may be counted as a ‚Äútax preference‚Äù towards the Alternative Minimum Tax limit. For instance, under scenario 1 above you have to make an adjustment in your tax return for the Alternative Minimum Tax (AMT) that equals the so-called bargain element. Each scenario has a different tax treatment, so be careful of the tax consequences when you exercise your options. In the long term, holding onto your stock does save taxes, however be aware of the AMT that you will be confronted with. It is strongly advised that you contact a tax advisor to be aware of the US tax consequences.\nIn addition to the benefits of a longer holding period, the IRS does have an additional benefit for holders of Qualified Small Business Stock (QSBS for short). GitLab meets the criteria for QSBS treatment for options exercised prior to August, 2018, however (again), the Company is not in a position to offer tax or legal advice nor does it make any representation about compliance with the QSBS provisions, so check with your own tax and financial advisors. We found\nthis article\nhelpful  in describing the QSBS program in greater detail.\nUS service providers with Non-qualified Statutory Options (NQs)\nFor non-employees of GitLab that have been granted stock options, their stock options are treated as NQs.\nGitLab‚Äôs stock is actively traded on NASDAQ, the NQ is taxed at exercise. The gain of the exercise (fair market value minus the exercise price) has to be reported by form\n(box 7). Withholding is typically not required, however when the service provider fails to provide a valued tax identification number in form 1099, GitLab has to ensure backup withholding (roughly 25%).\nNetherlands, Germany and Australia\nFor our team members based in the Netherlands, Germany and Australia, the difference between the exercise price and the fair market value is considered taxable at the date you exercise your stock options. With respect to reporting taxes: the taxable gains are subject to employer tax withholding. The tax payable is therefore deducted from your gross payroll with respect to the exercise of your stock options.\nThe United Kingdom\nIn the United Kingdom there is a small difference in the tax treatment of exercising your stock options as opposed to the other entities; the difference between the fair market value and the exercise price is taxed at the date of exercise.\nDual-Class Stock\nOften companies will create multiple classes of stock, with each class having different voting rights, in order to provide protection to the company‚Äôs founders, early investors, and early employees, whose long-term vision for the company may not align with that of later stage investors. At the GitLab Board of Directors meeting held on January 31, 2019, the Board approved the creation of such a dual-class structure.\nEffect of Dual-Class Stock\nClass B stockholders retain significant influence over stockholder votes and actions.\nThe Influence of long-term Class B stockholders increases as other stockholders from before being public sell or distribute their Class B stock, which converts into Class A common stock upon sale or distribution.\nDual-Class Voting\nClass A Common Stock - 1 vote per share\nClass B Common Stock - 10 votes per share\nCreation of Dual-Class Stock\nBeing Public\nClass B converts to Class A in sale or distribution unless ‚Äúpermitted transfer‚Äù (see below).\nAdditional sales of Class A common stock.\nPermitted transfers would be transfers to one or more family members, transfers to a trust for the benefit of the stockholder or in favor of a family member of the stockholder, or transfers   to a general partnership, limited partnership, limited liability corporation, or other entity controlled by the stockholder or a family member of the stockholder.\nLast modified May 20, 2025:\nReplace ESPP Eligible Entities with Official Names (\nd7330f5f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4083}
{"doc_id": "b0f1b1fa47494389", "url": "https://handbook.gitlab.com/handbook/enterprise-data", "title": "Enterprise Data Team | The GitLab Handbook", "text": "The Handbook\nEnterprise Data Team\nThe GitLab Enterprise Data Team is responsible for empowering every GitLab team member to contribute to the data program and generate business value from our data assets.\nWelcome to the Enterprise Data Team Handbook\nOur Vision is to\nContribute to GitLab‚Äôs journey of becoming the leading AllOps platform by responsibly harnessing the power of data.\nIn pursuit of our vision, we will focus on 4 outcomes:\nDrive\ncompany results by building trusted, reliable, and innovative data products and insights when and where needed.\nMinimize\ntime from question to insight to action, enabling team members to move faster by implementing efficient processes and enabling self-service analytics.\nDevelop\nand secure our data into a uniform, trusted asset through data protection & privacy, iterating on processes, people, and platforms.\nEnable\nevery team member to contribute to initiatives responsibly and with trust, building a powerful data-driven culture.\nRead our\nDirection\npage to learn what we are doing to improve data at GitLab.\nOur\nPrinciples\ninform how we accomplish our mission.\nWould you like to contribute?\nRecommend an improvement\n,\nvisit Slack #data\n,\nwatch a Data Team video\n. We want to hear from you!\nHow Data Works at GitLab\nThe collective set of people, projects, and initiatives focused on advancing the state of data at GitLab is called the\nGitLab Data Program\n. GitLab has two primary distinct groups within the Data Program who use data to drive insights and business decisions. These groups are complementary to one another and are focused on specific areas to drive a deeper understanding of trends in the business. The two teams are the (central) Enterprise Data Team and, separately, Function Analytics Teams located in Sales, Marketing, Product, Engineering or Finance. Watch the\nData Recruiting Video\nto hear from some of the teams involved and what they are working on.\nThe\nData Team\nreports into Marketing office and is the Center of Excellence for enterprise insights & analytics (not operational), data science, data platform & infrastructure, BI technologies, master data, data governance and data quality. The Data Team is also responsible for the enterprise data strategy, building\nenterprise-wide data models\n, providing Self-Service Data capabilities, maintaining the\ndata platform\n, developing\nData Pumps\n, and monitoring and measuring\nData Quality\n. The Data Team is responsible for data that is defined and accessed on a regular basis by GitLab team members from the\nSnowflake Enterprise Data Warehouse\n. The Data Team builds data infrastructure to power approximately 80% of the data that is accessed on a regular basis. The Data Team also provides a Data Science center of excellence to launch new advanced analytics initiatives and provide guidance to other GitLab team members.\nFunction Analytics Teams\nreside and report into their respective divisions and departments. These teams perform specific analysis for business activities and workflows that take place within the function. These teams perform ad-hoc analysis and develop dashboards based on the urgency and importance of the analysis required, following the\nData Development\napproach. The most important and repeatable analysis will be powered by the centralized\nTrusted Data Model\nmanaged by the central Data Team. Function Analytics Teams also build function-specific/ad-hoc data models and business insights models to solve for urgent and operational needs, not requiring trusted data features. Function Analytics Teams work closely with the Data Team in a variety of ways: expand GitLab‚Äôs overall analytics capabilities, extend the\nData Catalog\n, provide requirements for new Trusted Data models and dashboards, validate metrics, and help drive prioritization of work asked of the Data Team. When data gaps are found in our business processes and source systems, the team members will provide requirements to product management, sales ops, marketing ops, and others to ensure the source systems capture correct data.\nData Program Teams\nThe GitLab Data Program includes teams focused in the following areas:\nCustomer Success Operational Data Team\nEnterprise Data Team\nFinance Analytics & Insights\nMarketing Strategy and Performance\nMarketing Web Analytics\nPeople Analytics Team\nProduct Data Insights\nAnalytics Instrumentation Group\nSales Analytics\nHow Data Teams Work Together\nOn a normal operational basis, the Data Team and Function Analyst teams work in a ‚ÄúHub & Spoke‚Äù model, with the Data Team serving as the ‚ÄúHub‚Äù and Center of Excellence for analytics, analytics technology, operations, and infrastructure, while the ‚ÄúSpokes‚Äù represent each Division or Departments Function analysts. Function analysts develop deep subject matter expertise in their specific area and leverage the Data Team when needed.  From time to time, the Data Team provides limited development support for GitLab Departments that do not yet have dedicated Function Analysts or those teams which do have dedicated Function Analysts, but might need additional support. The teams collaborate through\nSlack Data Channels\n, the\nGitLab Data Project\n, and ad-hoc meetings.\nclassDiagram\nSales : +Sales Analyst\nMarketing : +Marketing Analyst\nProduct : +Product Analyst\nEngineering : +Operations Analyst\nEngineering : +Infrastructure Analyst\nFinance : +Financial Analyst\nPeople : +People Analyst\nData : +Data Analyst\nData : +Analytics Engineer\nData : +Data Engineer\nData : +Data Scientist\nData : +Data Quality and Governance Analyst\nThe Data Platform & Architecture Team\nThe\nData Platform Team & Architecture Team\nis part of the Enterprise Data Team and focuses on building and maintaing secure, efficent, and reliable data systems\ndata infrastructure\n. The Data Platform & Architecture Team is both a development team and an operations/site reliability team. The team supports all Data Pods with\navailable, reliable, and scalable\ndata compute, processing, and storage. Platform components include the Data Warehouse, New Data Sources, Data Pumps, Data Security, and related new data technology. The Data Platform team also drives the\nData Management processes\n. The Data Platform Team is composed of\nData Engineers\n.\nAnalytics Engineering Team\nThe\nAnalytics Engineering Team\ntransforms raw data into clean, structure and usable formats for data decision-making. The Analytics Engineering team also drives Enterprise Data Program and supports the wider data community. The team focuses on inventorying, integrating, maintaining, and governing the data at an Enterprise level. This includes collaborating with the business units and data teams in establishing and facilitating commonly accepted guidelines around Enterprise data along with building\nenterprise-wide data models\n, supporting Self-Service BI and Analytical capabilities by providing Data Enablement and required training to the Users on Enterprise Data Models.\nThe Enterprise Insights & Data Science Team\nThe\nEnterprise Insights & Data Science Team\nutilize analytics and Machine Learning (ML) for insights into customer behavior and company performance. The Enterprise Insights & Data Science team focuses on delivering a complete view of the customer (Customer 360), predict customers that are likely to buy, expand or churn, develop models to predict the long-term value of customers, create detailed customer profiles, and deliver insights on company performance.  The Team acts as a Center of Excellence for predictive analytics and supports other teams in their data science endeavours by developing tooling, processes, and best practices for data science and machine learning. List of the current projects can be found in the\nData Science handbook page\n.\nData Governance and Data Quality Team\nThe\nData Governance and Data Quality Team\nfocuses on building a data governance and data quality program that ensures our organization leverages data as a strategic asset with the highest standards of\nintegrity, reliability, and secure accessibility\nwhich are enabled through robust policies, advanced technologies and a culture of collaboration. The team partners with cross functional teams including Enterprise Apps, Security and Legal to establish data policies, quality controls, metadata management and compliance with regulatory requirements.\nEnterprise Data Team Job Families\nThe job families are designed to support all of the routine activities expected of a Data Team.\nData Analyst\nData Scientist\nAnalytics Engineer\nData Engineer\nData Governance and Quality Analyst\nData Governance and Quality Program Manager\nManager, Data\nDirector, Data\nHow We Measure Impact\nOur impact will be measured against 4 dimensions (these metrics will adjust as our data maturity increases and our focus areas change):\nData Platform Stability\nInfrastructure Cost vs Plan: This performance indicator tracks the financial position of the actual cost vs the planned costs for the data infrastructure (warehouse, ETL pipelines, etc.).\nData Uptime: This performance indicator measures the % of time a data pipeline was providing data without reported incidents. This indicator is currently measured based on Monte-Carlo data, according to the configured (automatic) monitors on any given table in the\nraw\ndata layer.\nData Governance and Data Quality\n% improvement in data quality metrics\n% data assets enriched with metadata\n% reduction in time to discover data\nData Adoption\nData Monthly Active Users (DMAU): DMAU Measures the direct usage of the Data Platform by GitLab Team Members based on usage of the primary analysis tools we provide: Snowflake and Tableau. Over time we will include additional tools such as Jupyter and Data Studio, as well as usage of data pumped into EApps such as Marketo (PQLs), Gainsight (Usage Data), and Salesforce (Propensity Scores). A visualization of these numbers can be found in the\nData Monthly Active Users\nreport.\nData Monthly Active Users (DMAU) = Unique users of a Data system (i.e. Snowflake, Tableau) in a given month\nData Maturity Score: measured annually, evaluates our current data maturity against 8 data capabilities:\nStrategy & Approach\nCulture & leadership\nMetrics & KPIs\nOrganization & Skills\nArchitecture & Integration\nGovernance & Quality\nDeployment & Usage\nTechnology & Operations\nNumber of certified Tableau dashboards\n% total views from certified dashboards\nRevenue/Efficiency Impact\nFirst we have the evaluation criteria known as Dollar Value of our Results as calculated by the Data Value Calculator. We can use the\nData Team Value Calculator\nto calculate the dollar value of the initiatives we contribute to and the issues we complete.\nAdditionally we want to shift to a more aspirational measurement which is to measure the ARR impact or efficiency gain from each of our data products. Our data science models will be measured in the following ways:\nPropensity to Expand (PtE) and Purchase (PtP) - We will evaluate two metrics: 1) Incremental revenue impact 2) # of leads generated that are not currently in the sales funnel\nPropensity to Churn (PtC) - We will evaluate two metrics: 1) # of high propensity to churn customers that didn‚Äôt churn 2) Incremental revenue impact\nHow To Connect With Us\nPrimary #Data Slack Channel\nIssue tracker\nGitLab Unfiltered Data Team Playlist\nData Slack Channels\n#data\nis the primary channel for all of GitLab‚Äôs data and analysis conversations. This is where folks from other teams can link to their issues, ask for help, direction, and get general feedback from members of the Data Team.\n#data-team\nis where Data Team announcements are made.\n#data-daily\nis where the Data Engineers track day-to-day productivity, blockers, and fun. Powered by\nGeekbot\n, it‚Äôs our asynchronous version of a daily stand-up, and helps keep the Data Engineers aligned and informed.\n#data-lounge\nis for links to interesting articles, podcasts, blog posts, etc. A good space for casual data conversations that don‚Äôt necessarily relate to GitLab. Also used for intrateam discussion for the Data Team.\n#data-engineering\nis where the GitLab Data Platform team collaborates.\n#bt-data-science\nis where the GitLab Data Science team collaborates.\n#analytics-pipelines\nis where slack logs for dbt runs and monte carlo analysis are output and is for analytics engineers to maintain. The DRI for tracking and triaging issues from this channel is shown\nhere\n.\n#data-triage\nis an activity feed of opened and closed issues and MR in the data team project.\n#data-pipelines\nis where alerts from  the ELT pipelines / FiveTran/ Monte Carlo RAW layer anomalies  published and is for data engineers to maintain. The DRI for tracking and triaging issues from this channel is shown\nhere\n.\nYou can also tag subsets of the Data Team using:\n@datateam - this notifies the entire Data Team\n@data-engineers - this notifies just the Data Engineers\n@data-analysts - this notifies just the Data Analysts\n@analytics-engineers - this notifies just the Analytics Engineers\n@data-governance - this notifies just the data governance and quality team members\nExcept for rare cases, conversations with folks from other teams should take place in #data, and possibly the fusion team channels when appropriate.  Posts to other channels that go against this guidance should be responded to with a redirection to the #data channel, and a link to this handbook section to make it clear what the different channels are for.\nGitLab Groups and Projects\nThe Data Team primarily uses these groups and projects on GitLab:\nGitLab Data\nis the main group for the GitLab Data Team.\nGitLab Data Team\nis the primary project for the GitLab Data Team.\nThough many of our GitLab projects are\ninternal only\n, the rest are still\npublic by default\n.\nYou can tag the Data Team in GitLab using:\n@gitlab-data  - this notifies the entire Data Team\n@gitlab-data/engineers  - this notifies just the Data Engineers\n@gitlab-data/analysts - this notifies just the Data Analysts\n@gitlab-data/analytics-engineers - this notifies just the Analytics Engineers\nTeam, Operations, and Technical Guides\nSQL Style Guide\nHigh Level Diagram\nHow We Work\ndbt Guide\nSystem Data Flows\nTeam Organization\nPython Guide\nData Sources\nCalendar\nAirflow & Kubernetes\nSnowplow\nTriage\nDocker\nPermifrost\nMerge Requests\nData CI Jobs\nPlanning Drumbeat\nRstudio Guide\nTrusted Data\nData Science Team\nJupyter Guide\nData Management\nMeltano Guide\nData Onboarding\nLearning Library\nTableau Guide\nTableau Style Guide\nData Team Handbook Structure\nDashboards & Data You Can Use\nData Learning and Resources\nData Programs\nHow The Data Team Works\nCalendar\nData Analytics Team\nAnalytics Engineering Team\nData Platform Team\nData Science Team\nData Team Principles\nData Management\nPlanning Drumbeat\nTriage\nHow The Data Platform Works\nData CI Jobs\nData Infrastructure\nData Onboarding\nInternship Experience\nData for Product Managers\nData Quality\ndbt Guide\nEnterprise Data Warehouse\nJupyter Guide\nPermifrost\nPython Guide\nRStudio Guide\nSQL Style Guide\nSnowplow\nTableau\nTableau Style Guide\nTrusted Data Framework\nData Governance\nData Governance Processes and Workflows at GitLab\nData Team - How We Work\nGitLab Data Team Workflow\nData Team Organization\nGitLab Data Team Organization\nData Team Platform\nGitLab Data Team Platform\nLast modified July 9, 2025:\nGoogle tag manager handbook (\n7a73052e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2358}
{"doc_id": "99aad03d78463054", "url": "https://about.gitlab.com/topics/single-application", "title": "Why a single application for DevOps?", "text": "Topics\nSingle application\nWhy a single application for DevOps?\nLearn how simplifying your toolchain using a single application can increase your speed while reducing cost and risk.\nTry GitLab for free\nThe DevOps toolchain tax\nTraditional DevOps solutions require cobbling together multiple tools that were never designed to work together in order to build an DevOps toolchain.\nThis leads to having to pay a √¢¬Ä¬útax√¢¬Ä¬ù on your toolchain made up hidden costs.\nTime and cost to acquire point tools\nTime and cost to integrate all of these tools\nTime and cost to train users on many tools\nUser context switching between all of these tools\nTime and cost to administer all of these tools\nSingle application architecture\nGitLab is a complete DevOps platform designed from the ground up as a single application. From project planning and source code management, to CI/CD, security, and monitoring GitLab√¢¬Ä¬ôs capabilities are built-in as part of the app so you don√¢¬Ä¬ôt have to integrate multiple tools.\nBenefits of a single application\nReduce risk with a single set of permissions\nRather than having to manage authentication and authorization across many tools. GitLab has a single login and one place to set permissions so everyone has the correct access.\nReduce costs with less administrative overhead\nWith a single application to install, configure, and maintain there√¢¬Ä¬ôs less administrative overhead. Since fewer staff needed to administer a single application verse a complex toolchain more of your engineering resources can be allocated towards development of features for your users.\nIncrease speed with a lower time to resolution\nWhen a build pipeline fails how do you troubleshoot? Is it a problem with the infrastructure or did new code fail a test? Perhaps there is state in the original specification that needed to help debug. With traditional toolchains the issue tracker, code repository, and CI/CD pipeline are all separate tools. When teams need to troubleshoot they have to pass state back and forth in a ticket because they likely don√¢¬Ä¬ôt all have access to the same applications.\nWith GitLab, everyone who needs to help troubleshoot a failure has access to all of the data. Pipeline, code, comments, issues, and test results all appear on the merge request so there√¢¬Ä¬ôs a single view. With everyone on the same page troubleshooting is much simpler and things get up and running faster.\nSee more benefits of a single application\nThe DevOps toolchain tax\nSingle application architecture\nBenefits of a single application\n50%+ of the Fortune 100 trust GitLab\nStart shipping better software faster\nSee what your team can do with the intelligent\nDevSecOps platform.\nGet free trial\nTalk to sales", "num_words": 435}
{"doc_id": "8449946f6f132948", "url": "https://handbook.gitlab.com/handbook/support/support-pods/licensing-and-renewals", "title": "Licensing and Renewals Support Pod | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Pods\nLicensing and Renewals Support Pod\nA Support Pod for everything Licensing and Renewals related (from the technical side).\nPurpose\nDiscuss and handle Licensing, Renewal and Subscription related matters for customers that involve technical or technical-adjacent problems and solutions.\nProvide training, help and assistance with others who wish to grow their knowledge in the Licensing, Renewal and Subscription field of GitLab technical support. This is done via shadowing, pairing, and other methods that will be evolved and developed as we transition from just a group of engineers working the tickets and improving the processes to a proper Support Pod.\nCurrent Objectives\nCollaborate on tickets\nGain and share knowledge\nImprove documentation\nIdenify bugs, product issues and MRs\nAssist in updating relevant Support Training modules\nServe as a resource for the greater Support team\nInfluence product based on our experiences\nDevelop tooling to aid in testing, troubleshooting, analysis, and learning\nSupport Pod Members\nLead:\nBethany McGrew\n(\n@jemcgrew\n)\nMembers:\nBen King\n@benjaminking\nChantal Lawrence\n@chantalskye\nDaphne Kua\n@dkua1\nDonique Smit\n@doniquesmit\nKeven Hughes\n@kevenhughes\nMichelle Almendarez\n@malmendarez\nSameer Shaik\n@s_shaik\nSokunrotanak Srey  (Rotanak)\n@rotanak\nTom Houston\n@tom.houston\nTom McAtee\n@rrelax\nVidhya Hariharan\n@vidhya.h\nFirdaws Farukh\n@ffarukh\nDima Serafin\n@dserafin-gitlab\nCollaboration Channels\nSlack channel:\n#support_licensing-subscription\nOpen Office and Pairing Sessions\nLearning Resources\nTraining Module\nLast modified August 23, 2024:\nL&R Pod addition to handbook (\n1842080e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 238}
{"doc_id": "5d210782a023ce9b", "url": "https://handbook.gitlab.com/handbook/solutions-architects", "title": "Solutions Architects Handbook | The GitLab Handbook", "text": "The Handbook\nSolutions Architects Handbook\nSolutions Architects (SA) are the trusted advisors to GitLab prospects and customers during the presales motion, demonstrating how the GitLab application and GitLab Professional Services address common and unique business requirements\nSolutions Architecture Mission\nMission Statement:\n‚ÄúAs a learning organization, we enable our customers to realize value as they achieve outcomes faster and more efficiently and drive GitLab sales through technical and business consultation.‚Äù\nElaboration:\nLeveraging our technical and domain-specific expertise, along with strong cross-functional collaboration, Solutions Architects strive to become trusted advisors, fostering a collaborative learning environment with our prospects, customers, partners, and internal teams. Our primary objectives include:\nCrafting impactful value propositions that resonate with prospects, demonstrating the potential for transformative outcomes through GitLab adoption.\nChampioning successful adoption of the GitLab platform, ensuring our customers realize maximum value from their investment.\nCultivating a thriving business partner ecosystem by fostering partner capabilities and co-developing innovative solutions that expand market reach and customer value.\nHere‚Äôs how the SA organization fosters value creation through the lens of a learning organization and DevOps culture:\nShared Vision & Value Creation\nThe SA team aligns its goals with the overarching organizational vision of empowering customer success.\nThey prioritize customer value creation, understanding that their success is directly tied to the positive outcomes achieved by their customers.\nThis shared focus encourages collaboration and a sense of collective responsibility towards delivering value.\nPersonal Mastery & DevOps Expertise\nSAs continually expand their technical, consultative, and domain-specific knowledge, embracing a mindset of lifelong learning.\nThey actively seek out new information, experiment with innovative solutions, deliberately practice, and share insights with their peers, contributing to the team‚Äôs collective expertise.\nThis emphasis on personal mastery aligns with the DevOps culture of continuous improvement and adapting to evolving technology landscapes.\nSystems Thinking & Customer-Centric Approach\nSAs take a holistic view of the customer‚Äôs challenges, understanding how different parts of their organization and technology stack interact and impact each other.\nThey identify potential bottlenecks or inefficiencies, working collaboratively to design solutions that optimize the entire system for maximum value creation.\nThis systems thinking approach echoes the DevOps philosophy of breaking down silos and promoting cross-functional collaboration to achieve shared goals.\nSAs also leverage these concepts to improve internal processes at GitLab.\nChallenging Established Mental Models & Encouraging Innovation of Thought\nSAs encourage customers to question assumptions and challenge traditional ways of thinking about their processes and technologies.\nThey introduce new perspectives and innovative solutions, helping customers overcome limitations and unlock new opportunities for growth.\nThis focus on challenging existing mental models and fostering innovation reflects the DevOps principle of experimentation and learning from both successes and failures.  SAs also challenge internal assumptions and approaches, looking to continuously improves GitLab‚Äôs ability to help our customers.\nTeamwork & Knowledge Sharing\nThe SA team operates as a collaborative unit, sharing knowledge, experiences, and best practices freely.\nThey create a safe space for experimentation and learning, fostering an environment where individuals feel comfortable asking questions, seeking help, and offering insights.\nThis emphasis on teamwork and knowledge sharing reflects the core DevOps values of collaboration and transparency.\nBuilding and leveraging continuous feedback loops\nThe SA organization thrives on feedback, both between team members and through instrumentation of our practices.  By leveraging feedback and data, the SA organization makes data driven decisions wherever possible.\nA culture of feedback reflects the DevOps philosophy of continuous improvement and adapting to evolving technology landscapes.\nConclusion:\nBy embracing the principles of a learning organization the SA team becomes a powerful catalyst for customer value realization. They not only provide technical expertise but also foster a collaborative and innovative environment where customers are empowered to achieve their goals and maximize the value they derive from GitLab solutions.\nRole & Responsibilities\nSolutions Architects (Field)\nField\nSolutions Architects\n(SA) are the trusted advisors to GitLab prospects and customers during the presales motion. We demonstrate how the GitLab platform and GitLab Professional Services address common and unique business requirements. SA‚Äôs add value to GitLab‚Äôs customers by providing subject matter expertise and industry experience throughout the sales process and collaborate internally with product.\nIn addition, SA‚Äôs identify and propose comprehensive solutions to complex business problems and workflow scenarios after compiling inputs from customer requests during conversations. Desired inputs include pain points, role-based visibility concerns, opportunities for improved efficiencies, current technologies and tools (3rd party to GitLab) and therefore opportunities to improve integrations, corporate initiatives, target outcomes and more. SA‚Äôs also act as the technical liaison between the sales team and other groups within GitLab, engaging GitLab employees from other teams as needed in order meet the needs of the customer.\nOur Field SA‚Äôs also engage proactively with existing GitLab customer to provide thought-leadership, engage in innovative solutions, collaborate around evangalism activities around unique customer requirements (i.e. meetups and presentations) and continously seek market feedback to improve the GitLab platform.\nCenter of Excellence\nThe Solutions Architecture\nCenter of Excellence\nis team comprised of Subject Matter Experts,\nDemo Architects\n, and Business Value Managers focused on accelerating GitLab‚Äôs market leadership and revenue growth by delivering specialized expertise at scale.\nStrategic Field Organization\nThe\nStrategic Field Organization\nis a team of\nPrincipal Solutions Architects\nthat support global strategic sales opportunities and customers. This team collaborates with the regional account teams to work together on large engagements that require a higher degree of strategic planning, consulting, executive-level technical leadership, and internal GitLab cross-departmental collaboration.\nEcosystem Solutions Architects\nare the trusted advisors to our strategic alliances partners, professional services partners, and channel resellers. The focus of this team is to develop relationships and provide technical assistance and leadership to drive joint GTM strategies. This team helps grow and strengthen the partner ecosystem by building new capabilities and growing GitLab revenue together with partners.\nIn addition to core responsibilities, Solutions Architects may assist in other client-facing activities aligned to Partner and Strategic Marketing such as blogs, videos, webinars, presentations and industry trade show presence.\nSee the\nSolutions Architect role description\nfor additional details, and\nEngaging an Ecosystem SA\nwhen you need help with a partner cooperative opportunity.\nSA Managers\nSA Manager Process\nThe Field and Partner SA Management (referred as SA management going forward) around the globe collaborates around unique requirements, identifies improvements in the go-to-market approaches and focussed on prioritises on strategies to address the market‚Äôs requirements. The SA management is aligned in the interest of technical matters to address exisiting needs raised by customers and priotise on innovative requirements. The SA management will collaborate with product teams to achieve required outcomes.\nTrusted Advisors\nBeing a Trusted Advisor is referencing a role/skill that a person takes on when working with customers to solve their business problem.\nBuilding Trust (Trusted Advisor)\n:\nConnects with key stakeholders on both a personal and professional level and shows up as a credible and reliable champion for customers. Effectively positions GitLab as a partner to the customer rather than just another vendor with a focus on following through on commitments and delivering results.\n‚Äì\nSolution Focus Field Competency\nKey Attributes for Positioning Value\nAs the DRIs helping position, prepare, and guide a customer‚Äôs technical evaluation the SA team ensure that GitLab can surface the right points of value to the customer‚Äôs key stakeholders post technical evaluation.  The following embody GitLab‚Äôs technical evaluation philosophy and help guide successful technical evaluations.\nThese offerings are delivered each within a specific context of a particular customer journey.\nLabs / Workshops\n: Closed invite, typically in-person events (or a Zoom meetings) providing an exclusive list of customers (typically 1) access to a lab environment, where SAs provide personalized guidance to the customers as questions arise to help them see the value of what they are not currently paying for.\nTechnical Discovery\n: A deep dive into current practices at the company that aid in helping identify pain points specific to where GitLab can help address needs and work towards a better long-term state.\nDemonstrations\n: Built around the work done within the technical discovery. Demonstrations aim to address at least 3 specific pain points identified during discovery while selling the vision of GitLab‚Äôs DevSecOps platform approach.\nGuided Trials\n: Three goals in 30 days through the usage of a GitLab Trial. This can oftentimes be used to replace the need for the more formal Proof of Value.\nProofs of Value\n: Technical evaluation with more complexities than a Guided Trial. May last up to 8 weeks.\nChanging the Solutions Architects Handbook Content\nThis is the Solution Architect handbook. If you see any typos, copywriting improvements or content clarifications you‚Äôd like to contribute, please create a merge request and ask your managers to merge. Please add the label ‚ÄúSA-HANDBOOK‚Äù to your merge request, and post a link to the\nsolutions-architects\nslack channel, mentioning @sa_leaders, as a heads up and so we can thank you! Since we have a bias for action, we trust your judgement.\nDemonstrations\nSolutions Architects are occasionally called on at a moments notice to give a demo or join a call to show a prospect or customer specific GitLab functionality\nSA Career Development\nFor career development Solution Architects can choose between an individual contributor or leadership track\nSA Manager Operating Rhythm\nThis page provides an overview on relevant SA Managers processes. The SA Manager role is made up of pillars: Managing the Business and Managing the Team.\nSA Practices\nSA Practices Solution Architects have various practices:\nCommunities of Practice\nDeliberate Practice ‚Ä¶\nSolutions Architect Sales Plays\nDiscover GitLab Solutions Architects' Sales Plays practices\nSolutions Architects - Strategic Field Organization\nThe Strategic Field Organization is a team of Principal Solutions Architects that support global strategic sales opportunities and customers.\nSolutions Architects Content Calendar\nContent calendar for Solutions Architects.\nSolutions Architects GitLab Docs Section\nPurpose and contribution process for the GitLab Solutions Documentation section.\nSolutions Architects Onboarding\nOnboarding Program for Solutions Architects (SA).\nSolutions Architects People Leader Shadow Program\nA program enabling Solutions Architects (SA) to shadow a Solutions Architect people leader.\nSolutions Architects Processes\nSA Opportunity Hygiene This Section of the handbood describes all the processes Solutions Architects ‚Ä¶\nSolutions Architecture Center of Excellence Handbook\nAccelerating GitLab's market leadership and revenue growth by delivering specialized expertise at scale through Subject Matter Expertise, Demo Architecture, and Business Value services.\nTools and Resources\nDiscover GitLab Solutions Architects' tools and resources\nLast modified June 5, 2025:\nRemoving Technical Close Plans (\n65532b7b\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1731}
{"doc_id": "1cae35db7fbea86e", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/brand-video", "title": "Brand Video | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nBrand Video\nGitLab Brand Creative - Brand Video Handbook\nWhat We Do\nWe create compelling video content that amplifies brand awareness, educates our audiences, announces releases, and supports company-wide initiatives. Brand video is within the Brand Creative team and we specialize in video production‚Äîbringing storytelling, creativity, and design to life in every project. Our goal is to embody GitLab‚Äôs brand and purpose in every frame, ensuring consistency, clarity, and impact. Whether it‚Äôs a simple webinar or a large-scale product announcement, we approach every opportunity with intention, elevating the message through thoughtful and engaging visuals. We are committed to ensuring each video reflects the same excellence, innovation, and clarity that GitLab delivers.\nTeam - Who We Are\nJoanna Cyprys - Sr Manager, Video\nDale Harper - Video Producer\nHow We Work\nIf you need a video‚Äîwhether it‚Äôs an edit to an existing asset, help with a recording (on location or remote), or with a new video from concept to completion‚Äîplease use one of our issue templates below. Each template includes guided prompts to help you outline the essential information, ensuring we have everything needed to bring your vision to life efficiently.\nOnce submitted, our Brand Video team will review your request, assign a Producer, and develop a clear action plan to move your project forward.\nRequesting Support\nSubmit video requests using one of these templates\nNew Video Request\n‚Äì For full video production projects.\nVideo Edit Request\n‚Äì For modifications to existing videos or edit-only support.\nUpload Request\n‚Äì For adding videos to YouTube or Vimeo.\nYou can view all the Brand Creative team requests templates here. Don‚Äôt see a template here that reflects your request? Just use a blank issue within brand video and assign to Joanna Cyprys.\nProject Timeline Expectations\nNew Video Production:\n~8-12 weeks (from planning to end deliverable).\nFaster timelines can be accommodated based on priority\nEdit Requests:\n1-4 weeks\nUpload Requests:\n48 hours\nIf you have a pressing need or you are unsure of what is required for the video project, do not hesitate to reach out to the Brand Video Slack channel\n#brand_video\n.\nResources\nVideo Hosting\nYouTube\nBrand YouTube channel\nfeatures polished, high-quality videos that showcase our products, exciting announcements, customer stories, and thought leadership‚Äîdesigned for broad reach, impact and brand storytelling. These often include motion graphics and feature a high production value. All videos added to this channel need to be approved by the Brand Video Team.\nUnfiltered\nis not managed by the Brand Video Team and  is used by GitLab Team Members to upload content intended for team and community members, including (but not limited to) team meetings, discussions, monthly release kick-offs, office hours, CEO 101 meetings, and casual demos.\nVimeo\nUsed for videos embedded in webpages, ebooks and emails and anywhere you are able to embed content. Vimeo can also be used to create videos using the video creation tools which allow you to record and edit. You can open an access request to request access to this tool.\nVirtual Recordings\nRiverside:\nWe use Riverside to capture high quality video recordings direct to your device for webinars, interviews, testimonials or hosted content. This platform allows the host of the recording to manipulate the camera and microphone settings for best results. Think of it as a virtual studio.\nZoom:\nZoom is an excellent resource to use when recording important meetings or if you need to capture webinar footage quickly. Zoom recording quality can be affected by each participant‚Äôs internet speed and computer/device performance. Zoom records the footage directly to the cloud so lag or audio drift can occur. For best results with Zoom,\nreview the zoom record settings\nwhen recording using zoom.\nQuicktime:\nQuickTime is a great option for recording yourself or capturing your screen, especially for simple, high-quality recordings without the need for an internet connection. It‚Äôs built into macOS, making it easily accessible and user-friendly. Whether you‚Äôre recording a video message, a tutorial, or a presentation, QuickTime offers a straightforward way to record both webcam and screen content with minimal setup.\nPost-Production Tools\nOur Brand Video team uses best-in-class post-production tools. We standardize our workflow to handle everything from editing and motion graphics to translations and captions. This setup lets us move quickly‚Äîwhether we‚Äôre collaborating with internal teams or jumping in with external vendors. When we work with external creative partners, we make sure to request full project files so we can tweak or update the project as needed. Our hope is to stay agile and to maximize the potential of every project.\nAdobe Premiere:\nWe recommend all videos be edited with Adobe Premiere as it is the industry standard and easily integrates with other post-production software. Also, if you begin a project in Premiere and need our assistance we can easily jump into the project.\nAdobe Aftereffects:\nWe use Aftereffects for all of our motion graphic and VFX needs.\nRev.com: Rev.com is a trusted industry-standard platform for captions, subtitles and translations known for its accuracy, quick turnaround, and support for multiple languages that meet accessibility standards and global distribution needs.\nVideo Assets\nGitLab animated logo\nMotion Templates\n, including lower thirds\nGuidelines\nMotion Guidelines\nWardrobe best practices\nfor live video shoots\nWardrobe best practices\nfor virtual video shoots\nVirtual Recording Guideline\n- This guideline includes helpful information to capture the best quality virtual content with internal team members and external guests. Share with your guests in advance of your recording as there are background, lighting, and wardrobe tips to make sure everyone looks and sounds their best!\nGet in touch\nPlease reach out using the\n#brand_video\nslack channel.\nVirtual Recording Equipment Guide\nGitLab Brand Creative - Video Equipment Recommendations\nLast modified March 31, 2025:\nUpdating Brand Video pages (\nfccf8d42\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 966}
{"doc_id": "cfc8977092db1982", "url": "https://handbook.gitlab.com/handbook/marketing/sales-development", "title": "Sales Development | The GitLab Handbook", "text": "The Handbook\nMarketing\nSales Development\nThe purpose of this page is to act as the homepage of the sales development org‚Äôs handbook presence.\nWelcome to the Sales Development Organization at GitLab! We are a team designed to drive\nresults for customers\nthrough both inbound and outbound strategies. Our structure is designed to maximize efficiency, responsiveness, and creativity in our outreach efforts.\n1. Sales Development Representatives (SDRs) - Inbound Focused\nKey Attributes:\nFast Response Time\nGlobal Coverage\nAlignment with Marketing for SLAs and Feedback on Campaigns\nDefined and Prescriptive Inbound Processes\nRound Robin Assignment Rules\nTalent Incubator for BDR Teams\nOur Inbound-focused SDRs are known for their swift response times, ensuring global coverage and alignment with marketing initiatives. They operate with defined and prescriptive inbound processes, utilizing round-robin assignment rules. Additionally, the SDR team serves as a talent incubator for our Business Development Representatives (BDRs).\n2. Business Development Representatives (BDRs) - Outbound Focused\nKey Attributes:\nAlignment with SAEs/AE & Sales Leadership\nCollaboration with Field Marketing + ABM\nStrategic Account Planning and Research\nTargeted and Creative Messaging\nTalent Incubator for Sales Teams\nOur Outbound-focused BDRs excel in strategic account planning, research, and delivering targeted and creative messaging. They work closely with Sales Account Executives (SAEs), Account Executives (AEs), and Sales Leadership. The BDR team\nThe Sales Dev Index\nPlease follow the table below to quickly find the most relevant place for what you‚Äôre looking for. You can also use the searching method\nexplained here\nto increase your searching capabilities.\nOur handbook page has contributions from a diverse team. To help you efficiently find answers, we highly suggest that you\ncmd+F\nthis page as a best searching practice.\nTry searching for as many permutations of what you‚Äôre looking for. For example, if you want to find information on lead scoring search for keywords like\nscore, scoring, lead, leads, scoring\n. Remember that\ninformation retrieval\nis a core GitLab value, and a skill that will make a big difference in your careers.\nIf you can‚Äôt find what you‚Äôre looking for please reach out to a member of the Sales Dev Ops team and we‚Äôll help you find it, or update the handbook to include it!\nPage\nWhat you‚Äôll find\nHow-Tos Page\nQuick information on finding your leads and accounts, actioning your inbound/outbound pipeline, creating Sales Accepted Opportunities (SAOs), and any other main process that you‚Äôll work with on your day-to-day.\nRoE, FAQ and KPIs Page\nAnswers to the most common questions around career progression, rules of engagement, general expectations from the role, opportunity credit, ramping periods, lead routing and compensation.\nTanuki Tech Page\nAnything related to your ongoing enablement as part of the Sales Dev team.\nThe Sales Dev Knowledge Vault\nInformation and knowledge that can help to improve your skills. Includes managerial-level processes, manager or team member onboarding, and tool walkthroughs.\nHow we typically help the teams we work with\nWhat is your role and ask?\nHow will the Sales Dev Org help\nI am Field Marketer, and want to have people invited to my event\nWe typically work with the FM process outlined on the issue template called\nFM-BDR-Collaboration-Template\nthat can be found\nhere\n, but are always eager to collaborate in making your events more successful, if your ask is not covered in the template linked above, please write to us on the #sales_dev_global slack channel and we‚Äôll jump in to assist.\nI am an Account Executive, and want to nominate accounts for outbounding efforts\nOur end-to-end outbound process\nis here\n. The easiest way to automate your workflow is to find the field BDR Prospecting Status on the SFDC Account record, and select the Queued option from there. The BDR team will then pick it up and research it for their outbound pipeline.\nI am an Account Executive, and want to check the state of accounts, or quality of prospects, in my territory\nOur BDR team uses a set of\n1:1 dashboards\nthat consolidate all relevant resources in one place. Our BDR team typically uses these on 1:1s with the Sales team to facilitate better account and territory planning.\nI am a Field Marketer, or Account Executive, and want to suggest that the SDR or BDR team uses my messaging for reaching out to prospects or clients\nWe have a\nquick process\nfor creating new flows on Groove, our messaging tool. Even though the BDR or SDR are the ones typically creating these requests, we always welcome collaboration with other teams so feel free to log your own request directly if you‚Äôd like.\nI am a Sales Manager, and want to gauge the quality and progress of the SAOs provided to my team.\nWe have a robust set of pipeline\nprogression dashboards\nthat break down results in a lot of granularity. We also have a structured path for handing off opportunities from the SDR/BDR teams to the AE team that you can use to measure adherence to qualification criteria and next steps.\nOur Slack Channels\nChannel\nSlack Handle\nMain Channel - (Global VP - JB Larramendy)\n#sales_dev_global\nAnnouncements - (SDR Ops/Enablement - Chris Wang)\n#sales_dev_fyi\nSDR AMER and EMEA (Manager - Jonathan Rivat)\n#sdr_amer_emea_inbound\nBDR AMER (Manager - Brian Tabbert)\n#amer_bdr\nBDR COMM AMER (Manager - Chris Stauder)\n#bdr_amer_comm\nBDR ENT AMER (Manager - Christie Park)\n#bdr_amer_ent\nBDR FINS & LATAM AMER (Manager - Ashley Dunn)\n#bdr_amer_fins_latam\nBDR ENTG EMEA DACH - (Manager - Christopher Allenfort)\n#bdr_entg_emea_dach\nBDR ENTG EMEA NEUR UKI - (Manager - Fintan Harrington)\n#bdr_entg_emea_neur_meta\nBDR ENTG EMEA SEUR - (Manager - Tati Fernandez)\n#bdr_entg_emea_seur\nBDR META TELCO EGC - (Manager - Maroussia Stolarczuk)\n#bdr_emea-egc-meta-telco\nBDR APJ - (Manager - Robin Falkowski)\n#apj_sales_dev\nOur GitLab Projects\nName\nDescription\nSales Development Issues\nThe list of all issues we currently have on our project.\nSales Dev Ops Issue Board\nThe main Kanban board we use to manage our operational projects, look here to see what we have in the pipeline.\nFlow Creation Board\nThe board we manage all new, and in-flight, Groove Flows and messaging campaigns.\nFM Collaboration Board\nThe board we use to communicate with the Field Marketing team to help support their events.\nPTO Requests Board\nThe board we use to submit and manage Paid Time Off (PTO) requests.\nSales Systems Issues\nThis is the Sales Systems issue list, we collaborate closely with them.\nMarketing Operations Issues\nThis is the Marketing Operation‚Äôs team space, we also work closely with them too.\nOur Dashboards\nPlease find our SSoT in terms of reporting below, for each dashboard you can also review\nthe additional guidance here\non how to best use them.\nSalesforce and Tableau Dashboards For Team Members\nName/Link\nDescription\nAction Needed: APJ BDR\nDashboard outlining items where immediate action is needed for APJ BDR.\nAction Needed: EMEA BDR\nDashboard outlining items where immediate action is needed for EMEA BDR.\nAction Needed: AMER BDR\nDashboard outlining items where immediate action is needed for AMER BDR.\nAction Needed: SDR Global\nDashboard outlining items where immediate action is needed for SDR Global.\n1:1 Dashboards - Accounts: EMEA COMM\n1:1 dashboard for accounts in the EMEA COMM segment.\n1:1 Dashboards - Accounts: AMER COMM\n1:1 dashboard for accounts in the AMER COMM segment.\n1:1 Dashboards - Accounts: ENTG AMER/LATAM\n1:1 dashboard for accounts in the ENG AMER/LATAM segment.\n1:1 Dashboards - Accounts: COMM/ENTG APJ\n1:1 dashboard for accounts in the Commercial and Enterprise APJ segment.\n1:1 Dashboards - Accounts: ENTG EMEA\n1:1 dashboard for accounts in the ENTG EMEA segment.\n1:1 Dashboards - Accounts: ENTG AMER\n1:1 dashboard for accounts in the ENTG EMEA segment.\n1:1 Dashboards - Accounts: AMER/EMEA BASE\n1:1 dashboard for accounts in the ENTG EMEA segment.\n1:1 Report - Tableau Self-Managed Instances Database\n1:1 Dashboard that breaks down our database in terms of Self-Managed Free Instances.\n1:1 Report - Tableau Inbound Lead Database\n1:1 Dashboard that breaks down our database in terms of inbound and existing leads.\n1:1 Report - Tableau Prospecting 360 Database - Master\nThe main 1:1 Dashboard that combines multiple datapoints into one consolidation view for you to expand your research.\n1:1 Report - Tableau Prospecting 360 Database - Pursuit or First Order Accounts\nA pre-saved view of the Prospecting 360 dashboard that identifies accounts with engaged leads in the last thirty days and no open opportunities, giving you a chance to pursue leads that show active interest but haven‚Äôt yet been captured in the pipeline.\n1:1 Report - Tableau Prospecting 360 Database - Qualifying Surging & On Fire Accounts\nA pre-saved view of the Prospecting 360 dashboard that highlights accounts with new or engaged leads that are Surging and On Fire in Qualified, helping you prioritize the most promising accounts.\n1:1 Report - Tableau Prospecting 360 Database - Qualifying by 6Sense\nA pre-saved view of the Prospecting 360 dashboard that highlights accounts with new or engaged leads that are Surging and On Fire in Qualified, helping you prioritize the most promising accounts.\n1:1 Report - Tableau Prospecting 360 Database - AWA‚Äôd last 30 days\nA pre-saved view of the Prospecting 360 dashboard that shows Accounts that have been marked as ‚ÄúActively Working‚Äù in the last 30 Days.\nInbound Interest Feed (Company Level)\nA pre-saved view of the Inbound Interest Feed dashboard that shows company-level interest and engagement metrics.\nInbound Interest Feed (Lead Level)\nA pre-saved view of the Inbound Interest Feed dashboard that shows lead-level interest and engagement metrics.\nSalesforce and Tableau Dashboards For Leaders\nName/Link\nDescription\nAttention Needed: APJ BDR Managers\nDashboard outlining items where immediate action is needed for APJ BDR Managers.\nAttention Needed: EMEA BDR Managers\nDashboard outlining items where immediate action is needed for EMEA BDR Managers.\nAttention Needed: AMER BDR Managers\nDashboard outlining items where immediate action is needed for AMER BDR Managers.\nAttention Needed: SDR Global Managers\nDashboard outlining items where immediate action is needed for SDR Global Managers.\nHigh Level Results Dashboard\nThe dashboard we use to glance at our bottom-line results.\nPipeline Progression Dashboard\nThe dashboard we use to measure the progress, or lack of thereof, of opportunities sourced by our org.\nGlobal/Regional Sales Dev Results Dashboard\nA Tableau dashboard that breaks down attainment in regions or teams, and current/previous Quarters.\n6Sense 6QA Automation Dashboard\nThis dashboard visualizes all the accounts that were automatically imported to SFDC via our 6Sense Automation.\nGlobal SDR Ops Dashboard\nThis dashboard shows all of the important activities and opportunities related to the global SDR teams.\nGlobal Activity KPI Dashboard\nThis dashboard visualises how each region is tracking against the weekly activity KPIs that we have.\nFM Events Follow-Up Dashboard\nThis dashboard shows the progress of leads associated to Field Marketing events.\nDashboard/Report Templates\nThe list of dashboards below are templates that can be cloned and customized for each team.\nName/Link\nDescription\nBDR Team Dashboard Template\nDashboard template that covers all main functions of managing a BDR team.\nBase BDR Team Dashboard Template\nDashboard template that covers all main functions of managing the Base BDR team.\nSDR Team Dashboard Template\nDashboard template that covers all main functions of managing the inbound SDR team.\nThe pages we frequently use\nResource\nDescription\nGitLab LevelUp Training channel\nAccess to GitLab LevelUp Training channel for additional learning resources.\nSales handbook page\nMain handbook page for Sales, providing essential information and resources.\nGo to Market page\nResources related to Go-to-Market strategy for Sales.\nSales Development Org job family/levels\nOverview of job families and levels within the Sales Development Org.\nEnterprise BDR Outbound Process Framework\nFramework for the outbound process followed by the Enterprise BDR team.\nSales Development Enablement Videos\nPlaylist of enablement videos and how-tos for BDRs and SDRs.\nLead Lifecycle Handbook Page\nHandbook page detailing different lead statuses and managing the lead lifecycle.\nMarketing Resource Links\nGitLab whitepapers, ebooks, webcasts, analyst reports, and more for Sales & Sales Development education.\nMarketing Events + Gated Content Assets + Webcasts\nResources for BDRs and SDRs to understand marketing assets consumed by prospects.\nGitLab Buyer Personas\nResource to help GitLab sellers better understand our buyers and audiences.\nSales resources page\nLink to the Sales quick reference guide with links to learn more about the various sales teams & initiatives.\nWeekly sales enablement\nWeekly sessions for sales enablement, open to BDRs/lSDRs every Thursday.\nSales Training handbook page\nLink to GitLab sales training resources.\nCommand of the Message\n‚ÄúCommand of the Message‚Äù training and the GitLab value framework.\nMost commonly used sales resources\nSales resources page.\nFlash Field newsletter\nLearn more about the sales weekly newsletter.\nThe guiding principles we try to live up to each day.\nOur How-Tos for the Inbound and Outbound processes\nWhere to find your leads and accounts\nInbound leads get automatically imported to SFDC by the Sales Operations team, you can find links to their handbook pages on our\nmain page\n.\nTo find and access your leads, please:\nNavigate to SFDC‚Äôs homepage\nClick on the\nLeads\ntab.\nYou will find the lead views below. These views are split per use-case for your convenience. The KPIs for managing these leads are thoroughly outlined in our\nSLAs page\n.\nSDR Lead Views\nView\nDescription\nS1 - High Priority View\nThese are leads that are marked as High Priority because of some high Propensity To Purchase indication.\nS1 View\nThese are your net new leads that have scored high enough to reach MQL status.\nS2 View\nThis is a view of your existing leads that also have an associated phone call so you can easily reference your callable pipeline.\nS3 View\nQualifying leads. These are leads that you are actively qualifying in a back and forth conversation either by email or through phone calls. Each lead needs to either be active in a follow-up Flow, have an active task, or have a future meeting scheduled which can be seen in a future ‚Äúlast activity‚Äù date.\nBDR Lead Views\nView\nDescription\nFY26 B1 - My Leads, Action Needed\nIncludes any leads that we have committed to follow up on ASAP. These are our highest converting leads and are a mix between High Priority and MQL‚Äôs PTP is now part of our scoring so there may be leads in there that have MQLd due to PTP so you‚Äôll have to click into the lead to see more. High Priority leads belong to a High Priority campaign - you can find which one at the bottom of the page in the campaigns section.\nFY26 B2 - AWA leads w/ LIM\nIncludes leads in your name and that match to your Actively Working Accounts. It‚Äôs best to sort these by Last Interesting Moment Date and consider the Lead Classification Score when deciding which one to add to Groove Flow. We do not surface leads that were added to Flows in the last 14 days.\nFY26 B3 - Change Owner AWA‚Äôs (Clone)\nThis view however allows you to see leads that may not have been moved into your name because at the time, they did not meet criteria. These could be bc: the leads were in lead statuses of: Accepted, MQL, or Qualifying when you moved the account into Actively Working since leads with those statuses should stay with the owner currently working them.\nFY26 B4 - My HT Leads W/ Phone\nThis view should be used when either you do not have enough daily call tasks in Groove to hit your daily KPI or when your team wants to do a call blitz etc. It allows you to easily pull into Groove and create additional call tasks for your leads currently in high touch flows.\nFY26 B5 - My Qualifying Leads\nThese are leads in qualifying status which means some sort of two-way engagement happened between you two.\nFY26 B6 - 6QA Imported Leads\nleads in your ownership related to accounts that have just hit 6QA status in this view. 6QA means the account has been shown to have high intent signals and has similar signs to other accounts that have purchased from us. We have brought in appropriate titles from ZoomInfo so that when you move the 6QA account into Actively Working, you have some leads all ready for sequencing.\nFY26 B7 - AWS Prospecting Last 7 Days\nThese are leads in qualifying status which means some sort of two-way engagement happened between you two.\nFY26 B8 - AWA Leads w/ no LIM\nThese are leads in Recycle Queue status with Last Interesting Moment dates older than 12 months which means they were previously engaged but have been inactive for an extended period.\nContact Views\nView\nDescription\nB1 View\nIncludes MQL‚Äôs, Hot contacts that require quick follow up. NOTE: Not all of these contacts will be in your Actively Working Accounts list as all contacts where you are BDR Assigned on account are in your ownership, so please ensure that you set the account BDR Prospecting Status to Actively Working if you engage in discussions with the contact so that you can continue working the account and expand your outreach, otherwise any new lead MQLs for the account will route to the SDRs .\nB2 View\nContacts related to Actively working accounts that you can choose to add to Flow\nB3 View\nActive leads in HT Flows that have a phone number - to help with call downs\nB4 View\nQualifying leads. Contacts that you are actively qualifying in a back and forth conversation either on email or through phone calls. Each contact in this status needs to either be active in a follow up Groove Flow, have an active task or have a future meeting scheduled which can be seen in a future ‚Äúlast activity‚Äù date.\nAccount Views\nView\nDescription\nB1 - My BDR Assigned accounts (clone)\nCustomize to show accounts where you are the BDR assigned. Use to mass update ‚ÄòBDR Strategy‚Äô and ‚ÄòBDR Prospecting Status‚Äô.\nB2 - My Actively Working accounts (clone)\nCustomize to show ‚ÄúActively Working‚Äù accounts where you are the BDR assigned.\nB3 - My Actively Working accounts (clone)\nCustomize to show ‚ÄúActively Working‚Äù accounts where you are the BDR assigned.\nB4 - BDR Recycle Date Past due (Clone)\nShow AWA accounts where the Recycle Date is in the past two weeks.\nB5 - Mvd to ‚ÄúWorkedinFY‚Äù this week (Clone)\nShow Worked in FY accounts with a recent Recycle Date.\nHow to do Lead Database Management\nAs part of your SDR responsibilities, you are expected to perform due diligence on each lead you receive. This includes checking the database for duplicate records, as well as referencing against our\nRoE\n.\nOpen the lead you want to investigate and press the\nFind Duplicates\non the top of the lead‚Äôs record.\nCheck through all the records that show up, from leads to Acccounts. Make sure to search for\nDomain\nand\nLast Name\nif the data you have seems incomplete.\nCheck the\nMatched Account Info\nsection on the lead record.\nFor SMB leads, if there‚Äôs a matched account where the type is\nCustomer\n, please press the\nConvert\nbutton at the top of the lead page and match this lead to the existing account.\nIf there‚Äôs not a customer record but you find an existing open opportunity, update the\nLead Status\nto\nRecycle\nand\nRecycle Reasons\nto\nEvaluating.\nFor Universities/Education leads (non-US Pub Sec), work as regular lead if technical contact.\nIf there‚Äôs a matched account, check if the field\nBDR Prospecting Status\nis\nActively Working\nand, if so, reroute the lead to the team mentioned on the\nBDR Assigned\nfield.\nIf the existing account is not marked as\nActively Working\n, check for duplicate leads or contacts and merge if necessary while keeping the oldest\nInitial Source\n.\nIf the\nCompany Address\nfields on the lead record do not match your research online of the company, please update the\nAdmin Company Override fields\nthat are found in the\nLead/Contact Review Admin\nsection. As a further fail-safe step, you‚Äôll be asked to verify that this due diligence is done prior to converting this person to a new account.\nIf there‚Äôs no matched account, but there‚Äôs another lead at same company that has the\nstatus, assign both leads to the owner with the earliest\nMQL Date\n.\nIf there‚Äôs no matched account, but there‚Äôs another lead that has the\nAccepted\nor\nQualifying\nstatus, assign the new MQL to the owner of the accepted/qualifying leads.\nBDRs receiving leads not associated with\nActively Working\naccounts must assign back to SDR team or chatter mktgops support.\nQualified leads associated with ‚ÄúActively Working‚Äù accounts are routed to BDR assigned to the Actively Working Account.\nTelco and Finserv Routing\nFor leads that connect to companies that operate in the Financial Services (AMER only) and Telecommunications (EMEA only) industries. We have a seperate routing process that supercedes all of our current\nRules of Engagement\n.\nOnly named TELCO/FinServe accounts are rolling up to the TELCO/FinServe territories. If a new account is a subsidiary of an existing carved company, it will need to be assigned to the AE owning the ultimate account. If it is a totally separate entity then it can be allocated to the regional AE. If a lead comes in that is related to a TELCO/FinServe account, it must be assigned to the BDR assigned on the account.\nCompany Address Based Routing Information\nIn\nthis video\n, a member of the Marketing Ops team goes over the Company address fields and how they are used for Accounting Routing and Opp assignment.\nIf you need to do edits to the database by merging leads together for any of the above steps, please reference the videos below for an explanation.\nSDR Territory Map\nMerging Leads\nHow to Merge Leads Together\nHow to Merge a Lead and a Contact Together\nChatter Guide for Troubleshooting\nIf you‚Äôd like the assistance of another person or team, you can use SFDC chatter on the lead record. Please reference the guide below:\nProblem\nWho to Chatter\nA SMB/MM Contact Request and the account is a customer\nChatter the Account Owner and inform them of the context of the message.\nA BDR receives an MQL Lead that is not from an Actively Working Account\nChatter @mktops\nIf you feel a lead has been misrouted\nChatter @mktops\nThere is a Duplicate Account\nChatter Sales Support and ask them to merge the accounts.\nAn Opp has moved into Stage 1 but has Incorrect Data\nChatter your manager who will then reach out to someone in Sales Dev Operations.\nUnclear Territory Assignment\nChatter an AE from each of the potential territories.\nRequesting SAO Credit on an Opp\nChatter Sales Dev Ops or the Director of Commercial Sales Development.\nAccount is in Restricted Status\nChatter the SAE and ask permission to reach out.\nCleaning Poor Leads\nLastly, Every so often you may be assigned a lead that has no value to GitLab and is not worth keeping within our database. Qualities that define these types of leads include:\nStep\nDescription\nIdentify leads with no value to GitLab\nLook for leads with characteristics such as incoherent or obviously forged information, or email addresses from temporary domains that self-terminate.\nVerify lead removal necessity\nEnsure that the leads meet the criteria for removal and are unlikely to provide any value to GitLab.\nAdd leads to the SPAM DELETION Salesforce campaign\nAdd the identified leads to the SPAM DELETION campaign in Salesforce. Make sure to be 100% certain about the removal, as this process is irreversible.\nNote campaign membership, not status\nRemember that only campaign membership matters for this process, so the campaign member status used when adding to the campaign does not affect the removal process.\nUnderstand the permanence of lead removal\nRealize that leads removed through this process cannot be recovered by MktgOps, making the removal permanent. Exercise caution when initiating lead removals.\nBe aware of the removal schedule and exceptions\nNote that the removal process occurs daily at 12:05 am PDT via Marketo. For unscheduled removals, request assistance in the mktgops Slack channel but minimize requests.\nRequest email domain blocking if necessary\nIf you observe multiple leads with the same domain, create an issue with Marketing Ops to add the domain to a block list, preventing future occurrences.\nHow to action your leads\n1. Determining High-touch or Low-touch Groove Flow usage:\nDetermine if the lead qualifies for a high touch or low touch Flow.\nHigh touch Flows are for higher-quality leads and require more personalization and touch points, including phone calls and LinkedIn Connect requests. This should be the majority of your pipeline.\nLow touch Flows are typically automated and run for a shorter period of time. You can use Low-touch for leads where a phone number cannot be found online or in our databases, or where their contact information is incomplete and cannot be enriched by our tools, or through manual research. Low touch should only be reserved as the last resort.\nResearch the appropriate Groove collections for relevant collateral to be used. Most typically our High-Touch Collection or Low-Touch collections.\nCold-Calling and Email Checkbox\nBefore calling any Lead or Contact, BDRs must ensure that the\nDo Not Call\nbox is unchecked.  If you speak to any anyone, including prospects and existing contacts, who ask you not to call them again, you must check this box. However, please do not delete the number as we need to know which number requested not to be called again. For any individuals who are opted-in to email, you may ask them if they wish to be called. If they express a desire to be called, you are then permitted to uncheck the\nDo Not Call\nbox if it was previously checked.  Also, if an individual expresses independently via email a wish to be called, you may uncheck the\nDo Not Call\nbox.  This email must be present in SFDC as proof of your authority to uncheck this box.  You cannot send email requests to individuals not opted-in to email asking whether they would like to be called.\nOur cold-calling best practices typically consist of 4 elements. A pattern interrupt, an elevator pitch and, if required, objection/trap-setting questions and Up-Front Contracts.\nTo be effective, these need to be customized to the individuals we call as per the logic below:\nDifferent Geographical Business Cultures\nPersonality Type as per the DISC model\nIndividual‚Äôs Role and Responsibilities\nBusiness‚Äô Needs and Objectives\nAn unsubscribe link must be included on every email sent by a BDR, including responses to a prospect or contact. Please reach out to the Privacy Team via #privacy-team-help for the recommended language that should appear at the bottom of each outbound email.\nDo Not Call and Do Not Email Automations\nLeads with certain criteria will be automatically labeled as\nDo Not Call\nand or\nDo Not Email\nshortly after loading into our database. It‚Äôs understandable this can be frustrating for certain territories. Please keep in mind, the criteria behind this automation has been set in order to follow local law. Please see the\nInternal GitLab handbook\nfor more information on the triggers.\nHow to Enroll to Groove by Clari\nGroove\nis a tool used to automate emails in the form of flows. Users can track open rates, click-through rates, and response rates for various templates, and update flows based on these metrics. Groove also helps to track sales activities such as calls. All emails/calls/tasks made through Groove are automatically logged in Salesforce with a corresponding disposition. See below for instructions on how to enroll leads in Groove:\nGo to your SDR views in Salesforce and select the lead you want to add to a flow.\nPress\nAdd To Groove Flow\n.\nWork from the Groove extension on Chrome to select the flow you want to enroll the lead in by using the labels feature.\nOnce the first step of a Groove flow is complete, the lead status will automatically change from\n,\nInquiry\n, or\nRaw\nto\nAccepted\n, marking that you are actively working on this lead.\nWhen a lead responds to your outreach, their status will automatically change from\nAccepted\nto\nQualifying\n. Manage these leads from your S3 and B5 lead views.\nIf you are not actively qualifying this lead further, manually change the status to\nRecycle\n, so the lead is returned to the Marketing recycle pool and isn‚Äôt stuck in your\nMy Qualifying\nview.\nIf you speak with the lead by phone and are qualifying them, manually change the status from\nAccepted\nto\nQualifying\n.\nWhen reviewing your\nQualifying\nview, add leads with no recent activity, no active tasks, and not currently in a flow into one of our follow-up Groove Flows under the\nMOTION: Follow-Up\ncategory.\nTasks and pipeline management can be done via Groove‚Äôs\nActions View\n.\nIn the Actions View, review the list of leads assigned to you by navigating to the play-icon button for each to start their corresponding action for the day.\nIf a lead completes a Groove flow without responding, the lead status will automatically change to\nUnresponsive\nor\nRecycle\nafter seven days of no response.\nManually change the lead status if you do not use a Groove flow to reach out or if you need to disqualify a lead (e.g., for bad data).\nIf you mark a lead as\nInactive\nor a contact as\nInactive\n, signifying that this person no longer works at the company, any running Flow will automatically be marked as finished.\nIf your leads are being reassigned to the\nInquiry Queue\n, it‚Äôs likely due to a scheduled cleanup job in Traction that updates\nStatus = Inquiry\nto\nInquiry Queue\n. To resolve this, add your leads to a Groove flow.\nNote:\nThe cleanup job runs daily at 10:30 PM EST/EDT.\nGroove Labels\nWe‚Äôve organized our\nGroove Labels\ninto key categories like\nindustry, region, play/motion\n, or\nlanguage\nto help you efficiently retrieve the most appropriate content quickly.\nHow to Use Groove Labels\nOn the top-hand of the\nflows page\n, access the filter menu and search per\nlabel\n.\nIndustry\n: Industry-specific labels that group flows per similar sectors.\nRegion\n: Flows organized by geographical regions, enabling you to target leads with more region-appropriate cadences based on local business culture.\nPlay/Motion\n: Each label within this category represents a specific sales play or marketing motion. These labels help you align leads with the appropriate strategy based a company‚Äôs and customer‚Äôs identified value-drivers.\nLanguage\n: Language-based labels to ensure that you can easily find non-English collateral for our global audience.\nGroove Templates\nWe‚Äôve organized our\nGroove Templates\nin the same way as our\nGroove Labels\n‚Äîby\nindustry, region, play/motion\n, and\nlanguage\n‚Äîto streamline your outreach efforts. These templates provide consistency and efficiency, and need to be created regardless if you‚Äôre sending one-off messages or using templates to structure a flow.\nWe currently have one master SalesDev folder for saving templates, please ensure that any templates that you create are saved under that folder, and tagged with the appropriate collection as per the logic outlined above.\nIn both cases, it‚Äôs essential to tag your templates with the appropriate collection name to maintain consistency and help others easily locate them for future use.\nNew Groove Flow creation\nPlease follow the instructions on\nthe Groove handbook page here\nImplement Measurement Clarity and Decision Velocity\nBy dogfooding GitLab we have a structured and simplified cadence of quantifying Flow creation in terms of value and results without limiting agency.\nMaintain Equal Contributions in a Shared Reality\nBy maintaining a Single Source of Truth (SSoT) we give the best possible forum for cross-functional collaboration with specific guidelines\nFollow Up Groove Flows\nFor SDRs and BDRs managing leads in their qualifying views, we‚Äôve created\nthis video\nto guide you through using follow-up Groove Flows.\nPlease visit the Groove Flows page and search for the tag\nMOTION: Follow-up\nto review your available options.\nWhite Glove Event Follow Up Flows\nFor more personal events, such as Executive Roundtables, there may be more detailed Last Event Notes that include a request to involve people who interacted with the prospect at the event. For these situations, we have specialized white glove Flows. These can be found by searching for the tag\nMOTION: White Glove\nThe goal of these Flows is to reach out to the prospect quickly and to include our SAEs/AEs in the conversation.\nThe first step is to add the prospect to the Flow. Then, customize the first email step to include the individuals mentioned in the Last Event Notes. You can also delay the first email to allow time for feedback from the SAE/AE if needed.\nNext, send a screenshot of the first email step to the SAE/AEs who will be CC‚Äôd. Explain that this strategy allows them to engage with more personalized messaging if the prospect remains unresponsive.\nNote:\nThere is a generic task on Day 12 to follow up with the SAE/AE if there has been no engagement. The goal is to keep them informed and work together to engage the prospect.\nHigh Priority Campaigns and Leads\nA High Priority Lead is a lead that is related to a high priority campaign. Any campaign checked as High Priority will have any members that relate to Actively Working accounts marked as High Priority irregardless of their lead status. These will show up in the BDR‚Äôs B1 priority view. Check the high priority timestamp and high priority reason fields in salesforce to understand why a lead was marked high priority.\nIf you need to move a lead out of high prioriy without contacting them you can\nuse this flow.\nThis flow is one generic task for you to complete that will move the lead to accepted status and remove the high priority check.\nTranslating Groove Flows\nFor translating flows to different languages, other than English, the Sales Dev Team will be partnering with our GitLab Localization team. Please follow the grid below to see who the Sales Dev DRI for each language is and the level of support that the localization team can provide. The localization team can provide translations for languages outside of their normal range if given a two weeks heads up. The requestor should know that in these cases, the translation quality may not be as accurate as for the localization team‚Äôs regularly supported languages. When you are ready to request translations from the localization team please create an issue in the\nLocalization Issue Tracker GitLab Project\n.\nLanguage\nSales Dev DRI\nLocalization Team Support?\nLocalization DRI\nPreferences\nAMER Spanish\nKenia Rodriguez\nYes but only International ESP\nVendor Support\nAMER Portuguese\nLeo Viera\nYes Brazilian PT\nVendor Support\nEMEA Spanish\nCamilo Hernandez Murillo\nYes but only International ESP\nVendor Support\nEMEA Portuguese\nTati Fernandez\nNo\nDutch\nMarije Konink\nNo\nFrench\nErwan R√©gnaud\nYes\nMaud Leuenberger\nNo emojis, Hello Last Name instead of First Name\nGerman\nRiko Pfennig\nYes\nHendrik Breuer\nVery Formal, No Emojis\nIndonesian (Bahasa)\nAletha Alfarania\nNo\nItalian\nFrancesca Gianfiglio\nYes\nVendor Support\nJapanese\nEri Nitani\nYes\nMegumi Uchikawa\nKorean\nKayla Ko\nNo\nMandarin (Taiwan)\nAletha Alfarania\nNo\nHow to Change your Email Signature\nYou must change your email signature\nin Terminus\nin order for your signature to save. If you only change your signature in Groove or Gmail your signature will revert back within 24 hours.\nSteps to change your signature\nLog into Terminus\nusing your GitLab Google Account\nAfter logging in click on the Terminus logo in the top left corner\nNext click the menu item for ‚ÄúEmail Experiences‚Äù\nFrom there you can edit your signature and see a preview of it on the right side of your screen.\nHow to follow our FO Outbound Process\nBDR outbound lead generation is done by prospecting to companies and individuals who could be a great fit for our product. Prospecting is the process of finding and developing new business through searching for potential customers with the end goal of moving these people through the sales funnel until they eventually convert into customers.\nBDRs will work closely with their dedicated SAE or AE to choose which accounts move into ‚ÄúActively Working‚Äù. Together they will build a strategy for those companies. It is crucial that outreach is very intentional and strategic. When reaching out, we want BDRs to offer value and become a trusted advisor, ensuring a positive impression is left whether there is current demand or not.\nThe FO Outbound process is split in four phases, which should be followed on a weekly basis to ensure a steady outbound pipeline in alignment with our internal KPIs. To manage this process we use a set of datapoints on SFDC on the account-level that are marked under the section ‚ÄúBDR Comments‚Äù. Please reference the guide below on an explanation on how they work.\nBDR Field\nUsage\nBDR Prospecting Status\nDenotes whether an account is currently actively being worked, marked queued for future review, is restricted from being worked, or has been worked in the past.\nActively Working Start Date\nGets populated automatically when an account is moved to Actively Working (AW) Status and the rest of the field is populated, marking it a valid AW account.\nBDR Account Research\nA space for the BDR to document their research and rationale for prospecting this account. A template is provided in step 5 of the guide below.\nBDR Next Steps\nA space for the BDR to use as working notes for the current status of prospecting the account.\nBDR Account Strategy\nA categorization system that we use to high-level denote what motion or play was used in trying to engage with an account.\nBDR Recycle Date\nAutomatically populated two months out from the AW date. Can be manually changed if the BDR chooses to continue working an account.\nWorked in FY Reason\nAutomatically populats when an accounts get moved to Worked in FY prospecting status. If an account needs to be added to this status before it‚Äôs appopriate date, this field needs to be manually populated with one of the choices provided.\n6QA Acceptance Status and 6QA Dispute Reason.\nWhen an account has been automatically moved to Actively Working and Showing Intent, as per the 6QA project outlined\nhere\n, you will need to review the account and change this field to Accepted or Disputed within 48 hours. In case of choosing to Dispute the account you will need to choose a Dispute reason. Use\nAccount in open opportunity\nif there is an SDR with an active open opportunity. These accounts will be flagged on the 1:1 Dashboard for you to review with your manager and other collaborators.\nPlanning Phase (4-5 hours/week)\n1A. Create a set of achievable objectives\nThese goals should be based on what you know you can achieve when focusing on First Order accounts. It is particularly important to know your equation so you can map your activities to specific outcomes and goals in a predictable way.\nThe main objective you should be focusing at is to measure and plan what activity is required to achieve or increase the amount of First Order meetings.\n1B. Map your objectives to your data\nResearch your territory to identify the true First Order (FO) accounts, ensuring no other subsidiaries have licenses, verifying there hasn‚Äôt been a lost renewal in the past 180 days, and confirming there are no open opportunities. The goal here is to vet your TAM (Total Addresable Market) so that you can start matching cohorts of accounts with the objectives that you‚Äôve outlined in the previous step. Indicatively, you can export these accounts to a Google Sheet, or other SSoT of your preference, for tracking since these accounts will be marked as Actively Working at a future step further down the process.\nUtilizing these accounts, create an outreach strategy and plan for the upcoming month and quarter. This strategy should include considerations such as the number of accounts to include in Flows per week and per month, the quantity of prospects from these accounts to add into Flows weekly, whether you intend to target specific personas, if you plan to employ targeted messaging, whether Flows will be used for high-priority targets, and the messaging approach you will implement. As previously mentioned, knowing your equation is important for your planning here. Please refer to the sheet linked above to determine your exact metrics.\nAccount Research Phase (4-5 hours/week)\nDuring your research phase for accounts to include in your Flows, thoroughly investigate and document pertinent information, which may include the below.\nYou can use the Claude prompt here to help you automate part of this process.\nIdentifying new strategic hires - ZoomInfo Scoops, Company Website or LinkedIn\nDiscovering recent job openings in DevOps - Company Website or LinkedIn\nMonitoring for security breaches or threats - Tech News Websites\nScanning for relevant news articles - Tech News Websites\nGathering intelligence on competitors - ZoomInfo or Cognism Insights\nExamining future plans, such as digital transformation initiatives - ZoomInfo Scoops, Company Website or LinkedIn\nNoting recent company acquisitions - ZoomInfo\nInvestigating LinkedIn connections - LinkedIn\nIdentifying instances of GitLab usage by employees or as a past customer - SFDC or 6Sense\nExploring 2nd and 3rd-degree connections - LinkedIn or 6sense Persona Heatmap\nSeeking mentions of DevOps - ZoomInfo Scoops or 6Sense Timeline\nReviewing relevant 10K reports or financial disclosures - Company Website\nThis comprehensive research will provide valuable insights for crafting effective outreach strategies further down the funnel. Regarding account research, in addition to our B2B database toolstack, we also use 6Sense to pre-qualify the accounts that should be considered for our pipelines since 6Sense scores accounts based on their market and profile fit.\nThere are two ways utilize 6Sense:\nThrough the SFDC iframe integrated dashboard (mandatory for FY24Q3)\nThrough the 6Sense Platform (optional for this Quarter)\n2A. Using 6Sense through the SFDC dashboard\nNavigate to SFDC\nOn the main tab with options (leads, accounts, etc), click on the ‚Äú+‚Äù sign\nSelect 6Sense dashboards, you can also click ‚Äúcustomize my tabs‚Äù to add the 6sense dashboard\nto your homepage permanently\nOn the 6Sense dashboard, click the cog icon on the top right\nOn ‚ÄúSearch by User‚Äù select ‚ÄúBDR Assigned‚Äù and add your name\nOn ‚ÄúOther filters‚Äù select ‚ÄúSalesforce Account fields‚Äù and type ‚ÄúBDR Prospecting Status‚Äù\nOn the ‚ÄúBDR Prospecting Status‚Äù field, select ‚ÄúActively Working‚Äù\nThe dashboard will now display the top actively working accounts in your name. Do note that these are only accounts that we currently have on our database, while you can find greenfield accounts by visiting the SaaS platform (instructions in section 2B). Section 3 below explains how you can review and utilize this data.\n2B. Using 6Sense through the SaaS platform\nNavigate to 6Sense through Okta\nOn the left-hand bar, click on the Segments tab\nYou will find all of the relevant resources for BDRs and SDRs on the first 5 folders. These folders can be used as per the table below.\n(In each folder you will find a saved template that can be cloned and edited for your individual territories.)\nFolder\nUsage\n1. AWA‚Äôd Accounts\nThese segments will display the top accounts in your current actively working list according to 6Sense intent data. By manually investigating each of those accounts you will be able to uncover further prospect engagement data, and adjust your strategy in converting this account. This report has the same functionality as the SFDC dashboard outlined in step 2A.\n2. Non-AWA Greenfield Accounts\nThese segments will display the top accounts in your territory that we do not have on our SFDC database. These accounts should be manually investigated and considered for adding to your outbound pipeline. Note that we have approx. 15% of our TAM on our SFDC database, while these reports are an automated way to identify great accounts from the other 85% of the TAM in your territory. Please note that the Sales Dev Ops team is here to work with you to generate these reports, as the particularities of our Sales Territories require some editing with the filters. Please don‚Äôt hesitate to reach out to us so we help you work through these.\n3. Non-AWA SFDC Accounts\nThese segments display the accounts that currently hold on our database that display high 6sense intent scores, but are not part of your actively working list.\nAfter choosing the type of report you‚Äôd like to work, please follow the steps below:\nSelect the template in each of the BDR folders that starts with the prefix ‚Äú-[TEMPLATE]‚Äù.\nOn the title, add your name or territory as suggested by the naming convention. Please make sure to delete the Prefix ‚Äú-[TEMPLATE]‚Äù.\nClick on ‚ÄúEdit Segment‚Äù.\nFor folders 1 and 3, you‚Äôll see a prompt on one of the filters to add your name to the ‚ÄúBDR Assigned‚Äù Field.\nFor folder 2, you‚Äôll see a prompt to add your region to the ‚ÄúAddress: Region‚Äù field. Do note that based on your territory there are other datapoints like ‚ÄúAddress: City‚Äù or ‚ÄúAddress: Country‚Äù that can be used.\nAfter having done the edits on steps 4 and 5, press ‚ÄúSave Changes‚Äù. Make sure that you‚Äôve updated the naming convention accordingly and click ‚ÄúSave As New Segment‚Äù.\n3. Manual Research on Accounts\nNo matter how efficiently we‚Äôre trying to use our toolchain, these tools are still prone to error, and manual research is required to best shortlist the prospecting lists that cross-referencing will provide.Manual research will also provide additional context that can be used to hyper-personalize your outreach to your prospects.\nFor each account that you want to investigate, start with SFDC to make sure that there are no duplicate accounts. The report templates in 6Sense should exclude existing customers or accounts actively prospected, but we cannot automatically exclude accounts that have a different naming or domain on salesforce (ie. GitLab and GTLB)\nThe importance of diligent manual research will lead to the below efficiencies:\n‚Üí Better use of time in the long-run by making sure accounts are indeed within your segment and territory, or are not duplicates.\n‚Üí Avoiding unnecessary RoE conflicts by making sure there are no hidden parent accounts that would cause SAO ownership to be re-assigned to other segments in the future.\n1. To double-check the account on Salesforce:\nSearch for the account name on SFDC.\nSearch for the account email domain on SFDC.\nSearch for the account website domain on SFDC.\nSearch for the Account‚Äôs HQ address, along with any regional business unit address.\n2. To hyper-personalize your messaging:\nPlease follow the steps below to understand how to research the data provided on 6Sense, and to cross-reference this data with our internal knowledge base so that you create your account strategy accordingly.\nUnderstand and utilize 6Sense data: Each segment has an accounts tab that displays all the accounts that correspond to this segment. This view can be shortlisted further by using the three analytics tabs as all datapoints in these tabs is clickable.\nPredictive Analytics\nfilters accounts by their propensity to buy. This data can be used to split prospecting efforts between high-priority outbound campaigns and low-priority awareness campaigns\nBehavioural Analytics\nfilters accounts by the intent/value-driver that they mostly focused on. This data can be used to split accounts into specific value-driver focused campaigns.\nProfile Analytics\nfilter accounts by the demographic of each company in terms of location or size. This data can be used to run location-specific campaigns.\nSearch for past opportunities on SFDC\nCheck the qualification Questions section\nCheck the unqualified reasons by the AE team\nCheck past email communication on the activity records\nSearch for the account record on SFDC\nCheck Account Rank notes by the AE team\nCheck the PathFactory, ZoomInfo, Marketo integration tabs\nCheck their product usage information (if applicable)\nCheck their LAM Dev Count\nSearch for relevant leads on SFDC:\nCheck for past communication\nCheck for Last Interesting Moment and how it connects to their title and lead source to determine their compelling events\nCheck for Web Activity on Marketo and PathFactory to gauge past interest\nCross-reference with External sources\nSearch LinkedIn Insights for company growth, financials and recent news\nSearch company webpage for recent news, career openings or specific technologies used\nSearch online sources like newsletter or crunchbase\nCross-reference the above with HighSpot\nCheck for relevant playbooks based on company size\nCheck for relevant messaging based on persona\nCheck for relevant pain-points based on value driver\nExecution Phase (5-10 hours/week)\nExporting Accounts and Leads to SFDC, and adding to your Outbound Pipeline.\nAfter having manually shortlisted the accounts that are applicable to your campaign, the next step is to determine the relevant prospects per account and export them to SFDC. It is important to add accounts to your outbound pipeline so that AEs and other SDRs/BDRs know this is an account that is already being touched, and to avoid confusion or multiple people approaching the same prospects. Before moving an account into ‚ÄúActively Working Status‚Äù, make sure there have been no MQLs or opportunities created from that account within the past 30 days, and there are no leads from that account in Qualifying status with activity in the last 30 days or with a future task date set. If you are not sure, double-check with the related AE, SDR or BDR.\nTo determine which prospects to enroll per account, please follow the steps below:\nIdentify the idea value drivers to be used for the account‚Äôs pain-points through your manual research, as outlined above.\nDetermine which personas would most benefit from the specific value drivers by using our CoM documentation on HighSpot.\nRun queries for the specific titles on ZoomInfo, and export to CRM.\nYou should explore the specific personas you intend to target, such as: VPs, Directors, Developers, Security, Architecture, DevOps, DevSecOps, Procurement Officers, and IT Buyers.\nDetermine the number of prospects you plan to add to Flows, with a minimum of 25 per day. Utilize LinkedIn Sales Navigator, ZoomInfo or Cognism to identify these personas within your target companies.\nIn Step 7, compile the selected prospects and create LinkedIn Sales Navigator lists for each persona. Save these lists for future use.\nTo export to CRM, please follow the guidelines below:\nClick the Export to CRM button on ZoomInfo\nThat‚Äôs it\nNo, really.\nTo fill in the BDR fields, please follow the guidelines below:\nUse the\nformat found on this template\nCopy-Paste the Structure to the BDR Account Research field and populate accordingly.\nPopulate the BDR Next Step Date to be at the end of the account‚Äôs Flows length (typically one month out)\n6. Maintaining a clean pipeline, and using BDR fields for cross-functional collaboration\nTo review your current pipeline, along with any leads with next steps, please refer to your segments dashboards by going to SFDC > Dashboards and searching for Watch and Help.\nTeam specific variants of these dashboard components will also be found on your team‚Äôs dashboard. These dashboards will give you a bird‚Äôs eye view of what actions are required from to maintain a clean pipeline, in terms of: i. Accounts with BDR fields past due ii.\nProspects with Flow steps past due\niii. Prospects that have been moved to Qualifying status but have not had any outreach since.\nHow to Get SAO Credit and Create Opportunities\nQualification criteria is a minimum set of characteristics that a lead must have in order to be passed to sales and become a Sales Accepted Opportunity (SAO), these are split into\nInbound and Outbound Criteria.\nAs an SDR or BDR, you will work to connect with inbound/outbound leads that you get a response from to obtain the applicable information required. This information is tracked on the qualification criteria on the\nLEAD, CONTACT, and OPPORTUNITY\nobjects in Salesforce. In order to obtain an SAO, you will need to have the\nrequired information\nfilled out on the opportunity including documented 2-way communication on the Contacts in the Opportunity. Professional Services opportunities are not credited to sales development, these need to be passed straight to the account AEs for them to qualify.\nThe full walkthrough of how to create a SFDC opportunity is\nlisted here\n.\nPlease note that, in addition to the main requirements listed on this link, the Sales Dev org memebers (both SDRs and BDRs) are expected to fullfill the\nInitial Engagement Channel\nas a mandatory qualification field, before being allowed to create an opportunity.\nThe Initial Engagement Channel field is found in the ‚ÄúLead/Contact Review Admin‚Äù section on leads and will be availible when creating an opp for contacts.\nWhen do I create an Opportunity?\nYou have scheduled time with AE/SAE to speak with the prospect:\nIf you are scheduling time with an AE/SAE to speak to the prospect based on a qualifying conversation you have had with the prospect, an opportunity needs to be created and placed in stage 0. On the opportunity, all ‚Äúrequired qualification‚Äù fields need to be filled in.\nYou have obtained a commitment/willigness from a prospect to discuss further.\nIf you have a meaningful two-way communication with a prospect, but have not had the required qualification criteria to move to the Sales team, you can create an opportunity under your name so that you better track your warm conversations. These opportunities may also be used for better collaboration with your team, as they can be reviewed and brain-stormed upon during team meetings.\nIf the lead is from a new account confirm their number of employees and HQ location for routing purposes\nWhen you create an opportunity with a new account please confirm the number of employees and headquarters location of the account with the prospect. You can do this through email or in your call notes if you speak to them over the phone. The reason for this is to make sure the newly created contact and account are routed to the correct teams after you convert the lead. Please cross reference the employee count and hq location with one of our data tools (ZI, Cognism, Sales Nav) to make sure what the prospect said was accurate. If the employee count is around 200-300 people be extra dilligent as the new SMB to MM employee cut off is 250 employees. We do not want the Sales teams to have to debate whose opportunity it is.\nWho owns the opportunity at this point?\nYou have scheduled time with AE/SAE to speak with the prospect.\nWhen you have entered the qualification criteria onto the opportunity, and have received calendar confirmation from all parties for the intro call with sales, you will change ownership to the AE/SAE. After you have saved opp owner, you will add yourself to the BDR/SDR field. The opportunity will remain in stage 0.\nYou have obtained a commitment/willigness from a prospect to discuss further.\nAt this point, the opportunity will be in your ownership but you can not have yourself listed in the Business Development Representative or Sales Development Representative field. There is a validation rule that will not allow the opp owner and the SDR/BDR representative field to be the same member.\nWhen will it be credited as an SAO?\nAfter the AE/SAL meets with the prospect to verify and supplement qualification criteria, they will move the opportunity into Stage 1 Discovery. The AE/SAL is expected to move the opportunity into the correct stage within 48 hours of the meeting reflected in the ‚ÄúNext Step‚Äù date field. The opportunity close date defaults to the last day of the quarter, however it‚Äôs good practice to set the date at least 90 days out from creation date.\nIf an opportunity has incorrect data after it has moved into Stage 1 - Discovery, please Chatter your manager about the required changes, they will then Chatter someone from Sales Dev Operations (Ramona, Panos, Ed) once final changes are agreed upon. No one else from Sales Dev can edit opportunities once they are in Stage 1, so please try and ensure you have all the information on the opportunity before you ask the AE/SAL to accept it.\nIf the opportunity is for a new group of users in a Large account where sales is working on a large ‚Äúcentral‚Äù opportunity, then your opportunity should be merged to that opportunity for you to get credit for the users you have brought to the deal. See under\nStage 8\nin the Sales Go To Market Handbook.\nOpportunity Creation Workflow\nScheduling IQMs\nCreating Opportunities:\nIdentify and Relate Communications\n: Identify relevant two-way communications with the prospect, such as email exchanges, call records, or LI messages. Ensure that these are properly logged in SFDC associated with the\nperson, company, and opportunity records\nas needed. To do this:\nSelect the specific activity records highlighting your involvement and press\nrelated to\n.\nSelect the corresponding Opportunity and press Save.\nSelect specific activity records highlighting your involvement and press\nrelated to\nSelect the corresponding Opportunity and press\nSelect specific activity records highlighting your involvement\nand press\nrelated to\nSelect the corresponding Opportunity and press save.\nVerify Sales Organization RoE\n: On ZoomInfo, or other established sources if needed, verify the parent/child segmentation and the HQ of the company or ultimate user.\nIf discrepancies exist, communicate with the appropriate personnel for resolution.\nOverriding Incorrect Account Assignments**\nNavigate to the\nLead/Contact Review Admin\nsection in Salesforce to input correct information.\nAfter making sure that the information is properly reflected on the\nCompany Address\nfields (ie:\nCompany Address: Street\n), please tick the\nCompany Address Checked\ncheckbox on the lead level. If this step is not completed, then you will receive a message to remind you on Salesforce when you try to convert the lead.\nIf unsuccessful, communicate with the Sales Dev Director for assistance in updating account records.\nSchedule IQM\n: For booking meetings, use\nGroove Meetings\nto expedite the experience for prospects.\nMake sure to give a 24 hour notice to the AEs.\nHaving sent a meeting invitation, ask the prospect to accept while on the phone/meeting with them.\nAE Review\n: Expect AEs to verify that they reviewed the opportunity beforehand.\nIf needed, review the specifics of the call, responsibilities, and send meeting reminders.\nAttending the IQM\n: Please make sure that both AE and SDR show up on time or up to 5 minutes beforehand with Cameras on.\nPlease ensure that the location is quiet and indoors for AE and SDR.\nDebrief\n: Have a goal for the AE and SDR to debrief within 24 hours regarding the opportunity being flipped or being disqualified.\nEnsure that feedback is shared in writing via Slack/email and added to Salesforce by the AE.\nIQM Notes\n: SDR adds IQM notes to the Initiative section in the opportunity Title.\nInclude Attendees, Raw Notes, Questions, Summary, and Next Steps.\nRebooking no-shows\n: The SDR‚Äôs responsibility lies only in rebooking no-shows using a structured Groove Flow.\nConduct outreach for 2 weeks. If IQM cannot be rescheduled, AE will unqualify the opportunity.\nTrial Extensions and Ultimate to Premium Downgrades\nTo submit a trial extension ticket for a prospect you will navigate\nto this internal request form\nand fill it out the form using the\n‚ÄúGitLab L&R internal request for global customers‚Äù\noption and then select extend a gitlab.com trial. Keep in mind it only works for SaaS and not self-managed.\nYou are also able to downgrade a Trial from Ultimate to Premium through the internal request form. You just have to choose ‚ÄúChange existing GitLab.com Trial plan‚Äù\nOpportunity Naming Convention\nNew Business: [Quantity]\n[Name of Company]- [Quantity] [Edition]\nExample: Acme, Inc- 50 Premium\nAdd-On Business (seats only):\n[Name of Company]- Add [Quantity] [Product]\nExample: Acme, Inc- Add 25 Duo\nAdd-On Business (Upgrade from Premium to Ultimate):\n[Name of Company]- Upgrade to Ultimate\nExample: Acme, Inc- Upgrade to Ultimate\nMonthly Audit Process\nIn an effort to increase transparency as well as consistency in terms of credit attribution for opportunities sourced by the Sales Development organization, we will conduct on a monthly basis a full audit of all opportunities giving credit to either a Sales Development or a Business Development Representative. Please do note that SDRs/BDRs that are on their ramping quarter are exempt from being auditors.\nParticipating and completing the audit on time is mandatory.\nGuiding principles:\nAll activities must be logged and documented in Salesforce.\nTimestamps for such activities will be audited and cannot be modified after the fact\nSourcing cases must be clearly documented.\nAll opportunities associated with a Sales Development team member must have meaningful engagement for Web Directs and full qualifications criteria for Direct Deals.\nMandatory SLA:\nAudit and XDR response must be completed by the first day of the following month. Rulings will be completed by the management team by the end of the second day.  Invitations and pairing will be sent to the entire Sales Dev team the first week of the month. It is the responsibility of the team member to find a backfill to do their audit if they are unable to complete the audit within set timelines.\nAll activities must be logged in Salesforce.\nPro-actively flag opportunities with questions or created outside the standard process in the monthly\nAudit Doc.\n. Please note that there‚Äôs a separate audit worksheet specific to the PubSec team that is shared separately for compliance reasons.\nExamples: web directs. AE-created. Partner generated (for now), Opp w/no value, duplicate opp\nAuditor needs to review all notes and time stamps related to the opportunity\nAuditor needs to log an activity #Audited on the activity record of the opportunity as mentioned below, this way we can track completion of monthly audit.\nEnsure that relevant activity & products are attached.\nEnsure that Products match up to Qualification info in Call Connect and/or Meeting\nFor BDRs, ensure account was in AWA status\nensuring that the\nRoE\nwas followed\nFlag in the monthly\nAudit Doc\n, any questions related to the audited opportunities.\nEach month you will be assigned one of your peers to Audit. We will share a report with all the S1 opportunities created that month. SDRs will audit SDRs and BDRs will audit BDRs. We will do our best to pair people from the same segment however it is possible that you end up auditing someone from another segment.\nOnce you‚Äôve audited an opp, you will create a task by logging a call, choose ‚Äúother‚Äù as type, and write ‚Äú#Audited‚Äù in the subject line. If an opp needs more research, write ‚Äú#Audited - Pending Review‚Äù and add this opp into the Audit Review spreadsheet.\nAudit Process Video Walkthrough\nAUDIT REVIEW (what to look for)\nAction\nRationale\nCoaching Opportunity\nOpp creator\nOur standard is to get to credited for creating opportunities that meet the qualification criteria.\nWhen you set up a conversation with an AE, you should create the opportunity. If we see that an opp was created by an AE but has the SQS = Sales Dev Generated, there will need to be evidence of meaningful engagement by the Sales Dev rep prior to the opp being created.\nFor Web Direct opportunities, check timestamp and for two way meaningful engagement prior to the purchase\nWeb Direct opportunities are people that bought directly from the store themselves without necessarily having being influenced by us.\nExplain that our role in this company is to directly influence purchasing decisions through positive and purposeful interactions with prospects. Requesting credit when we have not added specific value to a prospect‚Äôs journey diminishes the credibility of our team.\nCheck to see whether opportunity qualification fields are populated.\nMarketing and Sales are expected to collaborate to move prospects down the funnel based on specific qualifiers. When it comes to Stage-0 opportunities these are the opportunity qualification fields.\nIt‚Äôs common that individuals do not fill these fields in the name of agility. This however does not create accountability in progressing these prospects down the funnel in a predictable manner.\nCheck the date of opportunity creation.\nCreation of the opportunity should occur when you‚Äôre engaged with the prospect and have begun the qualification process. There will sometimes be a child or related opp that needs to  be created based on needs discovered during the IQM with AE. Should that be the case, the created child/related opp should have the IQM activity as a related task on it.\nExplain that creating opps as soon as engagement occurs will lead to better management of a BDRs/SDRs pipeline.\nCheck to see if there is a contact associated to the opp and that there‚Äôs meaningful engagement prior to the opp being created.\nOur standard process requires that we work specific leads and that we convert the main contact person to a contact/opportunity upon qualification.\nExplain that this best practice will help with measuring and moving an opportunity further down the pipeline because of accurately being able to communicate the decision-making team from the prospect‚Äôs side.\nIf activity shows up on the record, and the activity is a connected call with notes, verify that the activity matches in Groove.\nActivities on SFDC can be edited freely and therefore questioned by our audit team.\nExplain that Groove is a SSoT that can be used as irrefutable proof of outreach. Even if other systems fail, Groove is always used as the last back-up.\nIf activity matches, check that activity happened in accordance with our Actively Working Rules Of Engagement (RoE).\nTeam members from both Sales and Marketing are expected to contribute pipeline only within their assigned territory.\nExplain that making sure that being aligned to the RoE will not create any contigencies when measuring pipeline.\nTypical Red Flags\nOpportunity Source: Sales Qualified Source should be SDR generated if not validate that there is a sourcing case documented.\nCreated by: The XDR should create the opportunity, if not, there should be a written explanation\nDid the XDR set and complete a meeting on the same day without previous activity?\nAre there duplicate opportunities?\nIs NetARR missing?\nDirectors, Ops and JB will select random opps each month to audit and ensure audit process is being followed\nBest practices to ensure credit for SAO\nAdd all leads to Flows, if you‚Äôre reaching out to them.\nMake sure your activity is logged that shows how you drove the meaningful engagement that led to the opportunity.\nPopulate all qualification fields\nIf activity was a phone call or a zoom call, log notes at the time of call\nIf a meeting was set, make sure you create a stage 0 opportunity prior to the meeting, populate fields during/afterwards. If person will likely web direct, keep opp in your name and update next steps, ensure that prospect is guided to web-direct using the Flow\nhere\n, as per the conversation\nhere\n.\nIf engagement is in LinkedIn or Whatsapp, take a picture and attach to chatter/opp\nIf activity happened at an event, make sure that immediately following the event, you create a stage 0 opportunity and  send follow up email that recaps the conversation that took place\nReports\nSAO Report for SDRs\nSAO Report BDRs\nOur Complementary Resources\nBest Practices for Outbound BDRs\nCold-Calling and Email Checklist\nOur cold-calling best practices typically consist of 4 elements. A pattern interrupt, an elevator pitch and, if required, objection/trap-setting questions and Up-Front Contracts.\nTo be effective, these need to be customized to the individuals we call as per the logic below:\nDifferent Geographical Business Cultures\nPersonality Type as per the DISC model\nIndividual‚Äôs Role and Responsibilities\nBusiness‚Äô Needs and Objectives\nCall Scripts\nYou can find three examples of our cold call scripts in the description of the\nBDR 101 Level Up Course\nThe main documentation may be\nfound here\nand the library of resources\nhere\n.\nUp-Front Contract\nTypically used for scheduled calls and Up-Front Contracts. UFCs can also be used as a defense mechanism when cold calling does not go as planned. For cold-calling, UFCs are used when the prospect can commit to 15‚Äô at the time of the call. If they commit to a 15‚Äô for a later time, UFCs are used to open the call and set the agenda then.\nExplore the main documentation\nhere\n.\nDecision Maker Discovery\nThe questions below are suggestions to be used while doing a discovery call, in order to identify the decision making process, and to meet the outbound accepted SAO as per the guidelines\nhere.\nWho gets involved while evaluating a tool at {{company}}?\nWould you expect anyone to challenge your initiative, and if so can I help by connecting with anyone else on your end?\nIf you as a {{title}} wanted to purchase GitLab, what process internally would you have to follow, and how can we help you navigate it?\nWhat challenges do you expect to face when trying to pitch this change internally? Who has a say in this and what do they care about the most?\nEmail Writing Cheat Sheet\nThe table below shows the Command of the Message Email Writing Checklist.\nIt aims to outline the structure of the emails we write to prospects. Emails should be written in each person‚Äôs language and tone and make sure to include the CoM frameworks as per the outline below. You can find additional resources\nhere.\nSubject Line\nPersonalized\n- Use Prospect‚Äôs name, Company name, or colleague‚Äôs name. - Relate to their situation: Use recent company initiatives, technologies they use, Projects they have planned etc.\nCuriosity and Urgency\n- Provide an image of their future situation: Guide the reader to imagine how their situation could change. - Use compelling events to give a clear image of where they are currently.\nCoM\n- Proof Points: Quote Case Studies or other customers. - How We Do it Better: Make use of our defensible differentiators.\nOpening Line\nAvoid cliches\n- Stand out: Avoid losing email real-estate with cliche phrases like ‚Äújust following up‚Äù or ‚Äúhope all is well‚Äù. - Brand yourself: Demonstrate that you have an understanding of the reader‚Äôs current situation and a clear idea of his required solutions.\nCoM\n- Before Scenarios: Paint a clear image of their current situation and how that is causing them professional or personal pain. - After Scenarios/PBOs: Tie the current situation with a clear image of a future situation that‚Äôs beneficial for the business and the individual.\nMain Body\nAddressing Questions and Information provided\n- No Free Consulting: Answer questions just enough to give a narrative to your email and tie into the CTA. - No Transactional Answers: Don‚Äôt make the reader feel like he‚Äôs interacting with an online form, a robot, or a sleazy salesman that doesn‚Äôt care.\nCoM\n- Discovery Questions: determine which discovery questions tie into their current situation, questions asked or information provided. - Trap-Setting Questions: if competitor technology or objections come up, use trap-setting questions to guide the reader into understanding our differentiators.\nClear Next Step, Agenda and benefit\n- Valuable: phrase your CTA in a way that‚Äôs clearly valuable to the reader and his specific situation. - Defined: outline what will happen in the next step and how long will it take\nCoM\n- Measurable: present metrics or PBOs that will be covered in the next step\nAdditionally, you can use the matrix below as a quick-cheet to determine what datapoints can be used for personalization.\nLocation\nInformation\nLinkedIn\n- Have they recently been promoted? - What are the specific responsibilities stated on their page you are trying to help them with?\nCompany strategy from website\n- What are the company‚Äôs strategic initiatives? (become more agile?, improve internal business systems?, focus on speed to market on delivery? Streamlining expenditure?)\nGoogle search name of contact\n- Do they have any blogs? - Have they featured in any articles? - Have they any personal achievements celebrated? - Do they have any side projects?\nKeyword search company\n- ‚ÄúCOMPANY‚Äù AND (‚ÄúAgile‚Äù OR ‚Äúdigital transformation‚Äù OR ‚ÄúDevOps‚Äù OR ‚Äúbusiness process improvement‚Äù OR ‚ÄúCloud‚Äù OR ‚Äúdigital strategy‚Äù)\nLeadership Focus\n- Find articles of leadership through boolean searches and ask propose how we can help them achieve these goals\nCompany News\n- Celebrate company achievements\nCheck support tickets\n- Are they experiencing issues that upgrading deployment options could help resolve?\nMutual Contacts\n- Do you have mutual contacts on LinkedIn you can talk about?\nUse cases on website\n- Do they have the same customers as us? How do they help them?\nSpeak to a user of the tool to create personalized message to decision maker\n- Speak to someone who uses out tools every day to uncover pain-points (performance degradation at peak times) and take that information to a decision maker\nBDR Territory Movement Rules of Engagement\nWhen a territory moves from one BDR to another but the previous BDR remains with the same team (ex: moves from one MM territory to another) the BDR vacating the territory will have the chance to temporarily retain ownership of accounts with which they have generated ongoing engagement (subject to manager approval). At the time of the holdover, an issue will be created that will be reviewed in 30 days to verify account ownership. This includes:\nThe outgoing BDR will be allowed to hold back for 30 days any account with which they can demonstrate two-way engagement that could potentially lead to an IQM and new opportunity. If, after 30 days, no IQM has been set and no stage 0 opportunity exists, the account will be moved by the manager to the new BDR assigned to the territory. If the outgoing BDR is successful in generating a new opportunity, the account will remain with them until the opportunity is either qualified or unqualified.\nThe outgoing BDR will be allowed to hold back for 30 days any account with which there is an existing stage 0 opportunity where they are listed as the BDR. After 30 days if the opportunity is not qualified, the account will be moved by the manager to the new BDR assigned to the territory.\nIn instances where an account has been reassigned to the new BDR and the outgoing BDR had two-way engagement more than 30 days ago with the account but was unable to convert them to an SAO, and the account later returns unprompted and with no prior activity from the new BDR assigned to the territory and wants to pursue a conversation with sales, the team (manager) will receive SAO credit from any resulting opportunity.\nAny other situations that arise which result in a credit dispute will be investigated and resolved by the BDRs‚Äô leader and senior leader.\nAssigning SAO Credit when a Territory Change is Uncovered during Discovery\nThere will be times when an SDR or BDR is working a prospect and, after connecting with the prospect, discovers that the corresponding account actually belongs to a different segment than originally thought. This could be due to newly uncovered information regarding employee count, HQ location, or parent account relationship. SAO credit in these situations will vary based on the circumstances and will be determined on a case-by-case basis.  Specifically:\nIf the SDR or BDR has done their due diligence to verify account information and still ends up finding an opportunity outside of their territory: as long as the related account isn‚Äôt an AWA and there is no related activity from an SDR in the past 30 days, and the SDR or BDR‚Äôs manager has verified that the accurate information could not have been uncovered prior to engaging with the prospect, then that SDR or BDR and their team will get SAO credit.\nIf the related account is an AWA or there is related activity from an SDR in the past 30 days, SAO credit will belong to the BDR assigned to the AWA or the SDR working the lead related to the account.\nIf the related account isn‚Äôt an AWA and there is no related activity from an SDR in the past 30 days, but the SDR or BDR‚Äôs manager determines that the accurate information should have been uncovered prior to engaging with the prospect, SAO credit will be assigned to the team manager assigned to the correct territory.\nAny other situations that arise which result in a credit dispute will be investigated and resolved by the SDR or BDR‚Äôs leader and senior leader.\nIn situations where an SDR or BDR has received conflicting information and it is unclear what the correct territory is for an account, they should Chatter the AEs assigned to the potential territories and have them figure out who owns it.\nWorking with Resellers\nThe end-user account determines the BDR/SDR alignment: If you are the SDR assigned to the 3rd party lead, please gather the information in point 1 and pass the lead to the correctly assigned BDR (the BDR assigned to the end-user account) who will complete points 2-6\nStep\nDescription\nGather billing and end-user details from the reseller\n- Billing company name/address:\n- Billing company contact/email address:\n- End-user company name/address:\n- End-user contact/email address:\nCreate a new lead record with end-user details\n- Ensure that all notes are copied over to the new LEAD as this is the LEAD that will be converted.\nConverting the new lead\n- Name opp to reflect reseller involvement as shown here: ‚ÄúEnd-user account name via reseller account name‚Äù\n- Convert original reseller lead to a contact associated with the reseller account\n- If an account does not already exist for the reseller, create one when converting the lead to a contact\n- Assign the record to the same account owner\n- Do NOT create a new opportunity with this lead.\nAttach activity to the opportunity\n- On the reseller contact, go to the activity and link each activity related to your opportunity to the opp.\n- Activity History > click edit to the left of the activity > choose ‚Äòopportunity‚Äô from the ‚Äòrelated to‚Äô dropdown > find the new opportunity > save\nUpdate the opportunity\n- Change the business type to new business and stage to pending acceptance.\n- Under contacts, add the reseller contact, role as reseller, and primary contact.\n- Under partners, add the reseller account as VAR/Reseller\nSDR/BDR to AE SAO Handoff Process\nThe purpose of the BDR-AE outbound handoff process is three fold.\nEnsure Outbound prospects get the best experience possible.\nEnsure the BDR team enjoys operational efficiencies and have clearly structured ways to collaborate with the AE team on outbound accounts.\nEnsure the AE team is set up for success is receiving outbound leads in a structured manner and have the appropriate information to utilize in converting them.\nTo make sure that the hand-offs maximize internal efficiencies, it is required that:\nThe BDR team makes sure to book calls, with a minimum notice time of 48 business hours.\nThe BDR team makes sure to properly fulfil Outbound SAO criteria, or work with AE to create a mutual command plan.\nThe AE team makes sure to:\nAccept SAOs within 8 working hours after an IQM call.\nTo leave a chatter note on the opportunity record, tagging BDR and AE manager with feedback on the level of qualification and handoff in case of discrepancies.\nTo be responsible for managing the prospect relationship after all handoff types have taken place. This includes re-scheduling conflicts.\n1. BDR Qualified Meeting\nAre leads that have been qualified by the BDR over a Discovery call.\nCoM principles\nhave been applied to the call and some of the Before/After Scenarios, Positive Business Outcomes, Requirements and Metrics have been identified and agreed upon between the prospect and the BDR.\nThere is a clear need or intent identified from the side of the company, and the prospect has clearly articulated a path to the ultimate decision-maker, as per the guidelines for outbound SAO criteria.\nBDR steps after discovery call\nSummarize CoM principles uncovered during the call\nSchedule next step through Groove while being on the call with the prospect\nMeeting Type should be a 45‚Äô Call and the body of invitation should be adjusted to meet the prospect‚Äôs needs.\nSend AE Intro Email\nFor demanding hand-offs, customer-facing agenda may also be copied and attached to intro email.\nLog Required SFDC fields and populate Notes field.\nUnless there‚Äôs a scheduling conflict for the BDR, attend Evaluation Orchestration Call and kick-off the call:\nSummarize the BDR qualifying conversation by mentioning and verifying the before and after scenario of the prospect, as transcribed on the SAO notes.\nAfter prospect acknowledges that their internal situation have not changes in between BDR and AE call, recap the expectations and metrics as transcribed on the SAO notes and handoff to AE to move forward.\n2. Joint IQM\nAre meetings booked with leads that are from pre-agreed upon Actively Working Acounts.\nCalls scheduled for these prospects will be taken as a joint IQM with both BDR and AE attending, and leading the qualification.\nCoM principles will be applied during the call, with the goal of uncovering a clear need and path to the ultimate decision-maker, as per the guidelines for outbound SAO criteria.\nBDR steps before discovery call\nSchedule next step through Groove while being on the call with the prospect, and schedule straight to the AEs calendar.\nMeeting Type should be a 15‚Äô Discovery Call.\nCreate SFDC opportunity, and log any pre-determined or relevant information from your past reseearch.\nCommunicate with AE, and create a mutual command plan for the call.\nWhen kicking off the call, summarize the BDR research and reason for reaching out, such compelling events, Persons with LIM, etc\nAfter prospect acknowledges their compelling event and internal situation, discovery call continues with pre agreed upon structure with AE.\nOrganizing a Group Demo\nOrganizing a shared demo makes it more simple for us to offer spontaneously a demonstration of GitLab, which should result in a easier handover of opps, and ease to create opps. As BDRs, we arranged the execution of this demo by creating a zoom webinar, and configuring the whole event so that the administrative side is automated.\nDefine the criteria that qualifies an opportunity as eligible to go to a shared demo.\nSAL/AE is involved only\nThe SAL can invite his/her/their customers or contacts in order to add value to their ongoing discussion, if the AE/SAL finds it relevant. This is in the context of a conversation with the prospect/customer.\nSAL/AE and BDR are involved\nThe BDR schedules a discovery meeting with the SAL (whether it is a prospect or customer) that generates a qualified opportunity. Once the opportunity is created, the SAL/BDR suggests the shared demo instead of the individual demo based on the priority of the opportunity (importance of the account, number of licenses, amount of the opportunity, persona). This is in the context of a conversation with the prospect/customer. There needs to be an opportunity in this case to suggest the demo, for the sake of collaboration between the SAL and the BDR.\nBDR is involved only\nWhen a lead with decision power or significant influence in the org (no individual contributor) expresses a high interest for GitLab (aka: high read/open rates on an email, response received by phone with interest confirmed) AND when the BDR has a tangible reason to think that there is a need in the division/team/company (research, information obtained through other leads in the same org), the BDR can leverage the shared demo for HOT leads to create interest or a sense of urgency, the goal being to have the lead jump on an introductory meeting after the shared demo.\nDefine the criteria for different groups of attendees who can join this demo\nAttendees coming from a BDR conversation\nIn order to attend a demo, this attendee needs to be part of an opportunity in at least stage 1- Discovery.\nAttendees coming from the AE‚Äôs conversations\nThe AE can leverage this shared demo to invite his own contacts.\nStep-by-step guide to plan a demo\n1. Get a Zoom Webinars license\nYou don‚Äôt have a Webinar licence by default, so you need to open an access request issue on GitLab to ask for one.\n2. Go on Zoom SSO > Webinars (on the left under Meetings) > Schedule a webinar\nYou will be able to save the entire configuration of the webinar as a template, in order not to set it up again.\n3. Change the topic, description, date/time, and duration\nChange the topic (this will be the title of your demo, and the name of the event on Google Calendar), the description (describes the content of the demo, the idea is to adapt the focus of the demo depending on your attendees), set the date/time of the demo, and the duration (note that setting a certain duration will not stop the zoom webinar once the time has gone).\n4. Tick the box ‚ÄòRequired‚Äô next to registration\n5. Change the Dial country to match attendees‚Äô language\n6. Configure additional settings such as Q&A, recording, and email settings\n7. Save the configuration as a template for future use\nOutbound Account Ranking Matrix\nThis complementary table can help structure your thinking around what outbound accounts to choose.\nAccount Scoring & Prioritization\nPriority 1 Actively Working Accounts (15%)\n- Strong ICP Qualities\n- Compelling Triggers\n- Strategy is Tailored and Targeted\n- Future based next step dates\n- Specific next step notes\nPriority 2 Actively Working Accounts (35%)\n- ICP qualities\n- No Triggers\n- Strategy is Targeted (persona/industry based)\n- Future based next step dates updated weekly/bi-weekly\n- Next step notes should just include week #\nPriority 3 Actively Working Accounts (50%)\n- ICP qualities\n- No Recent Triggers\n- Strategy is nurture based\n- Future based next step dates updated monthly\n- Next step notes should just include recent release # or event invite\nOther Good Account Scoring Qualifiers:\n- Current CE Usage\n- 250+ employees in IT/TEDD positions\n- Good Fit Industry / Vertical (High Growth, Technology, Financial, Healthcare, Regulated Business)\n- Early Adopters / Innovative IT Shops (Identifiers & Keywords): Kubernetes / Containers, Microservices, Multi-cloud, DevOps, DevSecOps, CICD (and open-source + proprietary tools), SAST / DAST, Digital Transformation\n- Current DevOps Adoption (multiple DevOps roles on staff or hiring for multiple DevOps positions)\nOutbound Prospecting Framework\nPriority Level\nAccount Strategy Includes\nNext Step Date\nNext Step Notes\nGrowth Strategies, Ranking and RoE\nStrategies:\nGrowth within an existing customer account: BDR should strategically partner with SAE/ISR to identify additional business units to bring into the conversation as growth opportunities. Renewal dates should be exploited.\nExpansion into parent/children/subsidiaries of existing customer accounts: These are accounts that fall within the corporate hierarchy within Salesforce. If a child/subsidiary account is identified via ZoomInfo but not in our system, then BDR should follow the following process: Create a LEAD for that account and then convert to CONTACT to create the ACCOUNT when you qualify your first lead.\nFree to paid upgrades: Existing Core/CE users can be targeted to upgrade to a paid version of GitLab\nRanking and prioritization of accounts:\nRank 1: Expand with Purpose (EwP) accounts should be closely/strategically worked with SAEs. These accounts have High 6Sense intent scores and should therefore be High touch by BDR.\nRank 2: ICP Ultimate parent accounts that have Core/CE-Users in a hierarchy, Total CARR/LAM for account, Med/Low 6Sense intent scores, and small renewals in current FQ.\nRank 3: As above but are not our ICP\nProfessional Services Opportunities\nA Professional Services Opportunity will be used to cover any integration, consulting, training or other service that a Sales rep will sell to a prospect/client and needs or wants to be invoiced separately. To invoice separately a new quote and opportunity must be created.\nFrequently Used Terms\nTerm\nDefinition\nAccepted Lead\nA lead that an SDR or BDR agrees to work until qualified in or qualified out\nAccount\nAn organization tracked in salesforce.com. An account can be a prospect, customer, former customer, integrator, reseller, or prospective reseller\nAccount Manager\nAccount Executive, can be Major or Strategic in AMER/EMEA Enterprise\nAsia-Pacific\nBusiness Development Represenative - focused on outbound\nChannel Account Manager\nCustomer Success\nGermany, Austria and Switzerland region\nEurope, Middle East, and Africa\nEnd User License Agreement\nHigh intent\nAn event, webcast, demo that is a strong indicator of purchase or evaluation\nHigh Priority Lead\nLeads related to a high priority campaign.\nInquiry\nAn Inbound request or response to an outbound marketing effort\nInitial Qualifying Meeting\nLatin America (includes all of Central & South America)\nMiddle East, Turkey and Africa Region\nMarketing Qualified Lead - an inquiry that has been qualified through systematic means (e.g. through demographic/firmographic/behavior lead scoring)\nMinimal Valuable Change (not Model View Controller)\nNorthern Europe Region\nNorth America\nQualified Lead\nA lead that a BDR or SDR has qualified, converted to an opportunity and assigned to a Sales Representative (Stage 0-Pending Acceptance)\nRegional Director\nRest of World\nStrategic Account Executive\nSales Admin\nSales Administrator\nSales Serve\nA sales method where a quota bearing member of the sales team closes the deal\nSales Accepted Opportunity - an opportunity Sales agrees to pursue following an Initial Qualifying Meeting\nSales Development Representative - focused on inbound\nSelf Serve\nA sales method where a customer purchases online through our web store. Also known as a ‚Äúweb direct‚Äù\nSouthern Europe Region\nService Level Agreement\nSales Qualified Opportunity\nCustomer Success Manager\nTechnology, Engineering, Development and Design - used to estimate the maximum potential users of GitLab at a company\nWon Opportunity\nContract signed to Purchase GitLab\nHyper-personalization\nThe concept of combining real-time data extracted from multiple sources to create outreach that resonates with prospects on an individual level.\nVIP (prospect)\nA Very Important Person, top officer, executive buyer, C-level prospect, or important influencer requiring hyper-personalization.\nInfluencer (prospect)\nAn individual prospect suspected to be involved with IT decision-making, tooling, teams, roadmap, strategic projects, and/or budgets.\nUser (prospect)\nA prospect with limited influence within an IT organization.\nGroundswell\nAn outbound strategy focused on filling the top of the funnel by generating engagement, opt-ins, MQLs, and uncovering intent signals.\nWarm Calling\nThe method used to strategically incorporate phone calls and voicemails into an outbound prospecting workflow.\nRules of Engagement (RoE)\nDefines ownership of a lead, SAO credit, and collaboration between SDRs and BDRs.\nBDR Prospecting Status\nSalesforce status includes Queued, Actively Working, Worked in FY, and Restricted.\nVartopia Partner Account\nIf populated, the lead/contact is worked by a partner, and Sales Dev should not proceed with outreach.\nActively Working Status\nAccounts chosen for strategic outreach based on alignment, news, initiatives, etc. Recycles after 10 weeks if not worked.\nActively Working Status Requirements\nBDR Account Strategy field must be populated. Research and Next Steps notes within 10 days. Minimum 5 people in Flows.\nQueued status\nAccounts waiting to be moved into Actively Working. SDRs work MQLs in this status.\nWorked in FY status\nIndicates an account went through ‚ÄúActively Working‚Äù this FY. Can be moved back to ‚ÄúActively Working‚Äù later.\nRestricted status\nSAE-indicated restriction on the account. BDRs handle the status change, note the reason, and reroute to assigned BDR.\ntitle: Sales Development Tools and Manager Resources\ndescription: This page walks you through all the tools we use in the Sales Dev org.\nSales Development Tools\nThis page is to act as your guide to the many tools and best practices that the Sales Development Organization utilizes.\nClaude\nClaude is an AI assistant from Anthropic. It can help with analysis, content writing, research, spreadsheet organization and other tasks.\nClaude Sales Dev BDR/SDR User Guide\nPrompt Library\n- a place to find prompts the Sales Dev Org is currently using and collaborating on\nBusiness Development Prospecting Claude Project\nAMER Calling Analysis Claude Project\nEMEA Calling Analysis Claude Project\nReport Template for Calling Projects\nSAO Audit Claude Prompt\nReport Template for SAO Audits\nAbove are some examples of how information can be stored to a pre-made project. Pre-made prompts are also saved and shared on the same project in the Activity tab of this Project. Please feel free to use and/or duplicate this Project and the Saved Prompts for your purposes. We have the #sales_dev_claude_insights Slack channel or the\nPrompt Library Issue\nthat you can use to report your wins to the team.\nLimitations\nClaude can‚Äôt access GitLab systems, databases, or customer information directly. While Claude can analyze data you share, it can‚Äôt pull anything from GitLab‚Äôs internal tools or CRM.\nAdding up to Orange Data has been approved.\nClaude can‚Äôt maintain context between conversations - each chat starts fresh, so previous discussions about prospects or strategies won‚Äôt be remembered.\nUnderstand that\nClaude is not always right and will sound very confident even when it is wrong\nGeneral Tips\nTreat it like you are having a conversation with a highly intelligent robot (ex. C3P0)\nAlways try to ask follow up questions to get better answers\nYou can always have Claude write ideal prompts for you!\nBecause Claude‚Äôs data cut off is from April you can upload up to date target account‚Äôs 10Ks, annual reports, and investor letters for up to date research\nYou can use Claude to help you reformat your spreadsheets! It is recommended to upload your data in CSV format.\nExamples of Questions to Ask\n‚ÄúCan you see if this companies‚Äô annual report mentions DevOps, Software, Cyber Security, Git?\n‚ÄúCan you make this email reply more concise?‚Äù\n‚ÄúLet‚Äôs say I was a sales rep from GitLab. How should I approach this company/title?‚Äù (Can use Panos‚Äôs prompt in the prompt library as well )\n‚ÄúCan you explain why you gave x answer?‚Äù\n‚ÄúCan you rewrite that in a more casual tone?‚Äù\n‚ÄúI do not like that message you generated.Can you give me 3more options and explain the pros and cons of each?‚Äù\nZoomInfo\nZoominfo\nprovides our Sales Development Representatives and Account Executives with access to hundreds of thousands of prospects and their contact information, company information, tech stack, revenue, and other relevant data. Individual records or bulk exports can be imported into Salesforce using extensive search criteria such as job function, title, industry, location, tech stack, employee count, and company revenue. More information can be found on the Marketing Operations\nZoominfo handbook page.\nZoomInfo Training Resources\nZoomInfo University:\n40 Minute Introduction Video\nGitLab Edcast:\nZoomInfo Introduction Training\nGitLab Edcast:\nZoomInfo Advanced Training\nZI 101 Video:\nQuick Saved Searches\nZI 101 Video:\nLeveraging List Match\nZI 101 Video:\nTagging Prospects in LinkedIn\nGitLab Handbook:\nZoominfo handbook page\nLinkedIn Sales Navigator\nis a prospecting tool & extended reach into LinkedIn Connections.\nLinkedIn Training Resources\nLinkedIn Intro:\n70 Minute Navigator Tutorial\nGitLab Edcast:\nLinkedIn Navigator Training\nGitLab Video:\nPeer Tips\nGitLab Video:\nLinkedIn Personalization\nGitLab Video:\nLoading Accounts from Salesforce into LinkedIn\n6Sense\n6Sense is a targeting and personalization platform that we use to reach our different audiences based on intent data and our ideal customer profiles. While the content beblow is more specific to our Sales Development team, please visit the\nMarketing Operation‚Äôs handbook page here\nfor a full breakdown of 6Sense‚Äôs functionality.\n6Sense Training Resources\nGeneral 6Sense Resources\n6Sense for BDRs Video\n6Sense Account Identification Guide\n6Sense Persona Identification Guide\n6Sense 6QA Automations\nWe currently have in place an automation that will automatically move accounts that reach 6QA status from 6Sense to SFDC. A detailed breakdown of\nthese workflows is described here\n.\nSpecifically:\nAccounts flagged as 6QA from 6Sense, whether they already exist on our system or not, will automatically be marked with the fields:\nBDR Prospecting Status: Actively Working\nBDR Account Strategy: Showing Intent\nThese Accounts will be flagged on 1:1 dashboards for team members to review with an expected SLA of\n48 hours\nWhile these accounts are automatically switched to Actively Working to indicate the high propensity to buy, team members need to still review and accept or dispute a 6QA account.\nFor FY26Q1 we are adding a\nDispute Reason for Low LAM Dev Count\nwhich team members can use when they opt to not pursue a 6QA account because of a small account value potential.\nAny accounts that team members choose to dispute using the instructions below will be flagged to the Action Needed dashboards for Managers to keep track of.\nAccepting or Disputing accounts can be done through a secondary field titled\n6QA Acceptance Status\nwhere the options\nDisputed\n(would need to provide reasoning) or\nAccepted\ncan be found.\nAny accounts that marked as\nAccepted\nby the BDR team will trigger the\nZoomInfo workflow here\nto automatically bring relevant decision-makers for these accounts to the\nB6 view on SFDC\n.\nThis is a complementary automation for the outbound team to automatically source some prospects for you. you are still expected to properly add the account to your pipeline following the steps outlined above.\nImportant Note:\nWhen 6QA accounts are non-FO available and non-Compensation Target Account (non-Pursuit Account), BDR Prospecting Status will update to SDR Hold for 14 days. If an open opportunity is not created within the 14 days, the account will be updated to Actively Working and Showing Intent and the ownership will be updated to BDR.\nQualified\nis the Sales Dev Org‚Äôs tool we use to chat with visitors on the GitLab website. Currently the SDR teams primarily respond to inbound chats and visitors using Qualified. The BDRs also have the ability to initiate chats with known leads from their actively working accounts.\nGong\nRefer to the\nGong\nhandbook page for full details on how Gong is leveraged at GitLab.\nSales Development Org team members are provided with Gong collaborator licenses for visibility to recorded sales conversations.\nSDR and BDR team members are able to leverage the\nGong Meeting\noption when creating meeting invites for prospects and customers. By using this option and adding an Account Executive with Gong recorder access to the meeting invite, Gong will leverage the AE‚Äôs recorder access to record the meeting, assuming all meeting participants consent to record. More details about the Gong consent page can be found in the\nGong internal handbook page\n. Once the recording is processed, the Account Executive that was added to the invite will be listed in Gong as the host and owner of the call with the SDR or BDR as an attendee.\nCrayon Competitive Messaging Resources\nCrayon\nhosts competitive messaging resources that are maintained by GitLab‚Äôs product marketing team.\nThis is where you can find messaging related to GitLab vs some of our competiors such as GitHub, Atlassian, and Azure DevOps\nUserGems\nis a tool that tracks specific cohorts of people that we provide in terms of them changing jobs. This automated tracking provides valuable insights, surfacing warm leads that can drive faster, larger wins. This tool helps mitigate deal risks when key individuals leave accounts, and accelerates deal progress when influential contacts join new organizations.\n1. When a person that we are tracking leaves their current place of employment\nThese people are identified by the lead initial source being\nUserGems Contact Tracking\nUserGems will track that person to their new role and will automatically create a lead with their new details in our system.\nThese leads will be flagged on the\nAction Needed BDR dashboards\nfor you and your manager‚Äôs review, as well as on the\nB2 views\nWe expect that our\nstandard RoE\nwill be followed normally in actioning these leads, similar to MQLs.\nThese leads will be routed to the BDR team if:\nThey are associated to an Actively Worked Account\nAre connected to a Pursuit Account, or an account that has been marked as\n6QA by 6Sense\nThe rest of the leads that do not fit these parameters will be routed round-robin to the SDR team.\nThese leads should also be considered as intent data for prospecting an outbound account.\nTake the time to research accounts for the propensity to purchase and intent signals. Could the tracked contact‚Äôs hire into that account be a compelling event for you to use?\nThis data can be found either on our 1:1 Dashboards on report 6 that‚Äôs dedicated to UserGems, or through this\nlead-level SFDC template that you can clone and use.\nAnalyze the hiring and promotion patterns as business signals.\nA surge in technical hires (e.g., developers, engineers) may indicate growth initiatives, product development, or a focus on scaling infrastructure.\nSales or customer success hires could suggest plans to expand revenue through growth or enhance customer retention strategies.\nSenior Leadership hires may indicate an internal restructuring of a department or a new business initiative.\nUse these hiring signals to identify potential challenges or priorities, such as team collaboration, scaling efficiently, or driving revenue growth. Based on these, target decision-makers who are likely overseeing these initiatives, like directors or VPs.\nWe‚Äôll also notify you via Slack and email about these Job Changes.\n2. When a company that we are tracking gets a new hire or promotion\nThese people are identified by the lead initial source being\nUserGems - New Hires and Promotions\nThese people will be automatically be enrolled to a fully automated AI-driven sequence as per the guidelines below.\nSimilar to above, the same people will be flagged on dashboards and reporting for you to consider as intent signals to add their respective accounts to your pipeline.\nWe expect that our\nstandard RoE\nwill be followed normally.`\nWe are actively working to remove irrelevant prospect titles from being created as part of the\nUserGems - New Hires and Promotions\nlead sources. If you notice any titles that you feel should not have been created because they‚Äôre irrelevant to DevOps decision-making in that company, please feel free to use the #usergems-feedback Slack channel to let us know, and we‚Äôll work with our CSM to review them.\nIn the meantime, you can also mark these leads as Status\nDisqualified\nand Disqualified reason\nNo Authority\n3. When people leave or join accounts where we have open opportunities\nWhile we are actively working to improve our back-end so that this cohort can be visible on our dashboards, like the use-cases above, we are relying on sending notifications only for these people. In the meantime, you can use the report here to gauge what prospects we have on\nthis list\n. We are currently notifying:\nThe Sales team for people that joined or left a stage 3 or beyond opportunity.\nThe Sales and Sales Development teams for people that joined or left a stage 0, 1 or 2 opportunity.\nThese people are not enrolled to a specific flow, since there multiple scenarios on how to best address them, please search Groove for templated messages\nlike this one\nthat you can use.\nGem-E FY26 Auto Enrollment\nFor FY26Q1 we will pilot auto-enrolling UG leads to a dedicated Groove Flow which will make sure of UserGem‚Äôs AI functionalities.\nLeads that have no activity, and match the filters on the\nSMB report here\nor\nMM/ENTG report here\nwill be automatically added to either an\nor\nflow.\nThese flows will automatically include AI generated customisation. Please review the\nslides\nor the\nvideo presentation here\nfor a full walkthrough.\nThese leads will be flagged on the dashboards similar to the explanation above and progress can be tracked from there.\nGem-E Meeting Assistant\nAs part of our Gem-E pilot, we are also trialling UserGems Meeting Assistant. The Assistant integrates with your calendar invitations and automatically pulls the contact information of people that are attending your call, but are not in our database yet.\nThese people will be created as net new contacts and leads in SFDC, using the initial source\nUserGems - Meeting Assistant\n. They can be assigned to the existing account or opportunity that you are working on, so you can continue multi-threading the account that you are working on.\nSales Dev Manager Resources\nSales Dev Operations Team Regional Availability\nThe Global Sales Dev Operations team has the office hours below, so that regional team members can know how to address internally. Please tag the DRI below in the\n#sales_dev_global\nslack channel to maintain our\nshared reality\nand other\nGitLab TeamOps tenets.\n.\nPlease do feel free to reach out to anyone in the ops team based on their availability (Out Of Office etc), and your local time (ie. if you‚Äôre in EMEA after hours and need someone ASAP, Ed in AMER can assist.)\nRegion / Timezone\nOps Team Member\nEd Bao\nPanos Rodopoulos (Ed Bao is complementary DRI for APJ)\nSales Dev Operations Reccuring Team Visits\nThe Sales Dev Ops team aims to visit each team‚Äôs meeting once per month to be of assistance with anything operations related as required. Please find a\nlink to an issue that we use for planning and feedback here.\nSales Dev Operations Working Sessions\nThe Sales Dev Ops team also holds recurring weekly working sessions, with up to four participants per session. These sessions are aligned to the month‚Äôs theme outlined above, and are designed to collaborate on key operational topics and initiatives.\nSales Dev Research Desk\nOur Sales Dev Ops team can help you with researching our suite of databases (Sales Nav, ZoomInfo, Cognism, 6Sense) to help you manage your actively worked account list. We typically focus on accounts that are not currently available to our database, but can help with other ideas that you may have. Please log an issue to our board\nhere\nusing the template\nBDR_Research_Request\nSales Dev Housekeeping Issue\nThe team has an issue where we consolidate our monthly to-dos (titled\nMonthly Housekeeping\n). In this issue there‚Äôs also a section for any feedback that we gathered that month, so we can plan any next steps. If you‚Äôd like to add feedback directly please navigate to our\nteam‚Äôs board\n, find this month‚Äôs issue and log any feedback you have there.\nManager Tool Certification\nWe have an end-to-end process and tool walkthrough that walks manager through all the knowledge and information they need to know to be able to use our tech stack, both for inbound and outbound processes. The full video playlist of this training is\non our Unfiltered playlist here\n. Moreover, abbreviated notes of the training can be\nfound here\nand a list of questions that we expect our Managers to be able to answer\nhere\n, along with passing criteria and some more video guides.\nGeneral leadership principles\nThis page will serve as a training resource and operational guide for current and future managers. All Sales Development Managers should follow the\ngeneral leadership principles\nset out in the handbook.\n1-1s\nProviding regular feedback\nDealing with underperformance\nManager Onboarding\nOnboarding is essential for all Sales Development Managers at GitLab. As part of onboarding, a\nBecoming a GitLab Manager\nissue will be created for each manager when they join, or are promoted. This issue is intended to connect new managers with the crucial information they need, and ensure they have access to all the resources and training available.\nOutbound BDR Process Manager Onboarding\nThe BDR process that we have defined here in GitLab is meant to provide a repeatable set of steps that an outbound BDR can follow to achieve results. It is very important for an onboarding manager to align themselves as quickly as possible to this process as it is a proven method that will help them manage their team in a efficient and data-driven way.\nThe BDR Process is explained step-by-step in the\nsection here\nFor a newcoming manager, we provide the Manager attention needed boards that will be your main tool in understanding where your team is aligned to our BDR process, and where they need assistance.\nTo help structure your usage of the above, you can follow the steps below during your first month at GitLab while\nthe document here will be your main go-to resource\nAction\nBenefit\nClone the Action Needed Dashboard and edit each report to be exclusive to your team‚Äôs names\nGives you a SSoT that you and your team can easily reference\nReview the dashboard with your team, and discuss how the data on it connect to the\nBDR KPIs\nAllows you to understand your team‚Äôs level of maturity and each team member‚Äôs current level of alignment to existing processes\nTake note of any discrepancies or points of feedback from the team, either transcribe them to 1:1s for individual conversations or to the SDR Issue board for org-wide improvements\nEnables you to filter between discrepancies that are caused because of a team member‚Äôs lack of diligence that should be improved upon by the individual OR for discrepancies that were caused by an org-wide operational shortcoming that should be improved upon on a global scale.\nSet realistic expectations with the team about adherence to org KPIs and set a review mechanism to go over them on a reccuring basis\nHelps maintain a repeatable structure of accountability for your entire team\n1:1 Account and Lead Level Dashboard Coaching guidance\nThe table below can help with structuring how you perceive and action the 1:1 Dashboards we have on SFDC and Tableau, the below connect to the\nKPI page here.\nand the videos\nhere\nand\nhere\nare two quick compelementary resources to walk you through how we use the dashboards.\nAdditionally this\n5‚Äô video\nexplains the purpose of these dashboards, while this\n3‚Äô video\nwalks you through a practical use case of how to use a report in these dashboards.\nDashboard\nComponent\nExpectation/Action\nCoaching Opportunity\n1:1 Accounts Dashboard\n0. Queued Accounts\nFor accounts in AW (Actively Working):\nThese accounts are to be cleared on a weekly basis by being moved to AWA status or by leaving a clear chatter note as feedback on why the account was not added to a prospecting pipeline. This should include datapoints from intent tools or another other SSoT as supporting evidence.\nCarefully vetting and working accounts that are queued by the Sales team will lead to better collaboration, and mutual accountability. Not only are we expected to timely review these accounts but to keep our counterparts accountable to their account ranking by providing data-driven feedback.\n1:1 Accounts Dashboard\n1. Review Existing Pipeline\nFor accounts in AW:\nThese accounts are currently in the team member‚Äôs name. The total volume should not be over 125 for Mid-Market BDRs and 75 for Enterprise BDRs. As a priority these should be reviewed weekly and action should be taken accordingly to remove or update these accounts.\nWhen clicking into the report the team member can screen all the datapoints that can help them gauge the status of their accounts at a glance. Activity and Research fields can be combined with intent datapoints to quickly see which accounts should be reviewed further manually.\n1:1 Accounts Dashboard\n2. Research Accounts to be Recycled\nFor accounts in AW:\nThese reports are nearing their automated recycle date, which by default is two months after their actively started work date. This report acts as a fallback report to the report above. A BDR should have already reviewed these accounts as part of their actively working account screen done in the previous step. This report will act as a second reminder.\nIn theory an outbound account will have received at least 30 days worth of outreach since most flows we use have at least a 30 day cadence. It‚Äôs fine to leave an account in a team member‚Äôs pipeline until it‚Äôs removed automatically in hopes of getting some inbound MQLs assigned to the BDR. Regardless, there‚Äôs a business decision to be made about whether expecting inbound MQLs is a sound strategy, based on the team members quota attainment and overall pipeline at the moment, and whether replacing the about to be expired for another account is a better route.\n1:1 Accounts Dashboard\n3. Re-evaluate newly added flagged accounts\nFor accounts in AW:\nThese accounts were recently added to a team member‚Äôs pipeline but at least one of our intent tools flags it as a weak account in terms of intent data.\nIn the spirit of hyper-targeted results, this account should be empty since all tools we have should agree that this account is good enough to be added to the team member‚Äôs pipeline. If there are any accounts flagged it is wise to review them and ensure that they should indeed remain with the team member‚Äôs pipeline.\n1:1 Account Dashboard\n4. Check past opportunities for potential use\nFor accounts not in AW:\nThese are past opportunities that could be reviewed for re-engagement.\nClosed: Lost opportunity re-engagement is one of the best converting sources of pipeline for our team. After having reviewed the pressing reports in the first three steps above, the quickest review to make to gauge some low-hanging fruit is this report.\n1:1 Account Dashboard\n5, 6 and 7. Assess high priority individuals\nFor accounts not in AW:\nThese three reports show individuals that connect to actively working accounts in the team member‚Äôs pipeline. These should be reviewed and any relevant next steps or actions should be made on the account-level bdr notes.\nThese three reports show individuals with high intent data, engagement in marketing campaigns or recent with interesting moments. While it‚Äôs not necessary that there has to be action on the specific individuals, their behavior can give significant queues into the current situation within an account.\n1:1 Account Dashboard\n8, 9, 10, 11 and 12. Review High Intent Accounts.\nFor accounts not in AWA:\nThese reports split not-AWA accounts in a few different buckets. While there will be significant overlap, having multiple reports help prioritize how a team member can review their account list for new accounts to add to their pipeline. These reports should be reviewed weekly and the majority of AWA accounts should be sourced from one of these.\nThese reports all reference our intent based tools, existing RoE around pursuit accounts and should guide the decision-making of team members. Referencing these as a first step should create a lot of internal efficiencies in researching accounts.\n1:1 Account Dashboard\n13. Consider AE-ranked accounts.\nFor accounts not in AWA:\nThis report visualises accounts as per the ranking that the sales team manually gave them. They should be reviewed after the team member has reviewed intent-based tools.\nThe Sales team does not have access to the same data as us so their manual research can be used a good fallback report to cross-reference against the reports in the previous steps.\n1:1 Account Dashboard\n14 and 15. Review individuals from not actively worked accounts\nFor accounts not in AWA:\nThese reports show individuals from non-actively worked accounts that either have been part of a marketing campaign, or show strong intent signals.\nThese individuals should be approcah as an indication that the account as a whole should be investigated for outbounding.\n1:1 Account Dashboard\n16. Review individuals in flight.\nFor accounts not in AWA:\nThis report shows a breakdown of prospects currently on a Groove Flow. Should be reviewed for any further actions to be taken.\nConsider whether adding more individuals to a flow for a particular account might make sense, or whether the individuals from the top prospect accounts should be getting additional outreach outside of the flow steps.\n1:1 Account Dashboard\n17. Consider past Actively Worked Accounts.\nFor accounts not in AWA:\nAs a final check, this report should accounts that were previously outbounded for the territory, do any of them make sense in terms of re-engagement?\nOutbound efforts typically take a long time to convert an account, and reviewing new intent data is a great practice to maintaining a good re-engagememt pipeline.\nTableau Dashboard\nInbound Interest Dashboard\nThis dashboard is an intuitive way for BDRs to manually screen their database. It should be used as a complementary resource to the account-level dashboards above.\nWhile the account-level dashboards are pre-made, and there to guide the thinking of team members in terms of account research, this Tableau dashboard allows a team member more flexibility into sorting through the database. They can use the filters to replicate the permutations of the account level reports in any way that they please.\nTableau Self-Dashboard\nSelf-Managed Instances Dashboard\nThis dashboard allows BDRs to track and manage instances that are self-deployed by prospects or clients.\nIt helps BDRs understand how self-managed instances are performing and identify any potential opportunities to convert them into fully managed accounts or upsell additional services.\nTableau Self-Dashboard\nSelf-Managed Instances Dashboard\nThis dashboard allows BDRs to track and manage instances that are self-deployed by prospects or clients.\nIt helps BDRs understand how self-managed instances are performing and identify any potential opportunities to convert them into fully managed accounts or upsell additional services.\nProspect 360\nProspect 360 Dashboard\nThis dashboard\nconsolidates data from key systems like Salesforce, 6Sense, Qualified, and Marketo, providing BDRs and SDRs with a starting point for account-level prospecting. It can short-listed to identify accounts that\nBy offering a holistic view of account activities, including engagement history and lead/contact interactions, it helps teams identify and prioritize high-potential accounts for conversion. Watch the\nEnablement Video (accessible through GitLab Unfiltered Account)\nfor a comprehensive overview.\nGeneral Sales Development Leadership Resources\nResource\nPurpose\nLeadership Handbook\nTools and resources to assist people managers in effectively leading and developing team members at GitLab\nCompensation Review Cycle (Compa Review)\nHow to review our Compensation Calculator and carry out the Compensation Review Cycle\nSales Dev Manager Onboarding Checklist\nMake a copy and complete this checklist to ensure you know your team‚Äôs tools and processes\n360 Feedback\nWorkday\nAll team member HR information\nTransitioning to a Manager Role at GitLab\nNew manager resources and what to expect\nLead Routing & Alignment Resources\nResource\nPurpose\nTerritory Change Request Issue Board\nUse the territory Change Request Issue Board and the BDR_Territory_Change Sales Development Issue Template in order to request a territory change for your rep.\nSales Dev Internal Onboarding and Transition issue template\nThis issue template is to be used when a new teamember is joining the Sales Development Org for the first time or they are transitioning from SDR to BDR or vice versa.\nBDR Territory Change Request issue template\nUse the BDR Territory Change issue template when you would like to request territory changes for your BDRs.\nSales Dev Exit Handover Template\nThis template is meant to be used for team members that are departing from a team to hand off their pending tasks to their peers.\nGitLab Resources\nResource\nPurpose\nAdding yourself or someone else to the team page\nVideo to assist new hires with updating their blank team page placeholder\nUpdate manager or SDR role in Salesforce\nTo update a manager or Sales Development role in Salesforce, submit a\nsingle person access request\nor\nbulk access request\ndepending on the number of roles that need to be updated.\nCreate or update members of a Slack user group\nA user group is a group of members in a workspace who often need to be notified at once ‚Äî for example, @managers. To update who is in one of the Sales Development groups, submit a\nsingle person access request\nor\nbulk access request\ndepending on the number of people that need to be added. Fill out the requested info and delete any remaining info that isn‚Äôt needed. Under ‚ÄòAccount Creation‚Äô put Slack User Group: @ Name (i.e. @Managers). You can also use the bulk AR to request the creation of a user group and list the users who should be in it.\nAdd someone to the Sales Development Gmail alias\nSubmit a\nsingle person access request\nor\nbulk access request\ndepending on the number of people that need to be added. Fill out the appropriate info and delete any remaining info that isn‚Äôt needed. Under ‚ÄòAccount Creation‚Äô put the Sales Development email alias\nMake an edit to the handbook\nGuide for how to edit the handbook. *Note: all new hires must do this as part of their onboarding\nAdd a new page to the handbook\nThis GitLab Unfiltered video will walk you through how to create a new handbook page\nCreate a new job family\nFor each job at GitLab, the job family is the single source of truth for the expectations of that role. If you need information about when to create a new job family vs when to use an existing one watch\nthis video\nResolve failed pipeline when creating an MR\nQuick overview of how to go about identifying why a pipeline might be failing for a merge request to the handbook page\nSales Development Onboarding Job Specific Task Section\nThis task section will automatically be added to the general onboarding issue for new SDRs based on their role when hired.\nSales_Dev_fyi Channel Information\nPost Naming Convention\nPosts in #Sales_Dev_fyi should have a header that lets the Reps know who the post is for, what type of post it is, and the urgency of the post.\nIt is requested  when a post in the Sales Dev FYI channel pertains to you that you leave a üëÄ  emoji on the post to let management know that you read it\nFormat:\nExample:\nAudience\nAll of Sales Development\nAll SDRs\nAll BDRS\nSpecific Teams/Positions\nEx. AMER Large Land East\nType\nEnablement - (Mandatory, Optional)\nOperations -  (Process Change, Tools, Flows, Reports, System Changes/System Updates )\nNew Event/Initiative/Resource\nSurvey\nOrg Wide Announcement\nUrgency\nüö® Action Required - urgent, action required with a due date\nExample: Mandatory enablement launch\nüß† Need to Know - urgent, update directly impacts audiences‚Äô workflows/processes\nExample: Sales Dev process change\nüìä Feedback Requested - less urgent, action requested (with or without long-lead due date) but not required\nExample: Survey from Product Group\nüëÄ Review - less urgent, does not directly or materially impact audiences‚Äô workflows/processes\nExample: New customer story or new competitive resource\nExample Sales_Dev_fyi channel post titles\nField Marketing <> BDR Collaboration Process\nOur FM/BDR collaboration process is a method that we follow in the spirit of maximizing cross-functional collaboration. We have created an issue template for Field Marketers to populate, which in turns gets managed from the\nKanban Board here.\nThe premise of the\nissue template\nand board is to streamline communication between our teams. The issue template very clearly articulates all next steps required of this process while it also tries to leave space for us much AdHoc collaboration as required for each specific event.\nAs a BDR Director you will be tagged first in this issue as the primary DRI, while as a BDR Manager you will be involved in this issue on a case-by-case basis by your regional Director. All next steps of this process are clearly mentioned in the template for the issue so please follow each step in turn. The Sales Dev Operations team is also tagged and will be there to monitor progress and offer help if requested.\nStatus Related 6Sense Reports\nOn folder #5 in the\n6Sense segments list\n, you‚Äôll find the templates for the main three categories of accounts that we have. These templates are meant to be cloned and edited for your teams as per the guidelines below and will assist with coaching on 1:1s and team calls, as well as driving more predictable pipeline building.\nCurrently Actively Working Accounts Template\nThis report will cross-reference your team‚Äôs currently AWAs against 6Sense intent data, and will highlight the best ICP accounts currently on your team‚Äôs pipeline.\nCE/SFDC Accounts not in Actively Working Status\nThis report will highlight the best ICP accounts on our existing database, that are not actively being pursued by your team.\nGreenfield Accounts not in Actively Workin\nThis report will highlight the best ICP accounts that are NOt currently on our existing database. Please note that due to the complexity of our sales territories, there may be edits required on filter #8 (Address). There are multiple variants for City, Country or Region that can be used to accurately display each team‚Äôs territory. Please feel free to reach out to the Ops team to help you determine these and generate the best reports possible.\nSales Dev Territory and Role Reports\nSales Dev by Salesforce Profile and Role -\nSales Dev Ops profile is the only profile with the ability to help add a member to opps beyond stage 0 (we can‚Äôt add SDR/BDR to closed won opps however)\nCertain roles have certain permissions ie. Team Lead roles are able to transfer leads. Director level roles are able to help when account assignments are incorrect by updating account address and employee size information.\nRoles determine visibility based on the region (AMER, APAC, EMEA). Example: a BDR with EMEA in their role, will be able to see all accounts where the account territory owner has EMEA in their territory role name.\nSales Dev Territories by Team role/member associated with each territory -\nThis allows you to see what members/roles are associated with each territory. When you need a change in BDR assignment to a territory, please sharethe territory name with Sales Dev Ops, not the name of the account. Search for the account owner name and tell Sales Dev Ops which territory/territories require that BDR to be assigned.\nNew Account AE Reports\nUse\nthis report\nto figure out the territory name for the account you are working. Use command F to find the zip/state/country and figure out correct territory name.\nThen use\nthis report\nby plugging in the territory name to figure out who the correct AE is\nPlease make sure you have all the correct location information on the lead you converting to initially create this new account.\nOnboarding\nGitLab People Connect Team members will\ncreate the onboarding issue\nand start completing the onboarding tasks, no later than one week before the new team member joins. People Connect Team members require a minimum of 4 business days (with the new hire timezone as the basis) before the new hire‚Äôs start date to complete all onboarding tasks. This issue will be automatically assigned to you. As a manager, you will\nalso have tasks\nthat need to be completed prior to the new team member‚Äôs start date.\nThe general onboarding issue will also automatically add a\n‚ÄòSales Development‚Äô section\nunder ‚ÄòJob Specific Tasks‚Äô based on the role of the new SDR. Both you and your new hire will have tasks to complete in this section.\nWith the creation of this issue, an\naccess request (AR) will also be automatically created\nfor a new team member on their second day at GitLab. This AR lists the role based entitlements (pre-defined groups and system-level access that are granted automatically to team members depending on their role) your new hire will need.\n*See what is being auto provisioned on this AR\nhere\n.\nNew Hire‚Äôs First Day\nOn your new hire‚Äôs first day, the assigned People Connect Team member will\nschedule a welcome email\nto arrive at 7:30am (local time of the new team member) on their start date detailing how your new hire can access GitLab and begin their onboarding process.\nManager Onboarding Checklist\nPrior to Day 1\nComplete ‚ÄòManager‚Äô tasks on the onboarding issue *Note: there are tasks to complete prior to your new hire starting\nSchedule a welcome call at the start of your new hire‚Äôs first day to discuss:\nMain focus should be completing as much of your onboarding as possible.\nWhen you have available time feel free to move ahead as some onboarding task lists for the day won‚Äôt take you all day.\nHow to manage meeting invites in your inbox (there are a ton!)\nYou will receive numerous emails in their first two weeks asking you to register or activate your license to a specific tool we use, please go ahead and do all of this.\nWhat you can expect in regards to\nonboarding at GitLab as an SDR\nAfter new hire has started\nComplete remaining ‚ÄòManager‚Äô tasks on the onboarding issue\nSet up\n1:1s\nCareer Mobility Issues\nA career mobility issue should be opened 2 weeks before the transition date by the people connect team. If the aligned manager does not see that issue created 2 days before the scheduled transition date, the manager should reach out to the People Connect Team via the\n#people-connect Slack Channel\n.\nPeople connect opens mobility issue if any of the following are true:\nIf there is a change in department.  Ex. SDR/BDR moves to the SMB Sales Team\nSomeone changes from Individual Contributor to Manager\nSomeone changes from Individual Contributor to Team Lead\nSomeone Changes from Manager to Individual Contributor\nSomeone Changes Teams\nLeave of Absence\nIf an SDR will be out for a prolonged period of time, please follow the proper processes and complete the SDR leave checklist.\nParental Leave\nEmergency Situations\nUnpaid leave\nManager Sales Development Leave Checklist\nOffboarding\nThe full process for offboarding at GitLab differs based on whether it is voluntary or involuntary. These processes can be found on the\noffboarding handbook page\n.\nManager Offboarding Checklist\nThe people team will create an\noffboarding issue\n, complete all ‚ÄòManager‚Äô tasks on the issue. If you have any questions use the #managers #people-connect slack channels. You can also reach out to the assigned people ops team member on the issue.\nSales Dev Handover Issue\nWhen a teamember is either leaving GitLab, leaving the Sales Dev Org, or transferring to another BDR team the departing team‚Äôs manager must created a\nSales Dev Handover Issue\nSales Development Onboarding\nAs BDRs and SDRs, you work closely with the larger marketing org as well as the sales team. Due to this, your onboarding will encompass training on tools and processes related to not only your role but a blend of marketing and sales.\nThis learning experience involves virtual self-paced learning paths in the form of a general company-wide onboarding issue, a Sales Development specific issue, as well as a Google Classroom course to prep you for\nSales Quick Start (SQS)\n. SQS is a 3-day in-person immersive and hands-on workshop for all new hires in a sales development or sales role. In parallel, you will meet regularly with your manager, onboarding buddy and members of our sales development enablement team to chat through and dig a bit deeper into the topics within your onboarding.\nThe goal in all of this is to ensure that you feel confident and comfortable to hit the ground running at the start of your second month on the job when you will have a\nramped quota\n. Our hope is that along this journey you are not only gaining the tactical skills needed to complete your job, but that you form connections with colleagues, gain a strong understanding of our culture, and begin to develop industry knowledge.\nSales Development Onboarding Process\nThe People Team initiates a general GitLab onboarding issue for every new GitLab team member. On your first day, you will receive a welcome email with a link to your specific onboarding issue and steps to get started. You will also meet with your manager to discuss:\nAccess to your sales development specific issue\nPrioritizing your onboarding issues\nHow to manage calendar invites in your inbox on Day 1\nWithin 3 days of starting at GitLab, you will receive an email giving you access to\nCommand of the Message (CoM)\ne-learning materials. CoM is our value-driven conversation framework that will be covered during SQS.\nDuring your second week, the Sales Enablement Team will send you a calendar invite for the upcoming SQS as well as an email prompting you to log in to Google Classroom to begin working through the\nSales Quick Start learning path\n. Connect with your manager to arrange travel for SQS or if you are unable to attend the next session.\nWithin a week of attending SQS, you will receive access to the 13-week Command of the Message Fast Start program.\nIn your first few weeks you will receive access to your Sales Development Technical Development training. This is to be completed within your first 180 days and ties directly to SDR\nprogression\n.\nGraduating from Sales Development Onboarding\nComplete GitLab general onboarding issue\nComplete BDR/SDR specific onboarding issue\nComplete Google Classroom SQS prep work\nAttend the SQS workshop\nComplete the 13-week Command of the Message Fast Start program\nBDR/SDR Quota for Months 0-4 and Compensation\nFor BDRs and SDRs joining on the first Monday of the month\nMonth 1 = 25% quota\nMonth 2 = 50% quota\nMonth 3 = 75% quota\nMonth 4 = 100% quota\nFor BDRs and SDRs joining GitLab on the 15th or after of the month\nMonth 0 = no quota\nMonth 1 = 25% quota\nMonth 2 = 50% quota\nMonth 3 = 75% quota\nMonth 4 = 100% quota\nQuota and compensation will be assigned by the BDR/SDR Manager and discussed in the first 1:1. If a fully ramped BDR/SDR transfers BDR/SDR teams they will have a 50% ramp for month 1 and 100% quota for month 2.\nSales Development Onboarding Resources\nAdding yourself to the team page\nMaking changes/edits to the handbook\nQuestions about a handbook edit? Use the slack channels #handbook or #mr-buddies\nQuestions about onboarding? Drop them in the #new_team_members slack channel\nManager Responsibilities\nSDR New Hire 1:1 Template\nBDR New Hire 1:1 Template\nFrequently Asked Questions (FAQ) and Rules of Engagement (RoE)\nRules Of Engagement (RoE)\nIs the lead connecting to accounts from the Financial Services (AMER) or Telecommunications (EMEA) industries?\nNo:\nPlease proceed to the next step.\nYes:\nNormal RoE rules are superceded, and the lead is worked by the respective Telco/Finserv BDRs, not the SDR team\nIs the MQL from an Existing Account?\nNo:\nIt is worked by the SDR team\nYes:\nCheck the BDR Prospecting Status and Account Type\nIs the Account a customer?\nNo:\nMove on to the next step\nYes:\nCheck for Opportunities\nIs there an existing renewal opportunity?\nNo:\nMove on to the next step\nYes:\nAlign with the sales\nRoE for renewals\nand check whether the lead is involved in an upcoming renewal, check in with the Account Executive and your Regional Manager to determine what‚Äôs the best course of action for this person. SDRs/BDRs should not be credited on renewal opportunities as they focus on net-new business. If you believe there‚Äôs an exceptional case where SDR/BDR credit is warranted for a renewal, contact Sales Operations to discuss creating a separate opportunity or using the exceptions process.\nIs the Account in ‚ÄúActively Working‚Äù Status\nNo:\nIt is worked by the SDR team\nYes:\nCheck for Activity\nDoes the account have activity placed by the BDR in the last 30 days?\nYes:\nIt is worked by the BDR Assigned.\nNo:\nCheck to see if there are leads related to the account that have activity using\nthis report\nWhen you modify this report based on company name and email domain, do you see any activity in the last 30 days?\nYes:\nIt is worked by the BDR Assigned\nNo:\nIt is worked by the SDR Team.\nNext Steps:\nSDR chatters the BDR Assigned and lets them know you didn‚Äôt find activity and will go ahead and Flow the lead. FYI‚Äôs the BDR Manager. BDR Manager will work with the BDR to put the account into the correct BDR Prospecting status. If a BDR is able to relay information that was not picked up in the SDR‚Äôs research, the SDR should end the Flow if the prospect hasn‚Äôt engaged and change lead ownership to BDR so the BDR can reach out. If the SDR has engaged with the prospect, there will need to be a coordinated handoff worked out between SDR and BDR. Note: Only activity logged in SFDC will be recognized as activity.\nIs the Account in ‚ÄúQueued‚Äù Status?\nYes:\nIt is worked by the SDR team\nIs the Account in ‚ÄúWorked in FY‚Äù Status?\nYes:\nIt is worked by the SDR team\nIs the Account in ‚ÄúRestricted‚Äù Status?\nYes:\nIt should be routed to the BDR assigned. The BDR assigned will chatter the SAE about whether they‚Äôd like them to reach out or whether they would like to own that responsibility. The AE should respond within 48 hours.\nIf they reply back that the BDR can work, the BDR will continue with the prospect as a lead record and take action.\nIf they reply back that they want to be responsible, the BDR will convert the lead so that it becomes a contact.\nAfter determining an MQL is to be worked by the SDR team:\nIs the new MQL related to an existing MQL that is part of the same account?\nNo:\nThe MQL can be worked by the SDR that received it through the round robin\nYes:\nCheck the status of the existing MQL\nIs the existing MQL in Accepted or Qualifying status?\nNo:\nThe MQL can be worked by the SDR that received it through the round robin\nYes:\nCheck the activity on the existing MQL\nIs there activity in the last 30 days or a follow up task scheduled for the future?\nYes:\nThe MQL should be worked by the owner of the existing MQL\nNo:\nThe MQL can be worked by the SDR that received it through the round robin. If you are not sure, double-check with the related SDR.\nIs the lead automatically generated from UseGems as evident from the\nInitial Source\nfield?\nYes:\nIf it‚Äôs an SMB lead it‚Äôs worked by the inbound team, if it‚Äôs a MM/ENTG lead it‚Äôs passed to the BDR associated with the territory regardless of the rest of the RoE. BDR is expected to follow the outbound actively worked account process as per usual.\nIf the related SDR relays information that was not picked up in the new SDR‚Äôs research, the new SDR should end any active Groove Flow if the prospect hasn‚Äôt engaged and change lead ownership to the team member who has been engaged so they can reach out. If the new SDR has engaged with the prospect, there will need to be a coordinated handoff worked out between the new SDR and the related SDR. Note: Only activity logged in SFDC will be recognized as activity.\nRouting Workflow Chart\nFrequently Asked Questions (FAQ)\nGeneral Sales Dev Trouble-shooting\nI can‚Äôt see certain Groove collections!:\nYou potentially were added to the incorrect Sales Dev Team in Groove. Please reach out to Sales Dev Operations.\nMy version of Salesforce seems very basic‚Ä¶:\nMake sure you are using the Sales version of Salesforce. To check, please go to the top right corner of your Salesforce window and click the blue button with the drop down window. From there select ‚ÄúSales‚Äù.\nI have not received access to all of my tools and it has been a week.\nNotify your manager and have them comment on your Onboarding Role Entitlements Issue.\nI have uploaded more leads from ZoomInfo than what are showing up in my Salesforce ZoomInfo Lead View.\nThis most likely due to these leads aleady being in our Salesforce. The problem is that they are listed as a contact in Salesforce and will only appear in your ZoomInfo Contacts view rather than your Zoominfo Lead view.\nI do not know what this person did to score as an MQL.\nFirst check the last interesting moment description on Salesforce and then check the Scoring tab of the Marketo Sales Insight widget that is also on the Salesforce lead page. If no points were allocated to behavior and only to demographic type information please Slack the Marketing Ops group so they are aware that this lead did not take any new action.\nI received a personal data subject request by a prospect.\nOur MOPs team has set up a process to address any data subject requests for deletion or access to data. If you receive a request for deletion or access to data, please re-direct inquiries to the\nPersonal Data Subject Request\n.\nWhy are BDRs no longer the Account Owner in SFDC?\nBDRs are no longer listed as the account Owner in SFDC to improve Sales Dev and Sales visibility across all prospects/accounts (excluding PubSec). If you want to filter to see just your accounts, please use the ‚ÄòBDR Assigned‚Äô field.\nA prospect said they were going to buy through our website (known as a Web Direct). How can I tell if they did?\nSDRs get credit for opportunities where the SDR had meaningful two way communication with a prospect 60 days before they bought GitLab through our website. The best way to search for a web direct opportunity is to use\nthis report\n. First, set the date range to the time you think the prospect would have bought. Next, find the opportunity that is tied to your prospect‚Äôs account. Then follow the process to request SAO credit.\nNote: Sometimes someone else from your prospect‚Äôs company actually made the GitLab purchase, leading to the opportunity being related to them instead.\nHow do I request credit for a web direct opportunity?\nOn the opportunity record in Salesforce, compose a new Chatter message that includes the following:\nTag a member of the Operations Team (Ramona Elliott or Ed Bao) or the Director of Global Commercial Sales Development (Brian Tabbert).\nDo not tag Sales Support Yourself\nInclude a link to the record in Salesforce that shows your related two-way activity in the past 60 days. If your related activity is a phone call, you must have entered the details of the phone call into the Qualification Notes field on the lead record at the time of the call in order for it to be considered. Qualification Notes entered after the Web Direct opportunity has been created will not be considered for credit.\nExplain how you influenced their decision to purchase GitLab (helped with evaluation, uncovered a need, provided value, etc)\nThe Operations team and/or Director will review the information and decide whether SAO credit is warranted. If confirmed, they will Chatter Sales Support to add you to the opportunity. If rejected, they will communicate to you the reasoning for their decision.\nRoE Common Questions\nShould BDRs flag duplicate accounts?\nYes. However, they do not have the ability to merge it themselves so should chatter @Sales Support to do it.\nHow do we resolve a dispute over SAO credit?\nSDR and BDR first try to talk through a solution If no agreement: Managers will determine a solution If no agreement between the managers: Escalate to Senior Leadership Double credit nor double compensation will be given\nWho will be handling inquiries from an SDR/BDR standpoint?\nInquiries will go to an open queue. SDR‚Äôs will not work them. We want to give marketing time to progress these to MQLs.\nBDR‚Äôs can work leads in all statuses if they are related to their ‚ÄúActively working‚Äù accounts. Outreach to these leads would be part of their account strategy.\nWhat if a prospect comes back directly to the BDR much delayed, when the account is not marked as ‚ÄúActively Working‚Äù anymore, but resulting from personalized messaging?\nYes, if they email, reply via LI, or call the BDR directly, the BDR will need to check that the lead is in queue ownership. If so, they must move the account back to ‚ÄúActively Working‚Äù, so that the lead can be put into their ownership.\nWhy are my leads being reassigned to Inquiry Queue?\nMarketing Operations has a daily scheduled clean at 10:30 PM EST/EDT that update Status = Inquiry to Inquiry Queue. To prevent the reassignment, you‚Äôll want to update the leads from Inquiry to Accepted or add to an Groove Flow.\nWhat should BDRs do when a prospect or contact responds with a complince related question or objects to being contacted?\nImmediately reach out to the Privacy Team via #privacy-team-help and forward any email from the contact to\ndpo@gitlab.com\n.\nHow do I know if a lead is associated to a Partner Account and is being worked by a Partner?\nPartner leads will not be asigned to BDRs or SDRs as they will be assigned to the Partner Queue. To tell whether a lead is associated to a Partner Account, check their\nVartopia Partner Account\n- if it‚Äôs empty, you are may proceed with outreach.\nWhen a partner lead is assigned to Partner, when and how can we recall the lead?\nPartner lead will be recalled after a certain period of time if they are not accepted by Partners for joint marketing campaigns. They will be initially be recalled with a Recycle status, once they become MQL, they will be assigned to BDRs or SDRs. For more information on this process, see the\nVartopia handbook page\n.\nAnnouncement Common Questions\nThere are three deciding factors on what channel you should use for your announcement:\nUrgency: How crucial is it that the Sales Dev Org or team/teams see this announcement right now?\nWho: The entire Sales Dev Org, SDR/BDRs, or a specific SalesDev Team\nImpact: How much does it impact the audience‚Äôs ability to sell and create SAOs?\nAnnouncement Channels\nEmail Newsletter\nWeekly Team Meetings\nSales Dev FYI Slack Channel\nMonthly All Hands Meeting\nSpecific Team Slack Channels\nDecision Grid\nNot Time Sensitive or Important\nImportant and/or Time Sensitive\nImpacts Multiple Teams\nEmail Newsletter, Weekly Team Meeting\nSales Dev FYI Slack, All Hands Meeting, Weekly Team Meeting, Email Newsletter\nOnly Impacts a Select Team\nWeekly Team Meeting\nSales Dev FYI Slack, Team Channel Slack, Weekly Team Meeting\nQualifiers by Channel\nQualifier(s)\nSales Dev Global Slack\nShoutouts, Questions, Concerns, Share something that‚Äôs working, Fun for Multiple Teams, New Team Members\nSales Dev FYI Slack\nAnnouncements and Reminders that involve multiple teams or are of high importance\nEmail Newsletter\nImpacts Multiple Teams\nAll Hands Meeting\nImportant updates that affect multiple teams\nWeekly Team Meeting\nAny updates that affect that specific team\nTeam Slack Channels\nImportant or Time Sensitive, but only related to that specific team\nKPIs and SLAs\nRamping Periods and Lead Routing\nLevels\nDetails\nOnboarding\n- Timeframe: Month 0 - Parameters: SDR not on quota, leads are off in Traction, Qualified is off\nRamping 1\n- Timeframe: Month 1 - Parameters: SDR is on 25% quota, leads are set at 50% in Traction, Qualified is off\nRamping 2\n- Timeframe: Month 2 - Parameters: SDR is on 50% quota, leads are set at 100% in Traction, Qualified is off\nRamping 3\n- Timeframe: Month 3 - Parameters: SDR is on 75% quota, leads are set at 100% in Traction, SDR is added to Qualified\nExpert\n- Timeframe: Months 4+ - Parameters: SDR is on full quota, leads are set at 100% in Traction, Qualified is on\n- SDR is now able to create their own Groove Flows pending approval.\nManagers can update MQL round robin pools in traction. PLease watch these videos on\nmanaging your teams and mql round robin in traction\nand\nupdating a reps availibility in traction\nSales Development Credit Matrix\nProducts Considered\nWho\nOrder Type\nSegment\nOpportunities\nGitLab ultimate/premium, add ons\nFO, New Connected, Growth\nAll segments\n1\nGitLab ultimate/premium, add ons\nCommercial, Enterprise\n1\nGitLab ultimate/premium, add ons\nNew connected, Growth\nCommercial, Enterprise\n1\nAdditional seats in current customer department\neveryone\nGrowth\nAll segments\n1\nTier upgrade\neveryone\nGrowth\nAll segments\n1\nGitLab Duo\neveryone\nGrowth\nAll segments\n1\nAgile planning\neveryone\nGrowth\nAll segments\n1\nStorage, Compute\neveryone\nGrowth\nAll segments\n0\nProfessional services\neveryone\nAll motions\nAll segments\n0\nIf an account only has bought CI minutes, the SDR/BDR will still get credit for a first order Opportunity if the account purchases Premium or Ultimate licenses.\nSales Development Org Compensation Breakdown\nQuota Components Depending on Sales Segment\nSales Accepted Opportunities (SAOs)\npipeline component\n2-way communication must be documented on the Contact in the Opportunity to receive credit. Opportunities missing this documentation will not be considered for compensation and will not retire quota.\nFor BDRs and SDRs who have SAO/ARR goals, compensation is based on the SAO attainment. ARR attainment is a qualifier for accelerator payments. Our aim is to land net new logos and expand to new customer business units, SAOs being our quantity metric and ARR our quality metric. Our mission is to create good qualified pipeline for the company. SAO credit is given for licenses and not for PS Opportunities (for training, for example) nor pipeline minutes.\nTeam Member OTE (SDRs)\n70% Base Pay\n30% Variable Pay:\n- 100% Individual SAO Quota:\n- No floor or ceiling\n- Accelerator x 1.5 after meeting 100% of target\nTeam Member OTE (MM and ENT BDRs)\n70% Base Pay\n30% Variable Pay:\n- 70% Stage 1 nARR Pipe:\n- No floor or ceiling\n- Accelerator x 1.5 after meeting 100% of target\n- 2x on all Focus Account new logo opp nARR (1. New - First Order and 2. New - Connected order types only)\n- 30% Stage 3 nARR Pipe:\n- 75% floor\n- 200% ceiling\n- Accelerator x 1.25 from 100% to 200%\n- Accelerator x 0.0 after meeting 200% of target\n- 2x on all Focus Account new logo opp nARR (1. New - First Order and 2. New - Connected order types only)\nResults\n- ARR won from opportunities BDR sources\nActivity\n- Number of opportunities created\n- Number of calls made\n- Number of personalized emails sent\n- LinkedIn InMails\n- Qualified Engagements\n- Number of leads accepted and worked\nDaily outbound metrics\n- We aim for 50 touchpoints per day using the various methods above. This is a broad expectation and may vary per team given the segment, functionality, and strategy of the team manager.\nSales Dev Career Path\nPosition\nPromotion Criteria\nSDR to SDR Team Lead (SDR TL)\n- Minimum 8 months in the SDR Role (incl. ramp)\n- Hitting quota cumulatively over the last fully-ramped 5 months\n- Willingness to coach and up-level peers\n- Endorsement from SDR management\n- Demonstration of GitLab‚Äôs Values\n- Completion of SDR Q1-Q3 Tanuki Techs\nNOTE: Not every SDR will have the opportunity to become a team lead. Interviews will take place when a spot is available. A successful applicant must make a 6-month minimum commitment to the Team Lead Role before pursuing another promotion.\nSDR to BDR\n- Minimum 12 months in the SDR Role (incl. ramp)\n- Hitting quota cumulatively over the last 2 fully-ramped financial quarters (neither quarter below 80% attainment)\n- Endorsement from current SDR manager\n- Demonstration of GitLab‚Äôs Values\n- Completion of SDR Q1-Q4 Tanuki Techs\nNOTE: All promotions require a formal application + interview. Performance and adherence to values guarantee an interview, but candidates must demonstrate suitability during the process. Factors such as interview performance, headcount, and language requirements can influence promotion timelines.\nBDR to Senior BDR (hired before FY26)\n- Minimum 6 months in the BDR Role (incl. ramp)\n- Hitting quota cumulatively over the last 6 months (fully-ramped months must hit 100% cumulatively)\n- Endorsement from BDR management\n- Demonstration of GitLab‚Äôs Values\n- Completion of BDR Q1-Q2 Tanuki Techs\nBDR to Senior BDR (hired in FY26)\n- Minimum 9 months in the BDR Role (incl. ramp)\n- Hitting quota cumulatively over the last fully-ramped 6 months\n- Endorsement from BDR management\n- Demonstration of GitLab‚Äôs Values\n- Completion of BDR Q1-Q3 Tanuki Techs\nBDR to BDR Team Lead\n- Minimum 8 months in the BDR Role (incl. ramp)\n- Hitting quota cumulatively over the last fully-ramped 5 months\n- Willingness to coach and up-level peers\n- Endorsement from BDR management\n- Demonstration of GitLab‚Äôs Values\n- Completion of BDR Q1-Q3 Tanuki Techs\nNOTE: Not every BDR will have the opportunity to become a team lead. Interviews will take place when a spot is available. A successful applicant must make a 6-month minimum commitment to the Team Lead Role before pursuing another promotion.\nBDR and BDR Team Lead to Next Step\n- Minimum 12 months in the BDR Role (incl. ramp)\n- Hitting quota cumulatively over the last 2 fully-ramped financial quarters (neither quarter below 80% attainment)\n- Endorsement from BDR management\n- Completion of BDR Q1-Q4 Tanuki Techs\nNOTE: All promotions require a formal application + interview. Performance and adherence to values guarantee an interview, but candidates must demonstrate suitability during the process. Factors such as interview performance, headcount, and language requirements can influence promotion timelines.\nSales Dev Performance Management Process\nThe Sales Development organization believes in getting the job done (consistently delivering results) and doing it right (meeting KPI/SLAs, adhering to\nOur Three Pillars\n, and being good partners both internally and externally). Our performance management process is deeply rooted in this philosophy. As we are building high-performing teams, it is important to understand that while we expect results, we also have expectations surrounding how we get to those results. Therefore, a performance management process will be initiated if a team member is not meeting their performance targets and/or is not adhering to their KPIs/SLAs. The idea behind our framework is to address issues promptly to ensure the long-lasting success of all team members.\nThe sections below will provide more details as to the performance management process on quota attainment as well as\nOur Three Pillars\nand KPIs/SLAs for inbound leads and outbound account management. While regular coaching is expected in weekly 1:1s, informal performance management will be initiated if a ramped team member has two consecutive months below 75-80%* attainment (SAOs, Stage 1 XDR Net ARR or Stage 3 Net ARR).\n*Range due to varied quotas\nSAOs and Stage 1 XDR Net ARR\nOnce the team member is informed, expectations will be:\nMonth 1: 75-80% attainment + adherence to\nOur Three Pillars\nMonth 2: 75-90% attainment + adherence to\nOur Three Pillars\nMonth 3 and beyond: 100% attainment + adherence to\nOur Three Pillars\nShould the team member fall short of the targets above, a formal warning will be issued.\nAfter the formal warning is issued if the team member falls short of targets again, additional disciplinary action could be taken up to and including termination.\nStage 3 Net ARR\nAs a business we understand that Stage 3 Net ARR is a metric that can take time to influence. We are viewing Stage 3 Net ARR attainment as an indicator of healthy pipeline generation. Two consecutive months below monthly quota attainment suggests potential issues. Stage 3 Net ARR is a direct consequence of Stage 1 Net ARR. Therefore, performance management will focus on what can be immediately influenced by a team member: Stage 1 Net ARR (not Stage 1 XDR Net ARR stamped amounts, but real opportunity value: Stage 1 Net ARR).\nThe process, however, will\nstay the same: once the team member is informed, expectations will be:\nMonth 1: 80% attainment + adherence to\nOur Three Pillars\nMonth 2: 90% attainment + adherence to\nOur Three Pillars\nMonth 3 and beyond: 100% attainment + adherence to\nOur Three Pillars\nEffective in FY26, Net ARR generated from a Focus Account New Logo (First Order or New Connected) will be counted twice toward this attainment.\nShould the team member fall short of the targets above, a formal warning will be issued.\nAfter a  formal warning is issued if the team member falls short of targets again, additional disciplinary action could be taken up to and including termination.\nOur Three Pillars\nTask\nDetails\n1. Uphold Daily Activity Metrics\n- Adhere to the two hour MQL SLA\n- Complete a minimum of 50 omni-channel activities per day (calls should total 200 per week, made during\nGolden Call\nhours and LinkedIn/email messages to be personalised)\n- Maintain an minimum of 2 discovery meetings weekly\n- Work lead records within Salesforce by leveraging relevant Flows tags in Groove.\n- Use Business Intelligence platforms like ZoomInfo or LinkedIn to verify the validity of inbound lead datapoints. Take appropriate actions to clean up and assure accuracy and consistency of SFDC/Groove data.\n- Maintain SFDC data integrity by following the outbound workflow in researching and prospecting accounts.\n- Flow steps to be actioned within the same day of them being due. Move steps to a further date only because of national holidays affecting outreach (i.e., Christmas day).\n- Maintain cross-functional relationships in terms of outbound account planning. Attend each initial qualifying meeting (IQM) with the AE/SAE you work with. Document accurate up-to-date notes in SFDC.\n2. Displaying Business and Sales Acumen\n- Display business acumen and sales skills in personalizing inbound/outbound leads, following our CoM email writing principles.\n- Display business acumen and sales skills in preparing for cold-calls, following our CoM cold-calling principles.\n- Display business acumen and sales skills in preparing for scheduled discovery calls, following our CoM sales training.\n- Outbound accounts to be added in a weekly cadence, according to the expectations set within each regional team, in terms of outbound cycle (monthly, weekly), and volume of accounts.\n3. Maintain Cross-functional Relationships\n- Collaborate with the Sales team in terms of account planning.\n- Collaborate with the Field Marketing team in terms of event outreach.\nInbound Lead Management\nThe below apply for all inbound-related leads for both the SDR and BDR teams. Please note that, other than\nSFDC lead views\n, inbound MQLs will also be flagged to you in a dedicated Slack alert channel. The official tracking of SLA times is done on SFDC, but you will also find an ‚ÄòAcknowledge‚Äô button on the Slack notification that you can press so that it helps with daily check-ins with your Manager.\nMetric\nDescription\nResponse Time for leads\n- Net New MQLs: 2 work hours\n- Inbound Responses: 8 work hours\nLow vs High Touch Groove Flow Usage\n- Over 70% of inbound leads enrolled to High Touch Flows.\nInbound tasks past due per day\n- No more than 10% of tasks pending per day.\n- 90% of tasks to be properly completed, not skipped.\nTwo way conversations\n- 50 per week.\nOutbound Account Management\nIn addition to the above, BDR team members are expected to:\nMetric\nDescription\nVolume of Actively Working Accounts per Quarter\n- Enterprise:\n- 75 AWA‚Äôd accounts per BDR per Quarter, measured per Actively Working Start Date.\n- 65 6QAd accounts per Quarter, per BDR.\n- Mid-Market:\n- 125 AWA‚Äôd accounts per BDR per Quarter, measured per Actively Working Start Date.\n- 25 6QA‚Äôd accounts per Quarter, per BDR.\nResearch Quality\n>80% usage of Intent tools on AWA‚Äôd accounts, with high propensity to purchase indicators showed.\nVolume of Prospects per Account\n5-10 prospects added to Groove Flow per account, whose titles and personas match our ICPs.\n6QA Account Review\nAll automatically 6QA‚Äôd accounts to be reviewed, and either accepted or rejected, within 48 hours.\nPTO and Flexible Working\nSales Development Organization Time Off\nIn accordance with the\nTime Off Policy\n, you need give your manager a heads up early of your intended time off so that they can help arrange cover for your tasks, if necessary.\nWe want to help our team members being able to fully unplug from work during their PTO, while not having to worry about their workload or target attainment. Based on this, we have created this PTO Territory Planning Issue that you can use to strategize your work and be aligned to the GitLab value of being a\nManager of One.\nTo log a PTO Territory Planning request, please go to the Issue list on the SDR GitLab project\nhere\nand choose\nPTO_Coverage_Template\nfrom the Description drop-down list. All of these requests are then managed through the board here. and all next steps and guidelines are on the issue description.\nFlexible working\nAt GitLab we have flexible working hours. This means that you can organize your working day as you like and are not expected to arrive and leave at a set time every day, but we do expect MQL‚Äôs to be followed up within 1 hour (during business hours) so communication with your manager will be necessary if you plan to be out for an extended period of time. Managers will provide direction on the routing of leads during that time.\nWith a prospect-facing role in Sales Development, do keep in mind when you are calling and emailing prospects:\nThe best times to call are early and late in the business day, so these may be best blocked for this activity.\nGroove allows you to schedule emails at set times. For outbound prospecting, the most effective emails are those that come in the early morning and early evening, so you can take advantage of this feature. On the other hand, inbound MQL‚Äôs must be handled regularly throughout your day as they come in.\nLunchtimes are good for outreach as most prospects have meeting blocks for three hours in the morning and then two hours mid-afternoon.\nThe above blocks you can use for account research and planning, customer meetings, or meetings with your sales reps, manager, peers, and teams.\nAlthough you are not expected to start work and end work at the same time every day, please do keep in mind the normal business hours of your prospects, and make sure to schedule your own working hours to ensure you maximize opportunities.\nIn short, working at GitLab means that if you start the day early you can take a long lunch break to hit the gym or go grocery shopping in the middle of the day when it‚Äôs quiet, yet you can still do a full day‚Äôs work around that and don‚Äôt need to be accountable all the time, as long as you are available to call prospects and be available for prospect meetings during normal working hours for your region/territory.\nTanuki Tech\nTanuki Tech (short for Tanuki Instutite of Technology) is the world class sales/technology bootcamp that we are provide for the sales development organization. Use this page to walk through the courses and examinations that you'll be expected to complete as part of your tenure in our organisation.\nLast modified July 9, 2025:\nUpdate 6QA guidance (\n6b903c81\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 26797}
{"doc_id": "82dc8dc74588e174", "url": "https://handbook.gitlab.com/handbook/people-group/team-member-relations", "title": "Team Member Relations at GitLab | The GitLab Handbook", "text": "The Handbook\nPeople Group\nTeam Member Relations at GitLab\nThe Team Member Relations team at GitLab ensures that team members feel safe and have a point of contact for all confidential discussions.\nTeam Member Relations\nThe Team Member Relations team is responsible for facilitiating and resolving all people matter related team member issues. They will also assist in creating and informing team members of policies that are fair and consistent for all GitLab team members. As part of the People group the Team Member Relations team works with both the manager and team member in an intermediary function to understand and help resolve workplace issues. The Team Member Relations team can also help coach and advise managers and team members on policies and processes.\nTeam member relation issues can range from simple coaching questions to serious code of conduct violations. We classify these different level of team member cases by tiers. Example of issues/cases by tier level:\nTier 1\nCoaching support\nPerformance Management\nUnprofessional behavior\nRelocation concerns\nAbsenteeism\nTier 2\nJob abandonment\nManager/team member conflict resolution\nTeam member/team member conflict resolution\nTier 3\nEthic Violations\nHarrassment\nRetaliation\nAny Code of Conduct Violation\nAll Tier 3 cases will be managed together with Legal and the TMR team.\nDiscussing Private Concerns\nTeam members who would like to discuss a private matter should send an email requesting support from our Team Member Relations team to\nteammemberrelations@gitlab.com\n.  Please include the following in your email:\nSubject Line should be  ‚ÄúNew Request for assistance‚Äù\nName of Team member requesting support (Name of the person sending the email)\nName of Team member(s) involved in the matter\nTeam members location (example Orlando, Florida or Berlin, Germany) for managers who are requesting support regarding a team member issue on their team please use the location of the team member and not your location.\nTier level as listed above\nJob title of team member requesting support\nDivision\nDepartment\nBrief description of type support needed. Example - I am looking for guidance for managing a team members‚Äô performance.\nThe Team Member Relations team will reach out within 24 hours from when the request was sent via email during the business week.\nGitLab also offers a\nHarassment Complaint Form\nthat any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at\nteammemberrelations@gitlab.com\n.\nTeam members and the TMR should both respond to questions or queries via slack or email within 24 hours to continue making progress on the issue and get to a timely resolution.\nFor urgent requests that need immediate attention please ask for urgent assistance by sending a message marked URGENT to\nteammemberrelations@gitlab.com\n. If you do not receive support in a timely manner, below is the escalation path:\nVice President of People Operations, Technology and Analytics\nChief People Officer\nAn urgent request would be something that needs immediate attention like team members safety or a code of conduct violation.\nRaising Communication Concerns\nWe ask all GitLab team members to follow our\nEffective & Responsible Communication Guidelines\n.\nThese guidelines highlight the expectation that everyone assumes positive intent, exercises kindness, and expresses your thoughts responsibly and inclusively.\nIf there is an issue to raise regarding someone‚Äôs communication or conduct, team members should raise their concern with the manager of the individual involved or, if preferred, email Team Member Relations (\nteammemberrelations@gitlab.com\n) directly.\nManagers can email Team Member Relations (\nteammemberrelations@gitlab.com\n) to express concerns with a team member‚Äôs communication if they believe intervention is needed.\nIf a team member is in violation of the effective & responsible communication guidelines, the Team Member Relations team will reach out to the manager and disciplinary action could be taken.\nTeam Member Relations Philosophy\nGitLab believes in preserving the dignity of each team member and expects everyone to treat others with fairness, respect, and transparency.  We encourage mutual responsibility for constructive work relationships and communication, information sharing, problem solving and a safe neutral process through which differences can be resolved.  Direct and honest communication is strongly encouraged between all team members regardless of title or level and per our values we\ndo not pull rank\n. Such communication is likely to enhance understanding, avoid misunderstandings and create rapid solutions to concerns.\nWe have built this philosophy to focus on these 4 pillars in line with our values:\nCollaboration\nDiversity, Inclusion & Belonging\nResults\nTransparency\nCommitments\nWe are committed to providing a safe environment for all GitLab team members to achieve maximum career development and goal achievement.\nWe are committed to treating each team member as an individual and providing a workplace where communication is transparent and where problems can be discussed and resolved in a mutually respectful environment. To foster this environment we take into account individual team member circumstances and the individual team member while balancing the needs of the business.\nTeam Member Relations Function\nTo support our team members, GitLab has established a\nTeam member relations group\nto assist team members and their leaders with resolving work related issues.  The Team Member Relations team (TMR) respects the privacy of all team members and treats discussions with the fullest degree of confidentiality possible.  We have incorporated our\nValues\nand the\nCode of Business Conduct and Ethics\ninto our team member relations practices and philosophy.  We believe that by communicating with each other directly and transparently, we can continue to resolve any difficulties that may arise and continue to make GitLab a great place to work.\nFor Team Members\nThe team member relations function provides all GitLab team members an avenue to express workplace concerns and to resolve conflicts in a safe and unbiased forum.\nTeam members can express themselves openly and freely without fear of retaliation.\nProfessional behavior and conduct is expected from all team members.  As a reminder use judgement in your conversations with other team members.  We encourage all team members to\nprovide direct feedback\nto each other. The team member relations group is here to listen to team members concerns in an unbiased, open and professional manner.\nTeam members can discuss\nreasonable accommodations\nor any related questions.\nFor Managers\nTeam member relations provides guidance to managers in their efforts to improve team member performance or to correct unacceptable personal behaviors.  Managers are responsible for setting priorities and motivating their team members.  They are also responsible for ensuring the care of their team members as well as meeting GitLab‚Äôs goals.  These two things can be done simultaneously.  As managers it is considered one of your primary responsibilities to understand GitLab‚Äôs\nCode of Business Conduct and Ethics\n,\nValues\nand\nPeople Group\npolicies and processes.  People managers are responsible for upholding compliance on the their teams and considering the best interest of the business.  If a manager is made aware of a situation that potentially runs afoul of the Code of Conduct, Values and People Group processes or policy they should immediately reach out to the\nteam member relations specialist\n.  If uncertain about a specific policy or procedure, the manager should reach out to a leader, their\naligned PBP\nor the Team member relation specialist for further clarification.  When in doubt, it is always best to ask.\nTeam Member Performance Improvement Management Guiding Principles\nA critical responsibility within the role of a GitLab leader is to spend the time required to truly understand the causes of the performance issue and how to address them properly.  GitLab managers will determine if the performance concerns are skill-based or behavior (will)-based to determine next steps.  Below are the definitions of both skill- and will-based performance concerns.\nSkill-based performance management\nTeam member lacks the technical knowledge or capability to be successful in the role\nTeam member is unable to prioritize work effectively\nTeam member lacks the understanding on how to complete tasks\nTeam member exhibits difficulties working with team members and/or communicating effectively\nSometimes skill-based issues appear as a will-based or behavior concern.  However, after delving into the cause for the behavior, the leader may find a skill-based gap causing the disruptive behavior.  The team member may be embarrassed or concerned about their ineffectiveness or ability to perform their role and may react in a way that is inappropriate.\nThe following are a few recommendations for a manager to address skill-based performance issues:\nProvide the team member with additional training\nProvide the team member with a mentor or buddy\nProvide the team member with clear directions and examples\nIf the team member is still not making progress after the manager has provided additional resources or coaching please review the\nunderperformance page in the handbook\nfor next steps.\nWill-based performance management\nWill-based issues are described as undesirable behavior that impedes the success of the Team Member, the Team, and/or GitLab as a whole.  The leader may hear about the behaviors from others or experience the undesirable behavior directly.   It is important that the manager address the concerns right away.  While ‚Äúwill‚Äù issues can be disruptive, there are different levels of severity which must be considered when determining next steps.  The tiers below are examples and are not exhaustive, and should be used for comparision purposes to determine the impact to GitLab.\nTier 2\n- Misconduct resulting in limited material risk to GitLab\nViolations of the company code of conduct (excluding harassment and discrimination)\nTeam member uses inappropriate language that others may find offensive\nTeam members behavior creates a negative or toxic team environment\nBehavior continues even after coaching from manager\nFor Tier 2 level concerns, the Manager should reach out and discuss with the team member relations specialist immediately.\nTier 1\n- Gross misconduct or a violation with serious implications to GitLab.\nViolates a law/regulation (theft, fraud, drug use, etc.)\nPoses a serious operational, reputational, or financial risk to GitLab\nPoses significant health or safety risks\nHarassment\nSevere and/or pervasive language or conduct that could be perceived as discriminatory or creating a hostile work environment\nSince situations differ, managers should immediately reach out to a team member relations specialist for guidance before taking any action.  If unable to contact the team member relations specialist directly, please follow the\nescalation path listed in the handbook\nPlease review the\nunderperformance\npage in the handbook for further information regarding managing team member performance.\nLast modified February 7, 2025:\nReplace ref links with regular links (\n9fe84978\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1741}
{"doc_id": "bc2cd3a897306544", "url": "https://handbook.gitlab.com/handbook/legal/product", "title": "Product and Intellectual Property | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nProduct and Intellectual Property\nLegal Product and IP team page\nMarketing\nVisit the\nMarketing Guide: Collaborating with GitLab Legal\n, which covers amongst other things\nPromotional Games\nand\nPublicity Waiver and Release\nIf the request is not addressed in the Marketing Guide, open a new\nGeneral Legal Issue\n.\nFor all materials requiring legal review, refer to the\nMaterials Legal Review Process\n.\nPatents\nVisit the\nPatent\npage for information on GitLab‚Äôs Patents and Patent Program, including how to participate.\nVisit the\nGuidelines for reviewing third-party patents\n(accessible to team members only).\nTrademark\nVisit\nBrand Resources\nand\nTrademark Guidelines\nfor information about using GitLab‚Äôs trademark.\nUse of Third-party Trademarks in GitLab\nTrademarks at GitLab\nCleanroom development process\nVisit this guidance (accessible to team members only) for further information on the\nCleanroom Development Process\n.\nUsing open source software\nThe guidance for using open source software has been updated to enable team members to comprehensively determine which open source license types are pre-approved (deemed acceptable) for use, and which require prior review by the Legal & Corporate Affairs team (as their use may be unacceptable).\nTeam members wishing to use open source software should now refer to the comprehensive\nBlue Oak Council\nlicense list, and proceed, as follows:\nPre-approved (Acceptable)\n: Software associated with license types rated\nGold\n,\nSilver\n, and\nBronze\nand all licenses on the Exceptions list are pre-approved for use by the Legal & Corporate Affairs team.\nTeam members can proceed without seeking legal input.\nApproval required (Potentially Acceptable or Unacceptable)\n: Aside from the Exception list, Software associated with a\nLead\nrated license type or software associated with a license not included on the Blue Oak Council list requires review before use by the Legal & Corporate Affairs team.\nTeam members can request a review by opening a\nlegal issue\n.\nInclude the details of how the software will be used, whether or not it will be modified, and how it will be distributed (if at all) in the issue description.\nException list (Acceptable)\n:\nTeam members must ensure that we\ncomply with all requirements and restrictions associated with the applicable license\n(these are typically defined in the body text of the license).\nFor example, a common requirement is to include the original copyright and license notice in all copies of the distributed software\nDependencies which are only used in development or test environments are exempt from open source license requirements as they‚Äôre not distributed.\nHelpful resources\nGitLab Licensing and Compatibility\n.\nFor general information, see:\nGoogle Open Source Program\nand\nLicenses\nFor requests related to use of third-party software or other questions related to the use of open source licenses, open a\nlegal issue\nand include any information relevant to the request.\nContributor license agreements\nIf you‚Äôre contributing to an open source project on behalf of GitLab, you may be required to enter into a CLA. In accordance with the\nAuthorization Matrix Policy\n, legal approval is required to you enter into a CLA on behalf of GitLab.\nIf you have the choice between a Corporate and Individual CLAs, opt for the Corporate CLA.\nFollow these steps to obtain legal approval and enter into a CLA on behalf of GitLab:\nCheck the\nThird-party CLA Tracker\nto verify whether there is already a CLA in place in respect of the project you want to contribute to.\nIf there‚Äôs no CLA already in place listed in the\nThird-party CLA Tracker\n, open a new\nlegal issue\n.\nApply the\nlabel to the issue.\nInclude details of the project you are contributing to, and add the CLA for approval, either as an attachment or a hyperlink, to the issue.\nLegal will review the CLA, requesting additional information where necessary, and approve.\nIf an email address and/or account is required to enter into the CLA, the\ncla_managers\n[at]\ngitlab.com\nemail address should be used. Access to this Google Group can be requested and granted via the issue if required.\nOnce Legal have confirmed approval of the CLA in the issue, you can proceed to enter into the CLA (using the\ncla_managers\n[at]\ngitlab.com\nemail if one is required) and begin contributing to the project.\nContributions to a third-party project on behalf of GitLab should be made using your @gitlab.com email address. Post any questions to the\n#legal\nSlack channel.\nAlternatively, if looking for information on contributing to GitLab see\nhere\n.\nAuthorship Criteria\nGitLab has established guidance to aid with determining authorship of academic papers developed at GitLab. This guidance is accessible to team members only\nhere\nGPL Cooperation Commitment\nThe purpose behind this initiative is to ensure consistent and fair licensing enforcement for breaches of certain licensing terms, in order to support the continued growth of the open source community. Further information on this initiative is available\nhere\n.\nGitLab‚Äôs GPL Cooperation Commitment follows:\nBefore filing or continuing to prosecute any legal proceeding or claim (other than a Defensive Action) arising from termination of a Covered License, GitLab commits to extend to the person or entity (‚Äúyou‚Äù) accused of violating the Covered License the following provisions regarding cure and reinstatement, taken from GPL version 3. As used here, the term ‚Äôthis License‚Äô refers to the specific Covered License being enforced.\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nGitLab intends this Commitment to be irrevocable, and binding and enforceable against GitLab and assignees of or successors to GitLab‚Äôs copyrights.\nDefinitions\n‚ÄòCovered License‚Äô means the GNU General Public License, version 2 (GPLv2), the GNU Lesser General Public License, version 2.1 (LGPLv2.1), or the GNU Library General Public License, version 2 (LGPLv2), all as published by the Free Software Foundation.\n‚ÄòDefensive Action‚Äô means a legal proceeding or claim that GitLab brings against you in response to a prior proceeding or claim initiated by you or your affiliate.\nGitLab means GitLab Inc. and its affiliates and subsidiaries.\nLast modified April 23, 2025:\nUpdating product and IP handbook page (\n3f452f20\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1114}
{"doc_id": "4b7ac30b9f51882b", "url": "https://handbook.gitlab.com/handbook/people-group/anti-harassment", "title": "Anti-Harassment Policy | The GitLab Handbook", "text": "The Handbook\nPeople Group\nAnti-Harassment Policy\nEveryone at GitLab has a responsibility to prevent and stop harassment. Learn more about our Anti-harassment policy.\nThis is a Secure Document\nPer the stated\nRoles & Responsibilities\n, changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged.\nIntroduction\nEveryone at GitLab has a responsibility to prevent and stop harassment. Working remotely means that the majority of our interactions are by video call or written communication, such as email or shared documents. The exceptions to this are team summits, attending conferences together, and local team meetups. No matter the method of communication, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Team member behavior is not limited to internal interactions with each other.  Our Anti-harassment policy applies to GitLab team members interaction with customers, vendors and community members. Should you become aware of or witness any form of harassment or behavior that violates this policy or our\ncompany values\n, please report the incident directly to the Chief People Officer,\nTeam Member Relations\n, or a\nPeople Business Partner\nimmediately for thorough investigation.\nPerspective\nGitLab is a global organization and our team is distributed all over the world, so we strive to ensure our team is fully aligned with GitLab‚Äôs no tolerance harassment policy despite their location. We want everyone to feel confident and comfortable communicating concerns. GitLab respects, appreciates, understands and supports every aspect of diversity. We aim to continuously foster a globally aware team.\nScope\nThis policy applies to all team members of GitLab, whether contractor or employee, in all locations. There are local labor laws in every country and in the case of the United States, state laws, that must be followed when handling, reporting and investigating incidents of harassment. The People Business Partner team and legal counsel, if required, in each of those countries will be called upon to ensure compliance and the appropriate legal processes and procedures are followed. Specific country requirements for employees (subject to changes in employment law) are listed in the\nCountry & US State-Specific Requirements\nsection and will be updated regularly. All individual contributors, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit.\nRoles and Responsibilities\nRole\nResponsibility\nGitLab Team Members\nResponsible for following the requirements in these policies\nPeople Ops\nResponsible for implementing and executing these policies\nLegal & People Ops Management (Code Owners)\nResponsible for approving significant changes and exceptions to these policies\nEthics & Compliance, Legal Ops\nResponsible for administrating related training\nTypes of Harassment\nThe following are considered forms of harassment and will not be tolerated by GitLab:\nSexual Harassment\nSexual harassment is considered unwelcome conduct of a sexual nature that is sufficiently persistent or offensive enough to interfere with the receiver‚Äôs job performance or create an intimidating, hostile or offensive working environment.\nSexual harassment encompasses a wide range of conduct. Examples of misconduct include, but may not be limited to, the following actions:\nPhysical assaults or the attempt to commit an assault of a sexual nature. This physical conduct can include touching, pinching, patting, grabbing, brushing against or poking another team member‚Äôs body.\nUnwelcome sexual advances, propositions or other sexual comments, such as sexually oriented gestures, noises, remarks, jokes, or comments about a person‚Äôs sexuality or sexual experience.\nPreferential treatment or promises of preferential treatment to a team member for submitting to sexual conduct, including soliciting or attempting to solicit any team member to engage in sexual activity for compensation or reward.\nSubjecting, or threats of subjecting a team member to unwelcome sexual attention or conduct or intentionally making performance of the team member‚Äôs role more difficult because of that team member‚Äôs sex.\nCreating displays, communications, or publications that include content of a sexually offensive nature.\nPurposely misgendering people, such as consistently referring to someone as ‚Äòhe‚Äô after repeated requests to use ‚Äòshe‚Äô or vice versa.\nSexual harassment is unlawful and is considered a form of team member misconduct. Sanctions will be enforced against individuals engaging in sexual harassment and against supervisory and managerial personnel who knowingly allow such behavior to continue. Any retaliation against an individual who complains of sexual harassment or who testifies or assists in any proceeding under the law is unlawful.\nDiscrimination\nHaving a diverse workforce, made up of team members who bring a wide variety of skills, abilities, experiences and perspectives, is essential to our success. We are committed to the principles of equal opportunity, inclusion, and respect. All employment-related decisions must be based on company needs, job requirements, and individual qualifications. Always take full advantage of what our team members have to offer; listen and be inclusive.\nWe do not tolerate discrimination against anyone, including team members, customers, business partners, or other stakeholders. Any form of discrimination towards an individual is strictly prohibited, including:\nOn the basis of race (includes national origin or ancestry, ethnicity, national origin or ethnic characteristics; interracial marriage or association; traits historically associated with race, including hair texture, protective hairstyles, and any other national origin or ancestry ‚Äúas specified by a complainant in a complaint‚Äù), color, religion (including all aspects of religious observance and practice, as well as belief or lack of religious belief), sex (including pregnancy, childbirth and related medical conditions; breastfeeding; sex assigned at birth; gender identity or gender expression; affectional or sexual orientation, including heterosexuality, homosexuality, bisexuality, and asexuality; and differences of sex development, variations of sex characteristics, or other intersex characteristics), age, disability, HIV status, marital status, past or present military service, life expectancy, or any other status protected by the laws or regulations in the locations where we operate.\nWe comply with laws regarding employment of immigrants and non-citizens and provide equal employment opportunity to everyone who is legally authorized to work in the applicable country.\nWe provide\nreasonable accommodations\nto individuals with disabilities and remove any artificial barriers to success.\nReport suspected discrimination right away and never retaliate against anyone who raises a good faith belief that unlawful discrimination has occurred.\nIf you believe you have been discriminated against or witnessed discriminatory practices, please contact the Chief People Officer, a\nPeople Business Partner\n, or the\nTeam Member Relations Specialist\nto initiate an investigation into the behavior. GitLab has also engaged Lighthouse Services to provide anonymous reporting methods, as described in the\nHow to Report Violations\nsection.\nBullying / Workplace Violence\nGitLab does not tolerate violent acts or threats of violence. The company will not tolerate fighting, bullying, coercion, or use of abusive or threatening words directed to, about, or against a co-worker, lead, manager, executive, candidate, client/customer, vendor, contributor, or any other person. No individual employed by GitLab should commit or threaten to commit any violent act or discuss committing such offenses, even in a joking manner.\nRetaliation\nRetaliation of any sort for filing a claim of harassment will not be tolerated. If you believe you have been retaliated against, please contact the Chief People Officer,\nTeam Member Relations\nor a\nPeople Business Partner\nto initiate an investigation.\nSpeaking up during a public situation\nIf someone messes up, people are encouraged to speak up publicly and within the moment, in order to let that person and others know that what happened was not inclusive behavior.\nThis makes for a situation from which all parties can learn, and is one which promotes understanding. Additionally it makes it possible for that person to de-escalate the situation by correcting themselves and apologizing.\nThis does not ensure there will be no consequences. However, it will greatly reduce the chance of escalation and has the potential to help a situation become comfortable and inclusive again.\nReporting a Physical Threat\nIf a threat is made against you or someone else that makes you or another team member question their safety due to an issue, merge request, email or other work related matters do not hesitate to initiate the following process:\nContact local law enforcement. Note the proper number to contact in your locality and whether the emergency, or non-emergency number should be called.\nNotify the People Operations Team via a HelpLab request. A private slack channel may then be opened with your People Business Partner, People Operations Team member, Team Member Relations, Manager, and the security team helping with the situation.\nThe following steps may be taken based on the threat:\nInternal threat assessment\nTemporary accommodation (friends, family, hotel, etc.)\nTransportation to alternate location (stay with family/friends for example)\nTime off from work/LOA\nPersonal Security Detail\nThe above can be triggered by the People Operations Team, Manager, Team Member Relations, or People Business Partner based on their knowledge of the threat.  Whenever it is safe to do so, please go through the normal permissions work flow, however if a threat is credible and potentially imminent, immediate action may be taken before the approvals have been put in place.\nThe Sr. Director of Security will advise when it is best to halt any of the above tasks.\nReporting Alleged Harassment\nAny individual who believes they have been the target of harassment of any kind is encouraged to immediately and directly address the harasser, letting them know that their behavior is unwelcome, offensive, and must stop immediately.\nIf they do not wish to address the harasser directly or the behavior doesn‚Äôt cease, they should report the misconduct to the Chief People Officer,\nTeam Member Relations\nor a\nPeople Business Partner\n.\nOnce reported, an impartial investigation will be conducted by a People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint.\nIndividual(s) reporting an incident or pattern of behavior will be asked to provide a written account, including any action(s) causing concern, the dates and times such actions occurred, and the names of anyone involved, including the participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled confidentially.\nThe Role of Managers\nIf managers become aware of misconduct, they must deal with any allegations expeditiously, seriously, confidentially, and fairly, whether or not there has been a written or formal complaint made to People Business partner. Informed managers are expected to:\nTake all complaints or concerns of alleged harassment seriously no matter how minor or who is involved.\nEnsure that any form of harassment or misconduct is immediately reported to People Business Partner.\nTake appropriate action to prevent retaliation, or the alleged misconduct from recurring, during and after an investigation.\nManagers who knowingly allow or tolerate any form of harassment or retaliation, including the failure to immediately report such misconduct to People Business Partner, are in violation of this policy and subject to disciplinary action, including termination.\nThe Role of Individual Contributors\nAll employees have the responsibility to help create and maintain a work environment free of bullying and harassment and can help by:\nBeing aware of how their own behavior may affect others, and changing it if necessary.\nTreating their colleagues with dignity and respect.\nTaking a stand if they think inappropriate jokes or comments are being made to others.\nMaking it clear to others where they find their behavior unacceptable.\nIntervening, if possible, to stop harassment or bullying from occurring.\nReporting promptly to their manager or the People Business Partner any incident of bullying or harassment witnessed by them.\nThe Role of People Business Partners\nThe Chief People Officer and People Business Partners are responsible for:\nEnsuring that any individual filing a complaint and any accused individual(s) are made aware of the seriousness of misconduct.\nExplaining GitLab‚Äôs no tolerance harassment policy and investigation procedures to all individuals included in a complaint.\nArranging for an immediate investigation of alleged misconduct and the preparation of a written report summarizing the results of the investigation and making recommendations for remediation to designated company officials.\nNotifying appropriate authorities (police, FBI, country specific bureaus) when criminal activities are alleged.\nExploring informal means of resolving potential harassment if a written (formal) complaint is not made when verbal allegations are shared.\nClassification of disciplinary action\nAll individual team members, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Although disciplinary action will be specific to each case, it can generally be classified into 4 levels:\nLevel 1\nFirst time occurrences of inappropriate behavior. An act out of character. After formal investigation, coworkers still feel comfortable working with the offender.\nSuspension (Paid/Unpaid based on country)\nFormal apology towards inflicted parties\nLevel 2\nRecurring socially inappropriate behavior.\nSuspension (Paid/Unpaid based on country)\nMandatory course on Inclusivity\nFormal apology towards inflicted parties\nWritten admonition\nPotential transfer to another team\nPotential of termination\nLevel 3\nMajor infraction, including retaliation, or recurring socially inappropriate behavior after a written admonition.\nTermination of employment\nLevel 4\nSerious cases, including any criminal offence.\nTermination of employment\nReported to the Police/Authorities\nTraining & Guidance\nTraining and guidance on understanding, preventing, and dealing with discrimination and sexual harassment will be provided to both managers and individual team members. The courses and the related enrollment logic can be found\nhere\n. This training will be provided on a regular cadence, consistent with local requirements, and/or when new legal requirements are introduced.\nCountry & US State-Specific Requirements\nGitLab BV (The Netherlands)\nComplaint Procedure\nIf attempts to resolve the problem in an informal manner prove insufficient or if these attempts were refused or proved to be ineffective, the victim may follow the procedure below:\nWrite a formal complaint and send it to the Chief People Officer or the People Business Partner. When the Chief People Officer or the People Business Partner receives the complaint, they must immediately handle the written complaint.\nThe Chief People Officer or the People Business Partner shall ensure that the complaint is included in a dated document within a reasonable period of time, and includes the statements of the victim and any witnesses, as well as the outcome of any mediation.\nThe victim and the witnesses receive a copy of their statement.\nA copy of the complaint will immediately be handed over to the responsible person within GitLab.\nAfter submission of the complaint to the responsible person within GitLab, an investigation will be initiated. This investigation may be conducted by a third (independent) party, depending on the complaint itself.\nAfter the investigation, the conclusion and a proposal for appropriate measures will be handed over to the responsible person within GitLab.\nGitLab will take the appropriate measures.\nSanctions\nWithout prejudice to the provisions that may arise from a judicial process instituted by the victim, one or more of the following sanctions shall be imposed on the person guilty of undesirable conduct:\nA written admonition.\nTransfer to another department.\nTermination of the agreement.\nGitLab shall impose, by registered letter and within five working days, the sanctions imposed upon the person who has been guilty of undesirable behavior. In case an employee abuses this complaint procedure, the above sanctions may also apply for the employee.\nGitLab BV (Belgium)\nPsychosocial Intervention\nGitLab has engaged with an external health and safety service called\nMensura\nwho are responsible for handling any complaints of harassment that are received but can not be resolved informally and internally. Team members in Belgium may contact this service if they wish and make a request for an informal or formal psychosocial intervention. A request for a formal intervention should include the following:\na precise description of the constituent facts of violence, or psychological or sexual harassment at work, according to the Employee,\nwhen and where each of the events took place,\nthe identity of the person(s) involved,\nthe request to the Employer to take appropriate measures to put an end to the events.\nThe psychosocial intervention advisor will investigate further and provide a report to the employee and People Business Partner with a recommended course of action.\nGitLab GK (Japan)\nProtection from Power Harassment\n‚ÄúPower harassment‚Äù is defined as any act by a person using his/her authority in the workplace, such as job position or human relationship with a team member, beyond the appropriate scope of business conduct, which causes such team member mental distress or physical pain or degradation of the working environment.\nThe law defines power harassment as ‚Äúremarks or behaviour by people taking advantage of their superior position that go beyond business necessity, thereby harming the workplace environment.  GitLab expressly prohibits any behaviour toward team members that falls within the definition of power harassment.\nDepending on the individual, a person may feel dissatisfaction when given the instructions, advice, or guidance necessary in the ordinary course of business.  In such cases where the actions are conducted within the scope of appropriate business practice, they should not fall under the category of power harassment.  Examples of power harassment include, but may not be limited to:\nassault or injury (physical abuse)\nthreats, defamation, insult or slander (mental abuse)\nisolation, ostracization or neglect (cutting them off from human relationships)\nforcing a team member to perform certain tasks, which are clearly unnecessary for the business or impossible to be performed or interrupting their normal duties (excessive work demands)\nordering a team member to perform menial tasks which are far below the team member‚Äôs ability or experience and do not provide any work at all for the team member relevant to the business (insufficient work demands)\nexcessively inquiring into the private affairs of a team member (invasion of privacy)\nTeam members who feel that they may have been subjected to power harassment may bring their complaints to their People Business Partner, who will engage the appropriate internal consultation services and respond to claims.  GitLab is prohibited from dismissing or treating unfairly any team members who report harassment cases or cooperate in an investigation or consultation process.\nProhibition of Sexual Harassment\nTeam members are prohibited from any activities that cause disadvantage or discomfort to other employees or that are damaging to the work environment by way of speech or behaviour of a sexual nature.  GitLab shall take all necessary measures in managing employment to prevent sexual harassment at the workplace.\nProhibition of Harassment Due to Pregnancy, Childbirth, Child Care Leave, or Family Care Leave\nTeam members are prohibited from any activities that are damaging to the work environment of other employees by way of speech or behaviour related to pregnancy, childbirth, etc., or use of systems or measures related to pregnancy, childbirth, child care, family care, etc.  GitLab shall take necessary measures in managing employment to prevent harassment due to pregnancy, childbirth, child care leave, family care leave, etc. at the workplace.\nProhibition of Any Other Forms of Harassment\nIn addition to the prohibitions listed above, team members are prohibited from any other forms of harassment at the workplace that are damaging to the work environment of other team members such as by way of speech or behaviours related to sexual orientation or gender identification.\nGitLab LTD (The UK)\nComplaint Procedure\nIf the employee does not wish to address the harasser directly, or the behavior does not cease, then the employee (accompanied by a colleague/union representative if they wish) should report the misconduct to their line manager or a member of the People Business Partner. Wherever appropriate the line manager and or the People Business Partner may attempt to resolve the situation on an informal basis.\nIf the informal approach does not resolve matters or the situation is too serious to be dealt with informally, the employee will need to make a formal complaint to the line manager and/or the People Business Partner.\nOnce reported, a formal investigation will be conducted impartially by People Business Partner or by an independent third party, depending on the severity and circumstances of the complaint. Individual(s) reporting an incident or pattern of behavior will be asked to provide a written account of any action(s) causing concern, dates and times such actions occurred, and names of anyone involved, including participants and witnesses. All complaints or concerns of alleged harassment or discrimination will be taken seriously and handled promptly, sensitively and confidentially.\nWherever possible the Company will try to ensure that the employee and the alleged harasser are not required to work together while the complaint is being investigated. This may involve the alleged harasser being suspended or transferred to another work area. In very serious cases, a criminal offence may have been committed and the employee may wish to report the matter to the police/authorities.\nEmployees will be kept informed of the general progress of the investigation and the outcome of any disciplinary proceeding.\nIf, following investigation, the complaint is upheld, appropriate disciplinary proceedings will be brought against the alleged harasser up to and including dismissal for gross misconduct. GitLab will work to prevent recurrence of the behavior.\nIf, following investigation, the complaint is not upheld, then the company will support both the employee and the alleged harasser in rebuilding their working relationship and may consider making arrangements to avoid the employee and the alleged harasser working together.\nWhere the employee is unhappy with the outcome of the formal investigation, they have the right to appeal against the outcome if they can demonstrate why they believe a particular aspect of the investigation has materially affected the outcome. Appeals must be submitted within 10 working days of receiving the outcome of the complaint.\nIf an appeal is submitted, the People Business Partner will arrange a meeting to take place with the appeal chair within a reasonable time period. The appeal chair‚Äôs decision will be final and there is no further right of appeal. The appeal chair will be independent of the investigation.\nGitLab Ireland Ltd\nComplaint Procedure and Contacts\nThe Company is aware of and recognises the effect that bullying, harassment and sexual harassment can have on its team members.\n‚ÄúContact Person‚Äù ‚Äì Team Member Relations:\nteammemberrelations@gitlab.com\n‚ÄúDesignated Person‚Äù - For each formal complaint that is reported through Lighthouse, a Designated Person will be appointed by the Company to deal with the specific issue.\nInformal Procedure\nThe Company is of the view that an informal approach to solving matters can often be effective. In the first instance, an attempt should be made to address an allegation of bullying, harassment and sexual harassment on an informal basis through the procedure set out below.\nIf you believe you are being bullied, harassed or sexually harassed you should explain clearly to the alleged perpetrator(s) that you find the behaviour in question to be unacceptable. If you would find it difficult to approach the alleged perpetrator(s) directly, then you may seek the advice or assistance of Team Member Relations. You may then request the assistance of Team Member Relations in raising the issue with the alleged perpetrator(s). Any approach made by Team Member Relations on your behalf to the alleged perpetrator(s) will be on a confidential, non-confrontational basis and will seek to resolve the issue in an informal low-key manner.\nIf you decide that it would not be appropriate for the Company to deal with your complaint under the informal procedure, or having done so you are not satisfied with the outcome, you should proceed to the Formal Procedure.\nFormal procedure\nTo begin with, you should make a formal complaint in writing via Lighthouse, giving concrete examples of the alleged bullying, harassment and/or sexual harassment, the dates of any such incidents and details of witnesses, where possible. You may make your complaint anonymously if you wish.\nThe alleged perpetrator(s) will then be notified in writing that an allegation of bullying, harassment and/or sexual harassment has been made against them. A meeting will be arranged at which the alleged perpetrator(s) will be told that they will be given a fair opportunity to respond to each and every allegation of bullying, harassment and/or sexual harassment and they will be given a copy of your written complaint together with a copy of this policy.\nA copy of this policy will also be provided to the complainant.\nOne or more designated members of the People Group (the Designated Person) will be responsible for carrying out an initial investigation into your complaint. The investigator may agree on terms of reference of the investigation with both you and the alleged perpetrator(s) in advance, and you and the alleged perpetrator(s) will be notified of the likely timescale for completion. This initial meeting will take place as soon as reasonably practicable following receipt of your complaint. If the Company considers it appropriate to do so, the Company reserves the right, at its discretion, to appoint or engage an external third party to conduct the investigation.\nWhere the allegations made are of a severe nature, the Company reserves the right to suspend the alleged perpetrator(s) on full pay pending an investigation.\nThe investigator will meet you, the alleged perpetrator(s) and any witnesses or other relevant persons on an individual basis to gather information surrounding the allegation. You and the alleged perpetrator(s) may be accompanied to such meeting by a colleague. The Company reserves the right to refuse your chosen representative attendance at the meeting where appropriate. You will be given the opportunity to change your chosen representative.\nEvery effort will be made to carry out and complete the investigation as quickly as possible and preferably within the agreed timeframe. Once the investigation is complete, the investigator will present a written report to management. Both the complainant and the alleged perpetrator(s) will be informed in writing of the investigator‚Äôs report and both parties will be given the opportunity to comment on the report before any action is decided on by the Company.\nIf, on foot of the report, the Company decides that it is appropriate, a People group representative and applicable manager will meet formally with the alleged perpetrator(s) to determine an appropriate course of action. This may include counselling, monitoring, mediation and/or invoking the disciplinary procedure.\nIf the investigation concludes that based on the evidence, bullying, harassment or sexual harassment may have been perpetrated by an individual who is not a team member of the Company, the Company will decide what appropriate actions should be taken against such individuals including exclusion from Company premises or systems, suspension or termination of service/contract etc.\nIf the Company decides that the complaint is not well founded, a People group representative and applicable manager will formally meet with the complainant, again to determine an appropriate course of action. It may be that some kind of counselling or mediation session(s) is required between the complainant and the alleged perpetrator(s).\nEither party may appeal the findings of an investigation under this procedure by submitting, in writing, within 5 working days of the Company‚Äôs decision in respect of the complaint outlining the reasons for the appeal. The appeal will be heard on the points raised and will not involve reinvestigation of the complaint.\nMediation\nMediation is an alternative method of resolving issues relating to bullying, harassment and sexual harassment. Mediation involves the parties seeking to arrive at a solution through mutual agreement, rather than through an investigation and decision.\nMediation provides a confidential opportunity for the person who feels that they have been bullied, harassed or sexually harassed and the person(s) accused of carrying out this inappropriate behaviour to discuss the matter and to reach an agreement on their continuing working relationship.\nMediation is conducted in private, and is directly between the parties concerned, with the support of a mediator, who will act as an independent facilitator. Either party may withdraw from the process at any time by notifying the mediator, in writing, that they wish to do so.\nIf both parties agree to resolve the issue by mediation, the Company will arrange the mediation process. An appropriate person, acceptable to both parties, from within or outside the Company will be assigned as mediator. The Team Member Relations specialist may serve as the internal mediator, if acceptable to both parties.\nIf the mediation process results in an agreement acceptable to both parties, the mediator will draw up a written record of the terms of the settlement for signature by both parties.\nIf mediation breaks down or fails to achieve its goal, the matter can be processed through the other stages of this procedure. The person involved in the mediation process will not be involved in the investigation process.\nGitLab Inc and GitLab Federal LLC\nIn addition to\nEthicsPoint\nand\nLighthouse\n, please review the\nTeam Member Relations Specialist\nsection. GitLab also offers a\nHarassment Complaint Form\nthat any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at\nteammemberrelations@gitlab.com\n.\nCalifornia Law Requirements\nEvery team member located in the state of California will be required to read, review, and understand the following three documents during their onboarding:\nState requirements policy\nCalifornia Law Prohibits Workplace Discrimination & Harassment\nSexual Harassment & Civil Remedies\nConnecticut Law Requirements\nEvery team member located in the state of Connecticut is required to take the 2 hour Anti Harassment Training for Supervisors. This training is to be completed by all individual contributors as well as managers.\nMaine Law Requirements\nTeam members who reside in Maine have the right to file a complaint through the\nMaine Human Rights Commission\nwithin 300 days of the date of the alleged discrimination. You may contact the Commission by phone at (207) 624-6290, TTY Maine Relay 711, or by visiting the office located at 51 State House Station, August Maine, 04333-0051. It is unlawful under the Maine Human Rights Act for an employer to retaliate against you because you filed a complaint of discrimination or because you aided in an investigation.\nMassachusetts Law Requirements\nTeam members who reside in Massachusetts have the right to file a complaint to the\nMassachusetts Commission Against Discrimination (MCAD)\n: 1 Ashburton Place, Suite 601, Boston, MA 02108, tel: (617) 994-6000, TTY:(617) 994-6196.\nOregon Law Requirements\nNondisclosure or Nondisparagement Agreements\nUnder this policy, a nondisclosure agreement is any agreement by which one or more parties agree not to discuss or disclose information regarding any complaint of work-related harassment, discrimination, or sexual assault.\nA nondisparagement agreement is any agreement by which one or more parties agree not to discredit or make negative or disparaging written or oral statements about any other party or the company.\nA no-rehire provision is an agreement that prohibits a team member from seeking reemployment with the company and allows a company to not rehire that individual in the future.\nThe company will not require a team member to enter into any agreement if the purpose or effect of the agreement prevents the employee from disclosing or discussing conduct constituting discrimination, harassment, or sexual assault.\nA team member claiming to be aggrieved by discrimination, harassment, or sexual assault may, however, voluntarily request to enter into a settlement, separation, or severance agreement which contains a nondisclosure, nondisparagement, or no-rehire provision and will have at least seven days to revoke any such agreement.\nTime Limitations\nNothing in this policy precludes any person from filing a formal grievance in accordance with a collective bargaining agreement [if applicable], the\nBureau of Labor and Industries‚Äô Civil Rights Division\n800 NE Oregon St., Suite 1045 Portland, OR 97232, tel: (971) 673-0761, TTY Relay 711, or the Equal Employment Opportunity Commission. Note that Oregon state law requires that any legal action taken on alleged discriminatory conduct (specifically that prohibited by ORS 659A.030, 659A.082 or 659A.112) commence no later than five years after the occurrence of the violation. Other applicable laws may have a shorter time limitation on filing.\nRhode Island Law Requirements\nTeam members who reside in Rhode Island have the right to file a complaint with the\nRhode Island Commission for Human Rights\nlocated at 180 Westminster St., 3rd Floor, Providence, RI 02903. Phone: (401) 222-2661, Voice Relay: 7-1-1.\nVermont Law Requirements\nIf the a team member who resides in Vermont is dissatisfied with this employer‚Äôs action, or is otherwise interested in doing so, they may file a complaint by writing or calling the Vermont Attorney General‚Äôs Office, Civil Rights Unit, 109 State Street, Montpelier, VT 05609,\nago.civilrights@vermont.gov\n, tel:(888)745-9195 (Toll Free VT) or (802)828-3657 (voice/TDD). Complaints should be filed within 360 days of the adverse action.\nResources\nWe are continuously gathering country specific references to review regulation and obtain guidance on the management of harassment or misconduct at work. Here are a few authorities we referred to in the creation of this policy:\nEqual Employer Opportunity Commission (EEOC)\nContact\n: John F. Kennedy Federal Building, 475 Government Center, Boston, MA 02203, , tel:1-800-669-4000 (voice), 1-800-669-6820 (TDD). Complaints must be filed within 300 days of the adverse action.\nSociety of Human Resource Management (SHRM)\nFurther Guidance (Country-Specific)\nUK: Acas (advisory service for employees and employers)\nThe Netherlands: Inspectorate SZW\nBelgium: Unia: For equality, against discrimination\nLast modified July 8, 2025:\nPeople Connect to People Operations Updates (\nfacc4002\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5496}
{"doc_id": "3abae6198a94966f", "url": "https://handbook.gitlab.com/handbook/people-group/acceptable-use-policy", "title": "GitLab Internal Acceptable Use Policy | The GitLab Handbook", "text": "The Handbook\nPeople Group\nGitLab Internal Acceptable Use Policy\nThis policy specifies requirements related to the use of GitLab computing resources and data assets\nThis is a Controlled Document\nIn line with GitLab‚Äôs regulatory obligations, changes to\ncontrolled documents\nmust be approved or merged by a code owner. All contributions are welcome and encouraged.\nPurpose\nThis policy specifies requirements related to the use of GitLab computing resources and data assets by GitLab Team Members so as to protect our customers, Team Members, contractors, company, and other partners from harm caused by both deliberate and inadvertent misuse. Our intention in publishing this policy is to outline information security guidelines intended to protect GitLab assets.\nIt is the responsibility of every member of our Community to interact with GitLab computing resources and data in a secure manner and to that end we provide the following acceptable use standards related to computing resources, company and customer data, mobile and tablet devices, and removable and external media storage devices.\nScope\nThis policy applies to all GitLab Team Members, contractors, advisors, and contracted parties interacting with GitLab computing resources and accessing company or customer data.\nRoles & Responsibilities\nRole\nResponsibility\nGitLab Team Members\nResponsible for following the requirements in this procedure\nSecurity, Legal and PeopleOps\nResponsible for implementing and executing this procedure\nSecurity, Legal and PeopleOps (Code Owners)\nResponsible for approving significant changes and exceptions to this procedure\nProcedure\nAcceptable Use and Security Requirements of Computing Resources at GitLab\nGitLab-managed assets are provided to conduct GitLab business, with consideration given for limited personal use subject to any conflicting statements contained in any individual employment contracts or agreements. Our company uses global electronic communications and resources as routine parts of our business activities. Personal and professional use of GitLab-managed assets are subject to security monitoring and protection, unless prohibited under the local laws of a respective Team Member‚Äôs jurisdiction. It is essential that electronic resources used to perform company business are protected to ensure that these resources are accessible for business purposes and operated in a cost-effective manner, that our company‚Äôs reputation is protected, and that we minimize the potential for legal risk.\nThose receiving GitLab-provided assets are responsible for exercising good judgment when using GitLab-managed computers and accessing GitLab-managed data.\nAs per the\nonboarding issue procedures\noutlined in our handbook, evidence of device encryption and device serial number must be provided to IT Ops prior to the completion of onboarding period.\nWe are currently using Jamf as our endpoint management solution for Mac laptops. All macOS laptops procured by GitLab will come configured with\nJamf\n. GitLab Team Members procuring and expensing Mac Laptops will require\nJamf\nto be installed as part of their\nDay 1 Security tasks\n. Upon their discretion, CorpSec may install additional security tools via Jamf.\nLinux users must install\nSentinelOne\nand\nDriveStrike\nas part of their onboarding process during their first week.\nSecurity and Proprietary Information\nAll GitLab data is categorized and must be handled in accordance with the\nData Classification Standard\n. All computing assets that connect to any part of the GitLab network, or 3rd party services that are used by GitLab, must comply with the applicable standards.\nOpen source libraries\nOpen Source libraries are allowed under this policy if its use complies with the pre-approved or approval requirements captured in the\nProduct Legal Handbook\n.\nFreeware, Browser Extensions, Add-ons, and Plugins\nIndividual Use Software (freeware, add-ons and plugins) is permitted, with the exception of unauthorized Google Workspace Integrations and Chrome Extensions. Individual Use Software is subject to retroactive removal at any time by IT, Legal and Security when it is deemed unsafe or insecure.\nAuthorized Google Workspace Integrations and other approved Individual Use Software can be found on the\nPre-Approved Individual-Use Software\nlist and are permitted for use subject to any ‚ÄúNotes and Restrictions‚Äù for each respective Pre-Approved software offering.\nTo request approval for new Individual Use Software, please follow the\nIndividual Use Software\nrequest process.\nNote\nIn order to abide by the\nSAFE Framework\n, to preempt third party processing of company data under permissive individual use licensing terms, or to prevent Team Member misuse of certain Third Party Software features, IT, Legal, Privacy and Security will generally err on the side of disallowing exceptions to enterprise level software, particularly if there is an enterprise option already in our\nTech Stack Applications\nthat achieves a similar purpose.\nUnacceptable Use\nTeam Members and contractors may\nnot\nuse GitLab-managed resources for activities that are illegal or prohibited under applicable law, no matter the circumstances.\nSecurity requirements for GitLab production and corporate environments and on GitLab-managed assets must not be disabled without security approval via the\nInformation Security Policy Exception Management Process\n.\nUnacceptable System and Network Activities\nProhibited system and network activities include, but are not limited to, the following:\nViolations of the rights of any person or company protected by copyright, trade secret, patent or other intellectual property, or similar laws or regulations.\nUnauthorized copying, distribution, or use of copyrighted material.\nExporting software, technical information, encryption software, or technology in violation of international or national export control laws.\nIntentional introduction of malicious programs into GitLab networks or any GitLab-managed computing device.\nIntentional misuse of any GitLab-managed computing device or GitLab networks (e.g. for cryptocurrency mining, botnet control, etc.).\nSharing your credentials for any GitLab-managed computer or 3rd party service that GitLab uses with others, or allowing use of your account or a GitLab-managed computer by others. This prohibition does not apply to single-sign-on or similar technologies, the use of which is approved.\nUsing a GitLab computing asset to procure or transmit material that is in violation of sexual harassment policies or that creates a hostile workplace.\nMaking fraudulent offers of products, items, or services originating from any GitLab account.\nIntentionally accessing data or logging into a computer or account that the Team Member or contractor is not authorized to access, or disrupting network communication, computer processing, or access.\nExecuting any form of network monitoring that intercepts data not intended for the Team Member‚Äôs or contractor‚Äôs computer, except when troubleshooting networking issues for the benefit of GitLab.\nAttempting to bypass, modify, disable or tamper with security controls or logs.\nAttempting to uninstall security controls without prior approval from a Security manager\nCircumventing user authentication or security of any computer host, network, or account used by GitLab.\nTunneling between network segments or security zones (e.g.,\ngprd\n,\ngstg\n,\nops\n,\nci\n,\nngrok\n), except when troubleshooting issues for the benefit of GitLab.\nGiven the potential sensitivity of the data contained in screenshot images, the use of tools that capture and share screenshots to hosted sites online is prohibited without the explicit approval of the Security and Legal Departments.  Screenshots should be stored locally or within Google drive folders associated with your GitLab.com account. Access to these drives and files should be managed in accordance with our\nAccess Management policy\n, and handled according to our\nData Classification Standard\n. Tools such as\nLightshot\n, where upload functionality cannot be disabled and could result in inadvertent uploads, should not be used.\nThe use of high risk remote administration tools, such as TeamViewer and AnyDesk, which are\ncommonly used by attackers\nto gain and remotely control systems.\nTools that emulate another operating system or create compatibility layers such as\nThe use of torrent or other P2P software on GitLab computing assets.\nUnacceptable Email and Communications Activities\nForwarding of confidential business emails or documents to personal external email addresses is prohibited. Automated forwarding of emails from a team member account is also prohibited.\nNote: GitLab may retrieve messages from archives and servers without prior notice if GitLab has sufficient reason to do so. If deemed necessary, this investigation will be conducted with the knowledge and approval of the Security, People Business Partners, and Legal Departments.\nIn addition to following the\nTeam Member Social Media Policy\n, when utilizing social media think about the effects of statements that you make. Keep in mind that these transmissions are permanent and easily transferable, and can affect our company‚Äôs reputation and relationships with Team Members and customers. When using social media tools like blogs, Facebook, Twitter or wikis, ensure that you do not make comments on behalf of GitLab without proper authorization. Also, you must not disclose our company‚Äôs confidential or proprietary information about our business, our suppliers, or our customers.\nReturn of GitLab-Owned Assets\nAll GitLab-owned computing resources must be\nreturned\nupon separation from the company.  Notwithstanding anything contrary in the\nLaptop Buy Back Policy\nor the\nOffboarding Tasks\n, Team Members must return any GitLab-Owned Assets ‚Äì irrespective of their valuation ‚Äì if they are specifically requested to do so either during their tenure with GitLab or upon offboarding. In cases of investigation, misconduct, termination for cause or any violation of\nGitLab‚Äôs Code of Business Conduct & Ethics\n, a team member has no right to retain GitLab-owned computing equipment.\nBring-Your-Own-Device (BYOD)\nAs a general rule, non-company devices are not permitted to access company assets. While there are some exceptions listed below, access to RED classified data, as defined by the\nGitLab Data Classification Standard\n, is still prohibited.\nThe exceptions are as follows:\nPersonal Mobile Phone and Tablet Usage\nAll personal mobile computing devices used to access GitLab-managed data, including but not limited to email and GitLab.com, must be passcode-enabled. 2FA will be enforced by the Security team for all employee and contractor GitLab.com and Google Workspace accounts. Mobile computing best practices dictate that these devices should be running the latest version of the operating system available, and all new patches applied. For assistance with determining the suitability of your mobile device, please contact the Security Team.\nUnable to Use Company Laptop\nFor new employees who have not received a company laptop, there are\nexception processes\nfor using non-company devices.\nThe same exception processes apply in the case of a corporate laptop being unavailable or unusable due to loss, theft or disrepair. See\nlost or stolen procedures\nfor additional information. You must open\na Policy Exeption Request\n. While the exception processes are considered a temporary solution, you still need to make sure the non-company system meets\nbasic configuration standards\n, and a Microsoft Windows system is still not allowed access under any circumstances.\nDo not sign in to any GitLab related accounts using public computers, such as library or hotel kiosks.\nMobile Messaging\nAll GitLab-related conversations need to take place in Slack. It is strongly recommended that the official Slack application, or Slack web application, are used for mobile messaging. Downloads are available for\niOS\nand\nAndroid\n. While it may be more convenient to use an integrated chat application that puts all of your conversations in one place, the use of these applications can unintentionally lead to work-related conversations crossing platforms, or being sent to external contacts. The use of Slack for all work communications assists with our security and compliance efforts. For example, in the case of an incident response issue, it may be necessary to review a conversation to understand the order in which events occurred, or to provide evidence that the chain of custody has been maintained for forensic evidence during a handoff.\nFor\nvideo calls\n, and as a back-up to Slack, we prefer Zoom. Zoom chats are an acceptable alternative to Slack when in a video call. If the conversation is interesting to others or may be needed for a retrospective, consider recording the call.\nUse of External Media on Company Assets\nThe use of removable and external storage devices such as USB flash drives and external backup drives on company-managed devices is not allowed and is blocked by default. An exception request may be opened\nhere\nif there is a business need for the use of an external storage device. Corporate Security will coordinate with requestors to determine the most suitable encryption-enabled device and configure encryption and password protection.\nAs a reminder, Red Data may not be transmitted from an approved Red data source to any other systems or solutions without first obtaining approval from the Privacy and Security teams. Please refer to GitLab‚Äôs\nData Classification Standard\nfor further details.\nUse of file sharing services other than GitLab‚Äôs Google Drive\nCreating an account or using for backup/redundancy purpose a file sharing service other than GitLab‚Äôs Google Drive is prohibited. For sharing GitLab-related files with those external to GitLab, an exception must be granted. To obtain an exception create an\naccess request\noutlining the business case, and do not proceed until the exception has been granted.\nWhen creating an account with and using a file sharing service other that Google Drive, Team Members must:\nWhere available, use the\nSign in with Google\nsingle sign-on option using a GitLab Google Workspace account, rather than creating an account using a GitLab (or other provider) email address and password.\nOnly upload files directly to shared folders created by those external to GitLab and do not upload files to the personal area of the file sharing service.\nRemove all files and close the account when the file sharing service is no longer needed.\nLost or Stolen Procedures\nGitLab provides a\npanic@gitlab.com\nemail address and a\nlost or stolen procedure\nfor team members to use in situations that require an immediate security response. Should a team member lose a device such as a thumb drive, Yubikey, mobile phone, tablet, laptop, etc. that contains their credentials or other GitLab-sensitive data, they should send an email to\npanic@gitlab.com\nright away. When the production and security teams receive an email sent to this address it will be handled immediately. Using this address provides an excellent way to limit the damage caused by a loss of one of these devices.\nGitLab reserves the right to request documentation of the theft and/or a related police report in the case of a stolen laptop.\nPolicy Compliance\nCompliance with this policy will be verified through various methods, including but not limited to, automated reporting, audits, and feedback to the policy owner.\nAny Team Member or contractor found to be in violation of this policy may be subject to disciplinary action, up to and including termination of employment, or contractual agreement.\nConsultations\nTo consult with the Security Team create an issue in the\nSecurity Compliance tracker\n.\nExceptions\nExceptions to this policy must be approved by Security, Legal and PeopleOps Departments.\nOnboarding Issue\nData Classification Standard\nAsset return procedure\nLost or stolen asset procedure\nReferences\nGitLab‚Äôs\nCommunity Code of Conduct\napplies to all members of the GitLab community\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2441}
{"doc_id": "5d2150996cb82fdd", "url": "https://about.gitlab.com/upcoming-releases", "title": "GitLab upcoming releases\n|\nGitLab", "text": "Note: This page contains information related to upcoming products, features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned on the page are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab Inc.\nGitLab releases a new version\nevery single month\n.\nThe list is an outline of\ntentpole features\n√¢¬Ä¬ì the expected most important features\nof upcoming releases √¢¬Ä¬ì and doesn't include most contributions from volunteers\noutside the company. This is not an authoritative list of upcoming releases - it\nonly reflects current\nmilestones\n.\nNote that we often move things around, do things that are not listed, and cancel\nthings that\nare\nlisted.\nThis list is our best estimate of where new features will land, but is in no way definitive.\nThis page is a different view of\ninterlocked product\nepics\nand\nissues\n.\nPast releases can be found on our\nreleases page\n.\n18.3 (2025-08-21)\nPlan\nEmbedded Views - General Availability\nCreate\nDuo Code Review\nUltimate\nPackage\nContainer Registry: Tag immutability feature\nUltimate\nApplication Security Testing\nEnable secret push protection by default for public projects\nSAST support for C and C++: experiment release\nUltimate\nGeneric Secrets - Experiment\nUltimate\nValidity Checks - GA\nUltimate\nFaster Advanced SAST: Diff-based scanning in MRs\nUltimate\nSoftware Supply Chain Security\nSecurity Manager Default Role\nCustom Admin Role - GA\nUltimate\nInstance Level Compliance and Policy Management\nLink violations to framework controls\nPasskey / Passwordless Auth Support\nSecurity Risk Management\nSecurity Dashboard Upgrade - Release 1\nSupport dependency graph visuals\nSource branch pattern exceptions for MR Approval Policies\nFilter by Validity Status and Enable Refresh (Dependency of Secret Detection)\nCentralized Security Policy Management (Beta)\nAdd PDF export of security reports\nDependency list exports in CycloneDX and CSV SBoM formats\nUltimate\nVariable precedence controls in pipeline execution policies\nUltimate\nVulnerability report and Dependency list exporting\nUltimate\nFulfillment\n[SM Cloud Licensing Trials] Iteration 1: Introduce SM Ultimate trials on Cloud Licensing\n[Gitlab.com] Automatic removal of dormant members\n18.4 (2025-09-18)\nFoundations\nDirect Transfer General Availability\nPackage\nMaven Virtual Registry - Road to General Availability (GA)\nPremium\nApplication Security Testing\nSAST support for C and C++: Beta release\nSoftware Supply Chain Security\nPhase 3: Enforce token scope by default instance-wide\nClosed Beta - GitLab Secrets Manager\nFulfillment\nEnable customers to self-service manage multiple Billing Account Managers on a Billing Account\n18.5 (2025-10-16)\nPlan\nWork item statuses - Iteration 4 (Multiple lifecycles)\nApplication Security Testing\nDependency Scanning: full scan on SBOM changes - GA\nUltimate\nSecurity Risk Management\nSecurity Attributes/Context Filtering\n18.6 (2025-11-20)\nGitLab Delivery\nSelf managed: Support Rollout of Container Registry for Self-Managed Instances\nAI-powered\nDuo Agent Platform\nDuo Workflow- Remote execution\n18.7 (2025-12-18)\nApplication Security Testing\nMaturing the Static Reachability Feature to General Availability (GA)\nUltimate\n18.8 (2026-01-15)\nPlan\nEnhanced List View\nPackage\nBeta: npm Virtual Registry\nPremium\n18.9 (2026-02-19)\nPlan\nWI lists stage 4 - Consolidated list (group and project)\n18.10 (2026-03-19)\nSoftware Supply Chain Security\nGranular permissions for Personal Access Tokens\n18.11 (2026-04-16)\nPackage\nPyPI virtual registry MVC\n19.0 (2026-05-21)\nPlan\nEnhanced listing page follow-up items\nNested listing views for efficient workflows within SDLC and OKR workflows\nUltimate\nApplication Security Testing\nEnable GitLab Advanced SAST by default", "num_words": 567}
{"doc_id": "efa7ec0f7b98d4fb", "url": "https://handbook.gitlab.com/handbook/resellers", "title": "GitLab Channel Partner Program | The GitLab Handbook", "text": "The Handbook\nGitLab Channel Partner Program\nThe value of becoming a GitLab channel partner.\nWelcome to the GitLab Channel Handbook\nWe invite organizations interested in becoming a GitLab Channel Partner to\n.\nThis is the primary Handbook page for prospective and existing GitLab Channel partners and is organized into the following sections:\nWelcome to the GitLab Channel Handbook\n,\nChannel Program Guide\n,\nChannel Partners: Working with GitLab\n, and\nChannel Partners: Developing your GitLab Practice\n. This services as an introduction to the GitLab Channel Program and provides links to individual sections with additional detailed information.\nGitLab Channel Introduction\nThe GitLab Partner Program supports organizations ranging from value added resellers (VARs) to systems integrators (SIs) to managed service providers (MSPs) and beyond looking to resell or refer GitLab sales opportunities, or provide services for GitLab customers. In addition, the program empowers partners to capture value from and support the entire customer lifecycle with guidance and support for everything from pre-sales engagement through full customer adoption of GitLab.\nWhy Become a GitLab Partner?\nThe right product at the right time. In any given market there are only a few times when the stars align with a product that is creating and leading a category, a product that helps customers redefine what success can look like, and with a robust opportunity for an ecosystem of partners to help customers maximize their ROI in that product.\nGitLab represents one of those opportunities. We are still in the early phases of capturing an estimated $40 billion dollar addressable market[^1].  A market that‚Äôs evolving from point solutions to a platform and where GitLab offers the most comprehensive offering with proven ROI that partners can monetize by accelerating customers‚Äô successful adoption of GitLab.\nFrom a strategic perspective, the comprehensive GitLab DevSecOps platform can be a driving force in your application modernization, digital transformation, cloud adoption, and even your security & compliance practices.\nHow to Navigate the Channel Guide\nThese pages document our shared team philosophy and processes, while the individual sections contain more detailed information. If you ever need to find your way back to either page or section, you can locate navigation links at the top or bottom of each page or section, as well as helpful Outline links located on the right of each page.\nHow to Navigate: To find your way back to the 1st Page\n.\nWelcome to the GitLab Channel Handbook\n,\nChannel Program Guide\n,\nChannel Partners: Working with GitLab\n, and\nChannel Partners: Developing your GitLab Practice\n.\nGitLab Channel Partner Program Sections\nChannel Program Guide\nIn this section you will learn how the GitLab Channel Partner Program works, the value GitLab brings to partners, Program Benefits & requirements, and an introduction to GitLab Services program.\nChannel Partners: Working with GitLab\nIn this section, you will be given a deep dive into working with and managing the Four main aspects of the GitLab: (1) Administration, (2) Sales, (3) Marketing, (4) Technical, and (5) Distributors.\nChannel Partners: Developing your GitLab Practice\nIn this section, you will learn how the GitLab Partner Enablement Program is designed to provide our partners with similar training as GitLab employees. Specifically developing core training, accreditation, and certification for sales, solution architects (pre-sales engineers), and post-sales engineers and consultants.\nChannel Champions: Joining GitLab Partners Champions Program\nIn this section, you will be about GitLab Champions Program, an initiative designed to recognize and empower GitLab Channels key members who demonstrate exceptional advocacy, expertise, and enthusiasm for GitLab. Learn about the program‚Äôs purpose, benefits, and how to become a champion, as well as the significance of joining this dynamic community of passionate GitLab advocates.\nChannel Partners: Technical Presales Enablement\nIn this section, we review assets and enablement from the perspective of Channel Partners‚Äô Technical Presales constituencies.\nPartner Operations (GitLab Internal)\nFor GitLab Team members only. In this section, GitLab Team members will find important information on navigating the Partner Program‚Äôs internal processes.\nGitLab Alliance Program\nThis link will allow you to explore the exceptional technology companies we proudly partner with.\nAll authorized GitLab resellers are invited to the GitLab #resellers Slack channel. This Slack channel allows you to reach out to our sales and marketing team in a timely manner, as well as other resellers.\nAdditionally, you can email the GitLab Channel Team at\npartnersupport@gitlab.com\n.\nChannel Partner Tools and Resources\nChannel Partner tools and resources to help grow your GitLab business.\nChannel Partners: Working with GitLab\nHow channel Partners can work with GitLab.\nDeveloping your GitLab Practice\nDeveloping your GitLab Practice Intro We‚Äôre only just getting going at capturing our mutual ‚Ä¶\nGitLab Channel Program Guide\nGitLab Channel partner program guide.\nGitLab Partner Champions Program\nThe GitLab Partner Champions Program will empower, support, reward, and recognize members of the ‚Ä¶\nPartner Enablement\nGitLab's Partner Enablement strategy provides comprehensive training for ecosystem partners, through functional, technical, and soft skills training designed to drive mutual growth and success.\nPartner Technical Presales Enablement\nIn this section of the Partner Programs Handbook we review assets and enablement from the ‚Ä¶\nLast modified July 8, 2025:\nUpdate APPLY TODAY Link in HB (\n6263e2d4\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 861}
{"doc_id": "a063c6bb72e05315", "url": "https://about.gitlab.com/platform", "title": "Platform", "text": "The most comprehensive\nAI-powered\nDevSecOps Platform\nDeliver better software faster with one platform for your entire software delivery lifecycle.\nGet Free Trial\nLearn about pricing\nPlanning\nSource Code Management\nContinuous Integration\nSecurity\nCompliance\nArtifact Registry\nContinuous Delivery\nObservability\nDevOps Reports\nDORA Metrics\nValue Stream Management\nValue Stream Forecasting\nService Desk\nWiki\nPortfolio Management\nTeam Planning\nGenerate issue description\nDiscussion Summary\nDesign Management\nRemote Development\nSource Code Management\nWeb IDE\nGitLab CLI\nCode Review Workflow\nCode Suggestions\nCode Explanation\nCode Review Summary\nTest Generation\nCode Refactorization\nGitLab Duo for the CLI\nSecrets Management\nReview Apps\nCode Testing and Coverage\nMerge Trains\nSuggested Reviewers\nMerge Request Summary\nRoot Cause Analysis\nDiscussion Summary\nMerge Commit Message Generation\nPipeline Composition and Component Catalog\nContainer Scanning\nSoftware Composition Analysis\nAPI Security\nCoverage-guided Fuzz Testing\nCode Quality\nSecret Detection\nVulnerability Explanation\nVulnerability Resolution\nGitLab Advisory Database\nRelease Evidence\nCompliance Management\nAudit Events\nSoftware Bill of Materials\nDependency Management\nVulnerability Management\nSecurity Policy Management\nVirtual Registry\nContainer Registry\nHelm Chart Registry\nPackage Registry\nModel Registry (Beta)\nDependency Proxy\nRelease Orchestration\nInfrastructure as Code\nPages\nFeature Flags\nEnvironment Management\nDeployment Management\nAuto DevOps\nOn-call Schedule Management\nIncident Management\nError Tracking\nProduct Analytics Visualization\nAI Product Analytics\nAI Impact Dashboard\nMetrics\nDistributed Tracing\nLogs\nReplacement for\nJira\nReplacement for\nGitHub\nReplacement for\nJenkins\nReplacement for\nSnyk\nReplacement for\nJFrog\nReplacement for\nHarness\nReplacement for\nSentry\nOne platform\nto empower Dev, Sec, and Ops teams\nDevelopment\nSecurity\nOperations\nAI-powered workflow\nBoost efficiency and reduce cycle times of every user with the help of AI in every phase of the software development lifecycle - from planning and code creation to testing, security, and monitoring.\nGitLab Duo\nSee it in action:\nGitLab Duo\nCode Suggestions\nChat\nSingle application\nGitLab brings all DevSecOps capabilities into one application with a unified data store so everything is all in one place.\nGitLab's use of DORA metrics video\nGitLab's Value Streams Dashboard video\nEnhanced developer productivity\nGitLab's single application delivers a superior user experience, which improves cycle time and helps prevent context switching.\nGitLab's Portfolio Management video\nGitLab's OKR Management video\nDesign Uploads to GitLab issues video\nBetter automation\nGitLab's automation tools are more reliable and feature rich, helping remove cognitive load and unnecessary grunt work.\nGitLab's CD Overview video\nError tracking documentation\nIncident management documentation\nSecurity is built in, not bolted on\nGitLab's security capabilities - such as DAST, fuzz testing, container scanning, and API screening - are integrated end-to-end.\nDynamic Application Security Testing (DAST) video\nContainer scanning video\nAPI security and web API Fuzzing video\nCompliance and precise policy management\nGitLab offers a comprehensive governance solution allowing for separation of duties between teams. GitLab's policy editor allows customized approval rules tailored to each organization's compliance requirements, reducing risk.\nCompliance Management documentation\nGitLab's Compliance Frameworks video\nGitLab's Requirements Management video\nSecurity automation\nGitLab's advanced automation tools enable velocity with guardrails, ensuring code is automatically scanned for vulnerabilities.\nGitLab's Security Dashboard video\nScale Enterprise workloads\nGitLab easily supports the Enterprise at any scale with the ability to manage and upgrade with nearly zero downtime.\nInfrastructure as code (IaC) documentation\nIncident management documentation\nUnparalleled metrics visibility\nGitLab's use of DORA metrics video\nGitLab's Value Streams Dashboard video\nCloud-native, multi-cloud and legacy support\nGitLab provides a complete DevSecOps platform that allows teams to have the same productivity metrics and governance, regardless of your infrastructure mix.\nMulticloud documentation\nGitOps documentation\nLower Total Cost of Ownership\nLearn how the world's largest defence contractor uses GitLab to shrink toolchains, speed production, and improve security:\nLockheed Martin case study\nLearn how CARFAX trimmed their DevSecOps toolchain and improved security with GitLab:\nCARFAX case study\nHarness the power of AI with\nGitLab Duo\nLearn more\n\"The vision that GitLab has in terms of tying strategy to scope and to code is very powerful. I appreciate the level of investment they are continuing to make in the platform.\"\n$150k\napproximate cost savings per year\n20 hours\nsaved in onboarding time per project\nJason Monoharan\nVP of Technology,\nIron Mountain\nRead the study\n$150k\napproximate cost savings per year\n20 hours\nsaved in onboarding time per project\nWant to increase velocity?\nConsolidate your toolchain today.\nImprove collaboration\nReduce admin burden\nIncrease security\nLower total cost of ownership\nScale seamlessly\nDon't know where to start?\nOur sales team can help guide you.\nTalk to sales\nLearn more\nIndustry leaders trust GitLab\nGitLab ranks as a G2 Leader across DevOps categories.\nGitLab is a Leader in the 2024 Gartner√Ç¬Æ Magic Quadrant√¢¬Ñ¬¢ for DevOps Platforms\nRead the report\nGitLab is the only Leader in The Forrester Wave√¢¬Ñ¬¢: Integrated Software Delivery Platforms, Q2 2023\nRead the report\nFind out which pricing plan works best for your growing team\nWhy GitLab Premium?\nWhy GitLab Ultimate?\n50%+ of the Fortune 100 trust GitLab\nStart shipping better software faster\nSee what your team can do with the intelligent\nDevSecOps platform.\nGet free trial\nTalk to sales", "num_words": 814}
{"doc_id": "38b6cd044474fb30", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/feature-support", "title": "Infrastructure Feature Support | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nInfrastructure Feature Support\nHow the Infrastructure Department supports shipping features to Production.\nGetting started\nWhen a GitLab feature is released to Production, it can be released at one of these levels: Experiment, Beta, Generally Available.\n(See the\nproduct documentation\nfor further details.)\nThe availability of a feature is closely related with our ability to support the feature on our SaaS Platforms.\nThese guidelines ensure that features in our Production environments can be operated by our\nReliability teams\nto match the expected level of support.\nRequesting and creating new GCP infrastructure resources\nRunway is the preferred method to create and launch new services. Self service onboarding is available via the\nonboarding guide\nand any questions should be directed to the\n#f_runway\nSlack channel\n. Runway includes automated configuration and Runway provides many of the Infrastructure Readiness requirements as standard. Using Runway will make it easier and faster to promote new features into a Generally Available state in Production.\nIf your requirements are not currently supported by Runway, or on the\nRunway roadmap\n, you can use the\nSandbox Cloud GCP Group Project issue template\nto request new resources. After the GCP project is created, it can be configured as needed, this provides initial provisioning and IAM management. This provides basic resources and is available to anyone team-member.\nSeverity levels for different product maturity\nIncidents for Experimental and Beta features are assigned as\nSeverity 4\nIncidents for Generally Available features are assigned according to the\nincident severity table\nlisted on the Incident Management page.\nHow to expedite features to General Availability\nWe are able to help expedite features to General Availability.\nIn order to expedite a prototype feature, on the epic tracking the work required to reach General Availability, include the label\n~expedite_prototype\n.\nInfrastructure leadership are subscribed to this label and will be notified that the intention is to expedite this feature.\nInfrastructure leadership will confirm with the epic DRI if they are able to support this.\nEpics with this label are visible in the\nPrototype Status epic board\n.\nLast modified June 16, 2025:\nMove infrastructure FAQ page (\n8ef16210\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 363}
{"doc_id": "f6ad6e65b4eb14ae", "url": "https://handbook.gitlab.com/handbook/security/corporate/services", "title": "CorpSec Services | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec Services\nThis is a placeholder page. Please see the links below for any child pages that exist.\n2FA and Password Account Resets for Team Members\nThis is a placeholder page. Please see the links below for any child pages that exist.\nAccess Requests (AR) Services\nAccess Requests are owned by the Corporate Security Helpdesk team. All onboarding, offboarding and ‚Ä¶\nCorpSec Change Management\nThis is a placeholder page. Please see the links below for any child pages that exist.\nCorpSec Helpdesk\nNeed Help? Visit the Corporate Security Support and/or Corporate Security Systems handbook page to ‚Ä¶\nCorpSec Infrastructure Services\nThis is a placeholder page. Please see the links below for any child pages that exist.\nCorpSec Mobile Devices (Phones and Tablets) Services\nOverview Many services that team members use such as Slack and Zoom have mobile applications that ‚Ä¶\nCorpSec Offboarding Services\nThis is a placeholder page. Please see the links below for any child pages that exist.\nCorpSec Onboarding Services\nThe Corporate Security Helpdesk provides day-to-day support and handles the provisioning of ‚Ä¶\nCorpSec Role Change Services\nThis is a placeholder page. Please see the links below for any child pages that exist.\nEmail Security Standards\nOverview Do not configure email forwarding of company emails (@gitlab.com) to a non-company email ‚Ä¶\nExternal Collaborators (Customers, Partners, Vendors)\nThis is a placeholder page. Please see the links below for any child pages that exist.\nIdentity Management Services\nThis is a placeholder page. Please see the links below for any child pages that exist.\nService Accounts\nThis is a placeholder page. Please see the links below for any child pages that exist.\nTemporary Service Provider Services (Contractor Users)\nThis is a placeholder page. Please see the links below for any child pages that exist.\nLast modified July 1, 2024:\nAdd Corporate Security handbook pages (\nb684cdaf\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 321}
{"doc_id": "d7ed853bc6f01e91", "url": "https://handbook.gitlab.com/handbook/customer-success", "title": "Customer Success | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nCustomer Success & Renewals at GitLab\nThe Customer Success department is part of the\nGitLab Sales\nfunction who partners with our customers to deliver value and positive business outcomes throughout their journey with GitLab.\nThe team can be reached in\nSlack channel\n(internal only).\nMission Statement\nTo deliver value to all customers by engaging in a consistent, repeatable, and scalable way across defined segments so that customers see the value in their investment with GitLab, and we retain and drive growth within our enterprise customers.\nThe mission of the Customer Success Department is to provide these customers with experience in order to:\nAccelerate initial customer value\nMaximize long-term, sustainable customer value\nImprove overall customer satisfaction & referenceability\nMaximize the total value of the customer to GitLab\nNorth Star Metrics\nOur top-level metrics are:\nRenewal Rate of ATR (available to renew)\nGrowth ARR\nCustomer Outcomes Realized\nCustomer Success Teams\nCustomer Success Manager handbook\nCustomer Success Engineer handbook\nCustomer Success Architect handbook\nRenewals Managers handbook\nDigital Strategy\nDigital Strategy handbook\nDemo Systems\nDemo Systems documentation\nCustomer Success Decision Tree\nCSMAE Decision Tree\n- internal only\nAccount Team\nThe account team is comprised of the Strategic Account Executive/Account Executive, Solutions Architect (Enterprise), and Customer Success Manager.\nMore information about the account team\nOverlap Between Solution Architects and Customer Success Managers or Architects\nSA owns 1) pre-sales technical evaluation and relationships prior to the initial sale and 2) tier upgrades and new business units (i.e., connected new) within an existing customer. CSM owns 1) post-sales customer relationship and 2) license upgrades within an existing customer.\nMore information on the transition and ownership between Pre-Sales and Post-Sales\nOther Resources\nEducation and Enablement\nAs a Customer Success team member, it is important to be continuously learning more about our product and related industry topics. The\neducation and enablement handbook page\nprovides a dashboard of aggregated resources that we encourage you to use to get up to speed.\nCustomer Success Playbooks\nSee the\nPlaybooks Page\nCustomer Workshops\nCSM-Created, Enablement Focus:\nAll CSM-created workshops\nCSE-Created, Enablement Focus:\nGitLab User Webinars and Labs\nUsing Salesforce within Customer Success\nVisit\nthis page\nfor more info on using Salesforce within Customer Success.\nUsing Gainsight with Customer Success\nVisit\nthis page\nfor more information on using Gainsight within Customer Success.\nDogfooding\nOutside of Engineering the Customer Success team has the largest concentration of tooling development capability. The team has unique needs that can‚Äôt always be solved by GitLab‚Äôs single\nDevOps platform\n. However, it is important to\ndogfood\nand avoid\ndogfooding anti-patterns\n. As a result the\nProduct organization heavily weights internal customers\nwhen considering prioritization. If you are considering building tooling in support of Customer Success priorities outside of GitLab, please follow the\ndogfooding process\n.\nCustomer Success AWS Test Account\nIn an effort to keep AWS spend down, initiatives are being taken to automatically clean up our AWS account. This account is primarily used as a proof of concept for IaC and creating demos for GitLab customers. An automated cleanup script is currently being tested that will tag, shutdown and delete old resources as they are no longer needed. The automation will:\nTurn off and Tag Un-named resources. When resources are created a ‚ÄúName‚Äù tag should be created with a value that‚Äôs meaningful and indicates who deployed the resource. Example: {initials}-GitLabRunner\nNew Resources will be automatically tagged with a Discovered and Expiration tag\nThe Expiration tag is 14 days after the discovery. The script will only a tag an instance once. If you need additional time, please change the date to a reasonable date for cleanup (Add a month or two for prospective customers)\nIf a resource needs to be permanent please set termination protection on the instance. This should also include tagging the instance with an explanation on why it‚Äôs permanent and what its for\nOn expiration the resource will be shut off and left for 7 days\nIn 7 days if the instance is still off a snapshot will be taken and it will be terminated\nIf the instance is still on but the expiration has not been changed it will be terminated\nCustomer Success Tools and Scripts\nBy customer or internal request, we sometimes develop tools to automate certain GitLab tasks using the API. The resulting tools and scripts are publicly available for everyone to use and contribute to in the\nGitLab CS Tools group\n.\nNote:\nThose tools are not supported by GitLab Support.\nCommunities of Practice\nCommunity of Practice\nare cross-functional groups of SME‚Äôs (or aspiring to be!) within the CS organization dedicated to a topic within GitLab or the broader DevOps space. The goal is to build assets, best practices, demonstrations, and share experiences we learn from prospects and customers. In turn, CoP will build broader technical depth within our CS organization to better advise our customers and influence our product roadmap.\nCustomer Terrain Mapping Engagements\nTerrain Mapping discovery engagements provide customers with the benefit of GitLab‚Äôs experience with DevOps methodologies, Git, GitLab, CI, CD, and monitoring by brainstorming a high level, first draft discovery of the elements of a success plan to address various challenges. They are also mapped to professional services that can help with some of the elements identified in the engagement.\nSee the\nTerrain Mapping Engagements Page\nFrequently Asked Questions\nCustomer Success team members maintain a\nto keep questions customers ask documented in a place where everyone can view and contribute to.\nCustomer Success resource links outside handbook\nCustomer Reference Sheet\nSales Collateral\nGitLab University\nOur Support Handbook\nCustomer Collaboration Project template\nGitLab Demo Portal\nWorkflow SA Demo Scenarios\n(Internal Only)\nSA-Created - Hands-On Workshops\nOther Sales Topics\nSales Handbook\nSales Operations\nSales Skills Best Practices\nSales Discovery Questions\nEE Product Qualification Questions\nGitLab Positioning\nFAQ from prospects\nClient Use Cases\nProof of Value Guidelines\nAccount Planning Template for Large/Strategic Accounts\nSales Demo\nSales Development Group Handbook\nWith Whom to Talk to Ask Questions or Give Feedback on a GitLab feature\nCustomer Success Meetings\nCustomer Success has a few standing meetings:\nCS Team Monthly All-Hands - Monthly on the second Wednesday\nCS Skills Exchange - once or twice Monthly\nThe different groups within CS also have standing meetings, including meetings for the Customer Success teams and Renewal Managers, regional groups, and social calls.\nAccount Team\nThe account team works together to drive value, success, and growth for a customer\nAPJ Customer Success\nThe APJ Customer Success department is part of the GitLab Sales function under the WW Customer ‚Ä¶\nCommercial Sales - Customer Success\nThe Commercial Sales segment consists of two sales teams, Small Business (SMB) and Mid-Market (MM)\nCustomer Health Scoring\nCustomer Account Scoring overview and methodology framework to improve our understanding of the customer's journey and their ROI attainment.\nCustomer Success Management Handbook\nThe Customer Success Management team at GitLab is a part of the Customer Success department, acting as trusted advisors to our customers and helping them realize value faster.\nCustomer Success Playbooks\nView the Customer Success homepage for additional Customer Success handbook content.\nCustomer ‚Ä¶\nCustomer Success Reporting and Dashboarding framework\nThis page describes the underlying philosophy and framework for how to consider and build toward the long term goal of effective and efficient reporting and dashboarding\nCustomer Success Vision\nCreate a company-wide customer success approach, providing an engagement framework for the Customer Success organization\nCustomer Success' Frequently Asked Questions\nCustomer Success FAQ Charter Team members in Customer Success face questions from customers every ‚Ä¶\nCustomer Terrain Mapping Engagements\nCustomer Terrain Mapping Engagements provide customers with the benefit of GitLab‚Äôs experience ‚Ä¶\nCustomer Workshops\nPlease reference the Workshops section on the Customer Success page for up-to-date information on ‚Ä¶\nDemo Systems\nThe GitLab Demo Systems provide infrastructure for the GitLab Customer Success, Marketing, Sales, and Training teams to demonstrate GitLab features, value propositions, and workflows in a variety of asynchronous and live capacities.\nEducational Services\nGitLab Product Training for Customer Success\nAs a Solutions Architect, Customer Success Manager, or Professional Services Engineer, it is important to be continuously learning more about our product and related industry topics. This handbook page provides an dashboard of aggregated resources that we encourage you to use to get up to speed.\nGitLab Quick Start for New GitLab.com Customers\nTasks to complete when your subscription starts\nInitiatives\nPartners\nProduct Usage Reporting Vision\nThe page outlines the current and planned utilization of operational data at GitLab, including Product, Sales, Customer Success, and Marketing.\nProfessional Services Team Handbook\nThe Professional Services team at GitLab is a part of the Customer Success department helping customers achieve value faster.\nPublic Sector\nRenewals Managers\nResources to get started with GitLab\nA 5-day plan to get started with GitLab\nSuccess Tiers\nThe Success Tier offerings are part of the Customer Success function that represent enhanced ‚Ä¶\nTransitioning Accounts from Pre-Sales to Post-Sales\nHow to effectively transition a customer from the pre-sales engagement to post-sales to ensure the customer is successful.\nUsing Salesforce within Customer Success\nUsing Salesforce within Customer Success (Current) Account Onboarding Customer Success Manager ‚Ä¶\nLast modified February 4, 2025:\nremove messed up description (\na40a9c89\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1523}
{"doc_id": "c092a93840b97245", "url": "https://handbook.gitlab.com/handbook/legal", "title": "Legal & Corporate Affairs (\"LACA\") | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nOur Mission\nWe leverage our versatile skill sets to drive positive outcomes for GitLab and our customers. Approachable and collaborative, LACA team members are trusted thought partners to our colleagues across GitLab, and facilitate efficient and informed decision making in all areas of the business.\nIn short: LACA ‚Äì We‚Äôre your one phone call.\nLegal & Corporate Affairs Functional Groups\nCommercial\nThe GitLab Legal\nCommercial\nteam is responsible for all contracting matters at GitLab, including procurement, revenue, channel, technical, and alliances, while partnering with sales, technical, and business stakeholders to ensure alignment with GitLab contracting standards and efficient execution timelines. The team supports GitLab‚Äôs go-to-market and procurement functions, providing knowledge and creativity in advising on contractual and regulatory matters to facilitate customer-centric results in accordance with the Company‚Äôs values.\nHelpful links:\nCommercial Legal Internal Handbook\nHighspot - GitLab Legal Hub\nCorporate & Compliance\nThe\nCorporate & Compliance\ngroup drives strategic results for GitLab via cross-functional relationships to support a climate of principled corporate governance and the company‚Äôs culture of compliance.\nCorporate Development\nThe\nCorporate Development\ngroup conducts diligent and thorough analysis to strategically identify, evaluate and execute potential acquisitions to accelerate the product roadmap and advance the company‚Äôs competitive position in the market.\nEmployment\nThe Legal\nEmployment\nteam serves as a strategic partner across the organization, providing expert guidance and proactive legal solutions throughout the entire team member lifecycle.\nEnvironment, Social, and Governance (ESG)\nThe\ngroup works cross-functionally to integrate ESG considerations, ESG regulatory compliance, and responsible business practices as part of GitLab‚Äôs overarching mission to make our customers successful.\nPrivacy, Product, and Intellectual Property\nThe\nPrivacy\nand\nProduct and Intellectual Property\ngroup enables fast-paced product development within applicable regulatory confines; privacy solutions so customers can confidently co-create in those products; and robust protection of Company IP.\nRisk Management and Dispute Resolution\nThe\nRisk Management and Dispute Resolution\ngroup directs GitLab‚Äôs unified, transparent and ethical approach to defending company interests while resolving disputes should they arise.\nStrategy and Legal Operations\nThe\nStrategy and Legal Operations\ngroup promotes continued process improvement such that LACA may be efficient and effective in its performance, including procurement of the most suitable tools and technology.\nHow to Reach Us\nFor quick questions that\ndo not\nrequire legal advice, deliverables, or any discussion of confidential information, you can reach out to LACA in Slack at\n#legal\n. We find this channel best for questions about process, who handles what, or how to find certain things if the handbook has not yielded the right result for you after searching. #legal is not a private channel, so your inquiry will be visible to the entire company. One of our team members will do their best to answer your question in a timely fashion.\nMost questions regarding specific customers require a legal case in Salesforce. Follow the process\nhere\nto open one.\nFor other questions related to deliverables and non-sensitive information, create an issue in the\nLegal and Compliance project\n. Be sure to use the template most suited to your request to engage the right team members.\nFor sensitive, private, or confidential matters, email\nlegal_internal@gitlab.com\n.\nAnonymous Internal Ethics and Compliance Reporting\nWe take employee concerns very seriously and encourage all GitLab team members to report any ethics and/or compliance violations by using\nEthicsPoint\n. Further details can be found in the\nPeople Group Handbook\nunder\nHow to Report Violations\nand in our\nCode of Business Conduct and Ethics\n.\nGitLab Policies\nSee\nGitLab‚Äôs Ethics and Compliance Program\nfor a list of policies, compliance standards, guidelines, and other resources.\nAuthorization Matrix\nThe\nAuthorization Matrix\ndesignates who is authorized to sign legal documents. Only GitLab team members with signature authority can execute agreements on behalf of GitLab.\nNon-Disclosure Agreements\nFollow the\nnon-disclosure agreement process\nto learn how to send an NDA (note there‚Äôs a separate process for\nnon-standard NDAs\n).\nNAVEX Compliance Courses\nFor information about compliance training, including new hire requirements, and tips for using the NAVEXEngage platform, see\nhere\n.\nFreedom of Information Act (FOIA) Requests\nWhat is a Freedom of Information Act (FOIA) request?\nThe Freedom of Information Act (FOIA) provides public access to all United States federal agency records except for those records (or portions of those records) that are protected from disclosure by any of\nnine exemptions or three exclusions\n(reasons for which an agency may withhold records from a requester). Occasionally the records of a federal agency under a FOIA request may include GitLab records in the possession of the agency (i.e., when the agency is a customer of GitLab). In such an event, the federal agency will notify GitLab of the FOIA request and provide GitLab with the documents that the federal agency intends to release in response to the FOIA request. A GitLab legal team member will review the list and content of the documents identified by the federal agency pursuant to the FOIA request and will provide the appropriate response and/or make redactions to those documents, as necessary, prior to their release.\nIn the event you receive a notification from a US federal agency pursuant to a FOIA request, indicating that GitLab documents or information have been identified for release by an agency, please immediately forward the request to\nFOIA@gitlab.com\n.\nAgile Planning Terms\n(Additional Terms)\nThese Agile Planning Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab Inc. with offices at 268 ‚Ä¶\nAgile Planning Terms V1\nDeprecated 2024-08-29\n(Additional Terms)\nThese Agile Planning Terms (‚ÄúTerms‚Äô‚Äô) are ‚Ä¶\nAI Functionality Terms\n(Additional Terms)\nThese AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab Inc. with offices at ‚Ä¶\nAI Functionality Terms V1\n(Additional Terms)\ndeprecated 2023-10-31\nThese AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) ‚Ä¶\nAI Functionality Terms V2\nDeprecated 2024-08-29\n(Additional Terms)\nThese AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) ‚Ä¶\nAI Functionality Terms V3\ndeprecated 2025-03-31\n(Additional Terms)\nThese AI Functionality Terms (‚ÄúTerms‚Äô‚Äô) are between GitLab ‚Ä¶\nAnti-Corruption Policy\nOverview of Anti-Corruption Policy\nAnti-Fraud Policy\nGitLab's Anti-Fraud Policy\nAnti-Retaliation Policy\nGitLab's Anti-Retaliation Policy to establish guidance for reporting ethics or compliance concerns or other inappropriate behavior while providing protection against retaliation for reporting in good faith.\nCode of Business Conduct & Ethics\nOverview of the Code of Conduct and Ethics at GitLab.\nCommercial Legal\nLanding page for Commercial Legal handbook information\nContent Removal Guidelines\nDMCA (Digital Millennium Copyright Act) takedown request requirements We take the intellectual ‚Ä¶\nContract Management and Storage\nThese instructions provide a step-by-step guide for GitLab Team Members on properly filing fully executed contracts and vendor-related documents in our designated storage systems.\nCorporate & Compliance Legal\nThis page offers a single source related to corporate legal information.\nCorporate Communications Policy\nOverview of the Corporate Communication Policy at GitLab.\nDORA (Digital Operational Resilience Act) Mapping\nHow GitLab addresses the key contractual requirements of the Digital Operational Resilience Act ‚Ä¶\nEU Illegal Content Report Form\nUse this form to report content that you believe is illegal in the European Union. This form is intended for individuals claiming legal rights in the EU, as well as individuals or entities designated as trusted flaggers pursuant to the EU Digital Services Act (DSA)\nExternal Materials Compliance Tips\nCompliance tips for developing materials for external use\nFulfillment Reseller Flow-Through Terms\nThese Fulfillment Reseller Flow-Through Terms (the ‚ÄúAgreement‚Äù) are made as of the date ‚Ä¶\nGitLab Acceptable Use Policy\nThis policy helps us identify unacceptable use of our services, and applies to all users of all ‚Ä¶\nGitLab API Terms of Use\nUnderstand your rights and obligations when using GitLab's publicly-available APIs\nGitLab Data Processing Addendum and Standard Contractual Clauses\nGitLab Data Processing Addendum\nGitLab for Education Program Agreement\nEducation Program Agreement Date of last revision: 2022/11/16\nThis Education Program Agreement ‚Ä¶\nGitLab for Open Source Program Agreement\nOpen Source Program Agreement Date of last revision: 2022/08/19\nThis Open Source Program Agreement ‚Ä¶\nGitLab Inc. Philanthropy Policy\nView GitLab's Philanthropy Policy\nGitLab Legal Team READMEs\nGet to know the Legal Team in our individual README pages\nGitLab Privacy\nThis page helps GitLab Team Members understand the privacy practices at GitLab and to facilitate a culture that respects and prioritizes the privacy of our Team Members and users\nGitLab Professional Services Terms\n(Additional Terms)\nThese Professional Services Terms (\"Terms\") are between GitLab Inc. ‚Ä¶\nGitLab Related Party Transactions Policy\nOverview of the Related Party Transactions Policy at GitLab.\nGitLab SAFE Framework\nOverview of the SAFE Framework at GitLab.\nGitLab Subscription Agreement\nSubscription Agreement This Subscription Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with offices ‚Ä¶\nGitLab Testing Agreement\n(Additional Terms)\nThis Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶\nGitLab Testing Agreement v1\nDeprecated: 2023-05-18\nThis Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶\nGitLab Testing Agreement v2\nDeprecated: 2023-06-29\nThis Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶\nGitLab Testing Agreement V3\nDeprecated 2024-08-29\nThis Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab Inc. with ‚Ä¶\nGitLab Testing Agreement v4\nDeprecated 2025-02-28\n(Additional Terms)\nThis Testing Agreement (‚ÄúAgreement‚Äù) is between GitLab ‚Ä¶\nGitLab's Ethics and Compliance Program\nMission GitLab Inc. (collectively with its subsidiaries,‚ÄúGitLab‚Äù, ‚Äúwe‚Äù, ‚Ä¶\nGitLab's Modern Slavery Act Transparency Statement\nThis is the current Modern Slavery Act Transparency Statement\nGuidelines for Use of Third-party IP in External Materials\nGuidelines for the use of third-party content in external materials\nGuidelines on public discussion of competitor product features\nThese guidelines govern how to discuss and reference competitor product features and screenshots in public issues, GitLab [documentation](http://docs.gitlab.com), and other public-facing media.\nLegacy Terms and Agreements\nLegal, Employment at GitLab: A Strategic Partnership\nEmployment law governs the relationship between employers and employees. At GitLab, the Legal ‚Ä¶\nMarketing Guide: Collaborating with GitLab Legal\nThis page provides educational resources and process guides to GitLab Marketing for recurring Legal requests\nMaterials Legal Review Process\nFollow this process to obtain legal review of materials for internal and external use\nNon-Disclosure Agreement Process\nHow to send or request an NDA\nPartner Code of Ethics\nGitLab Partner Code of Ethics and Due Diligence\nPatents\nLearn about Patents and GitLab's Patent Program\nPolicies\nProcess for UX Research Prize Draws\nProcurement Guide: Collaborating with GitLab Legal\nThank you for visiting! The purpose of this resource is to provide GitLab team members with ‚Ä¶\nProduct and Intellectual Property\nLegal Product and IP team page\nPublicity Waiver and Release Guidelines and Process\nGuidelines and process for use of Publicity Waiver and Release agreements\nRecord Retention Policy\nThis Records Retention Policy promotes and assists with the implementation of procedures, best practices, and tools to promote consistent life cycle management of GitLab records\nReseller Agreement\nBefore submitting a Deal Registration, please review the Master Partner Agreement.\nPLEASE READ THIS ‚Ä¶\nRisk Management and Dispute Resolution\nRMDR processes, policies, and resources\nThis resource provides assistance to the GitLab Sales Team on operational and educational elements of working with GitLab Legal for Customer negotiations\nStategy & Legal Operations\nThe Strategy & Legal Ops team promotes and institutes streamlined processes, efficient tools, ‚Ä¶\nSustainability\nInformation and processes related to Sustainability and ESG\nTechnology Partner Agreement\nPLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING ACCESSING OR CONSUMING THE SOFTWARE OR SERVICES ‚Ä¶\nTrade Compliance\nWhat are trade control laws? Trade control laws, which often consist of sanctions, export controls, ‚Ä¶\nTrademarks at GitLab\nTrademark information for GitLab team members\nUX Research Team Promotional Rules\nStandard Official Rules\nVendor Data Processing Addendum\nWhistleblowing at GitLab\nGitLab's Whistleblowing Handbook page, with links to whistleblowing policies.\nLast modified April 30, 2025:\nUpdate 'employment' wording on LACA HB page as part of LACA HB audit MRs (\n6223eef2\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1918}
{"doc_id": "82572d3035307819", "url": "https://handbook.gitlab.com/handbook/marketing/localization/engineering", "title": "Localization Engineering | The GitLab Handbook", "text": "The Handbook\nMarketing\nLocalization\nLocalization Engineering\nTechnical details of GitLab‚Äôs localization infrastructure and engineering processes.\nTechnical overview of GitLab‚Äôs localization infrastructure and engineering processes across documentation and product interfaces. Includes translation environments, branch management, development workflows, and preview systems for internationalized content.\nIteration Process\nWe start our iteration on a Tuesday. We release throughout the iteration. Iterations are 2 weeks long.\nSee our\nLocalization engineering iterations here\n.\nLabels and Workflow Boards\nWe use issue boards to track issue progress throughout an iteration. Issue boards should be viewed at the highest group level for visibility into all nested projects in a group.\nThe Localization team uses the following issue labels for distinguishing which part of the org the work belongs to and distinguishing between specialities:\nOrganization\nTitle\nDocumentation - docs.gitlab.com\n~\"L10n-docs\"\nMarketing - about.gitlab.com\n~\"L10n-mktg\"\nLocalization engineering work\n~\"l10n::engineering\"\nThe Localization team uses the following scope labels to categorize documentation engineering work.\nWhat & Current Issues\nTitle\nDocumentation engineering work to be triaged\n~\"l10n-docs-engineering::triage\"\nDocumentation engineering work required for launch\n~\"l10n-docs-engineering::launch-required\"\nDocumentation engineering work post launch\n~\"l10n-docs-engineering::post-launch\"\nIteration Board #9140637\nBoard:\nhttps://gitlab.com/groups/gitlab-com/localization/-/boards/9140637\nDisplays all issues with ~‚ÄúL10n::engineering‚Äù label assigned to current\nLocalization engineering iterations\nDocs Engineering (Stream) Boards #7828627\nBoard:\nhttps://gitlab.com/groups/gitlab-com/localization/-/boards/7828627\nTracks all documentation-related engineering tasks in the Localization project. This board displays all issues with both ~‚ÄúL10n-docs‚Äù and ~‚ÄúL10n::engineering‚Äù labels.\nInternationalized Documentation - docs.gitlab.com\nThe GitLab docs site is beeing enabled for internationalization, with initial support for Japanese translations.\nhttps://docs.gitlab.com/ja-jp/\nTranslation content sources\nTranslated content for\nhttps://docs.gitlab.com\nis pulled from separate\n/doc-locale/\ndirectories in the following repositories:\nGitLab\nOperator\nOmnibus\nRunner\nCharts\nTranslation environments\nWe maintain two separate environments that contain all projects used to compile docs.gitlab.com. These contain forks of the upstream projects.\nProduction environment\n:\nlocalization/tech-docs-forked-projects/prod/\nTest environment\n:\nlocalization/tech-docs-forked-projects/test/\nEach project within these environments maintains the following branch structure:\nmain\nUsed exclusively for pulling upstream changes into our fork. Do not contribute to this branch.\nmain-translation\nUsed for delivering translations from our Translation Management System (TMS). Do not contribute to this branch.\nTranslation Preview\nOur\nproduction fork\nof the\ndocs-gitlab-com\nproject includes a dedicated branch for internationalization development:\nmain-development\n‚Äì Our i18n feature development environment that:\nBuilds localized documentation routes\nEnables review apps using translations from production forks‚Äô\nmain-translation\nbranches\nAllows the team to review translations before upstream deployment\nThe setup is documented in this merge request:\nhttps://gitlab.com/gitlab-com/localization/tech-docs-forked-projects/prod/gitlab-docs/-/merge_requests/31\nThe review app provides a comprehensive testing environment that:\nConsolidates translated content from all five documentation repositories (GitLab, Operator, Omnibus, Runner, Charts)\nMaintains production-identical build pipelines\nLeverages Hugo‚Äôs built-in i18n features\nEnables pre-production review of internationalized documentation and feature development\nNote\n: The preview doesn‚Äôt automatically sync with\nmain-translation\nfork updates. To incorporate the latest translation changes, manually trigger a new pipeline.\nEnabling i18n in Production\nThe i18n features are now deployed to production. To toggle the translated site:\nEdit\nconfig/_default/hugo.yaml\nChange the language setting:\nlanguages.ja-jp.disabled\n:\nfalse\nThis single configuration change activates/deactivates the entire translated documentation site.\nReview workflow\nThe process of reviewing merge requests by the Localization Engineering team aligns with the GitLab\nCode Review Guidelines\n.\nLocalization Engineering team reviews each other‚Äôs merge requests and\nTranslation MRs\n. Translation MRs are created by\n@gitlab-argo-bot\nwhen translations are complete in Argo for the Marketing website and GitLab product documentation.\nLocalization Engineering helps review MRs that are authored in Decap CMS by the Localization Content Managers who own and maintain\nBlog\nin multiple languages. Blog update MRs from Decap are typically content-only changes that help with deployment agility and can use lightweight review processes. Content Managers may request a review from a Localization Engineer or a\nDigital Experience (DEX)\nengineer for complex changes, code, or troubleshooting.\nReview of GitLab product documentation Translation MRs\nWork in progress guidelines\nLocalization engineering by partnership with Spartan Software\nThe Localization team partners with\nSpartan Software, Inc.\nto develop and maintain the\nlocalization request management system\nand a suite of microservices and integrations. Spartan Software engineers and architects provide specialized expertise in language technology platforms and integrations.\nThe suite of various integrations, components and microservcies is referred to by the overarching term of\nArgo\n. See high level architecture\nhere\n, and the GitLab-specific architecture\nhere\n.\nEngineering labels and workflow related to Argo\nWe use the following scoped labels to track Argo engineering work performed by Spartan Software:\nLabel\nPurpose\nUsage\nArgo-Engineering\nCore Argo enhancements requiring engineering work from Spartan Software\nApplied to all Argo development work\nArgo-Engineering::Complete\nEnhancement completed and deployed to production\nApplied when Spartan delivers finished work\nArgo-Engineering::In Progress\nActive development work being performed by Spartan\nApplied when development starts on an enhancement\nArgo-Engineering::Ready for Deployment\nDevelopment complete, enhancement ready for review and deployment\nApplied when Spartan completes development and testing\nArgo system components\nArgo serves as GitLab‚Äôs centralized localization technology and management infrastructure, encompassing:\nRequest Management System\n: centralized intake and tracking of localization requests across all GitLab content types, both manual or automatic via integrations\nTranslation Management System integrations\n: automated connections between GitLab systems and commercial TMS platforms (Phrase, TranslationOS, Contentful, etc.)\nArgo GitLab Agent\n: a purpose-built microservice / component of the Argo ecosystenm for specialized localization-related tasks, such as translatable file pre- / post-processing, etc.\nArgo-GitLab Integration\naka\nGitLab Translation Service\n: direct integrations with GitLab projects, merge request workflows, and CI/CD pipelines\nArgo engineering board\nThe\nArgo Development board\nboard displays all issues with\nArgo-Engineering\nlabels and provides visibility into:\nCurrent development work in progress by Spartan Software\nCompleted enhancements ready for deployment by using relevant\nmilestones\nPlanned Argo system improvements and integrations\nCommunication channels\n#spartan-software\n: Direct Slack communication channel with Spartan Software engineering team\nTechnical coordination occurs through GitLab issues tagged with appropriate Argo-Engineering labels\nThis partnership enables the Localization team to maintain sophisticated translation infrastructure while focusing internal engineering team on core localizability, feature development and enhancements for marketing website, GitLab product documentation, and GitLab product.\nLast modified July 15, 2025:\nAdd MR review guidelines to L10n handbook (\n8871e624\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 999}
{"doc_id": "cfb2991e891b70e6", "url": "https://handbook.gitlab.com/handbook/legal/dmca", "title": "Content Removal Guidelines | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nContent Removal Guidelines\nDMCA (Digital Millennium Copyright Act) takedown request requirements\nWe take the intellectual property rights of others seriously and require that our users do the same. The Digital Millennium Copyright Act (DMCA) established a process for addressing claims of copyright infringement. If you own a copyright or have authority to act on behalf of a copyright owner and want to make a claim that a third party is infringing that copyright on or through GitLab‚Äôs services, send a notice that meets the minimum requirements of the DMCA to\ndmca@gitlab.com\n, and we will take appropriate action.\nDMCA notice requirements\nYou must include:\nIdentify the copyrighted work.\nA description of the copyrighted work that you claim is being infringed;\nIdentify the allegedly-infringing material.\nA description of the material you claim is infringing and that you want removed or access to which you want disabled and the URL or other location of that material;\nBe as specific as possible. If you believe less than the whole project infringes, identify the specific project, file, or line numbers within a file a user would need to delete in order to remedy the infringement.\nGitLab will not automatically disable forks of a project unless they are explicitly identified within the notice you send. It is your responsibility to determine that the material identified, including any fork(s) included in a notice, independently meet the notice requirements.\nProvide contact information.\nYour name, title (if acting as an agent), address, telephone number, and email address;\nInclude the following statement:\n‚ÄúI have a good faith belief that the use of the copyrighted material I am complaining of is not authorized by the copyright owner, its agent, or the law (for example, as a fair use)‚Äù;\nInclude the following statement:\n‚ÄúThe information in this notice is accurate and, under penalty of perjury, I am the owner, or authorized to act on behalf of the owner, of the copyright or of an exclusive right that is allegedly infringed‚Äù; and\nSignature.\nAn electronic or physical signature of the owner of the copyright or a person authorized to act on the owner‚Äôs behalf.\nSubmissions under this DMCA Policy should be sent to\ndmca@gitlab.com\n.\nWe will review your submission and take whatever action we deem appropriate under the DMCA, including the removal of the challenged content from the website. Furthermore, we may, in appropriate circumstances, disable access or terminate the account(s) of the reported user(s).\nDMCA counter-notice requirements\nThe owner of the allegedly-infringing content may submit a DMCA counter-notice to\ndmca@gitlab.com\n. The counter-notice must comply with the requirements of the DMCA, and must include the following:\nContact Information.\nYour name, title (if acting as an agent), physical address, email address, and phone number;\nContent Identification.\nA reasonable identification of the material that has been removed or to which access has been blocked;\nStatement under Perjury.\nInclude the following statement: ‚ÄúI swear, under penalty of perjury, that I have a good faith belief that the material was removed or disabled as a result of mistake or misidentification of the material to be removed or disabled‚Äù;\nConsent to Jurisdiction.\nInclude one of following statements (as appropriate):\nIf based in the United States:  ‚ÄúI consent to the jurisdiction of the Federal District Court for the judicial district in which my provided address is located‚Äù\nIf based outside of the United States: ‚ÄúI consent to the jurisdiction of any United States Federal District Court in which GitLab may be found‚Äù\nConsent to service of process.\nInclude the following statement: ‚ÄúI will accept service of process from the person who provided the original notification or an agent of such person‚Äù; and\nSignature.\nAn electronic or physical signature of the owner of the copyright or the person authorized to act on the owner‚Äôs behalf.\nWe will review the counter-notice, and:\nif the counter-notice doesn‚Äôt satisfy the DMCA requirements, we‚Äôll request a revised submission; or\nif the counter-notice is complete and valid, we‚Äôll forward the counter-notice to the person who filed the original takedown notice, advising that the challenged content will be reinstated within 10-14 business days, unless we receive a notification that the copyright owner is seeking a court order regarding this matter.\nAnti-Circumvention Technology\nThe DMCA prohibits the circumvention of technical protection measures that prevent access to copyrighted works. If you believe that content hosted on GitLab violates this prohibition, send a complaint to\ndmca@gitlab.com\n. The complaint should include the following:\nIdentify the copyrighted work.\nA description of the copyrighted work that is being protected by the technical measure;\nIdentify the alleged circumventing content.\nBe sure to include detailed statements that describe:\nWhat the technical protection measures are;\nHow the technical protection measures effectively control access to the copyrighted work; and\nHow the content hosted on GitLab is designed to circumvent those technical protection measures.\nProvide contact information.\nYour name, title (if acting as an agent), address, telephone number, and email address;\nInclude the following statement:\n‚ÄúI have a good faith belief that the use of the copyrighted material I am complaining of is not authorized by the copyright owner, its agent, or the law (for example, as a fair use)‚Äù;\nInclude the following statement:\n‚ÄúThe information in this notice is accurate and, under penalty of perjury, I am the owner, or authorized to act on behalf of the owner, of the copyright or of an exclusive right that is allegedly infringed‚Äù; and\nSignature.\nAn electronic or physical signature of the owner of the copyright or a person authorized to act on the owner‚Äôs behalf.\nWe will review your complaint and take whatever action we deem appropriate under the DMCA, including the removal of the challenged content. Furthermore, we may, in appropriate circumstances, disable access or terminate the account(s) of the reported user(s).\nTrademark takedown request requirements\nIf you want to report content on GitLab that you believe infringes your trademark, provide the following information:\nDetails of the original trademark (and a description if it‚Äôs a logo).\nA list of the countries in which the trademark is registered.\nThe registration number(s) of the trademark.\nA scanned copy of the trademark registration certificate(s) or screenshot of the registration on the website or database of the applicable national intellectual property office(s).\nA declaration of the following statement: ‚ÄúBy submitting this notice, I state that I have a good-faith belief that the reported use, in the manner that I have complained of, is not authorized by the intellectual property rights owner, its agent or the law; that the information contained in this notice is accurate; and, under penalty of perjury, that I am authorized to act on behalf of the owner of the intellectual property rights at issue‚Äù.\nYou can send this information to\ndmca@gitlab.com\n, you should receive an automated confirmation of receipt.\nNamespaces and other disputes\nDisputes regarding namespaces, ownership and trademarks are not governed by DMCA. These disputes must be resolved by the parties involved. GitLab will never act as arbitrators or intermediaries in these disputes and will not take any action without the appropriate legal orders.\nFor more information, see our\nNamespace and Trademark Policy\nand\nOwnership Dispute Policy\nEU Illegal Content Reporting\nThe DSA requires hosting services to provide a method for people to report content that is potentially illegal in the EU.\nPlease use the\nDSA form\nto report content that you believe is illegal in the European Union. This form should be used by individuals claiming legal rights in the EU, as well as individuals or entities designated as trusted flaggers pursuant to the DSA. Trusted flagger reports will be prioritized for review, in accordance with the DSA. We also ask individuals who report potentially illegal content in the EU to provide clear and concise information in English, or provide an English translation, wherever possible.\nGitLab may restrict access to content determined to violate the law(s) of the EU country specified in your report. If you want to report a potential violation of GitLab‚Äôs\nAcceptable Use Policy\nor\nCommunity Code of Conduct\npolicies rather than an EU legal violation, please refer to\nthis guide\non how to report abuse. Note that if you don‚Äôt have a GitLab account, you can report potential violations by contacting the GitLab Trust and Safety team at\nabuse@gitlab.com\n.\nMonthly active recipients in the European Union - Digital Services Act Article 24(2) Disclosure\nThe information below covers the reporting period from July 1, 2024 to December 31, 2024.\nAs of December 2024, GitLab.com has approximately 1,800,000 monthly average active recipients of the service in the European Union.\nFor non-logged-in users, our tracking relies on standard web analytics technologies. This methodology has inherent limitations, as users who access GitLab from multiple devices or browsers, or who have certain privacy settings enabled, may be counted more than once in our calculations. Conversely, multiple users sharing the same device might be undercounted. This means our reported number represents our best estimate of unique recipients based on available data. This approach is consistent with the DSA‚Äôs guidance that providers should not perform specific tracking of individuals online to avoid double counting.\nThis information is provided solely to satisfy the requirements of the DSA and should not be used for any other purpose. This information may differ from user metrics, such as registered users, reported in other contexts.\nLast modified May 13, 2025:\nDSA update.md (\nbab86697\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1572}
{"doc_id": "0d7a62777ee4a0f7", "url": "https://handbook.gitlab.com/handbook/support/license-and-renewals/workflows/self-managed/creating_licenses", "title": "Creating a license key | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nLicensing & Renewals\nLicensing & Renewals Workflows\nSelf Managed\nCreating a license key\nHow to create a GitLab license key\nOverview\nYou will frequently need to generate a new license key due to either user error or system error.\nSelf-managed licenses are managed in\nCustomersDot\n.\nAccess to the application is managed through Okta, in order to request access please open an\naccess request\nand refer that your role entitles you to access with\nthis link\n.\nLicense types\nAn overview of the different licenses types can be seen in this\nhandbook page\n(internal only).\nThe type of the License object associated to a subscription version can be identified by using the info below:\nLicense type\nTurn On Cloud Licensing\nCloud License\n‚ÄòYes‚Äô\nOffline License\n‚ÄòOffline‚Äô\nLegacy License\n‚ÄòNo‚Äô or null\nDuplicate a license\nTo re-issue a license:\nLog in to the\nCustomerDot\n.\nIdentify the license by searching by customer email or company name.\nClick\nDuplicate license\nbutton on the right (looks like the copy symbol).\nNote:\nOnly Legacy Licenses can be duplicated as of today.\nSelect the correct license type (see\nLicense Type Overview\nfor more info).\nModify the values you need. Be careful not to change the\nCustomer\nfield.\nNote:\nChanging the\nCustomer\ncauses the inputs for name, email and company to be overriden on creation with the selected customer‚Äôs information. This is a bug that will be addressed in\nhttps://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3566\n.\nIn the\nNotes\nfield, describe why you‚Äôre issuing this license and add a link\nto the Zendesk ticket or GitLab issue for the request if applicable.\nIf working on a GitLab issue, add the label\nManually Generate Trial License\n(for trials) or\nManually Generate License\n.\nClick\nSave\n.\nThe license should be emailed out immediately. Please note that a license should always be sent to the end user.\nDo not email the license to a GitLab team member or a reseller.\nNote:\nIf you want to send the license to a different email address use\nthis handbook page\ninstead.\nWhen an existing license isn‚Äôt available to duplicate, use the\ncreate new license section\n.\nCreate a new license\nTo create a new license, click\nAdd new License\nthen follow the process listed below for creating a\nLegacy License\nor\nOffline Cloud License\n.\nNote:\nDepending on the selected license type, different fields are required. Please see the required fields section\nfor each license type for more information.\nWhen filling in the Zuora subscription ID (depending on the type‚Äôs requirement), the subscription‚Äôs existence is checked against Zuora and will fail if it‚Äôs not found.\nWhen the Zuora subscription ID is filled, the subscription name will be automatically set on license creation.\nCreate a Legacy License\nSelect\nLegacy License\nin the\nLicense type\ndrop down.\nFill in the Zuora subscription ID.\nNote:\nThese fields are not required for Legacy Licenses but should be filled out by Support.\nFill in other fields.\nIn the\nNotes\nfield, describe why you‚Äôre issuing this license and add a link\nto the Zendesk ticket or GitLab issue for the request if applicable.\nIf working on a GitLab issue, add the label\nManually Generate Trial License\n(for trials) or\nManually Generate License\n.\nClick\nSave\n.\nRequired fields\nCurrently the following fields are required for a Legacy License:\nLicense type\nName\nCompany\nEmail\nUsers count\nPlan code\nStarts at\nExpires at\nRequired to be filled by Support:\nCustomer\nZuora subscription ID\nNotes\nCreate an Offline Cloud License\nWhen creating an Offline License, the following has to be present beforehand:\nThe filled in Zuora subscription has to be cloud license compatible (the\nTurn on seat reconciliation\nfield is present).\nThe filled in Zuora subscription has to be an Offline Cloud License or a disabled Cloud License (\nTurn On Cloud Licensing\nset to\nOffline\nor\nNo\n).\nAn activation code has to exist for the subscription (usually created via a callback to CustomersDot when the Zuora subscription is created).\nSelect\nOffline Cloud\nin the\nLicense type\ndrop down.\nSelect the customer in the\nCustomer\nfield.\nNote:\nThis field is required for Offline Cloud Licenses.\nFill in the Zuora subscription ID.\nNote:\nThese fields are required for Offline Cloud Licenses.\nFill in other fields.\nIn the\nNotes\nfield, describe why you‚Äôre issuing this license and add a link\nto the Zendesk ticket or GitLab issue for the request if applicable.\nIf working on a GitLab issue, add the label\nManually Generate Trial License\n(for trials) or\nManually Generate License\n.\nClick\nSave\n.\nRequired fields\nCurrently the following fields are required for an Offline Cloud License:\nLicense type\nCustomer\nName\nCompany\nEmail\nZuora subscription ID\nUsers count\nPlan code\nStarts at\nExpires at\nRequired to be filled by Support:\nNotes\nCreate an Online Cloud License\nWith\nStrict Cloud Licensing\n, Online Cloud Subscriptions only\nsend out an activation code. A license will no longer be supplied. Hence, license creation for this type is\nnot supported.\nLast modified June 18, 2025:\nCorrect link to internal handbook page (\nfc282085\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 847}
{"doc_id": "fb6979f826464532", "url": "https://handbook.gitlab.com/handbook/legal/trade-compliance", "title": "Trade Compliance | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nTrade Compliance\nWhat are trade control laws?\nTrade control laws, which often consist of sanctions, export controls, and import laws, govern how and under what circumstances technology, software, and technical assistance may be exported. Trade control laws vary from country to country but usually exist to protect national security and further foreign policy and economic interests.\nUnder United States law, exports, re-exports, and transfers, can take many forms, including oral, written, and visual disclosure, physical shipment, and electronic transfer or transmission. An export can also occur when technology, software, or technical assistance is transmitted to U.S. nationals abroad, or to non-U.S. nationals located within the United States. The export of certain software, technology, or technical assistance to certain countries, certain end users, or for certain end uses, may require authorization from the United States government prior to export, re-export, or transfer.\nHow do trade control laws apply to GitLab Software?\nGitLab Enterprise Edition, related technology, and services (collectively, ‚ÄúGitLab Software‚Äù), are subject to the Export Administration Regulations (‚ÄúEAR‚Äù), administered by the U.S. Department of Commerce, Bureau of Industry and Security (‚ÄúBIS‚Äù), and various sanctions programs administered by the U.S Treasury Department‚Äôs Office of Foreign Assets Control (‚ÄúOFAC‚Äù). The GitLab Community Edition is freely available to the public and is not subject to the EAR. GitLab continuosly monitors developments to these regulations to maintain compliance and to leverage any opportunity to broaden access to GitLab in a compliant manner that allows everyone to contribute.\nThe GitLab Software has been classified via CCATS G178430 as a 5D992.c mass market encryption product with eligibility for export to most destinations under 15 CFR 740.17(b)(1) of license exception ENC. GitLab users may not export, re-export, or transfer GitLab Software, without first obtaining authorization from the U.S. government, to (a) any U.S. embargoed country including but not limited to Cuba, Iran, North Korea, Syria, Russia, Belarus, and the Crimea, Donetsk, and Luhansk regions of Ukraine, (b) any party identified on OFAC‚Äôs Specially Designated Nationals and Blocked Person list or the Department of Commerce Denied Persons, Entity, or Unverified lists, or (c) for end use involving sensitive nuclear, rocket systems, unmanned aerial vehicles, missiles, chemical or biological weapons, or for any other end use prohibited by 15 CFR 744.\nGitLab provides this information, which is subject to change without notice, to facilitate GitLab users‚Äô compliance with applicable trade control law. GitLab users remain solely responsible for exporting, re-exporting, and transferring GitLab Software and any user-developed content in accordance with those regulations and should seek legal counsel as necessary.\nResources\nOFAC Sanctions Programs and Country Information\nCommerce Control List\n15 CFR 740.17 Encryption Commodities, Software, and Technology ‚ÄúENC‚Äù\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 466}
{"doc_id": "41be1cb4453db188", "url": "https://handbook.gitlab.com/handbook", "title": "The Handbook | The GitLab Handbook", "text": "The Handbook\nIntroduction\nThe GitLab team handbook is the central repository for how we run the company. Printed, it consists of over\n2,000 pages of text\n. As part of our value of being\ntransparent the handbook is\nopen to the world\n, and we welcome\nfeedback. Please make a\nmerge request\nto suggest\nimprovements or add clarifications. Please use\nissues\nto\nask questions.\nFor a very specific set of\ninternal\ninformation we also maintain an\nInternal Handbook\nHandbook Contents\nCompany\nAbout GitLab\nHistory\nValues\nMission\nVision\nCommunication\nYouTube\nZoom Webinars\nCulture\nAll-Remote\nLife at GitLab\nGitLab Contribute\nTeam\nOnly healthy constraints\nTeamOps\nCEO Readme\nCEO Shadow Program\nCadence\nE-Group Offsite\nKPIs\nPricing Model\nOffice of the CEO\nE-Group Weekly\nEnvironmental, Social, and Governance\nHandbook\nAbout the Handbook\nHandbook Changelog\nHandbook Escalation\nHandbook Usage\nContribution Guide\nEditing the handbook\nHandbook Style Guide\nHandbook maintenance\nPeople Group\nAnti-Harassment Policy\nGlobal Volunteer Month\nHiring\nGreenhouse\nInterviewing\nJobs FAQ\nInclusion & Diversity\nAlly Resources\nGender and Sexual Orientation Identity Definitions and FAQ\nUnconscious Bias\nLabor and Employment Notices\nLeadership\nLearning & Development\nOnboarding\nOffboarding\nSpending Company Money\nTravel\nVisas\nTalent Assessment\nTeam Member Relations Philosophy\nTotal Rewards\nBenefits\nIncentives\nPaid time off\nCompensation\nEquity Compensation\nTools and Tips\nSearching the GitLab Website Like a Pro\nEngineering\nCustomer Support Department\nDevelopment Department\nDev Sub-department\nFulfillment Sub-department\nOps Sub-department\nSoftware Supply Chain Security Sub-department\nSecure Sub-department\nInfrastructure Department\nDeveloper Experience\nEngineering Productivity\nSecurity Practices\nOpen Source\nSecurity\nSecurity Standards\nProduct Security\nSecurity Operations\nThreat Management\nSecurity Assurance\nMarketing\nTeam Member Social Media Policy\nBlog\nBrand and Product Marketing\nBrand\nMerchandise Handling (Swag)\nProduct and Solution Marketing\nDemos\nCore Product Marketing\nCompetitive intelligence\nCustomer Advocacy\nDesign\nContent\nEnterprise Data\nIntegrated Marketing\nField Marketing\nChannel & Alliances Marketing\nCorporate Events\nAccount Based Marketing\nCampaigns\nLifecycle Marketing\nDigital Strategy\nDigital Experience\nSales Development\nMarketing Operations and Analytics\nMarketing Operations\nMarketing Strategy & Analytics\nGrowth\nDeveloper Relations\nCommunity Programs\nDeveloper Advocacy\nContributor Success\nCorporate Communications\nAnalyst Relations\nSpeaking Resources\nIncident Communications Plan\nSales\nAlliances\nCommercial\nCustomer Success\nCustomer Success Management\nReseller Channels\nField Operations\nSales Operations\nDeal Desk\nData Intelligence\nField Enablement\nSales Strategy\nSales Systems\nReporting\nSolutions Architecture\nFinance\nAccounts Payable\nAccounts Receivable\nBusiness Technology\nExpenses\nFinancial Planning & Analysis\nPayroll\nProcurement\nTax\nBoard meetings\nInternal Audit\nSarbanes-Oxley (SOX) Compliance\nEquity Compensation\nProduct\nRelease posts\nAbout the GitLab Product\nBeing a Product Manager at GitLab\nProduct Principles\nProduct Processes\nProduct sections, stages, groups, and categories\nProduct Development Flow\nProduct Development Timeline\nData for Product Managers\nProduct Pricing Model\nCorporate Development / Acquisitions\nUX Department\nTechnical Writing\nUX Research\nProduct Design\nLegal and Corporate Affairs\nCommercial\nCorporate\nCorporate Development\nEmployment\nEnvironment, Social, and Governance (ESG)\nOperations\nPrivacy\nProduct\nRisk Management and Dispute Resolution\nTrade Compliance\nTake GitLab for a spin\nSee what your team could do with The DevSecOps Platform.\nGet free trial\nHave a question? We're here to help.\nTalk to an Expert\nLast modified April 10, 2025:\nFix broken links (\n7fbeab40\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 503}
{"doc_id": "b6b5727f503b514d", "url": "https://handbook.gitlab.com/handbook/ceo/office-of-the-ceo", "title": "Office of the CEO | The GitLab Handbook", "text": "The Handbook\nOffice of the CEO\nDetails about Office of the CEO (OCEO) at GitLab\nOffice of the CEO Overview\nGitLab is a\nfunctionally organized\ncompany in which functions are as mutually exclusive as possible to be efficient. Without a COO or central operating department reporting into the CEO, the CEO gets leverage through an\nOffice of the CEO\n(OCEO for short) led by the Chief of Staff (CoS) to the CEO. While the Chief of Staff to the CEO is not a part of GitLab‚Äôs executive team, this senior person reports directly to the CEO and manages a team that supports the CEO and/or cross-functional projects of importance to GitLab.\nTeam Mission\nHelp the CEO be more effective and lead select cross-functional initiatives of importance to GitLab.\nTeam Composition\nThe\nOffice to the CEO\nconsists of:\nThe\nChief of Staff to the CEO\n: the person responsible for running this group and supporting the success of the CEO.\nStrategy and Operations team members\n: internal consultants and doers who support priority cross-functional projects within GitLab. Roles vary based on business needs, but these folks can be specialists (for example, focused on China or technology) or generalists.\nWhen there are gaps, the Office may expand to include additional roles and responsibilities. For example, at times this Office has included our\nTeamOps\ninitiative,\ninternal communications\n, and\nhandbook maintenance\n. As GitLab is a functionally organized company, the goal in most cases is to own an area until another function is prepared to own and support it.\nThe size of the team and which positions are present have varied over time depending on CEO priorities and required resources. For a list of current OCEO team members, please refer to the\ncompany team page\n.\nKinds of projects Strategy and Operations team members work on\nGiven the cross-functional nature of the company goals and given these projects are important to the CEO, the Strategy and Operators team members are often involved in these initiatives.\nProject Criteria\nThe Chief of Staff to the CEO and their team may work on projects that fit\nany combination\nof the following:\nprojects which build or improve organizational design, infrastructure, and operations\ncross-functional projects that need ownership until a maintainer or exit criteria is identified\nprojects that are so broad that they can‚Äôt live within a function but are too much work for the CEO or Chief of Staff to the CEO\nprojects that are important to the CEO\nThis is not an exhaustive list of the types of work the Office of the CEO might do.\nMany Functional\nGitLab is a\nfunctional organization\n, which means the\npeople are organized by function\n.\nWhen a cross-functional project arises between multiple different Departments, Office of the CEO team members may be included to help with the planning and execution.\nIn many cases, a member of the Office of the CEO will be the\ndirectly responsible individual (DRI)\nfor the project.\nWhether it‚Äôs a product feature proposal, a new initiative roll-out, or questions from the board, the Office of the CEO is the group that can be trusted to get things done, get them done quickly, and get them done right.\nExamples of a cross-functional project:\nHelping shepherd KPI and/or OKR progress\nHelping to launch a foreign entity\nSupporting pricing and packaging change initiatives\nEfforts to increase customer use case adoption\nProviding guidance around how to use GitLab‚Äôs\ninternal handbook\nUnder-resourced\nProjects come up that are both important and under-resourced.\nThe Strategy and Operations team members within the Office of the CEO should be known for its ability to become 80% effective on any subject quickly.\nThey are generalists at their core and, while they bring special skills to the table, they are meant to be able to address important problems as they come up.\nA member of the Office of the CEO might help source candidates for a strategic hire, fix grammatical errors in the handbook, and build a financial model all in the same day based on what is important or top of mind for the CEO at a given point.\nThe team helps with work that other teams may not have the bandwidth to do but is important to the organization and/or the CEO.\nExamples of an under-resourced project:\nCreating materials for a keynote the CEO will deliver in a rushed timeline\nSupporting planning for a global conference\nSupporting launch of a new SKU\nNo clear leader\nThere may be projects with no clear leader for a myriad of reasons, including that we‚Äôre still hiring the point person or the lead is on leave.\nBecause of the team‚Äôs ability to come up to speed quickly, they may be tasked with something totally out of their domain with the expectation that they bring their leadership experience to the table, will do the work to make good decisions, and will lean on team members who are subject-matter experts.\nFor example, there has historically been no DRI for the\nhandbook or related content sites\n. As it became clear that this was a GitLab priority, but no function planned to prioritize this within the coming year, the Office of the CEO stepped in to take on handbook ownership until an owner could be identified.\nExamples of projects with no clear leader:\nManaging our ongoing relationship with\nJiHu\nin China\nStepping in to fill a senior level role in another function in a temporary capacity\nBroad\nSome projects or initiatives are very broad and cross-functional and\nmake sense\nto belong to the CEO but would be inefficient uses of the CEO‚Äôs time if fully owned by the CEO.\nThe Office of the CEO is the shepherd for these sorts of projects and collaborates with all team members at GitLab to achieve success on such initiatives.\nExamples of broad projects:\nE-group offsite prep\nBoard meeting prep\nOKR shepherding\nPlanning activities on behalf of the CEO\nImportant to the CEO\nThe CEO will have other projects that come up that they will task the Office of the CEO with, such as following up on something or carrying on a conversation on their behalf.\nExamples of tasks or initiatives that are important to the CEO:\nHandbook MRs\nValues updates\nPreparing for calls\nSpecial projects. These have included:\nOperationalizing charitable donations\nSupporting updates to GitLab‚Äôs expense policy\nQuantifying the value of transparency\nAuditing training resources and creating an accessible source of truth\nCalculating GitLab‚Äôs carbon emissions and leading a first iteration of a carbon reduction initiative\nIdentifying the underlying reasons for why we didn‚Äôt meet targets for a core GTM KPI and identifying optimizations\nSupporting an initiative to increase customer CI adoption\nServing as the DRI for the\nSaaS free user initiative\nHow to Work\nMany of the tasks are quick asks: handbook MRs, formatting changes, or questions to be answered.\nSmall asks should be handled as quickly as possible.\nOther asks, such as OKR-related planning or an initiative that requires alignment with multiple stakeholders, require forethought and more appropriate timing.\nSome amount of time each week needs to be spent moving these sorts of tasks forward.\nAs a rule, everything in the doc is a TODO for the Office of the CEO.\nWhen tasks are DONE, they should be labeled as such.\nThe CEO will review and delete the item once it‚Äôs been assessed as completed.\nPrioritization\nSince the team has limited capacity to lean into everything that it may want or be asked to, it is thoughtful about team and individual capacity. Members of the Office of the CEO will be expected to manage both directed and leadership (largely self-directed) work. You can find definitions and examples of directed and leadership work on the\nCoS to the CEO handbook page\n.\nWhen newly initiated, self-directed, leadership work entails a significant time commitment (>20% capacity for more than a week), the work being done should be flagged to the CEO in a 1:1 or team meeting. This work should stay on the 1:1 agenda between the CoS to the CEO and the team member for the duration of the activity. If needed, activities may be reprioritized based on top demands and priorities.\nMore senior roles within the Office of the CEO can expect to have more leadership than directed work, but all roles should have a mix within a fiscal year.\nOffice of the CEO members should monitor the mix of directed and leadership work that they are doing and provide as appropriate in Office of the CEO Meetings, so the CoS to the CEO and CEO are aware of the current balance and can make adjustments, if needed.\nCollaborating on Cross-Functional Initiatives\nWhile there are rare exceptions, members of the Office of the CEO are not forever owners of initiatives. They plug in to help achieve critical milestones or fill gaps. When a member of the Office of the CEO joins an initiative, there should be agreement from key stakeholders around:\nThe level of support required\nThe Office of the CEO members‚Äô scope and responsibilities\nThe exit criteria for the Office of the CEO\nIf required, the long-term plan for ongoing initiative or project support\nOffice of the CEO members can be reassigned based on the needs of the business and priorities of the CEO. In most cases, a member of the Office of the CEO will remain with a project until the exit criteria for the Office of the CEO is achieved. If a project extends beyond its anticipated timeframe or priorities change, a member may have to leave a project before the agreed upon exit criteria is achieved.\nWhen a member of the Office of the CEO exits an ongoing initiative they will:\nProvide as much notice as possible that the Office of the CEO will no longer support the initiative\nDocument their key responsibilities\nSupport a project DRI in identifying new owners\nWhen possible, stay engaged in the initiative in a limited capacity during an agreed upon transition period\nThere may be instances in which the Office of the CEO leaving leads to a project scope being reduced or deprioritized. In these instances, the Office of the CEO member will be responsible for engaging key stakeholders around the keep/expand scope or go/no-go decision. It will be clearly documented and key folks will be involved in the decision and aware of the outcome.\nE-Group Offsite\nThe executives get together every quarter for the\ne-group offsite\n.\nThe CoS to the CEO plays an important\nrole\n.\nIt‚Äôs\n3 to 4 days long\nwith a\nFunctional Leaders Meeting\nwithin the following days.\nThere are\nrecurring discussion topics\nas well as a\ndiscussion on content\nchosen by the CEO.\nIn addition, the CoS to the CEO is responsible for preparing the CEO for offsites by:\nFinalizing the agenda to include CEO input\nWorking with the CEO on what to cover in offsite introductions and closings\nHelping the CEO to prepare for sessions that the CEO will facilitate\nManaging the Functional Leaders\nFunctional Leaders is a group comprised of all\nCEO-Skips\n, select People Business Partners, and a few other folks as nominated by members of E-Group.\nThe CoS to the CEO enables and manages this group.\nProgram managing JiHu\nA member of the Office of the CEO is the DRI within GitLab for the success of GitLab‚Äôs partnership with\nJiHu\n. Coordination with JiHu requires engagement from multiple functions within GitLab. The Office of the CEO ensures that the appropriate folks are engaged at the right times and that GitLab provides appropriate support to this separate entity.\nFor example, this member ensures that there is an aligned process among relevant GitLab functions after a customer requests to\ntransit to JiHu\n:\nAfter the Customer‚Äôs request of novation from GitLab to JiHu is approved, the member of the Office of the CEO opens a new issue as soon as the contract is issued, and assigns the issue to GitLab Accounting department.\nThis issue triggers the Accounting development to update SFDC, Zuora and NS.\nIf there is no issue raised in the month, it means there is no novation in that month.\nThis process takes effects from 2023-02-01, and replaces the previous process that an issue is created each month regardless whether there is novation in the month or not.\nOrganizational pulse\nDue to its cross-functional scope and access to information, the Office of the CEO is uniquely positioned to see what is happening across the company. Members of the Office of the CEO are encouraged to regularly have\ncoffee chats\nwith folks outside of the team and share key insights and feedback from these conversations.\nMeasuring results\nWe are evaluating different ways to measure our success as a team. These include:\nA company-wide team satisfaction score\nA pulse survey sent to a few targeted folks who have worked closely with the Office of the CEO team members in the past quarter\nScore against team quarterly goals\nScore on success in a few top initiatives within a quarter\nChief of Staff Shadow\nThe Chief of Staff to the CEO may occasionally have a Chief of Staff Shadow, a GitLab team member who will participate in a specific project or initiative for a fixed time. Depending on the project or initiative, the team member may spend most of their time with an Office of the CEO team member instead.\nShadow responsibilities could include: taking notes, providing feedback, and/or supporting the overall initiative success. This role would be in addition to any existing responsibilities at GitLab. Participants would opt in to experience another function within GitLab and contribute to a different part of the business. Since participation would be in addition to an existing workload, managers must sign off before a CoS to the CEO Shadow can participate. Interested team members can share their interest with the Chief of Staff to the CEO in the\n#ceo-chief-of-staff-team\nSlack channel. The CoS to the CEO will follow up with you to understand what you are looking to get out of the experience and review projects that may be a good match. If there is not an existing project, you will be kept in mind for future opportunities.\nOnce a project or initiative to Shadow has been identified and the team member decides to participate, the team member should open a merge request to add their name to the below table. The MR should be shared through Slack in the\n#ceo-chief-of-staff-team\nchannel for review and merge. Optionally, the team member can make use of the\ninternship for learning\nas a framework to guide the Shadow period.\nStart Date\nEnd Date\nFirst & Last Name\nGitLab Handle\nProject/Initiative\n2020-05-23\n2020-08-21\nMike Miranda\n@mmiranda\n2020-08-31\n2021-07-18\nJerome Ng\n@jeromezng\nJiHu\n2021-06-02\n2021-09-01\nSamantha Lee\n@slee24\nShadow Michelle Lee\n2023-03-06\n2023-11-01\nCynthia ‚ÄúArty‚Äù Ng\n@cynthia\nTeamOps\nand\nOKRs\n(internal links)\nImportant things to note\nThis is not a performance evaluation\nPlan to observe and ask questions.\nParticipating in the shadow program is a privilege where you will be exposed to confidential information. This is underpinned by trust in the shadows to honor the confidentiality of topics being discussed and information shared. The continuation of this program is entirely dependent on shadows past, present, and future honoring this trust placed in them.\nGive feedback to and receive feedback from the Chief of Staff to the CEO. Participants in the shadow program are encouraged to deliver\ncandid feedback\n. Shadows maintaining confidentiality during the program is separate from shadows being able to provide candid feedback.\nChief of Staff to the CEO Job Family\nStrategy & Operations Job Family\nGitLab Team Project\nTeam readmes\nEmbody Team\n#ceo-chief-of-staff-team\non Slack (GitLab Team Members only)\nGitLab / Google Groups\nThe Office of the CEO maintains a\nGitLab Group\nand\nGoogle Group\nto ensure the appropriate level of access is granted or removed as team members join and leave the team. The following mapping of permission levels from GitLab Groups to Google Groups is being used:\nOwner\n->\nOwner\nMaintainer\n->\nManager\nDeveloper\n->\nMember\nThere is no automatic syncing between these groups so Office of the CEO team members who have the appropriate permission level in each group should add or remove team members as they join and leave the team.\nGitLab Project\nThe primary project used by the Office of the CEO to track work specific to our team is\nOffice of the CEO\n. Please file issues here as needed to track work being done.\nEmbody Team\nThe Embody Team is a small team focused on experimental functionality.\nVision To discover and ‚Ä¶\nJiHu Support\nHow the GitLab Inc team provides support to JiHu\nOffice of the CEO READMEs\nLast modified July 10, 2025:\nRemove old work (\nd0c0fa97\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2793}
{"doc_id": "1654e1850ce168b9", "url": "https://handbook.gitlab.com/handbook/people-group/learning-and-development", "title": "Learning & Development | The GitLab Handbook", "text": "The Handbook\nPeople Group\nLearning & Development\nOverview\nPurpose\nWhy we exist:\nGitLab Talent Development (commonly referred to as ‚ÄúLearning & Development‚Äù) exists to enhance team member performance, expand capabilities, and further develop skills that make GitLab team members the top talent in the industry. We strive to foster a culture of continous growth so that GitLab remains a great place to work. Positive impact on team member experience leads to a positive impact on results, which leads to a positive impact on GitLab customers.\nVision\nWhere are we going:\nGitLab seeks to be recognized as a top organization for remote learning & development. We aim for a future where\neveryone contributes\nto a culture of curiosity.\nMission\nWhat we do:\nWe empower individual contributors and equip leaders through self-service learning. We accomplish a culture of development by:\nFocusing on skill-based learning\nProviding resources to improve career mobility\nDeveloping learning journeys for teams throughout the organization\nObjectives\nPerformance indicators\nReduce voluntary attrition by 5% each year by measuring\nexit survey data\nrelated to career development\nSecure a 5% increase in the Growth & Development category of the\nannual engagement survey\nIncreased access to career mobility: internal transfers,\npromotions\n, job shadows, intern for learning, and professional development\nClear evidence of best in class remote learning & development (i.e.\nBrandon Hall Awards\n, Industry Speaking Events, Thought Leadership articles, etc.)\nPrinciples\nMeaningful and relevant content.\nWe deliver learning solutions that help you reach your professional goals.\nValues aligned.\nOur learning solutions reinforce GitLab‚Äôs\nvalues\nand foster continuous learning and curiosity.\nDiverse approaches to learning.\nWe apply a blended learning model to find solutions to various individual needs.\nCommunity.\nL&D offerings available to the public so that everyone can contribute.\nLearning & Development Team\nWe are a small team, but we‚Äôve got a big role to play at GitLab!\nLearning and Development Director\n:\nTre Ely\nSenior Learning and Development Program Manager\n:\nJamie Allen\nSenior Learning and Development Program Manager\n: Lauren Cairns\nSenior Learning and Development Program Manager\n: MQ Gillespie\nTeam Member Resources\nThe Learning & Development team has a number of resources to help team members learn new skills. Click the button(s) below to learn more about each one:\nTransitioning to a Manager Role\nGrowth & Development Fund\nCareer Development & Mobility\nLearning Initiatives\nSelf Paced Learning\nLevel Up\nElevate Manager Training\nMentorship\nCoaching\nPartnerships at GitLab\nMultiple teams across the company contribute to learning and development of our team members. Below is a list of some teams we partner with and how we collaborate.\nEducation Services: Share customer & product training with team members on Level Up\nTalent Brand: Telling career growth stories\nPeople Operations: Measuring impact of learning and development on team member engagement\nSelect Department Subject Matter Experts: Legal, Compliance, and other specific courses\nSlack:\n#learninganddevelopment\nEmail Us:\nlearning@gitlab.com\nRequest support/Collaborate on new learning content\nWork With Us\nThe\nwork with us\npage outlines issue templates and processes that are managed on our\nLearning and Development issue board\n. We review and classify requests based on the scalability and possible organizational impact. Learning solutions that can be applied and used company-wide take priority. Our process includes:\nEvaluate the strategic impact of the learning session\nDetermine the level of work associated with the learning requirement\nAssess the impacted audience groups of the session\nIdentify measures of success\nAssess dates of delivery with the course schedule and forecast a future date\nHow we work\nTools\nThe L&D team frequently uses the following tools for creating and communicating learning opportunities at GitLab.\nTool\nPurpose\nPowtoon\nVideo Creation\nLucidChart\nInteractive Diagrams\nCanva\nImage and infographic creation\nArticulate/Rise 360\nCourse Authoring\nGenial.ly\nCreate Interactive Images\nDeveloping Learning Content\nLearning Content Accessibility Guidelines\nIn July 2024, GitLab published the first iteration of our\nLearning Content Accessibility Guidelines\n.\nWe ask that team members who create both internal and external learning content:\nFamiliarize themselves with these guidelines\nApply these guidelines when creating learning content for internal and external use, when applicable\nRevisit existing learning content you have created, to consider whether any updates are appropriate\nTop Five Training Content Development Principles\nKnow Your Audience\n- Analyze and assess the course audience. Ensure that all audience needs are accounted for at every level in the organization you are delivering the training too.\nDefine Learning Objectives\n- Highlight the learner outcome. Consider developing two to three broad overall statements of what the audience will achieve.\nBreak Down Complex Information\n- Consider breaking down complex information into easy to digest visuals or text. Reference the handbook but do not be afraid to create a visual representation or use storytelling for the audience.\nEngage the Learner\n- Adults learn through practice and involvement. Consider using tools to engage learners in a virtual setting like\nMentimeter\nor\nKahoot\nto stimulate interactivity.\nImplement Blended Learning Course Content\n- Give the learners pre-course work to read and review before the learning session. Use off-the-shelf resources and ensure the content is applicable to what will be covered in the session. Follow up to gauge how they‚Äôve applied what they‚Äôve learned on the job through surveys and questionnaires.\nApplication of Adult Learning Theory\nAdults learn differently in the workplace than in traditional learning environments or how they learned growing up. If you are developing training, consider applying principles related to Adult Learning Theories, those include:\nTransformative learning:\nLearning should change the individual through transformative learning approaches. Start with learning experiences that appeal to your specific audience, and then move to activities that challenge assumptions and points of view.\nSelf-directed learning:\nEmphasize informal learning experiences. Infuse applications of pre-reads and post-course follow up. Have the participants bring up examples of self-directed learning that they have taken that is related to the training course.\nExperiential learning:\nAdults learn through experiences and by doing. When designing a learning experience, apply activities to stimulate learning by doing through role-playing, simulations, virtual labs, case studies, etc.\nAndragogy:\nDesign learning experiences with the assumption that your participants will come to the table with their own set of life experiences and motivations. Adults tend to direct their own learning, learn better by doing, and want to quickly apply their learning to concrete situations.\nDeveloping Learning Objectives\nAdd learning objectives to the beginning of the content to state a clear training outcome. A clear learning objective describes what the learner will do upon completion of a learning/training activity. Good learning objectives are what you want team members to learn or achieve.\nSteps to creating learning objectives:\nIdentify the level of knowledge necessary to achieve the aim of the training. Use\nBloom‚Äôs Taxonomy\nto assist with writing practical learning objectives.\nSelect an\naction verb\n.\nCreate your very own objective\nCheck your objective. Make sure it includes these four pieces: audience, behavior, condition, and degree of mastery\nRepeat these steps for each objective\nSample learning objectives:\nBy the end of the session, team members will be able to describe the steps taken to address underperformance\nTeam members will be able to apply the GROW coaching model framework to coaching sessions with members of their team\nAfter learning about the high-performance team-building model, team members will be able to determine the steps needed to reach high performance.\nLearning Components - Definitions\nTerm\nDefinition\nDuration\nTraining\nThe action of teaching a team member a particular skill or behavior\nVaries\nBite-sized learning\nA short course to learn a skill. Bite-sized can be a compontent of training or a separate learning element (i.e. a video, a PDF cheat-sheet, an infographic)\nMax 15 minutes, 5 to 10 minute average\nSelf-paced course\nLearner has the control over the amount of material they want to consume and the duration of time needed to learn the new information.\nPre-defined by the designer (i.e. hours, days, etc.)\nCurriculum\nA series of learning paths that comprise a course of study on a skill-based topic\nVaries\nCertification\nA certification indicates that an individual community member has acquired the knowledge, skills, and abilities required to perform a specific skill or job. Certifications include an examination process.\nVaries\nLearning Path\nA chosen route taken by a learner through a range of learning activities to build knowledge progressively\nVaries\nLearning Delivery Methods - Definitions\nTerm\nDefinition\nDuration\nInstructor-Led Training (ILT)\nPractice of training and learning material between an instructor and learners. Face-to-face training (classroom training)\nVaries\nVirtual Instructor-Led Training (VILT)\nTraining that is delivered in a virtual environment (i.e. training in Zoom)\n1 to 3 hours\nE-Learning\nLearning based on traditional learning theories which takes place electronically, often via the Internet.\nVaries\nBlended Learning\nTraining that uses multiple methods to teach the new information to learners. It can include ILTs, self-paced materials, VILT sessions, etc.\nVaries\nWebinar\nA seminar conducted virtually to a large audience\n3+ hours\nWorkshop\nHands-on or virtual demos, problem solving, tutorials where team members engage in discussion and activity on a particular subject\nVaries\nPlease let us know how you would prefer to learn by\nfilling out this form\n!\nCareer Development and Mobility\nResources and direction for career development and mobility for all GitLab team members\nElevate Programs\nUse the links below to navigate to each Elevate program. Here is a useful guide to ensure ‚Ä¶\nGitLab Basics\nGitLab Basics and Terminology This page is just a quick guide to some GitLab basics, for easy ‚Ä¶\nGrowth and Development Fund\nA description of programs and resources for team members to access when using the G&D Fund.\nHone Partnership\nGitLab has partnered with Hone to provide expanded professional development opportunities through ‚Ä¶\nInternship for Learning\nResources and direction for internship for learning for all GitLab team members\nLearning Initiatives\nThe Learning & Development team is rolling out learning programs to enable a culture of curiosity and continual learning.\nLevelUp\nLeveling Up LevelUp We‚Äôre currently rolling out a new platform for LevelUp to better support ‚Ä¶\nMentoring at GitLab\nMentorship is an opportunity to learn from personal experience, background, and perspective. ‚Ä¶\nSelf-Paced External Trainings\nDetails of third-party training providers utilised by various GitLab departments\nTeam Workshops\nVisit the Team Workshops Level Up page to get started!\nTeam Workshops are customized, group ‚Ä¶\nTransitioning to a manager role\nYour first few months as a manager at GitLab can be exhilarating. They can also be challenging, ‚Ä¶\nWork with the Learning and Development Team\nAvailable Learning and Development Support The Learning and Development team is available to support ‚Ä¶\nLast modified July 11, 2025:\nRemoving JS from HB page (\ne3aab33c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1757}
{"doc_id": "7a2aa7f47f6f21ed", "url": "https://handbook.gitlab.com/handbook/product/ux/ux-research/research-in-the-ai-space", "title": "Doing UX research in the AI space | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nUX Research at GitLab\nDoing UX research in the AI space\nHow to conduct UX research in the Artificial Intelligence (AI) space, including research guidelines.\nAs more teams are taking part in rapid prototyping activities to innovate within the Artificial Intelligence (AI) space, it‚Äôs natural to pause and ask yourself:\nWhat‚Äôs the problem this aims to solve?\nIt‚Äôs common that exciting break-through technologies lead to product innovations. However, this can result in teams presenting a technical solution that is looking for a user problem - instead of the other way around.\nWe need to make sure to keep users‚Äô needs (and unmet needs) in mind while innovating. If we don‚Äôt do this, the risk is that we end up building powerful AI solutions that may not address  identified user problems.\nUX Researcher support\nIf you have an assigned UX Researcher in your stage:\nIf you need UX Research support, connect with your\nassigned stage UX Researcher\nfollowing the\nresearch prioritization process\n. Your AI-specific research topic will be prioritized against the other research projects already identified within their stage.\nIf you DON‚ÄôT have an assigned UX Researcher in your stage:\nFor those working in a stage group that doesn‚Äôt have a UX Researcher assigned, Nick Hertz is managing those research requests. The\nresearch prioritization process\nstill applies and you can add your topic to this\nAI research-specific prioritization calculator\nafter you have opened a research issue.\nThe guidelines\nGuideline 1: Start with identifying and understanding user needs\nAI solutions themselves won‚Äôt reveal the user problem they are meant to solve. To identify and understand user needs (and to determine if the AI solution is addressing a real user problem), there are different approaches you can take:\nReview existing research\nUnderstand what research knowledge already exists. Dovetail and the\nUX Research Drive\nare good places to start as well as asking your assigned stage researcher. Reviewing what research exists outside of GitLab is valuable, too.\nIf\nyour review results in a medium or low level of confidence\nregarding users‚Äô needs, the following options help with collecting additional data.\nUse case definition (recommended option for medium level confidence)\nUse existing research and your domain expertise to formulate assumptions on the user problem you believe is being addressed with the AI solution. Use the following format to phrase the problem statement, which is aligned to how we write\nJobs to be Done\n‚ÄúWhen [circumstance a person is in when they want to accomplish something], I want to [something the person wants to accomplish].‚Äù\nExample:\nWhen I am on triage rotation and prioritizing business-critical risks, I want to review the most recent risk detected in my assets.\nThen, validate your problem statements through a quantitative\nonline survey\nto understand:\nThe frequency of users encountering this problem\nThe importance of addressing the problem\nThere are other parameters you can include in your survey, such as:\nHow users currently solve the problem\nThe difficulty of solving this problem today\nSee this\ntemplate\nfor example questions. More example studies coming soon.\nExtended solution validation\nUse\nsolution validation-type studies\nto learn more about the users‚Äô needs\nbefore\nthey engage with the prototype or feature. To do so, add a few questions about their job tasks, workflows, tools, expectations, pain points etc. before participants start their tasks with the prototype (see this\nexample\n).\nModerated sessions\nare more suitable than\nunmoderated ones\nand are recommended.\nGenerative research (recommended option for low confidence)\nIf you don‚Äôt have a high level of confidence or understanding of the problem statement or user needs, you will want to take the time to conduct generative research to learn more about a user group and their needs. While this approach takes more time, it provides deep insights into users‚Äô needs, goals, and pain points that can be used to ideate on new solutions.\nIt‚Äôs recommended to do this if you have the time. The output will provide a solid justification as to why the AI feature is important for users.\nGuideline 2: Collect user feedback on your idea before building anything\nDid you know that you can validate your future AI powered feature in parallel to the engineering team building it by using\nWizard of Oz prototyping\n? Validating before the AI solution is available is a great way to capture users‚Äô expectations and requirements early on. They can inform engineering efforts in training the AI.\nHere are a few things to keep in mind when preparing the prototype:\nIf your solution includes personalization, you should collect relevant user data for a more realistic experience in the prototype before the session takes place. Make sure users are informed about how their data is being used.\nInclude ‚Äúwrong‚Äù recommendations, too, as AI technology is probabilistic and won‚Äôt be accurate all the time (see\nGuideline 4\n). For example, let‚Äôs say you are evaluating a chatbot and participants want to ask questions about UX Research methods. Besides relevant responses to that topic, include some that are not connected to UX Research. You could vary how many ‚Äúwrong‚Äù responses are given to understand what is still acceptable versus where users get frustrated and stop using it.\nIt may be tempting, but don‚Äôt ask users if they would use this AI feature. People are poor predictors of future behavior, so their answers won‚Äôt be accurate or useful for you. To get closer to understanding if people may use a solution, it‚Äôs best to understand:\ntheir problem or need, and\nhow helpful the solution is with addressing those. In other words, does it provide value?\nGuideline 3: Collect more than just usability feedback during AI prototype validation\nOnce an AI powered solution is available for validation, make sure to not only collect feedback on its usability, but also:\nBaseline data\n- on how users currently solve this problem. This allows us to assess the impact the AI solution may have and how helpful it is.\nOn trust\n- If people trust the information provided by AI. If they don‚Äôt trust it, they won‚Äôt use it. Here are some example questions to consider:\nHow much do you trust the [feature name, e.g. code suggestions] provided?\nDo you trust [feature name, e.g. code suggestions] with [task, e.g. providing correct code]? Why/Why not?\nOn giving feedback\n- If they feel comfortable giving system feedback, e.g. when a code suggestion is not helpful. The AI improves based on user feedback, so it‚Äôs important they can do it. You can do this by including a task that focuses on giving feedback on a ‚Äúwrong‚Äù recommendation and measure if they were successful doing it and how they felt about it.\nOn attitudes towards third-party AI services\n- If your AI solution is powered by a third party (e.g. OpenAI), it‚Äôs important to understand if users are aware of the use of a third-party and their attitude towards it. This provides insights into users‚Äô mental model (see\nGuideline 5\n) and impact on GitLab as a brand.\nWe are piloting a\nset of AI metrics\nand recommend including them in your solution validation.\nTo get robust feedback during solution validation, it‚Äôs recommended to collect at least three data points. As AI output varies, it‚Äôs not sufficient to rely on the first output only. You can do this by having three similar tasks to see how participants react to the AI‚Äôs responses in these three different scenarios.\nTip:\nAvoid asking the tempting ‚ÄúWould you use this?‚Äù question.\nIf you are maturing your AI feature towards\nGenerally Available\n, take a look at the\nUX maturity requirements\nfor further guidance on metrics and success criteria.\nGuideline 4: Learn about the cost of errors that AI will make\nAI will make mistakes due to their probabilistic nature. It‚Äôs important to understand how AI mistakes may affect users. Will certain mistakes result in turning users away from using it? Or using GitLab? Here‚Äôs what you can do:\nPlan for research activities to assess what mistakes are ok to do versus those that cause harm and need to be avoided at all cost.\nThere may also be opportunities to include questions related to AI mistakes when conducting solution validation, e.g. When evaluating early prototypes (see\nGuidelines 2\nand\n3\n).\nSet up your prototype in a way that it includes ‚Äúwrong‚Äù recommendations to capture how people react to AI mistakes.\nGuideline 5: Plan ahead for longitudinal research\nAI evolves as users engage with it over time. As a result, users‚Äô mental models about how it works as they engage with it over time may change (it‚Äôs a continuous loop). To ensure we‚Äôre continuing to offer AI solutions of value, it‚Äôs important to understand how mental models change over time and evaluate the performance of AI solutions as use cases and users increase.\nWe are piloting a\nset of AI metrics\nthat allow you to evaluate and track user‚Äôs experience with AI powered features over time.\nAI User Experience Survey (Pilot)\nWe developed, and are currently piloting, a survey that contains a set of questions to evaluate AI powered features in terms of how well they are meeting user needs (not usability). This survey can be used to track a user‚Äôs experience with an AI powered feature over time.\nThe survey focuses on the following 8 constructs that we observed in a literature review and are captured in\n11 survey questions\n.\nAccuracy:\nHow accurate do users find our AI? How much effort is needed to get a meaningful response?\nTrustability/Fallibility:\nDo users trust GitLab‚Äôs AI?\nValue:\nAre we helping users to be faster and more productive? Are we helping users to learn new things? Do users perceive a benefit from using the AI powered feature?\nControl:\nDo users feel like they have control over how AI recommendations or actions are employed?\nError handling:\nAre we enabling users to deal with the errors that AI produces?\nGuardrails:\nHave we built-in enough mindful friction into user iteractions with AI such that they are able to think critically about what AI is doing for them?\nLearnability:\nAre users able to quickly understand the AI powered feature?\nAI limits:\nDo users feel like they understand what the AI powered feature can and can‚Äôt do?\nThis survey is available for you to send to your participants who are working with AI features. If you want to use this survey, ask Anne Lasch or Erika Feldman for access to the Qualtrics project.\nAI Usability Metric\nTo effectively evaluate the usability of our AI capabilities and track progress over time, please follow the instructions below:\nWhat to measure\nWe have leveraged the existing\nCategory Maturity Scorecard grading system\nand focused on 3 pieces of data to be measured for AI capabilities:\nEffectiveness\n(pass/fail)\nEfficiency\n(Single Ease Question)\nSatisfaction\nof the experience\nThese measures are lightweight, focusing on both the mechanics and the usability of the experience, and can be applied in either moderated or unmoderated tests.\nWhen to measure\nAll AI / Duo capabilities should be assessed in any of the following scenarios:\nBefore they become Generally Available (GA);\nWhen a significant change to the experience is introduced.\nIt‚Äôs at the designer and the product team‚Äôs discretion to regard a change as significant or not. And here are some examples to help you decide:\nInsignificant changes might be minor tweaks that enhance the interface but do not fundamentally change the user‚Äôs experience or the way they perform tasks / interact with the product. An example could be changing the colour of a button.\nSignificant changes may significantly alter user behavior, and require users to adapt to a new way of interaction. An example could be an change to the information architecture of the product.\nThe full description of GA Scope and Definition of Done for Duo capabilities is\nhere\n(internal access only).\nHow to measure\nFollow the\nsteps for running a Category Maturity Scorecard study\n, and only make the following adaptations:\nRecruit 5 external participants for the study;\nWhen a participant has completed a scenario, ask the\nEfficiency\nand\nSatisfaction\nquestions only. You won‚Äôt need to ask the UMUX Lite question, as it doesn‚Äôt entirely pertain to our usablity focus.\nAcceptance criteria\nSimilar to the Category Maturity Scorecard scoring (Figure 1), the calculated AI Usability score will be a number between 1.00 - 5.00. This is intended to give some granularity to the scores as regression/progression occurs. If need be, the score is translatable to an A-F grade scale.\nFigure 1: Borrowing the existing scoring rubric from our Category Maturity Scorecard process\nA new Google Sheet is located\nhere\n, which will calculate the AI Usability score for you.\nThe quality bar for AI capabilities is just as high as our other experiences within GitLab. That translates to\na pass rate of 4/5 or 80%\nAND, a score range of 3.63-3.94, or a ‚ÄòB‚Äô grade.\nOther considerations\nFocus on user tasks that provide value to the user. JTBD may not exist yet in the space you‚Äôre working in. That‚Äôs ok; it shouldn‚Äôt be a blocker for AI usability testing.\nIf you have 1 task failure, the failure (pass/fail) is documented, but their ratings aren‚Äôt documented; find a replacement participant to meet the minimum of 5 participants.\nIf you have 2 task failures on the same task, stop testing that task. Understand what needs to be addressed, make adjustments, then start testing that task again.\nIf the adjustments introduce significant changes to user experience,\nweigh confidence vs. risk\nto decide whether you should start afresh with 5 new participants.\nTesting AI experiences introduces new challenges to consider. For example, it‚Äôs important to be clear and accurate on the capabilities of what‚Äôs being shown to participants. This is to set the right kind of expectations. More details on this topic can be found in the\nChallenges of Testing AI Products\nsection of\nthis article\n.\nReferences\nPeople + AI playbook by Google\nUser research for machine learning systems - a case study\nTesting AI concepts in user research\nHuman centered machine learning\nLast modified April 9, 2025:\nUpdating the UXR page on how we operates (\nbd1ab4c5\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2361}
{"doc_id": "46854408794ea776", "url": "https://handbook.gitlab.com/handbook/support/enhanced-support-offerings/offering-assigned-support-engineer/becoming-and-being-an-ase", "title": "Becoming and Being an ASE | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nEnhanced Support Offerings\nOffering - Assigned Support Engineer (ASE)\nBecoming and Being an ASE\nInformation about the ASE role for new and potential ASEs\nBecoming and Being an ASE\nBasic job information\nThe first thing to do if you‚Äôre contemplating a move to an ASE role is to take\na look at two topics on the Support Engineer job family page in the Handbook:\nThe ASE role\nWhat is it like to be an ASE (video)\nYou might also find it helpful to review the\n[ASE performance factor worksheet template](LINK COMING SOON)\nOnboarding tasks for new ASEs\nAsk an existing ASE or ASE Manager to:\ninvite you to the\n#support_assigned-support-eng\nSlack channel\ninvite you to both of the recurring ASE Team meetings\nSubmit an MR to update your personal yaml file in the\nSupport Team project\n:\nLook for the\nfocuses:\nheader\nAdd a new focus after your existing ones:\n-\nname\n:\npercentage\n:\n[\npercent]\nzendesk\n:\n[\ninstance]\norganizations\n:\n-\nid\n:\n[\norg_a ID]\npercentage\n:\n[\norg_b percentage]\n-\nid\n:\n[\norg_b ID]\npercentage\n:\n[\norg_b percentage]\nwhere\n[percent]\nis 25 times the number of accounts you have - if you have 2 accounts, put 50\nwhere\n[instance]\nis either ‚Äúglobal‚Äù or ‚Äúus_gov‚Äù, according to\nwhether your ASE accounts work with Global or US Gov Support\nwhere\n[org_a ID]\nis the organization ID, in Zendesk, for your first account,\n[org_b ID]\nis the same for your second\naccount, and so on\nwhere\n[org_a percentage]\nis the percentage of your ASE time that\nwill be spent on org_a,\n[org_b percentage]\nis the same thing for your\nsecond account, and the sum of the org percentages is 100\nChange your job title in Zoom\nUpdate your signature in Zendesk to indicate that you are an ASE\nSubmit an Access Request to get a user account created for yourself in\nSalesforce. This account will be read-only, and will\nnot\nadd you to the\nDesignated Insiders\nlist. It is needed in order to be able to display in some reports and\ndashboards the ASEs for each account. Please follow these steps:\nCreate an issue using\nthis template\nSet the title to:\n<your name>, Salesforce, Executive-NoViewAll\nFill in\nStep 1\nappropriately\nIn\nStep 2\nenter:\n* [ ]\nSalesforce: Executive-NoViewAll\n* [ ]\nJustification: Support engineers serving as Assigned Support Engineers need SFDC access in order to enable the picklist functionality described in [\nthis issue\n](\nhttps://gitlab.com/gitlab-com/sales-team/field-operations/systems/-/issues/5626\n).\nAssign the issue to your manager\nOn-call responsibilities\nASEs with two or more accounts are not expected to participate in either the\nCustomer Emergencies On-Call (CEOC)\nor\nCommunication Manager On-Call (CMOC)\nrotations.\nParticipating in these on-call rotations creates an ongoing risk of conflict for the ASE between\nhigh-priority work from their assigned accounts and their on-call responsibilities. This risk\nbecomes too great to manage when an ASE has two or more accounts.\nASEs who have been rostered for CEOC or CMOC responsibilities from their time in global support\nshould continue participating in these on-call rotations until they have two assigned accounts. At\nthat point, the ASE and their manager should create a plan for the ASE to transition off the COEC or\nCMOC rotation that minimizes disruption to the team.\n¬´¬´ COMING SOON ¬ª¬ª\nBalancing between ASE and Global\non-call rotation\nticket queue\npairings and help sessions\nLearn about how to work with your account (manager 1:1s for now, presentation eventually)\nmanaging customer expectations\nstepping out of the SE box - change your way of thinking about what you should\nor shouldn‚Äôt do\nprioritize and re-prioritize all the time\nonly attend account meetings in which you will learn or contribute\nget to know the people as people\ndo lots of Zooms with them and chat as you work a ticket\nget to know what they‚Äôre doing with GitLab and why\nLink to the customer onboarding page (customer-onboarding.html)\nTips from ASEs\nLast modified April 21, 2025:\nAdds instructions for the new ASE to add themself to Salesforce (\n34dcef79\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 683}
{"doc_id": "852806d0c792b0b5", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/professional-services-delivery-methodology/iteration-scheduling", "title": "Iteration Scheduling | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nProfessional Services Delivery Methodology\nIteration Scheduling\nLearn about how to schedule iterations in a PS engagement.\nCadence Planning\nAlthough the above pictures show a one-week and two-week sprint (aka iteration) it is assumed that iteration duration can be adjusted based on customer needs - as long as the duration stays consistent.\nGenerally established best practice is to\nnot\ncreate iterations of varying durations as this prevents consistent measurement from one sprint to the next (velocity will appear skewed). Also, sprint durations between 1 week and 4 weeks are most common. This sample iteration calendar shows 2-week iterations, starting on Tuesday, accommodating various US and APAC holidays. Note that the cadence stays the same but the number of working days fluctuates based on the sample holidays. Customer company holidays, vacations, and sick time also influence the number of working days in a sprint / iteration.\nLess than one week is possible if the work and coordination efforts can be optimized, more than 4 weeks is not recommended because longer sprints delay the feedback loop from working effectively and it is more like for engagement to ‚Äúgo dark‚Äù due to inactivity. Shorter sprints reinforce the sense of urgency and bias for action\n2 week iterations are a good target duration to use unless the customer insists otherwise\n. For example, customers might want the GitLab engagement to follow the same iteration cadence as their own due to the integration into the customer‚Äôs status and reporting process.\nManaging a Globally Dispersed Team\nWhat do you do if you just cannot make it work? Between various stakeholders, locations, time zones, and other challenges, coordination can be difficult. Ultimately, the specific customer situation dictates what needs to be done. For example, working in different time zones might necessitate a flexible approach who works at what hours.\nIt is important to point out that certain meetings really, really, really need to be attended - iteration reviews for example demonstrate to the customer the tangible progress that has been achieved, so it is important that both GitLab and customer stakeholders attend in order to see that progress.\nPart of the established cadence allows for frequent review and refinement of engagement priorities. Well understood, high priority, items bubble to the top of the priority list; and less defined items, with insufficient detail to be taken action on, drop to the bottom of the stack.\nReview and refinement of the backlog\nallows for the dynamic reprioritization of items as the situation on the engagement adjusts.\nLast modified January 24, 2025:\ntake 2 on adding back pre-sales methodology for PS (\n81552e73\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 448}
{"doc_id": "c542e51edb1e700f", "url": "https://handbook.gitlab.com/handbook/sales/commercial/high_velocity_sales_first_orders", "title": "High Velocity Sales and First Orders (formerly Global Digital SMB) | The GitLab Handbook", "text": "The Handbook\nSales\nCommercial Sales\nHigh Velocity Sales and First Orders (formerly Global Digital SMB)\nOverview of the High Velocity Sales and First Orders Sales Model\nHVS-FO Sales Team Structure\nThe HVS-FO Sales Team is comprised of these 3 sets of teams:\nSMB Advocate Teams, covering global SMB accounts\nNew Logo Team, covering Base prospect accounts and Web Direct Mid-Market and Large inbound First Orders\nSMB Renewals Teams, covering global SMB renewals\nSMB Sales Model\nFY26 Global Digital SMB Kick-Off deck\nFY26 Global Digital SMB Segment Lines\nAbbreviations\nSMB: Small and Medium-sized Business\ncARR: Contracted Annual Recurring Revenue\nAll members of the Sales, Support, Billing and Deal Desk teams should familiarize themselves with the Global Digital SMB Model.\nThe model leverages team-level account alignment so SMB customers have a team of SMB Advocates to assist them. Every SMB Advocate on the team is equipped to work with any SMB customer as the sales point of contact.\nThe threshold for Global Digital SMB Accounts is <$30k cARR, <101 employees, and excludes Japan.\nAccount and Opportunity Ownership\nVision: SMB Accounts will not be owned individually, but by the entire team. This is meant to ensure that SMB customers are supported at the right time, in a scalable way. Each SMB Advocate will have a shared responsibility for collaborating in a customer-centric manner to provide a best-in-class experience to each SMB customer.\nAccounts\nAll AMER SMB Accounts are owned by the AMER SMB Sales User.\nAll APJ SMB Accounts are owned by the APJ SMB Sales User.\nAll EMEA SMB Accounts are owned by the EMEA SMB Sales User.\nNote that in SMB only, EMEA & APJ are considered one territory.\nOpportunities\nAll AMER SMB Opportunities are owned by the AMER SMB Sales User.\nAll APJ SMB Opportunities are owned by the APJ SMB Sales User.\nAll EMEA SMB Opportunities are owned by the EMEA SMB Sales User.\nAdvocate owned opportunities will routinely be updated by SMB Ops to the SMB Sales User\nHigh Value Accounts\nSome Global Digital SMB Accounts are considered to be High Value Accounts. These accounts, whilst owned by an SMB Sales User, will be managed in a 1:1 relationship between the SMB Advocate and the customer, via Cases.\nYou can use the criteria below to help determine whether an SMB account is a High Value Account or not.\nLicense growth potential\nDepartment expansion opportunities\nUltimate upgrade potential\nAdvocate wants to build relationship as a top 50 account\nFor additional information on how to select a High Value Account in Salesforce please reference the\nAccount Review Doc FY26\nEngaging with Global Digital SMB Accounts\nSince all Global Digital & SMB Accounts are owned by generic SMB Sales Users, SMB Advocates will only engage with customers when specific customer events / scenarios are triggered. Once one of these defined scenarios is triggered, a case will automatically be created. An SMB Advocate will then be assigned to it, and work it through to completion.\nFor additional information on how our case routing system works please reference the\nSMB Traction User Guide\nWhy?\nEnables Advocates to focus on those SMB customers that require, or would benefit from, sales assistance.\nRemoves low potential customers from view, since these customers will seldom trigger a case.\nHow?\nCases are automatically created when;\nA customer requires sales assistance in order to transact.\nThere is a high likelihood a customer will churn / contract.\nThere is a high likelihood that a customer is considering upgrading or adding additional products.\nIf none of the above apply, and the customer is on auto renew, a case will generally NOT be created.\nCase Types\nInstructions and resources for working each case type can be found in the content below:\nFY26 HVS Case Workflow Guide\nFY26 SMB Case Enablement\nFY26 SMB Case Triggers\nWorking with the Global Digital SMB Account Team\nIf a GitLab team member needs to loop in the Advocate team on a customer Account, they must create a case.  (\nChatter messages sent to the AMER/ APJ/ EMEA Sales Users are not monitored\n).\nCase Creation How-to Video\nFY26 SMB/SDR Handover Process\nNavigate to the end user\nAccount\nin Salesforce.\nHover over\nCases\n, and select\nNew Case\n.\nSelect\nSMB Sales Case\n, from the Record Type dropdown.\nAdd the\nContact\n, to the Contact Name lookup field. (A Lead can also be added, instead of a Contact, however in this scenario, the Account the Lead is matched to must also be manually added to the case.  To find the matched account, view the\nTraction Complete Leads: Account\nfield)\nAdd the\nOpportunity\n, to the Opportunity lookup field (if relevant).\nDescribe the ask of the AE in the case\nDescription\nbox. Include any relevant links or resources. (Once the case has been created, you can also upload files e.g. a PO, in the\nGoogle Docs & Attachments\nsection at the bottom of the case record).\nSelect a\nType\nthat most closely matches the origin of your request. (e.g if you are in Support, select\nInbound Request\n)\nSet the\nPriority\nto High.\nComplete the\nSubject\nfield, using one of the below options;\nSupport Ticket\n(if you are an SE)\nPartner Opp\n(if you reside in the Partner org)\nReferral\n(if you are in Sales)\nFO Opp (Startup)\nif you reside in the Community relation team, and a free customer is ready to transition to paid.\nAR Request\n(if you are in AR/ Billing)\nNote: if you are an SDR creating the case, the\nCase Subject\nmust be either equal\nFO Opp\n, or\nSDR Created\n(See\nUse Case Specifics\nbelow)\nSDR must create a case with the Subject:\nFO Opp\n.\nNote\n: Please ensure the Account includes a complete Billing Address prior to setting the Record Owner to the AMER/EMEA/APJ Sales User in the Lead conversion screen.\nThis Case will now routed and worked by an SMB Advocate.\nIf a case has not been actioned as per the stated SLA, please chatter the regions\non the case to escalate.\nTracking Cases you have created\nOnce you have created a case, you can easily view its progress by using the report below as a template.\nFY26 - Cases created by Department X\nClick\nCustomize\non the report.\nClick\nEdit\nnext to the\nCreated\nby filter.\nEnter in your name in the free test box. (You can also add the names of your colleagues who will also be creating cases.  The names must be comma separated).\nClick\nSave As\nChoose a relevant name for the report, and save it in your teams folder.\nYou can now return to this report at any time to check;\nWho the current case owner is. They can be chattered on the case should you have any questions.\nCase Status (This should be either\nOpen\n,\nIn Progress\n, or\nClosed\n)\nNext Steps (Useful if the case is still set to\nIn Progress\n)\nSMB Advocate Playbook\nIntroduction to SMB Cases\nAs of 02/01/2025, all cases will be auto-assigned to Advocates using Traction Complete‚Äôs round-robin functionality.\nInformation pertaining to the case will be displayed in the\nContext\n,\n&\nDescription\nbox.\nAt any time, an SMB Advocate can view their cases by navigating to the My Cases list view in Salesforce.\nCase Status\nAvailable Case Statuses:\nOpen\nIn Progress: Attempting Contact\nIn Progress: Blocked\nIn Progress: Engaged\nClosed: Duplicate\nClosed: Unresponsive\nClosed: Resolved\nOnce a Case is considered closed, the Status should be set to one of the three Closed options above and the Resolution Action updated. This will automatically update the Date/ Time Closed field.\nNote\n:  Inbound customer requests must only be marked as closed once the customers needs have been addressed.\nCase Workflow and Management\nTo work the case, the SMB Advocate should contact the customer, with all activities logged on the contact/ account, via Groove. The Next Steps fields on the case should also be updated to include the case next steps/ date.\nAn Advocate must then update the Status to In Progress (this shows the case is being worked).\nNext Steps Field Hygiene Example\n:\nIncorrect: Contact\nCorrect: 2024-07-05 KK First touch email to discuss promo\nIncorrect: Waiting on billing\nCorrect: 2024-07-05 KK Followed up with billing team to approve refund request\nWhen working cases, the following Groove cadence should be followed.\nDay 1 - Email\nDay 3 - Call\nDay 5 - Email\nDay 7 - Email\nNote\n: When assigned a case created by a GitLab stakeholder e.g the Support Team, it is crucial that the Advocate updates\nNext Steps\nas soon as the case has been actioned.\nThis allows the stakeholder to view case updates, and negates the need for them to chatter the Case Owner requesting an update.  Any updates that\nare\nrequested via chatter, should be answered by the Advocate/ Case Owner within one business day.\n(If the Advocate is working on an Expansion Opportunity case, any Add On or Growth opp they uncover should be manually created, and linked to the case in question, via the Opportunity lookup field).\nIf applicable, the linked opportunity should also be closed.\nCase Status and Action Required\nFY26 HVS Case Workflow Guide\nCommon SMB Cases and Expected Outcomes\nFY26 HVS Case Workflow Guide\nGitLab Sales Rep Pre-Engagement Checklist\nAccount Verification\nAdditional Large Account Verification\nAccount Data Validation\nAccount Ownership Considerations\nRequest Support\nCross-Team Collaboration\nWhen and how to engage with cross-functional teams:\nFY26 HVS Case Workflow Guide\nResources & Tools\nFY26: GDS Case Enablement\nFY26 HVS Dashboards\nHVS Sales Tech Stack\nAdvocate Expectations\nAn Advocate should look to resolve/ close a case within 7 days of it being opened. The max time to resolve a case is limited to 15 days (\nList of case exceptions below\n).\nHigh Value Account\nRenewal Will Fail\nPO Required\nFirst Order (FO)\nCustomer request to get in touch at a later date\nThe Advocate must also adhere to the Required 10, to ensure that the correct case fields and opportunity fields are updated when picking up, working, and closing out a case.\nRenewals Team\nThe SMB Renewals Team will soft launch on May 5th, 2025. Every SMB Renewal opportunity will have a Renewal Manager attached and engaged.\nAs the Renewals team ramps to full capacity, they will start to take over cases on accounts that are both < 3k CARR and < 20 LAM\nMost Renewals case types will be deprecated as soon as the Renewals teams take over renewal engagement.\nExceptions\n:\nAutorenewal Recently Turned Off\nOverage with QSR Off\nAutorenewal Will Fail\nRenewal Managers can escalate cases to Advocates by adding #advocate to the Subject of any case assigned to them\nThese cases will be assigned as per usual SMB Advocate routing rules. Advocates can reach out to the RM for additional context.\nRenewals Managers\nwill be assigned to HVA renewals\n, the expectation is for Advocates and RMs to work as a team to build these relationships\nAs a reminder, please review recent Activities on your HVA accounts once RMs are engaged as that is where you will find their activities. They will also have access to and review your Account Plans.\nNew Logo Team Playbook\nKey Audience\n: New Logo Account Executive, Area Sales Managers, and Renewals Managers\nIntroduction to New Logo Team\nOverview\nThe New Logo Team is a specialized sales team within GitLab‚Äôs High Velocity Sales & New Logo organization focused on closing first-order deals in MM & ENT accounts.\nTeam Structure\nTeam Members\n: 4 New Logo AEs, 4 BDRs, and 1 ASM\nLaunch Date\n: May 1, 2025\nTeam Mission\nWe are the painters of GitLab‚Äôs unified DevSecOps vision, guiding prospects on transformative journeys to accelerate business results and  the value they deliver to their customers.\nWe are the architects of GitLab‚Äôs future growth, planting the seeds today that will flourish for decades to come. Every new logo we secure today becomes tomorrow‚Äôs expansion opportunity and advocacy story.\nTeam Vision\nGold Standard. We will build a New Logo flywheel that other teams and companies will study and attempt to replicate\nTalent Engine. We will have a legendary sales team that will be known for unmatched sales skill, a team that delivers insane amount of Logos, all while having fun and innovating.\nValue Accelerators. We are trusted partners who create transformative outcomes for our customers.\nCulture Champions. We are a showcase of GitLab‚Äôs culture. Interacting with us is flexible, asynchronous enabled, and transparent.\nTeam Values\nRelentless Prospecting. We are Pipeline Builders; no silver spoons. Prospecting happens every day, picking up the phone happens every day; no exceptions.\nWork Hard, Work smart. We leverage tools to get better. We are AI-powered. We make data-driven decisions.\nHone our Craft. We are continuous learners - every day, we get 1% better. Be curious.\nTechnical Command. We build deep understanding of our platform, speak DevSecOps fluently and bring value to technical buyers; we don‚Äôt sell.\nBuilder Mentality. Motion Architects, not quota chasers. We‚Äôre building the playbook others will follow.\nBetter Together. We overshare, your breakthrough belongs to the team. Isolation is the enemy of innovation. One team, one pipeline, one mission, one collective team intelligence.\nNew Logo Sales Process\nAccount Strategy\nWe use a tiered approach to focus efforts efficiently:\nTier 1\n: High-priority accounts receiving most attention from BDRs and AEs, including collaborative prospecting\nTier 2\n: Accounts receiving scaled outreach programs and targeted campaigns based on buying intent signals\nTier 3\n: Accounts primarily receiving digital marketing and PLG motions rather than dedicated sales resources\nNew Logo AE Time Allocation\nRecommended Time Split:\n40% Prospecting\n: Account strategy & planning and direct outreach\n30% Deal Advancement\n: Moving opportunities through pipeline\n20% Admin/Operations\n: CRM updates, forecasting, internal meetings\n10% Feedback/Improvement\n: Process iteration and sharing learnings\nA typical week should look like:\nMonday\n: Strategy & Account Planning\nTeam stand-up and weekly planning (30 min)\nAccount planning and targeting strategy (2 hours)\nBDR collaboration sessions (2 hours)\n‚ÄúInbound Interest Feed‚Äù dashboard review (1.5 hours)\nTuesday & Wednesday\n: Prospecting & Deal Advancement\nDedicated prospecting blocks (2.5 hours)\nDiscovery and qualification calls (2 hours)\nOpportunity advancement (1.5 hours)\nThursday\n: Deal Advancement & Process Improvement\nSA engagement and technical validation calls (2.5 hours)\nDeal negotiation and proposal writing (1.5 hours)\nTeam feedback session (1 hour)\nFriday\n: Administrative & Closing\nFinal push on deals closing this week (1.5 hours)\nCRM updates and opportunity management (1 hour)\nInternal meetings and enablement (1 hour)\n1:1 with manager (1 hour)\nWeekly metrics review and forecast update (1 hour)\nSuccess Metrics\nPrimary Metric (North Star)\nFO Count\nSecondary Metrics\nCalls / touches (including LinkedIn and emails)\nMulti-threaded accounts (accounts where you‚Äôre in touch with multiple people)\nMeetings\nPipeline generation\nnARR\nClose Rate\nAverage deal size and cycle time\nFeedback Mechanisms\nWe actively seek and act on feedback across multiple channels:\nHow We Capture Feedback\nIn Meetings/Slack\n: Weekly meetings and Slack channels for real-time feedback (focus on ‚Äú1 thing we need to do differently to win‚Äù)\nPassively\n: Gong reporting with weekly/monthly review cycles\nActive-ish\n: Feedback Friday form with specific questions\nActively\n: Mechanisms to collect feedback during the sales cycle\nFeedback Prioritization\nHigh Priority\n: Critical issues requiring immediate action\nMedium Priority\n: Selected items (3 per quarter) for potential development\nLow Priority\n: Ideas requiring additional data\nTeam Cadence\nWeekly\n: New Logo Team Meeting, 1:1 with Manager, 1:1 with BDR\nMonthly\n: HVS Team All Hands, Feedback/team learning sessions\nAs needed\n: Additional collaboration sessions\nCross-Team Collaboration\nBDR Collaboration\nEach New Logo AE pairs 1:1 with a BDR handling both inbound and outbound motions. New Logo AE and BDR pairs will jointly target accounts and different personas with the account.\nAccount Selection\nRegular joint meetings to select target accounts\nFocus on Tier 1 accounts\nAEs can nominate accounts for BDRs to move into their ‚Äúactively working account‚Äù list\nRole Specialization\nBDRs typically focus on lower-level personas; AEs on higher-level contacts\nBDRs may cc AEs on executive outreach for credibility\nBDRs handle all MQLs until they become SAOs\nBDRs will target 4 new accounts per day (20 per week) with a 3 week prospecting cycle per account\nMeeting Collaboration\nInbound leads: BDRs qualify and may participate in the second discovery call with AEs\nOutbound efforts: BDRs and AEs can ‚Äútag-team‚Äù the first call with prospects\nBDR Success Metrics\nPrimary\n: 8 SAOs per month (target for fully ramped BDR). However, BDRs have a stretch goal to hit 10 SAOs per month with accelerators.\nSA Collaboration\nA First Order SME SA is aligned to this team to provide technical support during the sales process.\nWhen to Engage SAs\nWhen prospects are demo-ready: for customers wanting to understand GitLab‚Äôs value and how it solves their business needs\nDuring Stage 3 for opportunities where a\nCommand Plan\nand\nMEDDPPICC documentation\nare being leveraged\nDuring technical evaluations: aim to have SAs involved at least 15 days of the Close Date and at least 1 day (ideally more) when direct engagement is needed\nSA Engagement Process\nAE completes Command Plan and MEDDPPICC documentation\nAE submits SA request via SFDC with required information\nRequest reviewed and assigned within one business day\nSA and AE align on strategy\nSA prepares customized materials\nSA supports technical aspects\nSA documents outcomes and next steps\nSA remains available for ongoing support\nPartner Collaboration\nOur team will work with relevant GitLab partners to expand our reach and provide additional service capabilities to customers.\nPartner Motions\nWith Rank 1 and Rank 2 accounts, partners will provide services and act as technical support especially if we have SA-capacity constraints.\nExamples\n:\nDemos, VPs, and POCs\nCo-selling with AWS\nFor Unranked accounts, partners that also have contacts in our accounts will take the lead on the account as the primary sales contact\nResources & Tools\nEssential Dashboards\nInbound Interest Dashboard\nFree to Paid Cockpit\nNew Logo Team Dashboard\nKey Documents\nFY26 HVS New Logo Playbook\nBase Account Selling Motion Strategy\nBDR Collaboration\nThis handbook page is a living document and will be updated as our team evolves. For questions or suggestions, please contact the New Logo Team ASM.\nRequired 10\nThe Required 10 acts a to do list which should be followed by all Advocates when picking up and working cases.\nFY26: SMB Required 10\nPicking Up\nCase: Status\nShould be set to In Progress, (then Closed - Resolved/ Duplicate/ Unresponsive once worked).\n‚ÄúWaiting‚Äù statuses can be used to indicate a dependency on a business partner team.\nCase: Owner\nShould always be set to the Advocate working the case.  Cases can be moved in rare circumstances i.e the end user wishes to converse in a language that you do not speak, but another Advocate does.\nCase: Contact\nAdvocate to add/update the main contact, as the case is being worked. If a lead exists on the case, it must be converted to a Contact before the case is closed out.\nA case cannot be set to Closed Resolved unless a Contact is attached to the case.\nManaging\nCase: Next Steps & Date\nTo act in the same fashion as Opp: Next Steps. Field is mandatory.\nFormat must be; Date, Advocate Initials, What the Next Step is\n2024-07-12 MS Send quote to customer\nAccount: GitLab Admin added\nOnly for cases related to an opportunity\nMust be added in order to move opp to closed won.\nRelated Opportunity\nIf the case involves an open opportunity, it should be linked to case in this field.\nOpp: Close Date\nOnly for cases related to an opportunity\nTo help with forecasting.  Must not be in the past.\nOpp: Renewal Risk Category\nOnly for cases related to an opportunity\nTo help with forecasting\nIf an opportunity is marked as guaranteed churn, please remember to set the stage to Closed Lost\nContact/ Account: Activity\nMust be logged via Groove on the Contact\nClosing\nCase: Resolution Action\nMandatory when closing out a case.\nOpp: Status\nOnly for cases related to an opportunity\nTo mimic the case i.e if the case is closed, the opp should be closed won or lost\nCase: Feedback\nA place where an Advocate can share feedback pertaining to the case itself, or the customers use case.  This is mandatory.  If there is no Feedback to share, NA should be entered in this field. Next Steps and general comments should not be listed in this field - feedback only.\ne.g Customer Feedback : ‚Äúthank you for helping me resolve my problem very quickly‚Äù\nCase Closure Criteria\nClosed - Resolved\nThe Advocate was able to address the customers‚Äô concern/ transact the renewal, and no further action is needed.  A case cannot be marked as Closed - Resolved if the Next Steps Date is in the future, and/ or the Contact field on the case is blank.\nClosed - Duplicate\nAn Advocate has already addressed the customer‚Äôs concern via a similar case.\nClosed - Unresponsive\nAfter 15 days of trying to contact the end user, no response have been received.\nUse Case Specifics\nEmail to Case\nSMB customers are able to email smallbusiness@ in order to speak to an Advocate.\nWhen they do so, an SMB Case will automatically be created and will be routed to an Advocate in AMER/EMEA/APJ.\nThe subject of the email will be displayed in the\nCase Subject\nfield, and the email body will appear in the\nCase Description\nfield.\nQ. As an Advocate, if I am assigned a case, but there is no contact/ account/ lead attached to the case - how do I know if the case falls into my region?\nA. If a customer emails smallbusiness@ and they do not exist in Salesforce as a contact, the contact and account fields will not be populated on the case.  When this happens, we have no way of knowing which region the customer resides in.\nTraction will attempt to match the person to a Contact or Lead using the Web Email field. If that fails, SMB Ops will be notified to determine where the case should be routed.\nQ. If a case is routed to me, but the customer continues to email smallbusiness@, how will I know?\nA.  Once you have been assigned a case, any future emails from the customer in the same thread will trigger a notification to be sent to the case owner.  All emails in the thread are also attached to the case.\nQ. If a customer has a new request, but they send an email to smallbusiness@ via an old thread, will a new case be created?\nA. No.  Unfortunately, the email will be attached to the prior case which is likley to have been closed.  In this scenario, the owner of the prior closed case (who will receive a notification of the customers email), should either ask the customer to initiate a new request (by sending a new email to smallbusiness@.  This will create a new case, and start a new thread. Or, the Advocate can create a new case on the customers behalf, and work that case.\nHigh Value Account Cases\nWhilst Accounts are always owned by the regions SMB Sales User, High Value Account Cases attached to accounts are owned by the SMB Advocate.\nThese cases are to remain open for the entirety of the FY26, even if the customer renews. This means that if a HVA customer renews mid way during FY26, they will be assisted by the same Advocate both pre and post renewal.\nThese cases act as a reminder that these customers require continual attention and should be worked strategically during the financial year.\nThe Advocate is advised to build relationships with these customers, understand their journey with GitLab, and identify what we can do to grow the account (Ultimate or Add On licenses) or promote adoption and churn prevention.\nThe Advocate is advised to schedule ongoing touchpoints, update Next Steps/ Next Steps Date, and create future dated reminder Tasks, so that they plan their outreach throughout the year.\nNote that these Accounts will still trigger other cases types, which should be worked and closed out within the 15 day period.  Any opp created off the back of these cases i.e If a High Value Check In Case results in an Add On Opp, the opp should be linked to the originating case.  Once the opp is closed, the case should be closed. Reminder: The High Value Account case should never be closed.\nNote: A High Value Account can be closed out if the customer advises ahead of renewal that they definitely fully churn.  Only in this scenario should the case be closed out, and the\nResolution Action\nmust be set to\nRequest Not Possible\n.  By setting the\nResolution Action\nto\nRequest Not Possible\n, future High Value Cases will not be created on the account.\nFor more information about managing HVA cases over the year, please review this\nFY26 SMB Account Planning slide\nFO Opp (an SDR engages with a net new lead who has been qualified)\nBefore picking up the case, the Advocate checks that they can attend the meeting (IQM) that appears as an Activity on the Contact record, and in the Next Steps fields. The SDR will be able to see that the case has routed to the Advocate assigned in the IQM.\nThe below SDR Handover Process steps, and Handover Criteria, detailed below should also be followed by both the SDR and Advocate.\nNote\n: If Prospect is ready to buy (i.e no IQM is required), does not qualify for Advocate support, and is unable to purchase their license via Web (Ex: Multi-Year, Needs PO, Duo Pro, etc), please proceed with the\nBlocked Purchase Workflow\n. Criteria\nhere\n.\nSDR Created (an SDR engages with a lead that is related to a customer account)\nBefore creating a case, the SDR should convert the lead to a contact, under the customer account.\nWhen creating the case, this newly created Contact should be added to the Case.\nThe below SDR Handover Process steps, and Handover Criteria, detailed below should also be followed by both the SDR and Advocate.\nFY26 SDR Handover Process\nFO Opp Case Example\nSDR Created Case Example\nThe above examples can be used as templates for when an SDR creates a case.\nSupport Cases\nWhen an Advocate picks up a support case, and the case contains a link to a Zendesk ticket, they must comment in the Zendesk ticket advising that they have picked up the case, and will be reaching out to the customer.\nCustomer MQL Cases\nWhilst working the case, the lead on the case should either be;\nConverted to a contact under the linked account, if the lead confirms they work at the linked account/ company, AND there is an nARR opportunity.\nNot converted/ disqualified if the lead does not work at the linked account/ company, OR there is no nARR opportunity.\nExpansion Opportunities\nIf an opportunity is uncovered whilst working an Expansion Opportunity case, a new Growth/ Add On opp should be created, and linked to the case via the Opportunity lookup field. An Add On opp must be created from the prior closed won renewal opp that exists on the account.\nIf the customer is looking to upgrade to Ultimate/ add users at the time of renewal, the existing Renewal opp should be linked to the case.  The renewal opp should also be used for any new quotes that are generated.\nCase Hygiene\nCase SLA\nAll cases should be picked up and reviewed within 24 hours of being routed and assigned.\nOpen Case Guidelines\nAll cases should be worked, and closed out, within a 15 day period (except High Value Account cases).\nThe above, and other data points, will be tracked on the below dash.  Periodically, the info will be presented to the Advocate so that they can ‚Äòclean up their room‚Äô.\nDue to the high case volume, it is imperative that the Required 10 is followed, so cases do not become stale.\nCase Resolution Action Dictionary\nAnswered Question\nRecommended Resource\nTransferred To Support\nGrowth Conversation\nDirected to Online Purchase\nCompleted Sales Assisted Order\nRequest Not Possible\nNo Action Required\nFailed to Engage\nDashboards, Reports & Enablement Docs\nSMB Advocate Scorecard (\n/\n)\nSMB Advocate - Run Your Day Dash\nSMB Large Deal Management\nFY26 SMB Individual nARR Crediting ROE\nSMB Traction User Guide\nSMB Ops Changelog\nFY26 SMB Dashboards\nSMB Sales Tech Stack\nGitLab Sales Rep Pre-Engagement Checklist\nQ. Will cases be assigned to me everyday?\nA. Yes, we expect new cases to be created daily, and to total approximately 400 per month.\nQ. Can I pick up any Case in the queue?\nA. No, cases will now be routed via Traction and the queue is no longer used. Any case considered a High Value Account will be routed to the corresponding Advocate.\nQ. How many cases should I work at any give time?\nA. An Advocate should only own 50 In Progress cases at a time.  Once at 50, the Advocate is deemed to be at capacity.\nQ. Where can I provide feedback on this model/ process?\nA. Please submit all feedback via the\n#hvs slack channel\n.  If you want to share Feedback relating to a specific case, please enter the feedback in the Case: Feedback field.\nQ. Is additional enablement material available?\nA. Yes, please see the\nDashboards, Reports & Enablement Docs\nsection of this page.\nQ. As a GitLab Team Member who is not part of the SMB Team, how do I engage with the team?\nA. Follow the process above entitled\nWorking with the Global Digital SMB Account Team\n.\nQ.  What happens if the end user speaks a different language than I do?\nA. Discuss with your manager who might be best placed in the team to handle this case, then switch the Case Owner to that individual. Also add the tag #languagebarrier to the Feedback field on the case.  This will allow the SMB Team to track how often language becomes an issue.\nQ. As an Advocate, if I am assigned a FO Opp case, and discover the customer is actually a MM account, what do I do?\nA. Follow the below steps;\nIf the FO Opp is still in Stage 0, advise the SDR via Chatter that they should loop in the MM AE.\nMark the case as Closed - Duplicate\nIf the IQM has taken place, and you have moved the opp to Stage 1, loop in the relevant MM AE on the opp, via Chatter.\nClosed the case as Closed - Duplicate.\nQ. There is no opportunity linked to the case, but I have identified a Growth/ Add On opportunity, what do I do?\nA. If you discover a Growth opportunity, you should manually create a Growth/ Add On opp and link it to the case via the Opportunity field. If an opp is already attached to the case (Renewal or QSR opp), this opp should be updated to reflect the possible growth.\nQ. If I am working a case, and the customer advises they are looking to expand but not for 6 months, should I close out the case?\nA. No, update the Next Steps stating that the customer is open to a conversation in 6 months.  Also, change the Next Steps Date to 6 months from todays date, and update the stage of the case to Open.\nPlease remember to leave the open case in your name.\nQ. I am an AE not in the SMB Org, and a former customer has reached out to me.  This customer is now owned by an SMB Sales User.  How do I hand this customer over to the SMB Sales Team?\nA. Follow this\nprocess\n.\nQ. I just closed won on opp for a SMB Customer, which took them above the $30k CARR threshold.  How do I hand this over to MM?\nA. See this\ndoc\n. Note that accounts will be moved to MM at the start of the next quarter.\nQ. When I am working a case, and the customer is interested in speaking in 6 months, do I keep the case open, or close it out?\nA. In this scenario, the case should remain open and left in your name.  To do this;\nUpdate the Next Steps on the case, as per your conversation with the customer.\nSet to Next Steps Date to 6 months from today.\nSet the Case Status to Open\nQ. If a prospect/ customer emails me directly requesting assistance, what do I do?\nA. First check the account to see if there is an In Progress SMB Sales Case owned by a different Advocate.  If there is, add the nature of the customers request to the Description field, and chatter the Advocate on the case. If no case is present, and this enquiry represents a nARR opportunity, follow the above process (\nWorking with the Global Digital SMB Account Team\n.), and assign the case directly to yourself. Note: for general enquiries, you should direct customers to\nsmallbusiness@gitlab.com\nQ. As an Advocate, when I go on PTO, what happens to my cases?\nA. Whilst on PTO, your\nIn Progress\ncases will remain in your name. In your OOO email signature however, you should include the contact details of a fellow Advocate who has agreed to cover you whilst you are away. Ideally, this Advocate should be located in a similar region with similar langauge skills. When a customer emails you (and the Advocate providing coverage), the Advocate providing coverage should assign the active case to themself, and work it through to completion.  Also, be sure to follow the standard PTO guideline stated\nhere\n.\nEscalation Paths\nSolutions Architect\nAn Advocate should talk to their Manager to determine if SA support is necessary and available.\nSupport\nLoop in\nsupportteam@gitlab.com\n, and set the Resolution Action of the current open case to Transferred to Support.\nTransitioning Accounts to Mid-Market / Enterprise\nChatter Sales Support, advising that the account in question may need to be re routed to the correct team.\nSMB Advocate Onboarding + Enablement\nBy Case-Type\nFirst Order\nPropensity to Purchase - Deck\nPropensity to Purchase - Training\nDoing a great discovery call\nExpansion/Upgrade\nPropensity to Expand\nPTE & PTC Scores Walkthrough Video\nCreating a great Ultimate Pitch - INTERNAL ONLY\nChurn/Contraction Mitigation\nPropensity to Contract/Churn\nPTE & PTC Scores Walkthrough Video\nRenewal and TRX Support\nOverview of Renewals at GitLab (internal handbook, log in via SSO)\nLast modified June 5, 2025:\nUpdate HVS-FO HB Page (\nf423656f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5756}
{"doc_id": "438d886bbcca5ff6", "url": "https://handbook.gitlab.com/handbook/solutions-architects/tools-and-resources/pov/ai", "title": "Artificial Intelligence POV Scope and Acceptance | The GitLab Handbook", "text": "The Handbook\nSolutions Architects Handbook\nTools and Resources\nProof of Value (POV)\nArtificial Intelligence POV Scope and Acceptance\nArtifical Intelligence POV Scope and Acceptance\nOther AI Resources:\nLab\nDemo\nGuided Trial\nEducation Services\nProfessional Services\nAI POV best practices\nWe need to proactively identify languages, testing questions and teams with them. Below are the best practices to review before the start of the POV:\nSmall team size\nLanguages which has a lot of open source contributions like Java, Python\nProactive testing scenario\nTime boxed hands on POV with active guidance throughout\nConduct a pre survey before the POV and post survey after the POV to gauge the success\nVerify which IDEs and versions will be used for the POV\nPrior to the POV, host office hours to assist in installing the GitLab Duo plugin in IDEs\nCreate a collaboration project to keep track of issues and resolutions during office hours\nProvide the team lead and users with the\nGetting Started with GitLab Duo Enterprise document\n(internal only - can be distributed to the team lead) for all AI evaluations\nProvide the GitLab University -\nDuo Learning Track\n, and this document with\nquick start links\nto various Duo topics\nKick-off the POV with a workshop for a headstart. The schedule could be the following, for a 2-hour session\n5 min - welcome participants\n5 min - introduction\n20 min discussion about Gen-AI for development, and pitch of GitLab Duo\n1h20 min workshop\n10 min conclusion and next steps\nMake it as easy as possible for participants to experiment with the features, using the following recommendations and adjusting to the context:\nOnboarding process. Minimize the number of steps needed for a participant to opt into the POV.\nExample process:\nSurvey to gather participants‚Äô name, role, GitLab account\nParticipant is enrolled in the POV instance, and given access to the right projects\nParticipant is invited to POV meetings\nIn the meeting invitation, participant finds instructions to access the POV instance, link to pre-POV survey, link to instructions to go through the workshops asynchronously, etc.\nMake sure that the POV environment is made available to participants for the kick-off session, even if this session doesn‚Äôt include a workshop.\nSome participants may want to start experimenting with the solution during the kick-off or right after.\nGive simple and clear instructions to ask for help:\nWhere to create an issue and who to tag\nInvitation to Office Hours\nBias for guided, hands-on activities. See POV activities for inspiration\nWhen POV goals are to surface quantitative indicators of improvements brought by AI-powered features, it is tempting to adopt a comparative study approach for the workshops or hackathons described above.\nIt consists of assigning the same task to two groups of developers. One group works ‚Äúas usual,‚Äù while the other is allowed to use AI-powered features. Optionally, a second assignment is given, and the two groups are switched around.\nA drawback of this approach is that working without AI-powered features isn‚Äôt very fun. Considering how precious it is in enterprise settings to have time dedicated to this kind of initiative, spending it on ‚Äúworking as usual‚Äù may not be ideal.\nAs an alternative, ask participants to log, for each task\nBefore: a time estimate if they were working as usual\nAfter: the time it actually took, with the help of AI-powered features.\nAfter: include qualitative feedback about the comfort of working, quality of software, etc.\nFamiliarize yourself with\nDuo Chat best practices\nand\nDuo Code Suggestions top tips\n. There are some great tips and tricks in this blog to assist with integrating Duo Chat and Code Suggestions into a customer‚Äôs workflow. Check the documentation for more practical\nGitLab Duo uses case\n.\nPre-requisites\nWe need to make sure the customer has gone through the AI hands-on\nworkshop\nto have a great experience with AI POV. We also recommend building a\nCustomer Success Plan\nand getting agreement from your customer before the POV start.\nInput to the POV\nExample Customer\ntemplate1\nExample Customer\ntemplate2\nStreamline your POV by adopting\n3 Goals in 30 Days\nSetting up the POV instance\nSet-up the POV instance with your customer‚Äôs POV lead or technical counterpart.\nGetting GitLab Duo trial Licenses\nFor existing GitLab customers,\nfollow the steps here to request Duo trail\nFor prospects, request trial licenses\nhere\nSetup the patricipant environment, their IDE and do a trial run. Below are a few links and documents to help.\nGitLab University -\nDuo Learning Track\nGetting Started Documents -\nGetting Started with GitLab Duo Enterprise\nQuick Start - Duo links\nImport the public\nAI POV Plan project template\nat the root of the POV group, namespace, or instance.\nIt is intended to be used as a central point of entry for participants to make all useful information and resources easily discoverable for testers.\nFollow the checklist provided in the REAMDE.md to customize this project\nConfigurations needed in the instance or group are better done by the customer‚Äôs POV lead\nThis way they have ownership and understanding of the configuration\nIt is also on them to review the terms of experimental features to be turned on, and GitLab‚Äôs\ntesting agreement\nTest AI-powered features in various settings, before undertaking any POV activity. Troubleshoot or adjust POV activities accordingly.\nwithin the customer‚Äôs network or not\nwith a VPN enabled or not\nwith different IDEs including the Web IDE\nPOV Activities\nThe following are different workshop formats to pick and combine in order to facilitate and lead the POV.\nExamples of POV activity timelines:\nCustomer A\nWeek 1: Kick-off and standard guided workshop\nWeek 2: Custom workshop on IDE integration setups and IDE features\nWeek 4: Standard guided workshop for a second set of users\nCustomer B\nWeek 1: Kick-off and standard guided workshop\nWeek 3: Custom workshop on improving quality and generating documentation\nWeek 4: Coaching the POV leads to prepare an internal demo\nWeek 6: AI Hackathon, in three separate sessions, with a measurement of productivity improvement (see\nComparative Study\n)\nStandard AI Workshop\nThe standard AI workshop leverages the\nTanuki Racing\nproject from\nGitLab Learn Labs\n.\nUnder\nCourses / Workshops / AI\nare the workshop instructions\nDepending on the availability of the SA in charge, this workshop is either delivered\nIn a synchronous, instructor-lead session, for optimal engagement\nIn a self-paced, asynchronous setting, for low-touch engagements, or for participants unable to attend the sync session\nInstructions in the workshop project are intended to suit this case.\nA recording of the session may also be made available.\nCustom AI Workshop\nThis approach consists of customizing the standard AI workshop to a customer‚Äôs specific needs or context.\nConsider exploring specific workflows that matter to the customer.\nMake sure to thoroughly test the workflow before the workshop, and adjust prompts and instructions as needed\nConsider using a different project to support the workshop. Either an open source project, or a customer project could be used to focus on a specific framework or language\nIf a customer project is used, first validate whether or not it is allowed to be uploaded to the POV instance or namespace.\nIt requires more involvement, both from GitLab‚Äôs side and from the customer side. Validate this with the POV lead before starting the initiative.\nIt is also likely to yield higher engagement and enthusiasm from the participants. And to give decision makers a more accurate understanding of the value they can expect, including quantitative indicators.\nAI-powered Hackathon\nThis approach goes one step further in terms of involvement, both for preparation, and for the workshops themselves. Workshops are usually 1.5-2.5 hours long, whereas hackathons typically last half a day to a full day.\nParticipants form teams, and use AI-powered features at will for a given period of time to deliver a prototype.\nA hackathon project is prepared to give participants\nInstructions and links to useful resources\nA project boilerplate, helper functions, evaluation functions. Consider having multiple versions for multiple use cases or languages.\nA GitLab issue, issue template, to log time estimates and results. The project‚Äôs readme may also be used for this purpose\nThe scope could be\nThe same for all teams. Eg ‚ÄúFlight tracking app‚Äù or ‚ÄúCompetitive quiz app‚Äù\nTo be chosen within a set of assignments.\nFree: develop whatever you want in the allocated time. Give some example use cases.\nConsider public coding challenges, which are good candidates for hackathon assignments, as they usually give\ninstructions and boilerplates for teams to use.\nclear success/failure or performance for each tasks, when there is a possibility to submit a solution and get instantaneous feedback.\ntime estimates or public leaderboards for each tasks, which can be useful to estimate the value of AI-powered features\nA caveat to public coding challenges is that they could sometimes be considered too far from the reality of enterprise work. To be discussed  ahead of time with POV leads.\nAdditional guidance:\nBe mindful that a hackathon setting could be intimidating or stressful to participants because of:\nTime pressure\nWorking on unfamiliar tasks\nWorking outside of their usual tooling\nStarting from scratch, which may not be frequent in enterprise settings\nFeeling exposed to coworkers or managers judgment\nDiscovering new AI-powered features\nTo mitigate this discomfort:\nSet expectations: participants are not expected to complete all tasks, or deliver perfect software in such a short timeframe\nSet rules of conduct for participants, about openness, kindness, communication\nPrepare resources and tools in the hackathon project\nTo make the most out of the allocated time for the hackathon, consider forming teams before the workshop.\nComparative study\nWhen POV goals are to surface quantitative indicators of improvements brought by AI-powered features, it is tempting to adopt a comparative study approach for the workshops or hackathons described above.\nIt consists of assigning the same task to two groups of developers. One group works ‚Äúas usual‚Äù, while the other is allowed to use AI-powered features. Optionnally, a second assignment is given, and the two groups are switched around.\nA drawback of this approach is that working without AI-powered features isn‚Äôt very fun. Considering how precious it is in enterprise settings to have time dedicated to this kind of initiatives, spending it on ‚Äúworking as usual‚Äù may not be ideal.\nAs an alternative, ask participants to log, for each task\nBefore: a time estimate if they were working as usual\nAfter: the time it actually took, with the help of AI-powered features.\nAfter: include qualitative feedback about comfort of working, quality of software, etc.\nGuided Workshop best practices\nBefore the workshop\nSee setup of the POV instance\nHave a dry run, to surface and tackle any issues with the GitLab instance, or videoconference: screen share, breakout rooms, etc.\nDuring the workshop\nLead the workshop with a co-host from GitLab, who is familiar with the workshop.\nThe co-host can answer questions in the chat, and help some of the students troubleshoot without slowing everyone down.\nUseful resources include our docs‚Äô troubleshooting section, Field FAQ, AI SME FAQ\nUse video conference chat messages to gather feedback with emojis, in order to engage the audience and follow students‚Äô progression along workshop steps\nEx: ‚ÄúWhat‚Äôs your favorite IDE?‚Äù ‚ÄúWhat‚Äôs the language or framework you use the most‚Äù, ‚ÄúWorkshop project created?‚Äù, ‚ÄúPipeline triggered?‚Äù, ‚ÄúVulnerability fixed?‚Äù, etc.\nKeep some time at the end to gather feedback, and prepare next steps.\nQuestions like ‚ÄúWhat features do you wish to test further?‚Äù will hopefully keep students involved after the workshop.\nAfter the workshop\nAsk the customer POV lead about the feedback they had internally\nGive feedback about the workshop, in the appropriate GitLab project or Slack channel\nResults\nTracking\nOther POV Scope and Acceptance\nSA working with SAE and AE can define the POV scope with the customer, with alignment to the business values and the GitLab solution. For each solution, the typical scope and acceptances are listed for reference but the team should define the scope, time and execution with acceptance for each engagement.\nDevSecOps\nAutomated Software Delivery\nDevOps Platform cumulatively\nAI engagements in general\nDiscovery - adapt to the customer‚Äôs context\nAs early as possible, actively discover your customer‚Äôs specific context.\nFor instance, before even presenting GitLab‚Äôs vision or positioning, ask the customer if they have an existing company strategy or guidelines, or personal opinions on Gen-AI in general, and for development.\nInquire about the following topics\nVision on Gen-AI\nSentiment: afraid of AI vs excited about the technology vs cautious about security implications\nHow much is expected: a complete overhaul of practices, or punctual help for developers\nUnderstanding of the market: awareness of the multiple vendors and products? Do they see AI models as a ‚Äúwinner-takes-all‚Äù or as a commodity?\nCompany strategy\nIs Gen-AI for software development an isolated effort, or part of a bigger initiative? In the latter case, it might be useful to understand the topics, metrics, timeline, and decision-makers involved.\nAre other Gen-AI tools already used?\nAre developers authorized to use Gen-AI tools that were not vetted and purchased by the company? What are the security and privacy implications? Are there control mechanisms in place to prevent this kind of shadow IT?\nUse cases and workflows\nProviding comfort and productivity for developers (code generation performance)? Or broader vision over the broader picture = SDLC performance.\nMetrics\nObjectives and key results\nConstraints. Depending on the answers to the following questions, some AI features might not be immediately available. Or they may not apply to a subset of projects.\nSelf-managed or Dedicated? Cloud licensing possible? Premium or Ultimate?\nSecurity and Privacy: allow for API calls outside their infrastructure? Including sending proprietary code?\nExamples of customer inputs that had a significant influence on the technical evaluation:\n‚ÄúCode suggestions are not useful for us, we don‚Äôt want to activate that feature. Instead, we‚Äôre looking to leverage GitLab Duo to make the most out of our existing applications: documenting, refactoring, adding tests, innersourcing, etc.‚Äù\n‚ÄúWe only want to use AI features if they‚Äôre connected to self-hosted, custom AI models, without any data leaving our network‚Äù\nElements of perspective and communication on Gen-AI features\nThe following elements proved effective to influence positively the way AI-powered features are perceived.\nPioneer/learning mindset\n: Gen-AI is relatively new for everyone everywhere. As early adopters, we‚Äôll learn the best patterns to interact with it, and be creative to surface new use cases where AI will prove most useful\nCustomers might ask for features that are not currently available, and which could sound too ambitious or not technically feasible. Try to be open, don‚Äôt dismiss these ideas too quickly. Consider how a combination of GitLab‚Äôs existing or roadmap features could serve this purpose, specifically GitLab Duo Chat which is very versatile.\nEncourage this kind of reflection with questions like: Without considering any technical constraints, what use cases would you like AI to perform? Can you think of any creative use that could be made of the current feature set?\nThis is meant to put attendees in a position to find potential solutions, rather than finding potential issues.\nExamples of creative use cases that can be achieved\n‚ÄúI‚Äôd like the AI to document legacy applications‚Äù could be achieved by customizing the /explain action\n‚ÄúI‚Äôd like to convert Python code to Java‚Äù or ‚ÄúConvert a Jenkins pipeline to GitLab CI‚Äù. This could be achieved by customizing the /refactor action\n‚ÄúI‚Äôd like an answer in a language other than English‚Äù. This typically works pretty well, although our Product team does not actively optimize for multi-language support.\nPlayfulness\n: The element of ‚Äúrandomness‚Äù in AI can be fun. Early-stage, experimental\nWhen demonstrating GitLab Duo Chat, encourage attendees to try it themselves, or give you creative prompts.\nEven out-of-context questions like ‚Äúgive me the recipe for apple pie‚Äù add some fun, and demonstrate that there are some guardrails in place - AI typically responds that this is not the kind of question they can answer.\nAI as an assistant to developers\n, as opposed to an autonomous software delivery system\nhighlights the importance of the developer‚Äôs role and skill: review, adjust, use AI as a tool\nMention the\nreason behind the name ‚ÄúGitLab Duo‚Äù\n:\nThe name GitLab Duo is rooted in You + GitLab AI = the AI dynamic duo.\nBe mindful that some companies or individuals might have a pre-existing bias against Gen-AI. Some might even see any Gen-AI effort as dangerous, or as a way to replace human workers. If this is the case\ntry to understand why\nconsider giving a presentation to popularize Gen-AI to explain how it works, and explore its strengths and limitations. This could go a long way towards putting it under a more favorable light.\nConvey the message that any Gen-AI suggestion is only useful if used in the right context, reviewed, and adjusted as needed by an expert.\nGitLab Duo is a customer-centric approach focused on privacy first, where customers know their intellectual property is secured.\nExpect the unexpected\nGen-AI won‚Äôt necessarily give the same answer to the same prompt.\nYou will run into use cases where AI gives unexpected, wrong, or no answers in your demos. Also keep this in mind when leading a workshop, as a portion of the students will probably experience this.\nWhile this could typically be interpreted as ‚Äúfailing‚Äù in a regular context, it doesn‚Äôt necessarily have to be the case for AI conversations. Use the following to mitigate the negative impact this might have, and even turn it to your advantage:\nManage expectations and mindset, both for a person running a demo or for someone following a workshop\nMention that this is expected, and inherent to Gen-AI. It is neither a bug that will be fixed nor something specific to GitLab‚Äôs Gen-AI features.\nAs a presenter, be prepared for these ‚Äúhappy incidents‚Äù\nBe prepared to brush it off of laugh it off. One wrong suggestion is not a big deal. After all, it‚Äôs not a true demo until something goes wrong.\nUse them as opportunities to adopt\npioneer/learning/playful mindset\n, or convey the messaging that AI is meant as an assistant to development teams.\n‚ÄúIf you want to dig into this later, I‚Äôm sure we‚Äôll be able to find the right prompt to make this work‚Äù\n‚ÄúGood thing I‚Äôm following best practices and reviewing AI suggestions‚Äù\n‚ÄúGlad to see I‚Äôm not obsolete just yet!‚Äù\nThe unexpected answer might be at least partially useful, or serve another purpose\nRe-try with the same prompt, or with a very slight change\nHave alternative prompts or use cases ready\nIf you are presenting in a high-stakes setting where ‚Äúnothing should go wrong‚Äù use video recordings as a backup\nLast modified June 5, 2025:\nRemoving Technical Close Plans (\n65532b7b\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3105}
{"doc_id": "99f82c7703beff33", "url": "https://handbook.gitlab.com/handbook/sales/field-operations/sales-operations/go-to-market/chorus", "title": "Learn How to Use Chorus.ai | The GitLab Handbook", "text": "The Handbook\nSales\nField Operations\nSales Operations\nSales Operations Go To Market\nLearn How to Use Chorus.ai\nConfused about how to use Chorus? Check out the instructions and links below for more information on how to get the most out of this important sales tool.\nWhat is Chorus?\nChorus\nis a call and demo recording software for customer-facing team members. This tool tracks keywords, provides analytics, and transcribes calls into both Salesforce and Outreach. Chorus is used to onboard new team members, provide ongoing training and development for existing team members, provide non-sales employees with access to sales calls, and allow customer-facing team members to recall certain points of a call or demo.\nLogging into Chorus\nLog into Chorus by clicking on the Chorus SSO tile in your\nOkta dashboard\n. If you are not able to login, please post in the #chorus-users Slack channel for further assistance.\nChorus Training & Enablement\nPlease familiarize yourself with\nGitLab‚Äôs SAFE Framework\nbefore utilizing Chorus.\nAll ROW team members are required to complete the\nChorus GDPR Training\nin order to be granted Recorder access. SalesOps will provide team members with the link to the EdCast Chorus training once their\nBaseline Role-Based Entitlement\nis submitted by their manager.\nOnce the team member has completed training, they will notify SalesOps to have their license updated to a Recorder license in Chorus.\nSalesOps will verify course completion via an\nEdCast report\n.\nChorus Scheduler\nTo comply with GDPR and similar privacy laws, all team members with a Recorder license in Chorus are required to use a feature called Chorus Scheduler when organizing meetings with customers. Chorus Scheduler creates a Go-Link, which routes attendees to a designated landing page for location-based compliance capture so that a meeting host can obtain explicit consent from the participants to record meetings. If meeting hosts do not use Chorus Scheduler for customer meetings, Chorus will not record the meeting. For step-by-step instructions on using Chorus Scheduler, please watch\nthis 3-minute demo\nand refer to the\nCall Compliance with Chorus Schedulers deck\nfor additional information.\nIf you are required by a customer to use a different conference platform than Zoom or Google Meet, please follow the instructions on the Static Link Flow slide of the\nCall Compliance with Chorus Schedulers deck\n.\nFor situations where you are a participant in a meeting and are seeking to record, you may download the\nChorus App for Zoom\n. This app allows you to add Chorus to a live call to record the meeting and take notes without leaving Zoom. In order to comply with local privacy laws, you will need to verbally obtain consent from your customer to record before doing so. If the customer does not consent to recording, you may not record the meeting.\nFor troubleshooting regarding the Chorus App for Zoom, please follow the steps below:\nOpen Zoom SSO via\nOkta\nClick on Settings then Zoom Apps\nMake sure ‚ÄúZoom Apps Quick Launch Button‚Äù is turned on\nOpen a Zoom meeting on your desktop app\nYou should now be able to see Chorus App and utilize the tool\nSecurity & Privacy Controls\nThe data retention policy for recorded calls in Chorus is 365 days as of September 27, 2022.\nAny action that would result in bypassing the 365 day data retention policy will need to be approved by GitLab‚Äôs Legal team, including, but not limited to:\nPreserving snippets of recordings in LevelUp indefinitely\nDownloading recordings\nRetaining recordings past the 365 day data retention period\nIf you have a unique circumstance that will require you to preserve a recording past 365-days, please submit a\nLegal Issue - Chorus_Approval template\nand follow the instructions.  You will not receive automatic reminders regarding calls that will be purged after 365 days so it would be a best practice to submit a Legal Issue for preservation at your earliest convenience.\nWhen requesting approval, please note the following:\nA request to retain a recording must be received by Legal\nno later than 15-days prior to the end of the 365-day retention window\n. For example, the request to retain a recording created on May 1st that will automatically be deleted 365-days later must be received by Legal no later than April 15th. Please note that any request submitted within 14-days of the end of the retention window may not be reviewed in time or approved.\nSnippets saved to any playlists will be preserved\nSnippets saved on the call itself will be deleted according to the retention policy\nOther notable items:\nAny time a Chorus link is shared, a password should be required or the link should be set to expire. Each user must complete this action individually.\nAs a best practice, if you need to include a Chorus recording or any type of customer information in an issue, please first mark the issue as\nConfidential\n.\nFor additional details, please see\nthis issue\n.\nChorus Compliance Resources\nWhat is a Chorus Tracker and How do I Create One?\nTrackers can be keywords or phrases that you are interested in highlighting across sales conversations. These can be used to track competitor mentions or client feedback, for example.\nManagers can submit an issue in the\nSales Operations project\nusing the Chorus Tracker Request template to have a Chorus Tracker created. Individual contributors who would like a Chorus Tracker created can sync with their manager and have them submit the request.\nSwim Lanes\nRecorder Access\nUS SAEs and AEs\nUS CSM and SAs\nROW SAEs, AEs, CSM, and SAs upon completion of\nChorus GDPR Training\nListener Access\nAll SDR/BDR team members\nAll Public Sector team members\nAll GitLab team members in non-customer facing roles including, but not limited to, those in Operations roles and all Managers regardless of their org\nGitLab team members may request Listener access through an\nAccess Request\nwhich may be granted on a case by case basis\nWhy is My Meeting ‚ÄúLivestreamed‚Äù?\nThe banner ‚ÄúLive on Zoom with Chorus.ai‚Äù is controlled and set by Zoom, therefore neither Chorus nor GitLab can make changes to the text.\nThis banner means that your meeting is being actively recorded by Chorus.ai and will be stored within the Chorus.ai platform for a period of 90 days, in accordance with GitLab‚Äôs data retention policy for Chorus.ai.\nTo stop recording your meeting at any point, click on the dropdown next to ‚ÄúLive on Zoom with Chorus.ai‚Äù and choose ‚ÄúStop Live Stream‚Äù. Then click on the square stop symbol to completely stop recording.\nRecording with Breakout Rooms\nChorus will not capture the breakout rooms, only the main Zoom meeting will be captured.\nPlease note: By default Chorus has rules around silence on a call. If participants are put into breakout rooms for longer than 5 minutes in the middle of the call, Chorus will drop out of the call due to silence thinking the meeting is over.\nChorus.ai Basics\nUpdate Email Communication Preferences in your\nChorus Personal Settings\nGetting Started with Chorus\nChorus Set Up Made Easy\nChorus Best Practices: Deals & Momentum\nChorus.ai Resources\nHow to Remove Chorus From a Meeting\nLivestream & Recording Notifications\nHow to explain why Chorus is there and why it is recording\nSecurity & Compliance\nShare this with customers as needed\nChorus FAQs\nChorus YouTube Channel\nChorus.ai Advanced Usage\nChorus Release Notes (no longer available)\nChorus Integrations\nFor additional assistance regarding Chorus, please reach out in the #chorus-users Slack channel.\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1253}
{"doc_id": "8cdb98bb3d389b9f", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations", "title": "Developer Relations | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nThe Developer Relations team supports GitLab‚Äôs mission by working with our community to ensure they receive support and recognition for contributing to GitLab.\nWelcome to the GitLab Developer Relations Handbook\nWhat is DevRel?\nDeveloper Relations (short: DevRel) operates at the intersection of technology, community, and advocacy, serving as the voice and ears of GitLab in the wider tech world. Their core mission revolves around nurturing and sustaining a vibrant, engaged community of developers, contributors, and users. This involves a multifaceted approach that includes creating educational content, organizing events and workshops, developing programs, and providing platforms for knowledge exchange and collaboration. The team not only focuses on promoting GitLab‚Äôs features and capabilities but also actively listens to and incorporates feedback from the community to inform product development and improvements.\nOur mission & vision\nDeveloper Relations drives platform awareness and adoption by enabling GitLab customers, connecting through community, and engaging developers where they are. GitLab engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors.\nIn Developer Relations, we align our mission and vision with the company‚Äôs three year strategy. We believe that\neveryone can contribute\n. To help GitLab reach this goal, we aim to double outreach and engagement, strengthen our community presence, and support a healthy community of contributors. Ultimately, these goals boost awareness, adoption, and power our dual flywheels.\nOur Strategy\nOur operational strategy is\ndocumented in our internal handbook\nbut is classified as confidential due to business sensitivity, customer impact, and to foster a psychological safe environment for our team members. Below you can find our strategic plans that are open to the wider community and where the Developer Relations team welcomes collaboration.\nContributor Program Unification & Growth Plan\nCo-Creation Initiative\nMeet the Team\nName\nRole\nArianna Haradon\nSenior Fullstack Engineer\nCesar Saavedra\nSenior Developer Advocate\nDaniel Helfand\nDeveloper Advocate\nDaniel Murphy\nSenior Program Manager, Contributor Success\nEmilio Salvador\nVP, Dev Relations and Community\nFatima Sarah Khalid\nDeveloper Advocate\nFernando Diaz\nSenior Developer Advocate\nItzik Gan-Baruch\nSr. Developer Advocate\n,\nProduct Management internship\nJohn Coghlan\nDirector, Developer Advocacy\nLee Tickett\nFullstack Engineer, Contributor Success\nCore Team member\nMichael Friedrich\nStaff Developer Advocate\nNick Veenhof\nDirector, Contributor Success\nRaimund Hook\nStaff Fullstack Engineer, Contributor Success\nRostyslav Safonov\nFullstack Engineer, Contributor Success\nWilliam Arias\nSenior Developer Advocate\nHow to reach us\nChat with us\nDeveloper Relations team members use three Slack channels:\n#developer-relations\n: for all GitLab-related discussion (ex: questions about an issue, announcement of an upcoming event)\n#developer-relations-hangout\n: for all social discussion and updates shared via the Community Catch bot (ex: plumbing problems, weekend plans)\ndeveloper-relations-confidential\n: (private) for discussion of confidential topics that cannot be shared in a channel with people from outside GitLab (ex: discussing a topic that was shared in #company-fyi-private among our team)\nGitLab team members and others with Slack access can reach us by visiting the\n#developer-relations\nSlack channel, or by tagging the\n@devrel-team\ngroup handle.\nMembers of the wider GitLab community can connect with us in the\npublic Discord rooms\nTeams within Developer Relations are reachable in these Slack channels:\n#dev-advocacy-team\n: the\nDeveloper Advocate\nteam shares content updates, thought leadership & product ideas, and support community responses, CFPs, etc.\n#community-programs\n: for all inquiries regarding\nGitLab Community Programs\n(EDU/OSS/Startups)\n#contributor-success\n: for all inquiries regarding\nContributor Success\nEmail us\nPlease use the\ne-mail address specific to each program\nFile an issue\nFile an issue to work with us:\nSee our project management section\nto find program-specific workboards where you can file an issue\nEmergency contact\nDeveloper Relations emergency contacts\nIncident management roles\nRelevant Slack channels for incident/infrastructure:\n#incidents\n,\n#infrastructure-lounge\nHow we work\nDeveloper Relations Team resources\nDeveloper Relations project management\nCommon program resources\nMeetup checklist\nOur handbooks\nContributor Success\nContributors Program\nDeveloper Advocacy\nCommunity Programs\nOpen Source Program\nEducation Program\nStartups Program\nLeading Organizations\nOur workflows\nCommunity engagement:\nCode of Conduct Enforcement\nCommunity Response Process\nEvents\nCommunity platforms:\nDiscourse Forum\nDiscord\nReddit\nStackOverflow\nCommon Room\nContent:\nContent Effectiveness Strategy\nCommunity newsletter\nContent Review / Fix Fridays\nUTM Tracking Strategy\nCampaign management\nOrganization:\nTeam Budgets\nSwag operations\nAutomated Community Programs\nZapier\nZendesk\nEmail\nTwitter/X\nCloud Resources\nCommunity Interest\nIf you are working on changes to the company, product, or pricing that are expected to have a meaningful impact on members of the wider GitLab community or the GitLab brand, we encourage you to use the label\n~Community Interest\nso that the Developer Relations team can represent the interests of the wider GitLab community in the planning process.\nAll members of the Developer Relations team should be subscribed to this label in both the\ngitlab-com\nand\ngitlab-org\nprojects.\nTeam touchpoints\nOur team has a few weekly events that we use to stay connected and aligned on our work:\nTeam meeting (bi-weekly)\nTeam meetings are recorded via Zoom and recordings linked to the corresponding date in the meeting notes.\n1:1 meeting between each team member and their manager.\nQuestion check-in via Geekbot in Slack for each team member. The responses are shared in the\n#developer-relations-hangout\nSlack channel.\nMonday (weekend social, plans for the week)\nThursday (reminder to share achievements, thoughts, blockers, etc.)\nEnd of week updates: Results and wins, search for\nDeveloper Relations - End of Week updates\nin Google drive.\nOur calendars\nWe use team-wide calendars for collective notification and to manage team logistics and events. Additionally, specific teams within Developer Relations may maintain calendars specific to their programs (such as the Developer Advocacy team calendar).\nDeveloper Relations Team\nCommunity Events\nDeveloper Advocacy Team\nDeveloper Relations OKRs\nEvery quarter, we work on\nteam Objectives and Key Results (OKRs)\nthat align with company OKRs.\nOKRs we seek to align with:\nMarketing OKRs\nDRI Responsibilities\nFor each quarterly objective and key results, the Developer Relations team will assign a\n. For our team, we have responsibilities that build upon the GitLab guidance on achieving and\nupdating\n. Typically, People managers are the DRIs for objectives while ICs are the DRIs for key results.\nObjective DRI Responsibilities\nOwn strategy for achieving objectives including supporting the DRIs for key results that will help to achieve our objectives.\nCollaborate with the owners of the key results that contribte to your objective to set a plan to deliver on the KRs and objective.\nMaintain communication with KR owners - synchronous or asynchronous - throughout the quarter as needed.\nProvide bi-weekly updates in the epic and in the Developer Relations bi-weekly team meeting agenda on the objective including completion percentage and status. We recognize that there will be no change from the previous report at times.\nPresent overview and status updates in team business reviews.\nEscalate any urgent needs to your manager.\nKey Results DRI Responsibilities\nCreate and manage strategy for achieving the key results. Manage dependencies, set actions, and define how your items will be scored.\nProvide bi-weekly updates in the issues in the\nGitLab OKRs project\nincluding completion percentage and status. The issues are the single source of truth for your KR. We recognize that there will be no change from the previous report at times.\nEnsure key result information is up-to-date for team business reviews.\nEscalate any urgent needs to your manager.\nHow we update our OKRs\nTo update our\nlist of current OKRs\n:\nFollow the\nOKRs in GitLab handbook\nCreate OKRs, and KR items.\nAdd the following labels:\nDivision::Marketing\n,\nDepartment::Developer Relations\n,\n.\nOKR Health:\nWe use\nissue health\nindicators to help people understand an OKRs status at a glance. These status indicators are:\non track\nneeds attention\nat risk\nProgress\n: Edit the\nprogress\nattribute in KRs to indicate how much progress has been made.\nDeveloper Relations KPIs\nThe Developer Relations team monitors several\nKey Performance Indicators and related Performance Indicators\n.\nUnique Wider Community Contributors per Month\n(target: Above 200 contributors per month)\nüîó\nWider Community merged MRs per release\nüîó\nDeveloper Relations Monthly Outreach\nActive Community Members\nGitLab for Education Quarterly Active Seats\n(target: Identified in Tableau Chart)\nüîó\nTeam Logos\nGitLab Developer Relations team logos can be found in\n.png\nand\n.svg\nformats by searching for\ngitlab-devrel-logo\nin Google Drive.\nTeam Budgets\nLearn more on the\nDeveloper Relations budget page\nCommunity Diversity, Inclusion, and Belonging\nIn alignment with\nGitLab‚Äôs core value of Diversity, Inclusion, and Belonging (DIB)\n, the Developer Relations team seeks to purposefully design DIB into every facet of its programs and operations. We seek to foster DIB at GitLab and within the wider GitLab community.\nDEI Strategies\nAs DEI (Diversity, Equity and Inclusion) allies in the open source community, GitLab‚Äôs Developer Relations team is committed to the following DEI efforts within our contributor communities:\nDEI project badging:\nPartner with community-wide initiatives to establish a mechanism to recognize, support and promote DEI efforts through a badging system.\nHighlight the DEI values and inclusion efforts of GitLab‚Äôs projects.\nEncourage open-source projects hosted on GitLab to do the same.\nFirst-time contributor inclusion:\nPerform user research studies on first-time contributors to learn and improve the experience.\nImprove documentation from perspectives of first-time contributors.\nImprove community onboarding for newcomers.\nDEI group participation:\nTrack DEI group participation among GitLab team members, beginning with the Developer Relations team.\nEncourage team members to attend open-source DEI working groups and events.\nPoll team members quarterly to track participation.\nExpand from Developer Relations to Marketing and then across GitLab.\nSwag/contributor points coupons at qualifying events:\nOffer GitLab swag and GitLab contributor points coupons at qualifying events.\nIncentivize community members and potential contributors with coupon codes.\nGitLab contributor resource groups:\nForm GitLab contributor resource groups similar to GitLab\nTeam Member Resource Groups\n(TMRGs).\nInclude mentoring/coaching opportunities.\nConsider groups for non-contributing developers or for Developer Relations team members.\nConsider hosting events/days for specified underrepresented groups.\nPlanning Events and Activities\nThis section is meant to document tips and best practices that the Developer Relations team, and GitLab team, should keep in mind as they plan\nevents\nand activities.\nImages:\nWe seek to promote the use of images that represent a diverse group of users, customers, and community members. When we see a lack of diverse representation, we speak up and actively help update those images when possible.\nSpeakers:\nAs event organizers and participants, we seek to include a diverse set of speakers in events that GitLab organizes or touches.\nWe are open-minded:\nWe actively seek feedback and keep an open mind about our current policies. We are open to change and are willing to make structural changes to ensure that we continue to foster DIB among our team and the wider GitLab community.\nWe retain a growth mindset and keep learning:\nWe read articles, attend workshops, and participate in trainings that help educate us about how to foster DIB in our community and how to be inclusive ourselves.\nWe encourage a diverse set of community members to participate in research:\nWe recognize the product inclusivity is important and that we need to build with our community, not just for them.\nWe promote the\nGitLab Diversity Scholarship program\n:\nThis scholarship supports Diversity, Inclusion, and Belonging-focused events financially.\nCommunities who inspire us\nWe take inspiration from the great work being done by other communities. Some of the communities who we take inspiration from:\nLinux Foundation\n- A large, engaged community that act as custodians for important open source technology.\nDebian\n- A large, engaged community that act as custodians for important open source technology.\nFedora\n- A large, engaged community that act as custodians for important open source technology.\nDrupal\n- A large, engaged community that act as custodians for important open source technology.\nWikimedia Foundation\n- This community is a champion for free information with a large, engaged community.\nKubernetes\n- This community consists of a large network of user groups and champions that serve to help each other grow and better utilize Kubernetes.\n- This community consists of a large network of user groups and champions that serve to help each other grow and better utilize AWS.\nDev.to\n- This community creates a welcoming place for the tech community, particularly newcomers, to learn and share content.\nHacker News\n- This community is known for its engaging discussion of the latest tech news and trends.\nGoogle Summer of Code\n- This community inspires us through their work to make the tech community more diverse and inclusive and create new opportunities for people new to tech.\nOutreachy\n- This community inspires us through their work to make the tech community more diverse and inclusive and create new opportunities for people new to tech.\nGrace Hopper Community / Systers\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nLesbians Who Tech\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nTechqueria\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nLatinas in Tech\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nWomen in Tech\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nWomen Who Code\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nRails Girls\n- This community inspires us through their work to make the tech community more diverse and inclusive.\nCommunity Learning Pathway\nThe\nCommunity Learning Pathway\nis a course built to educate the community on how the Developer Relations team works, the different community programs and how to contribute the GitLab. Members of the Community and GitLab team members who complete the course will earn a badge.\nCommunity Building Reading Group\nThe Community Building Reading Group is for GitLab team members interested or engaged in building communities at GitLab. Hosted by members of the Developer Relations team, this learning-focused group examines various principles and practices related to imagining, designing, building, nurturing, growing, and supporting communities. Potential topics of study and discussion include:\nLeading and conducting community activities\nWelcoming new contributors\nManaging relationships in and with communities\nNegotiating community authority and power relations\nArchitecting and enforcing community codes of conduct\nCultivating community cultures\nMeasuring community health and success\nConverting community participants into community contributors\nEncouraging community mentorship\nBuilding community-powered innovation and business models\nAssessing community infrastructure and governance models\nUnderstanding community value propositions and exchanges\nBy collaborating as part of this group, members aim to:\nHone their craft.\nWorking with communities requires thoughtful and skillful practice. This group provides a space for collectively reviewing, assessing, and learning from materials that help members become better practitioners.\nCreate space for support and growth.\nWorking with communities requires emotional labor, and people who undertake it often benefit from spaces to discuss the work‚Äôs challenges with like-minded collaborators. This group would function as one such space.\nGenerate and share resources.\nWorking with communities is easier with knowledge of best practices and trusted frameworks. By reading and reviewing materials on the state of the art, members generate a knowledge commons others can access and from which they can learn.\nAny GitLab team member interested in community-building practices is welcome to participate in and contribute to the group. Unlike typical\nGitLab book clubs\n, this reading group:\nis an ongoing effort rather than a discrete and time-delimited event\nis focused on a series of works rather than a single one\nThe reading group operates on a cadence group members determine together. Group members also collectively determine the material‚Äîfor example, a book chapter, a white paper, a research report, a presentation recording, or a case study‚Äîthey‚Äôll cover each week.\nGroup members propose materials for the group to study and discuss by opening an issue in the Developer Relations team‚Äôs\nCommunity Building\nproject\nusing the\nreading-group\ntemplate, then attaching the\nReading Group::Proposed\nlabel to it.\nGroup members can then browse one another‚Äôs suggestions and collectively select what to study.\nWhen they determine what they‚Äôll read, they re-label the issue\nReading Group::Up Next.\nWhen they begin reading and studying proposed material, they re-label the issue, applying the\nReading Group::Now Reading\nlabel.\nAnd when they‚Äôve finished a selection, they apply the\nReading Group::Finished\nlabel to the associated issue. A\nproject board\ntracks all selections.\nAs they read, group members share notes and impressions asynchronously\nvia files\nstored in the\nCommunity Building\nproject. When they have completed a selection, they polish these notes and update the\nCommunity Building\nwiki accordingly.\nIn each cycle, a group member (typically the person who proposed the materials) acts as ‚Äúleader.‚Äù Group leaders pose some basic discussion questions or thought-generating insights to guide the group‚Äôs reading and frame its discussion. Group members meet at regular intervals for live, synchronous discussion of the reading materials (suggested time for discussion meetings: 45 minutes). Recordings of these meetings are available, but because discussions often contain personal details and sensitive issues, these recordings are only access to GitLab team members via an internal Google Drive.\nCommunity Learning Pathway: Course Resources\nCommunity Learning Pathway The Community Learning pathway is a course on the GitLab Learn platform, ‚Ä¶\nCommunity Programs\nMeet the Community Programs team at GitLab\nContributor Success Team\nCore Team\nBecoming a Core Team member A new member can be added to the Core Team at any time through the ‚Ä¶\nDeveloper Advocacy\nDeveloper Advocates build GitLab's technical brand with deep, meaningful conversations on engineering topics relevant to our community.\nDeveloper Relations - Content Effectiveness\nHow the Developer Relations team measures effectiveness of content it creates.\nDeveloper Relations Content Requests\nHow to request content from the Developer Relations team\nDeveloper Relations Department Performance Indicators\nPerformance Indicators for the Developer Relations Department at GitLab\nDeveloper Relations Events\nEvents are a great way for GitLab and the Developer Relations team to connect with customers and the ‚Ä¶\nDeveloper Relations Program Management\nThe Developer Relations team works from issues and issue boards. If you need our assistance with any ‚Ä¶\nDeveloper Relations workflow: UTM Tracking Strategy\nOverview The purpose of this page is to outline the UTM strategy of the Community team and how it ‚Ä¶\nDeveloper Relations Workflows and Tools\nWorkflows Team Workflows Code of Conduct Enforcement Team Budgets Developer Advocate Community ‚Ä¶\nDeveloper Relations: Program Resources\nContact e-mails The team uses a set of contact e-mails, generally one per program, with additional ‚Ä¶\nGitLab Co-Create Initiative\nGoal The Co-Create Program is designed to provide our customers with the necessary support and ‚Ä¶\nGitLab Community Apps\nGitLab Community Apps Overview The GitLab Community Apps is a suite of tools that enables the ‚Ä¶\nGitLab Contributors Program\nLearn about the GitLab Contributors Program from the Contributor Success team under Developer Relations\nGitLab Meetup Checklist\nThis guide is intended to help Meetup organizers run events that their community will love. Our aim ‚Ä¶\nLeading Organizations\nLeading Organizations are groups and people who consistently make meaningful contributions to GitLab.\nStrategic Plans\nTechnical Marketing\nLearn more about the purpose, process and output of GitLab's Technical Marketing.\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3222}
{"doc_id": "75180cec97d150f3", "url": "https://handbook.gitlab.com/handbook/company/culture/inclusion", "title": "Diversity, Inclusion & Belonging | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nGitLab Culture\nDiversity, Inclusion & Belonging\nDiversity, Inclusion & Belonging is fundamental to the success of GitLab. We include it in every way possible and in all that we do.\nDiversity, Inclusion & Belonging at GitLab\nDiversity, Inclusion & Belonging is fundamental to the success of GitLab.  We include it in every way possible and in all that we do.  We strive for a transparent environment where all globally dispersed voices are heard and welcomed.  We strive for an environment where people can show up as their full selves each day and can contribute to their best ability.  And with over 100,000 organizations utilizing GitLab across the globe, we strive for a team that is representative of our users.\nDiversity complements our other\nvalues\n, specifically Collaboration, Efficiency and Results.\nAnd diversity in our leadership\nsupports innovation\n,\npromotes better decision making\nand\nimproves financial results\n.\nGitLab‚Äôs Diversity Inclusion and Belonging Mission\nMission\n: At GitLab, we believe everyone can contribute and the Diversity Inclusion and Belonging Team are building scalable strategies based on our acronym, A.D.A.P.T. which stands for\nction,\noing Good in the communities we serve, holding ourselves\nccountable and creating equitable\nolicies in a\nransparent environment.  We are focused on helping to build high performing, customer centric teams by expanding, establishing, embedding our DIB  (/handbook/values/#diversity-inclusion). Just as DIB is a journey, our acronym,\nmirrors the agility required throughout that journey.\nAction\n- Action puts intentionality into how we attract, progress and retain our team members as well as engage with our customers and the open source community.\nDo Good\n- We ‚ÄúDo Good‚Äù by providing avenues for GitLab & team members to meaningfully contribute to our community and society.\nAccountable\n- We hold ourselves Accountable in the commitments we make as well as being Answerable for the outcome.\nPolicies\n- We build scalable Policies to govern our work and actionable processes which inform our program development and execution.\nTransparent\n- Transparency is the T in our GitLab CREDIT values and how we operate within DIB ensuring that our internal efforts are reflected externally.\nGitLab‚Äôs Diversity, Inclusion & Belonging Vision\nVision\n: The Diversity Inclusion and Belonging value empowers everyone to contribute.\nGitLab‚Äôs definition of Diversity, Inclusion & Belonging\nThe phrase ‚ÄúDiversity, Inclusion & Belonging‚Äù (or DIB) refers to the terminology for the initiative to create a diverse workforce and an environment where everyone can be their full selves.\nDiversity\nrefers to characteristics of the people who make up GitLab and how they identify. Race, gender, age, ethnicity, religion, national origin, disability, sexual orientation are\nsome\nexamples of how the data might be categorized when looking at GitLab‚Äôs diversity.\nSometimes we can see things that make us diverse and sometimes we can‚Äôt. We believe that a company composed of a diverse group of people may lead to diverse opinions and ideas which, if productively engaged with, can build innovation.\nGitLab uses the term ‚Äúunderrepresented‚Äù and it is meant to be a way of recognizing that we need more of what we do not have so that we can be at our best.\nThe context is ‚Äúat GitLab‚Äù or ‚Äúin a specific department or team at GitLab.‚Äù\nThis term is generally used in the context of reporting on how GitLab is working on understanding and improving the sourcing, interviewing, hiring, and retention of those who either want to work or currently work at GitLab.\nA single person\nshould not\nbe referred to as a ‚Äúdiverse person‚Äù or a ‚Äúdiversity hire‚Äù which would imply they are not included in the current community or that they are only employed because of a factor that is not directly related to their skills and their ability to do their job.\nPeople should not be singled out or ‚Äúothered‚Äù by labels with cold terminology in personal interactions.\nFor additional information about how GitLab uses this data to make progress, please see\n‚Äúselect underrepresented group‚Äù\nInclusion\nis the ability to recognize, respect, and value differences in those around us.  It focuses on the action and understanding of what makes us diverse and working towards building a diverse team and creating welcoming workplace. It requires skills such as empathy, openness, listening, etc.  This lays the foundation of an inclusive mindset.  The foundation of understanding gives way to the actions and being intentional about creating policies and practices that embrace diversity that in the end change the overall company culture to create an environment of inclusion. Inclusion also means being aware of both\npositive and negative biases\nand how those biases impact who we hire, work with, and retain.\nGitLab believes that many perspectives coming together creates a more innovative environment to work in with more satisfied team members, leading to a better product and increased profitability.\nBelonging\nis a feeling that your insights and contributions are valued. It goes back to team members feeling they can bring their full selves to work. It‚Äôs not enough to simply include people to have a ‚Äúseat at the table‚Äù, but it‚Äôs important to amplify everyone‚Äôs voices, remove barriers and appreciate each others for their unique backgrounds.\nEmbracing inclusion may increase the\nsense of belonging\n. Team members become more engaged and are invested in the work they are doing, because they are able to see themselves in the work being accomplished with the company overall.\nWe believe in empowering team members to get their work done efficiently and collaboratively by establishing clear\nDRIs\nfor all our work.\nDRIs do not owe anyone an explanation for their decisions\n, but DRIs can still acknowledge input by closing an issue and marking it\nWon't Do\nor commenting on an issue acknowledging that they have read all the comments.\nAll team members don‚Äôt have to agree on the best course of action- we can\ndisagree, commit, and disagree\n- but everyone can contribute and it is on the DRI to acknowledge those.\nSome other ways we actively cultivate a sense of Belonging at GitLab include creating and cultivating allies, welcoming family members in the background of a call, and sharing\nnegative feedback in 1-1 settings\n.\nA good way to look at Diversity, Inclusion & Belonging is:\nDiversity\ndiversity dimensions/layers that make people who they are\nknowing the layers and having a seat at the table\nInclusion\nhaving a voice\nfeeling empowered to use your voice\nBelonging\nacknowledgment of your voice being heard\nthe feeling of being a part of something\ncreating an environment where team members feel secure to be themselves\nExamples of Select Underrepresented Groups\nAn underrepresented group describes a subset of a population that holds a smaller percentage within a significant subgroup than the subset holds in the general population. The accepted definition of ‚Äúunderrepresented minorities‚Äù from the National Science Foundation and other major research institutions focuses on racial and ethnic groups whose representation in a profession is significantly below their representation in the general population.  Populations whose representation in tech roles has been historically low.  Tech roles are based on Federal Employer Information Report EEO-1 skill designations. At GitLab, this includes all technical roles across the company, such as Engineering & Product.\nAt GitLab, we consider the following groups to be\nunderrepresented groups\n:\nWomen - Globally\nWomen in\nManagement\n- Globally\nWomen in\nSenior Leadership\n- Globally\nBlack/African American - United States\nBlack/African American in\nManagement\n- United States\nBlack/African American in\nSenior Leadership\n- United States\nHispanic/Latino - United States\nHispanic/Latino in\nManagement\n- United States\nHispanic/Latino in\nSenior Leadership\n- United States\nIndigenous Peoples/Alaska Native - United States\nIndigenous Peoples/Alaska Native in\nManagement\n- United States\nIndigenous Peoples/Alaska Native in\nSenior Leadership\n- United States\nHawaiian/Pacific Islander - United States\nHawaiian/Pacific Islander in\nManagement\n- United States\nHawaiian/Pacific Islander in\nSenior Leadership\n- United States\n**Due to data and or legal limitations, this is not an exhaustive list of all of our underrepresented groups. Those with disabilities, those that identify as LGBTQIA+, those who choose not to disclose as well as underrepresented ethnicities outside of the US, etc.\nThe DIB Team is actively working on finding data sets outside the US and inclusion metrics for underrepresented groups we cannot report on as team member representation.\nOf Note: Management refers to Team Members who are People Managers, whereas Leadership denotes Team Members who are in Director-level positions and above.\nSource: GitLab‚Äôs People Analytics Team, WorkDay\nDiversity, Inclusion and Belonging Team\nSherida McMullan\n- Vice President, Diversity, Inclusion and Belonging\nManager, Diversity, Inclusion and Belonging\nNaomi Johnson - DIB Business Partner\nValues\nInclusive teams are naturally more engaged, collaborative and innovative.\nWe aim to align\nour values\nto be reflective of our company wide commitment to fostering a diverse and inclusive environment.\nIn addition, the very nature of our company is to facilitate and foster inclusion.\nWe believe in asynchronous communication, we allow flexible work hours. GitLab team members are encouraged to work when and where they are most comfortable.\nFully distributed and completely connected\nThe GitLab team is fully distributed across the globe, providing our team the opportunity to connect with each others cultures, celebrations and unique traditions.\nWe collaborate professionally and connect personally!\nOur unique all-remote team opens our door to everyone.\nCandidates are not limited by geography and we\nchampion this approach\n, to the extent that it‚Äôs possible, for all companies!\nBy having no offices and allowing each GitLab team member to work and live where they are most comfortable, GitLab offers a uniquely inclusive culture.\nAll-remote means that you\nwill not sacrifice career advancement\nby working outside of the office, as even GitLab executives are fully remote.\nAll-remote creates a workplace where caregivers, individuals with physical disabilities, etc. are not disadvantaged for being unable to regularly commute into an office.\nGitLab‚Äôs approach to\nSpending Company Money\nenables all team members to create a work environment uniquely tailored for them.\nAll-remote enables those who must relocate frequently for family and personal reasons to take their career with them.\nAll-remote allows movement and relocation to physical settings that contribute to an individual‚Äôs health (e.g. moving to a location with an improved air quality index).\nLearn more about GitLab‚Äôs\nall-remote culture\n.\nGitLab team member data\nPlease see our\nidentity data\n.\nWhat we are doing with Diversity, Inclusion & Belonging\nTalent Acquisition initiatives\nThis page provides an overview of our Diversity, Inclusion & Belonging Talent Acquisition initiatives\n.\nEngineering Initiatives\nThis page provides an overview of our Diversity, Inclusion & Belonging Engineering initiatives\nSales Initiatives\n#IamRemarkable Workshop\n#IamRemarkable\nis a workshop created by Google. The initiative aims to individuals to celebrate their achievements in the workplace and beyond, and to challenge perceptions around self-promotion.\nLogistics\nAt GitLab we launched the #IamRemarkable workshop in April 2021, and aim to continue with two workshops per quarter on an ongoing basis. Before the start of each quarter, a quarterly workshop planning issue will be opened where team members have the opportunity to volunteer to participate. Slots will be allocated on first come first serve basis.\nThe workshops are kept to a max of 15 team members to generate more comfort and psychological safety within the group, in addition to providing everyone with an opportunity to share and contribute to discussion. Each workshop is two hours in duration. Due to the personal nature of the workshop, we do not record #IamRemarkable sessions.\nFacilitators\nCurrently, we have three GitLab team members who are certified to facilitate the #IamRemarkable workshop:\nGiuliana Lucchesi\nTerri Chu\nGosia Ksionek\nIn order to more efficiently scale this initiative at GitLab, we would\nlove\nto have more facilitators join us! Anyone can\nregister to become a facilitator\n. As soon as you have been certified, feel free to add your name to the list of facilitators above.\nInclusive benefits\nWe list our\nPregnancy & Maternity Care\npublicly so people don‚Äôt have to ask for them during interviews. In addition GitLab offers an Employee Assistance Program to all team members via\nModern Health\n, a one-stop shop for all tools related to mental well-being and self-improvement.\nInclusive language\nIn our\nwe list: ‚ÄòUse inclusive language. For example, prefer ‚ÄúHi everybody‚Äù or ‚ÄúHi people‚Äù to ‚ÄúHi guys‚Äù.\nTMRGs - Team Member Resource Groups\nWe have created several TMRGs and welcome interest in creating new ones. Would you like to sign up for an Team Member Resource Group, start an TMRG, or just learn more?  See our\nTMRG Guide\n.\nMilitary veterans and spouses\nGitLab welcomes military veterans from around the world, as well as military spouses, to learn more about\nlife at GitLab\nand to apply for\nvacancies\n. We recognize the values gained from military experience, and we foster an\ninclusive atmosphere\nto thrive in when returning to civilian life.\nOur\nall-remote culture\nprovides an ideal work environment for military veterans and spouses. By empowering team members to live and work where they are most comfortable, veterans and spouses can work in a safe, nurturing environment that they\nchoose and design\n.\nWe encourage military veterans and spouses to\nread testimonials\nfrom GitLab team members to understand the benefits of all-remote when\njoining the workforce\nfollowing military service. We are committed to our\nMilitary Leave\npolicy.\nGitLab is actively\niterating\nwithin Diversity, Inclusion & Belonging and Talent Acquisition to ensure that additional underrepresented groups are pursued, embraced, and positioned for success.\nDisability Inclusion\nGitLab welcomes all types of team members, including any that may choose to identify as ones that currently have or were previously diagnosed as having a disability. In our HRIS (Human Resource Information System) Workday, on the Job tab page, in the Equal Employment Opportunity section, we have a field titled\nDisability Status\nthat we ask our team members to complete during the onboarding process.\nThe reason we ask is because it is a legal requirement in the United States under Section 503 of the\nRehabilitation Act of 1973\n, as we are a Federal contractor and are required to ask employees to\nvoluntarily\nself-identify if they have a disability or have ever had a disability, and to provide equal employment opportunity to qualified people with disabilities.\nThe options of this field are:\nYes, I have or previously had a disability\nNo, I do not have a disability\nPrefer Not to Answer\nIf you are unsure how to answer, please review our\nIndividual with Disabilities Policy\n.\nAt GitLab, we are proud to make reasonable accommodations to the known disability of a team member. Please review the\nreasonable accommodation\nhandbook section if you need a reasonable accommodation due to your disability. Find more information on GitLab Inc‚Äôs\nIndividuals with Disabilities\npolicy.\nUnited States Veteran Inclusion\nThe United States Office of Federal Contract Compliance Programs (OFCCP) enforces the affirmative action provisions of the Vietnam Era Veterans‚Äô Readjustment Assistance Act of 1974. This law, sometimes referred to as VEVRAA, requires employers doing business with the United States Federal Government (such as our GitLab Federal entity) to take steps to recruit, hire and promote protected veterans. It also makes it illegal to discriminate against protected veterans when making employment decisions on hiring, firing, pay, benefits, job assignments, promotions, layoffs, training, and other employment-related activities. Under VEVRAA, a veteran who served on active duty in the U.S. military and was discharged or release from service under conditions other than dishonorable may be classified as one or more of the four Protected Veteran categories:\nDisabled Veteran\nA veteran who served on active duty in the U.S. military and is entitled to disability compensation (or who but for the receipt of military retired pay would be entitled to disability compensation) under laws administered by the Secretary of Veterans Affairs, or was discharged or released from active duty because of a service-connected disability.\nRecently Separated Veteran\nA veteran separated during the three-year period beginning on the date of the veteran‚Äôs discharge or release from active duty in the U.S. military.\nArmed Forces Service Medal Veteran\nA veteran who, while serving on active duty in the U.S. military, participated in a U.S. military operation that received an Armed Forces service medal.\nOther Protected Veteran (listed in Workday as Active Duty Wartime or Campaign Badge Veteran)\nA veteran who served on active duty in the U.S. military during a war, or in a campaign or expedition for which a campaign badge was authorized under the laws administered by the Department of Defense.\nIn our HRIS (Human Resource Information System) Workday, on the Job tab page, in the Equal Employment Opportunity section, we have a field titled\nProtected Veteran Status\nthat we ask our US-based team members to complete during the onboarding process. The reason we ask is because it is a legal requirement in the United States for us to request this information. We encourage GitLab team members to self-disclose in our HRIS without any fear of judgment or negative consequences, but it is always optional. All veteran status data is completely confidential, and only requested for mandatory reporting purposes.\nThe options of this field are:\nYes, I am a US Veteran with a Protected Status\nNot Applicable\nPrefer Not to Answer\nAbove this field, we have a section titled\nVeteran Status\nthat we ask our US-based team members to review and also complete during the onboarding process, if it applies to them and if they so wish. The reason we ask is because it is a legal requirement in the United States for us to request and document this information. We encourage our US-based GitLab team members to self-disclose their Veteran Status in our HRIS without any fear of judgment or negative consequences, but it is always optional. Again, all veteran status data is completely confidential, and only requested for mandatory reporting purposes.\nIf you are a team member on a GitLab Inc or Federal contract and a disabled veteran you may request a ‚Äúreasonable accommodation.‚Äù A reasonable accommodation is one that allows you to perform your job, and must be provided by GitLab unless doing so would cause GitLab significant difficulty or expense. A reasonable accommodation does not change essential job functions. GitLab can choose the type of reasonable accommodation that will be made available; however, the accommodation must be effective. More information on how to request a reasonable accommodation is available\nhere\n. Please review the\nreasonable accommodation\nhandbook section if you would like an accommodation due to your veteran status.\nDiversity, Inclusion & Belonging Learning & Development\nProcess for learning material and course creators\nTeam members who might use this process include:\nDIB and L&D team members, managers creating training for their teams, departments creating required compliance training, team members creating training for their peers or community, Developer Relations creating training for the wider GitLab community\nWhen a new training is created or curated open up an issue using the\nfollowing template\n. It is best to open this issue\nas soon as you‚Äôve begun building out the learning material\n* so that the DIB and L&D team can provide early guidance\nAssign the issue to a DIB Team Member and a L&D team member - the assignees must not be someone who participated in creating or curating the training\nThe assignees will go through the content of the training and complete the QA process as outlined in the issue.\nThe content creator and assignees will use the issue to collaborate on and document improvements made to the content that align with quality check list above\nWhen all 3 participants agree that the course has met our inclusion and learning standards, close the issue and proceed with adding the materials or course to GitLab Learn\nCommunity\nGitLab team members are distributed across the globe, giving us access to an array of opportunity.\nWe encourage collaboration with global organizations and programs that support underrepresented individuals in the tech industry.\nGitLab also provides additional support through the\nGitLab Diversity Sponsorship program\n.\nWe offer funds to help support the event financially, and if the event is in a city we have a GitLab team member, we get hands-on by offering to coach and/or give a talk whenever possible.\nWe encourage organizers of events that are supported through our\nGitLab Diversity Sponsorship program\nto share\nthis sign up link\nwith attendees. Everyone can contribute.\nDefinitions\nGender and Sexual Orientation Identity Definitions and FAQ\nLeadership\nis defined as director and above.\nGeographically\nis defined as those countries we use in our identity data.\nWomen is the term GitLab uses instead of ‚ÄúFemale‚Äù. ‚ÄúFemale/Male‚Äù are gender terms often designated at birth. ‚ÄúWoman/Man‚Äù are gender terms based on self-identification. At GitLab, we define women based on how team members self-identify their gender in Workday.\nRace\n- To understand our representation, we want to do our best in having categories for race that team members can select where they are able to in some way identify with the options available. These definitions align with the EEOC:\nAmerican Indian or Alaska Native\n- A person having origins in any of the original peoples of North and South America (including Central America) and who maintains tribal affiliation or community attachment. This category includes people who indicate their race as American Indian, Alaska Native, Navajo, Blackfeet, Inupiat, Yup‚Äôik, Central American Indian groups or South American Indian groups.\nAsian\n- A person having origins in any of the original peoples of the Far East, Southeast Asia, or the Indian subcontinent including but not limited to: Cambodia, China, India, Japan, Korea, Malaysia, Pakistan, the Philippine Islands, Thailand, and Vietnam. This includes people who indicate their race as Asian Indian, Chinese, Filipino, Korean, Japanese, Vietnamese and or other not mentioned Asian identifies.\nBlack\n- A person having origins in any of the Black racial groups of Africa. Including people who indicate their race as Black or African American, Cape Coloreds, Carribean, Kenyan, Nigerian, or Haitian.\nHispanic or LatinX\n- A person of Cuban, Mexican, Puerto Rican, South or Central American, or other Spanish culture or origin, regardless of race. The term, ‚ÄúSpanish origin‚Äù, can be used in addition to ‚ÄúHispanic or Latino‚Äù. Although not of Spanish-origin, Brazil is also included in this category due its inclusion in the LatinX definition.\nNative Hawaiian or Other Pacific Islander\n- A person having origins in any of the original people of Hawaii, Guam, Samoa, or other Pacific Islands. Included but not limited to people who reported their race as Fijian, Guamanian, Chamorro, Marshallese, Native Hawaiian, Samoan, Tongan or other Pacific Islander.\nMultiracial\n- refers to two or more races as described in the listed categories.\nWhite\n- A person having origins in any of the original people of Europe, the Middle East, or North Africa. Included but not limited to people who indicate their race as: White, Irish, German, Italian, Lebanese, Arab, Moroccan, or Caucasian.\nEthnicity\n: Can be more broadly defined as ‚Äúlarge groups of people classed according to common racial, national, tribal, religious, linguistic, or cultural origin or background.‚Äù\nFor example people who are Black/African Descent can have a variety of ethnicities such as African,  African American, Afro-Caribbean, Afro-Latinx etc. Whilst physical characteristics can be similar there could be cultural differences.\nUnderrepresented Group\nThis can be defined as a group whose percentage of the population in a given group is lower than their percentage of the population of country, community, organization or otherwise.\nAn example of this at GitLab is: Women within Senior Leadership is still low compared to Men within Senior Leadership. Which meant that GitLab created the goal of 50% of all senior leadership should be women by December 2021 to address the imbalance within this underrepresented group.\nTMRG (Team Member Resource Group)\n- In other organizations, a TMRG can be an ERG (Employee Resource Group). TMRGs are voluntary, team member-led groups focused on fostering diversity, inclusion and belonging within GitLab. These groups help team members build stronger internal and external connections; offer social, educational, and outreach activities; create development opportunities for future leaders; and increase engagement among team members.\nAlly\n- A diversity, inclusion and belonging ‚Äúally‚Äù is someone who is willing to take action in support of another person, in order to remove barriers that impede that person from contributing their skills and talents in the workplace or community.\nAllyship\n- Is the state of being an ally, supporting or being a member of  groups or associations of the people you are an ally too. An example of this is someone who does not identify as part of the\ncommunity being a part of the TMRG and supporting the endeavors.\nUnconscious bias\n- Unconscious biases are stereotypes about certain groups of people that individuals form outside their own conscious awareness.\nNearly all our thoughts and actions are influenced, at least in part, by unconscious impulses. There‚Äôs no reason bias should be out of scope. Categorizing people based on social and other characteristics is a powerful survival mechanism, as it helps to distinguish friends from foes and make quick ‚Äúlife or death‚Äù decisions based on ‚Äúinner feeling‚Äù. At the same time this is a fertile ground for growing stereotypes, prejudice, discrimination.\nPsychological safety\n- is defined by Amy Edmondson as a ‚Äúshared belief held by members of a team that the team is safe for interpersonal risk taking‚Äù.\nIt‚Äôs not about being warm and fuzzy and sharing your feelings. It‚Äôs about being comfortable admitting when you are wrong or have made a mistake as well as challenging each other for the better.\nPerformance Indicators\nGitLab Diversity, Inclusion, and Belonging 2023\nEveryone means everyone Inclusion has always been at the heart of GitLab. In fact, we founded the ‚Ä¶\nAdvisory Group Members\nThis page lists the members of the Diversity, Inclusion & Belonging Advisory Group.\nBeing Inclusive\nWe are all responsible for creating and maintaining an inclusive environment at GitLab.\nCEO Diversity Inclusion and Belonging Statement\nGitLab's CEO Statement - TBD.\nDIB Working Group\nA strategic group of impactful team members whose purpose is to drive action and results in support of DIB and the DIB Leadership Council\nDiversity Inclusion & Belonging Communications Strategy\nPRoviding details on how the DIB Team communicates with GitLab to achieve engagement, contributions and collaborations from team members\nEngineering Initiatives\nLearn more about GitLab Diversity, Inclusion & Belonging Engineering Initiatives.\nGitLab Career Enablement Team Member Advocacy Group (TMAG)\nWe are the GitLab Career Enablement Team Member Advocacy Group (TMAG) founded in the Summer of 2022. Learn more!\nGitLab Mental Health Team Member Advocacy Group (TMAG)\nWe are the Mental Health Team Member Advocacy Group (TMAG) founded in the Summer of 2024. Learn more!\nGoals\nThis document provides leadership and team members visbility on the Diversity, Inclusion & Belonging Goals\nIdentity data\nGitLab country specific data in regard to team members location, gender, ethnicity, race, age etc. View data here!\nLeadership Diversity Inclusion & Belonging Council\nA strategic group of Senior leaders URG Leaders who assist the DIB team to implement the strategy and align the strategy to the Division's strategic imperatives\nNeurodiversity in the Workplace Short Course\nThis page hosts the read section of the Neurodiversity in the Workplace Short Course\nNeurodiversity Resources\nThis page provides resources for team members, managers and those who identify as neurodivergent\nSpeaker Series\nThis page provides the videos and resources of past DIB Speaker Series events and an active list of upcoming DIB Speaker Series talks\nSponsorship Program Guide\nThe process for Sponsorship Programs at GitLab\nTalent Acquisition Initiatives\nLearn more about GitLab Diversity, Inclusion & Belonging Talent Acquisition Initiatives.\nThe Ally Lab\nLearn what is an ally, how to be an ally and what it means to be an ally.\nTMAG - Generational Understanding\nWe are the Generational Understanding Resource Group (TMAG) founded in the summer of 2020. Learn more!\nTMRG - API (Asian-Pacific Islander)\nAn overview of our API TMRG\nTMRG - Black@GitLab\nAn overview of our remote TMRG Black@GitLab\nTMRG - Caregivers\nGathering place for the caregivers of GitLab!\nTMRG - Gente\nAn overview of our TMRG Gente\nTMRG - GitLab Disability & Neurodivergence\nHelpful resources, support, and activities for differently abled team members or who are caring for a differently abled loved one.\nTMRG - GitLab Pride\nWe are the GitLab Pride Team Member Resource Group (TMRG) founded in the fall of 2019. Learn more!\nTMRG - GitLab Women\nAn overview of our remote TMRG GitLab Women\nTMRG - Global Voices\nGitLab's Global Voices TMRG\nTMRG - MIT - Minorities in Tech\nWe are the Minorities in Tech (MIT) Enterprise Resource Group (TMRG) founded in the fall of 2019. Learn more!\nTMRG - Team Member and Advocacy Resource Group Guide\nAn overview of what is needed to start and sustain a Team Member Resource Group or a Team Member Advocacy Group\nUnconscious bias\nLearn more about unconscious bias and how to recognize it.\nLast modified July 6, 2025:\nUpdate file _index.md (\ncb0434bf\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4801}
{"doc_id": "55e45b4872ecde5d", "url": "https://handbook.gitlab.com/handbook/engineering/development/sec/secure/vulnerability-research/cna", "title": "Application Security Testing, Vulnerability Research - CNA Processes | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevelopment\nSec Section\nApplication Security Testing Sub-Department\nApplication Security Testing, Vulnerability Research\nApplication Security Testing, Vulnerability Research - CNA Processes\nThis handbook page is intended to document CNA processes that the\nVulnerability Research\nteam uses in contributing to\nGitLab‚Äôs role as a CNA.\nCVE Requests\nEvents we operate upon\nThe team will operate upon a\nCVE Publish Request\nissue being marked as ‚Äúready for Immediate Publishing‚Äù.\nWorkflow\nTriage\n: Within 2 days of receiving the request, we review the issue for completeness and accuracy.\nDecision Path\n:\nIf changes needed\n: Leave a comment requesting specific clarifications or modifications from the Issue Author/Assignee\nWait for response\nConduct any necessary follow-up discussions\nProceed to either Approval or Rejection (in rare cases)\nIf complete\n: Approve the issue, which automatically:\nPublishes the CVE\nCloses the issue\nTimeline\nInitial triage and first response:\nWithin 2 days\nof receiving the publication request\nCWEs, CVSS Scores, and Descriptions\nStart with identifying an accurate CWE for the vulnerability\nReview the CVSS score that the submitter provided\nIf the CVSS score is largely out-of-line with what you would expect\nbased on the CWE and the description, confirm with the submitter that the\nscore makes sense\nIf clear reasons exist for the unexpected CVSS metrics, add a note in the\ndescription to this effect. For example,\n\"‚Ä¶ Overall impact is limited\ndue to the user only being able to affect their own account\"\nNote\nThe CVSS score should make sense from an outside perspective\nwhen only having access to the CVE description and CWE\nGPG Key\nThe email\ncve@gitlab.com\nhas\na GPG key\nthat the\nVulnerability Research team uses during CNA procesess.\nExtending Public Key\nThe GitLab\ncve@gitlab.com\nemail‚Äôs public GPG key is set to expire every six\nmonths. Follow these steps to extend the expiration by another six months:\nHave both the public and private keys to\ncve@gitlab.com\nlocally.\nList the keys with\ngpg --list-keys\n$\n> gpg --list-keys\n/home/user/.gnupg/pubring.kbx\n------------------------------\npub   rsa4096 2020-00-00 [SC] [expires: 2020-06-00]\nuid           [ultimate] GitLab CVE <cve@gitlab.com>\nsub   rsa4096 2020-00-00 [E] [expires: 2020-06-00]\nEdit the key with\ngpg --edit-key AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ\nSet the expiration date on the key to another\n6m\nwith the\nexpire\ninteractive command:\n$\n> gpg --edit-key AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ\n...\ngpg> expire\n...\nKey is valid for? (0) 6m\nOnce the expiration on the public key is extended by another six months, export\nan armored version of the key with:\ngpg --export --armor AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ\nYou may also want to fetch the ID of the key with. The ID is the last 16\ncharacters of the long-form key\n:\ngpg --list-signatures cve@gitlab.com\nUpdate Locations\nThe new public GPG key needs to be updated in the following locations:\ncves-workflow (internal)\nhttps://about.gitlab.com/security/cve/\nLast modified March 11, 2025:\nUpdate VR CNA process (\n567ac77e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 470}
{"doc_id": "84e81dc5ae57461b", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/cost-management/how-to-engage", "title": "How to Engage | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nCost Management\nHow to Engage\nHow to Engage with Infrastructure Analyst\nInfrafin Board\n#infrafin slack channel\nOverview\nThis page will go over preferred ways to engage with infrastructure analyst for various scenarios. For misc questions refer to the buttons above, so you can ask in\n#infrafin\nslack channel, or open an issue on the\nInfrafin Board\n. Slack questions will likely get faster responses, and issues will be triaged in priority according to the\nBoard Criteria\n. For issues that do not meet the board criteria, please open an issue in\nEngineering Metrics Board\nand these will be worked on as availability permits.\nFor specific asks check the FAQ below to see if your question is answered there.\nI am a PM and I would like to understand the cost of my service better\nThis is great to hear! Please start by first doing some initial work on your own by taking to engineers working on your product to understand what are the different infrastructure elements that are used in your product. This is incredibly important, as the infra analyst can only do so much if they can‚Äôt learn all the details about the service from talking to you. Even better, if there are new things you learn from this, try to get these things documented in the handbook so that we can refer back to those details later.\nOnce you have done that, reach out in #infrafin or schedule a 1hr intro call directly with an infrastructure analyst. We may not use the whole hour, but we want as much time as possible in the first meeting to go over all the various aspects of the product and start narrowing down how we want to go about understanding the cost. From this meeting we will come up with an action plan for you to get the insights you need.\nI would like to see a new group or service level cost metric\nOpen an issue on the engineering metrics board or ask in #infrafin slack channel and mention an infrastructure analyst. They will work with you to get the requirements for the metric. If the data is already available the work will mostly just require collaboration around solidfying the metric definition. If the data does not exist, a longer process will be required to first make creating the metric possible, such as potentially labelling the infrastructure or somehow enabling better tracking in the product to see the metric.\nLast modified July 4, 2025:\nMove /infrastructure/cost-management/ pages (\n57967c7e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 432}
{"doc_id": "dc78399b1bee2b31", "url": "https://handbook.gitlab.com/handbook/product/ux/product-design/ux-roadmaps/ux-theme-workshops", "title": "UX Theme Workshops | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nUX Department\nProduct Design\nUX Themes\nUX Theme Workshops\nGuide to facilitating UX Theme workshops\nOverview\nThis document will serve as a helpful guide for navigating a team through the UX Theme workshop. Much like a user interview guide, the items detailed below are not concrete rules or step-by-step instructions; they are guidelines that allow for minor deviations in the process, which will happen as every team is different.\nPreparing the workshop\nCreate an issue in the GitLab Design Project using the UX Theme Workshop Template.\nFill out the information in the issue template and assign it to yourself and the participants that will be joining you.\nSend a two-hour meeting invite to the participants (Subject: UX Theme workshop for\nstage:group\n)\nLink to issue in the meeting invite\nLink to the homework section of the issue in the meeting invite.\nChange the due date to reflect the dates from the workshop issue.\nBelow is a template comment you can use for the meeting invite.\nHello! You are invited to participate in creating a UX Theme workshop for <Stage:group> üéâ!\n**Session info**\nüëâ  Everyone: please review the information in (this issue), which will be our guide throughout the process.\n**Homework (Due <date> by EOD)**\nüëâ  <PM Name & Designer Name>: As the Product & Design DRIs, we need your help gathering a few links prior to the session. Please review the (Homework section) for more details.\n---\nWorkshop itinerary\nIntroduction (5 min)\nGoal statement definition (15 min)\nTheme clustering (45 min)\n--- Break --- (5 min)\nTheme refinement (45 min)\nPlayback & wrap-up (5 min)\nNote: The session may not take the entire time, though it is recommended to come prepared in the event it goes the entire 2 hours. Please no multitasking, be prepared to focus on the workshop for the entire duration of the session.\nOnce the Product Manager and Designer have supplied the required information move on to the next step. Note: You may have to remind the participants to supply the information if they have yet to do so in a timely manner.\nThe workshop cannot be conducted unless this information is provided.\nPreparing the activities\nThe activities will take place entirely in FigJam. Only\nStep 1 - Warm-up: UX vision definition\nand\nStep 2 - Cluster inputs into theme bundles\nrequire setup before the workshop.\nUse\nthis FigJam template\nand move it into the team‚Äôs or stage‚Äôs room.\nChange\nstage:group\nto the stage group the workshop is for.\nSection 1 setup\nFollow the links provided by the PM.\nüí° Tip: Not every direction page is consistent. You‚Äôll likely find a mishmash of some or all of these sections within a Stage Group or Category page. You may even see inconsistencies across categories within the same Stage Group. Do the best you can in gathering the most relevant goals for each.\nGo to the Stage Group‚Äôs Direction Page\nRead the Overview Mission, Vision, Letter from the Editor, and Strategic Direction sections. Pull outlines that will be relevant to help align the other workshoppers in crafting a UX vision and ultimately create the group‚Äôs UX Themes for the year.\nCopy and Paste the lines and edit them into coherent sentences and paragraphs in the Section & Stage Goals text block.\nMove on to Category Goals:\nGo to the Stage Group‚Äôs Category page(s)\nRead the Overview Mission, Vision, Letter from the editor, and Strategic Direction sections* and pull out lines that you think will be relevant to help align the other workshoppers in the task of crafting a UX vision and ultimately creating this UX Roadmap\nCopy and Paste the lines and edit them into coherent sentences and paragraphs in the Category goals text block\nWhen complete, the FigJam should look like this:\nSection 2 setup\nFollow the links provided by the PM for the relevant feature issues.\nOnly\ncopy issues with the UX label applied.\nüí° Tip: Keep the sticky notes in their respective color grouping unordered. Do not arrange them by any pre-existing method (existing epic, product roadmap, group: category,  etc.) The goal is to break down our existing organizational method used in GitLab for this exercise.\nüí° Tip: Ensure participants have enough space below the sticky notes to create theme bundles. At least ¬Ω of the horizontal area should be blank.\nCopy and paste each issue title into a sticky note on the FigJam board at the top of Section 2.\nChange the color of the stickies to yellow following the key in FigJam.\nSelect all of the issues and arrange them into a grid.\nCopy and paste any UX bug issues and change their color to match the key in FigJam.\nCopy and paste Deferred UX issues and change their color to match the key in FigJam.\nArrange these stickies into a grid and place them adjacent to the feature stickies.\nNext: Follow the links provided by the Design DRI for relevant insights and JTBD.\nCopy and paste each actionable insight issue title into a sticky note. Change their color to match the key in FigJam.\nCopy and paste each JTBD into a sticky note. Change their color to match the key in FigJam.\nArrange these stickies into a grid and place them adjacent to their respective issue types.\nWhen complete, the FigJam should look like this:\nMake the FigJam board available to team members\nThis\nhandbook page\nhas information on how to set the appropriate level of access for your FigJam boards.\nNote: If a participant does not have a Figma license they will not be able to edit content on the FigJam unless the FigJam owner has set it to be an\nOpen Session\n. Open sessions only last 24 hours. You will need to communicate this to your workshop participants and reset it as needed. You can reset the Open Session as many times as necessary.\nFacilitating the Workshop\nIntroduction (5 minutes)\n1. Set the scene and expectations\nWelcome everyone to the workshop; introduce yourself and anyone acting as a co-facilitator. Here you should mention the roles and responsibilities of everyone on the call. Restate the purpose of the workshop as well as reinforce that this is collaborative.\n‚ÄúHello\n, I am <‚Ä¶> and I am joined by <‚Ä¶> and we are here to guide you through this workshop.\n‚ÄúThe goal of today‚Äôs workshop is to leave with a stronger sense of a UX direction, goals, vision, and a prioritized list of themes. For your group‚Äù\n\"\n,\n,  you will be collaborating on this together, while\n,\nare here to assist you if needed.  We encourage you to think and talk out loud as you go through the exercises.\n‚ÄúThis is a safe space and saying ‚ÄòI don‚Äôt know` is encouraged. That‚Äôs why we are here, to define the known and identify the unknown.‚Äù\n2. Review the itinerary\nShare your screen and walk through the itinerary in the workshop issue. When complete, stop sharing your screen allowing the participants to focus back on their screens of the FigJam board.\n3. Step 1: Wrap-up the introduction\nBefore we get started, are there any questions?\nActivity 1: Goal and Vision warm-up (10 minutes)\nAsk everyone to open the FigJam file (share the link over the Zoom chat), and introduce the first exercise.\nüí° This exercise is part warm-up, to get everyone talking and part exercise preparing everyone for UX Theme creation.\nüí° Teams may struggle with this, but it is okay. All that is required is statements on sticky notes so they can complete the goal/vision statements after the workshop.\n1. Set the scene for the activity\n‚ÄúLooking at the first exercise in the top left you will see the stage and category goal and direction information. This was copied from the direction pages and should be referenced for this exercise.‚Äù\n‚ÄúNext you will see a set of prompts to use to help define the vision and goal statement, talking amongst yourselves, try to add statements that you can use to help in your definitions.\n‚ÄúThis is going to be our reference point for this year and act as our north star when scoping our work. Let‚Äôs take about 10 minutes to brainstorm. If you need more time then that is okay.‚Äù\n‚ÄúDoes that make sense, any questions?‚Äù okay, I will start the timer now.‚Äù\nüí° Try not to get too bogged down in this step. The goal is for the workshop participants to walk away with an understsanding of the group‚Äôs direction and goals for the year as this will be the anchor for the rest of the workshop steps. It‚Äôs ok if it‚Äôs not the most perfectly written statement.\n‚è≤Ô∏è\nIn FigJam Start the timer for 10 minutes\n2. Observe and keep participants on track\nEnsure participants are talking\nEnsure statements are being added to the stickies\n‚ÑπÔ∏è Watch as statements are added and ask probing questions, ‚ÄúWhy is that important, tell me more about‚Ä¶‚Äù etc.\n3. Wrap-up the activity\nAt the end of the time, ask if the participants need more time.\nIf yes,\nadd 5 more minutes but no more than that.\nBased on the number of stickies generated, you‚Äôll get a sense that more time is needed. Because this information is meant to guide the direction, it‚Äôs okay if it‚Äôs not 100% perfect.\n‚ÑπÔ∏è What‚Äôs essential is that there‚Äôs enough information to allow the workshop to progress. It‚Äôs perfectly okay to mention that the team can return to this async later if necessary.\nüü¢ Move on to the next activity\nStep 2: Clustering theme inputs (45 minutes + more if necessary)\n‚ÑπÔ∏è\nThis is the most critical part of the workshop\nas generating themes relies on this activity to be done carefully. If teams have mutually exclusive and collectively exhaustive theme bundles, you‚Äôll know this was successful.\n1. Set the scene for the activity\nüìñ Read the Step 2 instruction in FigJam out loud and ask if there are any questions.\n‚ÄúI‚Äôve transferred the inputs you linked me to in the workshop issue. Now working together, we are going to group these stickies thematically based on the user need they are addressing‚Äù\n‚è≤Ô∏è\nIn FigJam Start the timer for 45 minutes\n2. Observe and keep participants on track\nEnsure participants are working together and not independently.\nPrompt participants when clusters are beginning to form:\nAsk if any other inputs could fit into that cluster.\nAsk if any JTBD, Defferred UX, UX Bugs, or Actionable Insights relate to the cluster.\nInquire about clusters that are formed and prompt participants to answer questions about the problem it is solving.\nAs clusters start to form, you or the co-facilitator should copy and paste the\nBeneficiary, Job, Outcome\ntext blocks below each bundle (see this steps instructions section near the bottom) so teams can begin filling out that information.\n‚ÑπÔ∏è Watch out for large clusters. Also, ensure the participants are keeping the scope in mind. (Design work can be completed within (1-3) milestones, including solution validation).\n‚ÑπÔ∏è Watch out for inputs within clusters that aren‚Äôt solving the same problem.\n‚ÑπÔ∏è If teams are struggling, propose using the job map template as a guide for the exercise.\n‚ÑπÔ∏è The team may find it helpful to add a name/title above the group that helps explain what that grouping represents.\n3. Wrap-up the activity\nA team will rarely complete this activity within 45 minutes. Once the time is up, assess the team‚Äôs progress and plan for a 5 minute break.\nüí° To reiterate, this is a vital step in the process, and you should not move on without defining clusters.\n‚ùóÔ∏è If you reached the end of time and the team has not finished:\nTake the planned break and return to this activity. After returning from the break, set the timer based on how much more time the team needs on this activity; however,\nno more than 30 minutes\n.\n‚ùóÔ∏è If you reached the end of the additional 30 minutes and the team has not finished:\nIt is unlikely that they will finish all of the workshop exercises; this is okay. Your goal as the facilitator has now changed from completing the exercise to showing the team how to complete the remaining exercises independently.\nMove on to Step 3.\nTake a theme bundle from Step 2, copy it over to the Step 3 working area, and go through Step #3 to give the team a better understanding of the process they will continue on their own.\nüü¢ Take the planned 5 minute break\nBreak (5 minutes)\nThis can be an intense process, and participant engagement will fade as the session continues. Including a break is critical for participants to remain focused and engaged in the session.\nüü¢ Move on to the next activity or continue the prior activity if incomplete.\nStep 3: Refining clusters into Themes (45 minutes)\n1. Set the scene for the activity\nüìñ Read the Step 3 instruction in FigJam out loud and ask if there are any questions.\n‚è≤Ô∏è\nIn FigJam Start the timer for 45 minutes\nor however much time remains in the 2 hour workshop, ensuring to reserve at least 5 minutes at the end for a recap and next step guidance.\n2. Observe and keep participants on track\nTheme statement\n: DO THIS LAST for every theme. You will need all the other info before constructing the theme statement.\n‚ÑπÔ∏è To help with theme statements, Ask, ‚ÄúIf I know nothing about this product area, would I be able to tell what this theme is addressing at a glance by reading this?‚Äù\nBusiness objective\n: ensure teams don‚Äôt get caught up in this aspect. This can be filled in after the Theme issue is created; however, it is still an essential part of the process.\nConfidence\n: Use the chart in FigJam to have teams assess their confidence. Remember, we do not want to start design work on themes with low confidence.\n3. Wrap-up the activity\nHave the team look over the themes once they are done.\nAsk:\nAre these mutually exclusive?\nAre these collectively exhaustive as they relate to the goals & vision (See Step 1)?\nAre these appropriately scoped (i.e. can be completed in 1-3 milestones)?\nConclude\nBriefly summarize the activities in the workshop, and celebrate the team‚Äôs progress. Something to the effect of:\n‚ÄúToday we created goal and vision statements, bundled work into themes, refined themes and generated the inputs to prioritize them in your roadmap!‚Äù\nüèÅ Ask if there are any questions about the next steps and end the meeting.\nPost workshop\nFollowing up\nWe advise following up with the team in the workshop issue a few days after the workshop has concluded reminding everyone of the next steps. We want to ensure the activities and concepts are fresh so teams won‚Äôt have to recall every instruction from the workshop; The more time passes, the harder it will be for a team to complete their themes.\nLast modified January 6, 2025:\nMove product images to static folder (\n9b1952da\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2508}
{"doc_id": "b31be2cf4b48b8ac", "url": "https://handbook.gitlab.com/handbook/finance/expenses", "title": "Global Travel and Expense Policy | The GitLab Handbook", "text": "The Handbook\nFinance\nGlobal Travel and Expense Policy\nGitLab‚Äôs Global Travel & Expense Policy is meant to provide guidance to all Team Members to ensure that we act in the best interest of our Company at all times. The purpose of this policy is to:\nProvide guidance around allowable reimbursable expenses.\nEnsure the best utilization of our Team Member‚Äôs time.\nDrive transparency across all business travel related spend.\nHelp Team Members understand that a centralized travel program results in improved safety, visibility, support and savings.\nPrevent violations of applicable anti-bribery and corruption laws.\n2. Responsibilities\nTeam Members\n:\nAs a public company, GitLab has an obligation to act in the best interests of the corporation and its shareholders. This obligation is shared by all Team Members and is the basis of our global travel and expense policy as a public company; Team Members must be thoughtful in spending the company‚Äôs money.\nUse best judgment to ensure that all travel is business critical and all expenses are deemed ‚Äúordinary and necessary‚Äù. Team Members should consider conducting meetings via audio or video conferencing when appropriate.\nRead, understand and adhere to GitLab‚Äôs Global Travel & Expense policy.\nTeam Members are also expected to inform their direct manager of all business trip plans prior to booking to ensure that the proposed trip is within their departmental budget. Team Members must receive Manager approval for any proposed business critical trips.\nSubmit all expenses timely. All Team Members should submit expenses by the end of the fiscal quarter in which the expense was incurred. GitLab‚Äôs fiscal quarter end dates are January 31, April 30, July 31, October 31.\nFollow-up with your manager or the AP team if they haven‚Äôt approved your expense report.\nManagers and/or Budget Owners\n:\nEnsure that Team members‚Äô expenses are in compliance with GitLab‚Äôs Global Travel & Expense policy.\nWe ask that managers set pre-trip awareness expectations within their teams to ensure that trips are business critical and budgeted for.\nPlease work with your respective Finance Partner to know your specific team‚Äôs budget and amount spent to date.\nManagers are expected to review their team‚Äôs expenses in their entirety every month, and must flag any concerns immediately to the Accounts Payable team. Potential violations of GitLab‚Äôs expense Policy as it relates to gifts and entertainment should also be flagged to the Legal department in a manner consistent with\nGitLab‚Äôs Whistleblower Policy\n.\nManagers will be required to sign off that they have reviewed their team‚Äôs expenses.\nManagers will be held accountable for any unreported abuse by their Team Members.\nAP will flag Managers if further information is required for their direct reports.\nPlease see the attached\nManager Policy\nfor more details.\nAccounting\n:\nMaintain and communicate the Global Travel & Expense Policy out to the Company on a regular cadence as updates occur.\nEnsure that expense reports are in compliance with the  Global Travel & Expense Policy.\nProvide clear and timely feedback to Team Members and managers regarding missing information, general questions, or ‚Äúout of policy‚Äù issues, and escalate potential violations of the gifts and entertainment expense rules to the Legal department in a manner consistent with GitLab‚Äôs\nWhistleblower Policy\n.\nReview and process all expense reports that require AP Admin review, within 7 working days from the date submitted.\nFinance\n:\nMaintain departmental budgets for Travel and Entertainment and Offsites.\nWork with respective Business Partners to provide specific team budgets and amounts spent to date.\n3. General Guidelines\nTeam members should submit receipts for every business expense. For Non-US Team Members, receipts are required for all expenses. US Team Members are required to only submit receipts for any expenses over $50 USD.  Receipts must contain vendor name, date of purchase, listing of what was purchased, and contains a full breakout of the subtotal and tax amounts. Snapshot from phone/computer screen of Applications, Card/Bank Statements are not an acceptable form of receipt.\nTeam Members are not allowed to expense items on behalf of their managers.\nPayments, gifts, favors, or entertainment for officials, employees, or representatives of government-owned entities are strictly prohibited, regardless of value.\nExpense claims for a single item up to $5,000 can be expensed via Navan. >$5,000 needs to go through the procurement process in Zip.\nExpense claims over 90 days from purchase date will not be reimbursed unless approved by the Manager.\nNavan Description box: Expense items must have a description filled out. This box is showing as optional but we require this to be filled in. This helps to correctly record the transaction and assist any reporting purposes downstream.\nWhen filling in the description box , we ask for you to enter details of the expense so anyone looking at the line on a report can tell immediately (without the need of looking at the receipt) what the expense relates to and why it is claimed.\nPlease fill in the description box with details like : Items Purchased/Claimed, Period service relates to, Trip Details this claim relates to, Reason for trip, Clients Name, etc. If left blank, the expense will be bounced back to the team member to complete this portion.\nThe maximum monthly limit to be reimbursed is $10K USD (or local currency equivalent). Once this limit has been reached, all expense items will need to be approved by the A/P team in Navan.  This limit may be increased for Team Members whose positions require more spend (eg. Field Marketing), but the increase request needs to be submitted via an issue for approval by the VP or higher in the Accounting Organization. Due to the nature of their roles, E-Group members have a maximum monthly limit to be reimbursed of $20K USD before additional approvals are required.\nExpenditures related to client entertainment or marketing must be necessary, prudent, and job-related.\nExpenses that span longer than a month must be submitted on a monthly basis (eg. Although you paid for a year upfront for the internet, you must divide the total by 12 months and submit the cost monthly), with the exception of VPN.\nGift cards are not accepted as a form of payment for business expenses.\nExpense items must clearly state if the spend includes amounts for clients / non-Team Members. Tax requirements in certain countries require us to account for client spending differently.\nAnything submitted outside of these guidelines will be flagged as Out of Policy.\nAll work-related expenses (internet, co-working space, other monthly subscription, etc.) are not reimbursable while on Leave of any kind.\nFor PEO‚Äôs, as you are aware with Navan, the system will automatically reimburse in the currency of the GitLab organization you are employed. To ensure you are reimbursed in the currency in which your PEO needs to be invoiced please submit your expenses in the payment currency you will be invoicing the PEO in. i.e. if you invoice your PEO in USD, then convert the expense into USD prior to submitting the expense report in Navan. This will then allow you to know the exact amount to invoice the PEO every month. If this is not doable then we will convert the currency using the FX rates from Netsuite on the day this expense is transferred to payroll for payment to the PEO. To find out the actual amount submitted in Navan, we can provide you a list of the expenses submitted for each month.  Please request this monthly by submitting a\nHelpLab\nticket so we can provide you the needed information.\nAs with any third-party, it is best practice to limit the amount of personal data shared. The inclusion of personal data on your receipts is not required to submit an expense, so feel free to redact personal data for increased privacy. However, this is not a required step. For those that choose not to redact personal data from your expense receipts, the privacy and security controls in place at Navan were evaluated and they are designed to adequately protect your information.\n3.1 Out of Policy Transactions\nNote that when expenses are flagged as ‚ÄúOut of Policy‚Äù in Navan, this does not necessarily mean the expense is ‚ÄúOut of Policy‚Äù. It can also mean that additional review is needed due to a requirement for  certain attachments (eg. an approved issue) and/or additional approvals.\nUpon review, if more clarification is needed for a certain expense, the AP team will contact the Team Member in the Navan tool to ask for justification of the transaction before approving or rejecting the expense.\nThe AP team will reach out to the Team Member‚Äôs manager if additional approval is needed.\nIf the claim is over the advised guidance, the claim will be rejected with a note for the Team Member. The Team Member should be able to rectify the claim and resubmit.\nWhere the Team Member has already received approval from the manager, that approval should be attached as a receipt on the claim transaction.\nAny claim made which does not fall into the policy is not reimbursable.  If an item is out of policy and approved by your manager, then please obtain and attach your manager‚Äôs approval email prior to submitting the expense. This will then be reviewed by the Expense team Admin and could need further approval from VP or higher in the Accounting Organization.\nThere will be occasions where if you have claimed an item and it needs to be reimbursed back to GitLab, you will need to follow the repayment process in Navan for submission of the funds.\n3.2 Trip Purpose Guidance\nWhen booking travel in Navan, it‚Äôs important to select the proper trip purpose type from the ‚ÄúTrip Purpose‚Äù dropdown menu. Selecting the correct trip type is essential for accurate data reporting.\nThe options for trip purpose include:\nCompany meeting - any travel for internal meetings or events (that are not listed separately) with no customers present\nCustomer visit - any travel for meetings or events where GitLab customers and prospects are in attendance including conferences, roadshows, field events, and customer meetings\nPartner visit - any travel for meetings or events where GitLab partners are in attendance\nSpecific events - these will be visible in the trip purpose dropdown, ex:\nFY25 GTM Onsite\n3.3 Other\nOut of Policy Transactions for all E-Group Members needs to be approved by VP or higher in the Accounting Organization.\nAny exceptions to the policy must be documented via an issue or an email with proper approvals from their manager and Finance team.\nPayment method\nGitLab‚Äôs default payment method in Navan is a central company card.\nPayment varies based on travel transaction type - air, hotel, car or rail (where applicable).\nAirfare: All airfare is charged immediately at the time of booking to the card on file. GitLab‚Äôs central card is the default payment method in the system and will always be available.\nFollowing expenses are categorized for reimbursement purposes with specific policy definition attached to it. The limits below are in USD, please use local currency equivalents when considering other currencies.\n4.1 TRAVEL RELATED EXPENSES\nAirfare\nAll business related flights need to be booked through Navan, and will be paid by GitLab travel card. For each flight search, Navan determines the price in real time. Also to note that while it is sometimes possible to find a cheaper flight outside of Navan, we get overall better rates in the aggregate with the buying power of the whole company. Even if a flight is cheaper outside of Navan, please book in Navan. Also submit a request under the\nExpenses -> Travel Related Expenses\npage of\nHelpLab\nwith screenshots of Navan‚Äôs rate and the other airlines rate so the Expense team can address with Navan.\nAdvance Purchase\nTeam Members should make air reservations as early as possible, in order to take advantage of discounted fares. Travelers will ideally book:\nDomestic: At least 14 days in advance\nInternational: At least 21 days in advance\nThe airfare policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. Any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager. Also note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team.\nClass of Service\nOne class of upgrade is permitted with Manager approval for team members over 6'5\"/2m in height.\nDomestic Flights\nFlights over 5 hours of consecutive flight time\n- For domestic flights with a duration greater than 5 hours of consecutive flight time (each segment must be 5+ hours), team members are authorized to book the next class up from standard economy as long as it is below business class.\nInternational Flights\nFlights greater than 5 hours of consecutive flight time\n- For international flights with a duration greater than 5 hours of consecutive flight time (each segment must be 5+ hours), team members are authorized to book the next class up from standard economy as long as it is below business class.\nFlights exceeding 8 hours of consecutive flight time\n- For those who travel frequently, defined as 3 or more trips per quarter internationally on flights of 8 hrs+ continuous flight time (minimum 6 flight segments with 8+ hours per segment), business class is permitted when traveling for any of the following reasons:\nMeeting with customers\nSpeaking engagement\nRepresenting GitLab at a conference\nFrequent Flyer Programs\nParticipation in frequent flyer programs must not influence airfare selection if it results in an out-of-policy option.\nTeam Members may use personal frequent flyer miles or points for upgrades on business travel, however, Team Members will not be reimbursed for any respective charges.\nCancellations, Unused Tickets and Exchanges\nTeam Members are responsible for canceling trips that they will no longer be able to attend.\nFlight cancellations typically result in flight credit/unused tickets that can be used going forward.\nUnused tickets must be used for future business travel whenever possible. If the Team Member knows they won‚Äôt be able to use the ticket, please submit a request under the\nExpenses -> Travel Related Expenses\npage of\nHelpLab\n.\nTeam Members may not personally benefit from any unused airline tickets.\nPlease reach out to Navan Support if you need to change a flight.\nCommon Out-of-policy Airfare Flags in Navan\nThe system automatically flags the following as out-of-policy:\nFlight price selected is more expensive than the cheapest option + our buffer\nOut-of-policy air class is selected\nFlights booked less than 14 days in advance\nIf the flight selected triggers any of these criteria, an email will automatically be sent to your manager for approval. Please provide sufficient reasoning to make approval easier and faster.\nAfter 24 hours without any manual action (approved/denied) the booking will automatically be accepted.\nCoding\nExpense Type / Navan Policy Category:\nAirfare\nCar Rental\nRental Cars are reimbursable and should be booked through Navan, up to the intermediate car class, with a 7 day booking lead time. Rental Cars are reimbursable and should be booked through Navan, up to the intermediate car class, with a 7 day booking lead time.\nPlease note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team.\nNavan Confirmation should be attached to the claim along with the Car Rental Receipt.\nTeam Members can claim gas expenses but not mileage, when renting a car.\nFuel at $300 limit per day.\nAdditional Car Rental Guidelines\nA. Third Party Liability\nPurchase the liability insurance that is excess of the standard inclusion of State minimum coverage in the rental agreement at the rental agency. GitLab‚Äôs insurance policy provides liability insurance for rental cars while conducting company business, but it may be excess over any underlying liability coverage through the driver or credit card company used to purchase the rental.\nPurchase the liability offered at the rental counter if there are Non-US Team Members renting autos in the US or Canada. While workers‚Äô compensation would protect an injured US Team Member, other passengers may have the right to sue. To ensure that GitLab has protection when a Non-US Team Member invites another person into the car we recommend the purchase of this insurance when offered at the rental counter.\nB. Physical Damage - Collision Damage Waiver\nDo Not purchase the Collision Damage Waiver offered at the rental counter. GitLab purchases coverage for damage to rented vehicles. If travel to Mexico is required, purchase the liability insurance for Mexico offered at the rental counter. You should verify that the rental agreement clearly states that the vehicle may be driven into Mexico and liability coverage will apply.\nCountries other than the US and Canada:\nThird Party Liability\nPurchase the liability insurance offered at the rental counter when traveling outside the US and Canada. Automobile Bodily Injury and Property Damage Liability insurance are required by law in almost every country. Please verify this coverage is included with the rental agreement.\nPhysical Damage - Collision Damage Waiver\nPurchase the Collision Damage Waiver or Physical Damage Coverage offered by the rental agency when traveling outside the US and Canada.\nIn the event of an accident resulting in damage to the rental car, the Non-US rental agency will charge the credit card used to make the reservation with an estimated amount of repair costs if insurance is not purchased. If this happens, GitLab does not purchase Foreign Corporate Hired Auto Physical Damage Coverage to reimburse for damages.\nCoding\nExpense Type / Navan Policy Category:\nRental cars\nHotels\nTo be booked in Navan. When booked outside Navan - approval required by Manager and AP Admin.\nWhen you book Hotels through Navan Travel, the costs will need to be charged to a personal credit card.\nFor business related bookings, you can submit the costs for reimbursement via the Navan Expense reimbursement tool.\nPlease attach the Navan Reservation email confirmation to the claim.\nHotel stays are reimbursable up to $300 USD (or equivalent local currency) inclusive of tax per night for standard rooms, with a 7 day booking lead time.\nHowever, the lodging policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. This allows for some room in price in case the $300 USD limit is really not applicable to that area. And similar to airfare, any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager.\nAlways choose the refundable room booking unless the only available option is a non refundable room.\nThe exception is the Corporate Events hotel room blocks organized by the internal team or if the conference hotel room block has better pricing than Navan.\nThe hotel room block‚Äôs pricing is generally within the bounds of the $300USD/night and in the event it is over that amount, please contact the AP team for an exception to be granted.\nConference hotel room blocks or Corporate Events organized blocks will still need to be charged to a personal credit card and then submitted for reimbursement via Navan Expense.\nAlways bring a credit card with you when traveling for company business if you have one. Hotels will generally expect you to have a physical credit card to present upon check-in. This credit card will be kept on file for the duration of your stay. Even if your lodging was pre-paid by the company or by using a company credit card, the Hotel may still require a card to be on file for ‚Äúincidentals‚Äù.\nAdditional Hotel Guidelines\nDry cleaning is allowable if the stay is over 5 days. Room service is allowable as a meal for e.g. breakfast/lunch/dinner.\nMeals are to be segregated from the hotel bill and tagged under ‚ÄúMeals Company Provided‚Äù Category.\nParking must be segregated and tagged under ‚ÄúTransportation‚Äù.\nMovies, mini bars are not allowed as a claim.\nBooking accommodations through Airbnb\nTo be booked on the AIRBNB platform. Same restrictions in amount applies as the hotel expense.\nBooking through Airbnb is permitted if it is cheaper than a hotel stay for your trip\nTeam Member to submit a manual expense in Navan using expense type ‚ÄúLodging‚Äù and attach the receipt/invoice.\nSelf Stay Incentive Policy\nIf you decide to stay with friends or family instead of a hotel / Airbnb for a business trip, you may expense up to a $50 appropriate host/hostess gift.\nCoding\nExpense Type / Navan Policy Category:\nLodging\nMeals: Company Provided while Traveling\nMeals while traveling on Company business  are reimbursable, up to $100 USD (or local equivalent currency) per day.\nEach Team Member must submit their own receipts for reimbursement, so ensure to separate billing when going to meals with groups of Team Members. If this is not practicable to do due to the group size, then the most senior Team Member present should pay the bill and submit for reimbursement.\nTo be used for team activities and food/beverages associated with travel on Company business. Refer to our Travel Handbook Page.\nTips are acceptable up to 20% and should be detailed accordingly in the description box. This should be included in the final price to stay within the Policy limits. For US team members, cash tips under $50 do not need a receipt.\nPlease also add a description for the trip/reason for travel.\nCoding\nExpense Type / Navan Policy Category:\nTraveling: meals for myself\nTraveling: Team Events and Meals\nTo be used for team activities and food/beverages.\nEach Team Member must submit their own receipts for reimbursement, so ensure to separate billing when going to meals with groups of Team Members. If this is not practicable to do due to the group size, then the most senior Team Member present should pay the bill and submit for reimbursement.\n$80 limit per person per meal.\nTips are acceptable up to 20% and should be detailed accordingly in the description box. This should be included in the final price to stay within the Policy limits. For US team members, cash tips under $50 do not need a receipt.\nPlease also add a description for the trip/reason for travel.\nCoding\nExpense Type / Navan Policy Category:\nTraveling: Team Events and meals\nMileage\nBased on Mileage driven and calculated by Navan. Team Members are prompted by Navan to enter their start and end locations.\nMileage is reimbursed according to local law, e.g.  US rate per mile, rate per km in the Netherlands, or rate in Belgium. Refer to ‚ÄúHow Mileage Rates are Based‚Äù section below.\nShould Show Start and End point of trip in Navan.\nPlease include a reason for the trip in the description box.\nTeam Members cannot claim both mileage and Electric Vehicle charging fees.\nHow Mileage Rates are Based\nThe mileage rate is based on your legal entity‚Äôs mileage rates for the current year. These will be updated yearly for tax compliance.\nHowever, for the following entities (due to limited visibility online), the default rate is set at $.50/mile‚Ä¶ so please update the rate on your mileage if needed to match your local compliance laws: GitLab IT BV, GitLab Korea and GitLab Japan.\nCoding\nExpense Type / Navan Policy Category:\nDistance Driven\nTrain\nThe Train policy in Navan is set up as a ‚ÄúDynamic Policy‚Äù which calculates a fair market price for every search based on travel dates and destinations. Any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager.  Also note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team.\nTrains booked through Navan will be paid by GitLab travel card.\nTrain rides must be standard cabin class with a 14 day booking lead time.\nIf you travel more than 3 train trips (6 segments) per quarter, and they are over 5 hours in duration; we will allow you to upgrade one class on the train.\nYearly or Monthly Rail Discount cards are not reimbursable.\nPlease note that anything booked outside of Navan will flag as ‚ÄúOut of Policy‚Äù, and will need to be reviewed by your manager and the AP team.\nIf booked within Navan and is flagged as ‚ÄúOut of Policy‚Äù, please also refer to the ‚ÄúBooking shows Out of Policy‚Äù section below.\nCoding\nExpense Type / Navan Policy Category:\nTrain travel\nTransportation/Parking\nParking, Tolls, Taxi, Uber pertaining to travel to/from GitLab events, clients, or conferences is acceptable. Team Members are not permitted to expense both fuel/EV charging fees and mileage.\nFull Description of Trip should be stated in the Description box.\nGround Transportation (taxis, ubers) at $300 limit per round trip and $150 limit for single trip.\nParking and tolls  at $150 limit per day.\nAll items booked which are over the limits set will need to have manager approval attached to the claim.\nCoding\nExpense Type / Navan Policy Category:\nPublic transport, tolls & parking\nTravel (Other)\nTravel Dates - Days before and after\nThe company will cover all work-related travel expenses. This includes lodging and meals during the part of the trip that is work-related. Depending on the distance of your travel, it can also include one day before and one day after the work related business. For example, if you are attending a 3 day conference in a jet lag-inducing location, the company will cover your lodging and meals those 3 days as well as one day before and one day after.\nInternet - Travelling\nInternet while traveling is reimbursable for up to $50 USD (or local equivalent currency) per day.\nPlease provide trip details on the description box.\nCoding\nExpense Type / Navan Policy Category:\nTraveling: internet access\nSupporting nursing mothers\nIf you are nursing while traveling on GitLab approved business, you can reimburse costs in order to travel with breast milk or ship your breast milk back home.\nYou can expense:\nFees associated with a milk shipment service, such as MilkStork.\nIf a milk shipment service is unavailable, you may expense the cost of checking a bag while flying\nCoolers or containers to store breast milk while traveling\nShipment costs and materials, including dry ice, packaging, styrofoam coolers, and labels.\nCheck with your health plan to see if you are eligible for reimbursement for the cost of a breast pump or any other supplies.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\n6080 - Other Travel- Visas, Permits, Covid Tests\nGL Code COGS:\n5080 - Other Travel- Visas, Permits, Covid Tests COGS\nPersonal Bookings\nIn Navan, you have the ability to book Personal trips.\nNote that when selecting this option, a personal credit card will be required at time of booking.\nPersonal trips will not have the option to be added to the GitLab invoice.\n4.1 NON-TRAVEL RELATED EXPENSES\nBooks (Audio/E-Books included)\nBooks are reimbursable if used to optimize your job position.\nLimit is set to $60/year.\nCoding\nExpense Type / Navan Policy Category:\nBooks, dues & subscriptions\nBusiness Cards\nBusiness cards are ordered from Moo as per the instructions provided by the People Connect team.\nTo be ordered via Moo, attach a receipt from Moo. Refer to the\nOrdering Business Cards\nhandbook page.\nLimit is set at $150 per quarter.\nExpenses higher than this limit require manager‚Äôs approval via email. The email should be attached to the expense transaction as an additional receipt.\nCoding\nExpense Type / Navan Policy Category:\nOffice Supplies\nCo-Working Space\nCoworking space is reimbursable for monthly space and one-off days during business travel.\n$700.00 Limit per month.\nThe space should be located within a commutable distance of the Team Member‚Äôs primary residence in their country of employment, with exception to One-off days (day passes) if the Team Member is traveling for business. This is for tax reasons.\nCo-working spaces need to be a professionally managed space. Leasing of apartments or private properties is prohibited.\nCoworking space is not reimbursable while on personal travel.\nUp to 5 One-off Days in a calendar month related to co-working space do not require Manager or Finance approval.\nIf more than 5 days are booked in the month, then Manager and Finance approval (via submitting a request under the\nExpenses -> General Expenses\npage of\nHelpLab\n) is required and needs to be obtained prior to submission of expenses.\nCopy of approved email must be submitted with first month submission.\nNo contracts are allowed to be under the GitLab name and it must be under the Team Members name.\nThe co-working space must be submitted monthly in the month it pertains to with full receipts to be provided.\nGitLab will not cover security deposits or advance payments for co-working space.\nTravel to and from the co-working space, parking, meals, beverages, access cards, insurance and other additional expenses in a co-working facility are not reimbursable. Only the rent for the space is reimbursable.\nIf co-working space is used together with a combination of working from home, we will allow the reimbursement of the internet cost for where you spend most of your time. i.e. if you expense a co-working space for a full month then internet for home cannot be expensed. If you expense co-work for a few days in a month then home internet can be expensed in full.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\n6076 - Coworking Space\nGL Code COGS:\n5076 - Coworking Space COGS\nConferences\nAll costs associated with attending a conference to represent GitLab are reimbursable and an approved completed\nG&D issue\nwill need to be noted in the expense report upon submission. Please refer to the\nGrowth and Development handbook page\nfor further details and requirements. The reimbursement limits currently denoted in the Growth and Development handbook page do not include the cost of travel to and from the conference, so please ensure you have Manager approval for the cost of the travel.\nSelect classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses.\nNeeds to have approved G&D Development issue which will be reviewed by AP Admin.\nNo conference expense, with the exception of travel, should be allowed outside of G&D, unless the Team Member is a speaker for an event or required to attend an event for job related responsibilities (i.e. staffing or sales).\nCoding\nExpense Type / Navan Policy Category:\nG&D (Growth & Development)\nEquipment\nThese amounts were set after a thorough analysis and review of Team Members‚Äô expense data during the previous two years and benchmarked with other remote companies. Anything over this amount will be at the expense of the Team Member and no exceptions will be made.\nAs you onboard and start your GitLab journey, new hires will receive a 1,500 USD (or equivalent local currency) stipend to help you towards setting up your home office in your first year. This will be issued to you as a Virtual Card, and you will be able to use that card to purchase items. The Virtual Card information will be sent to you by the Accounts Payable team via your Onboarding Issue. Please refer to the\nNavan End Users Guide\nfor instructions on using and accessing your Virtual Card.\nExisting Team Members will get a yearly refresh of 500 USD (or equivalent local currency) to purchase upgrades, replacements, or enhancements to your home office setup. This only applies to Team Members who have been employed the entire previous fiscal year. This excludes laptops - please connect with the IT team if you require a replacement laptop.\nWe want you to set up your office the way you want it. Although we don‚Äôt want to put any restrictions regarding which office equipment you may purchase, we would like to outline what is covered under the term Office Equipment.\nWhat‚Äôs included - Essential items which you will need to ensure you are able to perform your role in GitLab should include chair, desk, monitor, Laptop (provided), headset, external mic, external keyboard and external mouse.\nFurther to this, items like additional monitors, laptop stand, external webcam, supplementary lighting, laptop bag/case, can also be considered and expensed using the Stipend/Allowance.\nAny items outside this will fall under an exception to the policy and will be subjected to review.\nIn addition the following items are\nnot reimbursable\n: Phones, watches, smart speakers, smart TVs/smart monitors, walking pads/treadmills and tablets.\nPurchasing from Private Sellers (e.g. either new or used equipment) is allowed. To expense them, attach the screenshot of your transaction with the seller showing the amount agreed upon, payment method, and item details in the description field. If paid via online transfer, attach the receipt for back up.\nIf you have any doubts please connect with the Expense Team by submitting a request under the\nExpenses -> Home Office Equipment\npage of\nHelpLab\n. Please note that these purchases are still reviewed by your manager and accounting teams, and any misappropriation of these funds will be flagged.\nNew Hires- 1,500 USD (or equivalent local currency) Guidelines\nThe virtual card provided will expire after one year of issue.\nAny unused funds will not roll over to the next year.\nThe local currency FX rate will be calculated using the OANDA Currency Converter as of the date the virtual card is issued.\nExisting Team Members- 500 USD (or equivalent local currency) Refresh Guidelines\nThis is a yearly refresh amount. It will reset at the beginning of each calendar year (January 1 to December 31).\nThe Navan Virtual Card cannot be used for the yearly refresh. Team Members should use their own method of payment and submit their expenses in Navan.\nAny unused funds will not roll over to the next year.\nTeam Members hired within the previous fiscal year are not eligible. For example, a Team Member who started 2023-05-10 will get their first refresh amount on 2025-02-01.\nCoding\nExpense Type / Navan Policy Category:\nWork from home\nTeam Member Significant Life Events and Team Member Gifts\nCash or cash equivalents, such as gift cards, are not allowed; Qualified gifts are capped at $125 per transaction.\nManagers are able to send Gifts and Flowers on behalf of their team members in acknowledgment of significant life events such as well wishes ahead of surgery, or the loss of a loved one. Baby gifts are not reimbursable as GitLab already sends them a\ngift\n.\nAny People Manager can send a gift or flowers to any Team Member at GitLab to let them know they are thinking about them. Examples include:\nA new Team Member recently purchased a new home and shared their news with others. A People Manager sends a ‚ÄúHome Sweet Home‚Äù doormat as a congratulatory gift.\nWhile working a People Manager noticed a Team Member‚Äôs children in the background of a Zoom call and surprised the kids with a new game.\nA Team Member wasn‚Äôt feeling well, which was noticed by a People Manager who sent a care package of food as a ‚Äòget well soon‚Äô gesture.\nBaby gifts are not reimbursable, as the GitLab People team already sends team members a congratulatory gift.\nThe cost of the gifts and flowers provided to GitLab Team Members will be allocated to the senders departmental budget. The allowable cost for gifts is up to $125 USD (including shipping) per gift.\nIf you would like to buy holiday gifts for your team, these need to be done personally and should not be expensed.\nPeople Managers are to use their own personal card for expense reimbursement. People Managers will need to be sure to use Team\nEmployeeGiftsFlowers\nand the account 6028 in Navan Expense for the expense.\nFor further questions regarding expensing of gifts and flowers, please reach out to the AP team by submitting a request under the\nExpenses -> General Expenses\npage of\nHelpLab\n.\nCoding\nExpense Type / Navan Policy Category:\nGifts - internal\nClassification:\nEmployeeGiftsFlowers\nInternet\nMonthly service charges for the internet are reimbursable, but GitLab will not reimburse for any initial setup, equipment, change fees, or monthly insurance charges.\nPlease expense internet costs monthly, reflecting current charges only (even if you pay by a different cadence).\nFor Team Members in the Netherlands:\nIf you have not already completed the form as part of onboarding with our Netherlands payroll provider, fill in and sign the\nRegeling Internet Thuis\nform and send it to the HRSavvy team at\npayroll@savvy-group.eu\n. Please do not expense your Internet costs via Navan - these will be rejected.\nIf your address changes or the amount changes, please send a new form to the HRSavvy team, along with the invoice/letter for processing.\nThis is a taxable expense for GitLab Ltd. United Kingdom Team Members assuming that the internet connection is used partially for personal use as well as business use.\nPolicy is set at $80, anything over that amount will still be considered for approval as we know there are exceptions, and will be checked and approved on an individual basis depending on the user‚Äôs circumstances, i.e. location etc.\nItemized Receipt required.\nIf an itemized bill is not available, costs will only be reimbursed for the element relating to Internet Access, i.e. if you pay for tv, internet and phone, the invoice should be divided by 3/# of services and we will pay this value only.\nNo hardware costs for internet service is reclaimable. This includes routers, extenders/boosters, etc.\nIf co-working space is used together with a combination of working from home, we will allow the reimbursement of the internet cost for where you spend most of your time. i.e. if you expense a co-working space for a full month then internet for home cannot be expensed. If you expense co-work for a few days in a month then home internet can be expensed in full.\nTeam members for GitLab GmbH (Germany) should refer to this\npage\nfor their country‚Äôs specific guidelines of this expense.\nCoding\nExpense Type / Navan Policy Category:\nInternet access\nLaptops, insurance and repairs\nAll laptops are purchased through GitLab unless a Team Member is in a region where GitLab cannot deliver a laptop.\nTeam Member laptops can be refreshed after three years of employment. If a Team Member needs a replacement laptop due to damage, they must reach out to IT via an issue before purchasing a new one. See\nLaptop handbook page\nfor your reference.\nRepairs to company issued equipment\nIf you need to replace a battery, laptop charger, or something small that does not affect the productivity or speed of the device, please go ahead and get that small item replaced and expensed.\nThe category to use in Navan is ‚ÄòOffice Supplies‚Äô.\nPlease get approval from your Manager if your equipment appears to be damaged, defective, or in need of repair\nBusiness Operations can advise on next steps to ensure you have the proper equipment to work.\nFor loaner laptops: Do not hesitate when expensing a loaner laptop while your primary laptop is being repaired.\nUse your best judgment identifying a local vendor. Please check out our Laptop Repair page for more info.\nNeeds to have an approved issue from the IT team.\nAP Admin needs to review expense for approved issue.\nCoding\nExpense Type / Navan Policy Category:\nOffice Supplies\nMarketing- related expenses\nSmall purchases for marketing events which are under $5,000 USD and which cannot be paid through the Procurement Process (Zip) are reimbursable.\nUp to $5,000 can be expensed via Navan.\n$5,000 needs to go through the procurement process in\nZip\n.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\nMultiple- will be required to choose GL account\nGL Code COGS:\nMultiple- will be required to choose GL account\nMeals with Clients and Partners\nTeam Members are prohibited from providing anything of value, including meals, to any government official, government Team Member, or government representative (including any government prospects and government customers).\nMeals are otherwise reimbursable, however Team Members should be mindful of budget while claiming meals with clients and partners.\n$80 limit per person per meal.\nAll Participants should be added (both internal and external participants) in the section provided.\nPlease also add a description for the meal/event.\nThe bill should be paid by the most senior Team Member present and submitted for reimbursement by that Team Member.\nCoding\nExpense Type / Navan Policy Category:\nEntertaining clients\nOffice Supplies & consumables\nTo maintain your home office equipment, items like compressed air to clean keyboards, pens, etc may be required from time to time.\nLimit is set at $50.00 per month.\nCoding\nExpense Type / Navan Policy Category:\nOffice Supplies\nPhone Service\nMonthly service charges for cell phones are reimbursable for Team Members whose phones are vital to their position.\nActual cell phone, phone accessories and family plans are not reimbursable.\nPolicy is set at $80, anything over that amount will still be considered for approval as we know there are exceptions, and will be checked and approved on an individual basis depending on the user‚Äôs circumstances, i.e. location etc.\nA note that Team Members using their phone service outside of their country should try to obtain a contract which includes roaming services.\nItemized Receipt required.\nIf itemized bill is not available, then the costs will only be reimbursed for the element relating to Phone Service, i.e. if you pay for tv, internet and phone, the invoice should be divided by 3/# of services and we will pay this value only.\nNo monthly hardware costs for phone service is reclaimable.\nIn addition Tablets, Watches, Phone Devices are not reimbursable.\nCoding\nExpense Type / Navan Policy Category:\nCell phone\nPostage/Shipping/Customs Fees\nPostage/shipping/custom charges related to the sending and or receiving of work documentation or special packages can be reimbursed.\nLimit is set at $100.00 per transaction before being flagged for approval.\nCoding\nExpense Type / Navan Policy Category:\nShipping & postage\nProfessional dues, membership fees\nFor bar license dues / fees, Team Members who are employed by GitLab as an attorney will supply evidence of payment for such fees and expensed via Navan.\nOther costs associated with professional dues and membership fees are reimbursable and an approved completed G&D issue will need to be noted in the expense report upon submission.\nSelect classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses.\nAP Admin needs to review expenses for approved issue.\nCoding\nExpense Type / Navan Policy Category:\nG&D (Growth & Development)\nSoftware\nNo software subscriptions are reimbursable.\nTeam Members that would like to purchase software will need to go through the Procurement process.\nPlease follow the Guidance from the\nIndividual Use Software Handbook Page\n.\nSwag\nAll Swag related to customers, your team, events, giveaways, TMRG‚Äôs, etc., are not to be expensed.\nFor conferences, any gifts or swag related items to be given out are not to be expensed.\nPlease refer to the\nMerchandise Workflow Guidance\nin the Handbook.\nExceptions are only reimbursable with approval from the VP of department or the Swag team.\nTeam Building\nTo be used for team activities and food/beverages associated with special team events. Amount allowed is dependent on their department budget for the year.\nTeam members to please use T&E accounts for their own individual expenses relating to any team building events (ie meals, travel, transportation) and tagging the classification to ‚ÄúFY25 Team Building Budget‚Äù\nIn FY25, each e-group member has been allocated a budget per quarter for FY25-Q2 to FY25-Q4 for team building events.\nEach e-group member can use their discretion when using the budget.\nThe budget should be used within the quarter the funds are allocated and unused funds cannot be moved to a different quarter.\nThis budget should cover leadership offsites, Team Members get togethers, the holiday party and other virtual fun events.\nIn Navan, the Team Member must code any related expense to GL code ‚ÄúTeam events & meals‚Äù and Classification (under optional details) ‚ÄúFY25 Team Building Budget‚Äù.\nThe expense needs to be submitted in the same month as the event or if not possible due to the timing of the event, the latest acceptable submission will be before the end of the fiscal quarter that the event took place.\nCoding\nExpense Type / Navan Policy Category:\nTeam members to please use T&E accounts for their own individual expenses relating to any team building events (ie meals, travel, transportation)\nClassification:\nFY25 Team Building Budget\nTraining/Tuition\nAll costs associated with training or tuition are reimbursable.\nAn approved\ncompleted G&D issue\nwill need to be noted in the expense report upon submission.\nThe Growth and Development benefit is managed in partnership by the Total Rewards and Learning and Development team.\nSelect classification or tag ‚ÄúGrowth and Development‚Äù in Navan when you create expenses.\nAP Admin needs to review expense for approved issue.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\n6065 - Training & Development\nGL Code COGS:\n5065 - Training & Development COGS\nVPN Subscription\nPlease read\nWhy We Don‚Äôt Have A Corporate VPN\n, and check out our\nPersonal VPN\npage regarding usage at GitLab.\nPolicy is set at $150 per year.\nYearly subscription can be submitted in one claim.\nMonthly subscriptions to be submitted monthly.\nValid receipts to be submitted for all claims.\nMulti year Policy - only current year subscription can be claimed.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\n6060 - Software Subscriptions\nGL Code COGS:\n5060 - Software Subscriptions COGS\nVisas/Permits/Covid Tests\nTravel Visas, Travel Permits, Covid Tests pertaining to travel to/from GitLab events, clients, or conferences is acceptable.\nPlease provide a detailed description of expenses in the description box.\nWill flag approval required by AP Admin.\nCoding\nExpense Type / Navan Policy Category:\nOther\nGL Code NON-COGS:\n6080 - Other Travel- Visas, Permits, Covid Tests\nGL Code COGS:\n5080 - Other Travel- Visas, Permits, Covid Tests COGS\n4.3 Missing Receipt Affidavit\nIf a Team Member is missing a receipt, a Missing Receipt Affidavit will need to be completed and attached to the expense when submitted. Missing Receipt Affidavit located\nhere\n(please ensure to make a copy). When attaching the receipt affidavit, the Team Member should attach the document as a PDF.\n4.4 Reimbursement Payout Timelines\nThe procedure by which reimbursable expenses are processed varies and is dependent on contributor legal status (e.g. independent contractor, Team Member) and subsidiary assignment.\nLegal entities\nTeam Members must submit their expenses through Navan.\nExpenses for GitLab Inc, GitLab Federal, GitLab Ltd (UK), GitLab BV (Belgium and Netherlands), GitLab GmbH (Germany), GitLab PTY Ltd (Australia and New Zealand), GitLab GK (Japan) GitLab LTD (Ireland), GitLab Korea Limited and GitLab Singapore PTE. LTD. are reimbursed via Navan within 7 business days for the expenses within policy or after approval by the Accounts Payable team (for out of policy expenses).\nThe Team Member‚Äôs bank account must be set up in Navan in order for payment to complete.\nExpenses for GitLab Canada Corp must be submitted and approved by the Accounts Payable team (for out of policy expenses) before the 1st day of each payroll period.\nExpenses for GitLab France S.A.S and GitLab BV Finland must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll.\nNavan will be implementing a Batched Payment system for team members who are reimbursed directly through Navan. If you submit multiple expenses during the week, Navan will batch these expenses into one single weekly payment that will be paid out on Mondays. These payments will include all approved expenses up until the Sunday evening prior, and should hit the team member‚Äôs bank accounts on Tuesday or Wednesday.\nPEO (Professional Employer Organization/ Employer of Record and not a GitLab entity or Branch)\nPEO Locations\nThe list of locations under a PEO can be found\nhere\n.\nTeam Members must submit their expenses through Navan.\nAll expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll.\niiPay\nTeam Members must submit their expenses through Navan.\nAll Individual contractors or C2C, with exception of Nigeria will be reimbursed by iiPay by the 22nd of each month. All expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) by the 6th of each month to be included in the current month payment. For contractors with C2C status, be sure to contact the Payroll team via HelpLab and submit a request under the\nExpenses -> General Expenses\npage of\nHelpLab\nif you need to set up a separate bank for your expense reimbursement.\nCXC Global\nThe list of CXC countries can be found\nhere\n.\nTeam Members must submit their expenses through Navan.\nAll expenses must be submitted and approved by the Accounts Payable team (for out of policy expenses) on or before the 6th of each month to ensure it is included in the current month‚Äôs payroll.\nGitLab Payroll Team will send the approved expense amount to CXC EMEA Payroll to include with the monthly salary.\nTeam Members must include the approved expense amount on their monthly invoice as well.\n4.5 Submitting Expenses on Behalf (or Requested By) Team Member‚Äôs Manager\nA Team Member submitting expenses on behalf of their manager is a violation of our Expense policy and GitLab‚Äôs internal controls. The AP team will review these on a quarterly basis during their review of the quarterly Manager issue. If this is found during the expense review process, the following actions will take place:\nAP Admins to notify the Team Member, the Team Member‚Äôs manager, the Team Member manager‚Äôs manager, and Finance leadership team of the violation.\nThe expense is to be repaid to GitLab immediately and the Team Member‚Äôs manager will need to resubmit the expense themselves.\n5. Physical Cards\nPlease see Navan Physical Card policy\nhere\n.\n6. Purchase Cards\nNavan Purchase Card\nThese virtual cards within Navan are only utilized by the AP team, and they are used solely for providing new Team Members with a $1,500 USD (or local currency equivalent) stipend for their home office set up. These cards were set up to ensure that Team Members do not spend outside of this amount, as well as ensuring the stipend is only available during their first year of employment. Within the controls in Navan, these cards are only accessible to the AP Admins team, and are not accessible to Team Members.\nSetting up your Navan Account\nBelow is some more information to help you get set up with your\nNavan\naccount.\nLog into Okta and click the Navan tile.\nOnce you are in your dashboard, make sure to set up your info in your profile (see link from drop down menu under your name).\nAdd your passport information to your profile (only passport information is accepted), this will populate your info directly when booking a flight.\nTeam members can view if their reimbursements have been processed successfully or failed on both mobile and desktop versions. If the reimbursement fails, the team member will receive a notification and how to fix it in Navan.\nNow let‚Äôs start booking!\nNavan Loyalty Program\nTravelers earn Navan Loyalty Points s when booking hotels in Navan.\nUsers who book hotels for others will also earn loyalty points.\nThe Navan Loyalty Program is visible in the platform, with a new loyalty program profile page to track your earn and redemption activity. Team members are able to redeem loyalty points for personal travel hotels. Users can redeem as little or as many loyalty points as desired - they can pay partially with loyalty points  and partially with a personal credit card if team members don‚Äôt have enough loyalty points  to cover the full cost of the booking. Loyalty Points will be a form of payment on checkout when selecting a prepaid hotel rate.\nAll loyalty points  can be retained by a user when they leave their company by activating a personal-only account. Companies cannot take back earned rewards.\nSustainable travel considerations\nEven as an all-remote company, GitLab recognizes that some travel is necessary. These considerations aim to reduce the environmental impact of travel:\nPrefer virtual meetings and attendance over personal meetings, except when the event‚Äôs objective is enhanced by meeting in real life.\nFor short-distance travel, consider ground travel over air travel for information on short distance travel recommendations visit these examples from the University of Bern, University of Lund.\nSelect trips with lower carbon emissions. When booking travel through Navan Tripactions you can view the total CO2 footprint for at the checkout screen.\nIf you organize an in-person meeting, aim for a location that allows as many people as possible to travel in a sustainable way.\nCarbon offsets offered by airlines have dubious value, so aim to avoid air travel where it makes sense.\nDomain Name Registration and Maintenance Policy\nScope and Purpose\nThis policy applies to all GitLab team members registering, or maintaining a registration for, GitLab-related Domain Names, including GitLab-related Domain Names registered or used for sandbox or testing purposes.\nDomain names are key assets in GitLab‚Äôs intellectual property portfolio. Centralizing the registration and maintainance of domain names under the Infrastructure Shared Services group using GitLab‚Äôs approved domain name registrar helps us track and protect these valuable assets. Please refer to the\nDomain Names and DNS Records Handbook Page\n.\n‚ÄúGitLab-related Domain Names‚Äù\nwhen used in this policy means any domain name:\nregistered or used for any purpose related to a team member‚Äôs role at GitLab;\ncontaining the GitLab trademark (GITLAB) or one of its derivatives (like, amongst other things, git, glab, gtlb, gl); and/or\ncontaining any GitLab key messaging term (like, amongst other things, DevOps, DevOps platform, all remote).\nRegistration of new GitLab-related Domain Names\nAll GitLab-related Domain Names must be registered using the process outlined in the\ndns-domain-purchase-request issue template\nmaintained by IT Operations.\nExpense reports submitted by team members for expenses incurred on or after\n2022-03-01\nin registering new GitLab-related Domain Names will be rejected.\nTransfer of existing GitLab-related Domain Names\nAll GitLab-related Domain Names currently registered in the name of team members, or registered with unapproved registrars, should be transferred to GitLab using the process outlined in the\ndns-domain-transfer-request issue template\nas soon as possible.\nExpense reports submitted by team members for expenses incurred on or after\n2022-08-01\nin maintaining registrations of GitLab-related Domain Names in the name of team members, or with unapproved registrars, will be rejected.\nTeam Member Expense Temporary Advances\nThis relates To Laptop Advances only - If more information is required please email the AP team on\nAP@gitlab.com\nExpense Reimbursement for Terminated Team Members\nIf a team member whom you manage has left GitLab and comes to you with final expenses that are valid for reimbursement, please verify that they were not already processed in Navan and then contact Accounts Payable. You must submit valid receipts and a completed copy of the\nExpense Reimbursement template\nalong with your approval. Please note that we may also ask the terminated team member to provide valid banking details in order to process the payment to them. AP will do their best to process and pay the reimbursement to the individual within 1 week.\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 9232}
{"doc_id": "1a822c3dcc19a393", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/roles-personas/day-in-the-life-secopsengineer-persona", "title": "Day in the Life for the Security Operations Engineer persona | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nProduct and Solution Marketing\nRoles Personas\nDay in the Life for the Security Operations Engineer persona\nSecurity Operations Engineer - Day in the Life\nToday is a Monday. It‚Äôs the first day following a busy on-call week for Alex, having been on call the prior Monday to Friday. Having already handed off the on-call duties to a colleague who did the weekend shift, Alex plans on spending significant time today closing things off, as well as getting up to speed on work done by others.\nMorning: plugging-in\nOpening the laptop, Alex‚Äôs first objective is getting up to speed. It‚Äôs really important for Alex to know what‚Äôs going on and be responsive, even while not being on-call. Alex checks the Security Department and Security Alerts channels on Slack to see what came in over the weekend, and also checks emails and TODOs, replying to various queries and requests. This usually takes Alex about 30 minutes to an hour.\nMuch of Alex‚Äôs morning is spent on meetings. It‚Äôs another part of plugging in, and participation is important to Alex. First meeting of the day is the weekly sync for the Security Operations team. In the meeting Alex shares highlights from the on-call week with the team, and learns what others have worked on during this past week. This should help him with diving back to regular work.\nIn the little time between meetings, Alex tries to work through issues and reply to comments.\nAs part of getting up to speed on regular sec engineering work, Alex has a 1:1 with another member of the operations team with whom Alex shares engineering responsibilities while not on-call. They discuss what the colleague was able to do last week, and what they are both looking to achieve this week.\nA few meetings and one lunch later, it‚Äôs the afternoon.\nAfternoon: ‚Äúclean-up‚Äù mode\nAlex has a lot of loose ends to tie following the on-call week, which makes those few days following being on-call a bit more hectic. Even though no longer on-call, Alex still owns the follow-up on any issues that were opened during the on-call shift. Alex still has a few of them opened right now, and so getting those closed in the next few days is top priority.\nAlex tries to keep the afternoon free from meetings as much as possible. With SecOps work Alex very well knows that there‚Äôs a million things that could potentially drag you away from what you‚Äôre doing - even when you‚Äôre not on-call - but today thankfully is going to be a quiet afternoon for Alex.\nThe incidents which occurred last week were, for the most part, things the team hadn‚Äôt encountered before (that‚Äôs part of the excitement in SecOps work!). As a result, Alex has extra work to wrap up: In addition to the usual - documenting any last items taken and trying to close things out - Alex also spends this afternoon putting together RCAs (Root Cause Analysis) (link) and Runbooks (link). Some of the Runbooks include code snippets Alex created on the fly as part of responding to incidents last week, so now Alex is going to refine that code and document it for future use, should a similar incident occur again. This is all part of making the team more efficient going forward, and sharing lessons learnt with the team.\nAlex is passionate about improving processes and making the team more efficient, and so it‚Äôs important for him to get documentation right. Not to mention that things need to be clear in case legal or some other party would want to enquire. Once documentation is over, Alex reaches out to the wider team to share the work and ask for feedback.\nTidying up last week‚Äôs incidents isn‚Äôt done yet (not all issues are closed), but things are now at a place where Alex can take a look at some backlog projects. Alex keeps a TODO list on a small notepad on the desk - scanning through it, Alex chooses something from the list to work on.\nLearn more about the Security Operations Engineer persona\nLast modified August 16, 2024:\nReplace aliases with redirects (\naf33af46\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 707}
{"doc_id": "8d3f3fb1ef676a08", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/developer-advocacy/cfps", "title": "Developer Advocacy CFPs | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nDeveloper Advocacy\nDeveloper Advocacy CFPs\nCFP Resources\nEvent call for paper submission forms differ: Some require 1000 character abstracts, others prefer shorter biographies, or require you to fill in the talk learning goals. The Developer Advocacy team uses Google docs for maintaining CFP abstracts, @dnsmichi also uses a doc for the biography and headshot URLs as SSoT.\nCFP template Google doc\n.\nBiography template Google doc\nHow we manage CFPs (Call for Proposals)\nOur events list\nEvery year, developer advocacy prioritizes key events in our ecosystem for which we run the conference proposal (CFP) process. The event engagement with lightning talks, CFP submissions, etc. is organized in issues which are linked and summarized in a\nyearly strategy epic\n. You can also find a calendar view of our events below:\nCFP Library\nPast submissions for CFPs are stored in the\nCFP Library\n.\nRequesting a Developer Advocate to submit a CFP\nTo request that a Developer Advocate submits a CFP to your event, please:\nOpen a new issue\nEnsure you use the\ndeveloper-advocate-request\ntemplate, and fill out the\nExternal Request\nsection.\nLabel the issue with the\nlabel.\nCFP Management\nFor every CFP process we are participating in, a\nCFP issue\nis created with details about the event, requirements for CFP submissions and any other relevant information that might be useful to potential speakers. The issue template contains guide on the necessary steps needed to ensure we keep track of all the submissions for each CFP.\nOnce a submission has been submitted, the author should add it to the\nCFP Library\n. This will allow us to repurpose CFPs efficiently.\nIssue Workflow\nAll submissions, accepted talks, feedback and other result tracking happens in the CFP issue. The CFP workflow uses\nscoped labels\nto transition the issues through different stages. Please follow the\nCFP workflow handbook\nto apply required labels accordingly.\nAll issues with the\nlabel appear on the dedicated\nCFP Issue board\n.\nTips for CFP submissions\nWriting good conference proposals is both an art and a science. The science is the details of the technical content. The art is presenting it in a way that appeals to the audience - the conference committee.\nHere are some steps to go through when writing a CFP:\nResearch the event\n: Read through the event website in detail, especially the talk proposal pages. As you go through, notice the key topics and reoccurring themes throughout the material.\nFamiliarize yourself with the suggested topics\n: If an event suggests themes or topics, your best bet will be to align your talk proposal with that.\nLearn about the conference committee\n: The people are just as essential as the online materials. Look up the committee and see if you can find out their own passion-topics. You should also research folks who may be past speakers or are otherwise involved with the conference to help understand what topics or speakers they are really looking for.\nWrite out a placeholder title, thesis, and outline\n: Starting with a placeholder title will help overcome the blank page syndrome. From there, brainstorm on your thesis. What are you trying to teach? If you had one line to explain the SCQA (Situation, Complication, Question, Answer) of the story, what would it be. Then fill out an SCQA outline.\nAsk for help\n: Have a friend or colleague who is familiar with the subject matter review your proposal. Rework, rinse, repeat and submit!\nHelpful links\nLachie‚Äôs 7 step guide to writing a winning tech conference CFP\nMake me an offer I can‚Äôt refuse ‚Äì Writing an abstracts for a CFP\nLast modified April 1, 2025:\nUpdate CFP template location (\n7f9e9cb3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 623}
{"doc_id": "7302b05bb5b13788", "url": "https://handbook.gitlab.com/handbook/legal/legalops", "title": "Stategy & Legal Operations | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nStategy & Legal Operations\nThe Strategy & Legal Ops team promotes and institutes streamlined processes, efficient tools, and centralized program management to ensure LACA remains agile and able to support every area of GitLab‚Äôs business.\nCheck out\nour issue board\nto learn more about what we‚Äôre working on.\nObjectives\nStrategic Planning and Financials:\nBuild, execute, and iterate on a best-in-class strategic plan, including management of LACA‚Äôs budget from planning through forecasting and reporting.\nLegal Operations:\nOptimize LACA operations through tools, processes, and operational capabilities. Drive enhancements to the\nLACA tech stack\n.\nProgram and Project Management:\nDefine and drive initiatives spanning across LACA and GitLab. Examples include: vendor management,\nbilling and accruals\n,\ndesignated insiders and pre-clearance process\n, tool administration, and team member engagement activities.\nLegal Billing Process\nGitLab uses Brightflag‚Äôs Legal Spend Management platform to process and review legal invoices and accruals.\nSee the\nBrightflag invoicing process\nin the internal handbook.\nAccruals Process\nAccruals submission reminder notifications are automatically sent through Brightflag to ensure vendors submit their accruals on time.\nLaw firms with active matters will receive two automated reminder emails at 06:15 UTC on the following days:\nFirst Reminder\n: Five calendar days before the deadline.\nFinal Reminder\n: On the day of the deadline.\nIf the deadline falls on a weekend, the email will be sent on that weekend day.\nIf accruals are submitted on all matters before the deadline for a given vendor office, the notification emails will not be sent to that vendor.\nLegal & Corporate Affairs Expenditure Request Process\nThis process is designed to enable LACA team members to submit requests related to attending events/conferences, furthering development, or purchasing tools/software funded by LACA. This process does not apply to\nequipment\n,\nIndividual Use Software\nor other personal reimbursement requests.\nAll expenses / reimbursements must be in accordance with\nGitLab‚Äôs Travel & Expense Policy\n.\nAll requests for use of LACA funds require approval from applicable stakeholders within the LACA Expenditure Request Issue Template.\nRequests must be submitted, (i) no less than ninety (90) days prior to the event/purchase request date, and (ii) no more than once per year.\nFor conferences or development requests, team members are expected to share materials and insight with others within LACA (and GitLab).\nTypes of Expenditures\nGrowth & Development: Team members can review the\nGrowth & Development Fund\nand  various options available to GitLab team members.\nNote: The program would not cover costs associated with travel & expenses, which would be allocated to the LACA budget.\nTools / Software: For requests related to new tools or software, a LACA Expenditure Request Issue Template is required.\nExpenditure Process Overview\nLACA team members must first communicate their intended request with their manager.\nIf supported by their manager, the team member will complete the\n‚Äúlaca-travel-and-expense-request‚Äù template\n.\nIncluded within the LACA Expenditure Request Issue Template are details that the team member must complete.\nUpon being submitted, the request will be reviewed internally by LACA leadership.\nIf approved, the request will then be assigned to Finance to ensure applicable funds are available.\nRequests are considered fully approved only when all stakeholder checkboxes have been completed. Please note, all expenses tied to the request must be submitted in accordance with\nGitLab‚Äôs Travel & Expense Policy\n.\nEthics and Compliance Courses\nCompliance training processes, course info, and FAQ\nLast modified April 8, 2025:\nUpdate Strategy & LACA Ops pages (\n4bb7fa6d\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 582}
{"doc_id": "29a14e03905edf3e", "url": "https://handbook.gitlab.com/handbook/security/customer-support-operations/docs/zendesk/apps", "title": "Apps | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCustomer Support Operations\nDocumentation\nZendesk\nApps\nOperations documentation page for Zendesk apps\nNote\nThis is an informational page for the Zendesk apps. It may not reflect the way we actually manage Zendesk apps.\nIf you are looking for information about maintaining apps (creating, editing, etc.), please see\nApps workflow\nWhat is a Zendesk App\nA Zendesk App is an application (written in HTML/CSS/JS) that runs in a location of Zendesk. What it does and how it does it varies greatly from application to application. Applications can be run in a great many places, but the traditional locations are:\nTicket sidebar\nUser sidebar\nOrganization sidebar\nNavbar\nBackground\nYou can see more resources on application locations via the\nZendesk Developer Manifest Reference\ndocumentation.\nZendesk applications tend to come from one of two areas:\nZendesk Marketplace\nDeveloped in-house\nInstalling a private app\nhttps://developer.zendesk.com/documentation/ticketing/using-the-zendesk-api/creating-and-managing-private-apps/#creating-an-app\nUpdating a private app\nhttps://developer.zendesk.com/documentation/ticketing/using-the-zendesk-api/creating-and-managing-private-apps/#updating-an-app\nZendesk Global apps\nAdvanced SAST App\nIntroduced via\nsupport-team-meta#6652\nThe Advanced SAST App is a ticket app that enables a quick working of User requests for source code of LGPL-licensed components in GitLab Advanced SAST.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed in-house and can be found\nAdvanced SAST App project\n.\nAdvanced Search\nAdvanced Search is an app that provides a simple visual interface for constructing complex search queries against tickets, users, and organizations (orgs). It also enables you to export the search results in a CSV format.\nApp information:\nLocated in the navbar\nThis application was developed by\nZendesk\nand is available in the\nZendesk Marketplace\n.\nGitLab Reminders App\nIntroduced via\nsupport-team-meta#3036\nThe Reminders App appears in the navbar and allows the agent a more specialized view of tickets they are involved in. It currently shows:\nTickets assigned to you with a pending/overdue task that are not in a Closed state\nRecent tickets you have viewed\nTickets assigned to you that are not in a Closed state\nTickets you are CC‚Äôd on that are not in a Closed state\nIt also allows you to quickly manage your tasks by seeing the notes you have left for said task, when it is due, and a button to quickly mark the task as done (remove the notes and due date).\nApp information:\nLocated in the navbar\nThis application was developed in-house and can be found\nGitLab Reminders App project\n.\nGitLab Search\nThis app lets you use the gitlab.com API to search for issues/merge requests within Zendesk.\nApp information:\nLocated in the topbar\nThis application was developed in-house and can be found\nGitLab Search project\n.\nGitLab Super App\nIntroduced via\nsupport-ops-project#801\nA plugin controlled app that can do several things GitLab related\nThe current plugins are:\nUser Lookup\nThis lets you search gitlab.com for a username or email. It then displays information based on the results.\nNamespace Lookup\nThis lets you search gitlab.com for a namespace. It then displays information based on the results.\nCollaboration Project\nThis checks the organization for a collaboration project ID. If one exists, it then provides a link to said project.\n2FA Helper\nThis creates a usable form to checking if a 2FA verification has passed. It calculates the Risk Factor from the Data Classification and modifies it to reflect the passed challenges.\nEmail Suppressions\nThis searches mailgun for suppressions from bounces (note it does not do it on complaints or unsubscribes). It will display the results (with the message for the suppression).\nIt also gives the option of removing the suppression (if one if found). Doing so deletes it from mailgun and adds an intenral comment on the ticket with the results of the suppression deletion.\nFieldnotes\nThis app checks the\nFieldnotes project\nfor any existing Issues which reference the current Zendesk ticket ID. If no existing Issues are found, then agents are able to create a new Fieldnotes Issue from directly within the Zendesk ticket.\n2FA Validator\nThis app checks values entered by a support engineer and does a validation check. This effectively acts as the second layer of validation\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed in-house and can be found\nGitLab Super App project\n.\nGitLab Views\nThe GitLab Views appears in the navbar and allows the agent a more customizable set if Zendesk views.\nApp information:\nLocated in the navbar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nSupport Managers\nSupport Ops\nThis application was developed in-house and can be found\nGitLab Views App project\n.\nMechanizer\nPlease use\nCustomersDot Support Admin Tools\ninstead of the app at this time.\nIntroduced via\nsupport-team-meta#4208\nThis app incorporates Mechanizer into Zendesk.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed in-house and can be found at\nMechanizer project\nNotifications App\nNote\nThis app is\nopt-in\n. This means nothing will happen unless you modify your user settings to receive notifications.\nThis app handles posting notifications at the top of the screen, depending on various conditions and user settings.\nApp information:\nLocated in the Top Navigation of Zendesk Global\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nSupport Managers\nSupport Ops\nThis applicate was developed in-house and can be found at\nNotification app project\nCurrent events that trigger the app\nThe following events will send data to the app for notification processing:\nAgent private comment made on ticket\nAgent public comment made on ticket\nCustomer public comment made on ticket\nEmergency ticket created\nEscalated ticket created\nTickets being STAR‚Äôd\nTickets created by specific organizations\nUser settings\nThe current user settings, which will determine what notifications you will (and will not) recieve are:\nPlay notification sound\nChecking this box tells the app to play the notification sound.\nNotify me for\nThis tells the app what kind of tickets to notify you for\nValues:\nAssigned tickets only\nCC‚Äôd tickets only\nAll tickets\nNotify me about\nThis tells the app what kind of events to notify you for\nValues:\nAll public comments (agent and customer)\nOnly public comments from agents\nOnly public comments from customers\nOnly private comments\nAll types of comments\nNotify me only for tickets with priority\nThis tells the app which priorities to notify you on\nValues:\nat least Urgent\nat least High\nat least Medium\nat least Low\nNote\nA blank value is assumed to be ‚Äúall priorities‚Äù\nAlso notify me for escalated ticket creation\nThis dictates if you want to be notified via the app when an escalated organization creates a ticket.\nNote\nThis works\nindependently\nof all other settings.\nAlso notify me for emergency ticket creation\nThis dictates if you want to be notified via the app when an emergency ticket is created.\nNote\nThis works\nindependently\nof all other settings.\nAlso notify me for STARs\nAlso notify me for soon to breach tickets on\nThis dictates if you want to be notified via the app when a ticket is about to breach (within 2 hours)\nValues:\nAssigned tickets only\nCC‚Äôd tickets only\nTickets within my SGG only\nAll tickets\nNote\nThis works\nindependently\nof all other settings.\nAlso notify me for tickets created via specific orgs\nThis dictates if you want to be notified via the app when a ticket is created by a specific organization\nThe list should be comma separated\nExample, if you want to be notified for organizations 123, 456, and 789, use the value\n123,456,789\nor\n123, 456, 789\nNote\nThis works\nindependently\nof all other settings.\nFor information on editing your personal user settings, please see\nZendesk‚Äôs documentation\n.\nOut of Office\nIntroduced via\nsupport-team-meta#4303\nThis will enable an agent to mark when they are out of office in Zendesk, which then updates tickets and makes it visible in the views.\nManagers are also able to do this for their reports.\nApp information:\nLocated in the navbar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed in-house and can be found\nOut of Office project\nSupport Ops Super App\nA plugin controlled app that can do several things Support Ops related\nThe current plugins are:\nNamespace Lookup\nThis lets you search gitlab.com for a namespace. It then displays information based on the results. This is related to the one in the GitLab Super App, but instead it shows less information and shows the SFDC IDs it is associated with.\nProject Lookup\nThis lets you search gitlab.com for a project. It then displays information based on the results.\nAttempt Association\nOn tickets where the product type is\nGitLab.com\n, clicking the button on the plugin will attempt to auto-associate the requester to an organizaiton. If that is not possible, it will detail why it was not possible.\nAssociate User\nOn a Support Ops ticket, it will ask you for an email address. It will then use the organization on the current ticket to associate said email address to that organization.\nCMP Developers\nOutputs a list of CMP developers (by email) for an organization (if it has a CMP)\nApp information:\nLocated in the ticket sidebar\nRestricted by Role:\nAdmin\nThis application was developed in-house and can be found\nSupport Ops Super App project\n.\nUnbabel\nIntroduced via\nsupport-team-meta#1664\nPowered by state-of-the-art AI and a worldwide community of translators, Unbabel delivers translation at enterprise scale. We help you serve customers in any language, with fast, native-quality translations of your customer support tickets in Zendesk.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed by Unbabel and is available in the\nZendesk Marketplace\n.\nReplying with a Translation\nTo request a translation automatically, simply reply as you normally would as an internal note with the #unbabel hashtag included at the top of your content.\nPlease also ensure that the\nunbabel_en\n,\nunbabel_reply\n,\nunbabeled\ntags are included, otherwise your response might not be translated automatically. Should this happen, you will need to add the missing tags, and create a new internal note with the #unbabel hashtag included at the top of your content.\nOnce you submit your response, it may take several seconds for Unbabel to automatically translate your internal comment, but it can take several minutes if a human is required to manually translate your internal comment. To view the status of the translation, you can open the Apps sidebar in the ticket, and scroll down to the\nUnbabel for Zendesk Support\nbox.\nAfter a translated response has been sent to the customer via Unbabel it is necessary to manually set the ticket status as\nPending\nsince Unbabel will incorrectly set the ticket status as\nOpen\n. You must do this with an\nempty comment\n(remove any\n#unbabel\nadded by the plugin, before you Submit as Pending).\nExcluding Text from Translation\nThe highlighted code can be skipped for translation by adding 3 brackets around the text:\n<<< text/code >>>\nThe above can also be used to protect sensitive information from a human translator when sending a translation request.\nDisabling Unbabel in a Specific Ticket\nSometimes Unbabel is triggered if a customer‚Äôs signature was written in a language that requires translation but the customer replies in English, and the translation is not needed. In this case, there is a way to disable Unbabel in this specific ticket:\nOpen the ticket in question.\nClick Apps > Unbabel for Zendesk Support.\nChange\nthe\nCustomer language\nto\nEnglish\n.\nFrom now on, Unbabel will not be triggered in this ticket.\nHelp with Translation\nIf for some reason you have difficulty in understanding the automated translation, an actual human intervention can actually be requested. Simply click the link\nCan't understand the translation?\nin the Unbabel app box and this will send your response for translation to Unbabel editors.\nBest Practices for Unbabel\nAs indicated in the training session, please keep in mind of the following best practices when writing a response for translation.\nRespond in one language\nIt is likely that you can speak another language and understand what the customer is trying to say. Please ensure that you only use the English language when responding tickets as the system may not detect the language correctly.\nCopy only the body of the content that needs translation.\nWhen referring to a quoted texts from our customers, please only use the content that requires translation. Including snippets/code/elements may take more time to translate and could result in a mistranslation.\nMind the punctuation.\nPunctuation can be sometimes tricky for Unbabel so please be sure there are no unnecessary periods/punctuations in between.\nSingle Word Use\nIt is likely that the response you are sending may be lost in translation, for example the word\npass\nwould differ to a\nboarding pass\n.\nZendesk Super App\nIntroduced via\nsupport-ops-project#801\nA plugin controlled app that can do several things Zendesk related\nThe current plugins are:\nCreate new ticket\nAllows an agent to create a new ticket using the same user as the ticket they are currently on.\nDue date picker\nThis allows you to customize what the Due Date for a Task ticket is set for. By default, Zendesk only allows setting the date. This enables you to set the date, time, and timezone.\nYou can also set the Due Date Note and disable (or enable) task notifications using this app.\nEscalated tickets\nThis searches for tickets under the organization that have been escalated within the last 6 months.\nRelated tickets\nThis looks for tickets related to the current one based off the category (or subcategory) the ticket is currently using. It then displays up to 5 of them (sorted by the update_at value of the ticket, descending).\nAttachments\nDisplays attachments present on the ticket.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport AMER\nSupport APAC\nSupport EMEA\nThis application was developed in-house and can be found\nZendesk Super App project\n.\nZenDuo\nIntroduced via\ngitlab-com/support/support-team-meta#6689\nThe ZenDuo application enables Duo Chat to work with Zendesk tickets.\nYou can choose from two pre-defined prompts:\nSummarize conversation\nSuggest KB article\nor define up to two custom prompts.\nFor each custom prompt, you configure:\nTitle: this is shown in the prompt dropdown list\nButton: the text shown on the action button\nPrompt: the actual prompt. Use the\n<<ticket-content>>\nplaceholder, which will be replaced by the ticket content.\nWhen you run a prompt, the application will send the ticket content (excluding file attachments) to Duo Chat and show its reply.\nNote that large tickets have to be sent in multiple parts, so it can take a while before Duo Chat replies.\nOnce you‚Äôve received a reply, you can choose:\nCopy to clipboard: copy the complete conversation (prompts and replies) to the clipboard.\nChat: continue the conversation with Duo Chat.\nDone: hide the conversation, and be ready to start a new one.\nWhen you send the initial prompt, a fresh conversation is always started, so there is no need to instruct Duo Chat to forget previous conversations.\nThe conversations you have with Duo Chat also show up in the GitLab Duo Chat history on e.g. GitLab.com as\nZenDuo <ticket#> <prompt>\n.\nYou can use this history to look up previous conversations, or continue on an old conversation.\nApp information:\nLocated in the ticket sidebar\nThis application was developed in-house and can be found\nZenDuo project\n.\nZenGuard\nIntroduced via\ngitlab-com/gl-security/corp/cust-support-ops/issue-tracker#122\nImplements a warning system into Zendesk to warn (or block) potentially dangerous actions.\nCurrent list of checks:\nChecks if due date is in the past, present, or too far in the future\nChecks if adding an end-user as a collaborator/CC\nChecks if setting to pending with an internal note\nChecks if trying to send a public reply on an on-hold ticket in a way that won‚Äôt reset the timer\nChecks if trying to set it on-hold without a public reply (except for accepted situations)\nChecks if setting ticket to pending without a reply\nChecks if making unapproved form changes\nApp information:\nLocated in the ticket sidebar\nThis application was developed in-house and can be found in the\nZenGuard project\n.\nZendesk US Government apps\nAdvanced SAST App\nIntroduced via\nsupport-team-meta#6652\nThe Advanced SAST App is a ticket app that enables a quick working of User requests for source code of LGPL-licensed components in GitLab Advanced SAST.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport\nSupport Managers\nSupport Operations\nThis application was developed in-house and can be found\nAdvanced SAST App project\n.\nAdvanced Search\nAdvanced Search is an app that provides a simple visual interface for constructing complex search queries against tickets, users, and organizations (orgs). It also enables you to export the search results in a CSV format.\nApp information:\nLocated in the navbar\nThis application was developed by\nZendesk\nand is available in the\nZendesk Marketplace\n.\nArchitecture Diagrams\nIntroduced via\nsupport-ops-project#801\nThis app uses the Organization field\nAM Project ID\nto check for an existing Account Management project. If it finds it, it will then link to that project‚Äôs Architecture Diagram.\nApp information:\nLocated in the ticket sidebar\nThis application was developed in-house and can be found\nGitLab Architecture project\n.\nGitLab Reminders App\nIntroduced via\nsupport-team-meta#3036\nThe Reminders App appears in the navbar and allows the agent a more specialized view of tickets they are involved in. It currently shows:\nTickets assigned to you with a pending/overdue task that are not in a Closed state\nRecent tickets you have viewed\nTickets assigned to you that are not in a Closed state\nTickets you are CC‚Äôd on that are not in a Closed state\nIt also allows you to quickly manage your tasks by seeing the notes you have left for said task, when it is due, and a button to quickly mark the task as done (remove the notes and due date).\nApp information:\nLocated in the navbar\nThis application was developed in-house and can be found\nGitLab Reminders App project\n.\nGitLab Search\nThis app lets you use the gitlab.com API to search for issues/merge requests within Zendesk.\nApp information:\nLocated in the topbar\nThis application was developed in-house and can be found\nGitLab Search project\n.\nShow Related Tickets\nThis uses the ticket subject to search for other tickets with a similar subject. This helps to locate potentially related tickets you can check to see how they were solved.\nApp information:\nLocated in the ticket sidebar\nThis application was developed by\nZendesk\nand is available in the\nZendesk Marketplace\n.\nZendesk Super App\nIntroduced via\nsupport-ops-project#801\nA plugin controlled app that can do several things Zendesk related\nThe current plugins are:\nCreate new ticket\nAllows an agent to create a new ticket using the same user as the ticket they are currently on.\nDue date picker\nThis allows you to customize what the Due Date for a Task ticket is set for. By default, Zendesk only allows setting the date. This enables you to set the date, time, and timezone.\nYou can also set the Due Date Note and disable (or enable) task notifications using this app.\nEscalated tickets\nThis searches for tickets under the organization that have been escalated within the last 6 months.\nRelated tickets\nThis looks for tickets related to the current one based off the category (or subcategory) the ticket is currently using. It then displays up to 5 of them (sorted by the update_at value of the ticket, descending).\nAttachments\nDisplays attachments present on the ticket.\nApp information:\nLocated in the ticket sidebar\nRestricted by Group:\nSupport\nSupport Managers\nSupport Operations\nThis application was developed in-house and can be found\nZendesk Super App project\n.\nZenDuo\nIntroduced via\ngitlab-com/support/support-team-meta#6689\nThe ZenDuo application enables Duo Chat to work with Zendesk tickets.\nYou can choose from two pre-defined prompts:\nSummarize conversation\nSuggest KB article\nor define up to two custom prompts.\nFor each custom prompt, you configure:\nTitle: this is shown in the prompt dropdown list\nButton: the text shown on the action button\nPrompt: the actual prompt. Use the\n<<ticket-content>>\nplaceholder, which will be replaced by the ticket content.\nWhen you run a prompt, the application will send the ticket content (excluding file attachments) to Duo Chat and show its reply.\nNote that large tickets have to be sent in multiple parts, so it can take a while before Duo Chat replies.\nOnce you‚Äôve received a reply, you can choose:\nCopy to clipboard: copy the complete conversation (prompts and replies) to the clipboard.\nChat: continue the conversation with Duo Chat.\nDone: hide the conversation, and be ready to start a new one.\nWhen you send the initial prompt, a fresh conversation is always started, so there is no need to instruct Duo Chat to forget previous conversations.\nThe conversations you have with Duo Chat also show up in the GitLab Duo Chat history on e.g. GitLab.com as\nZenDuo <ticket#> <prompt>\n.\nYou can use this history to look up previous conversations, or continue on an old conversation.\nApp information:\nLocated in the ticket sidebar\nThis application was developed in-house and can be found\nZenDuo project\n.\nZenGuard\nIntroduced via\ngitlab-com/gl-security/corp/cust-support-ops/issue-tracker#122\nImplements a warning system into Zendesk to warn (or block) potentially dangerous actions.\nCurrent list of checks:\nChecks if due date is in the past, present, or too far in the future\nChecks if adding an end-user as a collaborator/CC\nChecks if setting to pending with an internal note\nChecks if trying to send a public reply on an on-hold ticket in a way that won‚Äôt reset the timer\nChecks if trying to set it on-hold without a public reply (except for accepted situations)\nChecks if setting ticket to pending without a reply\nChecks if making unapproved form changes\nApp information:\nLocated in the ticket sidebar\nThis application was developed in-house and can be found in the\nZenGuard project\n.\nApp development\nNote\nThis is generalized information we have found helpful in the course of app development. It is not a single source of truth.\nUnderstanding Zendesk Apps\nBefore you can start creating and editing apps in Zendesk, it is important to understand the ins and outs of both Zendesk Apps and\nZendesk Apps framework\n.\nThere is a lot to this, so the Zendesk documentation is the best resource you have to learn the various ins and outs. This training documentation will cover what is viewed at ‚Äúthe most important‚Äù parts, but it is highly recommended you read and reference the\nZendesk developer documentation\nas often as possible.\nZAT, or Zendesk App Tools, is a ruby gem that makes working with Zendesk Apps locally considerably easier. It is highly recommended you install it on your computer:\ngem install rake\ngem install zendesk_apps_tools\nTo update it:\ngem update rake\ngem update zendesk_apps_tools\nSometimes on Mac terminal, you will get write permission error. You may use:\nsudo gem update rake\nsudo gem update zendesk_apps_tools\nNote: ZAT is having issues with Ruby version\n3.0.0 and plus\n. You‚Äôll likely need to use old stable versions like\n2.6.3p62\nmanifest.json\nThis file is used to configure you application. As such, it is very important and vital it is accurate.\nThe common configuration settings are:\nSetting\nWhat it does\nRequired?\nname\nSpecifies the name of the app\nauthor\nSpecifies the author of the app\nversion\nSpecifies the app version\nframeworkVersion\nSpecifies the framework version to use\nlocation\nSpecifies where the app appears\ndefaultLocale\nSpecifies the locale of the app\nparameters\nThe parameters to pass to the app during installation\ndomainWhitelist\nThe domains to allow use of secure parameters\nprivate\nSpecifies whether the app can be only be installed in the app developer‚Äôs account or not\nLocation\nThis setting determines where the app will appear and run. This is a very important setting. The first setting determines the product type location, and within that setting you can specify many other configurations, including the physical location the app will appear in. For the product type location, we always use\nsupport\n.\nThe physical locations are as follows:\nString\nLocation/Purpose\nticket_sidebar\nThe right side of all ticket view pages\nnew_ticket_sidebar\nThe right side of all new ticket pages\nticket_editor\nA button on the ticket editor box\nnav_bar\nAn icon on the left-side navigation bar\ntop_bar\nAn icon on the right side of the top menu\nuser_sidebar\nThe right side of all user view pages\norganization_sidebar\nThe right side of all organization view pages\nbackground\nThe app runs in the background and does not display anywhere\nmodal\nUsed when the app creates modals\nWithin the physical location settings, you can include more configuration settings, with the most common being:\nString\nWhat it does\nVariable type\nautoHide\nTells the app to auto-collapse on first load\nBoolean\nautoLoad\nTells the app to automaticall local (defaults to true)\nBoolean\nsigned\nSpecifies whether or not to use signed URLs\nBoolean\nurl\nThe URL of the page to display in the iframe of the app\nString\nsize\nThe initial app size (configure this in the app instead)\nAs an example, to have an app load ‚Äú\nhttps://google.com\n‚Äù automatically in the ticket sidebar with a starting height of 200px, your configuration block would look like this:\n\"location\"\n:\n{\n\"support\"\n:\n{\n\"ticket_sidebar\"\n:\n{\n\"autoLoad\"\n:\ntrue\n,\n\"url\"\n:\n\"https://google.com/\"\n,\n\"size\"\n:\n{\n\"height\"\n:\n\"200px\"\n}\nAs another example, to have your app load in both the user and organization pages, rendering the locale\nassets/iframe.html\nfile, you would do this:\n\"location\"\n:\n{\n\"support\"\n:\n{\n\"user_sidebar\"\n:\n\"assets/iframe.html\"\n,\n\"organization_sidebar\"\n:\n\"assets/iframe.html\"\n,\n}\nParameters\nThis is where you would define variables you want the app to use during installation.\nDomain whitelists\nIf your app is using secure parameters and you plan to make requests outside of Zendesk, you must whitelist the domains in question. Each parameter is a hash that contains the following:\nname\n: the name of the parameter\ntype\n: the type of parameter\nsecure\n: ensures users cannot see the variable value when making HTTP requests (you should\nalways\nuse this)\nrequire\n: specifies if the parameter is required for installation\nAs an example, to use two required parameters (\nparam1\nand\nparam2\n), both of which are text parameters in a secure way, you would do the following:\n\"parameters\"\n:\n[\n{\n\"name\"\n:\n\"param1\"\n,\n\"type\"\n:\n\"text\"\n,\n\"secure\"\n:\ntrue\n,\n\"required\"\n:\ntrue\n},\n{\n\"name\"\n:\n\"param2\"\n,\n\"type\"\n:\n\"text\"\n,\n\"secure\"\n:\ntrue\n,\n\"required\"\n:\ntrue\n}\n]\nDuring the installation of the app, Zendesk will ask you to give the values for these parameters. To utilize this in the code of your app, you will use this:\n{{setting.NAME_OF_PARAMETER}}\nWhere\nis the name you gave the parameter in the manifest.json file.\ninit\nTo create a client instance of the ZAF (Zendesk App Framework) client, you need to ensure the following is present in the javascript of your app:\nvar\nclient\n=\nZAFClient\n.\ninit\n();\nApp resizing\nTo resize the app during runtime, you would use the\ninvoke\nclass, specifying you wish to invoke the\nresize\nfunction. This is done like so:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\ninvoke\n(\n'resize'\n,\n{\nwidth\n:\n'100%'\n,\nheight\n:\n'100px'\n});\nRequired javascript library\nTo utilize the ZAT, you must include the following javascript in your app‚Äôs HTML file(s):\n<\nscript\nsrc\n=\n\"https://static.zdassets.com/zendesk_app_framework_sdk/2.0/zaf_sdk.min.js\"\n></\nscript\n>\nGetting metadata\nTo get metadata and use it in your app, you need to use the ZAF client‚Äôs\nget\nfunction. This takes an array of values to get from the ticket metadata, which you use in a function.\nAs an example, to get the ticket requester‚Äôs name and the ticket‚Äôs organization, and then log them to the console, you would do the following:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\nget\n([\n'ticket.requester.name'\n,\n'ticket.organization'\n]).\nthen\n(\nfunction\n(\ndata\n)\n{\nconsole\n.\nlog\n(\n\"Ticket requester name: \"\n+\ndata\n[\n'ticket.requester.name'\n]);\nconsole\n.\nlog\n(\n\"Ticket organization: \"\n+\ndata\n[\n'ticket.organization'\n]);\n});\nAs another example, to get the ticket‚Äôs due date and the due date notes (a custom ticket field) and then log them to the console, you would do the following:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\nget\n([\n'ticket.customField:due_date'\n,\n'ticket.customField:custom_field_360017383799'\n]).\nthen\n(\nfunction\n(\ndata\n)\n{\nconsole\n.\nlog\n(\n\"Due date\"\n:\n+\ndata\n[\n'ticket.customField:due_date'\n]);\nconsole\n.\nlog\n(\n\"Due date notes:\"\n+\ndata\n[\n'ticket.customField:custom_field_360017383799'\n]);\n});\nMaking requests\nYour app might need to make requests, whether they be ‚Äúinternal‚Äù (i.e. within Zendesk itself) or external. To do this, we use the\nrequest\nfunction of the client object.\nThe format of this is\nvery\nclose to that of making\nAJAX requests\nin jQuery. The format you will normally use is:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\nrequest\n({\nmethod\n:\n,\nurl\n:\n,\ncontentType\n:\n,\ndata\n:\n,\nsecure\n:\n,\nheaders\n:\n}).\nthen\n(\nfunction\n(\ndata\n)\n{\n// do stuff\n});\nThe exact parameters in the request will vary from request to request.\nAs an example, if you wanted to update the due date of a ticket, you might do:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\nrequest\n({\nmethod\n:\n,\nurl\n:\n'/api/v2/tickets/123456.json'\n,\ncontentType\n:\n'application/json'\n,\ndata\n:\n.\nstringify\n({\ndue_at\n:\nnew\nDate\n(\n'2021-01-01'\n).\ntoISOString\n()\n}),\nsecure\n:\n,\nheaders\n:\n}).\nthen\n(\nfunction\n(\ndata\n)\n{\nconsole\n.\nlog\n(\n'Due date updated to 2021-01-01'\n);\n});\nAs another example, if you wanted to make a GET request to gitlab.com to find information about user ID 987654, using a secure parameter from app installation, you might do:\n// First line shown to clarify you use the ZAF client object to do this\nvar\nzafclient\n=\nZAFClient\n.\ninit\n();\nzafclient\n.\nrequest\n({\nmethod\n:\n,\nurl\n:\n'https://gitlab.com/api/v4/users/987654?private_token={{setting.GitLab_token}}'\n,\nsecure\n:\ntrue\n}).\nthen\n(\nfunction\n(\ndata\n)\n{\nconsole\n.\nlog\n(\n'User email: '\n+\ndata\n.\nemail\n);\n});\nTesting an app\nThere are two ways to test a Zendesk app before you put it into production:\nLocally\nNote\nThis cannot be done if your app is using secure parameters. Instead, you would need to install the app into the Sandbox and test from there.\nTo test your app locally, cd into the app directory on your local computer and then run the\nzat server\ncommand. This will start up a ZAT server on your computer. Once it has booted up, go to a Zendesk URL and put\n?zat=true\nat the end. This will now load the apps from your local computer, allowing you to test out the app locally.\nVia the Sandbox\nIf your app is using secure parameters, you will need to test via the Sandbox instead.\nLast modified June 5, 2025:\nAdding info about ZenGuard app (\nc72e3de7\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5247}
{"doc_id": "7438deee030032b8", "url": "https://handbook.gitlab.com/handbook/legal/privacy", "title": "GitLab Privacy | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nGitLab Privacy\nThis page helps GitLab Team Members understand the privacy practices at GitLab and to facilitate a culture that respects and prioritizes the privacy of our Team Members and users\nThe Privacy Team is part of the Legal and Corporate Affairs Team. We provide support and guidance to uphold consistent business processes around the protection of personal data as it relates to GitLab customers, users, Team Members, and other natural persons. We collaborate cross-functionally and serve as advocates to ensure that the data privacy practices of GitLab meet the needs of our cross-functional partners and are continually balanced with an ever-changing global data privacy and protection landscape.\nWhat is data privacy\nPrivacy Terms\nVendor Privacy Review Process\nInternal Product Feature/Release Privacy Review\nGuidelines for Law Enforcement Requests\nCustomer Product Usage Information\nand\nUsage Events FAQs\nPrivacy Statement Links\nGitLab Privacy Statement\nGitLab Cookie Policy\nGitLab Team Member Privacy Notice\nContact the Team\nSlack channel - #legal is the best place for questions relating to our team that do not require legal advice, deliverables, or any discussion of confidential information.\nFor issues that require action from the Privacy Team, apply the label\nPrivacy::Intake\n. This will update the\nPrivacy Legal Issue Board\nand allow the team to triage the issue appropriately. We also use the following labels:\nPrivacy::In Process\n- when the Privacy Team is actively working on the issue\nPrivacy::Pending Requestor\n- when the Privacy Team has a requirement or task that must be met by the business owner before the issue progresses\nPrivacy::Done\n- when the Privacy Team has finished their portion of the issue\nPrivacy::Attention\nfor awareness only, no action needed.\nFor sensitive, private, or confidential requests email\nlegal_internal@gitlab.com\n. Please do not send emails to this address for engineering, marketing, sales or procurement requests. These should be directed to #legal or an issue should be created in the\nLegal and Compliance\nproject.\nWhat Data Privacy Means\nTell people what you are doing with personal data and why you are doing it so that the person can make an informed decision about whether they want to allow it to happen. Do not be creepy about what personal data is collected or how it is used and do not change the way personal data is used without first giving people notice and an opportunity to object, or, where required, obtaining prior consent. Make it easy for people to tell us their privacy preferences and honor those preferences even if they change over time. Build a product or service that has privacy-focused settings turned on by default and let the consumer decide if and when they want to change that. Transparency is a core value and every team member is responsible for the proper collection and use of personal data consistent with our\nPrivacy Statement\n.\nPrivacy Terms\nPrivacy Term Definitions\nAnonymization\nThe process of permanently and irreversibly altering personal data in a way that it is no longer capable of being related back to a specific individual.\nConsent\nA freely given, specific, informed and unambiguous indication of an individual‚Äôs wishes. Consent is captured by an un-ticked checkbox or other unequivocal statement which signifies agreement to the processing of personal data before or at the time of collection.\nData Classification\nA method of determining types of data associated by risk. See\nGitLab Security Data Classification Standards\nfor more information.\nData Controller\nA natural or legal person, agency, or other entity which alone, or jointly with others, determines the purpose and means of processing personal data. For example, GitLab is a Data Controller is in the areas of marketing and sales where the personal data of prospects and leads is managed solely at our discretion. GitLab also serves as a Data Controller for all personal data collected from Team Members for employment purposes and any administration of benefits.\nData Processor\nA natural or legal person, agency, or other entity which processes personal data on behalf of a Data Controller. GitLab acts as a Data Processor when we manage personal data native to a Customer‚Äôs instance or namespace.  GitLab acts as a Processor in these situations because the Customer is the ultimate owner of the data it submits to the service offerings, and our contracts service as Customer‚Äôs instructions to GitLab regarding the processing of their data.\nData Subject\nAn identified or identifiable natural person.\nData Subject Rights\nRights granted to individuals in relation to personal data or information processed about them.  Because Data Subjct Rights are instrumental to the privacy and protection of data subjects, many of these rights are codified under global privacy legislation, such as the GDPR, CCPA, and LGDP. If a business processes personal data pursuant to certain bases such as consent or legitimate interest, then a data subject may assert one of its fundamental rights and a business is obligated to respond under law.  The rights granted vary slightly by country, region, province or state. GitLab treats all users and Team Members the same and will respond to a data subject request from any individual user or team member even if they live in a country, region, or state/province without specific data protection laws. Expand the following section for more information about the data subject rights available.\nData Subject Rights\nRight of Access\nA request seeking access to the specific pieces of personal data that have been collected and used by a Data Controller.\nRight to Correct\nA request asking for inaccurate or incomplete personal data to be corrected.\nRight to Delete\nA request which seeks the erasure of personal data relating to the data subject. Deletion requests must meet certain conditions and businesses are not required to delete any personal data that is processed to meet legal obligations, including that data which may be processed in pursuit or in defense of claims.\nRight to Portability\nA request where the data subject wants to transfer their data to another Data Controller; typically seen when the individual changes service providers that share a compatible electronic filing system.\nRight to Restrict Processing\nThis is a request for the Data Controller to stop processing personal data under certain circumstances. This may also include a request to limit the use and disclosure of Sensitive Personal Data.\nRight to Object\nA request to opt-out of all data processing or specific processing of personal data based on consent or legitimate interest. Generally this is a request to opt-out of processing for targeted advertising, which includes the sale or sharing of personal data for profiling or cross-context behavioral advertising.\nRight Not to be Subject to Fully Automated Decisions\nThis is a request that the data subject not be subjected to a decision based solely on automated processing, including profiling, which would have a significant legal impact. An example might be an algorithm that excludes someone of a certain race from obtaining a credit card.\nA Data Protection Impact Assessment is a method to review and document identified privacy compliance risks, as well as evalute higher risks to the rights and freedoms of individuals, including any that pose potential for significant harm. Learn more about GitLab‚Äôs process for completing DPIAs\nhere\n.\nPersonal Data\nAny data, individually or when combined with other data, that identifies, relates to, describes or is reasonably capable of being associated with or linked to an identifiable natural person (a ‚Äòdata subject‚Äô), whether directly or indirectly. See also, Sensitive Personal Data.\nPrivacy by Default\nA concept that should be implemented at the product development stage and uses appropriate measures to ensure that, by default, the only personal data processed is what is truly necessary. In practice, this means a user‚Äôs privacy settings prioritize privacy in their default state.\nPrivacy by Design\nA concept which focuses on intentionally designing a product that incorporates foundational privacy principles and ensures that Controllers and Processors are able to fulfill data protection obligations. This may include appropriate technical and organizational measures such as pseudonymisation and encryption.\nPseudonymization\nThe process of altering personal data so that it can no longer be attributed to a specific individual without the use of additional re-identifying information.  In order to practice successful Pseudonymization, the re-identifying information should be kept separate from the pseudonymized data.\nPublicly Available Personal Data\nRefers to personal data that is publicly available from federal, state, or local government records or made manifestly public by the data subject. Under limited data privacy laws this may also include personal data made public through widely distributed media.\nSensitive Personal Data\nData that is particularly personal and intimately tied to the core identity of a person. This type of data generally includes racial or ethnic origin, political opinions, religious or philosophical beliefs, trade union membership, genetic data, biometric data, data related to health, data related to sex life or sexual orientation, criminal offenses, and citizenship/immigraion status.  In some jurisdictions, Sensitive Personal Data includes government identifiers and financial data.\nPrivacy Review Process\nEvery vendor that handles personal data is required to go through a Privacy Review prior to being onboarded, which includes completion and approval of the privacy due diligence questionnaires detailed in the\nProcurement process\n. Certain vendors who are classified as handling red or orange data under our\nData Classification Standards\nare reviewed annually. Additionally, when new product features are designed, there are times when a formal privacy review is required.\nThis section outlines the process for these reviews.\nVendor Privacy Review\ngraph TD\nA[Evaluating Potential<br> New Vendor] --> Did1[(Is there a Zip Request?)]\nB[Pilot with<br> New Vendor] --> Did1[(Is there a Zip Request?)]\nC[Renewing<br> Vendor] --> Did1[(Is there a Zip Request?)]\nDid1 --> E1[Yes]\nDid1 --> E2[No]\nE1 --> F[Privacy Review runs<br> concurrently with <br> Security and Legal in Zip]\nE2 --> G[Is there an existing Issue?]\nG --> H1[Yes]\nG --> H2[No]\nH1 --> I[Add Privacy::Intake<br> label to the Issue]\nH2 --> J[Create New Issue]\nF --> K[Privacy Review SLA<br> is 2 weeks]\nK --> L[If DPIA required<br> SLA for DPIA<br> is 4 weeks]\nL --> M[Approved?]\nM --> N1[Yes]\nM --> N2[No]\nN1 --> O[Process Complete<br> Approved]\nN2 --> P[Third-Party Risk<br> Acceptance Required]\nclick Did1 \"https://handbook.gitlab.com/handbook/business-technology/enterprise-applications/guides/zip-guide/\"\nclick J \"https://gitlab.com/gitlab-com/legal-and-compliance/-/blob/master/.gitlab/issue_templates/Vendor-Procurement-Privacy-Review.md\" _blank\nclick P \"https://gitlab.com/gitlab-com/legal-and-compliance/-/blob/master/.gitlab/issue_templates/Third-Party-Risk-Acceptance.md\" _blank\nstyle A fill:#E6E6FA\nstyle B fill:#E6E6FA\nstyle C fill:#E6E6FA\nstyle Did1 fill:#FF8C00\nstyle E1 fill:#C0C0C0\nstyle E2 fill:#C0C0C0\nstyle F fill:#FF8C00\nstyle G fill:#FF8C00\nstyle H1 fill:#C0C0C0\nstyle H2 fill:#C0C0C0\nstyle I fill:#98FB98\nstyle J fill:#98FB98\nstyle K fill:#ADD8E6\nstyle L fill:#ADD8E6\nstyle M fill:#FF8C00\nstyle N1 fill:#C0C0C0\nstyle N2 fill:#C0C0C0\nstyle O fill:#2E8B57\nstyle P fill:#DC143C\nFor Third-Party Risk Acceptance, any Moderate/High risk requires VP and/or above approval\nInternal Privacy Review\nInternal Product Feature/Release Privacy Review Process\nAnytime a new feature or a change to an existing feature is planned, Product Managers and Engineering Managers should evaluate if the planned development presents a legal risk where personal data is involved. If Personal Data is implicated, utilize the\nLegal Risk Checklist and Workflow\n(\ninternal only\n)\nPrivacy Training\nGitLab Team Members are required to complete annual training which covers general privacy practices worldwide. The goal of annual training is to ensure that Team Members understand what personal data is and how to handle it to ensure that GitLab maintains the trust our customers have placed in us as well as to ensure that GitLab remains compliant with frequently changing legal and regulatory obligations.\nCustomer Product Usage Information\nGitLab's Product Usage Data policies\nData Protection Impact Assessment (DPIA)\nThis page furthers the understanding of GitLab Team Members on the purpose of Data Protection Impact Assessments and when they are required\nEmployee Privacy Policy\nThis Employee Privacy Policy explains what types of personal data we may collect about our employees and how it may be used\nFAQ - Customer Product Usage Events\nAnswers to common questions about product usage event data\nGuidelines for Law Enforcement Requests\nThis page details GitLab Guidelines for receiving and processing of law enforcement requests for user data\nPersonal Data Requests\nUnder various global data privacy laws, GitLab users have the right to request that GitLab provides ‚Ä¶\nTransparency Reports\nThis page contains information and links to GitLab's transparency reports\nLast modified May 16, 2025:\nMove existing security standards to new section, which includes an index (\n840eb803\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2044}
{"doc_id": "16105bae6249d13e", "url": "https://handbook.gitlab.com/handbook/finance/accounting", "title": "Accounting and Reporting | The GitLab Handbook", "text": "The Handbook\nFinance\nAccounting and Reporting\nThis page contains GitLab‚Äôs accounting and reporting policies, which can be made public. Please find our internal processes in the\nAccounting and Reporting\ninternal handbook section.\nQuote to cash\nInvoicing to customers\nCalculated Billings\nCalculated billings is defined as revenue plus the sequential change in total deferred revenue as presented on the balance sheet.\nWe do not believe that calculated billings provides a meaningful indicator of financial performance as billings can be impacted by timing volatility of renewals, co-terming upgrades and multi year prepayment of subscriptions.\nFor order approval and invoicing process please view the\nBilling Ops page.\nInvoicing: One Time Events\nSend the below information via email to\nar@gitlab.com\nCompany name\nCompany AP email\nAddress\nBilling contact name\nBilling contact email\nCharge amount\nEvent name and subject\nAmendments to Subscriptions\nTo amend a customer‚Äôs account, choose one of the options below from the subscription page in Zuora.\nTerms and Conditions - used to change the end date of a product\nNew Product - choose when adding a product\nUpdate a product - choose when making a change to a current product\nRemove a product - used when removing a product\nRenewal\nZuora Subscription Data Management\nBasic Assumptions\nSubscriptions should only be cancelled with 45 days of the start. Exceptions can be made (see\nSupport Workflows\n)\nSubscriptions can be linked across multiple Zuora and SalesForce (SFDC) Accounts, but not SFDC Ultimate Parent Accounts.\nAll Zuora Accounts must be linked to a valid SFDC Account.\nMRR can change historically due to customer behavior (renewals, cancellations, etc.)\nNew Accounts vs New Subscriptions\nThere are instances where a new account in Zuora is required rather than just a new subscription in an existing account. This is determined by the sold-to contact person.\nWithin the customer account portal, customers can only see a single Zuora account at a time. If a customer wants to add a subscription and the contact information is the same, then the subscription can be added to the existing account.\nIf a customer wants an additional subscription for a different sold to contact, then a new Zuora account will be created so that every sold to contact can log into the portal and manage their subscriptions.\nLinking Renewal Subscriptions\nWhen a customer renews their subscription, a new subscription is typically created. This can create challenges for calculating metrics like dollar retention for a subscription because once subscription has ended and another has started. To address this, a linkage is made between the original subscription and its renewal(s).\nThe field\nRenewal subscription\nis used to create the mapping. These are the following constraints on this field:\nThis field defines a unidirectional relationship that points to a separate subscription name.\nA renewal subscription can start on the same or future day as the original subscription start date to which it is linked to, but never in the past.\nAny number of subscriptions can point to the same renewal subscription as long as the time constraint is met.\nA subscription may have any number of renewal subscriptions that it points to as long as the time constraint is met. This is a one-to-many relationship. Each renewal subscription to which the original subscription is linked is input in the field and are separated by two pipes.\nFor example, subscription\nis linked to\nRenewal subscriptions can point to subscriptions under separate Zuora Accounts\nRenewal subscriptions can start 12 months or less after the original subscription. Practically, this is because a linkage of greater than 12 months has no effect on any relevant metrics (Retention or Yearly counts).\nThe process to make the linkage is as follows:\nCancel the old subscription in Zuora.\nCopy and paste the new subscription in ‚ÄúRenewal Subscription‚Äù field with no trailing spaces.\nZuora subscription status ‚Äòactive‚Äô\nThe active subscription status in Zuora needs to be reviewed in connection to the end date.\nIf the end date is in the future it means that the subscription is still within the term and the customer is able to use the product.\nAn ‚Äòactive‚Äô subscription with an end date in the past means that the subscription was not renewed and the customer doesn‚Äôt have access to the product since the end date.\nWe currently don‚Äôt actively cancel these subscriptions as this is a manual process and the cancellation or lack of it does not have any impact on other processes.\nAdditionally, where subscriptions remain in an active status they can be renewed by the customers on the CustomersDot\nInvoice cancellations and refunds\nFor step by step processes please view\nBilling Ops page.\nHow to process a partial refund in Stripe\nLog in to Stripe.\nType in the cardholder‚Äôs name in the search field at the top of the screen.\nClick on the original charge that will be refunded.\nClick on the refund button.\nEnter in the amount to refund.\nEnter in the reason code.\nIn the description field, enter the reason for the refund and include the invoice that was created in Zuora for the refunded amount.\nClick on refund.\nGo back to Zuora.\nPut the customer account in silent mode under ‚ÄúCommunication Profile.‚Äù\nPost the invoice draft.\nTransfer to credit balance.\nAccounting Code: Stripe - Inc\nPut the customer account back into Default/B2B under ‚ÄúCommunication Profile.‚Äù\nVerify that the balance due is $0.00 on the refund invoice that was created.\nManually e-mail the customer, do not use Zuora to create the email as you cannot update the contents. Include a screenshot of the partial refund from Stripe and attach a copy of the refund invoice.\nAccounting for income from sale of merchandise\nPosting Swag Shop transactions in NetSuite\nTransactions from the Swag Shop are remitted to the Comerica checking account daily and should be booked in NetSuite at the end of each month.\nIn Shopify, download the transaction report in CSV format (found under Orders, then Export).\nThis report contains swag shop revenue and tax data to be recorded in NetSuite.\nIn portal used for swag download the orders report which should include cost for swag sold.\nRecord the revenue, tax, cost and cash received.  At times cost maybe estimated using a historical average.\nRecord the tax collected in the Ava Tax Portal.\nCreate a journal entry in NetSuite under the GitLab Inc subsidiary, using the last day of the month as the entry date.\nAccounts receivable\nAccounting for customer collections\nCash Receipt\nCredit card customer\nFollow this procedure if the customer paid by credit card.\nYou may recall from the invoicing process that there was still a balance due when saving the invoice.  The following steps will record the payment and remove the balance due.\nLogin to Stripe dashboard and click on Payments under Transactions (left hand side). You will see a listing of the latest Stripe transactions listed by amount, Recurly transaction, name, date, and time. There is also an option to filter the report by clicking on XXX at the top left. Click on XXX to export to excel. This will give you a workbook area and also a breakdown of the fees which we will work on later.\nIn NetSuite, click on the ‚ÄúTransactions‚Äù tab on the left.\nClick on the orange ‚ÄúOPEN INVOICES \" tab. This will bring up all open invoices listed by date, invoice #, customer, etc.\nMatch invoice #s  between the Stripe dashboard and NetSuite. If you click on a transaction in the Stripe dashboard, it will take you to a screen that shows more detail, including the invoice # being paid. You can work your way from the bottom up.\nIn NetSuite, click ‚ÄúReceive Payment‚Äù on the matched payment and invoice.\nReceiving the payment\nEnter the payment date, which is the payment date from Stripe dashboard.\nPayment method = Credit Card.\nReference no. = ‚ÄúRecurly Transaction ID:‚Äù found under Metadata in Stripe dashboard.\nDeposit to = Stripe.\nNetSuite will auto-fill the payment amount with the entire balance due. No need to change this unless the payment amount from Stripe is different.\nClick on ‚ÄúSave and Close‚Äù.\nRepeat the above for all the remaining invoices that were paid by credit card.\nPost a journal entry to record Stripe Fees.\nIn NetSuite, click on the ‚Äú+‚Äù sign. Under ‚ÄúOther‚Äù, select ‚ÄúJournal Entry‚Äù.\nIt is okay to leave the journal date as long as it is within the month the fees were incurred. If not, change it to the last day of the month.\nNetSuite will auto fill the journal number. Do not change.\nAccount #1 Entry\nFill the ‚ÄúAccount #1‚Äù entry with ‚ÄúCredit Card Transaction fees‚Äù.\nFill the ‚ÄúDebits‚Äù entry with the value from the Stripe report that was exported. The value will be the sum of ‚ÄúColumn I‚Äù in the Stripe report, which is the fee amount. Be sure to only sum the rows which you just posted payments for.\nLeave the ‚ÄúCredits‚Äù entry empty.\nFill the ‚ÄúDescription‚Äù entry with ‚ÄúTo record credit card transaction fees for period (enter the date range for the transactions posted)‚Äù.\nLeave the ‚ÄúName‚Äù entry empty.\nFill the ‚ÄúClass‚Äù entry with ‚ÄúSales‚Äù.\nAccount #2 Entry\nFill the ‚ÄúAccount #2‚Äù entry with ‚ÄúStripe‚Äù.\nLeave the ‚ÄúDebits‚Äù entry empty.\nThe ‚ÄúCredits‚Äù entry will autofill. This should be the same amount as the ‚ÄúDebits‚Äù entry for Account #1.\nThe ‚ÄúDescription‚Äù entry will autofill. This should be the same as the ‚ÄúDescription‚Äù entry for Account #1.\nLeave the ‚ÄúName‚Äù entry blank.\nLeave the ‚ÄúClass‚Äù entry blank.\nClick ‚ÄúSave‚Äù.\nThis transaction transfers the payment obligation from the customer to Stripe.  The payment obligation from Stripe is removed when Stripe transfers  the funds to GitLab‚Äôs bank account.\nPosting a payment from Stripe when a transfer is received from Stripe\nPost a journal entry:\nFill the ‚ÄúJournal Date‚Äù with the date that payment was received in the bank.\nFill the ‚ÄúCredit Account‚Äù with Stripe.\nFill the ‚ÄúDebit Account‚Äù with ‚ÄúComerica Checking - GitLab Inc.‚Äù\nLeave ‚ÄúName‚Äù blank.\nLeave ‚ÄúClass‚Äù blank.\nFill the ‚ÄúDescription‚Äù with ‚ÄúTo record Stripe transfer (date of transfer)‚Äù.\nClick ‚ÄúSave‚Äù.\nPosting a payment from a ‚Äúbank customer‚Äù\nIn Netsuite:\nClick on the ‚Äú+‚Äù sign.\nClick on ‚ÄúReceive Payment‚Äù under Customers.\nFill the ‚ÄúPayment Date‚Äù with the date payment was received.\nFill the ‚ÄúPayment Method‚Äù choose from the dropdown menu.\nFill the ‚ÄúReference No.‚Äù with the check # or bank reference # from incoming wire.\nFill the ‚ÄúDeposit to‚Äù with ‚ÄúComerica Checking‚Äù.\nFill the ‚ÄúAmount Received‚Äù with the amount received from the incoming wire.\nFor step by step cash collections process please view\nBilling Ops page.\nAccount receivable provisions, bad debts and other period close adjustments\nAccounts Receivable Performance Indicators\nTime for Invoices to be generated when a deal is closed won in Salesforce < 24 hours\nThe time from when a deal is closed won in Salesforce to when the invoice is generated. Professional services are excluded from this performance indicator. This is tracked over a calendar month. The target is < 24 hours.\nAccounts Receivable Process for Non-Payment of Invoices\nBilling & Revenue team review AR Aging as on a monthly basis. Fifty (50) percent of the balances that are Ninety (90) days or more after the due date and One Hundred (100) percent of the balances that are One Hundred and Twenty (120) days or more after the due date are reserved as allowance for doubtful debt. Bad debt expense is recorded based on revenue recognised, future revenue recognition is stopped and deferred revenue is reversed all at the Netsuite level.\nFuture amortisation of commissions expenses related to reserved invoices should also be stopped to ensure alignment with pattern of revenue recognition.\nAllowance for doubtful debt will be shared with Sales Operations on a monthly basis to ensure they have visibility of what may be written off in the future.\nOn a quarterly basis, Senior Billing Manager and Revenue Director will determine the aged invoices that are uncollectible. They will create an issue ten (10) days before the end of the quarter to seek approval according to the\nsignature auhorization matrix\nto write off invoices and to also notify the Sr. Director of Sales Operations. Sales Operations will then create decommission opportunities in SFDC for approved write offs before the end of the quarter and these will be synced to Zuora to reverse original invoicing and revenue. Sales Operations will claw back commissions accordingly.\nRevenue team will review write-offs processed in Zuora to ensure correct revenue reversal and will book MJEs in Netsuite to reclass impact to Bad Debt Reserve.\nCustomers that have had their invoices written off, consider no discounts or credit given for future deals.\nWhere payment is received for an invoice after it has been written off, the write off will be reversed and the related commission will be reinstated.\nProcure to Pay\nProcure to pay is the process of requisitioning, purchasing, receiving, paying for and accounting for goods and services. It includes the following sub processes of both the\nProcurement\nand\nAccounts Payable\ndepartments:\nVendor Master Management\nIf the vendor is not already set up in NetSuite it is considered a new vendor.\nAccording to the new vendor‚Äôs Legal Entity, they will be onboarded into Coupa.\nNew Vendor Onboarding - Coupa\nCoupa is a procure-to-pay system that streamlines the purchase request process, initiate workflow with approvals, and enable Purchase Orders. We will be rolling out in a phased approach, with the US and Netherlands entities (GitLab Inc, Federal, IT BV and BV) in Phase I (2021-06-01). The remaining entities will be part of Phase II (2021-12-13).\nYou can learn more about Coupa on our\nFAQ Page\nHow vendors are added into Coupa:\nAny Coupa user can request a new supplier using the New Supplier Request form.\nCheck\nHow to Request a New Supplier in Coupa\nfor a detailed guide.\nOnce the New Supplier Request is approved, an External Supplier Form will be automatically sent to the Supplier to gather additional information.\nSupplier must complete the form and submit it back.\nAfter supplier submission, the external form will be routed to Accounts Payable Approval Group for review and approval.\nAfter approval, the Supplier details will be integrated to NetSuite. Once the supplier is successfully created in NetSuite, it will flow back to Coupa to complete the New Supplier creation. By then, the Supplier should be available when creating Purchase Requests and Invoices.\nNote\nIf you are a GitLab recurring vendor and did not receive an onboarding email from Coupa, please reach out to\nap@gitlab.com\n.\nInvoice Accounting\nEntering a Bill (invoice) in NetSuite\nPlease note the below steps reference how to manually enter bills into NetSuite.  Effective 2019-11-01 all AP invoices were processed through Tipalti. Effective 2021-06-01 (Coupa Phase I) and 2021-12-13 (Coupa Phase II), AP invoices will be processed in Coupa. These systems will automatically record the transaction into NetSuite after the invoice has been approved by the corresponding business partner in the respective system.\nOn the NetSuite home page, click the ‚Äú+‚Äù icon near the global search bar at the top of the screen and select ‚ÄúBill.‚Äù\nSelect the appropriate vendor record. If adding a new vendor, follow the bullets below before proceeding, otherwise skip to step 3.\nEnter the company name, email address, applicable subsidiary, physical address, payment terms, primary currency, and Tax ID. (Note that the address field is located under the ‚ÄúAddress‚Äù tab, while the Tax ID, primary currency, and payment terms fields are located under the ‚ÄúFinancial‚Äù tab)\nEnter the banking information in the ‚ÄúComments‚Äù field then click ‚ÄúSave.‚Äù\nGo to the ‚Äú+‚Äù icon at the top of the vendor record and select ‚ÄúBill‚Äù from the dropdown box.\nEnter Bill date. The due date should auto-fill based on payment terms entered during vendor setup. If not, select the correct due date and update the vendor record after the bill has been entered and saved.\nEnter Bill number.\nGo to the ‚ÄúExpense and Items‚Äù tab below to enter the expense details.\nSelect appropriate GL-account under the ‚ÄúAccount‚Äù dropdown box. (Be sure to check whether the invoice represents a prepaid expense, fixed asset, etc.)\nEnter Bill amount.\nSelect tax code, if applicable.\nEnter department. (This must be entered if the account you selected in step 6 is an expense account)\nAdd attachments: Go to the ‚ÄúCommunication‚Äù tab and find the ‚ÄúFiles‚Äù subtab.\nClick ‚ÄúNew File.‚Äù A new window will appear, allowing you to select the file you wish to attach.\nIn the new window, select the ‚ÄúAttachments Received‚Äù folder in the dropdown box, then click ‚ÄúChoose File‚Äù to attach both a copy of the vendor bill and email approval. (The supporting email approval must be attached along with a copy of the invoice)\nClick ‚ÄúSave.‚Äù\nIn Google Drive, file invoice in the ‚ÄúUnpaid‚Äù folder.\nInvoicing in Coupa\nCoupa is a Procurement and Invoicing Tool. Similarly to purchase requests for goods/services that must be initiated in Coupa, invoices are also created and approved in Coupa.\nFor all issues created before Coupa Go-Live (Phase I; 2021-06-01 and Phase II; 2021-12-13), the business will not be setting up Purchase Orders for those and the Accounts Payable team will manually enter the related invoices as Non PO-backed.\nInvoices in Coupa can be created via 4 different channels:\nCoupa Supplier Portal (CSP)\nFree, Web-based portal specifically for suppliers.\nSuppliers receive POs within CSP Coupa inbox and perform PO Flips to Invoices and is able to see a complete history of all their POs/invoices.\nOnce CSP invoices are submitted by the supplier, Coupa triggers the approval workflows.\nSupplier Actionable Notification (SAN)\nSuppliers act directly (flip PO to invoice) from Coupa PO SAN email.\nNo need to register for/sign into Coupa/CSP, free service available any suppliers (with email).\ncXML\nFor ‚Äúhigh-touch‚Äù suppliers (e.g. Amazon, CDW) with cXML invoicing capability to receive POs and transmit invoices directly.\nWorks well in conjunction with punchouts.\nManual Entry in Coupa UI\n‚ÄúFlip PO‚Äù option copies data from Coupa PO to pre-populate invoice fields for faster entry.\nNon PO backed invoice manual entry.\nCoupa Integration - troubleshooting for Invoices\nA NetSuite error log identifying invoice integration issues will be emailed to the Accounts Payable Team every Tuesday and Friday. The email is sent from\nFinance Systems Admins\nand the Subject is\nCoupa2NS Invoices - Integration Log\n. Download the attached file and filter by Type =\nError\nand\nAudit\n. Review the\nDetails\nfield to find the invoice number/document number that needs to be reviewed/corrected. For information regarding common errors and how to correct them, please review this\nfile\n; under the column labeled\nScript\nsearch for\nCoupa Invoice Integration\n. If any troubleshooting assistance is needed, please ask in the\n#coupa_help\nSlack channel.\nThere is also a View in Coupa that will list invoices not exported to NetSuite. Under Invoices, select View =\nNot Exported\nHowever, there will be no details regarding the integration issue. You will need to review the NetSuite error log (referenced above) for the details.\nFor vendors who invoice GitLab for multiple entities, all invoices are separated by subsidiary (due to audit standards). If the vendor onboards for the Coupa Supplier Portal (CSP), the vendor will only see the POs related to those entities, and will need to email the others. If you are a GitLab vendor who invoices for multiple entitites and you have any questions, please reach out to\nap@gitlab.com\n.\nApproving an Invoice in Coupa\nInvoices requiring PO receipts or approval will appear in user‚Äôs To Do list within Coupa. Users will also receive email notifications from Coupa (depending on user‚Äôs notification setting in Coupa).\nPO receipts notifications will enable users to ‚ÄúCreate Receipt‚Äù by clicking on the button and entering the quantity received and receipt date. Please watch the\nEnd Users training video\n(starting at the 30:15 mark) for more information.\nApproval notifications will enable users to reject or approve invoices by clicking on the appropriate button.\nTop information to verify before approving an invoice\nVerify invoice copy is attached\nVerify correct PO is matched\nVerify coding (Billing) is correct\nVerify service date is entered and correct\nVerify tag/class is entered (if applicable)\nVerify invoice total is correct\nIf there are issues with any of the above items, please tag\n@Accounts Payable Approval Group\nin the Comments section with details.\nDisputing an Invoice in Coupa\nThe invoice dispute process in Coupa enables the Accounts Payable team to request corrections on invoices from suppliers.\nInvoices in ‚ÄúAP Hold‚Äù, ‚ÄúPending Action‚Äù, ‚ÄúPending Receipt‚Äù, ‚ÄúOn Hold‚Äù, ‚ÄúPending Approval‚Äù or ‚ÄúRejected‚Äù statuses can be disputed to the supplier for corrections. Disputing an invoice requires a dispute reason and sends an email notification to the supplier contact on record and any additional listed recipients.\nOnce disputed, an invoice can be Withdrawn from Dispute by Accounts Payable or Voided; or Resolved by the supplier.\nRejecting an Invoice in Coupa\nThe invoice rejection process in Coupa allows the Accounts Payable team to make adjustments on invoices before restarting approvals, continuing approvals or disputing the invoice back to the supplier. This is an internal status that suppliers cannot see indicating that an approver or approval group rejected the invoice. Comments are required when rejecting an invoice - please provide as much detail/information as possible.\nManually Entering a Bill (invoice) in NetSuite\nPlease note the below steps reference how to manually enter bills into NetSuite.  Effective 2019-11-01 all AP invoices should be getting processed through Tipalti and Effective 2021-06-01 we will begin to process in Coupa as well. These 2 systems will automatically record the transaction into NetSuite after the invoice has been approved by the corresponding business partner in the respective system.\nOn the NetSuite home page, click the ‚Äú+‚Äù icon near the global search bar at the top of the screen and select ‚ÄúBill.‚Äù\nSelect the appropriate vendor record.\nIf adding a new vendor, follow the bullets below before proceeding, otherwise skip to step 3\nEnter the company name, email address, applicable subsidiary, physical address, payment terms, primary currency, and Tax ID. (Note that the address field is located under the ‚ÄúAddress‚Äù tab, while the Tax ID, primary currency, and payment terms fields are located under the ‚ÄúFinancial‚Äù tab)\nEnter the banking information in the ‚ÄúComments‚Äù field then click ‚ÄúSave.‚Äù\nGo to the ‚Äú+‚Äù icon at the top of the vendor record and select ‚ÄúBill‚Äù from the dropdown box.\nEnter Bill date. The due date should auto-fill based on payment terms entered during vendor setup. If not, select the correct due date and update the vendor record after the bill has been entered and saved.\nEnter Bill number.\nGo to the ‚ÄúExpense and Items‚Äù tab below to enter the expense details.\nSelect appropriate GL-account under the ‚ÄúAccount‚Äù dropdown box. (Be sure to check whether the invoice represents a prepaid expense, fixed asset, etc.)\nEnter Bill amount.\nSelect tax code, if applicable.\nEnter department. (This must be entered if the account you selected in step 6 is an expense account)\nAdd attachments: Go to the ‚ÄúCommunication‚Äù tab and find the ‚ÄúFiles‚Äù subtab.\nClick ‚ÄúNew File.‚Äù A new window will appear, allowing you to select the file you wish to attach.\nIn the new window, select the ‚ÄúAttachments Received‚Äù folder in the dropdown box, then click ‚ÄúChoose File‚Äù to attach both a copy of the vendor bill and email approval. (The supporting email approval must be attached along with a copy of the invoice)\nClick ‚ÄúSave.‚Äù\nIn Google Drive, file invoice in the ‚ÄúEntered‚Äù folder for that entity.\nPayment Process\nBillable Expenses\nIf you have an expense report that can be billed back to a customer please make sure to check the ‚Äúbillable‚Äù flag in Navan along with tagging the customer name under the ‚Äúcustomer‚Äù field in Navan.\nProcessing payment for invoices in Coupa\nSupplier Payment Accounts (SPAs) are required in order to pay suppliers from Coupa Pay.\nThere are four different ways that suppliers will be able to provide their payment information:\nSmart Onboarding Form\n: Native Coupa capability within the Coupa Supplier Portal that will allow supplier to capture their banking information.\nSIM (Supplier Information Management) Form\n: Whenever GitLab onboards a new supplier, as part of the External Form, there is a section to capture the vendor‚Äôs remit to information, along with their bank account information.\n(This is where the majority of GitLab suppliers will be providing their banking information)\n.\nCoupa Supplier Portal (CSP) Legal Entity Section\n: Mostly used if a supplier is changing their bank account information or needs to make any updates. The vendor is able to manage that directly within their Coupa Supplier Portal profile and either add a new legal entity (which will be associated with a new bank account) or adjust an existing one.\nInvoicing Section\n: If for some reason, a supplier is submitting their first invoice and they have not provided their banking information before they are creating their first invoice, that will create a new supplier payment account in Coupa.\nIf you are a GitLab vendor and you want to know more about how to update your CSP profile, check Coupa‚Äôs\nCreate or Update Your Profiles\ndocumentation.\nAfter the supplier submits their supplier payment account information, it will transfer into Coupa automatically and create a supplier payment account record.\nIf the supplier is going through the SIM process, the approval for that supplier payment account will occur directly on the SIM External Form, and AP won‚Äôt have to go into the supplier payment accounts to provide approval.\nFor more information regarding how to set up SPAs or Coupa Pay, please check out the lower section of our\nCoupa FAQ page\n.\nCreating a Batch in Coupa\nOnly Invoices in the ‚ÄúReady to Pay‚Äù status can be utilized to create a batch.\nInvoices can be removed from payment by Coupa Pay using the slider button under ‚ÄúActions‚Äù\n(in case a supplier is selected for Coupa pay but need to be paid out of NetSuite, switch their payment method to ERP)\n.\nThe ‚ÄúPay from Account‚Äù (Company Payment Account or CPA) will be automatically defaulted based on the Chart Of Accounts. The CPA can be adjusted manually by selecting the dropdown.\nThe ‚ÄúPay to Account‚Äù (Supplier Payment Account or SPA) will be defaulted based on the Remit-To entered on the invoice.\nApproving a Batch in Coupa\nApproval chains are generated before a payment batch can be released.\nSegregation of Duties:\nThe creator of the Batch cannot be the releasor of the same batch regardless of the permissions they have.\nCoupa Integration - troubleshooting for Payments\nA NetSuite error log identifying payment integration issues will be emailed to the Accounts Payable Team every Tuesday and Friday. The email is sent from\nFinance Systems Admins\nand the Subject is\nCoupa2NS Pay Payments Integration Log\n. Download the attached file and filter by Type =\nError\nand\nAudit\n. Review the\nDetails\nfield to find the payment number that needs to be reviewed/corrected. For information regarding common errors and how to correct them, please see this\nfile\n; under the column labeled\nScript\nsearch for\nCoupa Invoice Payment Integration\n. If any troubleshooting assistance is needed, please ask in the\n#coupa_help\nSlack channel.\nThere is also a View in Coupa that will list payments not exported to NetSuite. Under Payments, select View =\nNot Exported\nHowever, there will be no details regarding the integration issue. You will need to review the NetSuite error log (referenced above) for the details.\nHow to access Coupa\nCoupa is available via Okta. To access the platform:\nLogin to your\nOkta home page\n.\nClick on the Coupa (Prod) button.\nA new tab should open with your user logged in.\nPlease note that every month all Coupa access will be reviewed and users who haven‚Äôt been active in a period of 90 days will have their access removed.\n(Note that this number may vary depending on the license count for the current month)\nIf you need to request access again, please reopen your initial Access Request issue and tag the Finance Systems Admins team using\n@gitlab-com/business-technology/enterprise-apps/financeops\nin a comment.\nIf your job function requires you to submit purchase requests in Coupa, follow the below steps:\nOpen an\nAccess Request\nfor Coupa using the\nIndividual_Bulk_Access_Request\ntemplate.\nIn Step 2, in the\nJustification for this access\nquestion, please describe:\nWhat you need to buy.\nWhat is the total cost of the purchase.\nHow often you will need to purchase it.\nWhen does it need to be submitted in Coupa.\nAdd the labels ~‚ÄúFinSys - Coupa‚Äù and ~‚ÄúFinSys::Service Desk‚Äù.\nBest Practices\nDue to the limited number of licenses available for Coupa, it is recommended that each department identify power users responsible for creating purchase requests on the team's behalf.\nExpenses\nPlease refer to GitLab‚Äôs\nExpense Policy\nfor further details.\nTeam Member Reimbursements - Navan\nProcessing Navan Reports\nNavan will auto sync and record expense reports into NetSuite once the report is ‚Äúfinal approved‚Äù.  ‚ÄúFinal approved‚Äù means it has been approved by the team member‚Äôs manager and completed an audit review by an Accounts Payable analyst or our external contractor, Montgomery Pacific (Montpac).\nAccounts payable will do a daily check to ensure all reports which are ‚Äúfinal approved‚Äù are successfully synced.  If any errors arise, AP will work out the errors until the report syncs into NetSuite.\nBillable Expenses\nIf you have an expense report that can be billed back to a customer please make sure to check the ‚Äúbillable‚Äù flag in Navan along with tagging the customer name under the ‚Äúcustomer‚Äù field in Navan.\nPaying Navan Reports\nTeam members in a US expense policy will be automatically reimbursed through Navan after their report is ‚Äúfinal approved‚Äù within 1-4 business days.\nThe team member must set up their bank account in Navan.\nOnce an team member is reimbursed, Navan will auto sync the payment to the expense record to mark the report as reimbursed.\nThis will feed into NetSuite to show the bill as fully paid as well.\nTeam memebers in a country paid through PEO will also receive expense reimbursement through their same payroll PEO payments each month.\nPlease Note:\nThe timing of reimbursement can vary if you are being reimbursed directly from payroll, CXC, SafeGuard, Global PEO, Remote and/or iiPay.\nMore information on the timing of payouts can be found\nhere\nAll non-US GitLab entities will be reimbursed through their respective payroll provider or paid directly through GitLab‚Äôs Accounts Payable (AP) department with the normal weekly payment run.\nExpense report must have been ‚Äúfinal approved‚Äù no later than EOD Tuesday of that same week.\nAny report ‚Äúfinal approved‚Äù on Wednesday to Friday of that week will be reimbursed the following week.\nOnce an employee is reimbursed, AP will create the payment in NetSuite against the record to close the report as paid.\nAP will manually mark the expense reports as ‚ÄúReimbursed‚Äù in Navan once they are confirmed to the payroll provider or batched to Tipalti.\nPaying Navan Reports in Tipalti\nEntites included: GmbH, BV, PTY LTD, Ireland, IT BV and GK.\nAP will send the team member an auto generated email from Tipalti with instructions on how to onboard.\nOnly after a team member onboards themselves in Tipalti will payments be issued. Payee profile will show as ‚ÄúPayable‚Äù.\nAny team memebers hired after 2019-11-01 will be sent onboarding requests upon hire and/or upon first submission of an expense report.\nFurther details on the Expense reimbursement process can be found\nhere\nAccounts Payable Analyst Performance Indicators - Expenses\nAverage days to action <= 3 business days\nNumber of days from when an team member‚Äôs manager approves report to when AP analyst does final approval for payment or responds to team member in Navan if there is a concern. (Approval for payment is not the reimbursement date.) This is calculated on a calendar month basis. The target for this is currently three business days.\nTime to get a new team member set up in Navan < 3 business days\nHave new team member set up in Navan within 3 business days from team member start date.\nTravel and Expense Guidelines\nSpend reduction\nWhen reducing spend, we will not take the easy route of (temporarily) reducing discretionary spending.\nDiscretionary spending includes expenses like travel, conferences, gifts, bonuses, merit pay increases and summits.\nBy reducing in these areas we put ourselves at risk of\nincreasing voluntary turnover among the people we need most\n.\nDiscretionary spending is always subject to questioning, we are frugal and all spending needs to contribute to our goals.\nBut, we should not make cuts in reaction to the need to reduce spend; that would create a mediocre company with mediocre team members.\nInstead, we should do the hard work of identifying positions and costs that are not contributing to our goals.\nEven if this causes a bit more disruption in the short term, it will help us ensure we stay a great place to work for the people who are here.\nNon-Reimbursable Expenses\nIn order to purchase goods and services on behalf of the company, you should first\nconsult the Signature Authorization Matrix\nto determine the approval requirements. Note that this\ndoes not\ninclude travel expenses and other incidentals. These expenses should be self-funded then submitted for reimbursement within Navan, or in the case of independent contractors, included in invoices to the company (per the guidelines above).\nIf further approval is not required, then proceed to the Procurement\n‚ÄúWhat are you buying‚Äù page\nfor further instructions on the purchasing process at GitLab. Once those procedures are complete, have your vendor send their invoice to Accounts Payable:\nap@gitlab.com\n.  Most importantly, the team member making the purchase request is ultimately responsible for final review and approval of the invoices. Final review and approval are critical process controls that help ensure we do not make erroneous payments to vendors. All original invoices and payment receipts must be sent to Accounts Payable.\nCreation of Expense Tags\nIf you would like to track spend for a particular campaign, project and/or event you can do that through expense tag, also known as classes in NetSuite.  If you would like to request an expense tag/class to be set up please open\nthis tracker\nand enter the information required for the General Ledger (GL) team to create the tag.\nThe GL team will create the tags at the end of each day.\nThe tag is created in Netsuite and syncs with Navan and Coupa.\nRequisitions can be saved for later, while you complete the tag creation process.\nCreate Classes In NetSuite:\nIn NetSuite go to Setup-Company-Classes-New\nAdd the name of the expense tag under Name\nUnder subsidiaries highlight GitLab Inc and check the box that states ‚ÄúInclude in Children‚Äù\nSave\nNavan will auto-sync any new ‚Äúexpense tags‚Äù on a daily basis, but if the Navan admin wants to manually sync they can do so by following these steps:\nImport new Classes/Tags In Navan:\nGo to the Admin page and click on the\nPolicies\ntab.\nSelect a policy and find the\nConnections\nClick the\nSync Now\nbutton for the NetSuite connector. The page will run a prompt showing sync status.\nOnce the syncing process is complete, go to the\nTags\nsubtab.\nSearch for the tag by name under classifications (i.e. the NetSuite profiles created in prior steps)\nCorporate Credit Cards\nPlease review this\npage\nfor the current policy/procedures.\nContribute Costs and other key expenses\nMarketing Campaign Expenses\nPlease see the\ncampaign expense guidelines in the Marketing handbook\n.\nGitLab Contribute Cost Tracking\n(Previously GitLab Summit)\nTracking expenses for company Contributes enables us to analyze our spend and find opportunities to iterate, and in turn, improve subsequent Contributes. To enable tracking we create an expense tag that will allow GitLab team-members to tag Contribute related expenses in Navan. This should be done prior to the announcement of each Contribute.\nTo categorize an expense under an expense tag to track a specific marketing campaign, contribute expense and/or any special project you will do this under the ‚Äúclassifications‚Äù tag in Navan.\nProperty, Plant and Equipment\nProperty, plant and equipment is the long-term asset or noncurrent asset section of the balance sheet. Following are the sub-processes:\nAcquisition and Capitalization\nCapital Assets Policy\nPurpose\nThis policy establishes the minimum cost (capitalization amount) used to determine the capital assets recorded in GitLab‚Äôs financial statements.\nCapital Assets Defined\nA ‚ÄúCapital Asset‚Äù is a unit of property that has an economic useful life extending beyond 12 months\nand\nwas acquired (or in some cases, produced) for a cost of\nor more. Capital Assets must be capitalized and depreciated for financial reporting purposes.\nCapitalization Thresholds\nGitLab establishes\nas the minimum amount required for capitalization. Any item with a cost below this amount is expensed on the date of purchase. Exceptions are Key Component Assets (i.e. computer laptops).\nBulk purchases (‚Äúlike‚Äù items acquired with a single purchase order, which are received within a reasonable period of time of one another (less than 60 days) and that individually have an Acquisition Cost less than the Individual Purchases Capitalization Threshold) have a Capitalization Threshold of $50,000 (USD)\nDepreciation/Amortization\nMethodology\nAll capital assets are recorded at historical cost as of the acquisition date. These assets are depreciated on a straight-line basis, with the number of depreciation periods being determined by asset class.\nComputer and I/T Equipment:\nFor our purposes, Computer and I/T Equipment generally consists of computers (laptops) and are assigned a standard useful life of two (2) years. This depreciation schedule applies to all entities.\nOffice Equipment and Furniture & Fixtures:\nThe standard useful life for Office Equipment and Furniture & Fixtures is five (5) years. This depreciation schedule applies to all entities.\nInvoices and purchase receipts for capital assets are retained for a minimum of five (5) years.\nFixed Asset Register and Asset Tracking\nItems paid for by the company are property of the company. Assets with purchasing value in excess of\nor Key Component Assets are recorded and tracked through NetSuite Fixed Asset Management (FAM) module, which includes details of individual asset purchased. The Asset Register report provided by NetSuite FAM provides each individual asset purchased with the following information:\nPeriod and Date of purchase\nAsset Cost\nAsset Category\nAsset Description\nUseful life\nSerial number, if available\nGL Coding\nOnce the information is captured in NetSuite FAM a depreciation schedule will populate and NetSuite FAM will post a journal entry each month to record the depreciation of the asset until it is fully depreciated. The asset will remain on GitLab‚Äôs balance sheet until the asset is no longer being used and is identified to be disposed.\nDisposition of an Asset\nAssets will be disposed of if purchased by an employee upon termination (if approved by IT Ops) or if the item is no longer useful before the useful life.\nIf a team member would like to purchase an asset from the company (i.e. a laptop), they would request through an issue to IT Ops and Accounting to obtain the amount to be paid. This is derived from original cost less accumulated depreciation.  If an asset is purchased, Accounting will collect the funds and will book the appropriate accounting treatment to dispose of the asset.\nIf an asset is no longer usable before the useful life has been reached the employee needs to submit an issue to IT Ops and Accounting to inform them.  IT Ops will evaluate and if they deem the item is no longer useful, Accounting will book the appropriate accounting treatment to dispose of the asset.\nIT Ops will need to identify the asset and inform Accounting to properly dispose of the asset from NetSuite FAM.\nAccounting Policies\nRecord to report process is governed by the following accounting policies:\nGITLAB INC. RELATED PARTY TRANSACTIONS POLICY\nRefer to Legal page for\nRelated Party Transactions policy\nAccounting Team PTO Guidelines\nOur ability to accomplish our Finance and Accounting mission of providing timely, fact-based information to drive business results as a public company depends on the participation of team members during certain critical times of year. Our accounting function provides critical, time based deliverables that directly impact our ability to support business growth and meet our public company obligations. These activities require the entire team‚Äôs support.\nTeam Members should prioritize taking time off to refresh and recharge outside of these critical windows. While these exact windows vary by team, generally we need all team members to support the last week of the quarter and first two weeks of the next quarter. Check with your manager if you are unsure what is applicable to your role. When these windows overlap a weekend (particularly the last day of the quarter) or public holiday/ Family and Friends day, we recommend team members work with their manager to reschedule the day off to a day outside of this critical end of quarter time period. If a team member is unavailable to work during this time period, they should provide their manager with at least one months‚Äô notice whenever possible to allow for coverage to be arranged. When appropriate, we will create rotational coverage plans over holidays/weekends, while remaining in line with applicable jurisdictional requirements.\nInvestment Policy\nPurpose\nThe purpose of this policy is to establish the responsibility, authority and guidelines for the investment of operating surplus cash.  Surplus cash is defined as those funds exceeding the operating requirements of the Company and not immediately required for working capital or near term financial obligations.\nScope\nThis policy shall apply to the Company and all subsidiaries.  This investment policy will be reviewed periodically to ensure that it remains consistent with the overall objectives of the Company and with current financial trends.\nApproved Brokerage Institutions\nThe Company may use the following brokerage institutions:\nMorgan Stanley Smith Barney LLC\nComerica Securities, Inc.\nInvestment Objectives\nThe basic objectives of the Company‚Äôs investment program are, in order of priority:\nSafety and preservation of principal by investing in a high quality, diversified portfolio of securities, mutual funds, and bank deposits.\nLiquidity of investments that is sufficient to meet the Company‚Äôs projected cash flow requirements and strategic needs.\nMaximize after-tax market rates of return on invested funds that are consistent with the stated objectives herein, conservative risk tolerance and the Company‚Äôs current tax position.\nMaturity Limits\nIndividual security maturities should not exceed 24 months.  The weighted average maturity of the portfolio shall not exceed 12 months.  A maturity or effective maturity by definition shall include puts, announced calls or other structural features which will allow the Company to redeem the investments at a quantifiable price consistent with liquidity, safety and preservation of capital.\nEligible Investments\nUnited States Government Securities:\nMarketable debt securities which are direct obligations of the U.S.A., issued by or guaranteed as to principal and interest by the U.S. Government and supported by the full faith and credit of the United States.\nUnited States Government Agency Securities:\nDebt securities issued by the Government Sponsored Enterprises, Federal Agencies and certain international institutions which are not direct obligations of the United States, but involve Government sponsorship and are fully guaranteed by government agencies or enterprises, including but not limited to:\nFederal Farm Credit Bank (FFCB)\nFederal Home Loan Bank (FHLB)\nFederal Home Loan Mortgage Corporation (FHLMC)\nFederal National Mortgage Association (FNMA)\nMoney Market funds\nMoney Market Funds must be rated AAA or equivalent by at least one NRSROs.\nAt time of purchase investment restrictions:\nInvestment Products (Rating, Sector Concentration, Issuer Concentration)\nUS Government (AA+, No Sector Concentration, No Issue Concentration)\nAgency (AA+, 50% Sector Concentration, 10% Issuer Concentration)\nMoney Market Funds - US Government/Treasury (AAA, No Sector Concentration, 50% Issuer Concentration)\nPrepaid Expense Policy\nPurpose\nThis policy describes the methodology used to monitor and account for GitLab‚Äôs prepaid expenses.\nEffective 2022-04-01 a new Accounting Prepaid Automation Process has been implemented. Please click\nhere\nto learn more about the process, which utilizes Coupa.\nPrepaid Expenses Defined\nPrepaid Expense\narises when a cash disbursement is made for goods and services prior to realizing the associated benefits of the underlying goods and services. These transactions are recorded as assets until the goods and services are realized, at which point an expense is recorded. Our minimum threshold for recording prepaid expenses is\nIdentification and Recording of Prepaid Expenses\nOnce a purchase request makes it through the\ncompany approval workflow\n, Accounting will take the following steps to ensure prepaid expenses are recorded accurately:\nThe amount involved is\nequal to or exceeds $5,000\n. Prepaid expenses below $5,000 must be recorded as period expense immediately as incurred.\nThe prepayment is for a time period\ngreater than 12 months\n; (period of time is excluded for the Deposit of an event)\nif an amount is equal or greater than $50,000 on a single item in one invoice, it can be capitalized if the prepayment time period spans across fiscal quarters\n.\nAny\ndeposits\nmade for events in Marketing, Corporate or other departments of less than $5,000 USD will be recognized as an expense immediately on the day the invoice is received regardless of whether the event has taken place or not.\nThe $5,000 clip level normally applies per invoice or per item. However, situations may exist that would require exercising business judgement on a case by case basis (i.e. any clip level by total amount of purchase per vendor). Also, there are situations when each individual prepaid may not meet the clip level but as a whole, these prepayments are similar in nature and are purchased in a bulk and therefore, the total amount of all the prepaid should be combined and used to decide if the prepayment should be recorded. Any exceptions should be pre-approved by the Corporate Controller or PAO.\nAmortization is recorded straight line based on a mid-month amortization method as follows:\nIf the first month of service begins on the 1st to the 15th of the month, a full month amortization will be recorded in the current month.  If the first month of service begins on the 16th to the last day of the month, amortization will begin on the 1st day of the subsequent month.\nMid-Month Amortization Method does not apply to prepaid expenses with a monthly amortization equal to or greater than 50,000 USD or if the amortization if spread only over 1 period.  If monthly amortization is equal to or more than 50,000 USD, the first month amortization will be calculated based on actual number of days where services were rendered.\nPrepaid Not Paid:  For any prepaid expenses not processed for payment, an adjustment for ‚Äúprepaid not paid‚Äù is posted to the respective prepaid expense account and AP manual adjustment account (GL Account 2001).  A prepaid expense is not treated as an asset if a liability remains in the AP sub-ledger.  Prepaid not paid adjustments are performed on a quarterly basis at minimum.\nAny deposits paid which will be held for more than 12 months such as security deposits or deposits to retain consultants will be booked to Security & Other Deposits (GL Account 1620)\nPrepaid Bonuses with a Clawback will be recorded to Prepaid Bonus w/Clawback (GL Account 1152) and will be amortized in accordance with the bonus agreement terms, using the mid-month convention.\nFinally, the balance is reviewed one last time when the Senior Accounting Manager performs a review of the financials prior to closing the period.\nContribute related expenses\nTeam member travel expenses are expensed in the period incurred. Costs related to third party vendors such as hotels, facilities, excursions are recorded to prepaid expenses and recognized as expense at the time of the event.\nAccrued Liabilities Policy\nPurpose\nTo provide clear guidance concerning the identification and recording of items included in GitLab‚Äôs accrued and other liability accounts. The purpose of monthly accrual processes is to allocate expenses to the proper accounting period and match expenses with related revenues. At the close of each month, accrual processes ensure that all expenses related to that month are correctly included in the company‚Äôs financial statements. Additionally, this policy establishes standards and guidelines for ensuring that GitLab accounts for monthly accruals in a manner that is compliant with management‚Äôs objectives and generally accepted accounting principles (GAAP). This policy applies to GitLab and all subsidiaries.\nIdentification\nWe require that all expenses be recorded where expense exceeds $5K USD or above, in the period the expense was incurred. The accrual process should be completed on a monthly/quarterly basis to ensure liabilities are recorded accurately in their respective periods and/or quarters. In order to meet industry standards for Month-End close deadlines the Finance and Operations teams are responsible to provide on Working Day -1 (ex. Friday July 30th = WD -1, Monday August 2nd = WD 1) the calculations, information, details and backup needed to support the accruals.\nThe following items should be accrued monthly as necessary (note: this list is not all-inclusive):\nAccounts Payable:\nContracts: Amounts due under contracts, including retainer fees. These items should be recorded as they become billable.\nProfessional Fees: This liability includes legal, tax, and audit consulting and other professional fees.\nLegal Contingencies: Pending or threatened litigation, and actual or probable settlement. Legal contingencies should be determined with the help of GitLab‚Äôs VP of Legal - Commercial, IP & Compliance.\nWages and Compensation:\nTeam Wages: This includes employee wages and independent contractor fees.\nCommissions: Liabilities arising from commission obligations to team members who are eligible for commission compensation.\nBonuses: Liabilities related to bonus payments for GitLab team-members.\nTaxes: All employment taxes required for statutory compliance that relate to the GitLab team.\nAny other material obligation not mentioned above that is a liability of GitLab\nTiming\nObligations that accrue over time are recorded throughout the accounting period in a methodical and rational manner. Obligations that accrue when an event occurs should be recorded at the time of the event.\nFactors that are considered in determining the time of recording accrued liabilities include:\nRisks of ownership passed to GitLab through receipt of goods or services.\nThe expense must have been incurred during the month being closed; that is, the product or service must have been received on or before the last day of the month in order to qualify as an expense.\nEven though an expense may have been initially budgeted in the month, it is not eligible for accrual unless the company received the product or service.\nAccruals are reversed in the next month and re-accrued the following month, as needed.\nIf payment is due prior to receiving goods or services, the amount should be accrued to prepaid expenses.\nProcedural\nThe Finance team is responsible for having procedures in place to reconcile accounts monthly and for keeping documentation to support accrued liabilities. Payables and accrued liabilities are recorded at face value, plus or minus any applicable adjustments. In most cases, the payable amount can be determined from the vendor bill. If not, then the amount should be verified against any relevant documents before recording the liability. When actual values are not available, the recorded value should be based on best available estimates. Estimates should be based on current market price and experience/history.\nLegal Professional Fees:  Monthly templates are e-mailed by the 1st to all legal firms requesting them to complete with all outstanding bills and unbilled services as of that month end (ex. e-mails are sent by April 1st requesting services as of March 31st).  The responses from all legal firms are complied and reviewed with the VP of Legal - Commercial, IP & Compliance by the 5th, and accruals are made based on the responses and review.  In addition, any potential legal contingencies are discussed during the monthly meeting with the VP of Legal and an accrual is recorded if the loss is deemed probable and the amount can be reasonably estimated.\nTax and Audit Professional Fees:  Similarly e-mails with the template are sent to the tax and audit firms and the tax responses are compiled and reviewed with the Director of Tax and the audit firm responses are reviewed with the Accounting and External Reporting Manager by the 5th and appropriate accruals are made based on the review.\nThe Sr. Accounting Manager is responsible for performing an overall review of accrued liabilities, one to three business days after accounts payable closes each month, to help ensure that all expenses are captured accurately.\nPlease see\nProcure-to-Pay\nForeign Currency Translation Policy\nOverview\nForeign currency translation describes the method used in converting a foreign entity‚Äôs functional currency (as determined and documented in GitLab.com>Finance>Issues>#630) to the reporting entity‚Äôs financial statement currency. Prior to translating the foreign entity‚Äôs financial statements into the reporting entity‚Äôs currency, the foreign entity‚Äôs financials must be prepared in accordance with generally accepted accounting principles (GAAP), specifically under\nFinancial Accounting Standards Board (FASB) Statement No.52\n. GitLab‚Äôs financial statement reporting currency is USD. The functional currency of our non-U.S. subsidiaries is the local currency. Changes in foreign currency translation are recorded in other comprehensive income (loss), which is reported in the consolidated statement of equity and ultimately carried over to the consolidated balance sheet, under equity.\nExchange Rates\nExchange rates used in the currency translation process vary across the three primary financial statement components:\nAssets and Liabilities:\nExchange rate between functional currency and reporting currency at period-end.\nIncome Statement:\nThe average exchange rates during the period presented.\nEquity:\nThe historical exchange rate at the date when entry is made to shareholder‚Äôs equity. Changes in retained earnings are based on historical exchange rates of each period‚Äôs income statement.\nTransaction Risk vs Translation Risk\nCurrency Transaction Risk\nCurrency transaction risk is due to company transactions denominated in foreign currencies. These transactions must be restated into the entity functional currency equivalents before they can be recorded. Gains(losses) are recognized when a payment is made or interim balance sheet dates.\nCurrency Translation Risk\nCurrency translation risk occurs due to the company owning assets and liabilities denominated in a foreign currency.\nCumulative Translation Adjustment\nA cumulative translation adjustment (CTA) is an entry to the comprehensive income section of a translated balance sheet that summarizes the gains(losses) resulting from exchange rate differences over time. Currency values shift constantly, affecting how a currency is valued against others. The CTA is a line item in the consolidated balance sheet that captures gains(losses) associated with international business activity and exposure to foreign markets. The changes in CTA are recorded in other comprehensive income (loss). CTA‚Äôs are required under GAAP since they help distinguish between actual operating gains(losses) and those that arise from the currency translation process. Additional information on our reporting standards surrounding CTA‚Äôs can be found in\nFASB Topic 830, ‚ÄúForeign Currency Matters.‚Äù\nRecording CTA - Exchange rate gains and losses for individual transactions are captured automatically by our ERP system, NetSuite. However, a CTA entry must be made in order to properly distinguish currency translation gains(losses) from other general gains(losses) in the consolidated financial statements. This entry includes reconciliation of any inter-company activity that generates foreign exchange gains(losses). The CTA is made on a monthly basis as part of our financial statement reporting cycle.\nChart of Accounts Policy\nScope\nThis policy establishes GitLab‚Äôs guidelines regarding the structure, responsibilities and requirements underlying the\nchart of accounts (COA).\nPurpose\nThis policy establishes formal responsibilities and accountabilities for how GitLab handles requests for new, modified or closed data elements on the COA. The Controller is responsible for all aspects of financial accounting and reporting, and governs the COA.  All requests for new or modified (including closure/deactivation) COA segments, hierarchies, and configuration attributes are subject to approval by the Finance team.\nChanges to the COA\nAll requests for new or modified accounts must be submitted to the Accounting Manager for review and approval through a request using the Finance issue tracker.\nThere are other stakeholders associated with the COA that may influence certain business decisions or financial system configurations. The Controller and Accounting Manager will include selected stakeholders in the related procedures and processes when and if appropriate. Potential stakeholders include, but may not be limited to:\nFinancial Planning and Analysis\nData & Analytics\nOther departments who have shared functionalities within the financial system\nThe general ledger attributes subject to this policy will be defined by the Controller based upon factors including but not limited to:\nCreating and maintaining consistency for the structure of accounts\nStandard accounting policies and practices\nRegulatory compliance requirements and reporting needs\nFinancial and operational reporting needs and requirements\nExternal accounting and financial reporting requirements\nOnce an amendment to the COA has been approved, the Accounting Manager will ensure the necessary changes are implemented by updating and then closing the issue.\nAdministration\nThe COA is maintained in NetSuite. Changes to the COA can only be made by the Controller and/or Accounting Manager.\nAccount Reconciliation Policy\nScope\nThis policy applies to GitLab Inc. (‚ÄúGitLab‚Äù or the ‚ÄúCompany‚Äù) and all of its subsidiaries.\nPurpose\nTo establish guidelines for assessing, preparing and reviewing balance sheet account reconciliations on a consistent basis in accordance with corporate policies and US Generally Accepted Accounting Principles (‚ÄúGAAP‚Äù).\nPolicy\nAccount reconciliations are prepared and reviewed monthly or quarterly for each active balance sheet account at the natural account level based upon the risk rating assessed (see risk rating assessment below).  Account reconciliations will be prepared consolidated in USD or by entity in the respective functional currency.\nEach month end close the Accounting Manager assigns each balance sheet account or groups of accounts to its respective preparer and reviewer using FloQast (Account Reconciliation Tool).  The assignments are set once and will roll over into the next accounting period.  The Accounting Manager will make changes to assignments as needed.  The preparer and reviewers can not be the same person to ensure segregation of duties.\nThe balances from NetSuite will be auto synced into FloQast each period end so the preparers can prepare their recons based on the NetSuite ending balance for their respective assigned accounts.\nThe preparer(s) will ensure the following:\nReview all activities ensure activity is recorded properly.\nIdentify any reconciling items.\nUpload any supporting documentation and/or add schedules as needed.\nSign-off the recon in FloQast.\nThe reviewer(s) will ensure the following:\nEnsures account reconciliations are prepared in compliance with this policy.\nEnsures the account reconciliations are complete, accurate and appropriate.\nSign-off the account reconciliation in FloQast which will update the status of the recon to the reviewed/approved status.\nFloQast will auto sign-off the recon on our behalf if the following is met:\nBalance is zero\nIf the balance changes after review, approval or auto sign-off the recon will be automatically unreconciled by FloQast and the preparer and reviewers will need to follow the above steps again.\nRisk Rating Assessment\nOnce a year in the beginning of Q4, the Controller and/or CFO will review each active balance sheet account and rate it from High, Medium and Low.  The risk level of each account is evaluated based both on the quantitative value (to determine materiality) and the qualitative factors listed below:\nLevel of judgement required:  risk increases as level of judgement required increases\nroutine/non-routine transactions: risk increases as amount of non-routine/non-standard processes required to record the activity increases\nHistory of issues: risk increases as the number of audit-related adjustments, questions, restatements increases.\nComplexity: risk increases due to business/system changes, new pronouncements, and new complex calculations that impact the balance sheet.\nHigh Risk Accounts will be reconciled by the preparer monthly (for the exception of tax and equity related accounts which will be reconciled quarterly) and will require 1st level review by an accounting manager or above and 2nd level review by the CFO or PAO.\nMedium Risk Accounts will be reconciled by the preparer monthly and will require 1st level review by an accounting manager or above.\nLow Risk Accounts will be reconciled by the preparer monthly or quarterly and will require 1st level review by an accounting manager or above.\nIf there is no activity and/or the account balance is zero the reconciliation will be auto certified by BlackLine.\nOnce each reconciliation is reviewed/approved the account reconciliation is locked in BlackLine and no further changes can be made for that period.\nCompleteness Check\nOnce the period is officially closed the Senior Accounting Manager will ensure all recons are in approved, reviewed or in a auto-certified status before moving into the next period.\nFinancial Operations\nLast modified February 7, 2025:\nReplace ref links with regular links (\n9fe84978\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 10024}
{"doc_id": "5ef2d952b10ebad3", "url": "https://about.gitlab.com", "title": "The most-comprehensive AI-powered DevSecOps platform", "text": "Build software, not toolchains.\nWith native AI at every step.\nGet started\nGitLab Duo named a Leader in the Gartner√Ç¬Æ Magic Quadrant√¢¬Ñ¬¢ for AI Code Assistants.\nRead the report\nTrusted by\nShip secure software, faster.\nJoin the 50+ million people already using GitLab.\nGet started\nContact sales\nGitLab Duo\nGitLab Premium & Ultimate, with native AI\nAI Chat in the IDE\nNew\nAccelerate development with contextual, conversational AI.\nAI Code Suggestions in the IDE\nNew\nHelps developers write secure code more efficiently.\nSee what's new\nPlatform\nLess time managing tools. More time delivering features.\nStreamline your software delivery process with an intelligent DevSecOps platform.\nExplore our Platform\nSecurity\nSecurity built in, not bolted on\nAutomated scans integrate seamlessly with your pipelines.\nLearn more about Security and Compliance\nDevSecOps\nUnified DevSecOps workflows\nAutomate and track your CI/CD pipelines from code commit to production in one platform.\nExplore CI/CD and Automation\nOne platform for teams of every size\n4 hours\nsaved per engineer per week\n82%\ndecrease in cycle time\n50%\nfaster vulnerability detection\n13x\nfaster security scanning\n20x\ndecrease in pipeline execution time with GitLab\n100\nfewer hours of developer downtime per month\n6x\nfaster time to market\n17%\nboost in developer happiness scores\n97%\nreduction in time to fix bugs\n80x\nfaster CI pipeline builds\n30%\nof vulnerabilities found earlier in SDLC\n4 hours\nsaved per engineer per week\n82%\ndecrease in cycle time\n50%\nfaster vulnerability detection\n13x\nfaster security scanning\n20x\ndecrease in pipeline execution time with GitLab\n100\nfewer hours of developer downtime per month\nReduce debugging time and ship faster\nSee how GitLab Ultimate transformed organizations in the 2024 commissioned Forrester Consulting Total Economic Impact√¢¬Ñ¬¢ study.\nRead the report\n50%+ of the Fortune 100 trust GitLab\nStart shipping better software faster\nSee what your team can do with the intelligent\nDevSecOps platform.\nGet free trial\nTalk to sales", "num_words": 312}
{"doc_id": "12c4a7409e2b4a2b", "url": "https://handbook.gitlab.com/handbook/security/customer-support-operations/frequently-asked-questions", "title": "FAQs | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCustomer Support Operations\nFAQs\nSome frequently asked questions\nHow can I quickly check the status of the various Customer Support Operations components?\nYou can use our\nstatus page\nto check on the status our component.\nIf we receive any problem in using Zendesk, can we contact Zendesk directly?\nPlease contact Customer Support Operations team first. Discuss the problem by asking a question in channel and tagging @support-ops. It is a high probability that we can help you resolve the problem at hand. In cases where we cannot and we do need to contact Zendesk support directly, it is best to have Customer Support Operations handle that.\nWhat will happen if Zendesk is down globally?\nZendesk will only go down when the internet is globally affected because they use Pods for services. This ensures that if a region is facing downtime, Zendesk can quickly mitigate that while making sure services run smoothly. However, if you are still facing any problem accessing Zendesk, please contact the Customer Support Operations team. In the case that Zendesk is down globally, we have email support option available.\nIs there any disaster recovery plan available?\nZendesk keeps the data in backup servers with all due diligence. This ensures that we can recover data when it is needed. These backups are utilized to restore Zendesk in the case it fails due to a problem on Zendesk‚Äôs end.\nAlso, the Customer Support Operations team ensures all triggers, automations, views, macros, forms, fields, conditions, etc are documented to save the hassle of writing up everything from scratch.\nWhat if I want access to something owned by Customer Support Readiness?\nFollowing with Security‚Äôs\nAccess Management Standards\n, we follow the\nprinciple of least privilege\n. As such, we review each request on a case by case basis.\nTo begin the process, file an\nIndividual Bulk Access Request\nissue. Once approved by your manager, assign it to\n@jcolyer\nand\n@dtragjasi\n, who will review the situation and determine how to best proceed.\nWhen using Zendesk, the aspect ratio is off\n(Such as only showing one tab before using group, odd blank spaces appearing, etc.)\nWhile the exact cause has not yet been determined, the spacing and grouping used in Zendesk is dependent on the aspect ratio and screen size of your monitor. When issues surrounding it have occurred, we have found Zooming in and back out (or zooming out and back in) often fixes the problem. We have also found doing a hard refresh (Ctrl+Shift+R / Cmd+Shift+R) can rectify the problem.\nFailing all of that working, the suggested fix would be to log out, clear your cache, clear your cookies, and log back in.\nLast modified June 19, 2025:\nAdding info about odd aspect ratio issues (\nc40794dc\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 470}
{"doc_id": "df5d0fbf1cb81b2d", "url": "https://handbook.gitlab.com/handbook/security/security-assurance/security-risk", "title": "Security Risk Team | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nSecurity Assurance\nSecurity Risk Team\nSecurity Risk Team Charter\nMission Statement\nTo drive security risk treatment at GitLab by empowering teams to make informed and intelligent\ndecisions\nthrough proactive identification, monitoring, prioritization, and reporting of security risks.\nValue Proposition\nWe perform thorough, collaborative, and efficient risk assessments as well as drive risk reduction so that GitLab can achieve it‚Äôs goals while maintaining a high level of security.\nCore Competencies\nSecurity Operational Risk Management (StORM) Program\nThe Security Risk team manages an integrated\nOperational Risk Management\nprogram focused on the identification, assessment, continuous monitoring, and reporting of Security Risks across the organization. Risk Reduction is 1 of 5 of the Security Department‚Äôs operating principles (\nSecurity Vision and Mission\n). As such, the Security Risk Team takes a leading role in providing the information required by leadership to establish our Strategic Roadmap and our support GitLab‚Äôs\nkey initiatives\n(internal only). Visit the\nStORM Program & Procedures\nhandbook page for additional details including templates and how we integrate with other risk programs at GitLab.\nNeed to communicate a potential risk to the team?\nPlease refer to the\ncommunication section of the StORM Program & Procedures\npage for information on the various ways that team members can use to escalate potential risks to the Security Risk Team.\nSecurity Third Party Risk Management (TPRM) Program\nGitLab maintains an industry-leading\nThird Party Risk Management (TPRM) Program\nthrough the use of automation, continuous monitoring, and deep integration across business functions to validate the security of GitLab data shared with external parties. The integration of GitLab‚Äôs TPRM program within the vendor Procurement flow enables cross-functional\ncollaboration\nbetween Privacy, Legal, IT, and People Operations to facilitate\ntransparent\n, risk-based decision making, Business and Stakeholder-focused\nResults\n, and adherence to GitLab‚Äôs Regulatory and\nCompliance Obligations\n. The vendor relationships maintained through this program are leveraged to create efficiencies across the organization.\nBusiness Impact Analysis (BIA) and Critical System Tiering (CST)\nThe\nBusiness Impact Analysis\n(BIA) helps determine the systems critical to serving GitLab‚Äôs Customers. The output of the BIA is the designation of a\nCritical System Tier\n(CST) for a new system by the Security Risk Team.\nAsset Inventory Maintenance\nEstablishing a complete and accurate inventory of assets is key to the success of GitLab‚Äôs Risk Program. As such, the Security Risk Team collaborates closely with IT and Business Owners to ensure new systems are added to the\nTech Stack\n.\nOperating Model\nCore Processes\nFunction\nAnnual Risk Assessment\nKyle Smith\nBusiness Impact Analysis\nNirmal Devarajan\nNew System Additions to Tech Stack and Post-Implementation Checks\nNirmal Devarajan\nCritical System Tiering\nKyle Smith\nOngoing SecRisk-Related Observations Management\nNirmal Devarajan\nOngoing Risk Treatment\nKyle Smith\nOngoing TPRM Assessments\nRyan Lawson\nPeriodic SOX CUEC Facilitation\nEric Geving\nPeriodic TPRM Assessments\nEric Geving\nTPRM Data Quality and Emerging Requirements Management\nEric Geving\nStORM Metrics and Reporting\nKyle Smith\nTPRM Metrics and Reporting\nRyan Lawson\nTPRM Application Integrations\nRyan Lawson\nEngagement Models\nRequest a TPRM Review\nReport Security Operational Risk\nIn GitLab, tag the team across GitLab using\n@gitlab-com/gl-security/security-assurance/security-risk-team\nCommunication Channels\nEmail:\nsecurityrisk@gitlab.com\nSlack:\n#sec-assurance channel\n(includes the broader Security Assurance Team) - Mention\n@security-risk\nGitLab: Tag the team across GitLab using\n@gitlab-com/gl-security/security-assurance/security-risk-team\n- Mention\n@security-risk\nTeam Members\nTeam Member\nRole\nTy Dilbeck\nSenior Manager, Security Risk\nNirmal Devarajan\nSenior Security Risk Engineer\nEric Geving\nSenior Security Risk Engineer\nRyan Lawson\nSenior Security Risk Engineer\nKyle Smith\nStaff Security Risk Engineer\nSuccess Metrics\nKey Metric\nWhy It Matters\nHow it‚Äôs Calculated\nTarget Thresholds\nMeasurement Frequency\nReporting Mechanism\nAdditional Notes\nTop 5 Risk Reduction over Time\nThe Top 5 risks represent the top 5 security risks to GitLab the company. These risks need to be reduced and managed effectively to reduce the likelihood of a significant security incident\nRisk scores are calculated based on impact and likelihood.\nRisks are considered in tolerance with a risk score of 10 or below.\nQuarterly\nTableau Dashboard (internal only)\nn/a\nThird Party Risk Management Capacity\nAn indicator of third party risk, third party risk assessments proactively identify potential vendor security risks as part of onboarding or contracting, enabling business owners to make risk based decisions throughout the vendor lifecycle.\nCount of total number security assessments completed QoQ\nLess than 70 per quarter.\nQuarterly\nTPRM Metrics Sheet (internal only)\nWill be added back into Tableau in FY26Q2\nFY26 Strategic Initiatives\n#\nObjective\nKey Deliverables\nTimeline\n1\nEnhance our Acceptable Use Policy Program\n- Block unnecessary or insecure integrations\n- Define processes for new integrations\n- Restrict privileges to install integrations without security and privacy reviews\nOngoing, FY26-27\n2\nConsolidate Security Division Issues/Recommendations\n- Inventory of all sources of recommendations from the Security Division\n- Centralized view of all issues/recs. across Security Division\n- Standardization across issues/recs. with documentation standards\n- Scalable management of issues/recs. to improve adoption\nIn progress\nTarget Comp.: Q3\n3\nCorporate and Product Disaster Recovery Planning and Governance\n- Collaborate with Business Teams to plan and govern the execution of BC/DR control activities to fulfill external certification requirements\n- Perform RTO/RPO analysis for critical vendor systems, escalate gaps/discrepancies compared to RTO/RPO recommendations, and draft a resolution plan\nIn progress; Target completion: Q2-end\n4\nUpdate Security Assurance KPIs\nDevelop a comprehensive Security Assurance metrics dashboard to monitor, measure, and validate that all security process success criteria are being effectively tracked and achieved\nIn progress; Target completion: Q2\nReview and Updates\nThis charter will be reviewed and updated quarterly to ensure alignment with:\nGitLab Strategy\nSecurity Division Mission and Vision\nSecurity‚Äôs Multi-year Strategy\n(internal only)\nSecurity Assurance Mission and Vision\nSecurity Assurance Multi-year Strategy\n(internal only)\nNext scheduled review: 2025-09-15\nSecurity Operational Risk Management (StORM) Program & Procedures\nNot a GitLab team member but want to provide feedback on our StORM program? We receive feedback ‚Ä¶\nSecurity Third Party Risk Management\nGitLab‚Äôs Integrated Third-Party Risk Management Program GitLab maintains an industry-leading ‚Ä¶\nSOX CUEC Mapping Procedure\nPurpose In accordance with ITGC SR.1 - SOC Report Review, GitLab executes annual CUEC mappings of ‚Ä¶\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1018}
{"doc_id": "f460e274c2ff6825", "url": "https://handbook.gitlab.com/handbook/marketing/marketing-operations/marketing-technology-tiering-system", "title": "Marketing Technology Tiering System | The GitLab Handbook", "text": "The Handbook\nMarketing\nMarketing Operations\nMarketing Technology Tiering System\nThe purpose of the Marketing Technology Tiering System is to support the Marketing organization in identifying and understanding the technology utilized across the department.\nPurpose\nThe purpose of the Marketing Technology Tiering System is to support the Marketing organization in identifying and understanding the technology utilized across the department in order to build a best-in-class, integrated, and efficient marketing tech stack. Additionally, by classifying marketing technology into tiers, GitLab‚Äôs Marketing Operations team will be in a better position to prioritize requests, provide support, and optimize processes.\nScope\nThe Marketing Technology Tiering System is applicable to any software, tool, or technology that is, at least partially, paid for by the Marketing department.\nTiers\nThere are four tiers of technology within the Marketing Technology Tiering System:\nBusiness Critical Technology - Tier 1\nOperational Technology - Tier 2\nManagement Technology - Tier 3\nFunctional Technology - Tier 4\nCriteria Categories\nTools in the marketing tech stack are scored based on the following criteria:\nBusiness criticality\nIntegrations\nRisk\nHigh - 3\nDirectly or indirectly affects revenue generation and/or marketing KPIs, requires constant availability for effective business operation.\nIntegrates with multiple other business critical systems in the marketing tech stack and/or requires custom or complex integrations to a single other system.\nDisruption results in an immediate and significant impact on critical business functions or customer service; and/or legal implications.\nMedium - 2\nAffects efficiency or cost of operation.\nIntegrates with one other business critical system in the marketing tech stack and/or does not require custom or complex integrations.\nDisruption affects operational business functions, negatively impacting efficiency/cost of operation across departments or subteams. Workarounds are available in the short term.\nLow - 1\nAffects GitLab team members on an individual basis.\nDoes not integrate with other business critical system in the marketing tech stack.\nAffects GitLab team members at an individual level (e.g. individual productivity).\nScoring Methodology\nThe combined score of all three criteria categories determines a tool‚Äôs tier:\nScore Range: 8-9 = Business Critical Technology - Tier 1\nScore Range: 5-7 = Operational Technology - Tier 2\nScore Range: 3-4 = Management Technology - Tier 3\nNot scored = Functional Technology - Tier 4\nList of Tools by Tier\nA list of tools in the marketing technology stack can be found\nhere\n.\nRoles and Responsibilities\nEvery tool, regardless of tier, should have at least one\nbusiness owner\nand at least one\ntechnical owner\n. All\nBusiness Critical Technology - Tier 1\ntools will have a technical owner on the Marketing Operations team. Any\nOperational Technology - Tier 2\ntool that scores a 3 in any of the criteria categories will have a technical owner on the Marketing Operations team.\nOperational Technology - Tier 2\ntools that do not score a 3 in any of the criteria categories are responsible for identifying a technical owner within their function.\nA member of the Marketing Operations team will be the technical owner for\nManagement Technology - Tier 3\n. While these tools score lower in the criteria categories, they help support the broader Marketing department.\nFunctional Technology - Tier 4\ntools are owned and managed within a specific function. Marketing Operations does not provide support (neither business nor technical) for these tools.\nThe SSoT for\nbusiness owner\nand\ntechnical owner\nis the\nGitLab Tech Stack\n.\nPlease note that we are currently updating the business and technical owners listed in the GitLab Tech Stack and there may be disparities. If you have questions during this update, please reach out in #mktgops on Slack.\nBusiness and Technical Owner Roles and Responsibilities\nArea\nBusiness Owner Responsibilities\nTechnical Owner Responsibilities\nBusiness Outcomes\nUnderstands and documents the desired business outcomes of using the tool and drives toward these outcomes in collaboration with stakeholders including the technical owner, vendor contacts, internal users, etc.\nBuilds and manages the processes (including integrating the tool with the rest of the tech stack) that drive toward the desired business outcomes, as defined by the business owner.\nUser Management\nOwns user management, which includes provisioning/deprovisioning and user audits.\nRenewals\nInitiates and manages the renewal process, including recommending new features, descoping, replacement, etc.\nApproves any changes in scope of the tool, including consideration of replacement.\nContact with vendor\nPrimary point of contact with vendor including facilitating standing syncs, business reviews, etc.\nPoint of contact to resolve bugs and technical issues.\nTraining and Enablement\nTrains users on general best practices and use cases.\nTrains users on technical processes. Owns documentation and governance.\nMeasurement and Benchmarking\nDetermines how success is measured.\nBuilds reports or enables business owner to create reports within the tool to help show success.\nOptimizations\nStays up to date with product releases. Submits requests for optimizations.\nStays up to date with product releases. Scopes, approves, and project manages optimization requests.\nTier-Specific Expectations\nArea\nBusiness Critical Technology - Tier 1\nOperational Technology - Tier 2\nManagement Technology - Tier 3\nFunctional Technology - Tier 4\nBudget\nRenewal timing\nRenewal discussions should start 6 months before the contract expires.\nRenewal discussions should start 4 months before the contract expires.\nEvaluation, Replacement, and Implementation\nRequire at least 6 months from evaluation to implementation.\nA member of the marketing operations team will be the DRI of the evaluation and implementation process. This person is typically the technical owner of the tool that is being replaced and will be the technical owner of the new tool.\nRequire at least 4 months from evaluation to implementation.\nThe technical owner is the DRI of the evaluation and implementation. If the technical owner is not a member of the marketing operations team, a member of the marketing operations team will be involved in a consultative role, specifically as it relates to the rest of the marketing tech stack.\nNet-new Tier 2 tools and Tier 2 tool replacements require marketing operations approval\n.\nRecommended at least 2 months from evaluation to implementation.\nThe marketing operations team should be informed prior to any changes.\nRecommended at least 2 months from evaluation to implementation.\nSupport\nAll Tier 1 tools will have a technical owner on the marketing operations team who is the internal point person for technical support. The technical owner also works with the vendor to provide support when necessary.\nP0: The Marketing Operations team prioritizes technical support for Tier 1 tools.\nP1: Marketing operations provides technical support and is the technical owner for any Tier 2 tool that receives a 3 on any of the criteria categories.\nTechnical owners for Tier 2 tools that do not receive 3 in any of the criteria categories are typically also the business owner.\nP2: Marketing operations provides limited support to Tier 2 tools that do not receive 3 in any of the criteria categories.\nP3: While Marketing Operations team members are the technical owner, they provide limited technical support for Tier 3 tools, due to the scope and nature of these tools.\nMarketing operations does not provide support for Tier 4 tools.\nLast modified May 30, 2024:\nFix marketing folder markdownlint errors (\n70541d81\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1182}
{"doc_id": "374875291388247d", "url": "https://handbook.gitlab.com/handbook/customer-success/professional-services-engineering/working-with", "title": "Working with Professional Services | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nProfessional Services Team Handbook\nWorking with Professional Services\nDiscover how to work with the GitLab Professional Services Team.\nHow to Contact Professional Services\nAt GitLab, Professional Services (PS) is part of the\nCustomer Success department\n. As such, you can engage with PS by following the guidelines for engaging with any\nSolutions Architect (SA)\n. This process ensures that the Customer Success department as a whole can understand the inbound needs of the account executive and our customers.\nSlack\nPS uses the\n#professional-services\nslack channel to answer generic questions about services and to signal delivery of PS scoping work items like PS Engagement Estimates and SOWs.  The private\n#professional-services-us-pubsec\nslack channel is used for US Public Sector services.  Please request access to\n#professional-services-us-pubsec\nin\n#professional-services\n.\nRequesting training for GitLab team members\nFor team leads\nInternal GitLab team leads can request training sessions delivered by Professional Services for their teams. Here are the steps for making a request.\nCreate a new issue\nin the Education Services namespace using the internal_trainer_request issue template. or internal-team-member-training-request\nComplete the Requestor Tasks in the issue description.\nThe PS Project Coordinator will reach out to plan and schedule the training session(s).\nFor individual team members\nIndividual GitLab team members can request to audit a customer-facing training sessions delivered by Professional Services. Here are the steps for making a request to attend.\nCreate a new issue\nin the Education Services namespace using the internal-team-member-training-request template.\nComplete the Requestor Tasks in the issue description.\nThe PS Project Coordinator will confirm the date(s) with you and provide you with a registration link.\nFor Sales Reps and SAs: How to order Professional Services\nTo order Professional Services, the SAE or ISR\ncreates a child PS Opportunity in SFDC off of a standard license or subscription parent opportunity\nusing the\nCreate Services Opportunity\nbutton.\nThe next steps depend on whether the services needed are standard or custom.\nStandard Services (non-customized)\n: Sold using Professional Services SKUs with pre-defined statement of work (SOW) documents. These offerings do not require custom scoping and are ordered directly from Zuora in SFDC. Checkout our\nfull catalog\nfor a list of standard services currently offered.\nCustom Services\n: Sold if standard services do not meet the needs of the customer, using a custom SOW. Please contact your\nProfessional Services Engagement Manager based on region\n. When creating the PS Opportunity in step 1 above, a\nProfessional Services Epic\nwill automatically be created for you as well as a\nscoping issue\n. Please use the epic and issue to input information and collaborate with your Engagement Manager.\nProcess for Sales Reps and SAs\ngraph LR;\na[\"Standard services?\"]-- Yes ---b[\"Add SKU to quote\"];\na-- No ---c[\"AE/SA auto creates PS epic with Create Services Opportunity button\"];\nc-->d[\"AE/SA works w/PS to finalize SOW\"];\nz[\"Send customer proposal\"];\nd-->z;\nb-->z;\nFor more details on selling professional services, see\nSelling Professional Services\n.\nFor information on how to position Professional Services to your customer, see\nPositioning Professional Services\n.\nLead time for starting a Professional Services Engagement\nOften we are asked ‚Äúwhat is your lead time for getting started with a project‚Äù or a customer may have a specific timeframe in which they want a project delivered.\nAs there may be many projects and proposals in flight at any time, there are a few rules we use when prioritizing and scheduling engagements:\nNo engagement schedule can be committed to until the PS Opportunity is closed/ won and the PS Operations team has scheduled the project. While we can make a good faith effort to try and match a schedule ahead of that time, to be fair to customers who have committed to a services engagement we must prioritize those first.\nPlease, check with the PS Operations Team by tagging the group\n@ps-scheduling\nfor the latest lead time details in the\nprofessional services slack channel\nif you need a more accurate estimate.\nThe PS Operations team does review projects that are SFDC Stage 5.  As we strive to start the projects within days of the SFDC Stage of closed/won.\nCustom services SOW creation and approval\nWhen scoping custom SOWs, the Professional Services Engagement Manager partners with the SA/CSM/SAE to create a custom engagement that will help meet the customer‚Äôs needs, and push the SOW through the appropriate approval process. All Custom SOW‚Äôs will require approval from PS Leadership.\nEstimate creation\nThe account team (SAE/ISR/SA/CSM) can initiate the process by creating a new Professional Services Epic and related child scoping issue by using the\nCreate Services Opportunity\nbutton from a standard parent SFDC Opportunity,\nas noted above\n. On the scoping issue, a SSOT table will appear in the issue to drive the scoping process. The SA/CSM should work with the Customer initially to complete this as well as they can. The Professional Services Engagement Manager will then create an Estimate based upon the inputs provided, and provide a link for review.\nSOW creation\nOnce the Estimate has been reviewed by the account team and Customer, any feedback received, and refinement made, we can then move to generating the SOW. As part of the scoping issue, the Engagement Manager will need to understand whether there is a MSA in place, or standard terms are to be used.\nWe prefer customers to mark up our agreement and SOW document if they request changes. If they require the use of their own services terms or SOW, please contact the PS team.\nSOW Proposal Approval Board\nThe\nSOW Proposal Approval Board\nis used to progress all SOWs through the scoping and approval process before sending them to a customer for review and signature.\nSOW approval workflow labels\nThe labels are (from left to right):\nOpen\n: This issue has been created by the Services Calculator and waiting for the Engagement Manager to confirm\nproposal::Awaiting_Discovery\n: Gathering information from the account team and customer required to scope the engagement\nproposal::Strawman_WIP\n: The Engagement Manager is drafting an initial estimate for review\nproposal::Estimate_Feedback\n: The Estimate is with the account team and/or Customer for review. The Engagement Manager is awaiting feedback and confirmation prior to moving to SOW.\nproposal::SOW_WIP\n: The Engagement Manager is drafting the SOW and preparing a\nCost Estimate\nusing the\nSOW Cost Estimate Calculator\nfor margin calculation purposes. Please note that this Cost Estimate Calculator is built into a larger estimate tool that our Engagement Managers use to create estimates for a wide variety of PS engagements.\nproposal::Ready For Approval\n: The Engagement Manager has prepared the required SOW, and triggered the approval requests. Approvals are now required prior to releasing the SOW.\nproposal::Approved\n: The SOW is now approved, and ready for execution. The SAE/AE should gain a Legal stamp with a Legal Case in SFDC before releasing the SOW for signature.\nScheduling Professional Services\nCurrently, customer projects are scheduled in order as the opportunity is Closed-Won.  Please discuss any concern about scheduling the project during the Discovery phase of the scoping process. As part of the Discovery phase, please update the Project Scheduling Intake issue. The Project Coordinator will use this information to review staffing. If there are lead time or availability questions, please ask the Engagement Manager or Project Coordinator by tagging the group @ps-scheduling in the professional services slack channel (#professional-services).\nPlease do not commit any project start dates prior to the SOW/contracts being signed without confirming with the PS Project Coordinator.\nOnce the opportunity is updated to Close/ Won, here are the next steps:\nThe PS Project Coordinator will review the SOW and Order Form and work to set up the project in Kantata\nThe PS Project Coordinator will reach out the account team for the customer contacts if the information has not been provided in the Project Scheduling Intake issue.\nThe PS Project Coordinator will send a Welcome to PS email within 72 business hours of the opportunity booking to the customer and copy the account team and Professional Services leaders.\nLast modified April 4, 2025:\nPS handbook overhaul mainly inspired to update sales team to use create... (\n2ee8d132\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1353}
{"doc_id": "c0c3d446a6e5de0a", "url": "https://handbook.gitlab.com/handbook/legal/gitlab-related-party-transactions-policy", "title": "GitLab Related Party Transactions Policy | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nGitLab Related Party Transactions Policy\nOverview of the Related Party Transactions Policy at GitLab.\nThis is a Controlled Document\nInline with GitLab‚Äôs regulatory obligations, changes to\ncontrolled documents\nmust be approved or merged by a code owner. All contributions are welcome and encouraged.\nGITLAB INC. RELATED PARTY TRANSACTIONS POLICY\nTHIS POLICY WAS AMENDED AND RESTATED BY THE BOARD ON SEPTEMBER 14, 2021\nAt GitLab Inc. (the ‚Äú\nCompany\n‚Äù), we aim to lead by example. We set high standards for our team members at all levels and strive to meet them consistently. Our sound business principles and practices foster our commitment to ethical behavior, accountability and transparency. We expect our directors, officers and team members to avoid conflicts of interest, that is, any activity that interferes with the performance of their duties or that might deprive us of their undivided loyalty in business dealings. Conflicts of interest can come up in various ways, even in situations where the transaction may benefit the Company and our stockholders. This Related Party Transactions Policy (the ‚Äú\nPolicy\n‚Äù) deals specifically with those situations where the Company (including any of our subsidiaries) is a party to a transaction with a Related Party. Although our Code of Business Conduct and Ethics addresses this issue generally, we have adopted this Policy to formalize our procedures for the identification, review, and consideration and approval of the Audit Committee of our Board of Directors (the ‚Äú\nAudit Committee\n‚Äù) of any transactions involving the Company and a Related Party. This Policy has been approved by our Board of Directors (\"\nBoard\n\").\nPERSONS COVERED BY THIS POLICY\nThis Policy applies to all of our executive officers, any person the Company knows to be the beneficial owner of more than 5% of any class of our voting securities (a ‚Äú\nsignificant stockholder\n‚Äù), and members of our Board.\nOur ‚Äú\nApproval Authority\n‚Äù will be our Audit Committee. In a situation where a member of our Audit Committee is a Related Party in the proposed transaction, our Nominating and Corporate Governance Committee will be the Approval Authority.\nWHO IS A RELATED PARTY?\nYou are a Related Party if you are:\na person who is, or at any time since the begining of our last fiscal year was, a director or executive officer of the Company or a nominee to become a director;\na significant stockholder, or an immediate family member of a director, director nominee, executive officer or significant stockholder. This includes any child stepchild, parent, stepparent, spouse, sibling, in-law (mother, father, son, daughter, brother, sister) of such person, and any person (other than a tenant or employee) sharing the household of such person.\nWHAT TYPES OF TRANSACTIONS ARE COVERED BY THIS POLICY?\nAny transaction, arrangement or relationship (including any indebtedness or guarantee of indebtedness) or any series of similar transactions, arrangements or relationships, in which:\nthe Company (including any of our subsidiaries) was, is or will be a participant;\nthe aggregate amount involved will or may be expected to exceed $120,000 in any fiscal year; and\nany Related Party had, has or will have a direct or indirect material interest.\nAny transaction that meets the above criteria is referred to as a ‚Äú\nRelated Party Transaction\n.‚Äù\nWe have established a process to identify any Related Party to assist us in enforcing this Policy.\nDirectors and Executive Officers\nOur Legal Team will collect, at least annually, the following information from each of our directors and executive officers:\nA list of all entities in which they serve as a director or executive officer, or in which they have 5% or greater beneficial ownership interest.\nA list of all their immediate family members, and for each immediate family member listed:\nwhether they are (a) an executive officer of any entity, or (b) employed by the Company‚Äôs independent auditor (or an affiliate, member firm or other entity associated with our independent auditor), and if so, the name of their employer and job title or a brief job description; and\nall entities in which they serve as a director or in which they are a significant stockholder.\nThis list also will include the name of each charitable or non-profit organization for which each director, executive officer and any immediate family member is a major fundraiser or otherwise serves as a director or trustee or in a similar capacity.\nDirectors and executive officers are expected to notify our Legal Team of any updates to the list of Related Parties, including updates to their employment and relationships with charitable organizations.\nSignificant Stockholders\nWhen the Company learns that a person has become a significant stockholder, our Legal Team will examine relevant filings with the U.S. Securities and Exchange Commission (\"\n\") (to the extent such information is available) to determine (a) if the person is an individual, the same information requested of directors and executive officers under this Policy, and (b) if the person is a firm, corporation or other entity, a list of principals or executive officers of such firm, corporation or entity.\nAdvance Approval\nAny transaction the Company intends to undertake with a Related Party, irrespective of the amounts involved (unless the transaction is subject to standing pre-approval as provided in this policy or pursuant to a resolution adopted by the Approval Authority), must be submitted to the Chief Legal Officer (the ‚Äú\n‚Äù) for their determination of the approvals required under this Policy. The CLO will refer to the Approval Authority any Related Party Transaction, and any other transaction that the CLO otherwise determines should be considered for evaluation by the Approval Authority consistent with the purpose of this Policy. The CLO may do so irrespective of any pre-approval or other technical exemption from this Policy.\nThe Legal Team will provide the Approval Authority with all relevant information available about the proposed transaction, including:\nthe Related Party‚Äôs relationship to the Company and interest in the transaction;\nthe material facts of the proposed transaction, including the anticipated aggregate dollar value of the transaction or, in the case of indebtedness, the largest amount of principal outstanding at any time during the current fiscal year plus all amounts of interest payable on it during the fiscal year;\nthe rationale for the proposed transaction; and\nany other relevant information with respect to the proposed transaction.\nIn deciding whether to approve a proposed transaction, the Approval Authority may take into account any relevant information and considerations, including the impact on a director‚Äôs independence if the Related Party is a director. The Approval Authority may impose such conditions as it deems appropriate on the Company or on the Related Party in connection with approving the proposed transaction.\nThe Approval Authority will convey the decision, including any conditions imposed on the transaction, to our CLO, who then will convey the decision to the appropriate people within the Company.\nReview of Ongoing Transactions\nAt least annually, the Approval Authority will review any previously approved or ratified transactions with Related Parties that remain ongoing and that have a remaining term of more than six months and remaining amounts payable to or receivable from us of more than $120,000 during the fiscal year. Based on all relevant facts and circumstances, the Approval Authority will determine whether it is in the best interests of the Company and its stockholders to continue, modify or terminate the transaction.\nRatification\nMembers of our finance team will produce quarterly reports of any amounts paid or payable to, or received or receivable from, any Related Party. These reports will be provided (a) to our legal department and used to determine whether there are any Related Party Transactions or other transactions with Related Parties that were not previously approved or previously ratified under this Policy and (b) to our CLO for appropriate reporting in our periodic reports.\nIf the CLO learns of a transaction with a Related Party that required but did not receive approval or ratification under this Policy, the CLO will promptly submit the transaction to the Approval Authority. The Approval Authority will undertake the review described above. Based on the conclusions reached, the Approval Authority will evaluate all options, including but not limited to ratification, amendment or termination of the transaction with the Related Party, and determine whether disciplinary action is appropriate.\nA transaction with a Related Party entered into without pre-approval of the Approval Authority will not be deemed to violate this Policy, or be invalid or unenforceable, provided that the transaction is brought to the Approval Authority as promptly as reasonably practical after it is entered into or after it becomes reasonably apparent that the transaction is covered by this Policy.\nStanding Pre-Approval for Certain Related Party Transactions\nUnless there are special or unusual benefits to the Related Party in a proposed transaction, the following categories of Related Party Transactions do not need to be presented to the Approval Authority for review and approval under this Policy:\nEmployment of executive officers\n: Any employment by us of an executive officer if:\nthe compensation arising from such employment is reported in our proxy statement; or\nthe executive officer is not an immediate family member of another Company executive officer or director, the related compensation would have been reported in our proxy statement if the executive officer were a ‚Äúnamed executive officer,‚Äù and the Company‚Äôs Compensation and Leadership Development Committee approved (or recommended that the Board approve) such compensation;\nDirector compensation\n: Any compensation paid to a director (in such capacity) if the compensation is required to be reported in our proxy statement;\nTransactions where all stockholders receive proportional benefits\n: Any transaction in which the Related Party‚Äôs interest arises solely from the ownership of our capital stock and all holders of our capital stock receive the same benefit on a pro rata basis (e.g., dividends);\nCertain transactions with other companies\n: Any transaction with another company where a Related Party‚Äôs only relationship is as an employee (other than an executive officer), director or beneficial owner, together with their immediate family members, of less than 10% of that company‚Äôs outstanding equity or as a limited partner, together with their immediate family members, holding interests of less than 10% in the limited partnership (or similar interests in an alternative form of entity), if the aggregate amount involved does not exceed the greater of $200,000, or 5% of that other company‚Äôs consolidated gross revenues;\nCertain charitable contributions\n: Any charitable contribution, grant or endowment by us to a charitable organization, foundation or university at which a Related Party‚Äôs only relationship is as an employee (other than an executive officer) or a director, if the aggregate amount involved does not exceed the greater of $200,000, or 5% of the consolidated gross revenues of such charitable organization, foundation or university;\nOrdinary course expenses, advances and reimbursements\n: Ordinary course business travel and expenses, advances and reimbursements;\nIndemnification\n: Indemnification payments and other payments made pursuant to\n(a) directors and officers insurance policies, (b) our amended and restated Certificate of Incorporation or Bylaws, and/or (c) any other policy or agreement approved by the Board; and\nOther transactions\n: Any transaction with a Related Party (i) where the rates or charges involved are determined by competitive bids; (ii) involving the rendering of services as a common or contract carrier or public utility, at rates or charges fixed in conformity with law or governmental authority; or (iii) involving services as a bank depositary of funds, transfer agent, registrar, trustee under a trust indenture or similar services.\nCHANGES TO THIS POLICY\nThe Audit Committee may recommend future amendments to this Policy for consideration by our Board. Our Board reserves the right in its sole discretion to modify or grant waivers to this Policy. Any amendments or waiver may be publicly disclosed if required by applicable laws, rules and regulations.\nLast modified February 4, 2025:\nChange ref links to regular links (\n64832a18\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1993}
{"doc_id": "41ae4d3a64493818", "url": "https://handbook.gitlab.com/handbook/legal/esg", "title": "Sustainability | The GitLab Handbook", "text": "The Handbook\nLegal & Corporate Affairs (\"LACA\")\nSustainability\nInformation and processes related to Sustainability and ESG\nTo learn more about Sustainability at GitLab, please take our ESG Training course available on\nLevelUp\nand in the\nHandbook\nJoin the\n#sustainability-esg\nSlack channel to follow along for updates, ask questions and provide feedback\nCustomer asking ESG-related questions? Follow the steps outlined in the\nRequesting Support with Customer ESG Questions\nsection below\nSustainability Programs\nCorporate Sustainability\nis a business approach that enhances long term stakeholder value by implementing a strategy that considers every dimension of how a business operates when making social, environmental and economic progress.\nstands for Environmental, Social and Governance and refers to the three key factors when measuring the sustainability and ethical impact of an investment in a business or company.\nAt GitLab we use Sustainability and ESG interchangeably. Both terms are relevant to our work and both serve different purposes depending on the audience we interact with.\nTeam Overview & Vision\nThe Sustainability\nTeam\ncreates and maintains GitLab‚Äôs Corporate Sustainability strategy and programs by driving and integrating responsible business practices and ESG regulatory compliance.\nThe Sustainability team builds and maintains strong internal and external relationships to understand stakeholder expectations - including customer, investor and team members. This engagement allows us to remain customer centric and easy to do business with while meeting shareholder and team member expectations.\nThe Sustainability Team has two primary functions and four corresponding programs:\nCompliance, Reporting & Climate Action\nCompliance & Reporting\n: Manages customer and prospect ESG-related questionnaires, requests for proposals, and sustainability contractual clauses. Leads annual Sustainability report and external assurance process. Monitors global ESG regulation and works cross-functionally to advance GitLab‚Äôs culture of compliance with applicable ESG regulations. Responds to investor ESG rating agencies to maintain competitive ESG scoring among peers.\nClimate Action\n: Identifies and executes strategic climate programs, including annual measurement of GitLab‚Äôs greenhouse gas inventory, emissions reduction target-setting, partners with Procurement to run the sustainable supplier program, identifies emissions reduction opportunities across the business, and purchases high quality carbon credits. Manages team member & customer communications related to GitLab‚Äôs commitment to environmental sustainability.\nSocial Impact\nGiveLab\n: GiveLab is GitLab‚Äôs team member volunteer program and includes year-round volunteering, GiveLab 30 days of Impact, our annual company-wide volunteer campaign and GiveLab Champions Program. Volunteerism is an effective way to build trust through social connections - this leads to higher individual and team motivation, and greater cross-functional collaboration.\nGitLab for Non-Profits\n: GitLab‚Äôs in-kind donation program. Manages social impact communications with team members and customers, while developing strategic nonprofit partnerships to advance GitLab‚Äôs ESG goals and help enhance our brand reputation by demonstrating our commitment to the nonprofit community.\nSustainability Strategy\nDeeply integrated into our business philosophy, GitLab‚Äôs Sustainability strategy is driven by our\nvalues\nof Collaboration, Results for Customers, Efficiency, Diversity, Inclusion and Belonging, Iteration, and Transparency (CREDIT). GitLab‚Äôs stakeholders, including customers, investors, team members, and community members play a key role in GitLab‚Äôs Sustainability strategy.\nGitLab conducted its inaugural ESG materiality assessment in 2022. By conducting a materiality assessment with our stakeholders, we identified which ESG topics have the greatest impact on GitLab‚Äôs business and where we have the potential to have the greatest impact on the environment, society, and our global communities - those material topics drive the programs, policies and initiatives under our strategy.\nThis page will continue to be updated as we make progress towards developing plans and programs to advance our Sustainability goals.\nSustainability Advisory Committee\nThe purpose of the advisory committee is to create cross-functional alignment on ESG objectives and decision making, to go beyond simply compliance and into long-term operational implementation.\nMembers of the Sustainability Advisory Committee\nRobin Schulman (Egroup)\nRob Allen (Egroup)\nBrian Robins (Egroup)\nStacy Cline (ESG)\nKim Buncle (ESG)\nKelsey Turcotte (Investor Relations)\nLisa Boughner (Communications)\nAmie Bright (Marketing)\nBilly Stallings (Marketing)\nSherida McMullan (DIB)\nStella Treas (CoS)\nScott Rissmiller (Corporate Legal)\nEmily Plotkin (Employment Legal)\nRendi Miller (Procurement)\nJames Shen (Finance)\nMarin Jankovski (Infrastructure)\nTaylor McCaslin (Product)\nCompliance & Reporting\nLike all functions at GitLab, transparency is a core focus. Every year GitLab publishes an annual ESG report where we share our approach to managing our key ESG focus areas, provide updates on programs and policies, achievements to date, metrics and targets, and plans for the future.\nFY23 ESG Report\nFY24 ESG Report\nThe Sustainability team works cross-functionally to prepare GitLab for compliance with ESG regulations.\nThe Sustainability team also supports internal teams with customer ESG questionnaires and RFPs. Customers and prospective customers are increasingly asking about GitLab‚Äôs Sustainability programs, including questions related to GitLab‚Äôs climate commitments and greenhouse gas emissions. Many of our customers are also subject to ESG regulation and we expect customer ESG questions to continue to increase as they look to better align to new regulations.\nRequesting Support with Customer ESG Questions\nIf a customer or potential customer has questions related to GitLab‚Äôs ESG practices\nas part of an RFP\n, please follow the\nRFP process\nIf a customer or potential customer requests information via an ESG questionnaire, please open an issue\nhere\nand select the ‚ÄòESG Questionnaire‚Äô template\nIf there‚Äôs an opportunity to connect the Sustainability team directly, please reach out in the\n#sustainability-esg\nSlack channel\nClimate Action\nGitLab is committed to doing our part to minimize our environmental footprint, including working to reduce greenhouse gas (GHG) emissions associated with our operations. GitLab‚Äôs stakeholders, including customers, investors, regulators, and team members expect the company to operate sustainably and to do our part to reduce our environmental footprint.\nMany of GitLab‚Äôs customers have GHG reduction targets and as a vendor, GitLab‚Äôs carbon emissions contribute to our customers‚Äô emissions footprints. To remain easy to transact with, GitLab needs to meet the expectations of our customers by taking action on climate change.\nGitLab‚Äôs Climate Action Program consists of four pillars:\nMeasure & Report:\nEvery year GitLab conducts an annual greenhouse gas (GHG) inventory in alignment with the GHG Protocol, the global best practice carbon accounting standard. We publish the results of the inventory in our annual ESG report and have the data assured by a third-party. In 2026, GitLab is subject to new regulations in the US and the EU that will make these disclosures mandatory.\nAct:\nGitLab is taking action to reduce our carbon emissions. As a fully remote software company, the majority of our emissions come from our suppliers. Engaging our suppliers to measure their carbon emissions and set their own reduction targets is a critical component of our reduction pathway, which is why we have set an aspirational supplier engagement target. Please see the\nSustainable Procurement Program\nfor more information. The Sustainability team continues to explore other ways to reduce emissions and is doing further analysis on additional reduction pathways.\nEngage:\nThis includes engaging GitLab team members in climate education and action. In 2024, we launched the\nGitLab Team Member Sustainability Guide\n, providing actionable steps team members can take at home to minimize their environmental impact. In FY26, we launched our partnership with\nMammoth Climate\n, a climate literacy and challenges platform, to further engage team members with educational materials, activities, and rewards\nAccelerate:\nWhile GitLab works to reduce our emissions, we are also committed to accelerating climate solutions by purchasing high quality carbon credits to cover a portion of our carbon footprint. We are proud to partner with\nRubicon Carbon\nto purchase a diversified portfolio of high quality carbon credits, financing carbon removal projects that meet Rubicon‚Äôs\nhigh standards of quality\n.\nSustainable Procurement Program\nIn FY25, GitLab set an aspirational science-aligned supplier engagement target to reduce our Scope 3 emissions: 70% of our suppliers (by emissions) will have science-aligned climate targets by FY29.\nOur sustainable procurement program includes the following initiatives:\nAnnual emissions survey to request data from suppliers in an effort to improve the accuracy of our footprint\nUse strategic business reviews to understand key barriers suppliers face when measuring and reporting their emissions\nProvide resources and training to suppliers on how to measure and reduce their greenhouse gas emissions\nProvide resources and training to team members responsible for supplier selection on our new expectations of suppliers, aligned with applicable laws.\nWe look forward to sharing updates on this new initiative.\nGiveLab\nAt GitLab, all team members do work that supports the company, which supports the enhancement of an open source codebase. This codebase is freely available to everyone to make better software faster and drive progress through what they build. Between 2022 and 2024, team members made over 125,000 commits to the open source part of the GitLab codebase.\nBut, there are also other ways to give back and many team members choose to contribute beyond GitLab. In addition to contributing to GitLab, GitLab offers additional optional pathways for team members to give back while leveraging their unique skills and passions through programs such as GiveLab, GitLab‚Äôs Team Member Volunteer Program.\nGitLab encourages team members to take part in volunteer initiatives such as supporting their local communities, participating in virtual volunteer activities, and organizing volunteer activities as part of team events. Corporate volunteerism has been proven to be an effective strategy for\nboosting engagement\n, improving employee retention, and\nstrengthening relationships at work\n. Volunteering with GiveLab supports team members in fostering connections, building trust among one another and embodying our CREDIT values while positively impacting our communities.\nTeam members may self organize volunteer events at any point throughout the year. To submit a request for a team volunteer activity with a\nRegistered Nonprofit Organization\nthat isn‚Äôt on the current\nGiveLab Nonprofit Directory\n, please go to the\nPhilanthropic Requests epic\nand open a new issue using the\nVolunteer_Support Template\n.\nTeam members can also request support from the Sustainability Team to organize local or virtual volunteer opportunities on their behalf by going to the\nPhilanthropic Requests epic\nand opening a new issue using the\nVolunteer_Support Template\n. Please write ‚Äúyes‚Äù for the question, ‚ÄúWould you like the Sustainability team‚Äôs help organizing the volunteer activity?‚Äù\nAll team members and volunteer activities must adhere to the\nGitLab Philanthropy Policy\n. Team members must follow GitLab‚Äôs paid time off (PTO) policy if volunteering during work hours and use the ‚Äúpublic service/volunteer‚Äù option in Workday.\nIf volunteering in person, team members may incur some expenses. For calendar year 2024, team members can expense up to a total of $25 for expenses incurred that meet the allowed for reimbursement criteria. All expenses should be submitted in Navan using the ‚ÄúGiveLab‚Äù classification. Please note that GitLab does not allow team members to travel to in-person volunteer events. All in-person volunteering should be local to the team member.\nAs with all\ncompany expenses\n, team members must be thoughtful in spending the company‚Äôs money and use best judgment to ensure that all expenses are deemed ‚Äúordinary and necessary.‚Äù Team members should follow all\nteam member expense responsibilities\n.\nExpenses allowed for reimbursement (for in-person volunteer events):\nLocal travel only -\nmileage\n,\ntrain\n,\ntaxi/rideshares\n. Must follow and comply with the current limits of our Expense Policy. Code under their individual travel category and use the ‚ÄúGiveLab‚Äù classification in Navan\nParking\nfor the event. Must follow and comply with the current limits of our Expense Policy. Please use the ‚ÄúGiveLab‚Äù classification in Navan\nMeal\nduring the event. Must follow and comply with the current limits of our Expense Policy. Code under Travel-Meals for Myself and use the ‚ÄúGiveLab‚Äù classification in Navan\nExpenses not allowed for reimbursement:\nAny airfare, lodging, rental cars, coworking space, internet expenses are not allowed\nAny supplies or items needed for the event\nDonations to the nonprofit\nAny expenses that are not mentioned as ‚Äúallowed‚Äù above are not reimbursable and there will be no exceptions\nAs with our unique ways of working, GitLab and its team members have identified and sought out opportunities for impact that speak not only to our\nvalues\nbut also to our\nall-remote\nnature. To review previous opportunities that team members participated in, visit the\nhistorical activities page\n.\nGiveLab 30 Days of Impact\nGiveLab 30 Days of Impact is GitLab‚Äôs annual volunteer campaign created to encourage team members to foster connections, build trust among one another and embody our CREDIT values while positively impacting our communities. We have designed this program with our high-performing team culture and results for customers in mind.\nGiveLab 30 days of Impact runs annually in Q4 and our goal is to encourage as many team members as possible to volunteer over the course of 30 days.\nThroughout the month, team members can volunteer as little as one hour of their time to make an impact. We understand that our team members are driven by many different factors, and we welcome that volunteer participation will look different for everyone. Through GiveLab 30 days of Impact we aim to offer many different ways for team members to get involved such as:\nThrough company-sponsored virtual events\nLocal in-person volunteer events organized by the GitLab Sustainability team,\nGiveLab Champions\n, and team members\nIndividual volunteer pursuits\nFind and contribute to opportunities in the\nGiveLab Volunteer Directory\nInclude a volunteer activity at an all-hands or team builder\nContribute to\nGitLab‚Äôs codebase\nAssist with\nretention\nand recruitment efforts\nWhy GiveLab 30 Days of Impact Exists\nWhile GitLab encourages year-round volunteerism through\nGiveLab\n, GiveLab 30 days of Impact centralizes our efforts into an annual campaign to have a larger collective impact over a specific timeframe. Corporate volunteerism has been proven to be an effective strategy for\nboosting engagement\n, improving employee retention, and\nstrengthening relationships at work\n. Additionally, this program offers volunteering opportunities around a major holiday season in many parts of the world, a time when many are seeking opportunities to give back.\nTeam Member Benefits of Volunteerism\nDevelop new skills and knowledge\nExpand your professional network and connections\nUnderstand the nonprofit community‚Äôs needs and how your skills can help\nMake a meaningful difference in your community\nImportance of Volunteerism at GitLab\nProvide an additional option for team members to volunteer and make a positive impact beyond the impact team members make every day by contributing to GitLab - the platform and the company\nProvide another way for team members to embody our CREDIT values through volunteerism and social impact\nExpand GitLab‚Äôs positive impact across communities\nBuild trust amongst team members through social connections\nBoost team member engagement\nUtilizing GitLab‚Äôs PTO Policy to Volunteer\nTeam member participation is voluntary, should not interfere with work commitments, and time off is required to be in alignment with GitLab‚Äôs\nPTO policy\n. Travel is not permitted for this program. Team Members may choose to volunteer virtually or through local in-person events. Volunteer events typically last between one and four hours. Managers play an important role in supporting team members in taking time for themselves and their families, while also ensuring accountability to results and coverage for teams and its goals. Our Results for Customers value sits at the top of our values hierarchy, and our PTO policy empowers managers to appropriately manage workloads and deliverables, while also giving team members the time away they need from work.\nHow to Request Volunteer Time Off\nTeam Members taking time off to volunteer should communicate time off in advance with their manager. To request volunteer time off, follow the\nPaid Time Off\nprocedures outlined in our handbook and reach out to People Connect via HelpLab should you have any concerns. A step-by-step guide on how to request paid time off can be found\nhere\n. Note that volunteer time off should be used towards acceptable volunteer activities and in adherence with our\nGitLab Philanthropy Policy\n.\nExpenses and Reimbursements for Participation\nPlease see our\nGiveLab reimbursement policy\nto understand current allowances as they relate to volunteering costs.\nGiveLab Volunteer Directory\nWe have created an internal\nGiveLab Volunteer Directory\nthat features a list of vetted nonprofit organizations with available volunteer opportunities. Team members can search the document for virtual volunteer opportunities, opportunities to volunteer with\nGitLab Foundation\ngrantees and search for local opportunities.\nWe encourage all team members to contribute to our GiveLab Volunteer Directory. To recommend a nonprofit organization to add to the Directory, please open a\nVolunteer Recommendation Issue\n.\nGiveLab Champions\nThe GiveLab Champions are team members who are passionate about giving back to their communities and want to encourage other team members to do the same.\nGiveLab Champions self-identify to participate in the voluntary Champions group, managed by the Sustainability team. The GiveLab Champions help activate the GiveLab signature program (launching Fall of 2024), but also work to organize and promote volunteer opportunities year-round.\nThe importance of GiveLab Champions\nGiveLab Champions help team members build trust through social connections, build connections within their communities, and help GitLab provide meaningful opportunities for team members to give back. The GiveLab Champions ensure global voices are heard and relevant causes are represented based on where team members live. GiveLab Champions help to make GitLab a better place to work.\nTeam member benefits of volunteering\nChampions introduce new and current team members to GitLab‚Äôs culture and help to build and maintain engagement\nChampions help build trust through social connections\nChampions have the opportunity to develop professional and leadership skills, build relationships across the company and make a difference at work and in local communities\nChampions can network and provide positive impacts to the business\nGiveLab Champion responsibilities\nRecommend local\nRegistered Nonprofit Organizations\nthat meet GitLab‚Äôs eligibility criteria for volunteer activities\nHelp organize local volunteer events for team members to participate in\nProvide recommendations to the Sustainability Team for virtual volunteer opportunities\nEncourage team members to volunteer\nHelp plan and execute the GiveLab signature program\nParticipate in quarterly Champion group meetings\nProvide feedback to the Sustainability team on the GiveLab and Sustainability Programs\nTime commitment\nThe time commitment for a GiveLab Champion is estimated to be 3-5 hours per quarter. Participation can vary throughout the year.\nSelection criteria\nThe team member must be performing in their role and not part of any performance management process as confirmed by the People Group\nMust be a full-time GitLab team member. This includes team members employed through a PEO or who contract with CXC or directly with GitLab IT BV\nAt least 3-month tenure at GitLab\nApproval from your direct manager and support to commit the time and to use this leadership role as a professional development opportunity\nA minimum one-year commitment in the role but understanding this may change to less and can be more\nSelection process\nInterested team members should complete the\nGiveLab Champions survey\nexpressing their interest\nTeam members must confirm that they have approval from their manager to participate\nThe Sustainability team evaluates interest at a minimum on a monthly cadence and will reach out to the interested individual for follow up questions\nGiveLab Champions\nBrenda Nyaringita (Engineering)\nMax Woolf (Engineering)\nYasha Rise (Engineering)\nRendi Miller (Finance)\nEmily Plotkin (Legal)\nKim Buncle (Legal)\nAlisha Ward (Marketing)\nDarwin Sanoy (Marketing)\nKristof Goossens (Marketing)\nNupur Sharma (Marketing)\nTess Dutton (Marketing)\nMichaela Seferian-Jenkins (Product)\nGitLab for Non-Profits\nGitLab launched\nGitLab for Nonprofits\n, an in-kind donation program in 2023. Through this program, GitLab supports Registered 501c3 (or jurisdictional equivalent) Nonprofit Organizations in good standing that align with our values by offering free licenses and seats. The program operates on a first come first served basis. Once the\nannual donation of 5,000 seats\nis met, the application will remain closed for the year.\nFAQs\nWhat are the benefits of the GitLab for Nonprofits program?\nGitLab is a single platform for project management, collaboration, source control management, git, automation, security, and much more. Because it is easy to use, flexible, and all in one place, it is the best choice for nonprofits to scale their work. The GitLab for Nonprofits Program gives free licenses of GitLab to registered nonprofit organizations.\nNonprofits accepted into the program will be provided a free Ultimate license for one year (SaaS or self-managed) for up to 20 seats. Additional seats may be requested although they may not be granted.\nWho qualifies for the program?\nGitLab supports Registered 501c3 (or jurisdictional equivalent) Nonprofit Organizations in good standing that align with our\nValues\n. A ‚ÄúRegistered Nonprofit Organization‚Äù is one that has been registered with the local government or authorized agency within its applicable local, state, provincial, federal or national government.\nFor the calendar year 2024, we will limit the in-kind program to 5,000 seats, which was approved by finance and the board in the\nPhilanthropy Policy\n. Each organization will be eligible for up to 20 seats. This will allow us to assist as many organizations as possible. This will be revisited throughout the year and adjusted as needed. Interested organizations who are new customers may request additional seats although the request may not be granted. To limit churn, current GitLab customers that apply to transition to the Nonprofit Program will not be granted a special request above the 20 seats.\nWhat are the terms of the GitLab for Nonprofits program?\nUpon acceptance, program members are subject to the\nGitLab Subscription Agreement\n. The decision to issue a GitLab for Nonprofits license is always at the sole discretion of GitLab.\nHow does someone apply?\nInterested organizations need to visit the\nGitLab for Nonprofits\npage and submit the\napplication form\n.\nHow are applications processed?\nNonprofits apply on the\nGitLab for Nonprofits\npage. Once the application is submitted, the Nonprofit will receive a message and a link to TechSoup, our verification partner.\nThe Nonprofit will then need to log in or create their TechSoup account. TechSoup provides a rigorous vetting process to ensure the nonprofit is eligible for the GitLab for Nonprofits program and meets all requirements.\nIf a Nonprofit is verified, TechSoup will notify GitLab.\nGitLab will then undergo its own vetting and approval process.\nOnce all parties have verified and approved the Nonprofit, GitLab will send the instructions directly to the Nonprofit to redeem their license.\nIf a Nonprofit is not verified through TechSoup, TechSoup will provide details on how the Nonprofit can become verified.\nIf a Nonprofit is declined from GitLab, GitLab will notify the Nonprofit via\nnonprofits@GitLab.com\n.\nPlease allow up to 15 business days for the application and verification process.\nMust Nonprofits renew their memberships?\nYes. All nonprofits must renew their membership annually, which involves a re-verification process. Nonprofits will submit for renewal the same way they first applied for the program.\nWhere can members receive support?\nWhile GitLab for Nonprofits Program benefits do not include product\nsupport\n, program members can receive help with GitLab in a number of ways. In general, we recommend the following:\nSend questions or issues requiring immediate attention or sensitive information to the GitLab for Nonprofits team at\nNonprofits@GitLab.com\nReview\nGitLab Docs\nfor answers to general product-related questions\nPost questions in the\nGitLab Forum\n, where community members and GitLab team members can review and discuss them\nFile bug reports and breaking behaviors\nas issues\nfor product teams to review and address\nI‚Äôm a GitLab Team Member and I have a customer applying for the program. What do I do?\nPlease point the Nonprofit to the GitLab for Nonprofits page to learn about the program, eligibility and application\nIf the Nonprofit has questions on the eligibility or status of an application, please advise them to reach out to\nnonprofits@gitlab.com\n. Or team members can inquire about the status of an application in\n#esg\nIf you have a question or concern about the customer churn, please raise this in #gitlab-for-nonprofits slack channel and a Sustainability team member will contact you\nPhilanthropic Requests\nInformation on how GitLab Inc. supports Registered Nonprofit Organizations can be found in the\nPhilanthropy Policy\n.\nPlease note that for all Philanthropic Requests, including requests for GitLab to join as a member to an association, program or organization, approval by the Sustainability team and CLO is required as defined by the Oversight Responsibility section of the Policy.\nIf you would like to submit a philanthropic request, please follow the instructions based on your request type.\nMonetary Contributions\nThere are two ways that team members can submit a request for monetary support:\nRequest funding from the Sustainability team to support a Registered Nonprofit Organization OR (not currently accepting applications - see instructions below on submitting a non-profit for future consideration)\nRequest utilizing department or TMRG budget to support a Registered Nonprofit Organization\nIf you are requesting funding from the Sustainability team to support a Registered Nonprofit Organization, please note that at this time, we are not accepting applications. If you would like to submit a Nonprofit Organization to be considered for support in the future, please go to the\nPhilanthropic Requests epic\nand open a new issue using the\nMonetary_Support Template\n. You will be notified if there is a future opportunity.\nIf you have a department or TMRG budget that you would like to utilize to support a Registered Nonprofit Organization, please go to the\nPhilanthropic Requests epic\nand open a new issue using the\nMonetary_Support Template\n. Please tag your manager to approve the request if you are submitting on behalf of your department. If you are submitting a request on behalf of a TMRG or DIB, please add the DIB DRI as a reviewer. Please allow a minimum of 10 working days for review.\nThe team member submitting the issue is responsible for obtaining proper approvals and working with Accounts Payable to issue the payment. Please tag the individuals in the approver section of the issue. Once approvals are completed, the team member requesting the donation needs to obtain an invoice from the non-profit that contains the bank payment details and submit this to\nAP@GitLab.com\n.\nMembership Requests (non-monetary)\nFor requests related to GitLab Membership of Association, Program or Organization, and includes terms, conditions and/or obligations on GitLab that must be executed, please follow the below process. Open an\nissue using the Membership Request Issue Template\n. Complete and attach the necessary information. Note: If you are submitting a request on behalf of a TMRG or DIB, please add the DIB DRI as a reviewer.\nNOTE: For any request(s) that require payment, please be certain to follow applicable ESG & Procurement processes.\nMatching Gifts Program\nAt this time, GitLab does not offer a matching gifts program.\nEarth Month\nGitLab FY26 Earth Month Campaign\nGitLab Fiscal Year 2023 (FY23) ESG Report\nMessage From Our Chief Executive Officer Welcome to GitLab‚Äôs inaugural Environmental, Social, ‚Ä¶\nSustainability Training\nSustainability Training for GitLab team members\nTeam Member Sustainability Guide\nGitLab's Team Member Sustainability Guide for Remote Work\nLast modified May 28, 2025:\nUpdating to include scope 3 target (\n4884ae30\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4445}
{"doc_id": "f4b4fe6d916ff1e7", "url": "https://handbook.gitlab.com/handbook/customer-success/demo-systems/tutorials/getting-started/configuring-group-cluster", "title": "Configuring GitLab with group-level Kubernetes cluster | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nDemo Systems\nDemo Systems Tutorials\nGetting Started Tutorials\nConfiguring GitLab with group-level Kubernetes cluster\nHow to configure GitLab with your Google Kubernetes cluster\nOverview\nAfter your GitLab Demo Cloud account has been created, your runners and CI jobs will use the pre-configured instance-level cluster by default. The instance-level cluster is designed to be transparent behind the scenes and does not support customization or administration and reporting capabilities as a demo systems user.\nYou can create your own Kubernetes cluster using in your own GCP project that you can provision using the\nGitLab Sandbox Cloud\n. By having your own cluster, you have full administrative access to the cluster for troubleshooting CI jobs and pods that are experiencing issues.\nThis tutorial shows you how to create a cluster and connect it to your GitLab group. You will access the Google Cloud Platform (GCP) console to see your cluster, use the Google Cloud Shell to run\nkubectl\ncommands on your cluster, and access the GitLab Demo Cloud Omnibus instance to configure your pre-created group with a Kubernetes cluster.\nFor a more inutitive UI for managing your cluster resources, we recommend using\nK9s\n.\nDeprecation Notice\nThis method of connecting your cluster was deprecated in GitLab v14.5. This tutorial is preserved for educational purposes. See the\nKubernetes Agent\ndocumentation for the new method for connecting clusters to GitLab.\nPre-Requisites\nCreating and accessing your\nDemo Systems account\nCreate a GCP project using the\nGitLab Sandbox Cloud\nStep-by-Step Instructions\nTask 1. Create a Kubernetes cluster using the Google Cloud Platform (GCP) Console (Web UI)\nFor additional assistance with accessing your GCP project, see the\nGitLab Sandbox Cloud\nhandbook instructions.\nOpen a\nnew tab or window\nin your web browser.\nVisit\nhttps://console.cloud.google.com\n.\nIf you‚Äôre not already signed in, please sign in with your GitLab email account.\nIn the blue top navigation bar, locate the dropdown menu to the\nright\nof the\nGoogle Cloud Platform\ntitle. These are the projects (authentication realms) that you have access to. Make sure your project (ex.\njmartin-xxxxxxxx\n) is selected.\nIn the blue top navigation bar, locate and click on the hamburger menu icon to the\nleft\nof the\nGoogle Cloud Platform\ntitle. These are all of the services that are available in the Google Cloud Platform. In the\nCompute\nsection, click on\nKubernetes Engine\nor\nKubernetes Engine > Clusters\n.\nOn the\nKubernetes clusters\npage, click on\nto initialize the Google API service.\nThis action might take a few moments.\nIn the new page, click on\nthen on\nto the\nright\nof\nGKE Standard\n.\nOn the\nleft-hand\nmenu, click on the following sections to configure your cluster:\nCluster basics\n: specify your cluster name (ex.\njmartin-cluster\n) and make sure to select\nZonal\nas ‚ÄòLocation Type‚Äô.\nNode Pools -> default-pool\n: specify\n1\n(one) for the ‚ÄòNumber of nodes‚Äô\nNode Pools -> default-pool -> Nodes\n: select\ne2-standard-2\nfor the ‚ÄòMachine type‚Äô (recommended)\nClick on\non the bottom navigation bar.When your cluster appears, click on the name of your cluster.\nYou are now at the dashboard for your cluster. It is recommended to bookmark this page for future access.\nTask 2. Obtain the Cluster CA Certificate\nCreate a new file in your preferred text editor so we can copy and paste values into it for temporary reference.\nCopy and paste your cluster name (at the top of the cluster dashboard) into the text file (Ex.\njmartin-cluster\n).\nIn your browser on the cluster dashboard in the GCP console, locate and click on the\nShow credentials\nlink next to the Endpoint (IP address value).\nIn the\nCluster credentials\npop-up modal window,\ncopy and paste each of the values to your text editor file\n. For the value for the Cluster CA certificate, be sure to include the hyphen lines for\nand\n.\nClick the\nClose\nbutton in the bottom right corner.\nTask 3. Connect to Google Cloud Shell for configuring\ngitlab-admin\nservice account\nThese instructions have been customized from the\nGitLab documentation\nto show the specific instructions for the demo systems infrastructure.\nOn your cluster dashboard in the GCP console, locate and click on the\nConnect\nbutton in the top page navigation (below the search bar in the blue top navigation).\nIn the\nConnect to the cluster\npop-up modal, click the\nRun in Cloud Shell\nbutton.\nIf you have experience with\nkubectl\nand\ngcloud\ncommand-line tools, you can optionally use the command shown. If you want to use them locally, you need to install them from here (\nkubectl\n,\ngcloud\n).\nAt the bottom of your browser window, a terminal window will appear. It may take a few moments for the Cloud Shell to finish provisioning.\nThe Cloud Shell is a small container that Google provides for you to have terminal access in your browser without needing to configure your local machine.\nWhen the Cloud Shell terminal appears, the first line will be pre-populated with a command to obtain the credentials for your cluster using role-based access control (RBAC).\nSimply press the ENTER key.\njmartin@cloudshell:~ (jmartin-xxxxxxxx)$ gcloud container clusters get-credentials jmartin-cluster --zone us-central1-c --project jmartin-xxxxxxxx\nFetching cluster endpoint and auth data.\nkubeconfig entry generated for demosys-us-jmartin-cluster.\nIf you do not see the output shown in the example above, it is likely that your GCP account has permissions issues and you should contact\n#demo-systems\nteam for assistance.\nUse the following command\nto get the API URL and\ncopy/paste the outputted URL to your text file\n.\nFor recent versions of Kubernetes:\nhttps://35.239.222.203\nThis will return an IP address that is the same as the endpoint IP that you can see in the GCP Console Web UI with an\nhttps://\nprefix. Keep in mind that this URL does not provide a web UI for your cluster and is only used for API purposes.\nUse the following command\nto create the service account.\nkubectl create sa gitlab-admin -n kube-system\nkubectl create clusterrolebinding gitlab-admin --serviceaccount=kube-system:gitlab-admin --clusterrole=cluster-admin\nYou will receive a confirmation.\nserviceaccount \"gitlab-admin\" created\nclusterrolebinding \"gitlab-admin\" created\nUse the following command\nto get the API token for the\ngitlab-admin\nservice account and copy/paste the value of the\ntoken\nto your text editor.\nName:         gitlab-admin-token-b5zv4\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name=gitlab-admin\nkubernetes.io/service-account.uid=bcfe66ac-39be-11e8-97e8-026dce96b6e8\nType:  kubernetes.io/service-account-token\nData\n====\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImFCSFZicS1DbUpYbkZDNnRBcnc0TzhYeDNXbnBJMWoxck93ZHI3UkhOYVUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5\nc3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tanI1bTciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ\n2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOGZhODFkMzktZTM0NC00ZDQxLTkzMmEtZmNkYzViOGY5NTRkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.loW-jWN9Ktvoi0z34y2jaTCcr9SiPH-v_X_pvXYMfeus7\nT84mSqIztkTBW9S8V2mZ_Be_QVbVMJERjUDrCyKwcvH1vwSJPNuYFJLCONDbevm1i9VgJz-ieCk_Qtl0FC1-gnCKZmJot76FEQpXjGrwRmZ0JQDxWtg680bLxEYqv7DZXcZzWNusdYOufziveiU9xE8b1XiprqeEj6Gy7BzI9jeCxGDAnC0Ff7D5rgAGi6GNayrGWZ8YXYvi1dhEekG-pW8\nMkZ8MTKopynxgLJ8ksv_vzCRSiwQ79H7mSR3TwTXoqjjzD3XOY2gIACGt2tpLRJu3mTuUQWkrL69bfLFnw\nca.crt:     1115 bytes\nIn your text editor,\nremove the line breaks in the token\nso that it is on a single line.\nThe line breaks appear as a space in the token when pasting into the GitLab UI and will result in a connection error with invalid credentials if you do not remove the line breaks.\nYou have successfully obtained the credentials needed to connect your cluster from GitLab.\nTask 4. Accessing the GitLab Instance\nSee the\ndemo systems handbook page\ninstructions for accessing the GitLab Omnibus instance.\nTask 6. Add Kubernetes Cluster to GitLab Group\nIt is imperative that you configure the cluster inside of your own group and not from the Admin section. If you make changes in the Admin section, this will cause breaking changes for the entire team. Please be mindful of the admin privileges that your account has for demo purposes.\nIn the left side bar for your group (ex.\nJeff Martin\n), locate and click on\nKubernetes\n.\nOn the Kubernetes page, you will see a list of clusters that are available. If you have not added a group cluster, this should only show instance clusters.\nIn the top right corner, click the\nAdd Kubernetes cluster\nbutton.\nOn the\nAdd a Kubernetes cluster integration\npage, click the\nAdd existing cluster\ntab.\nIn the form fields, use the following values and copy and paste the appropriate values from your text editor file.\nKubernetes cluster name:     (copy/paste - ex. jmartin-cluster)\nEnvironment scope:           *\nAPI URL:                     (copy/paste - ex. https://35.239.222.203)\nCA Certificate:              (copy/paste)\nService Token:               (copy/paste)\nRBAC-enabled cluster:        checked\nGitLab-managed cluster:      checked\nClick\nAdd Kubernetes cluster\n.\nReview\nYou have successfully configured a Kubernetes cluster with your group on GitLab.\nYou can now close the GCP console tab and continue using GitLab with Kubernetes integrated.\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1365}
{"doc_id": "054b06ee3a1f148f", "url": "https://handbook.gitlab.com/handbook/about/handbook-usage", "title": "GitLab Handbook Usage | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nGitLab Handbook Usage\nAbout how GitLab uses the handbook.\nFlow structure\nA (process) problem comes up, frequently in an issue or chat.\nA proposal is made in a merge request to the handbook.\nOnce merged, the change is announced by linking to the diff in the MR or commit. Major ones are posted in the #whats-happening-at-gitlab slack channel. Medium ones are posted in the #handbook channel for visibility, with a one line summary of the change. If there was an issue, close it out with a link to the diff.\nSometimes you want to have real time editing of a proposal during a meeting and you need to use a Google Doc for that. When doing so the first item should be the URL of the handbook page this content will be moved to when the meeting is over.\nWhy handbook first\nDocumenting in the handbook before taking an action may require more time initially because you have to think about where to make the change, integrate it with the existing content, and then possibly add to or refactor the handbook to have a proper foundation. But, it saves time in the long run, and this communication is essential to our ability to continue scaling and adapting our organization.\nThis process is not unlike writing tests for your software. Only communicate a (proposed) change through a change to the handbook; don‚Äôt use a presentation, email, chat message, or another medium to communicate the components of the change. These other forms of communication might be more convenient for the presenter, but they make it harder for the audience to understand the context and the implications for other potentially affected processes.\nHaving a\n‚Äúhandbook first‚Äù\nmentality ensures there is no duplication; the handbook is always up to date, and others are better able to contribute.\nBeyond being ‚Äúhandbook first,‚Äù we are also ‚Äúpublic handbook first.‚Äù When information is\ninternal-only\n, it should be captured in the internal handbook, but we default to the public handbook for anything that can be\nmade public\n. This ensures that everyone has access to any information that can be\nSAFEly\nshared. This supports the GitLab\nvalues\n, including transparency, efficiency, and results. It also protects against the internal handbook becoming a home for information that should otherwise be public or a conflicting or duplicative source of truth.\nWhen asked during an\ncase study interview (shown above) about challenges related to being all-remote, GitLab co-founder Sid Sijbrandij provided the following reply.\nThe biggest problem is GitLab not working handbook first. We have an amazing handbook that allows us to collaborate, onboard new people, and think collectively.\nHowever, it is counterintuitive to communicate changes to the handbook. The default of people, when they wish to communicate a change, is to send a Slack message, send an email, give a presentation, or tell people in a meeting ‚Äî\nanything\nbut make a change in the handbook.\nIt‚Äôs slower for them. It‚Äôs quicker to use any other form. If they make a change in the handbook, they first have to find the relevant part of the handbook, they sometimes have to adjust the handbook to make sure their change will fit in, they have to go through a technical process and a review or two, and they have to wait a bit before it‚Äôs deployed.\nIt‚Äôs slower than any other option. However, it allows people that commit a change after that to build upon a change. When they take that extra time, it‚Äôs building a foundation for the next thing.\nI think of it as brick laying. Every piece of information is a brick. At GitLab, there is a well-structured house, and everyone adds to that one house. Because we‚Äôre pretty particular on how we build it, it has a strong foundation and we can build it very high.\nIn every other company, they send the brick into the hands of people. Everyone is receiving bricks daily that they have to add to the house they‚Äôre building internally. They forget things and things are unclear. A lot of context has to be created because there is no context around where to place the bricks.\nSo, you can end up with a thousand houses that look quite different, that are all hanging a bit, and each time you add a brick to the top one pops out at the bottom. ‚Äî\nGitLab co-founder Sid Sijbrandij\nScope of this handbook\nThe handbook is focused on any content that GitLab team members need to do their job. For other content that might be useful, link to the other source.\nAll documentation that also applies to code contributions from the wider community should be in the GitLab project (for example in\nContributing\nor the\ncode review guidelines\n), not the Handbook, which is only for team members.\nFor user facing company information, there‚Äôs the main marketing\nwebsite\n, and the\nblog\n.\nThe handbook is for things concerning current and future GitLab team-members only. If something concerns users of GitLab, it should be documented in the\nGitLab documentation\n, the\nGitLab Development Kit (GDK)\n, the\nCONTRIBUTING file\nor the\nPROCESS file\n.\nHandbook guidelines\nPlease follow these guidelines and remind others of them.\nHow we use the guide every day\nMost guidelines in this handbook are meant to help, and unless otherwise stated, are meant to help more than being absolute rules. Don‚Äôt be afraid to do something because you don‚Äôt know the entire handbook, nobody does. Be gentle when reminding people about these guidelines. For example say, ‚ÄúIt is not a problem, but next time please consider the following guideline from the handbook.‚Äù\nIf you ask a question and someone answers with a link to the handbook, they do this because they want to help by providing more information. They may also be proud that we have the answer documented. It doesn‚Äôt mean that you should have read the entire handbook, nobody knows the entire handbook.\nIf you need to ask a team member for help, please realize that there is a good chance the majority of the community also doesn‚Äôt know the answer. Be sure to\ndocument\nthe answer to radiate this information to the whole community. After the question is answered, discuss where it should be documented and who will do it. You can remind other people of this request by asking ‚ÄúWho will document this?‚Äù\nWhen you discuss something in chat always try to\nlink\nto a URL where relevant. For example, the documentation you have a question about or the page that answered your question. You can remind other people of this by asking ‚ÄúCan you please link?‚Äù\nRemember, the handbook is not what we hope to do, what we should formally do, or what we did months ago.\nIt is what we do right now.\nMake sure you change the handbook in order to truly change a process. To propose a change to a process, make a merge request to change the handbook. Don‚Äôt use another channel to propose a handbook change (email, Google Doc, etc.).\nThe handbook is the process. Any sections with names like ‚Äòprocess‚Äô, ‚Äòpolicies‚Äô, ‚Äòbest practices‚Äô, or ‚Äòstandard operating procedures‚Äô are an indication of a deeper problem. This may indicate a duplication between a prose description of a process and a numbered list description of the same process that should be combined in one description of the process.\nWhen communicating something always include a link to the relevant (and up-to-date) part of the\nhandbook\ninstead of including the text in the email/chat/etc. You can remind other people of this by asking ‚ÄúCan you please link to the relevant part of the handbook?‚Äù\nEveryone can join the\n#handbook\nchannel to stay up-to-date with changes to the handbook.\nScreenshot the handbook instead of creating a presentation\nPresentations are great for ephemeral content like board presentations.\nEvergreen content\nlike a\nleadership training\nshould be based on the handbook. This is an important element of\nworking handbook-first\n.\nIn the creation of presentations for evergreen content, please screenshot the handbook and provide links to displayed pages rather than copy and pasting content (or formatting a slide specifically to mirror handbook information). This approach shows a\nbias towards asynchronous communication\n, and rationale for this is below.\nIt saves you the effort of needing to both update the handbook and create content for a presentation; the handbook is checked and improved as part of the preparation instead of extra work\nThe handbook will stay up to date so people don‚Äôt look at an outdated information in a presentation\nSeeing screenshots will confirm to people the content is in the handbook and it is up to date there\nPeople get used to the structure of the handbook and can more easily find the relevant handbook section later on\nThe content is open for everyone to contribute to when it is in the handbook\nThe content is integrated with the rest of our processes and shown in context\nMany more people will consume the content on a webpage than a presentation because it is easier to search and link\nYou‚Äôre helping other organizations and students around the work by giving them an example how we do it\nAlso see some of the\nadvantages of using our handbook\nThe presentation will look less polished, but the advantages outweigh that concern.\nIf a synchronous presentation is required, default to sharing your screen and viewing live handbook pages over a slide presentation.\nSearching the Handbook\nEvery GitLab Handbook page has a search field near the top of the page for searching.\nSee the\nSearching GitLab like a pro\npage for tips on searching the handbook faster and more efficiently.\nHow to change or define a process\nTo change a guideline or process,\nsuggest an edit\nin the form of a merge request.\nWhen working to get your change merged quickly, make sure you are asking the appropriate team members with merge rights. Not sure who is responsible? Consult (and add to) the\nfile in the relevant project.\nFor example, CMO (Chief Marketing Officer) Staff members can approve any merge request that is specific to their function, while the CMO approves any merge request that is cross-functional marketing. Chief of Staff to the CEO/CEO approves any merge request that has cross-company impact, such as GitLab‚Äôs\nValues\npage.\nAfter it is merged you can post this in the\n#whats-happening-at-gitlab\nslack channel if applicable. You can remind other people of this by asking ‚ÄúCan you please send a merge request for the handbook?‚Äù\nWhen substantially changing handbook layout, please leave a link to the specific page of the review app\nthat is directly affected by this MR\n. Along with the link, include as much info as possible in the MR description. This will allow everyone to understand what is the purpose of the MR without looking at diffs.\nKeeping up with changes to the Handbook can be difficult, please follow the\ncommit subject guidelines\nwith a particular focus on your merge request‚Äôs title, to ensure someone can quickly understand the MR‚Äôs content.\nCommunicate process changes by linking to the\nmerged diff\n(a commit that shows the changes before and after). If you are communicating a change for the purpose of discussion and feedback, it is ok to link to an\nunmerged diff\n. Do not change the process first, and then view the documentation as a lower priority task. Planning to do the documentation later inevitably leads to duplicate work communicating the change and it leads to outdated documentation. You can remind other people of this by asking ‚ÄúCan you please update the handbook first?‚Äù\nWhen feasible, introduce process changes iteratively. It is important that you contribute to the handbook by\nmaking small merge requests\n. This will help gain adoption among the process‚Äôs intended audience. We want to avoid significant process changes that are unnecessarily large, top-down, and disruptive. These types of process changes can disempower\nDRIs\nand cause people to focus on process rather than results.\nLike everything else, our processes are always in flux. Everything is always in draft, and the initial version should be in the handbook, too. If you are proposing a change to the handbook, whenever possible,\nskip the issue and submit a merge request\n. (Proposing a change in a merge request is preferred over an issue description). Mention the people that are affected by the change in the merge request. In many cases, merge requests are easier to collaborate on since you can see the proposed changes.\nIf something is a limited test\nto a group of users, add it to the handbook and note as such. Then remove the note once the test is over and every case should use the new process.\nIf someone inside or outside GitLab makes a good suggestion invite them to add it to the handbook. Send the person the URL of the relevant page and section and offer to do it for them if they can‚Äôt. Having them make and send the suggestion will make the change and will reflect their knowledge.\nWhen you submit a merge request, make sure that it gets merged quickly. Making single, small changes quickly will ensure your branch doesn‚Äôt fall far behind master, creating merge conflicts. Aim to make and merge your update on the same day. Mention people in the merge request or reach them in Slack. If you get a suggestion for a large improvement on top of the existing one consider doing that separately. Create an issue, get the existing MR merged, then create a new merge request.\nIf you have to move content have a merge request that moves it and does nothing else. If you want to clean it up, summarize it, or expand on it do that after the moving MR is merged. This is much easier to review.\nTry to\nadd the why of a handbook process\n, what is the business goal, what is the inspiration for this section. Adding the why makes processes easier to change in the future since you can evaluate if the why changed.\nWhen adding or changing a process in the\nengineering workflow\n, consider scheduling a retro\nmonths out. The retro is an opportunity to\nconsider the effects\nof the new process and determine if it needs further iteration or can be removed.\nConsiderations when adding an additional process\nWhile not a requirement, it can be useful to schedule an async retro MR/issue\nmonths out after the introduction of a new process.\nConsider identifying an improvement target and timeframe to determine what success is. You can use the retro MR/issue to transparently communicate expectations as well to provide a means to iterate or remove the new process.\nThe creation of the retro MR/issue is an opportunity to think through:\nWhat do we hope this new process accomplishes?\nIs there a metric we can use to measure the effect of the new process?\nAre there outcomes of the new process that would prompt us to roll it back?\nThe retro itself is an opportunity to document:\nHow do the participants in the process think things are going?\nWhat additional costs are associated with the new process?\nWere there any unforeseen side effects of the new process?\nDo the participants have suggestions for ways to mitigate any costs realized by the new process, or further improvements in general?\nInformation architecture\nSingle Source of Truth\nThink about the information architecture to eliminate repetition and have a Single Source of Truth (SSoT). Instead of repeating content cross-link it (each text has a hyperlink to the other piece). If you copy content please remove it at the origin place and replace it with a link to the new content. Duplicate content leads to more work by having to update the content in multiple places as well as the need to remember where all of the out of date content lives. When you have a single source of truth it‚Äôs only stored in a single system.\nMake sure to always cross-link items if there are related items (elsewhere in the handbook, in docs, or in issues).\nSystem of Record\nA system of record (SoR) is the authoritative data source for a given data element or piece of information. It‚Äôs worth noting that while it is possible to have a system of record that is also a single source of truth, simply just being a system of record doesn‚Äôt directly imply it is the single source of truth.\nOrganized by Function and Results\nThe handbook is\norganized by function and result\nto ensure every item in it has a location and owner to keep it up to date.\nIt‚Äôs essential that we adhere to this hierarchy and that we not maintain separate structures for company training materials (such as onboarding materials, how-tos, etc.), videos, or other documentation.\nAdhering to this hierarchy is sometimes counter-intuitive.\nWe‚Äôve learned over the years that keeping content in context helps to ensure consistency when making future updates.\nAt times, a change of perspective may be desired.\nIn those cases, link to relevant sections of the handbook but don‚Äôt include the content itself.\nSee the\nonboarding template\n(internal) as an example.\nOr for example a list of\nKey Performance Indicators\nthat links to performance indicators but doesn‚Äôt duplicate definitions.\nStyle guide\nRead through these style guidance below and the\nWriting Style Guidelines\nbefore\nediting the handbook\n.\nHandbook pages\nKeep your handbook pages short and succinct. Eliminate fluff and get right to the point with the shortest possible wording.\nKeep in mind that the biggest challenge cited by new employees is the vast amount of information to take in during onboarding.\nAvoid unstructured content\nAvoid unstructured content based on formats like Learning Playbooks,\nFAQs\nThese are very hard to keep up-to-date and are not compatible with organization per function and result. For example: Call it Contract Negotiation Handbook instead of Contract Negotiation Playbook\nInstead, put the answer, link, definition, course, video, or test in the most relevant place.\nUse descriptive headings so that people can easily search for content.\nThat said, please mix\nformats\nwhere and when appropriate in the handbook, even within a single page.\nUtilizing multiple formats can be valuable, and different people may prefer certain formats over others.\nWorry only about the organization\nper function and result\n, not about how the page will look if you embed varying types and formats of content.\nNote: A weakness of\nFAQs\nis that questions are often asked in biased or leading ways. When possible, state facts as facts.\nUse headings liberally\nIf a page includes more than two headings (especially if it‚Äôs larger than a single ‚Äúscreen‚Äù), add an automatically generated Table of Contents (ToC) by copying\nline 6 to 10 in this MR\n.\nHeadings should have normal capitalization: don‚Äôt use\nor\nTitleCase\n.\nAfter a heading, leave one blank line; this is\nnot required in the standard\n, but it is our convention.\nUse contributable diagrams\nPreference contributable diagrams over uploading images or other less contributable diagrams. This makes it easier for other people to suggest changes and contribute. Diagram options in Markdown include\nMermaid\nand\nPlantUML\n.\nHandbook First Competency\nIn an all-remote, asynchronous organization, each team member should practice handbook first. For more information on what it means to be handbook first, please refer to the\nwhy handbook first\nsection of this page.\nSkills and behaviors of handbook first as a Team Member\n:\nActively contributes to the handbook.\nStart with a merge request\nProvides links to information from the handbook when answering questions and if the information doesn‚Äôt exist in the handbook, then the team member adds it.\nUnderstands which information is internal-only, but puts all public information in the public handbook.\nSkills and behaviors of handbook first as a People Leader\n:\nHolds their team and others accountable for being handbook first.\nDemonstrates leadership in being public handbook first with all information that is not internal-only.\nEnables new team members and managers on how to leverage the handbook as a resource.\nServes as a role model for what it means to be handbook first.\nManagement\nIt is each department and team member‚Äôs responsibility to ensure the handbooks (public handbook, and internal handbook) stay current. The content in the handbook should be accurate and follow the same format as outlined in the\nGuidelines\n. For questions on who to submit a merge request to, or assistance with the handbook, please reach out on the\n#handbook\nSlack channel.\nIf you need permissions to directly commit changes to the handbook, please submit a\nNew Access Request\nissue and follow the process for access approval. Request a ‚ÄòMaintainer‚Äô role for the appropriate handbook.\nMerge Rights Guidelines\nYou need\ndeveloper\naccess\nto the relevant handbook project to merge MRs. All team members should have developer access by default. This page contains some tips and guidelines that you should keep in mind when merging.\nMerge with confidence\nYou should feel confident merging any changes that pass the pipeline without worrying that you will break the handbook. The tests in the pipeline are designed to catch any major problems. The handbook projects are configured so that changes cannot be merged unless the pipeline passes. In the event that code is merged that does break the handbook in some way, follow the instructions for\nreporting an issue to the Handbook team\n.\nDo not use merge immediately\nDo\nnot\nuse the\nmerge immediately\nfeature! Even if your MR is important and time-sensitive, using this feature will create a lot of pain for everyone else. This feature should only be used when critical public information needs to be sent live as quickly as possible and should be approved by PR or Legal.\nIf you don‚Äôt have PR or Legal approval, don‚Äôt use this feature\n.\nMore context on the technical reasons behind this:\nWe want to have a fast pipeline for the default branch, which minimizes the time needed for changes to be deployed and appear live on the production site.\nIn order to achieve this, we do not run any tests or linters on the default branch, because these are long-running jobs which would block a fast deployment.\nInstead, we rely on the\nMerge Train\nto ensure that all Merge Request changes have successfully passed all necessary test/lint jobs before being allowed to merge.\nSo, if you use ‚Äúmerge immediately‚Äù,\nnone of the test/lint jobs will be run, which will result in a broken default branch if problems were introduced.\nThis means that\neveryone who creates new MRs off of the default branch after this point will experience confusing pipeline failures which are not their fault\n, and this will continue until this situation is discovered and a fix is merged to the default branch.\nWhen to get approval\nGetting pinged to approve every small change to your page can be annoying, but\nsomeone changing a policy or procedure in the handbook without proper approval\ncan have strong negative consequences. Use your best judgement on when to ask\nfor approvals.\nWhenever reasonable, practice\nresponsibility over rigidity\n. When you expect a page owner will appreciate your changes, go ahead and merge them without approval. Always ping the code owners with an @mention comment to inform them of the changes. They will be happy their page was made better and they didn‚Äôt need to waste time reviewing and approving the change. In the event that something isn‚Äôt an improvement, we practice\nclean up over sign off\n.\nWhenever appropriate, such as publishing a previously internal-only document,\nget approval from the\ncode owner\nusing the\napproval feature\nbefore merging changes.\nWho can approve\nYou can identify the owner of a handbook page by visiting the page on the web\nversion of the handbook and viewing who is in the\nMaintainers\nsection on the\npage being edited (on the right hand side of the page, which may be hidden on a\nsmaller browser window).\nFor some pages, the\nMaintainers\nsection is empty. This is because the page is\nmaintained by a group rather than individuals. To view which groups or\nindividuals maintain a page, see the\nfile of the relevant repository, such as\nthe handbook‚Äôs\n.\nThe page‚Äôs code owners will also be visible when viewing the\napproval section\nof the merge request.\nThe page‚Äôs code owner is the DRI for the page and has the final say for what\nappears in the handbook. When in doubt, get the DRI‚Äôs permission before changing\ntheir page. Don‚Äôt worry if the DRI is a C-level person. You can still assign\nyour MRs to them, even if you are an individual contributor. This is because we\nprefer to\ncommunicate directly\n.\nHave a peer review your changes\nUnless it‚Äôs a small change like a typo, always have another team member review your changes before you merge them.\nBroad Permissions\nBeing a maintainer gives you access to much more than just the ability to merge. You can see a\nfull list of permissions\nin the docs. Keep in mind that you‚Äôll have access to a broad set of settings and configuration for the project. Don‚Äôt adjust any settings or make any structural changes.\nGranting others maintain access\nDo not grant people maintainer access without an\nAccess Request\n. As a maintainer you have the ability to grant others maintainer access. Don‚Äôt do so without following the Access Request process to garner the appropriate approvals and create the necessary documentation.\nDescription Templates for Issues and Merge Requests\nThe\ndescription templates\nfor issues and merge requests in the various projects are respectively located in the\n.gitlab/issue_templates\nand\n.gitlab/merge_request_templates\ndirectories, and can be edited and changed with a new merge request.\nChanges to the default templates in\nDefault.md\nrequire review by the\nOffice of the CEO\nor the\n. See\n.gitlab/CODEOWNERS\nfor the current list of approvers.\nThe Internal handbook\nWhere can it be found?\nInternal Handbook Project\nLive Website\nWhy is there a internal handbook?\nAs a company, we are\npublic by default\n, but there are things that we cannot discuss publicly. The Internal Handbook is a space where team members can share internal information. Anything that\nis not\nconsidered\ninternal only\n, should be in GitLab‚Äôs\npublic handbook\n. Anything that is\nlimited access\nshould not be added to the internal handbook\nas the internal handbook is accessible by all team members.\nThe process of using this handbook\nOnly add items to the internal handbook that fall into the\nnot public\ncategory. Everything else should be added to our\npublic company handbook\n.\nAccessing the internal handbook group\nAll team members have access to the internal handbook through Okta as baseline access during onboarding. Login to your Okta dashboard and click on the\nGitLab Internal Handbook\ntile. You will have to authenticate with Okta first.\nQuestions using the internal handbook\nQuestions about what should be in the internal handbook vs in the public handbook?  See the\nsafe framework\nor ask in\n#safe\n.\nVolunteering to help with enhancing it?  Join the\n#internal-handbook\nchannel.\nThe Engineering team and all sub-teams track Handbook Update Frequency as a\n, with varying targets per team. Currently, Engineering is the only Division tracking Handbook update frequency, so as to analyze and observe the effectiveness of this KPI.\nExternal use of the Handbook\nRemember that, like virtually everything we do, our handbook is\nopen source\n, and we expect that other companies may use it as inspiration for their own documentation and practices. That said, the handbook should always be specific on\nwhat we do\n, not\nwho we want to be\n, and every company will need to fill out their own handbooks over time. Our handbook falls under the\nAttribution-ShareAlike 4.0 International license\n.\nInspired by GitLab\nIf your company has been inspired by GitLab‚Äôs handbook, we would love to know what inspired you. Please see our\nInspired by GitLab page\n.\nMake it worthwhile\nAnother company asked how we managed to work with the handbook because at their company it wasn‚Äôt working: ‚ÄúThere are many occasions where something is documented in the knowledge base, but people don‚Äôt know about it because they never bothered to read or search. Some people have a strong aversion against what they perceive as a ‚Äòwall of text‚Äô.‚Äù\nWe attempt to cover this in GitLab‚Äôs\nguide to embracing a handbook-first approach to documentation\n.\nTo ensure that people‚Äôs time is well spent looking at the handbook we should follow the ‚Äòhandbook guidelines‚Äô above, and also:\nFollow the\nwriting style guide\n.\nHave a great search function, plus make it public so you can\nGoogle search\n.\nTest people on their\nknowledge\nduring onboarding.\nGive real examples.\nAvoid corporate speak, describe things like you‚Äôre talking to a friend. For more, see our communications guide on\nSimple Language\n.\nWiki handbooks don‚Äôt scale\nCompany handbooks\nfrequently start as wikis\n.\nThis format is more comfortable for people to work in than a static website with GitLab Merge Requests and GitLab Pages.\nHowever wikis tend to go stale over time, where they are badly organized and get out of date.\nIn wikis it is impossible to make proposals that touch multiple parts of a page and/or multiple pages. Therefore it is hard to reorganize the handbook. Because GitLab Merge Requests and GitLab Pages are based on distributed version control you can split the role of submitter and approver. This allows for a division of work that keeps the handbook up to date:\nAnyone who can read the handbook can make a proposal\nLeaders (who tend to be short on time) only have to approve such a proposal\nWikis also do not encourage collaboration on changes, because there is no way to discuss a proposed change like there is with merge requests.\nSome wikis make it hard to view and/or link to diffs of changes, which is needed to communicate decisions.\nSid and Paul Discussion on the benefits of markdown handbooks and limitations of wikis\nLast modified July 8, 2025:\nEUS - Access Requests Update (\nb88590d3\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5027}
{"doc_id": "8f74b3cb68e3d56b", "url": "https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product", "title": "GitLab the Product | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct sections, stages, groups, and categories\nGitLab the Product\nAbout GitLab the product\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nGitLab the Product\nSingle application\nWe believe that a single application for the DevOps lifecycle\nbased on\nconvention over configuration\noffers a superior user experience. The\nadvantage can be quoted from the\nWikipedia page for convention over\nconfiguration:\n‚Äúdecrease the number of decisions that developers need to make, gaining\nsimplicity, and not necessarily losing flexibility‚Äù. In GitLab you only have to\nspecify unconventional aspects of your workflow. The happy path is\nfrictionless from planning to monitoring\n.\nWe‚Äôre doubling down on our product for concurrent DevOps which brings the entire\nlifecycle into one application and lets everyone contribute. We are leaning into\nwhat our customers have told us they love: our single application strategy, our\npace of iteration, and our deep focus on users.\nConsider opportunities to take advantage of this unique attribute in early\niterations. Integrating features with different parts of the application can\nincrease the adoption of early iterations. Other advantages:\nA minimal viable feature that is well integrated can be more useful than a\nsophisticated feature that is not integrated.\nAlthough not every feature needs to be integrated with other parts of the\napplication, you should consider if there are unique or powerful benefits for\nintegrating the feature more deeply in the second or third iteration.\nGitLab.com\nGitLab.com runs GitLab Enterprise Edition.\nTo keep our code easy to maintain and to make sure everyone reaps the benefits\nof all our efforts, we will not separate GitLab.com codebase from the Enterprise Edition codebase.\nTo avoid complexity,\nGitLab.com tiers and GitLab self-managed tiers\nare named the same.\nGitLab.com subscription scope and tiers\nGitLab.com subscriptions work on a namespace basis, which can mean:\npersonal namespace, e.g.\nJaneDoe/*\ngroup namespace, e.g.\ngitlab-org/\nThis means that group-level features are only available on the group namespace.\nPublic projects get Ultimate for free.\nPublic groups\ndo not\nget Ultimate for free. Because:\nThis would add significant additional complexity to the way we structure our features, licenses and groups. We don‚Äôt want to discourage public groups, yet it wouldn‚Äôt be fair to have a public group with only private projects and for that group to still get all the benefits of Ultimate. That would make buying a license for GitLab.com almost entirely moot.\nAll value of group level features is aimed at organisations, i.e. managers and up (see our\nstewardship\n). The aim with giving all features away for free is to enable and encourage open source projects. The benefit of group-level features for open source projects is significantly diminished, therefore.\nAlternative solutions are hard to understand, and hard to maintain.\nAdmittedly, this is complex and can be confusing for product managers when implementing features.\nIdeas to simplify this are welcome (but note that making personal namespaces equal to groups is not one of\nthem, as that introduces other issues).\nFor more guidance on feature tiers and pricing, visit\ntiering guidance for features\nDeprecations & Removals Policy\nDefinitions\nSee the\nterminology of deprecations\n.\nIs this a breaking change?\nBy definition, a removal is a breaking change. With a\nfew exceptions\n, if the answer is yes to any of the following questions, the change is to be considered a breaking change and should be avoided other than for critical business risk.\nDoes this change require an action from the customer to ensure continuity of function? (For example, removing background upload for object storage meant users needed to migrate objects to a supported object storage provider)\nDoes this change cause a disruption to a customer‚Äôs workflows or tasks? (For example, removing support for the ‚ÄúWIP‚Äù prefix in MRs meant users would need to use the ‚ÄúDraft:‚Äù prefix instead)\nDoes this change cause other parts of the product to fail? (For example, removing certificate-based cluster integration means users can no longer install additional applications via GitLab Managed Apps)\nFor special definitions of what constitutes a breaking change for our APIs, see:\nREST API breaking changes\n.\nGraphQL API breaking changes\n.\nFor\nExperiment\nor\nBeta\nfeatures, please see\nSupport for experiment, beta, and generally available features\n.\nExceptions for breaking changes\nIntroducing a\nbreaking change in a minor release is against policy\nbecause it can disrupt our customers, however there are some rare exceptions:\nWhen GitLab establishes that delaying a breaking change would overall have a\nsignificantly\nmore negative impact to customers compared to shipping it in a minor release.\nIf an integrated service shuts down, the integration can be removed during a minor release.\nIn all cases, the PM or EM must\nfollow the Request a Breaking Change process\n.\nDeprecating and removing features\nDeprecating and removing a feature needs to follow a specific process because it is important that we minimize disruption for our users. As you move through the process, use the language\ndeprecated\nor\nremoved\nto specify the current state of the feature that is going to be or has been removed.\nProcess for deprecating and removing a feature\nPlease follow the\nprocess outlined in the docs\n.\nBreaking Change Windows on GitLab.com\nWe deploy changes to GitLab.com many times a day. Because they are part of a continuous delivery process, these changes, including breaking changes, are not as predictable for customers.\nStarting from GitLab 17.0, we introduced fixed windows during which breaking changes are rolled out to GitLab.com. The fixed windows are set as the Monday, Tuesday and Wednesday of the three weeks preceding the major release date, typically following the X.11 release date. A detailed example of what this looks like can be found in\nour 17.0 introduction issue\n.\nBreaking changes should only be enabled during the breaking change windows. This means that where breaking changes are behind feature flags, the changes (feature flag) should only be switched during one of these windows to ensure customers workflows are not impacted outside of these communicated periods.\nProduct Managers will be responsible for making sure that as part of the deprecations and removals process, where applicable the deprecation/removal is aligned with a publicly communicated Breaking Change Window.\nIn June of 2023, we changed the process so that all deprecations and removals are displayed on\nthe Deprecations page\n.\nThe announcements are grouped by the milestone they will be removed in. The deprecation announcement date is listed below each individual item.\nSyntax deprecation process\nOur CI syntax keeps evolving. We cannot support all keywords indefinitely, so deprecating and removing keywords is inevitable.\nGitLab does not have a versioning system for CI/CD configuration. Therefore, it is critical to over-communicate our deprecation purposes to our users and take the necessary precautions to reduce the impact on their projects. Deprecating a keyword is risky because it will break all pipelines using it, and in some cases, users are not aware of the keyword they use in their pipeline. The deprecation process described below is similar to the\ndeprecating and removing features\nprocess, with additional steps to reduce the risks which involved with removing a CI/CD keyword.\nDeprecation notice - Syntax removal introduces a breaking change, as outlined in our deprecation process, we must notify the community and customers, which means including a deprecation notice in the monthly release post.\nTrack keyword usage - Tracking keyword usage should begin as early as possible. It is a mandatory step that helps estimate the user impact, timing, and needed effort. The more users use the keyword, the more time it takes to remove it (It took more than four years to move from\nremove\nto\ndeprecation\nfor ‚Äôtype‚Äô keyword).\nIn-app warning - Provide our users with an in-app notification that we plan to remove a keyword they use in their pipeline. Our customers will get a notification in each run of the pipeline that uses the deprecated keyword. The warning will be printed:\nAt run time on the pipeline page and logs.\nIn the pipeline editor, while authoring a pipeline.\nThis step is optional if the keyword usage is relatively low (Recommend minimal reach of ~5% impacted users).\nKeyword removal - The keyword will be removed from our code and schema and should happen in a major version. Once removed,  using the keyword will result in a lint error.\nNaming features\nNaming new features or\nrenaming existing features\nis notoriously hard and sensitive to many opinions.\nFactors in picking a name\nIt should clearly express what the feature is, in order to avoid the\nAWS naming situation\n.\nIt should follow\nusability heuristics\nwhen in doubt.\nIt should be common in the industry.\nIt should not overlap with any other existing concepts in GitLab.\nIt should have as few words as possible (so people won‚Äôt use a shortened name).\nIf you remove words from the name, it is still unique (helps to give it as few words as possible).\nWe should also give products descriptive, not distinctive, names, and use prepositions when referring to third-party products and services in names. See our\nProduct Principles\nfor more information.\nProcess\nIt‚Äôs highly recommended to start discussing this as early as possible.\nSeek a broad range of opinions and consider the arguments carefully.\nThe PM responsible for the area involved should make the final decision and not delay the naming.\nNaming should definitely not be a blocker for a feature being released.\nReaching consensus is not the goal and not a requirement for establishing a name.\nRenaming\nThe bar for renaming existing features is extremely high, especially for long-time features with a lot of usage.\nSome valid but not exclusive reasons are:\nNew branding opportunities\nReducing confusion as we introduce new adjacent features\nReducing confusion as we re-factor existing features\nWhen renaming features follow the process\nto rename a category\nstarting with an MR to change the name in\ndata/features.yml\n. Request review by the Product Director and Engineering Director of your Section for approval. Optionally, add a comment including your technical writer, engineering manager, product design manager, and product designer for transparency.\nWhen renaming a feature other items to consider are updates to documentation, blogs, direction pages and competitive information.\nUsing What‚Äôs New to communicate updates to users\nWhat‚Äôs New is a feature that is part of GitLab.com and Self-managed GitLab that is used to communicate highlights from each release. After each major release, a\nyaml file is published\nthat contains 3-10 highlights from the release along with links to the relevant documentation to get started using them.\nA small notification dot appears above the ‚Äú?‚Äù icon, and when users click on ‚ÄúWhat‚Äôs new‚Äù in the menu, a drawer containing the updates slides into view.\nThe goal of What‚Äôs New is to make it easy for users to be aware of the most important changes in GitLab so we can help them stay up-to-date on all of our changes and feature updates.\nPermissions in GitLab\nUse this section as guidance for using existing features and developing new ones.\nGuests are not active contributors in private projects. They can only see, and leave comments and issues.\nReporters are read-only contributors: they can‚Äôt write to the repository, but can on issues.\nDevelopers are direct contributors, and have access to everything to go from idea to production,\nunless something has been explicitly restricted (e.g. through branch protection).\nMaintainers are super-developers: they are able to push to master, deploy to production.\nThis role is often held by maintainers and engineering managers.\nAdmin-only features can only be found in\n/admin\n. Outside of that, admins are the same as the highest possible permission (owner).\nOwners are essentially group-admins. They can give access to groups and have\ndestructive capabilities.\nAuditor cannot access\n/admin\n, group settings, and project settings. Auditor has read-only access to all other areas.\nTo keep the permissions system clear and consistent we should improve our roles to match common flows\ninstead of introducing more and more permission configurations on each resource, if at all possible.\nFor big instances with many users, having one role for creating projects, doing code review and managing teams may be insufficient.\nSo, in the long term, we want our permission system to explicitly cover the next roles:\nAn owner. A role with destructive and workflow enforcing permissions.\nA manager. A role to keep a project running, add new team members etc.\nA higher development role to do code review, approve contributions, and other development related tasks.\nAll the above can be achieved by iteratively improving existing roles.\nDocumentation on permissions\nSecurity Paradigm\nYou can now find our\nsecurity paradigm\non the\nSecure Strategy\npage.\nAlso see our\nSecure Team engineering handbook\n.\nStatistics and performance data\nTraditionally, applications only reveal valuable information about usage and\nperformance to administrators. However, most GitLab instances only have a handful of\nadmins and they might not sign in very often. This means interesting data is rarely\nseen, even though it can help to motivate teams to learn from other teams,\nidentify issues or simply make people in the organisation aware of adoption.\nTo this end, performance data and usage statistics should be available to all users\nby default. It‚Äôs equally important that this can be optionally restricted to admins-only,\nas laws in some countries require this, such as Germany.\nInternationalisation\nGitLab is developed in English, but supports the contribution of other\nlanguages.\nGitLab will always default to English. We will not infer the language /\nlocation / nationality of the user and change the language based on that.\nYou can‚Äôt safely infer user preferences from their system settings either.\nTechnical users are used to this, usually writing software in English,\neven though their language in the office is different.\nPerformance\nFast applications are better applications. Everything from the core user experience,\nto building integrations and using the API is better if every query is quick, and\nevery page loads fast. When you‚Äôre building new features, performance has to be top of mind.\nWe must strive to make every single page fast. That means it‚Äôs not acceptable for new\npages to add to performance debt. When they ship, they should be fast.\nYou must account for all cases, from someone with a single object, to thousands of objects.\nRead the handbook page relating to\nperformance of GitLab.com\n, and note the Speed Index target shown there\n(read it thoroughly if you need a detailed overview of performance). Then:\nMake sure that new pages and interactions meet the Speed Index target.\nExisting pages should never be significantly slowed down by the introduction of new features\nor changes.\nPages that load very slowly (even if only under certain conditions) should be sped up by\nprioritizing work on their performance, or changes that would lead to improved page load speeds\n(such as pagination, showing less data, etc).\nAny page that takes more than 4 seconds to load (speed index) should be considered too slow.\nUse the\navailability & performance priority labels\nto communicate and prioritize issues relating to performance.\nYou must prioritize improvements according to their impact (per the\navailability & performance priority labels\n).\nPages that are visited often should be prioritized over pages that rarely have any visitors.\nHowever, if page load time approaches 4 seconds or more, they are considered no longer\nusable and should be fixed at the earliest opportunity.\nRestriction of closed source JavaScript\nIn addition, to meet the\nethical criteria of GNU\n,\nall our JavaScript code on GitLab.com has to be free as in freedom.\nRead more about this on\nGNU‚Äôs website\n.\nWhy cycle time is important\nThe ability to monitor, visualize and improve upon cycle time (or: time to\nvalue) is fundamental to GitLab‚Äôs product. A shorter cycle time will allow you\nto:\nrespond to changing needs faster (i.e. skate to where the puck is going to be)\nship smaller changes\nmanage regressions, rollbacks, bugs better, because you‚Äôre shipping smaller changes\nmake more accurate predictions\nfocus on improving customer experience, because you‚Äôre able to respond to their needs faster\nWhen we‚Äôre adding new capabilities to GitLab, we tend to focus on things that\nwill reduce the cycle time for our customers. This is why we choose\nconvention over configuration\nand why we focus on automating the entire software development lifecycle.\nAll friction of setting up a new project and building the pipeline of tools you\nneed to ship any kind of software should disappear when using GitLab.\nPlays well with others\nWe understand that not everyone will use GitLab for everything all the time,\nespecially when first adopting GitLab. We want you to use more of GitLab because\nyou love that part of GitLab. GitLab plays well with others, even when you use\nonly one part of GitLab it should be a great experience.\nGitLab ships with built-in integrations to many popular applications. We aspire\nto have the world‚Äôs best integrations for Slack, JIRA, and Jenkins.\nMany other applications\nintegrate with GitLab\n, and we are open to adding new integrations to our\ntechnology partners page\n. New integrations with GitLab can vary in richness and complexity; from a simple webhook, and all the way to a\nProject Service\n.\nGitLab\nwelcomes and supports new integrations\nto be created to extend collaborations with other products.\nGitLab plays well with others by providing APIs for nearly anything you can do within GitLab.\nGitLab can be a\nprovider of authentication\nfor external applications.\nThere is some natural tension between GitLab being a single-application for the\nentire DevOps lifecycle, and our support for better user experience via integration\nwith existing DevOps tools. We‚Äôll prioritize first our efforts to improve the single-application\nexperience, second to enable a rich ecosystem of partners, and third to improve integration with the broader ecosystem\nto other tools. GitLab is open-source so this should not prohibit contributors adding\nintegrations for anything that they are missing - as long as it fits with GitLab product vision.\nIf you don‚Äôt have time to contribute and are a customer we‚Äôll gladly work with you to design the API addition or integration you need.\nAdvantages of a single application\nDiscussing the advantages of having a single application\nLast modified July 4, 2025:\nMove division specific includes to folder (\na74a8182\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3041}
{"doc_id": "f076d4af39124613", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure", "title": "Infrastructure | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure\nThe Infrastructure Department is responsible for the availability, reliability, performance, and scalability of GitLab.com and other supporting services\nMission\nThe Infrastructure Department enables GitLab (the company) to deliver a single DevOps application, and GitLab SaaS users to focus on generating value for their own businesses by ensuring that we operate an enterprise-grade SaaS platform.\nThe Infrastructure Department does this by focusing on\navailability\n,\nreliability\n,\nperformance\n, and\nscalability\nefforts.\nThese responsibilities have cost efficiency as an additional driving force, reinforced by the properly prioritized\ndogfooding\nefforts.\nMany other teams also contribute to the success of the SaaS platform.\nHowever, it is the responsibility of the Infrastructure Department to drive the ongoing evolution of the SaaS platform, enabled by platform observability data.\nGetting Assistance\nIf you‚Äôre a GitLab team member and are looking to alert the Infrastructure teams about an availability issue with GitLab.com, please find quick instructions to report an incident here:\nReporting an Incident\n.\nFor all other queries, please see the\ngetting assistance\npage.\nVision\nThe Infrastructure Department operates a fast, secure, and reliable SaaS platform to which (and with which)\neveryone can contribute\n.\nIntegral part of this vision is to:\nBuild a highly performant team of engineers, combining operational and software development experience to influence the best in reliable infrastructure.\nWork publicly in accordance with our\ntransparency\nvalue.\nUse our own product\nto prepare, build, deliver work, and support the company strategy\nAlign our strategy with the industry trends, company direction, and end customer needs.\nDirection\nThe direction is accomplished by using Objectives and Key Results (OKRs).\nOther strategic initiatives to achieve this vision are driven by the needs of enterprise customers looking to adopt GitLab.com.\nThe GitLab.com strategy\ncatalogs top customer requests for the SaaS offering and outlines strategic initiatives across both Infrastructure and Stage Groups needed to address these gaps.\nWe are also Product Development\nUnlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our\ncore values\n:\nDogfooding\nEveryone can contribute\nAs such, everyone in the department should be familiar with, and be acting upon, the following statements:\nWe should all feel comfortable contributing to the GitLab open source project\nIf we need something, our first instinct should be to get it into the open source project so it can be given back to the community\nTry to get it in the open source project first, rather than later, even if it‚Äôs 2x harder\nWe should be using the whole product to do our jobs\nWe are all familiar with our\nDogfooding process\nand follow it\nWe should not expect new team members to join the company with these instincts, so we should be willing to teach them\nIt is part of managers‚Äô responsibility to teach these values and behaviors\nOrganization structure\n(click the boxes for more details)\nflowchart LR\nI[Infrastructure Platforms]\nclick I \"/handbook/engineering/infrastructure/\"\nI --> DA[Data Access]\nclick DA \"/handbook/engineering/infrastructure-platforms/data-access/\"\nI --> D[Dedicated]\nclick D \"/handbook/engineering/infrastructure/team/gitlab-dedicated/\"\nI --> DE[Developer Experience]\nclick DE \"/handbook/engineering/infrastructure-platforms/developer-experience/\"\nI --> PE[Production Engineering]\nclick PE \"/handbook/engineering/infrastructure-platforms/production-engineering/\"\nI --> SD[Software Delivery]\nclick SD \"/handbook/engineering/infrastructure/team/delivery/\"\nI --> TS[Tenant Scale]\nclick TS \"/handbook/engineering/infrastructure-platforms/tenant-scale/\"\nDA --> GC[Gitaly]\nclick GC \"/handbook/engineering/infrastructure-platforms/data-access/gitaly/\"\nDA --> Git[Git]\nclick GG \"/handbook/engineering/infrastructure-platforms/data-access/git/\"\nDA --> DF[Database Framework]\nclick DF \"/handbook/engineering/infrastructure-platforms/data-access/database-framework/\"\nDA --> DO[Database Operations]\nclick DO \"/handbook/engineering/infrastructure-platforms/data-access/database-operations/\"\nDA --> DU[Durability]\nclick DU \"/handbook/engineering/infrastructure-platforms/data-access/durability/\"\nD --> E[Environment Automation]\nclick E \"/handbook/engineering/infrastructure/team/gitlab-dedicated/\"\nD --> PSS[Public Sector Services]\nclick PSS \"/handbook/engineering/infrastructure/team/gitlab-dedicated/us-public-sector-services/\"\nD --> Switchboard\nclick Switchboard \"/handbook/engineering/infrastructure/team/gitlab-dedicated/switchboard/\"\nDE --> EA[Development Analytics]\nclick EA \"/handbook/engineering/infrastructure-platforms/developer-experience/engineering-analytics/\"\nDE --> DT[Developer Tooling]\nclick DT \"/handbook/engineering/infrastructure-platforms/developer-experience/developer-tooling/\"\nDE --> FE[Feature Readiness]\nclick FE \"/handbook/engineering/infrastructure-platforms/developer-experience/\"\nDE --> PER[Performance Enablement]\nclick PER \"/handbook/engineering/infrastructure-platforms/developer-experience/performance-enablement/\"\nDE --> TG[Test Governance]\nclick TG \"/handbook/engineering/infrastructure-platforms/developer-experience/test-governance/\"\nPE --> CC[Cloud Connector]\nclick CC \"/handbook/engineering/infrastructure/team/cloud-connector/\"\nPE --> Foundations\nclick Foundations \"/handbook/engineering/infrastructure-platforms/production-engineering/foundations/\"\nPE --> Observability\nclick Observability \"/handbook/engineering/infrastructure/team/scalability/\"\nPE --> Ops\nclick Ops \"/handbook/engineering/infrastructure/team/ops/\"\nPE --> Runway\nclick Ops \"/handbook/engineering/infrastructure/team/runway/\"\nSD --> DB[Build]\nclick DB \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution/\"\nSD --> DD[Deploy]\nclick DD \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution/\"\nSD --> FR[Framework]\nclick FR \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/framework/\"\nSD --> RE[Releases]\nclick RE \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/delivery/\"\nSD --> SM[Self-managed]\nclick SM \"/handbook/engineering/infrastructure-platforms/gitlab-delivery/delivery/\"\nTS --> Geo\nclick Geo \"/handbook/engineering/infrastructure-platforms/tenant-scale/geo/\"\nTS --> Organizations\nclick Organizations \"/handbook/engineering/infrastructure-platforms/tenant-scale/organizations/\"\nTS --> Cells\nclick Cells \"/handbook/engineering/infrastructure-platforms/tenant-scale/cells-infrastructure/\"\nTechnical Roadmap\nInfrastructure maintains a\nTechnical Roadmap\nfor planning projects over the short (1y), medium (2y), and long term (3y).\nThis serves as our strategic compass,\nhelping us balance immediate needs with long-term sustainability.\nThe Technical Roadmap is based on the\nProduct Roadmap\n,\nwhere Product provides the ‚ÄúWhat‚Äù (customer needs) and ‚ÄúWhy‚Äù (business strategy).\nEngineers then determine the ‚ÄúHow‚Äù (technical implementation),\nwhile Engineering Managers plan the ‚ÄúWhen‚Äù (scheduling).\nThis comprehensive roadmap emphasizes building high-quality,\ncomplete features in a sustainable manner.\nThe Technical Roadmap serves three key purposes:\nIt helps build engineering excellence by addressing critical areas that might not show up in product backlogs,\nsuch as technical debt, performance improvements, platform improvements, and system scalability.\nIt enables the department to be proactive rather than reactive.\nBy regularly asking key questions like ‚ÄúWhere do we see the biggest instability in our systems?‚Äù or\n‚ÄúWhat is generating the most toil?‚Äù, we can address issues before they become critical problems.\nThis helps maintain our SLOs and keeps our customers happy.\nIt aligns engineering efforts with business goals, ensuring technical improvements drive GitLab‚Äôs success.\nEach technical roadmap item is prioritized based on business value and strategic alignment.\nCurrent State\nThe Infrastructure Roadmap is maintained as a static site.\nGitLab team-members can review the current technical roadmap,\nat\ninfra-roadmap.gitlab.com\n.\n:\nThe Infrastructure Roadmap is not publicly available as some of the projects and\ninitiatives may be considered\nunSAFE\n.\nThe site presents the roadmap in a visual manner, showing:\nDependencies between planned initiatives\nFiltering options by confidence, stage, or tags\nIndividual roadmaps for each stage within the department\nImpact analysis through dependency visualization\nUpdating the Roadmap\nChanges to the Roadmap are made through merge requests to the\ninfra-roadmap\nproject.\nThe data is stored in YAML format, and changes can be made by editing the YAML.\nThis allows for version control and collaborative discussion through the merge request process.\nFull instructions for making changes to the Infrastructure Roadmap are available\nin\nthe project‚Äôs README.md\n.\nEveryone is encouraged to contribute to the roadmap,\nwhether proposing new initiatives or making smaller changes\nlike updating descriptions or adding links to relevant issues.\nDesign\nThe\nInfrastructure Library\ncontains documents that outline our thinking about the problems we are solving and represents the\ncurrent state\nfor any topic, playing a significant role in how we produce technical solutions to meet the challenges we face.\nDogfooding\nThe Infrastructure department uses GitLab and GitLab features extensively as the main tool for operating many\nenvironments\n, including GitLab.com.\nWe follow the same\ndogfooding process\nas part of the Engineering function, while keeping the\ndepartment mission statement\nas the primary prioritization driver. The prioritization process is aligned to\nthe Engineering function level prioritization process\nwhich defines where the priority of dogfooding lies with regards to other technical decisions the Infrastructure department makes.\nWhen we consider building tools to help us operate GitLab.com, we follow the\n5x rule\nto determine whether to build the tool as a feature in GitLab or outside of GitLab. To track Infrastructure‚Äôs contributions back into the GitLab product, we tag those issues with the appropriate\nDogfooding\nlabel.\nHandbook use at the Infrastructure department\nAt GitLab, we have a\nhandbook first policy\n. It is how we communicate process changes, and how we build up a single source of truth for work that is being delivered every day.\nThe\nhandbook usage page guide\nlists a number of general tips. Highlighting the ones that can be encountered most frequently in the Infrastructure department:\nThe wider community can benefit from training materials, architectural diagrams, technical documentation, and how-to documentation. A good place for this detailed information is in the related project documentation. A handbook page can contain a high level overview, and link to more in-depth information placed in the project documentation.\nThink about the audience consuming the material in the handbook. A detailed run through of a GitLab.com operational runbook in the handbook might provide information that is not applicable to self-managed users, potentially causing confusion. Additionally, the handbook is not a go-to place for operational information, and grouping operational information together in a single place while explaining the general context with links as a reference will increase visibility.\nEnsure that the handbook pages are easy to consume. Checklists, onboarding, repeatable tasks should be either automated or created in a form of template that can be linked from the handbook.\nThe handbook is the process. The handbook describes our principles, and our epics and issues are our principles put into practice.\nProjects\nClassification of the Infrastructure department projects is described on the\ninfrastructure department projects page\n.\nThe\ninfrastructure issue tracker\nis the backlog and a catch-all project for the infrastructure teams and tracks the work our teams are doing‚Äìunrelated to an ongoing change or incident.\nIn addition to tracking the backlog, Infrastructure Department projects are captured in our\nInfrastructure Department Epic\nas well as in our\nQuarterly Objectives & Key Results\nSupporting Product Features\nWe have a model that we use to help us support product features.\nThis model\nprovides details on how we collaborate to ship new features to Production.\nStable Counterparts\nInfrastructure SREs may be aligned with\nstage groups\nas\nstable counterparts\n.\nStable Counterparts\nare used as a framework for managing reliable services at GitLab.  The framework provides guidelines for collaboration between\nStage Groups\nand\nInfrastructure Teams\n.\nInterviewing\nThe Infrastructure department hires for a number of different technical specialisms and positions across its teams. This\nInfrastructure Interviewing Guide\noffers more detail on some of our regular openings, interview process and other useful information related to applying to jobs with us. More information on our current openings can be found on the\ncareers page\n.\nHow we do Incident Management for GitLab.com\nGitLab.com status information\nSlack Channels\n#production\n#infrastructure-lounge\n#incidents-dotcom\n#announcements\n#feed_alerts-general\nGeneral Issue Trackers\nInfrastructure issue queue\nProduction incidents, and changes\nDelivery\nScalability\nResources\nProduction Architecture\nOperational Runbooks\nEnvironments\nMonitoring\nReadiness Reviews\nInfrastructure Standards\nOther Pages\nOn-call Handover\nSRE Onboarding\nGitLab.com data breach notification policy\nCoding at scale\nDatabase\nDatabase Reliability at GitLab The group of Database Reliability Engineers (DBREs) are on the ‚Ä¶\nEngineering Productivity team\n‚ÑπÔ∏è Note: This page is deprecated. The team has been restructured as Development Analytics and ‚Ä¶\nGetting Assistance on Infrastructure Platforms\nHow to get assistance for problems on Production Platforms\nIncident Management\nIf you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶\nInfrastructure Environments\nEnvironments The Terraform configuration for the environments can be found in config-mgmt.\nFuture ‚Ä¶\nInfrastructure Product Management\nResponsibilities The responsibilities of the Infrastructure Product Manager are documented in the ‚Ä¶\nProduction\nIf you‚Äôre a GitLab team member and are looking to alert Reliability Engineering about an ‚Ä¶\nRate Limiting\nThis page exists to consolidate GitLab Rate Limiting documentation into a single source of truth. It is intended to reflect the current state of our rate limits, with the target audience being Operators (SRE and Support team members).\nTeam\nSee the Infrastructure Platforms Organizational Structure for teams in Infrastructure.\nThe Infrastructure Platforms Section\nMission The Infrastructure Platforms section enables GitLab Engineering to build and deliver safe, ‚Ä¶\nLast modified July 17, 2025:\nRemoves outdated strategy page (\n387298cd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1921}
{"doc_id": "7d2efca848afc3b9", "url": "https://handbook.gitlab.com/handbook/about/editing-handbook", "title": "Editing the Handbook | The GitLab Handbook", "text": "The Handbook\nAbout the Handbook\nEditing the Handbook\nInformation on how to edit the handbook including tips and troubleshooting.\nThis page focuses on how to edit the handbook.\nPlease see the\nhandbook usage page\nfor how and why we use the handbook, and other\ndocs pages\nfor further reference.\nThis page is intended to be complementary to\nUsing GitLab at GitLab\n.\nReviewing the\nGitLab 101\npage may also be useful.\nHave your own practical Handbook editing tips? Drop a video below!\nTip\nUse AI to edit the handbook faster, and learn about\nAnthropic Claude\nand\nGitLab Duo\n.\nAdd yourself to the team page\nFor how to add yourself to the team page, see the\nadd yourself to team guide\n.\nMarkdown formatting\nFor how to format markdown in the handbook, see the\nmarkdown style guide\n,\nwhich includes how to embed videos.\nUse the Web IDE to edit the handbook\nA typical workflow to edit the handbook:\nUse the Web IDE to make changes\n.\nCommit changes\n.\nCreate a merge request\n,\nassign reviewers\n.\nApply suggestions\nif any, or make further changes if needed.\n‚ÄúSet to auto-merge‚Äù, or merge once all suggestions are resolved and you have the necessary approvals.\nWeb IDE steps to create a new MR\nNavigate to the handbook page you want to edit. At the bottom, or on the right, click on the URL\nto open the new Web IDE.\nAlternatively, open the\npublic handbook\nproject and select\nWeb IDE\nfrom the edit actions. This requires you to navigate into the source tree where the handbook files are located.\nFamiliarize yourself with the\nWeb IDE\n:\nThe menu sections are located on the left\nThe explorer section provides the file tree for the project, which is opened automatically when editing a handbook file. (keyboard shortcut:\nShift+Cmd+E\n)\nThe editing view is on the right side. On top, there are tabs to organize open files.\nAdditional meta information is provided at the bottom. Git branch, problems, current line number, spaces for indentation, encoding, end-of-line sequence, language mode, layout, notifications.\nTip:\nHover over the menu sections and items to learn more about their purpose and keyboard shortcuts.\nEdit the selected file, and try the Markdown preview.\nCmd+Shift+P\non macOS opens the Web IDE command palette to search for commands. For example, type\nMarkdown\n, select\nMarkdown: Open Preview to the Side\nand try the preview.\nNote that the\nhandbook markdown engine\nsupports more rendering features than the\nWeb IDE preview based on VS Code\n, and some items won‚Äôt be rendered properly. Commit and create a\ndraft merge request\nto view the handbook\nreview apps\nto preview the page, such as to verify embedded images.\nUpload new files by right-clicking and selecting\nUpload...\nfor example images into\nstatic/images/handbook/\nand the corresponding file tree, following the handbook directories.\nNote the\nimages section\nin the markdown guide.\nOpen the\nSource Control\nicon on the left menu which has a colored marker for counting the file changes. Tip: Keyboard shortcut\nCtrl+Shift+G\n.\nReview the changed files, and once ready, specify a Git commit message. The message should be a brief (less than 120 characters) description of your changes.\nClick on the ‚ãÅ on the right side of the\nCommit and push\nbutton, and choose the\nCreate new branch and commit\noption. Keyboard shortcut:\nCmd+Enter\n.\nSpecify a new Git branch name (optional). Press\nEnter\nto continue. This action pushes the changes into the Git repository. The changes are persisted on the GitLab server and are immediately visible in the project view.\nCheck the pop-up at the bottom right, and click\nCreate Merge Request\nto open the GitLab MR tab. Tip: The notification bell icon at the bottom brings back the notification, if accidentally dismissed.\nFill in the MR template, provide why the merge request is created, add labels (optionally using quick actions,\n/label ~handbook\n), assign yourself (\n/assign me\n), and set the branch to delete when merged. Optionally, use the\ndraft option\nto prevent merging until ready.\nTip\n: Practice the keyboard shortcuts for your workflows: After making changes,\nControl+Shift+G\nto commit,\nCmd+Enter\n, Cursor to select the branch,\nEnter\n, etc.\nNote:\nThe\nCmd+w\nkeyboard shortcut to close a file tab in the Web IDE gets overridden by the Chrome browser to close the browser tab. This is a\nknown problem\n, use this shortcut carefully.\nWeb IDE steps to edit an existing MR\nIf you are editing an existing merge request (MR), there are 2 main differences from creating a new MR:\nwhere to open the editor, and where to commit to.\nMake additional changes to the MR: Select\nCode > Open in Web IDE\non the upper right menu. This opens the Web IDE again to make changes. All changed files are opened automatically.\nMake changes (see previous section for details), go to the\nSource Control\narea, add a commit message, and click on the\nCommit and push\nbutton. If you create a new branch, you will end up with a new MR instead of editing the existing one.\nOptional: Follow the pop-up notification to navigate back to the MR. Alternatively, close the editor tab if you did not close the MR tab.\nVideo: Editing using the Web IDE and single file editor\nNote: The video shows the old\nwww-gitlab-com\nproject. The editing process, however, is the same.\nThis video covers:\nEditing the marketing handbook as example\naction using the Web IDE, overview walkthrough, editing the handbook, again creating a merge request with the same actions.\nPractical handbook edit tips shown in this handbook.\nHistorical videos\nthe instructions cannot be followed exactly since the editor and repository in GitLab has changed\n.\nCreating new handbook pages and multimedia embedding best-practices\nHow to move the location of a handbook page\nChanging a page name and subsequent updates\nCreating mermaid diagrams\nCreating issue templates\nAdding images to the handbook and handbook analytics\nHow to add a new directory and page to the handbook\nHow to rebase to fix a failing pipeline after fix is merged to main\nWhy a handbook pipeline is failing\nHow to identify why a pipeline is failing\nEditing the handbook locally\nSet up an\nSSH key\nto use with GitLab, if you have not previously done so.\nSet up Git\nand clone the appropriate repository, such as the\npublic handbook\n.\nUse your editor of choice to make changes. If you use\nVisual Studio Code\noptionally along with the\nGitLab Workflow extension for VS Code\n, you can follow the\nWeb IDE editing instructions\n.\nPush the changes to GitLab\n.\nCreate a merge request.\nAdditional notes:\nWe don‚Äôt need\n.gitkeep files\nin our handbook, they make it harder to quickly open a file in editors. Don‚Äôt add them, and delete them when you see them.\nIf you want to install a local version of the website to test and preview things locally,\nsee the\nhandbook development page\nfor instructions on how to set it up.\nPreview changes on GitLab\nTo preview your changes, deploy the review app:\nWait for the pipeline on the merge request (MR) to complete.\nEither on the ‚ÄúPipelines‚Äù tab, or in the pipeline widget on the ‚ÄúOverview‚Äù tab of the MR, click on the circles that denote the different pipeline stages until you find the\nStage:deploy\nand the\npages\njob.\nNext to the\npages\njob name, click on the ‚Äúplay‚Äù button.\nOnce\ntwo\npages\njobs complete, in the pipeline widget on the ‚ÄúOverview‚Äù tab of the MR, click on the ‚ÄúView app‚Äù button.\nYou may need to navigate to your page by going to any page, then using the left navigation tree. Do not use the search for this.\nIf you prefer to edit the URL, note that the review app uses a\n.html\nending, so if your page is\ncontent/handbook/path/to/page.md\n, the URL will be\nreview/app/public/handbook/path/to/path.html\n.\nIf you need the review app deployed after every change on a MR, you can add the\n~\"deploy-review-app-always\"\nlabel to always trigger the job, including on MR creation.\nFor more information about how the review apps are configuration for the handbook projects, please see the\nHandbook Pages Deployment\n.\nNaming pages and folder structure\nThe site uses the concept of page bundles, sections, and leaf pages.  A section can have multiple leaf pages, which requires a\n_index.md\nfor the section.  A page bundle is a single page with a group of images, which can be an\nindex.md\n.\nIn general, Handbook URLs should describe their content and be as clean and easy to remember as possible.\nDirectories (folders) and pages should use lowercase\na-z\n, hyphen\n-\n, and underscore\n_\n.\nWhile Git and Hugo allow any UTF-8 character to be used in the file path, using other characters (such as a space) can cause issues with the pipeline, and thus, disallowed.\nSection:\nsection-dir/\nPage bundle:\npage-name/\nSection with a page bundle:\nsection-dir/\nMoving, deleting, or renaming a page\nIf you delete, rename, or move a page, you should:\nupdate all existing links\nin the handbook\nand\ninternal handbook.\nNote: When searching for links, use the page name. Sometimes links use page-relative links, meaning it doesn‚Äôt use the full path.\nPlease also consider searching for and updating handbook links in other places, such as\ndocs\nand project templates in\ngitlab-com\nand\ngitlab-org\n.\nadd a redirect\n.\nEditing page maintainers\nOn the right side of the page, there is a list ‚ÄúMaintainers‚Äù.\nThe list is generated from the\nfile in the relevant repository, such as in\nthe handbook repository\n:\nOnly specific users are listed. Members of a group are not listed.\nThe list is generated based on the most specific path:\nIf users are specified for a directory and then for a specific page in that directory,\nthe list only includes the users for the specific page.\nIf groups or subgroups are listed for a specific page without any specific users,\nthe list of maintainers is empty.\nChanges to the\n.gitlab/CODEOWNERS\nfile require approval.\nReview the bot comment for instructions on how to get the appropriate approval.\nEditing content from shortcodes\nWhen trying to edit content, you may encounter content that is ‚Äúbuilt‚Äù using\nshortcodes\nand data files.\nShortcodes look similar to\n{{\n% performance-indicators \"ux_department\" %\n}}\n.\nWhen you encounter content in a shortcode and want to edit it:\nLook for the shortcode in the\nshortcodes folder\n.\nIn the above example, it‚Äôs\nperformance-indicators\n.\nAt the top of the shortcode file should be a comment on where to look for the relevant data file. Ensure you‚Äôre using ‚ÄúDisplay source‚Äù to view the file.\nFor example, look in\nhttps://gitlab.com/gitlab-com/www-gitlab-com/-/tree/master/data/performance_indicators\nfor the\nux_department\nfile.\nIf there is no comment, you can post in\n#handbook\nto get help, and make a MR to add it.\nEdit the file\n, being careful to match the existing formatting.\nTeam member merge requests being labeled as Community contributions\nIf you recently created a merge request that was labeled as a Community contribution, you can fix this mislabeling issue going forward by updating the GitLab username in your personal entry in the team member directory to match the GitLab account you use for work.\nUse the\nteam page editing instructions\nto find your team page entry file, and update the\ngitlab\nattribute (typically found on line 10) to be an\nexact match\nfor the GitLab.com username you use for work.\nTroubleshooting\n404 errors with edit action\nWhen clicking on\nin the upper right corner on a handbook page in your browser, you might get a\n404\nerror in the GitLab Web IDE.\nAs a team member, this problem can be related to an expired SAML session for your GitLab.com profile. In order to mitigate and solve the problem, click on\nView page source\nto trigger the SAML authentication with Okta again.\nAlternatively, navigate into our GitLab.com profile into\nyour To-Do list\n, or try to open a confidential issue, to trigger the authentication.\nIt can also be browser related: Try clearing the cache, open an incognito window (on macOS:\ncmd shift n\n), or use a different browser to test.\n404 on new page\nIf a new page is created as part of a merge request, but the page is not showing up on the site,\ncheck the file name.\nThe most common issue is using\nindex.md\ninstead of\n_index.md\nin a folder that has other pages.\nThe other pages will not display.\nSee\npages and folder structure\nfor more information.\nImages not loading properly\nIf you added new images and they are not loading properly in your review app, please review the\nImages section of the markdown guide\n.\nFailing pipelines\nTo see why your pipeline is failing, there are two main places to look:\nThe latest comment by the bot on your merge request. It should have a list of all linter errors. However, build errors do not generate a comment.\nIndividual failed jobs. On the MR > ‚ÄúPipelines‚Äù tab > select any red circle > select a failed job. Error messages are near the bottom of the job log and start with\nError\n.\nIn the job log, error messages typically provide you:\nthe error\nthe file where the error occurred\nthe line number\nthe character number (where on the line it is)\nFor example:\nError: error building site: assemble: \"/builds/gitlab-com/content-sites/handbook/content/handbook/security/security-assurance/field-security/trust_center_guide.md:1:2\": closing tag for shortcode 'details' does not match start tag\nFile:\ncontent/handbook/security/security-assurance/field-security/trust_center_guide.md\nLine: 1\nCharacter: 2\nTo fix markdown errors, review the message. Alternatively, review the relevant section in the\nmarkdown style guide\n.\nFor all other errors, the error message should provide the information necessary to fix it.\nSee the below sections for more details on how to resolves specific types of issues.\nIf the problem was on the\nmain\nbranch, you may need to\nrebase\n.\nIf you‚Äôre unsure, you can\nreach out for help\n.\nLink and anchor errors\nThere is a linter (Hugolint) that validates links and anchors across the handbook. If your change introduces\nnew\nbroken links, then the pipeline job will fail. Follow the instructions in the\nprevious failing pipelines section\nfor how to find the list of errors.\nThere are two main reasons it will fail:\nContent added in the MR includes a broken link.\nContent changed in the MR breaks an existing link.\nHere‚Äôs an example of a failed\nhugolint\njob error message when viewed in the job log:\nNewly broken (only in \"linkcheck.json\", 3 issues):\n‚ùå [content/handbook/security/product-security/_index.md:43]: <major> Link destination \"architecture/\" does not exist\n‚ùå [content/handbook/security/product-security/security-architecture/_index.md:269]: <major> Link destination \"/handbook/business-technology/tech-stack/#panther\" does not exist\n‚ùå [content/handbook/security/product-security/security-architecture/zero-trust.md:45]: <major> Link destination \"/handbook/security/corporate/systems/#laptop-or-desktop-system-configuration\" does not exist\nThe error starts with the file where the broken link is present, followed by the line number.\n(For example, file path -\ncontent/handbook/security/product-security/_index.md\n, line number: 43.)\nNext, the error indicates which link is broken. (For example,\narchitecture/\nis the broken link destination.)\nFor broken or non-existent anchor links (for example,\n#panther\n):\nDid the MR change a heading that is being linked to? If so, you‚Äôll need to update the linked anchor to match the new heading.\nIf you‚Äôre linking to a heading, does it exists? Check the file in the repository instead of on the website. The links are checked pre-build, so generated content (from shortcodes and includes) don‚Äôt ‚Äúexist‚Äù for the link checker.\nIf the page you‚Äôre linking to has a large amount of generated content (such as performance indicator pages), you can\nadd an exclusion to\nhugolint\nin the relevant configuration file.\nFixing default branch errors\nMR pipelines should catch almost all errors before they are merged into the relevant repository.\nThe handbook projects also pull data from\nwww-gitlab-com\nyml\nfiles.\nIf the default branch\nmain\n(for public and internal handbook) or\nmaster\n(for\nwww-gitlab-com\n)\nis ‚Äúbroken‚Äù and pipelines are failing for everyone, the root issue is most likely a data file error.\nCheck the error message.\nIf it mentions an error in building the site, or rendering something, follow the trace.\nIn the layout file, if it‚Äôs failing on displaying on something\nthat starts with\nsite.Data.public.\n, then it‚Äôs a data file issue.\nThere are two ways to fix. Either:\nMake the code itself more robust to deal with the types of values it may encounter.\nHowever, not everyone knows Go and Hugo well enough to do that quickly.\nIf needed, create a ‚ÄúHandbook::Operations‚Äù ‚Äútype::bug‚Äù issue in the handbook repository to document the problem\nafter fixing the pipeline issue.\nEdit the data file to have values the build won‚Äôt fail on.\nExample: Fixing broken main on tech writing shortcode\nConsider this\nexample error\n:\nError: error building site: failed to render shortcode: \"/builds/gitlab-com/content-sites/handbook/content/handbook/product/ux/technical-writing/_index.md:126:1\": failed to render shortcode \"tech-writing\": failed to process shortcode: \"/builds/gitlab-com/content-sites/handbook/layouts/shortcodes/tech-writing.html:16:28\": execute of template failed: template: shortcodes/tech-writing.html:16:28: executing \"shortcodes/tech-writing.html\" at <ref page (printf \"/handbook/product/categories#%s-section\" $section)>: error calling ref: parse \"/handbook/product/categories#%!s(<nil>)-section\": invalid URL escape \"%!s\"\nFollowing the error trace, notice that the last error with a full path and line number is:\nfailed to process shortcode: \"/builds/gitlab-com/content-sites/handbook/layouts/shortcodes/tech-writing.html:16:28\"\n.\nLooking\nat the\ntech-writing\nshortcode\n,\nthe issue is an unexpected value in\nprintf \"/handbook/product/categories#%s-section\" $section\n,\nwhich matches the last part of the error message.\nFrom there,\nline 11 of the\ntech-writing\nshortcode\ntells us that the data is from\nsite.Data.public.stages.stages \"section\"\n.\nIf you have a local build of the site, you can find all the data files in the\ndata/public\nfolder.\nThe relevant file (usually a\nyml\nfile) should tell you at the top where to find the original.\nIf you do not have a local build, you can still likely find it in the\nwww-gitlab-com data folder\n.\nBased on the code, you can figure out the filename.\nsite.Data.public.stages.stages\nmeans it‚Äôs\nin\ndata/public\nand the file is\nstages.yml\n.\nThe last parts\n.stages \"section\"\nmeans it‚Äôs inside of\nstages:\nand it‚Äôs pulling data from\neach\nsection:\nline.\nYou can check the most recent changes to the file, and/or compare it to when\nmain\nstarted failing.\nIn this case,\nan empty\nsection:\nline\nwas the issue.\nThe quick and easy fix is to add text to the empty\nsection:\nline, merge it, and run a new pipeline\nin the public handbook project.\nIn this case,\nthe handbook code was made more robust\n.\nPrettier is formatting markdown files\nIf you have\nprettier\nset up in VS Code and it is formatting the\n.md\nfiles when they are not supposed to, check if you have Prettier set to be your default formatter with\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\nin your user settings.\nAdditionally, consider using the\nGlob Pattern\nin the extension settings to specify which files to prettify automatically.\nAdditional tips\nFor additional tips, such as how to replace strings in files, refer to the\npractical handbook edits examples\n.\nNeed help?\nTeam members, referred to as\nMR Buddies\nMR Buddies playlist\n. Post your request with a link in the\n#mr-buddies\nSlack channel.\nFor general questions about the handbook, post in the\nhandbook Slack channel\n.\nFor more serious problems, especially ones that are time sensitive or prohibiting access to important information, there is an\nescalation process\nto reach out to team members who are able to help resolve the problem.\nEdit your team page entry\nInstructions on how to add yourself to the team page, and make edits.\nPractical Handbook Editing Tips\nVideo recordings and written tips for team members on additional tips to working handbook first.\nLast modified April 30, 2025:\nAdd folder and file name linting (\n8a6b33a1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3250}
{"doc_id": "b95440742537d106", "url": "https://handbook.gitlab.com/handbook/solutions-architects/processes/technical-win", "title": "Technical Win | The GitLab Handbook", "text": "The Handbook\nSolutions Architects Handbook\nSolutions Architects Processes\nTechnical Win\nSA Technical Win\nTechnical Win\nfor a GitLab Solutions Architect is more than just a successful demo. It‚Äôs about achieving\ntechnical validation and building profound confidence\nwithin the customer‚Äôs technical stakeholder group that GitLab is the\noptimal and sustainable technical solution\nto meet their specific needs, address their pain points, and align with their strategic technical roadmap.\nDefinition: Technical Win for GitLab Solutions Architecture\nA Technical Win is achieved when the customer‚Äôs key technical stakeholders (e.g., engineering leads, architects, DevOps engineers, security specialists) formally:\nValidate Technical Fit & Feasibility:\nThey confirm that GitLab‚Äôs capabilities demonstrably meet or exceed the required capabilities, operational workflows, and security standards necessary to solve their specific pain points, provide the expected quantifiable value, and drive their desired outcomes. This includes understanding\nhow\nGitLab integrates with their existing ecosystem and\nhow\nit solves their specific, identified technical challenges.\nGain Confidence & Trust in GitLab:\nThey express a high level of confidence in GitLab‚Äôs technical solution and the the ability for GitLab to partner on their success. This often stems from successful technical deep-dives, demos, effective objection handling, and/or a successful Proof of Value (POV) or SA validated technical evaluation.\nIdentify GitLab as the Preferred Solution:\nThey see GitLab as the clear leader or the most advantageous technical choice compared to alternative solutions or their current state, understanding the unique value proposition of GitLab.\nMitigate Technical Risk:\nAny technical concerns, objections, or perceived implementation risks have been successfully addressed, neutralized, or clearly defined with a mitigation plan that matches the significance of the concern/objection/risk.\nEstablish a Technical Champion:\nA key technical stakeholder within the customer organization emerges as an internal advocate for GitLab, actively championing the solution within their peer group and higher-level technical management.\nWhat a Technical Win IS (and IS NOT)\nA Technical Win IS:\nCustomer-centric validation:\nThe customer‚Äôs technical team believes the solution with address their pain points and drive their desired outcomes.\nProblem-solving focused:\nGitLab is seen as the answer to the specific pain points they are looking to address.\nFoundation for the commercial close:\nIt removes technical blockers for the Sales team.\nDocumented alignment:\nClear understanding and agreement on the technical solution.  This is provided in a POV readout and often as part of a Customer Success Plan.\nA Technical Win IS NOT:\nThe financial close:\nIt‚Äôs possible to get a technical win and lose the sales opportunity based on non technical factors (e.g., budget, organizational changes, etc., poor business qaulification, etc.)\nJust a feature demonstration:\nIt goes beyond showing features to proving direct relevance and value.\nSimply checking off a requirements list:\nIt involves understanding\nwhy\na requirement exists and demonstrating\nhow\nGitLab uniquely addresses it.\nIgnoring technical concerns:\nIt means proactively addressing and resolving them.\nSimply executing an activity or activities defined by GitLab\nIt‚Äôs a  process of building trust and customer-validation throughout the consideration phases of the customer journey.  Specifically, Scoping and Evaluation.\nPossible Indications of a Technical Win\nThe following are common indicators that a technical win may have been achieved.  It‚Äôs possible to have some of these indicators and not yet the technical win.  These indicators to not replace the formal definition of a technical win, above.\nVerbal or written confirmation from technical leads:\nExamples: ‚ÄúThis looks like it will solve our problem,‚Äù or ‚ÄúWe‚Äôre confident GitLab can handle X.‚Äù\nActive engagement in solution design:\nTechnical teams eagerly participate in discussions on implementation, architecture, and migration.\nReduced number/intensity of technical objections:\nConcerns shift from ‚Äúif‚Äù to ‚Äúhow.‚Äù\nCustomer technical team becomes an internal advocate:\nThey start defending GitLab‚Äôs position internally.\nSuccessful completion of POV/Evaluation criteria:\nIf a POV is executed, its technical objectives are met and validated by the customer.\nClear next technical steps defined and agreed upon:\nMoving to integration planning, phased rollout discussions, PS scoping.\nPositive feedback to the Account Executive:\nThe technical team communicates their confidence to their sales counterpart.\nLast modified May 29, 2025:\nminor typo - moving Solutions Architecture to Solutions Architect (\n50dbca48\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 680}
{"doc_id": "ae5e643f7cc0aca7", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/cocreate/on-site-engineer-guide", "title": "Co-Create On-Site Engineer Guide | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nGitLab Co-Create Initiative\nCo-Create On-Site Engineer Guide\nOverview\nThe Co-Create Program enables our customers to collaborate directly with GitLab engineers to contribute features, fixes, and enhancements to the platform. This is a GitLab-sponsored program, not a paid consulting service. As an on-site engineer, you‚Äôll spend one week working closely with customer engineers to kick off their contribution journey and establish long-term collaboration patterns.\nThis guide provides practical advice for making your on-site engagement successful, based on experiences from previous Co-Create engineers.\nPre-On-Site Preparation\nTechnical Preparation\nReview the contribution scope\n: Understand the specific issues or features you‚Äôll be working on\nFamiliarize yourself with customer context\n: Review their GitLab usage, technical stack, and business objectives. Request access to customer project repositories if available\nPrepare your development environment\n: Ensure you can quickly set up GDK and demonstrate GitLab‚Äôs development workflow. Be familiar with GDK alternatives (GDK in a Box, cloud VMs) for restricted environments\nDo a technical spike\n: Depending on the issue complexity, do a small spike yourself and prepare an implementation plan to provide focused direction\nIdentify potential blockers\n: Consider security, architectural, or environment restrictions that might arise\nUnderstand customer team backgrounds\n: Learn which programming languages they‚Äôre comfortable with (Ruby/Rails vs Go vs Java, etc.) to tailor your approach\nCommunication Preparation\nJoin the onboarding session\n: Participate in the pre-on-site customer onboarding to introduce yourself and understand the team\nEstablish practical communication\n: Set up a communication channel that works for the customer team (WhatsApp group, Signal, phone numbers, etc.) for day-of coordination like building access, directions, or schedule changes\nShare travel itinerary\n: Exchange contact information and travel details in advance to ensure smooth arrivals and coordination\nVerify setup requirements early\n: Confirm customer teams have adequate time for GDK setup (can take 1-2 days). Set clear deadlines for environment preparation before the on-site\nCreate community forks\n: Ensure necessary community forks are created upfront for contributions\nAlign on expectations\n: Confirm the week‚Äôs agenda, goals, and success criteria\nUnderstand team dynamics\n: Learn about the customer engineers‚Äô experience levels, roles, and motivation levels\nOn-Site Best Practices\nDay 1: Foundation Setting\nStart with relationship building\n: Take time for introductions and understanding motivations\nEstablish clear objectives\n: Collaboratively define what success looks like for the week\nConfirm environment setup\n: Verify all customer engineers have working GDK installations (expect this to take significant time if not done in advance)\nProvide architectural overview\n: Give a deep-dive into GitLab‚Äôs architecture and the specific feature area you‚Äôll be working on\nReview GitLab‚Äôs contribution process\n: Walk through the merge request workflow, code review standards, and community guidelines\nVerify contributor profiles\n: Remind customer contributors to sync their Organization fields in their GitLab profiles for proper attribution\nTechnical Collaboration\nPractice pair programming\n: Work side-by-side rather than directing from afar\nExplain the ‚Äúwhy‚Äù not just the ‚Äúhow‚Äù\n: Help customers understand GitLab‚Äôs architectural decisions and patterns\nProvide Ruby/Rails crash course if needed\n: Be prepared to give a basic overview of GitLab‚Äôs codebase structure, where controllers are located, etc.\nEncourage experimentation\n: Remind customers they can‚Äôt break anything in GDK - experimentation is encouraged\nEnsure consistent environments\n: Try to have all customer engineers using the same GDK setup (all local, all VM, etc.) to avoid different issues\nPrioritize engaged participants\n: Assign critical path work to more motivated team members to avoid blocking others\nDocument learnings\n: Capture setup instructions, gotchas, and solutions for future reference\nCommunication and Facilitation\nBe patient with different skill levels\n: Not all customer engineers will have the same Ruby/Go experience\nEncourage questions\n: Create a safe environment for customers to ask about anything they don‚Äôt understand\nAdapt your teaching style\n: Some learn best by doing, others by explanation - be flexible\nRegular check-ins\n: Ensure everyone feels included and that progress is on track\nPlan for future contributions\n: Schedule a discussion about continued contribution plans on the second-to-last day of the on-site\nBuild personal connections\n: Consider opportunities for informal interaction outside of work hours, such as team dinners or local activities, which can strengthen relationships and collaboration (these can be expensed - check with the Contributor Success team)\nManaging Common Challenges\nTechnical Challenges\nGDK setup issues\n: Have troubleshooting strategies ready for common environment problems. Be familiar with GDK in a Box for Windows environments and cloud VM alternatives for restricted setups\nRestricted customer environments\n: Government and enterprise customers often have locked-down machines, restricted internet access, and specific security requirements\nCode complexity\n: Break down complex changes into smaller, manageable pieces\nPerformance concerns\n: Help customers understand when to optimize vs. when to prioritize functionality\nTesting requirements\n: Guide customers through writing appropriate tests for their contributions\nProcess Challenges\nCode review feedback\n: Help customers understand that feedback is about improving code quality, not personal criticism. Be aware that GitLab‚Äôs review process can feel overly rigorous and demoralizing to newcomers\nReview timing conflicts\n: The synchronous nature of Co-Create conflicts with asynchronous reviews. Coordinate with maintainers to ensure responsive reviews during the on-site week\nScale considerations\n: For customers familiar with databases, explain how GitLab.com‚Äôs scale affects implementation decisions. Show them tools like postgres.ai for query plan analysis to illustrate why seemingly simple fixes may need more consideration\nContribution guidelines\n: Ensure customers understand sign-off requirements and community standards (note: licensing is handled by the Co-Create PM)\nTimeline expectations\n: Manage expectations about review cycles and merge timelines. Consider having a maintainer available in the same timezone\nCommunication Challenges\nDifferent working styles\n: Adapt to customer team preferences and communication patterns\nVariable engagement levels\n: Participants can range from passive observers to highly motivated contributors - adapt your approach accordingly\nTechnical language barriers\n: Explain GitLab-specific terminology and concepts clearly\nGovernment/enterprise restrictions\n: Some customers can‚Äôt use Discord, external chat tools, or screen sharing - have alternatives ready\nPhysical logistics\n: Government sites may require escorts, have restricted lunch options, or limited meeting spaces - plan accordingly\nRemote vs. in-person dynamics\n: If some team members are remote, ensure they‚Äôre fully included\nBuilding Long-Term Success\nKnowledge Transfer\nDocument everything\n: Create clear documentation of setup procedures, contribution workflows, and contact information\nIdentify champions\n: Help customer teams identify who will drive future contributions\nEstablish ongoing support channels\n: Set up communication paths with GitLab team members for continued collaboration after the on-site\nPlan follow-up support\n: Ensure customers know how to get help after you leave\nCommit to 2 hours/week for 2 weeks post-visit for MR reviews and questions\nAccount for a 30-minute check-in call in your schedule 1 week after the on-site\nProvide your GitLab handle for async questions in MR threads\nCommunity Integration\nIntroduce community resources\n: Show customers how to use Discord, GitLab Forum, and documentation\nConnect with relevant team members\n: Introduce customers to product managers, engineers, and other contributors in their area of interest\nCelebrate contributions\n: Acknowledge their work publicly when appropriate\nSuccess Metrics and Follow-Up\nMeasuring Engagement Success\nTechnical progress\n: Code written, merge requests opened, tests passing\nLearning outcomes\n: Customer team‚Äôs increased confidence with GitLab development\nRelationship building\n: Strength of ongoing communication and collaboration\nFuture commitment\n: Customer team‚Äôs plans for continued contribution\nPost-On-Site Activities\nRetrospective session\n: Conduct a brief retrospective with the customer team\nInternal debrief\n: Share learnings with the Co-Create team for program improvement\nOngoing support\n: Provide limited follow-up support as customers complete their first contributions\nDocumentation updates\n: Update this guide based on new learnings and experiences\nKey Principles to Remember\nFocus on Empowerment\nYour goal is to enable customer teams to contribute independently, not to do the work for them\nTeach problem-solving approaches, not just solutions\nHelp customers understand GitLab‚Äôs development culture and values\nEmbrace the Learning Process\nBoth sides should expect to learn from each other\nCustomer domain expertise can provide valuable insights for GitLab‚Äôs development\nBe open to feedback about GitLab‚Äôs processes and tools\nMaintain Quality Standards\nHelp customers understand that high code quality benefits everyone in the community\nExplain the reasoning behind GitLab‚Äôs development standards\nBalance learning opportunities with maintaining our codebase quality\nResources and Contacts\nDuring Your On-Site\nCo-Create Project Manager\n: Available for process questions, scheduling, and escalations\nProduct Managers\n: For feature alignment and roadmap questions\nEngineering Managers\n: For technical architecture and code review guidance\nContributor Success Team\n: For community and ongoing support questions\nFor Customers\nContributor Platform\nContributor Documentation\nGitLab Development Kit\nCommunity Discord\nCo-Create Issues\nTips from Experienced On-Site Engineers\n‚ÄúThe best person to solve an issue is the one experiencing it. Focus on enabling them to be successful rather than solving everything yourself.‚Äù\nRaimund Hook\n‚ÄúYour job can get converted to babysitting MRs, babysitting the people, etc. Don‚Äôt get frustrated. Just make sure you talk to them as much as you can about GitLab, how they are using it, what challenges they face.‚Äù\nVishal Tak\n‚ÄúWe should definitely share itineraries and contact info in advance to ensure smoother arrivals and better planning‚Äù\nSiddharth Dungarwal\n‚ÄúThe reviews were expedited, which definitely made an impact on the team on-site, motivating them to contribute more.‚Äù\nPedro Pombeiro\nLast modified June 19, 2025:\nAdd Co-Create on-site engineer guide to handbook (\na908e4d2\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1552}
{"doc_id": "19f09547905861b6", "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/contributor-success/merge-request-coach-lifecycle", "title": "Merge Request Coach Lifecycle | The GitLab Handbook", "text": "The Handbook\nMarketing\nDeveloper Relations\nContributor Success Team\nMerge Request Coach Lifecycle\nApplying to become a Merge Request Coach\nCreate a\nnew issue\nusing the\nmr_coach_onboarding\ntemplate (see screenshot below).\nFill in the placeholders in the issue template with your information.\nAssign the issue to yourself.\nWork through the steps in that new issue.\nStepping down gracefully\nIf you are no longer able to serve as a Merge Request Coach, you should identify another GitLab team member to take your place so that the capacity of the remaining coaches remains the same. When you are ready to step down, you need to:\nMake an announcement on the\n#mr-coaching\nSlack channel.\nUpdate the\nteam.yml\nfile to remove ‚ÄúMerge Request Coach‚Äù.\nRemove yourself from the\n@gitlab-org/coaches\ngroup.\nReferences/resources\nMerge Request Coach responsibilities\nMerge Request Coach collaboration guidelines\nCommunity Discord channel\n: please join if you haven‚Äôt already!\nCurrent Merge Request Coaches\nGitLab currently has\n38\nmerge request coaches:\nName\nGroup\nDepartments\nAllen Cook\nNone\nAI Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nArianna Haradon\nNone\nStrategy\nDeveloper Relations\nMerge Request Coach\nAnastasia Khomchenko\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nAlexander Turinske\nSecurity Risk Management:Security Policies\nSec Engineering\nDevelopment Department\nSec Section\nSecurity Risk Management Stage\nSecurity Risk Management frontend capability\nSecurity Risk Management:Security Policies Team\nFrontend\nMerge Request Coach\nAlper Akgun\nNone\nAI Engineering\nDevelopment Department\nData Science Section\nMerge Request Coach\nBob Van Landuyt\nNone\nPlatforms Engineering\nInfrastructure Platforms Sub-department\nMerge Request Coach\nDeepika Guliani\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nFrontend\nMerge Request Coach\nDenys Mishunov\nNone\nAI Engineering\nDevelopment Department\nData Science Section\nFrontend\nMerge Request Coach\nDmitry Gruzd\nNone\nAI Engineering\nMerge Request Coach\nEzekiel Kigbo\nNone\nData Engineering\nDevelopment Department\nDev Section\nFrontend\nMerge Request Coach\nIllya Klymov\nSoftware Supply Chain Security:Compliance\nSec Engineering\nDevelopment Department\nSec Section\nSoftware Supply Chain Security Sub-department\nSoftware Supply Chain Security:Compliance Team\nFrontend\nMerge Request Coach\nJack Chapman\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nJannik Lehmann\nNone\nAI Engineering\nDevelopment Department\nFrontend\nMerge Request Coach\nJames Rushford\nNone\nAI Engineering\nDevelopment Department\nDev Section\nFrontend\nMerge Request Coach\nJustin Ho\nNone\nAI Engineering\nFrontend\nDevelopment Department\nDev Section\nMerge Request Coach\nKerri Miller\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nKushal Pandya\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nFrontend\nMerge Request Coach\nLee Tickett\nCore\nStrategy\nDeveloper Relations\nMerge Request Coach\nCore Team\nJen-Shin Lin\nTenant Scale\nPlatforms Engineering\nInfrastructure Platforms Department\nTenant Scale Group\nMerge Request Coach\nMissy Davies\nNone\nAI Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nNao Hashizume\nNone\nPlatforms Engineering\nMerge Request Coach\nPatrick Bajao\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nPedro Pombeiro\nVerify:Runner\nDevOps Engineering\nDevelopment Department\nOps Sub-department\nVerify Stage\nVerify:Runner Group\nMerge Request Coach\nPeter Leitzen\nNone\nPlatforms Engineering\nMerge Request Coach\nPeter Hegman\nTenant Scale\nPlatforms Engineering\nInfrastructure Platforms Department\nTenant Scale Group\nFrontend\nMerge Request Coach\nRaimund Hook\nNone\nStrategy\nDeveloper Relations\nMerge Request Coach\nRajan Mistry\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nR√©my Coutable\nTenant Scale\nPlatforms Engineering\nInfrastructure Platforms Department\nTenant Scale Group\nMerge Request Coach\nCore Team\nReuben Pereira\nNone\nPlatforms Engineering\nSoftware Delivery Sub-department\nBackend\nMerge Request Coach\nSiddharth Dungarwal\nNone\nAI Engineering\nMerge Request Coach\nTerri Chu\nNone\nAI Engineering\nMerge Request Coach\nParental Leave Reentry Buddy\nTetiana Chupryna\nNone\nAI Engineering\nDevelopment Department\nData Science Section\nMerge Request Coach\nThong Kuah\nTenant Scale\nPlatforms Engineering\nInfrastructure Platforms Department\nTenant Scale Group\nMerge Request Coach\nTimo Furrer\nEnvironments\nDevOps Engineering\nDevelopment Department\nOps Section\nEnvironments Group\nMerge Request Coach\nTom√°≈° Bulva\nNone\nAI Engineering\nMerge Request Coach\nToon Claes\nNone\nPlatforms Engineering\nData Access Sub-department\nMerge Request Coach\nVasilii Iakliushin\nNone\nDevOps Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nVitali Tatarintev\nNone\nAI Engineering\nDevelopment Department\nDev Section\nMerge Request Coach\nLast modified January 7, 2025:\nMove marketing images to static folder (\na54c394b\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 669}
{"doc_id": "ab08c57863d06d80", "url": "https://handbook.gitlab.com/handbook/tools-and-tips", "title": "Tools and tips | The GitLab Handbook", "text": "The Handbook\nTools and tips\nOverview\nThis page contains useful tips for working at GitLab and for various tools we use.\nGitLab tips\nChange your username at GitLab.com\nStarting point: let‚Äôs say your username is\nold-mary\nand you want it to be just\nmary\n.\nNote:\neach GitLab account is tracked by an\nuserID\n, which is a number stored in a database.\nIf we change the username, the userID does not change.\nAnd all the permissions, issues, MRs, and relevant stuff within GitLab are related to your\nuserID\n, not with your username.\nNote:\nif you are not a GitLab Team member, the same process applies except your e-mail (\n), which will be different (will not be @gitlab.com email), so you can replace it with your own email account.\nSTEP 1: Request your new username\nAs of this\nMerge Request\n, it is no longer possible to request a username via the\nNamesquatting process\n. If the username you wish to use is unavailable, you will have to pick a different one.\nSTEP 2: Create a new account with your new username\nIf support replies to you telling that the username is free to use, create a new GitLab.com account with it.\nUse a personal email to register your new account and choose one that has not been used with your old GitLab account.\nNavigate to your\nProfile Settings\n>\nEmails\n, and add a new email.\n‚≠êÔ∏è\nTrick\n‚≠êÔ∏è If your email at GitLab is\nmary@gitlab.com\n, add the new email as\nmary+something@gitlab.com\n: this is a\nGmail trick\n! All your emails sent to this alias will end up in your GitLab email account üòÉ\nNavigate to\nhttps://gitlab.com/-/profile/notifications\nand choose the notifications email:\nmary+something@gitlab.com\n.\nOpen your old account in one browser and the new one in another browser (e.g., Chrome and Firefox, or Chrome and Safari) - log in to both accounts at the same time.\nSTEP 3: Let‚Äôs have some fun (kidding, this is critical!)\nNavigate to\nhttps://gitlab.com/-/profile/account\nin both your accounts.\nLook for your username.\nThis operation has to be done quickly, otherwise you are risking to lose your awesome new username to someone else quicker than you.\nWe need to\nswap\nthe usernames between both accounts, so you‚Äôll keep all your history, your privileges, issues, and MRs assigned to you, etc.\nIf you work with 2 monitors, open each browser on one monitor.\nIf you don‚Äôt, open them side by side, so that you can keep an eye on both at the same time.\nRename your new username\nmary\nto something like\nmary-1\nand\nclick\nupdate username\nyet.\nRename your old username\nold-mary\nto your new username\nmary\nand\nupdate that either.\nJust leave them typed into the boxes.\nMake sure you did the previous step right!\n‚ö†Ô∏è\n‚ö†Ô∏è Update the first one (\nmary\nto\nmary-1\n).\nImmediately, click\nupdate\non the other one (\nold-mary\nto\nmary\n).\nImmediately, rename the\nmary-1\nto your old one\nold-mary\nand click\nupdate username\nagain.\nTa-Da! üôå\nSTEP 4: Move your projects (or not)\nNow, if you have any personal projects, you might want to import them to your new account (the one that has your old username now).\nTo do that, in your new account (the one with the old username), click\nCreate a New Project\n, give it the very same name as the original one, click\nGit - add repo by url\n, and paste the\nhttps://\nURL of your project there.\nTo make things easier, make sure all the projects you want to import are set to\npublic\nview.\nYou can make them private afterwards.\nIf you have GitLab Pages projects with the default\nGitLab.io\nurl, you will need to import them to you new account, then make a change to\ntrigger a build\nand redeploy your site.\nThey will be affected only if you‚Äôre using a\nCNAME with a subdomain instead of an A record\n.\nThis won‚Äôt affect Pages projects that use custom domains, as they all point to the same Pages server IP via\nrecord.\nYour groups won‚Äôt be affected either, as they operate under their own namespace.\nAdd both users as members of your groups and nothing changes.\nThat‚Äôs it!\nSTEP 5: Update your username in other places\nDon‚Äôt forget to update your username in the following places:\nteam page\nIf you‚Äôre part of Marketing,\nMarketing Handbook\nWorkday - GitLab Username under ‚ÄòAdditional Data‚Äô > ‚ÄòView all‚Äô in your profile actions\nSTEP 6: Set up your notifications\nTeam members choose to manage their GitLab activities in different ways. Setup your notifications in a way that works best for you.\nTo-do list:\nall team members will see a\nto-do list\nwithin their GitLab account. This will track different action items. Items can be marked as done as they are completed.\nEmail:\nteam members can choose which, if any, notifications show up in their Gmail accounts by\nusing filters\n.\nSlack notifications:\nteam members can choose to enable\nSlack notifications\n. Please note that GitLab slack expires after 90 days, so this is not a tool for longer-term activity management.\nGitLab team members‚Äô resources\nThe\nGitLab team-member resources project\nhas a wiki for sharing among\nGitLab team-members\n.\nIt‚Äôs for topics like parenting where people may want to share knowledge, but the handbook is not the best fit.\nGitLab team members‚Äô setups\n@tipyn\n‚Äôs\nhome office equipment and macOS setup\nLinking Gravatar photo\nLink your GitLab email address to an easily recognizable photo of yourself on GitLab, Slack, and\nGravatar\n.\nIt is company policy to use a photo, and not an avatar, a stock photo, or something with sunglasses for any of your GitLab accounts, as we have a lot of GitLab team-members and our brains are comfortable with recognizing people; let‚Äôs use them.\nNote\n: If you upload your photo to Gravatar associated with your gitlab.com email, then you can simply not set an image in your GitLab and Slack profiles and they will automatically use your Gravatar photo.¬† If you already uploaded individual photos to your GitLab and Slack profiles, simply removing them will cause your avatar to use the Gravatar photo by default.\nUsing Mermaid\nMermaid is a tool that allows us to create flowcharts, graphs, diagrams, Gantt charts, etc. within GitLab! Check out the\nexamples in the GitLab docs\non how to use Mermaid.\nA few additional resources that can be helpful when working with Mermaid are:\nThe\nlive mermaid editor\nto check your work!\nGitHub‚Äôs Mermaid overview\nCSS color bank\nto add color to your charts.\nYou can see an example of how to add images to Mermaid charts\nhere\n.\nExamples of Mermaid charts that have been created by GitLab team members:\nTalent Development Program Chart\nby\nCassiana Gudgenov\n, People Compliance Partner\nCEO Year at a Glance\nData Infrastructure System Diagram\nAdvanced layout demos\nfor Mermaid diagrams\nthree back tick symbols\nfollowed by the word\nmermaid\nbefore the chart, and\nthree back tick symbols\nat the end of the chart. This will enable Markdown to distinguish between .md and Mermaid. Please reference the example Mermaid charts linked above to see how this looks live.\nVisual help to differentiate between GitLab servers\nIf you are working on multiple GitLab instances and want to have a visual differentiation, you can change the default\nNavigation theme\nto a different color.\nPage counts are determined through a simple two-step process:\nCount the number of words in the handbook.\nThis can be done by running\nfrom the root directory of the repository.\nSubmit the word count to\nWordCounter\nfor conversion to a page count.\nTrainee maintainer issue upkeep\nPart of the\nmaintainer training process\nis to keep track of Merge Request that have been reviewed and writing down an assessment on the review in the maintainer training issue.\nManual upkeep of the maintainer training issue can be time consuming. There are tools that others have built to help with this task:\nhttps://gitlab.com/nolith/review-tanuki\nhttps://gitlab.com/splattael/traintainer\nhttps://gitlab.com/arturoherrero/trainee\nhttps://gitlab.com/alberts-gitlab/review-tanuki\nhttps://gitlab.com/gitlab-org/gitlab-dev-cli#maintainer-trainee-helper\nNote:\nWhen using these tools, avoid adding mentions to maintainers in existing comments. There is a\nknown issue\nwhere users are not notified by email when mentioned in an edited comment. It only generates a TODO which a maintainer may not use.\nHandbook Tips\nRefer to the\nHandbook Development section\nto learn more about the architecture, structure and how to edit the handbook locally on your desktop. For how to edit the handbook in your browser, refer to\nthe editing handbook page\n.\nwww-gitlab-com Tips\nPortions of the\nhttps://about.gitlab.com\nsite lives in the\nwww-gitlab.com\nrepo. The marketing website is maintained by the\ndigital experience team\nin their\nGitLab group\n.\nThe\ndata/*.yml\nfiles live in the\nwww-gitlab-com\nrepository, and are used by numerous sites including the marketing website and the handbook.\nThe documentation for the site itself is in markdown documents under the\ndoc\nfolder in the repo\n. If you are looking to do local development on the site,\ndoc/development.md\nis probably the best place to start.\nImage and GIF tips\nMany of the tips shown in this section require ImageMagick, an image manipulation tool. The installation is described in the\nImageMagick section\n.\nImageMagick\nprovides the\nconvert\nCLI command which can be used to resize images, add drop shadows, edit GIFs, etc.\nOn macOS, install ImageMagick with Homebrew:\nbrew install imagemagick\nOn Linux, use your package manager:\nsudo dnf install ImageMagick\nsudo apt install imagemagick\nCreating GIFs\nWe have a\ndedicated section\nfor that in the handbook.\nResizing images\nImageMagick\nprovides the\nconvert\nCLI command which can be used to resize images. Our blog images do not need resolutions higher than 1920x1080. This saves bandwidth and makes the website load faster.\nThis example converts an existing image to\n1920x1080\nresolution and replaces it inline:\nconvert blogimage.jpg -resize 1920x1080 blogimage.jpg\nYou can also use percentage values for the\n-resize\nparameter. The\nconvert\nCLI command can do more things explained in the\ndocumentation\n.\nIf you need to convert multiple images, combine the\nconvert\ncommand with\nfind\n. Note that this replaces the images inline.\nfind . -type f -name\n'*.jpg'\n-exec sh -c\n'convert {} -resize 1920x1080 {}'\n\\;\nConvert HEIC to JPG\nTip: Modern macOS versions provide the Finder right-click menu\nQuick Actions > Convert Image\nwhich automatically converts an image to JPG. Use this method for quick UI conversions.\nImageMagick\nprovides the\nmogrify\nCLI command which can be used to convert the\nimage format to other formats like\nwhich are accepted on all websites.\nmogrify -format jpg icloudphoto.HEIC\nIf you need to convert multiple images, combine the\nmogrify\ncommand with\nfind\n. Note that this creates new files and requires manual cleanup of\nfiles,\n-iname\nuses a case insensitive match.\nfind . -type f -iname\n'*.heic'\n-exec sh -c\n'mogrify -format jpg \\\"{}\\\"'\n\\;\nAn example shell alias can be found in\n@dnsmichi‚Äôs dotfiles project\n.\nAdd drop shadow to images\nInstall ImageMagick\nand use the\nconvert\nCLI command to add a drop shadow. The\n-shadow\nparameter may need adjustments on the dimension.\nconvert input.png\n\\(\n+clone -background black -shadow 80x20+0+15\n\\)\n+swap -background transparent -layers merge +repage output.png\nTroubleshooting\n2FA debugging\nIf 2FA stops working unexpectedly (no new phone or computer) it‚Äôs usually because of improperly configured date & time on either device.\nMake sure that ‚ÄúAutomatic Date & Time‚Äù is\nenabled\non both devices.\nIf they‚Äôre already enabled try toggling them off and on again to force an update.\nIf this doesn‚Äôt work, request that IT Ops reset your 2FA setting.\nLinks for finding the settings:\niOS:\nGet help with the date and time on your iPhone, iPad, and iPod touch - Apple Support\nmacOS:\nIf the date or time is wrong on your Mac - Apple Support\nLinux (using systemd):\nsystemd-timesyncd - ArchWiki\nFor Android there‚Äôs no definitive link, since most vendors have different UIs for their settings.\nBut in the Settings-app, look for ‚ÄúDate & Time‚Äù and there should be a ‚ÄúAutomatic Date & Time‚Äù toggle.\nCheck which process occupies a given port\nUsing Netstat\nNetstat is a command line tool which can be useful to print network connections, routing tables, interface statistics, etc. One of the most common uses for netstat during troubleshooting is to display a list of open ports listening for connections.\n[\nuser@gitlab ~\n]\n$ sudo netstat -tulpn\ngrep -i listen\ntcp\n0\n127.0.0.1:5000     0.0.0.0:*     LISTEN     18948/registry\ntcp\n0\n127.0.0.1:9100     0.0.0.0:*     LISTEN     18841/node_exporter\ntcp\n0\n127.0.0.1:9229     0.0.0.0:*     LISTEN     18764/gitlab-workho\ntcp\n0\n127.0.0.1:8080     0.0.0.0:*     LISTEN     18980/unicorn maste\ntcp\n0\n127.0.0.1:9168     0.0.0.0:*     LISTEN     18808/puma 4.3.3.gi\ntcp\n0\n0.0.0.0:80         0.0.0.0:*     LISTEN     18831/nginx: master\nIf you find a port already in use, you won‚Äôt be able to successfully start up a service or program that utilizes that same port. Options to resolve are:\nStop the service currently running on the needed port and confirm the port is no longer in use\nReview documentation to determine whether it is possible to specify an alternate port for either process (the existing one or your new service)\nKnown Port Conflicts\nWhen the GitLab Development Kit cannot start using the\n./run\ncommand and Unicorn terminates because port 3000 is already in use, you will have to check what process is using it.\nRunning\nsudo lsof -iTCP:3000 -sTCP:LISTEN -n -P\nwill yield the offender so this process can be killed.\nIt might be wise to alias this command in your\n.bash_profile\nor equivalent for your shell.\nYou may also wish to add a function in your\n.bash_profile\n(or equivalent file for your shell) like this:\nfunction\nkillport\n()\n{\nlsof -i tcp:\n$1\nawk\n'(NR!=1) && ($1!=\"Google\") && ($1!=\"firefox\") {print $2}'\nxargs\nkill\n}\nwhich you can use like so:\n> killport\n3000\nand it will kill whatever process is currently using port 3000.\nTerminal\nDisplay current git branch in the console\nBy adding this small configuration you will be able to view the git branch that you are using currently.\nIf you are not inside a git repository, it only displays the username and the current directory.\nFor Bash:\nAdd the following lines in your\n.bash_profile\ngit_branch\n()\n{\ngit branch 2> /dev/null\nsed -e\n'/^[^*]/d'\n-e\n's/* \\(.*\\)/(\\1)/'\n}\nexport\n=\n\"\\u@\\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(git_branch)\\[\\033[00m\\]\\$ \"\nDoing the following, makes the changes to get reflected in you current terminal:\nsource\n~/.bashrc\nFor Zsh:\nOn macOS Catalina, ZSH is the\ndefault shell\n.\nBy installing\nOh My ZSH!\n, the git plugin is automatically loaded and shows the current git branch.\nAnother option would be:\nAdd the following lines in your\n~/.zshrc\nparse_git_branch\n()\n{\ngit branch 2> /dev/null\nsed -e\n'/^[^*]/d'\n-e\n's/* \\(.*\\)/ (\\1)/'\n}\n=\n\"%n@%d~%f%\\$(parse_git_branch) %# \"\nThe changes will show on the next terminal or immediately by running.\n. ~/.zshrc\nShell aliases\nUse command aliases in your shell to speed up your workflow.\nTake a look at\nthese aliases\nand others in\nSid‚Äôs dotfiles project\n.\nFor example, by adding the following to your\n.bash_profile\nor equivalent for your shell, you can just type\ns\nto checkout the\nmaster\nbranch of this website, pull the latest changes, and open the repository in Sublime Text:\nalias\ngco\n=\n'git checkout'\nalias\ngl\n=\n'git pull --prune'\nalias\ngca\n=\n'git commit -a'\nalias\ngp\n=\n'git push origin HEAD'\nalias\nwww\n=\n'cd ~/Dropbox/Repos/www-gitlab-com/source'\nalias\ns\n=\n'www;subl .;gco master;gl'\nAfter editing, you can just type\ngca\nto commit all of your changes, followed by\ngp\nto push them to the remote branch.\nIf you are using\nOh My ZSH!\n, you can add custom aliases shown below. You can freely define the file name, only the suffix\n.zsh\nis important.\nvim ~/.oh-my-zsh/custom/aliases.zsh\nAn example can be found in\nMichael Friedrich‚Äôs dotfiles project\n.\nDelete local Git branches where remote branch was deleted\nIn order to delete local Git branches which are deleted on the remote server, you‚Äôll need to combine the\n--prune\npull/fetch command with more commands.\ngit branch -vv\nlists all details of local branches, the followed\ngrep\nfilters for all marked gone in the default remote\norigin\nand prints the results with\nawk\n. This argument is passed into\ngit branch -d\n, and executed for all matching results. Note that\n-d\ndoes not delete unmerged branches.\nhas more impact but can accidentally delete branches.\n# Delete all remote tracking Git branches where the upstream branch has been deleted\nalias\ngit_prune\n=\nRun the command without the final deletion command to see the potential affected branches. Note that\n\\$1\nis shell escaped in the alias and needs to be executed as\n$1\n.\ngit fetch --prune\n&&\ngit branch -vv\ngrep\n'origin/.*: gone]'\nawk\n'{print $1}'\nDotfiles\nYou can use dotfiles to customize your system, and keep all configuration in a central place. The name\ndot file\nis derived from Linux/Unix where all configuration files started with a dot, hiding them from the default list view\nls\n.\nTeam member dotfiles projects:\nSid Sijbrandij‚Äôs dotfiles\nMichael Friedrich‚Äôs dotfiles\n, more details in\nthis blog post\nBrendan O‚ÄôLeary‚Äôs dotfiles\nTraveling\nLong haul flights\nNote: you have to pay for these items yourself.\nQuiet comfort Bose over ear noise canceling headphones\n(so it doesn‚Äôt touch your dried out eyes)\nCustom molded ear plugs (can be up to $200 hearing aid store but are usable in many situations, there are also\nDYI kits\nbut Sid has not tried that)\nMelatonin (possible unsafe during pregnancy and breast-feeding)\nSleeping pills (over the counter is fine)\nWorkFrom\nis a crowd-sourced resource of coffee shops and other such places that are remote-work friendly.\nWi-fi usage\nWhen using unsecured Wi-Fi, consider a personal VPN.\nWe\ndon‚Äôt have a corporate VPN\nbut consider\npurchasing\na\npersonal VPN\nif you travel for GitLab or use unknown networks often.\nRemember that if your job has restrictions based upon geolocation (for example supporting customers with specific data restrictions and country-based access), a personal VPN may not be the best choice as often the VPN vendor routes traffic through other countries.\nIf this restriction applies to you, consider tethering.\nTethering\nis when you set up your mobile phone as a hotspot and connect your laptop up to it via Wi-Fi, avoiding the unsecured Wi-Fi network.\nThere is more information\nhere\non the subject, and as long as your data plan supports it, you should be good to go.\nDouble check before international travel, as it may be supported but have hidden costs.\nWhen connecting to a network with a\ncaptive portal\n, most websites will not load as modern sites use HTTPS, and captive portals interrupt that process.\nYour device will try and compensate for this, but it can be tough to manage manually.\nIf you have trouble, try connecting to\nhttps://captive.apple.com/\nfirst, which is intentionally only HTTP and will load the captive portal.\nFIDO2 / WebAuthn\nFIDO2 is a cryptographically strong 2FA (2-factor authentication) method. It is hardware-based, and is typically deployed via a USB, NFC, or built into a device such as a MacBook‚Äôs Touch ID or iPhone‚Äôs Face ID. The standard is open and is maintained by the\nFIDO Alliance\n.\nWebAuthn\nis a component of FIDO2 that supports verification by web applications using public key cryptography. FIDO2/WebAuthn is the preferred method of 2FA and is highly recommended by GitLab‚Äôs Security Department. One of the points of 2FA is that while you are authenticating with a username and password for the first factor, a secondary factor should use a separate - or ‚Äúout of band (OOB)‚Äù - communication channel for the authentication. FIDO2/WebAuthn devices certainly meet that criteria, better than all other methods. There are other 2FA methods\noutlined below\n.\nHow it works\nDuring the authentication process, you enter in your username and your password. On systems with 2FA enabled and using FIDO2/WebAuthn, the hardware token is queried. By pressing a button or tapping a sensor on the FIDO2 device, the FIDO2 device completes the authentication process in a cryptographically strong way. It is generally considered the most secure form of 2FA. It is also more convenient than manually entering codes generated by a\napplication.\nDuring the registration of the FIDO2/WebAuthn device, a public/private key pair is generated, with the public key being registered with the service you will be authenticating with, and the private key is stored on a secure chip in the device. When authenticating, after you‚Äôve entered in your username and password, the device is queried via an encrypted message that can only be authenticated by the private key, so a button or sensor is pressed on the device to allow the query to be completed, and the user is then granted access to the system.\nFIDO2/WebAuthn devices\nYubiKey: The most popular FIDO2/WebAuthn device is Yubico‚Äôs YubiKey. There are a wide variety of sizes and styles of YubiKeys. Yubico (along with Google) helped develop the predecessor to FIDO2 standard (U2F) before it was moved to the FIDO Alliance. Most GitLab team members that have WebAuthn devices have a YubiKey. It should be noted that for a long time Yubico‚Äôs source code for its firmware was open source, but some of the newer versions of firmware are closed source. This has caused some concern in the security community, particularly those that prefer to use open source whenever possible.\nAre They Secure?\nYubiKey has been examined by the security industry at large, third party audits and by the Security Team. YubiKey‚Äôs are more than suitable for use within GitLab and work fine with FIDO2/WebAuthn-compatible systems.\nYubiKey has had a number of\nsecurity issues\nwhich are typically resolved quickly. They have a dedicated page for security advisories.\nIn rare cases, a security issue involving a hardware token arises that requires the hardware token to be replaced as a firmware update will not mitigate the issue. This happened with\nYubico in 2017\n.\nMost of the attack models that impact the FIDO2/WebAuthn tokens require physical access to the token itself. That is, the security advisories involve coding issues that can only be exploited via access to the token or the computer that the token is plugged into. This in itself makes the devices more secure.\nRecommendations\nWhile there are other hardware tokens that are also decent and will function with GitLab, some have limitations. The recommended solution for team members is Yubico‚Äôs YubiKeys.\nPlease fill out this\nform\nbefore ordering a YubiKey, as we may be able to provide a YubiKey via our group buy subscription.\nRecommended YubiKey models include the YubiKey 5Ci (for iPhone users) and YubiKey 5 NFC (for Android users).\nWhat GitLab team members need to keep in mind is that if you travel with your company laptop - either on a business trip, a trip to visit family and friends in another location but you intend to keep working, or just a trip to the local coffee shop - treat the token with the same level of care as a credit card. Do not leave it where it could be stolen.\nIf you are concerned about potentially losing your hardware token, be sure to add\nTouch ID\nand potentially a\nmobile device\nas an accepted authentication token. Sites following the FIDO2/WebAuthn standard should support multiple tokens. That way if one is lost or stolen, you can still login use another method. Currently YubiKey‚Äôs are limited to one per user, in the case of lost or damaged, please reach out in the #it_security_help Slack channel and we‚Äôll assist you with a replacement.\nUsage of 2FA is mandatory for GitLab team members.\nOther 2FA Methods\nIn addition to\nFIDO2/WebAuthn\n, there are additional protocols used for 2FA. There is ‚Äúcryptographic push‚Äù,\n, and SMS-based authentication (text message). Pluses and minuses to each are listed below.\nCryptographic Push\nThis is usually shortened to simply ‚Äúpush technology‚Äù. It is called ‚Äúpush‚Äù because during the authentication process, after you‚Äôve entered your username and password, the service you are authenticating with automatically ‚Äúpushes‚Äù a secondary authentication via a separate communications channel to a device you possess. This is usually your phone, and it is facilitated via a phone app that is specific to that process. During the registration process a cryptographically-secure key pair is generated, and the app uses that key pair to uniquely identify the Push as coming from the service you are authenticating to. Typically the app then either directly notifies you or you access the app, which will pop up a message asking if you were in fact trying to authenticate. Answer yes and the authentication process is complete. GitLab team members may be familiar with this Push method as it is used by\nOkta Verify\n.\nPush Caveats\nThis method is not quite as secure as a hardware token, as typically those devices stores data securely on the secure chip on the device itself. It is possible that the Push phone app is also storing secret data on the local secure chip on the phone, however the entire process is dependent on the service‚Äôs servers being up, and WebAuthn is more self-contained. But note that Push technology is still considered extremely secure, and once configured it is fairly convenient to use.\nTimed-based One-Time Password is fairly secure. This method involves a rotating value based off of a cryptographic seed that is used to uniquely identify communication between the service and the end user authenticating. The value is (usually) a six digit number that changes every 30 seconds, and during the authentication process after you‚Äôve successfully entered in your username and password, you are asked to enter in the value. GitLab team members should use\n1Password\nto manage TOTP codes.\nTOTP Caveats\nThe main problem with TOTP is that during this 2FA process it typically involves the end user entering in all values through a single communications channel (usually a web browser). As this is the case, it is possible that an attacker could send you a fake web page for you to enter in your credentials, including your TOTP value. Granted, the attacker would have to be reading your replies and sending in all of your credential information extremely quickly and get the entire process completed with 30 seconds so the risk is greatly reduced, but it still exists. Both WebAuthn and Push are preferred over TOTP, but as long as you are the one initiating the communication and you are not clicking on a link in email, you should be okay.\nOne of the more popular (and most common) methods of 2FA is SMS-based text messaging. It is similar to TOTP, but instead of using a locally-stored application to calculate the six digit number, the service you are authenticating to sends the six digits to you via an SMS text message. When you set up your account, you provide the service with your cell phone number so they know which phone number to send the six digits to.\nSMS Caveats\nDue to the number of caveats, SMS is only recommended if there is no other 2FA option available. Here are the main problems with SMS messaging.\nSMS is subject to the same phish-style attack as TOTP. The main difference is that some SMS-based authentication schemes time out after 60 seconds instead of 30, making the phish-style attack slightly easier for the attacker.\nThe information regarding your phone number is stored on a SIM card in your phone. If an attacker with physical access to your phone were to steal the SIM, they could impersonate you from their own phone. Of course they could do the same thing with your hardware token, however they would still need your username and password to use the hardware token. Unfortunately, calling up the service and asking for your password to be reset is often confirmed using SMS messaging, so with the possession of the SIM card, the attacker could pose as you. Again, if you treat your phone the same way you treat your credit card or cash, then this type of attack is minimized.\nAn attacker could contact your phone carrier, impersonate you and state you lost your phone, and set up a new SIM card. Unfortunately many times your account is protected with a security question such as ‚Äúmother‚Äôs maiden name‚Äù, ‚Äúfavorite restaurant‚Äù, or some other simple question - all information that could be determined from a website that does family trees or via social media where you post pictures of your dinner.\nAn older attack known as ‚Äú\nSIMJacker\n‚Äù allowed an attacker to send your phone an SMS message with a malicious payload that allows for direct manipulation of the SIM card itself. This attack still works on older SIM cards, although more modern SIMs are no longer vulnerable to this. Most of the known attacks using SIMJacker involved Latin and South America, the Middle East, Northern Africa, parts of Eastern Europe, and parts of Southeast Asia.\nIf You Must Use SMS\nThere may be services that only offer SMS as their 2FA solution, so in those cases it is better than nothing. If this is the case, there are a few things you can do to secure things ever so slightly.\nIf you have an old phone (5+ years old) you might want to consider upgrading the SIM to a recent one, as these are not susceptible to the SIMJacker issues.\nContact your phone carrier and ask if there are additional security measures to protect your account besides security questions, such as a PIN. In lieu of that, you could also try setting your mother‚Äôs maiden name or family pet security questions to something more, shall we say, unique (e.g.\nHdyla86kajDF64asdlui\n).\nSet a SIM PIN. For iOS devices, follow these\ninstructions from Apple\n. For Android devices, start with\nthese instructions\nbut contact your phone‚Äôs manufacturer website if the instructions do not fit your particular model.\nComplain to the service to offer more than just SMS for 2FA! The more complaints they get, the more likely they might be to offer more secure options.\nAdditional 2FA Concerns\nRemember the purpose of 2FA - it is a secondary authentication method, invoked after the primary authentication method has succeeded. You should only acknowledge a 2FA request if you personally have just successfully completed the primary authentication. An unsolicited 2FA request means someone has your password, and is in the process of trying to log in as you. This is why 2FA exists, to help protect your user account from attacks involving your password.\nIf you experience any such irregularities, please bring it to the attention of the Security Team. For more information, review the handbook regarding\nSecurity Awareness\nSlack\nThere is a lot of information pertaining to Slack, as it is a critical part of GitLab‚Äôs communication. See the\nSlack handbook page\n.\nZoom\nThere is a lot of information pertaining to Zoom, as it is a critical part of GitLab‚Äôs\ncommunication. See the\nZoom handbook page\n.\nThe\nGoogle Calendar\ninvite is the single source of truth for the Zoom link. Avoid linking the Zoom link in Google Document agendas since those may quickly become out of date. If the zoom link changed around the start of the meeting it is OK to have it in there temporarily.\nGoogle\nNeed a new document or new slide deck quickly? Use shortcuts like\nhttps://doc.new\nor\nhttps://slide.new\n. The full list (not even restricted to Google products) is available at\nhttps://whats.new/shortcuts/\n.\nGoogle Docs\nGoogle Docs Pro Tips\nQuickly create a new Google Doc in chrome: type ‚Äúdocs.new‚Äù in the chrome address bar.\nLikewise ‚Äúsheets.new‚Äù for a Google Sheet etc‚Ä¶\nWhile in a document with many other editors, click on the image or icon of any user at the top of the document to move focus to their cursor and what they are typing in the document.\nThis is great when someone is speaking about something they are typing on a video call and you are not sure where they are in the document.\nQuickly find all action items assigned to you with a\nsearch for\nfollowup:actionitems\n.\nTo add additional rows to a numbered list in a Google Document, press\nReturn\nto add additional spaces under the existing numbered list in the document, highlight those spaces, and click the numbered list icon in the formatting bar (or press\nCommand ‚åò + Shift + 7\non a Mac) to create a numbered list from the spaces. See video on\nhow to add more rows to a numbered list\nfor a quick tutorial.\nType the\n@\ncharacter to quickly embed today‚Äôs date, other document titles, references to people, and more; without clicking anything (a menu will pop up). See details in the\nSmart Canvas\nblog post and the\nAdd items with the @ menu\nsupport doc.\nEmoji live-search\ncan be accessed by typing\n@:\n, or shorter using the\n:\ncharacter. Start typing to search for an emoji and press enter to insert.\nPageless docs are great for documents you don‚Äôt intend to print, and is the\npreferred format at GitLab\n. You can\nswitch in File > Page setup\n.\nSee also\nLive Doc Meetings\nfor more Google Doc tips.\nGoogle Analytics\nGoogle Analytics (GA)\nis an essential tool for making data-driven decisions.\nIt receives data from both about.gitlab.com and docs.gitlab.com websites.\nRead through the\nGoogle Analytics Handbook\nfor more information on GA.\nFor example, you can look at the GA data to analyze how visited is a certain page, in a period of your choice.\nYou can also look at the GA referrals data to understand where the users are coming from and where they go when they leave a certain page.\nSet your picture in Google\nOptional:\nSet your picture\nin Google so that your picture will show where you are in a Google document (vs showing just your first intial). This will allow others to more easily follow a discussion when meeting attendees move around in a document.\nAdd name pronunciation in Google\nConsider adding a phonetic pronunciation of your name and/or a pronunciation recording in your Google profile.\nClick on your profile icon on the top-right of any Google account page (i.e. Google Docs, Google Sheets)\nSelect ‚ÄúManage your Google account‚Äù\nOn the left-hand side panel, select ‚ÄúPersonal info‚Äù ¬ª on the center of the page, go to ‚ÄúName & pronunciation‚Äù\nAdd a recording or a phonetic pronunciation e.g. Rochana (Rosh-ah-na)\nGoogle Calendar\nFinding a time\nPlease make use of the Find a Time tab in Google Calendar, especially when scheduling events with teammates in other parts of the world:\nFind a Time presents a new or existing event‚Äôs time for all participants, adjusting for time zones as appropriate.\nTo use Find a Time:\nCreate a new event or modify an existing event.\nClick the ‚ÄúFind a Time‚Äù tab. Invited guests will be presented in the availability table and represented by a column.\nAreas outside of someone‚Äôs working hours (9:00 AM - 5:00 PM by default) are represented in light grey.\nGuests who are optional will not appear in the availability table by default.\nYou can add them by checking their name in the ‚ÄúGuests‚Äù area on the right hand side.\nFor meetings spanning across multiple time zones and with external parties,\nTime & Date Calculator\ncan help determine the best time to schedule.\nGitLab availability calendar\nThe GitLab Availability Calendar has been deprecated to allow for GitLab to scale effectively.\nWe have created\ntools and tips for managing your time off\n.\nSetting working hours & location\nTo help other team members to schedule meetings with you, you can set your normal\nworking hours & location in Google Calendar\n. The preferred times will show up when someone tries to schedule a meeting with you.\nTo set your working hours, go to\nSettings\n->\nGeneral\n->\nWorking Hours & Location\n.\nWorking location\ncan be set here or on your calendar directly by clicking on the pill in the\nAll day\nrow. In Settings there‚Äôs a helpful\nCopy to all\noption as well.\nSince all GitLab Team Members work remotely\nHome\ncan be an ambiguous choice as folks may travel and it doesn‚Äôt provide any context on timezones. If you‚Äôd like, you can choose\nSomewhere else\n(in Settings) or\nEdit pencil\n->\n+\n->\nAnother location\n(from the pill) to set this to something such as\nCity, State, Country (GMT-#)\nand keep it up to date when traveling or timezones shift, which can help folks with planning and understanding timezones.\nGitLab Team Meetings calendar\nThe GitLab Team Meetings Calendar is available to all team members and can be found in your calendars list after it‚Äôs added. To add the GitLab Team Meetings Calendar to your list of calendars:\nGo to\nyour calendar\nScroll the left sidebar down to\nOther calendars\nPress on\n+\nSelect\nSubscribe to calendar\nEnter in the search field\ngitlab.com_6ekbk8ffqnkus3qpj9o26rqejg@group.calendar.google.com\nand then press enter on your keyboard\nPlease reach out to a People Connect Team member if you have any questions. NOTE: Please do NOT remove any meetings from this calendar or any other shared calendars, as it removes the event from everyone‚Äôs calendar.\nYou can find the details for the Company Calls, Group Conversations, 101s, and other teams‚Äô meetings here, so you can attend a different teams‚Äô meeting and ask questions, learn about what they‚Äôre working on, and get to know the rest of the GitLab Departments and teams.\nThese meetings are open to everyone in GitLab.\nIf you are creating a new team meeting, please\nadd it\nto the GitLab Team Meetings calendar\nPlease reach out to the People Connect Team in the\n#people-connect\nSlack channel with any questions, requests or changes to the GitLab Team Meetings calendar.\nAdding an event to the GitLab Team Meetings calendar\nCreate your calendar invite\nAdd your Zoom link\nAdd an agenda or relevant content\nUnder Add Guests, add\nGitLab Team Meetings\nin addition to anyone else you want invited (if you want the entire company invited please use everyone@).\nNote:\nThis will appear like adding a room, which is expected\nManaging invite responses\nIf you are familiar with queries in Gmail, add a filter to remove invites responses from your inbox with the following query:\n*.ics subject:(\"invitation\" OR \"accepted\" OR \"rejected\" OR \"updated\" OR \"canceled event\" OR \"declined\") when where calendar who organizer\nYou can also create a filter to remove ALL invite responses from your inbox with the following search terms:\nSubject: ‚Äúinvitation‚Äù OR ‚Äúaccepted‚Äù OR ‚Äúrejected‚Äù OR ‚Äúupdated‚Äù OR ‚Äúcanceled event‚Äù OR ‚Äúdeclined‚Äù\nHas the words: *.ics\nThen click Create filter:\nSkip the Inbox\nApply the label (of your choosing)\nModifying events\nPlease click ‚ÄòGuests can modify event‚Äô so people can update the time in the calendar instead of having to reach out via other channels.\nYou can configure this to be checked by default under\nEvent Settings\n.\nNotifications\nYou can change the default notification settings by calendar (add or remove notifications for all-day events, add a second default notification to all events‚Ä¶). This is accessible through Settings ->\nSettings for my calendars\n-> pick the calendar ->\nEvent notifications\nand\nAll-day event notifications\n.\nIf you change the default notifications, all existing events will inherit that as well (unless their notifications have been customized).\nRestore deleted calendar items\n(This assumes you are using\nGoogle‚Äôs new Calendar\n).\nWhen you have accidentally deleted something from the Team Meetings calendar, you can recover it by:\nGo to\nGoogle Calendar\nand click the gear icon at the top left of your screen.\nChoose the\nTrash\n.\nMake sure you are on the correct calendar, by clicking on the name of the calendar in the left sidebar.\nHover over the item you‚Äôd like to restore and click the arrow to ‚ÄúRestore‚Äù.\nShow declined events\nWe recommend enabling the ‚ÄòShow declined events‚Äô setting if you are unable to attend a meeting but will still contribute to the agenda or attendance list asynchronously. Use this setting if it‚Äôs helpful for you to see declined meetings in your calendar view for any other reason.\nNavigate to\nEvent settings\nCheck the box for ‚ÄòShow declined events‚Äô under ‚ÄòView options‚Äô\nSharing\nWe recommend you set your Google Calendar access permissions to ‚ÄòMake available for GitLab - See all event details‚Äô. Team member calendars should\nnot\nhave access permissions set to ‚ÄòMake available to public‚Äô due to the risk of sensitive data exposure and\nzoombombing\n.\nConsider marking the following appointments as ‚ÄòPrivate‚Äô:\nPersonal appointments\nConfidential & sensitive meetings with third-parties outside of GitLab\n1-1 performance or evaluation meetings\nMeetings on organizational changes\nThere are several benefits and reasons to sharing your calendar with everyone at GitLab:\nTransparency is one of our values and sharing what you work on is in line with our message of ‚Äúbe open about as many things as possible‚Äù.\nDue to our timezone differences, there are small windows of time when our availabilities overlap.\nIf other members need to schedule a new meeting, seeing the details of recurring meetings (such as 1-1s) will allow for more flexibility in scheduling without needing to wait for a confirmation from the team member.\nThis speaks to our value to be more efficient.\nWhen setting up your Google Calendar be sure to\nset your working hours\n.\nIf you‚Äôd like to share your calendar with e.g. your partner you can use the ‚ÄòShare with specific people‚Äô feature and set the permissions to ‚ÄòSee only free/busy (hide details)‚Äô:\nSpeedy meetings\nEnable speedy meetings to automatically provide a buffer at the end of events you schedule.\nThis thoughtfully allows participants with back-to-back events the opportunity to use the restroom or grab a cup of coffee without being late to their next function.\nWorld clock\nAdd as many time zone world clocks as you wish by, in Google Calendar, going to\nSettings -> World Clock\nin order to see team members‚Äô local times.\nYou can also use sites like\nTimeAndDate\nto convert times to/from UTC for example.\nTime zone\nCheck\nDisplay secondary time zone\nand select\n(GMT+00:00) Coordinated Universal Time\n(UTC). This enables team members to standardize on a single time zone in communicating when meetings take place.\nGoogle Cloud Platform\nSee the\nSandbox Cloud page\nfor a listing of cloud resources and how to gain access to them.\nGoogle Drive\nFirst, an important message - Don‚Äôt use Google Drive/Apps (unless you have to)\nWe would be remiss if we didn‚Äôt start this section off with this IMPORTANT message:\nYour default storage place for information that needs to persist and be available to others in the company should be ON THE WEBSITE/IN THE COMPANY HANDBOOK and not in Google Drive and Google Apps files!!\nThis is from the top.\nThis is how we operate, because Google Docs/Apps can only be found and contributed to by team members, and not by users, customers, advocates, future employees, Google handbook searches, or developers.\nDo not link directly to Google Drive/Apps\nHaving said that, there is content which doesn‚Äôt make sense to be created on the website directly (e.g. large collections of data in tables, spreadsheets for calculations, etc) or for which Google Drive storage makes sense.\nWhen directing folks to these files in Google Drive please include name of the file in the handbook so that team members can search for it in Google Drive. If you link directly to the URL, people from outside the organization can request access, creating workload and the potential for mistakes.\nKeeping it organized\nIt is important that we not just throw files into random or general places in the shared Google Drives.\nDoing so makes it harder for others to find and work with the content.\nHere are some guidelines to organizing the Google Drive content:\nFirst by department (e.g. strategic marketing)\nthen by subject (e.g. analysts relations)\nthen by sub-subjects as deep as necessary (e.g. Gartner -> 2018 ARO MQ)\nUsing Google Drive\nFor starters, when your GitLab Google company account is created you automatically get a Google Drive with unlimited storage allocation in your own ‚Äúhome‚Äù directory (called My Drive).\nYou can get to it by:\n(optional) Login to your GitLab account in your browser (if you are using Chrome)\nOpen your web browser to\nhttps://drive.google.com\nIf you‚Äôre not already logged in as your GitLab account (Chrome users should be) then login to Google using your GitLab account\nThis will take you to your Google Drive (called My Drive) which is like your home directory.\nIf you create Google files using Google Apps and don‚Äôt specify where to store them, they will be put in this home directory.\nThis is great for storing your own working files.\nAs already stated,\nthis should never be the final resting place for shared files\nthat are meant to be used by the rest of the company (or beyond).\nExisting GitLab Google Drive repositories\nThere are a few Google Drive repositories of GitLab shared files (there might be more, please add if not listed here):\nUX Research Drive\n- This houses all findings from\nCustomer Discovery Meetings\nand raw, confidential materials from customers shared with Design, UX Research, Product and Customer Success. Distilled findings from\nUser Research\nare stored in the\nUXR_Insights repository\n.\nGitLab Marketing Drive\n- This houses all shared files from the entire Marketing organization.\nThe best practice is for sub-organizations to have their own directory inside this space (e.g.\nStrategic Marketing\n).\nSales Drive\n- This houses all the shared files from the Sales organization.\nThe best practice is for some sub-organizations to have their own directory inside this space (e.g.\nCustomer Success\n).\nGitLab Alliance Drive\n- This houses all shared files from the entire Alliance organization.\nThe best practice is for sub-organizations to have their own directory inside this space (e.g.\nPartner Discussions\n).\nHow do you use these? You don‚Äôt have to remember these URL‚Äôs.\nTo add these links to your Google Drive My Drive directory, do the following:\nMake sure you are logged into your GitLab account in Google Drive in your browser\nOpen the link of interest (from above) to go to that directory\nFind the directory path across the top (under the ‚ÄúSearch Drive‚Äù field)\nFind the name of directory in that path that you want to add to your drive (e.g. Sales)\nClick on the down arrow next to it\nFrom the resulting pop-up menu, select ‚ÄúAdd to My Drive‚Äù\nFrom now on you can get to that directory by first going to your drive (\nhttps://drive.google.com\n) and then opening that link\nAdding Google Drive to your Mac\nTo really make your Google Drive easier to access, you can have your Google Drive show up on your Mac Finder as a regular drive.\nWith this it is easier to store and view files such as videos, analyst reports (PDFs), etc.\nHere‚Äôs how to do this:\nMake sure you are logged into your GitLab account in Google Drive in your browser\nGo to your Google Drive (\nhttps://drive.google.com\n)\nClick on the ‚ÄúSettings‚Äù icon (Gear) to the right of the search field\nFrom the resulting menu, select ‚ÄúGet Drive for desktop‚Äù\nIt might pull up a new page/tab and use your personal login.\nIf it does this you won‚Äôt see ‚ÄúDownload & install Drive for desktop‚Äù on the page.\nSwitch to your GitLab account.\nDownload and install\nGoogle Forms\nUse these\nGitLab branded form templates\nwhen creating internal or external surveys or forms.\nMake a copy of the form and only edit the copy; do not edit the template itself.\nReview\nwhat data privacy means at GitLab\n. Help participants make informed decisions by applying the following guidelines:\nFor external forms\n: State that any Personal Data collected will be processed in accordance with the\nGitLab Privacy Statement\n.\nFor internal forms\n: Ensure that the purpose for collecting data is stated under our\nTeam Member Privacy Policy\nand that this purpose is made clear to Team Members.\nDon‚Äôt make Personal Data form fields mandatory unless they‚Äôre absolutely necessary to achieve the processing; any inessential Personal Data collected should be through a voluntary form field.\nOnly process Personal Data for the reason in which it was initially collected e.g., if the Google Form collected traveler information, don‚Äôt then use that Personal Data to create a marketing list.\nGoogle Mail (Gmail)\nAuto-advance\nIf you use the archive function, you normally return to your overview.\nWith Auto-advance you can select whether to advance to the next or previous message.\n‚ÄúAuto-advance‚Äù can be enabled from the Advanced section under Settings.\nThis reveals the Auto-advance settings in the General section under Settings.\nThe default setting of showing the previous (older) message is usually preferred.\nEmail signature\n-Set up an\nemail signature\nwhich includes your full name and job title so people can quickly know who you are and what you do.\n-It is also an option to add your\npersonal pronouns\nto your email signature.\nExample\nNote: You can copy and paste the template below to use it in your own signature.\nAlex Doe (they/them)\nEmail signature if employed by our German entity\nDuring onboarding you may have been asked to set up your GitLab Gmail and your email signature using the\nfollowing example as a guideline\n. If you are employed by our German entity, you will need to add some company related details to the end of your email signature as set out\nhere\n(\naccessible internally to GitLab only\n).\nAdd company details to certain company communications if employed by our German entity\nCertain company details are required to be added as a signature to the forms of communication listed below, where that communication is going from a team member employed by our German entity GitLab GmbH to outside of the company, and relates to GitLab‚Äôs business activities:\norder forms\nphysical mail\nfax\npostcard\nemail\nTwitter\nZendesk\nother electronic communications\nIf you are sending such a communication, externally, please look at the setting of the relevant application and add the company details below to the end of the communication. If you are in doubt, please do add the details. If you are unable to add this information for any reason, please alert\nlegal-employment@gitlab.com\n.\nIf you are employed by our German entity you may have been asked during onboarding to set up your signature wherever it‚Äôs required to be used and to include certain company details, and if you have not been, please do so now, as set out\nhere\n(\naccessible internally to GitLab only\n).\nFilters\nApply label on mention\nIt might be useful to add a Gmail filter that adds a label to any GitLab notification email in which you are specifically mentioned, as opposed to a notification that you received simply because you were subscribed to the issue or merge request.\nSearch for\nfrom:(gitlab@mg.gitlab.com) \"you+have+been+mentioned+on\"\n.\nClick the down arrow on the right side of the search field.\nClick\nCreate filter with this search\n.\nCheck\nApply the label:\nand select a label to add, or create a new one, such as ‚ÄúMentioned‚Äù.\nCheck\nAlso apply filter to matching conversations\n.\nClick\nCreate filter\n.\nApply label when assigned as reviewer\nYou can create a Gmail filter that adds a label to any GitLab notification email in which you are assigned as a reviewer:\nSearch for\nfrom:(gitlab@mg.gitlab.com) \"(Reviewer) (Firstname Lastname)\"\n.\nClick the down arrow on the right side of the search field.\nClick\nCreate filter with this search\n.\nCheck\nApply the label:\nand select a label to add, or create a new one, such as ‚ÄúAssigned‚Äù.\nCheck\nAlso apply filter to matching conversations\n.\nClick\nCreate filter\n.\nApply label when MR is merged\nYou can create a Gmail filter that adds a label to any GitLab notification email in which an MR has been merged:\nSearch for\nfrom:(gitlab@mg.gitlab.com) \"Merge Request\"+\"was merged\"\n.\nClick the down arrow on the right side of the search field.\nClick\nCreate filter with this search\n.\nCheck\nApply the label:\nand select a label to add, or create a new one, such as ‚ÄúMerged‚Äù.\nCheck\nAlso apply filter to matching conversations\n.\nClick\nCreate filter\n.\nApply label to all GitLab-generated emails\nGitLab issues and merge requests can generate a lot of email notifications depending on your settings and how in-demand your attention is.\nIt can be useful to apply a label to these generated emails and move them out of your immediate inbox.\nSearch for\nfrom:gitlab@mg.gitlab.com\n.\nClick the down arrow on the right side of the search field.\nClick\nCreate filter with this search\n.\nCheck\nSkip the Inbox (Archive it)\n.\nCheck\nApply the label:\nand select a label to add, or create a new one, such as ‚ÄúGitLab.com‚Äù.\nCheck\nAlso apply filter to matching conversations\n.\nClick\nCreate filter\n.\nYou can learn more about how to use Gmail filters to organize your inbox in\nProductivity Hack video\n.\nTo import downloaded\nfilter export\ngo to Gmail => Settings => Filters and Blocked Addresses => Import filters.\nKeyboard shortcuts\nKeyboard shortcuts only work if you‚Äôve turned them on in Gmail Settings.\nSteps below:\nIn ‚ÄúSettings‚Äù scroll down to the ‚ÄúKeyboard shortcuts‚Äù section\nTurn Keyboard shortcuts ‚Äúon‚Äù\nScroll down and Save Changes\nHere are some shortcuts you can use\nSplit screen\nList your inbox and preview mails in one view with this configuration change:\nCog/settings top right of inbox.\nSettings option.\nInbox tab\nReading pane: enable\nSelect a position for the reading pane, Right of Inbox or Below Inbox\nSave changes\nReload inbox\nInbox Zero\nTo utilitze Gmail to it‚Äôs full potential, consider adopting the\nInbox Zero\nstrategy. It‚Äôs the same way Google employees use Gmail.\nThere‚Äôs also an internal training recording about this. It goes into more details and more ‚Äúpower user‚Äù focused, covering keyboard shortcuts, etc.\nVideo\n(It‚Äôs set to private, so log in with GitLab Unfiltered to watch it: upper right corner > click on your profile picture > switch account > GitLab Unfiltered)\nMeeting notes\nDisable Google Meet and Chat in Google Mail\nThe integration for Google Meet and Google Chat is enabled by default. It can consume too much space in the left menu listing mailbox folders. In order to disable the integration in Google Mail, navigate to\nSettings\nat the right top,\nSee all settings\n,\nMail and Chat\nand select the following:\nChat:\nOff\nMeet:\nHide the Meet section in the main menu\nSave the changes and wait for Google Mail to reload.\nGoogle Slides\nUse this general\nGitLab Slide Template\nwhen creating slide decks for internal and external use.\nMake a copy of the slide deck and only edit the copy; please do not edit the template itself. To avoid potentially editing the source deck, you can go to the\nTemplate gallery\nand click on the\nGitLab Slide Template vYear-Month\nto quickly make a copy and begin a new deck. Ensure that all pages in the slide deck are numbered, with the title page always being number 1.\nSales slide decks\nSlide decks are available in\nHighspot\nin\nGitLab‚Äôs Official Sales Deck Library\n.\nGoogle Jamboard\nJamboard is a collaborative whiteboarding platform, accessible at\nhttps://jamboard.google.com/\n. The results are persisted in Drive and are shareable like any other object.\nGoogle Chrome\nSearch and find things by typing words from document/issue/etc page titles into the urlbar (anything that appears in the page title). The search is ‚Äúbest effort‚Äù but surprisingly efficient at finding that doc or issue you‚Äôve accessed recently.\n‚ÄúSearch engines‚Äù help even more! Typing ‚Äúdrive‚Äù and pressing Tab, for example, searches in Google Drive. To discover and customize them, go to\nSettings > Search engine\n.\nPractice\nChrome keyboard shortcuts\n. Here are a few common helpful shortcuts:\nJump to the address bar:\ncmd l\nCreate a new tab\ncmd t\n, close a tab\ncmd w\n, undo close tab\ncmd shift t\nOpen new incognito window:\ncmd shift n\n(e.g. to reproduce a UI bug, or login problem)\nSearch all opened tabs:\ncmd shift a\nHide the bookmarks bar:\ncmd shift b\n(e.g. for screenshots, or shared screen presentations)\nOpen the developer tools:\ncmd option i\n(e.g. for debugging website errors)\nYou can\norganize tabs into tab groups\n, assign names and custom colors, and collapse or reorder them. Moving tabs between groups also works across browser windows.\nLogging in to the browser (with your GitLab Workspace account) preserves\nyour profile across installations\n. This is helpful to migrate bookmarks, extensions, and configuration\nwhen refreshing your laptop\n.\nChrome Performance Settings\nEnable the\nmemory saver\n. This will pause inactive tabs and reduce memory consumption.\nEnable the\nenergy saver\n. This can help extend battery life by telling Chrome to reduce background task activities.\n1Password and Environment Variables\nAI at GitLab Tips\nEditors and IDEs\ngit\nLinux tools and tips\nmacOS tools and tips\nMermaid Layouts\nOther apps\nPersonal VPN\nRuboCop\nSearching GitLab like a pro\nSlack\nZoom\nLast modified July 9, 2025:\nGoogle tag manager handbook (\n7a73052e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 9475}
{"doc_id": "872a53a14a8034e0", "url": "https://handbook.gitlab.com/handbook/marketing/integrated-marketing", "title": "Integrated Marketing | The GitLab Handbook", "text": "The Handbook\nMarketing\nIntegrated Marketing\nIntegrated Marketing at GitLab\nIntegrated Marketing\nTeam Mission Statement\nBe the strategic growth engine for GitLab by creating and accelerating high quality demand, partnering ecosystem-wide and being platform champions.\nTeam Norms\nWe are a team that transparently communicates wins, challenges, and marketing insights that helps us feel connected to our purpose as a team and a company.\nWe are tightly connected and operate as one respectful, supportive and collaborative IM team, communicating a united story about our reason to be, the context in which we operate and why we move in an intentional direction.\nWe are innovative, strategic, and data-driven, delivering a cohesive high quality marketing motion that aligns across our joint stakeholder goals.\nThe Integrated Marketing works across SMB, Mid Market and Enterprise segments as well as globally in the Americas, Europe/Middle East and Africa (EMEA) and Asia-Pacific (APAC) to create relevant game plans and thoughtful execution, enabling GitLab to:\nGenerate high quality, high-propensity demand\nPartner ecosystem wide, including the channel, alliances and the community\nBe champions of the DevOps platform\nWe are innovative, strategic, and data-driven, delivering a cohesive high quality marketing motion.\nTeam Norms (how we operate)\nWe are a team that transparently communicates wins, challenges, and marketing insights that helps us feel connected to our purpose as a team and a company.\nWe are tightly connected and operate as one respectful, supportive and collaborative IM team, communicating a united story about our reason to be, the context in which we operate and why we move in an intentional direction.\nWe are innovative, strategic, and data-driven, delivering a cohesive high quality marketing motion that aligns across our joint stakeholder goals.\nTeams (what we do)\nDigital Experience\n: Responsible for creating customer-centric approach to educating prospects on how GitLab enables them to deliver software faster and more securely on the marketing site.\nCorporate Events\n: Create experiences through 1st and 3rd party events to bring awareness to the GitLab story and build our presence with key audiences.\nDigital Strategy\n: Leverage paid and owned media tactics to foster awareness, generate leads and reach audiences where they engage.\nAccount Based Marketing (ABM)\nAccount Based Marketing\nCampaigns\n: Deliver creative ways of telling the GitLab narrative, through different channels, formats and platforms.\nLifecycle Marketing\n: Engage, nurture and convert customers across the customer journey.\nRegional Marketing\nField Marketing\n: Be the feet on the street, creating local and regional experiences, learning and evangelism in close partnership with Sales.\nChannel Marketing\nChannel\n: Exponentially grow GitLab‚Äôs reach through the ecosystem to build awareness and generate demand.\nOKRs/Goal/Plan (how we impact)\nIntegrated Marketing OKRs cascade from CMO OKRs\nFY25 IM strategy\nHow to Communicate with integrated Marketing\nYou can find us on Slack in the\n#marketing_integratedmarketing\nchannel.\nCadence of meetings within Integrated Marketing\nWe value our asynch value and believe that people truly need time to think and process. The Integrated Marketing team, like all GitLab team members, should feel empowered to decline meetings based on the agenda topics.\nThe IM team meets the 1st and 3rd Wednesday of the month and the time rotates between being EMEA/AMER & AMER/APAC timezons. We discuss key cross-functional issues, our progress on our OKRs for the quarter, and to ideate how we can better unify our marketing motions, as well as having a little fun getting to know each other!\nMonthly Regional Readouts with Sales\nEach month, Integrated Marketing meets with regional Sales Leadership to discuss key metrics and team updates.\nThis GitLab Epic\n(confidential) documents the past readouts as well as preparation for the future readouts monthly.\nSee this doc for details on consistently pulling metrics for Monthly Regional Readouts (GitLab Internal)\nCross-functional team processes\nPublisher Programs\nDue to the fact that teams outside of the digital marketing team are only allowed to run three paid social campaigns a month, we would not want to use one of our three slots for the month to run a publisher program with a publication that we already have relationship with. This is for two reasons: 1. To work with our 3rd party ad agency, there is 12-15% fee that is based off the ad spend of the publisher engagement to accommodate their services and reporting 2. because we do not want to take the place of a paid social campaign. Should we go down the route of wanting to work with a publisher, then the team member should collaborate by tagging the Campaign Manager & Digital team manager who you normally work with in the campaign issue. By tagging this team in your issue, the Campaign Manager & Digital team member will be able to ensure the publisher engagement does not conflict with existing activities running.\nRegional Sales leaders seeking approval for activity outside of Mktg Supported countries\nFor strategic reasons, a regional leader may desire marketing activity outside of the agreed upon\nmarketing countries of focus\n. As such,\nthis issue template\nshould be used to seek approval.\nCorporate Event Marketing at GitLab\nFor corporate event marketing at GitLab\nDigital Strategy\nThe Digital Strategy team generates new prospects through paid channels by building & managing digital marketing campaigns, testing incremental changes for conversion rate improvement, and tracking campaign performance.\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 887}
{"doc_id": "a3e002a5b5b7c75b", "url": "https://handbook.gitlab.com/handbook/security/corporate/end-user-services/supported-apps/google-workspace/google-mail", "title": "Google Mail (Gmail) | The GitLab Handbook", "text": "The Handbook\nSecurity at GitLab\nCorporate Security (CorpSec)\nCorpSec End User Services (EUS)\nEUS - Supported Apps (Placeholder)\nGoogle Workspace\nGoogle Mail (Gmail)\nGmail usage and configuration guides\nGmail is our primary mail application. You can access the app via the\nG Suite SSO Mail\ntile in your Okta Dashboard or by directly going to\nthe gmail page\n.\nThis page aims to provide solutions for some of the most commonly asked questions we have received. For more in-depth support, please visit the\nofficial Gmail support page\n.\nGmail Access Requests\nYou can use\nthis AR template\nto request the following:\nAccess to someone‚Äôs Gmail\nAn out of office message set for someone else‚Äôs Gmail\nAn alias created for your own Gmail account\nSet up Out-of-Office Replies\nGo to your Gmail‚Äôs\nGeneral Settings\npage\nScroll down to\nOut-of-Office AutoReply:\nConfigure the start and end date for the message\nWrite your out-of-office reply message. Please be sure to include contact details for whoever is taking over your responsibilities while your are away.\nUsing Aliases\nRequest an alias to be added to your account by creating a\nGmail support AR\nOnce granted, go to your\nGmail Accounts Settings page\nUnder\nSend mail as:\nclick on\nAdd another email address\nEnter your alternate email address in the resulting pop-up, and click\nNext Step\nThe new email address will now appear on your account and you can choose to make it the default or not\nSet Up Delegate Access\nTo allow others to access to your account to perform tasks such as sending messages, you first need to enable the feature for your account.\nGo to your\nGmail Accounts Settings page\nUnder\nGrant access to your account:\n, click on\nAdd another account\nFollow the instructions in the resulting pop-up to verify your ID\nEnter the email address of the person you‚Äôd like to grant delegate access to\nAsk the person receiving delegate access to check their emails for the confirmation message\nOnce they accept, they‚Äôll be able to send messages on your behalf by clicking on their profile picture in the top-right corner of their Gmail account and then selecting your account name\nSetting up Filters and Labels\nYou can use filters and labels to automatically sort incoming emails to better organize your inbox or even automatically delete unwanted messages.\nGo to the\nFilters and blocked addresses\ntab in your Gmail Settings\nClick on\nCreate a new filter\nSpecify the conditions for the filter (Eg. all emails from a certain sender)\nClick\nCreate Filter\nSpecify how Gmail should handle the all emails that match the conditions you specified\nClick\nCreate filter\nLabels\nWhile specifying how Gmail should handle emails that match your specified conditions, you‚Äôll notice a check box for\nApply the label:...\n. These labels can be used to easily mark and filter incoming emails based on their contents.\nClick on the arrow next to\nApply the label: Choose label..\nand select\nNew label..\nGive your label a name (E.g. EUS support emails)\nYou‚Äôll also be able to nest the label under an already existing label\nMake sure to check the box next to the\nApply the label..\nfield and select your label from the drop-down menu\nContinue configuring your email filters\nReporting Spam Messages\nOn the right-hand-side of your inbox, click on the\nPhishArm\nadd-on icon\nClick on the suspicious email\nDO NOT CLICK ON ANY LINKS IN THE EMAIL\nClick on the\nReport Email\nbutton in the PhishArm panel\nFurther Support\nIf you need any additional support, please feel free to reach out to us via #it_help in Slack or\nit-help@gitlab.com\n.\nLast modified July 16, 2025:\nReplaced Zoom with Gmail in the page description (\n6e8bed46\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 625}
{"doc_id": "77d86dbde230bca9", "url": "https://handbook.gitlab.com/handbook/marketing/lifecycle-marketing/email-best-practices", "title": "Email Best Practices | The GitLab Handbook", "text": "The Handbook\nMarketing\nLifecycle Marketing\nEmail Best Practices\nAn overview of GitLab‚Äôs email best practices.\nOverview\nThis page focuses on email best practices and their implementation at GitLab. You‚Äôll also find information on important metrics to consider when sending an email and our email templates with image size guidelines.\nEmail marketing best practices\nPlease see our most up to date email best practices in our guide\nhere\n.\nSubject line best practices (and preview text)\nUse subject lines to justify sending the email and connecting to a problem that the reader might have\nAsk yourself ‚Äúwhy would I open this email‚Äù? - include the\nvalue proposition\nKeep it short and sweet - only include that is absolutely necessary\nTry to keep it under 65 characters\nFront-load - put important information\nfirst\nBe specific - emphasize what the reader ‚Äúgets‚Äù out of reading this email\nTest when you can!\nChad White, email marketing strategist and book author created the\nCUE-DIVE method\n:\n‚ùè Contextual - personalized, localized, segmented, relevant, anticipated\n‚ùè Urgent - topical, events, deadlines, newsjacking\n‚ùè Emotional - aspirations, happiness, anxiety, duty, fear\n‚ùè Detailed - answers the question ‚Äúwhat is this email about?‚Äù\n‚ùè Intriguing - questions, curiosity, mysterious, humor, puns\n‚ùè Visual - very long or very short, unusual spelling, emoji, unusual punctuation\n‚ùè Earned - testimonials, reviews, endorsements, media coverage\nSUBJECT LINES AFFECT OTHER METRICS TOO! Subject lines affect click through rates & conversions! Poor subject lines can damage the performance of future email campaigns. Do not underestimate their importance!\nThe preview text is the first sentence displayed in an email client alongside the subject line (before opening the email), don‚Äôt ignore it! Some email clients show 90 characters, so there is some flexibility with length\nEmail content best practices\nEmail copy should be clear and concise. Brevity is key. Think about conversion, not sharing every detail from the LP\nFocus on value-first content and CTAs. Ask yourself: ‚Äúwhat‚Äôs in it for the subscriber?‚Äù\nAvoid walls of text when possible - think facts, not fluff\nLead with benefits and add details where appropriate\nUse extremely clear wording and remove words that don‚Äôt provide value\n1-2 CTAs per email is best practice (calls-to-action)\nTake advantage of content hierarchy\nWrite for people not technology, this means you can use humor when it makes sense\nButtons should be no longer than 25 characters - 14 characters as a standard\nMake sure that the size of your HTML file does not exceed 102kb, otherwise gmail will truncate your email and your email will be out of compliance.\nIf linking to the GitLab marketing site, make sure that the URL has a slash at the end of the link. Marketing site pages will not render if there are URL params and there is no trailing slash.\nDesign best practices\nConsider resposive design\nCode all text in HTML\nMinimize CTAs\nCTAs must be in sentence structure caps (ex: Register now)\nImages should add to the goal of your email and not take away from it\nAn email is not a landing page\nConsider accessibility\nIn order to accomodate different clients and modes (dark mode, etc) header image requests to the design team must be for transparent images. This means that the image will not look right without a solid background in the email header. We cannot use a non-transparent image because they do not render properly in all clients.\nA/B testing best practices\nAdd your tests to the\nA/B testing tracker here\nEach test group should include at least 1000 people\nYou need a bigger test group if you‚Äôre testing for click-through rate versus testing for open rate\nHave a goal and idea regarding what you want to improve and how your test is going to help with that\nTest\none\nvariable at a time\nDue to our small sample sizes, we recommend a full 50/50 split versus a 10/10/80 or 20/20/60 split\nRemember your subject line or ‚Äúfrom name‚Äù (testing open rates) could have an impact on click-through rate and conversion rate\nLet the Campaign Manager know at the beginning of the project if you‚Äôre interested in running an A/B test and what your goals/hypothesis is\nKeep track of the split test learnings so we can learn and innovate!\nEmail KPI‚Äôs that matters\nTo view current benchmarks in Marketo, go to the\nEmail Insights Tab\n.\nThe Importance of Content in Email Marketing:\nCreating high-quality content within the body of the email is essential in email marketing for several important reasons:\nEngagement and Audience Retention: Quality content captures the attention of your recipients and keeps them interested in what you have to say. An email with valuable and relevant content increases the likelihood that recipients will read the entire message and potentially interact with it.\nConverting Leads into Customers:\nGood content can persuade your recipients to take action, such as clicking a link, registering for an event, downloading a resource, or making a purchase. Effective content can directly contribute to converting leads into customers.\nDifferentiation and Positioning:\nHigh-quality content sets you apart from the competition and positions you as a leader in your industry. You can share relevant information, updates, and insights that showcase your expertise.\nIn summary, developing good content within the body of the email is essential for attracting, retaining, and converting your recipients. A well-designed email filled with valuable content can make the difference between the success and failure of your email marketing campaigns.\nDelivery Rate:\nGitLab benchmark: 97%\nOur delivery rate should be in the high 90s.  Anything below this number needs to be addressed. A low delivery rate could be indicative of two things: poor list quality or the wrong email service provider.\nHow to calculate delivery rate: Number of emails delivered / number of emails sent.\nExample: 950/1000 = 95% Delivery Rate.\nOpen Rate:\nGitLab benchmark: 23%\nImportance of Subject Lines in Email Marketing:\nAttracting Attention: The subject line is the first thing your recipients see when they receive an email. It should be compelling and relevant enough to immediately capture their attention and persuade them to open the email.\nIncreasing Open Rate: A good subject line can make the difference between an email being opened or ignored. A high open rate is essential for your message to reach your audience.\nConveying Value: The subject line should clearly and concisely communicate the value or benefit that the recipient will gain by opening the email. It should answer the question: ‚ÄúWhy should I open this email?‚Äù\nCreating Expectation: You can use the subject line to build anticipation or intrigue, which can motivate recipients to open the email to learn more.\nReflecting the Brand: Subject lines can also contribute to building your brand image. They should align with the personality and tone of your company.\nOur email open rate is directly tied to our subject line and possibly our subheader. What is considered a good open rate will vary by industry, but on average, a healthy open rate may be anywhere between 15%-25%.\nThe KPI most directly impacted by the subject line is the Open Rate. This metric measures the percentage of recipients who opened your email compared to the total emails sent. An effective subject line can significantly increase this rate, indicating that more people are interested in your content and willing to engage with your messages.\nFor a software and web application company like GitLab, the average open rate percentage may vary, but a good benchmark is between 20% and 30%.\nIf our open rate is low, consider testing different subject lines or preheaders to see what style works best with our customers.\nHow to calculate open rate: Number of emails opened / number of emails delivered\nExample: 200/1000 = 20% Open Rate\nClick Rate (CTR)\nGitLab benchmark: 2%\nThe click rate is the measure of how many people who received the email clicked on CTA, image, or links within the body of the email.\nThe average click through percentages in email marketing campaigns for software and web application companies like GitLab can vary, but a good general benchmark is a CTR ranging from 2% to 5%.\nThis value can vary significantly depending on various factors, such as the quality of the subscriber list, content relevance, the effectiveness of calls to action (CTA), and proper audience segmentation.\nThat said, it‚Äôs important to remember that the ideal CTR can vary from one company to another and largely depends on the specific goals of the campaign. Some campaigns may have a higher CTR if the content is highly relevant, and the audience is highly engaged, while others may have lower CTRs if they are sent to a broader and more diverse list.\nHow to calculate click-through rate: Number of clicks / number of emails delivered\nClick To Open Rate:\nGitLab Benchmark: 7%\nThere are several factors which could go into a low click-to-open rate, such as our email design, our content, our call to action ‚Äî really any element in the body of our email.\nIt is a little more challenging to isolate what may be causing a low click-to-open rate, which is why we need to set up some A/B test splits to determine the cause.\nHow to calculate the Click To Open Rate: Unique Clicks / number of emails open.\nExample: 50/200 = 25%\nOpt-Out Rate:\nGitLab Benchmark: 0.3%\nGenerally a good (low) unsubscribe (or opt-out rate) is below 0.2%. But anything above 1% is a problem. Determining why customers are opting out can be a challenge, so be proactive. Set up a brief survey for people who do opt out asking why.\nHow to calculate opt-out rate: Total Opt-outs / number of emails delivered.\nExample: 5/950 = 0.5% Unsubscribe Rate.\nEmail Templates\nPlease see\nthis issue\nfor more details and to see how the email templates look\nWhat are email templates?\nAn email template is a reusable HTML file that is used to build email campaigns (according to Litmus).\nWhy are email templates important?\nUsing an email template allows you to produce campaigns faster, since the underlying code is already written. Instead of having to rewrite an entire email from scratch for every send, you can simply add copy, images, and links to an existing template before testing and sending it to your subscribers (according to Litmus).\nWhat email templates are available for us to use?\nIn Marketo (Design Studio > Email Templates), the following email templates are available:\nTemplate Name in MKTO\nUse For\nImage Specs (px, w x h)\nNotes\nA - Event Invite v3.0\nEvents or asset downloads\nHeader background image - Transparent background 600x345\nTop button is removable,\nThe text version will need to be updated manually due to limitations with marketo variables\nB - Advanced modular template - light mode\nLarger events/assets with more modules to add with speakers\nHeader - Transparent background 600x345, Speaker images - 300x300 (2x the size)\nDo not use all modules at once,\nThe text version will need to be updated manually due to limitations with marketo variables\nC - Simple email template\nAssets/webcasts/events/anything\nBackground image - png 600x wide. Transparent background\nOnly use with 1 CTA\nD - Letter format v1.0\nAny letter-like communication such as account update\nE - Newsletter Dark Mode\nDevOps Download developer newsletter only\nThe only image we swap out is the background image of the release section - 600px wide. The top image (infinity loop) is 600px wide also.\nFor DevOps Download newsletter only\nF - Level Up Certification Invite Template\nLevel-up certification content\nG - Event Invite with 2 buttons\nWebcast invitations, events, ABM, anything really\nHeadline background image - 600x345; Speaker images - 300x300 (2x the size)\nThe text version will need to be updated manually due to limitations with marketo variables\nH - Advanced modular template\nLarger events/assets with more modules to add with speakers\nTransparent background 600x345, Speaker images - 300x300 (2x the size)\nDo not use all modules at once,\nThe text version will need to be updated manually due to limitations with marketo variables\nAdditional links/info:\nA - Event Invite v2.0 ‚Äì\nB - Newsletter Dark Mode v1.0\n(Only for use by the DevOps Download newsletter)\nC - Event Invite 2 buttons and speakers v1.0 ‚Äì\nD - Letter format v1.0\nE - Newsletter Remote v1.0\n(Only for use by the All Remote team)\nTemplate notes\nABM Email Template - please use ‚ÄúEvent Invite 2 buttons and speakers v1.0‚Äù\nNurture emails - please use ‚ÄúEvent Invite 2 buttons and speakers v1.0‚Äù\nEvent invites or reminders - please use ‚ÄúEvent Invite 2 buttons and speakers v1.0‚Äù\nPrivacy policy updates, account updates, or text-heavy emails - please use ‚ÄúLetter format v1.0‚Äù\nIf you don‚Äôt have Marketo access and would like to see what the email templates look like,\nplease view the project Epic and corresponding issues\n.\nIt is very important that you format your copy to align with the design of the email template you‚Äôre using. This will improve efficiency of building emails, and ensure copy is best fit to the layout.\nWhat if I want a custom email template?\nYou may submit a request for a custom layout, but please note that the critical priority currently is to efficiently launch emails and nurtures into market. In your\nrequest\n, please tag @aklatzkin and clearly describe why the existing layout is not satisfactory, how often and broadly the requested template will be used, and quantifiable benefits we anticipate from the new layout. To reiterate: Upon implementation of the critical emails and nurtures, we plan to devote more time and energy to developing and testing new templates, however the launch of lifecycle emails takes precedence over these requests.\nLast modified March 31, 2025:\n[MR] Update file email-best-practices.md (\n669cc9fd\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2293}
{"doc_id": "e2bbf442061d5e0b", "url": "https://handbook.gitlab.com/handbook/sales/field-manager-development", "title": "Field Manager Development Program | The GitLab Handbook", "text": "The Handbook\nSales\nField Manager Development Program\nThe Field Manager Development Program equips managers with a foundational set of skills & practices for effectively managing remote teams across GitLab‚Äôs field organization\nOverview\nManager effectiveness is important to GitLab‚Äôs continued ability to attract, develop, and retain key talent and deliver scalable, efficient growth. In response, the Corporate L&D, People, and Field Enablement teams are collaborating to launch this FY22 program to equip managers with a foundational set of skills & practices for effectively managing remote teams across GitLab‚Äôs field organization.\nTarget Audience\nAll people managers in the GitLab field organization\nApproach\nManagers will participate in a series of quarterly training & reinforcement exercises throughout FY22. While there will be formal training elements, a large focus will be on social learning (learning from others) and practical, real-world application to convert knowledge to action.\n(2021-03-22): Program Launch & Recruiting Top Talent (virtual)\n(2021-05-24, 2021-05-26, and 2021-06-02): Field Manager Challenge (virtual)\n(2021-10-04): Recognition, Coaching & Manager Operating Rhythm (virtual)\nTopics\nThis program will leverage content from the GitLab Manager Challenge and address multiple learning objectives supporting the following categories:\nWinning Top Talent\nWhat is a High Performing Team?\nOrganizational / Team Health\nPerformance Management & Giving Feedback\nRecognition, Coaching & Manager Operating Rhythm\nContent\nProgram Overview\nField Manager Development Program Overview\n(11.5 minutes) (\nslides\n) (GitLab internal only)\nWinning Top Talent\nThe Importance of Winning Top Talent\n(13 minutes, GitLab internal only)\nDefining Team Needs\n(6 minutes, GitLab internal only)\nKicking Off the Process With Recruiting\n(8.5 minutes, GitLab internal only)\nImportance of the Candidate Experience\n(15 minutes, GitLab internal only)\nInclusive Interview Practices\n(32 minutes, GitLab internal only)\nAssessing Candidates\n(10 minutes, GitLab internal only)\nWhat is a High Performing Team\nPre-work: Module 1 of the\nField Manager Development Program journey\nBuilding High Performing Teams (\nslides\n) (GitLab internal only)\nWelcome\nfeaturing Ryan O‚ÄôNell (6 minutes)\nField Manager Spotlight: High Performing vs. Low Performing Teams\nfeaturing Helen Mason (4 minutes, GitLab internal only)\nBreakout Exercise:\nHigh Performing vs. Low Performing Teams\n(3 minutes)\nDrexler-Sibbet Team Performance Model Overview\n(3 minutes)\nBreakout Exercises: Drexler-Sibbet Team Performance Model\nStages 1-4\n(18.5 minutes)\nStages 5-7\n(4 minutes)\nKey Take-Aways\n8am PT session\n(4.5 minutes)\n2pm PT session\n(5.5 minutes)\nOrganizational and Team Health\nPre-work: Module 2 of the\nField Manager Development Program journey\nOrganizational & Team Health (\nslides\n) (GitLab internal only)\nBuilding Trust with Remote Teams\nwith Dr. Jeb Hurley from\nTrustMetryx\n(76 minutes)\nConnecting the Human Dots\n(slides)\nGitLab Field Managers‚Äô\nCross Team TrustMetryx Experience Report\nGitLab Field Managers‚Äô\nYour Manager TrustMetryx Experience Report\nFive Dysfunctions of a Team\nwith Denise Parsonage (People Business Partner) (17 minutes)\nQ2 Module 2 Wrap-Up\nwith Michael Leutz (6.5 minutes)\nPerformance Management and Giving Feedback\nPre-work: Module 3 of the\nField Manager Development Program journey\nPerformance Management (\nslides\n) (GitLab internal only)\nPerformance Management Module Introduction\nDavid Sakamoto (VP, Customer Success\n8am PT intro (3 minutes)\nQ3 Field Manager Summit Look Ahead\n(1 minute)\nPerformance Management Module Learning Objectives\n(1 minute)\nField Manager Spotlight: Giving Feedback\nJennifer Kenney-Smith\n(12 minutes)\nReshmi Krishna\n(13 minutes)\nPerformance Management Best Practices\nfeaturing Amy Tisdale (Team Member Relations Specialist) (26 minutes)\nGroup Discussion:\nPerformance Management Lessons Learned\n(16 minutes)\nGroup Discussion:\nTailoring Your Approach to Giving Feedback\n(12 minutes)\nGroup Discussion:\nAn Awkward Performance Review\n(5 minutes)\nBreakout Exercise:\nPerformance Management\n(13 minutes)\nRecognition, Coaching & Manager Operating Rhythm\nPre-work: Module 4 of the\nField Manager Development Program journey\nRecognition, Coaching, and Manager Operating Rhythm (\nslides\n) (GitLab internal only)\nSession Intro\n(2 minutes)\nWelcome\nfrom Michael McBride (GitLab Chief Revenue Officer) (15 minutes, GitLab internal only)\nCRO Leader Perspectives on Coaching\nfeaturing Michelle Hodges (GitLab VP WW Channel Sales) and Nima Badiey (GitLab VP, Alliances) (11 minutes, GitLab internal only)\nFostering Field Recognition\nfeaturing Denise Parsonage (Director, People Business Partner) and Monica Jacob (Manager, Field Communications) (15 minutes, GitLab internal only)\nRecent Photo Ice Breaker Activity\n(3.5 minutes)\nWhen to Coach Breakout Discussions\nled by Carolyn Bednarz (Director, People Business Partner) (23.5 minutes, GitLab internal only)\nField Manager Spotlight: GROW Model\nfeaturing Ed Cepulis (Sr. Director, Channel Programs and Enablement) (11 minutes)\nRole Play Breakout Activity: GROW Coaching Model\n(35 minutes, GitLab internal only))\nManager Operating Rhythm & Closing\n(5 minutes)\nManager Operating Rhythm (MOR)\nHandbook page\nCore Team\nCarolyn Bednarz\n(People Business Partner, Sales)\nJosh Zimmerman\n(Learning & Development Manager)\nDavid Somers\n(Sr. Director, Field Enablement)\nField Manager Advisors\nDave Astor\n(Manager, Solutions Architects, US East)\nRobbie Byrne\n(Area Sales Manager, EMEA)\nEd Cepulis\n(Sr. Director, Channel Programs and Enablement)\nMichael Leutz\n(Manager, Customer Success Managers, EMEA)\nHelen Mason\n(Area Sales Manager (Mid-Market), EMEA)\nJacob Potter\n(Area Sales Manager, Mid Market First Order)\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 807}
{"doc_id": "568682b6b311a9e5", "url": "https://handbook.gitlab.com/handbook/ceo", "title": "CEO | The GitLab Handbook", "text": "The Handbook\nThis page details processes specific to Bill Staples, CEO of GitLab.\nWhy I‚Äôm at GitLab\nI love software. I love developers. In my lifetime, I‚Äôve seen software change every aspect of modern life. I believe we‚Äôre still in the early stages of software transformation, and AI will accelerate how software changes the human experience in the coming decade. There has never been a better time in history to be in the software business and serving developers. GitLab is a strategic asset for the companies we serve because we provide the platform they use to create software experiences for their customers. As we serve developers and improve their work and lives, our positive impact is amplified through them, ultimately reaching billions of people around the world in profound ways.\nI am honored to lead GitLab as CEO. It is the climax of my career after nearly 30 years of serving developers. I am committed to maximizing our impact in service of customers, shareholders, and team members. I am competitive, and I want to win. Winning begins with delivering software to our customers, creating positive results they can‚Äôt get any other way, and continuing to do that in a rapidly expanding and evolving market. That means innovation. It also means driving results for customers as our first priority. It means continuing to focus on responsible growth and performing in an elite class, one of the very few who are the very best in the world for the categories we compete in.\nThis README is meant to help anyone who needs to work with me by providing a brief overview of what is important to me.\nMy Personal Values\nIntegrity:\nTrust is the most important thing in any relationship. Trust is knowing you can count on me to say what I mean and do what I say. I try to live my life in strict adherence to this value, and when I fall short, I try to proactively and openly acknowledge and recommit. My single biggest ‚Äòhot button‚Äô issue is when someone does not follow through on something they said they would do.\nCurious:\nI try to live what many call the ‚Äúgrowth mindset,‚Äù which means that I‚Äôm always learning, striving to improve, and iterating to be better. I feel very imperfect and self-critical on the inside, and I constantly strive to learn as much as I can while appreciating that I can‚Äôt know it all. I‚Äôm open and accept constructive feedback from anyone, anytime.\nResults:\nGood ideas, hard work, and fun on the job are all important, but ultimately, our results are what matters. I care far more about outcomes than effort. I strive to do everything at a high standard of excellence, and I‚Äôm never satisfied with the status quo. I seek people who are equally committed to being world-class.\nMy Super Powers - how you can get the best from me\nPassionate\n- I work for causes and missions and pour my heart into them. My brain is highly analytical, detail-oriented, and (usually) pretty fast, but my heart is equally important to understand me: I feel things deeply and try to help others around me both see the possibilities and feel motivated and inspired to strive toward what others may not think possible.  I am passionate about my work. It is not just a job for me. It is where I find meaning, purpose, value, and how I contribute to the world.\nCuriosity\n- I ask a lot of questions and like to absorb information quickly. I like being surrounded by people I can learn from and collaborate with. I often see patterns and synthesize disparate points of information to help others make sense of the work and align on a direction.\nWork Ethic\n- From my early life, I have always worked very hard and enjoyed it (most of the time). I especially enjoy ‚Äúthe struggle,‚Äù solving complex problems, grinding on hard issues, and rising above roadblocks. George Bernard Shaw once wrote, ‚ÄúI want to be thoroughly used up when I die, for the harder I work, the more I live.‚Äù\nMy Weaknesses - double-edged swords are real\nPassionate\n‚Äî I sometimes come across as emotionally charged, overly critical when we fall short of goals, or emotional when something touches my heart. I don‚Äôt smile enough on the outside (even though I‚Äôm generally pretty happy on the inside‚Äîbecause solving problems is fun to me!).\nHow to help me manage this: It depends on the situation. There is a time to be serious, but it is also possible to overdo it. Try smiling to remind me that I can lighten the mood. A well-timed joke is always helpful, and feel free to ask with a smile, ‚ÄúAre we having fun yet?‚Äù to make me think.\nCuriosity\n- I sometimes exhaust people with my many questions and drill-in tendencies. As I‚Äôm a genuinely curious person and care about all parts of the business,  I regularly do this, and it is not always an indication that something is off.\nHow to help me manage this: Come prepared for meetings. If you don‚Äôt know the answer, let me know and be clear on when you will follow up. If you have concerns about whether my drilling affects your performance, let me know so we can discuss it.\nWork Ethic\n- Occasionally, people struggle to keep pace with my style of work.\nHow to help me manage this: let me know if you are struggling so we can discuss it.\nSuggestion: If I am negatively impacting you, I welcome constructive feedback and will do my best to moderate my approach.\nMy Expectations of Everyone (including myself)\nCollaborate\n- By default, I expect everyone to actively work with their teams, peers, and leaders, as well as customers, partners, and investors (as applicable), to identify the ‚Äúabsolute best‚Äù ideas, no matter where they come from. I hire and retain leaders who I believe are experts in their functions and whom I feel personally excited to work with and learn from. Still, I also believe the best leaders actively learn from and incorporate good ideas from everywhere. I expect E-Group members to have similarly high expectations for team members.\nAccountability\n- By default, you are trusted to do your job, and I believe part of everyone‚Äôs job is to communicate expectations, set metrics and targets, and meet them. Along the way, the single most powerful way to ensure expectations are managed and met is to discuss or ‚Äúinspect‚Äù the work regularly. This powerful tool\ndoes not\nrepresent a lack of trust or micromanagement; when done right, it ensures the best ideas are being pursued, surprises and roadblocks are rapidly identified and removed, and outcomes are maximized. I like creating operating rhythms that enable automated inspection and collaboration opportunities for every mission-critical initiative on a regular basis.\nSelfless\n‚Äî The very best leaders I know are smart and driven, and they motivate and inspire others to do their best work. Careful observation of these leaders also reveals that they check their egos at the door and focus on what is best for the company and customers first. They serve others around them and act selflessly for the greater good.\nMy Role\nI am the CEO of GitLab. Here is what I do in 12 words or less that is unique to my role:\nLead the team that defines and drives GitLab‚Äôs strategy & execution.\nCommunication Preferences\nI prefer Slack to email. I try to respond to every Slack message I get every day. Keep them concise.\nIf you need me in near real-time, text or call my phone. My EBA can help to get you in touch if you don‚Äôt have this information and it is urgent.\nIf you have a complex question or need a discussion on something async that will require more than a few sentences for me to reply, put it into a document and share it with me with comments. I read fast and am pretty efficient at giving feedback this way.\nUse email when it is an external-facing communication, but don‚Äôt expect me to respond in < 1 week unless you ask me to look at it sooner over Slack or it is regarding a critical external matter.\nExpectations for leadership\nWhat I need from you. What you will get from me.\nIf you tell me you will do something, I expect you to do it to the very best of your ability on time. I will, too.\nIf you fail at something, I expect you to own it and not make excuses. I will, too.\nIf you succeed at something, I expect you to give all the credit to your team. I will, too.\nI want to be part of a world-class company that is respected for being ‚Äòexcellent‚Äô and unrivaled in our category. I expect you to constantly strive to increase your team‚Äôs output quality and volume through greater alignment and efficiency. I can‚Äôt judge your personal or team capacity, so I will push work until you set my expectations on what is achievable and by when. I expect you to actively manage expectations and hold yourself accountable.\nWhen E-Group members disagree with each other, I expect them to jointly escalate it to me in a timely fashion so I can help break the tie. I have a similar expectation for other team members. Escalation is not a failure. I want a team that is pushing passionately, and it is normal to have conflict. Disagree, commit, and advocate. Be a gracious winner. Own decisions either way 100% with your team.\nFrequently asked questions from prior roles\nWhy do you ask so many questions? What are you looking for?\nI do like to ask a lot of questions.\nI care about the details, and I really like to learn.\nI can tell when someone really knows the area by how easily and completely they can answer my questions.\nWhen I see that someone understands their area very well and has confidence in their area, I shift from probing to generative questions and sometimes ideas with the intention of contributing.\nWhen I see that someone lacks command of their area, I shift to the Socratic method to understand shared beliefs and assumptions and help guide people/teams to an answer we can align on. If this fails or isn‚Äôt converging, I put forward my hypothesis/ideas as a starting point.\nIf you find meetings/discussions ending frequently with my hypothesis as the next step, that may be a sign that we aren‚Äôt well aligned. If in doubt, ask me!\nWhy do you want to inspect my work so frequently? Do you not trust me?\nI like to meet regularly (weekly) to talk about top priorities and our progress on key metrics. These meetings normally have nothing to do with trust.\nPast experience has taught me that monthly updates are not frequent enough to ensure that most bold, ambitious, impactful initiatives are delivered as efficiently as possible, on time, and with high quality. It truly ‚Äòtakes a village‚Äô to make that happen.\nOperating meetings help me learn the realities of the work, stay in touch with real roadblocks and challenges that sometimes only I can resolve, contribute ideas, and help align functions across the company to ensure that we meet our most important goals.\nYou seem to work a lot of hours and around the clock. Do you expect the same from me?\nNo\nI expect you to manage your own work/life balance; no one else can do it for you. Everyone‚Äôs needs are unique, so managers can‚Äôt really prescribe how to achieve a balance that is right for you.\nManagers should measure whether their reports‚Äô work meets business needs and tell them if they see misalignment. This is part of my job as manager of E-Group.\nWork is by nature a competitive task, and there will always be someone smarter, who works harder or is more skilled than oneself. Some jobs are more complicated and demand more than others. In some periods of life, one may have more or less to give than others. Finding balance is difficult and requires constant management. My advice: Be honest with yourself about who you are and what you need, then give it your best and keep an open dialogue with your manager. Good managers care about and flex with the people they manage to find a win/win for the company and individual.\nCan you share a bit more about your personal life? What do you do outside of work?\nMy family is my #1 priority in life, and I give extreme attention to their needs. My sons are both out of the house on their own, leaving just my wife and me at home. They support me in giving my best to GitLab.\nI really do enjoy work. I‚Äôve had the fortune to take some extended time off in my career, and every time I do, I am reminded that work is so much more than a paycheck. It is something I love and how I find purpose.\nWhen I have free time, my #1 hobby is cycling with my wife. We have cycled in different parts of the world and always strive to see new places by bike.\nI often couple my #2 hobby, photography, with my work and personal travel. I love taking photos because it encourages me to ‚Äúsee‚Äù the world in non-obvious ways to create interesting photos, which is also helpful in life and business. I like the blend of science and art skills that photography demands.\nCEO Scam\nSee\nCEO and executive fraud\nin the security practices section of the handbook.\nMeeting request requirements\nFor scheduling a video call or meeting with me or other execs, please see the\nEBA handbook page\n.\nCEO Meeting Cadence\nAs part of my role, I participate in a variety of meetings both internal and external.\nMonthly Meetings\nMonthly CEO AMA,\nagenda in Gdrive\n(internal).\nCEO Shadow Program\nAt GitLab, being a CEO Shadow is not a job title, but a temporary assignment to shadow the CEO\nOffice of the CEO\nDetails about Office of the CEO (OCEO) at GitLab\nLast modified April 9, 2025:\nFixed a minor spelling error (\ne34fa8a4\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2384}
{"doc_id": "2fe0b0b900d792cb", "url": "https://handbook.gitlab.com/handbook/leadership", "title": "Leadership | The GitLab Handbook", "text": "The Handbook\nLeadership\nThis page contains leadership pointers.\nThe first couple of headers indicate which group they apply to, using the groupings\ndefined on our\nteam structure page\n.\nManagers of One\nIn an all-remote organization, we want each team member to be a\nmanager of one\nis an attribute associated with our\nEfficiency value\n. To be successful at GitLab, team members need to develop their daily priorities to achieve goals. Managers of one set the tone for their work, assign items and determine what needs to get done. No matter what role you serve, self-leadership is an essential skill needed to be successful as a manager of one.\nAt GitLab, leadership is requested from everyone, whether an individual contributor or member of the leadership team.\nAs a leader, GitLab team members will follow your behavior, so always do the right thing. Lead by example with effort.\nEveryone who joins GitLab should consider themselves ambassadors of our\nvalues\nand protectors of our\nculture\n.\nBehavior should be consistent inside and outside the company. We do the right thing outside the company, too.\nGitLab respects your judgment of what is best for you, since you know yourself best. If you have a better opportunity somewhere else don‚Äôt stay at GitLab out of a sense of loyalty to the company.\nIn tough times people will put in their best effort when they are doing it for each other.\nWe work\nasynchronously\n. Lead by example and make sure people understand that\nthings need to be written down in issues as they happen\n. Hold your team accountable with documentation.\nWe are not a democratic or consensus driven company. People are encouraged to give their comments and opinions, but in the end\none person decides\nthe matter after they have listened to all the feedback.\nIt is encouraged to disagree and have constructive debates but please\nargue intelligently\n.\nWe value truth seeking over cohesion.\nWe avoid\nmeetings\n, when possible, because they don‚Äôt support the asynchronous work flow and are hard to conduct due to timezone differences.\nStart meetings on time, be on time yourself, don‚Äôt ask if everyone is there, and don‚Äôt punish people that have shown up on time by waiting for people or repeating things for those that come late. When a meeting unblocks a process or decision, don‚Äôt celebrate that but instead address the question: How can we unblock in the future without needing a meeting?\nBe intentional in how you prepare for and participate in meetings. Async communication works best when folks\nreview their calendars and prepare in advance of meetings\n.\nWe give\nfeedback\n, lots of it. Don‚Äôt hold back on suggestions for improvements, this helps us grow. Take pride in helping others through feedback.\nFocus on improvement\n. If you meet external people, always ask what they think we should improve.\nFollowing from\nPaul Graham‚Äôs advice\n: Strive to make the organization simpler.\nSaying something to the effect of ‚Äúas you might have heard‚Äù, ‚Äúunless you‚Äôve been living in a cage you know‚Äù, ‚Äúas everyone knows‚Äù, or ‚Äúas you might know‚Äù is toxic. The people that know don‚Äôt need it to be said. The people that don‚Äôt know feel like they missed something and might be afraid to ask about the context.\nDon‚Äôt use someone else‚Äôs name\n, remind people of your title, or otherwise\n‚Äúpull rank‚Äù\nto get things done.\nAct as a CEO of yourself and your role by taking responsibility to set goals and appropriate timelines. Prioritize your contributions and know it‚Äôs\nimpossible to know everything\n.\nCommunicate clearly with your team and people leader on the status of your goals. Act quickly to address areas that pose a challenge or to reassess goals that cannot be reached in an alloted timeframe.\nExamples of actions from managers of one at GitLab\nWhen asked to attend a synchronous brainstorming call, a team member instead opens an issue and\nrequests for their team‚Äôs ideas asynchronously\n.\nA people leader champions our value of\nDiversity, Inclusion and Belonging\nby\nbecoming a mentor\n.\nA team member blocks out dedicated time for learning and development to implement a regular practice of\nself-serving and self-learning\n.\nA team member in a new role finds an inefficiency in a process they are learning. Without being asked or supervised, they open a merge request (MR) proposing a change and assign it to their manager for review.\nWhen a scheduled meeting agenda is complete 10 minutes before the call is set to end, an attendee ends the call early.\nA people leader hires a new team member that demonstrates our\nCREDIT values\n.\nBefore asking for others‚Äô time to discuss a topic, they dedicate time to process their thoughts and\nmake a proposal\n.\nA manager of one prioritizes well-being by blocking their calendars for fitness, meals,\npaid time off\n, and personal appointments.\nA team member surfaces blockers as opposed to assuming their manager or team is already aware, and simultaneously works to unblock others by\nworking in public\nand with a\nlow level of shame\n.\nInterim and Acting Leadership\nIn some cases, a individual in the\nManagement group\n,\nDirector group\n,\nS-group\n, or even\nE-group\nmay have an ‚ÄúInterim‚Äù or ‚ÄúActing‚Äù title.\nActing\nmeans that someone is occupying this role temporarily and will move back to their original role after a set amount of time or other conditions, such as an external hire.\nInterim\nmeans the individual is working on a promotion into the role.\nIn either case, they will be fulfilling the full responsibilities of the role. If you have any questions, about the future of the role, please ask them or their manager.\nIndividual departments will have their own criteria for who is eligible to occupy these roles, so please check the career development page for your department.\nMaking decisions\nPlease see the\nMaking Decisions\nLeadership page.\nCommunication should be direct, not hierarchical\nMost companies communicate from top to bottom through a chain of command. This communication flow often empowers managers, but it also introduces inefficiency as team members are not able to connect directly with the people they need to communicate with in order to get their work done. At GitLab, every team member is encouraged to reach out to whoever is the correct person (or people) to quickly unblock issues, solve problems or support in other ways. Do be courteous of your direct manager and copy them on the request. We don‚Äôt encourage unnecessary friction in asking team members to escalate through managers and wait for responses to come back. What matters is efficiency in getting to results. Slack the CEO, Slack a VP, or Slack a peer. Do what you need to do to make GitLab successful.\nManagers should not be bottlenecks or silos for communication.\nAnyone should feel\ncomfortable\nreaching out to anyone else with the best information they can to solve a problem.\nThis is a more\nefficient\n,\ntransparent\n, and\ncollaborative\nway to work.\nGiving Feedback\nGiving regular\nfeedback\nis extremely important for both managers and team members. Feedback can take the form of coaching sessions, separate from\n1-to-1 meetings\n. Giving feedback is also about being prepared and, depending on the situation, you should create separate agendas and structure them as follows:\nProvide\ncontext\n.\nUse a framework for your feedback. Our recommended framework is\nCrucial Conversations\n‚Äì we offer\na training course\n, and the book is part of our\nrecommended reading for leaders\n.\nAsk yourself, is this:\nActionable\nSpecific\nKind\n(Does the feedback help the person? Note: Being kind is not the same as being nice.)\nObjective (similar to Fair)\nRelevant to the job role and\ncompa ratio\nIdentifying root causes\nSometimes when performance dips, the best way to tackle it is to try to determine the root cause. This is easier said than done. There is a great tool that\nCEB (now Gartner)\ncreated to help with this called\nperformance issue root cause diagnostic\n. It may not always be possible or appropriate to determine the root cause, so the\nunderperformance process\nshould be followed.\nResponding to Negative Feedback\nAs a leader, the way you respond to negative\nfeedback\nmakes a significant impact\non your team. Remember that it can be difficult for people to approach someone\nin authority with concerns and respond with sensitivity and appreciation. In particular, we\nrecommend that you keep the following in mind:\nDon‚Äôt argue or get defensive. Accept the feedback for what it is: an attempt\nto help you improve your work or your professional relationships. If you do\nhave to explain yourself, try to remain empathetic.\nIt‚Äôs fine (even preferable) to defer action. When presented with negative\nfeedback, we often feel like we have to either justify our actions or promise\nchange, and since change isn‚Äôt always easy when you‚Äôre responsible for a\nlarge team, justification becomes the default. It‚Äôs OK to say you need time to\nevaluate the feedback and decide how to proceed.\nThe Right Way to Respond to Negative Feedback\nIf a team member from your department or another part of the org comes to you and says they do not feel like they or their reports‚Äô contributions are valued by your reports, the manager should try to resolve this. Research shows that this is more likely to happen to underrepresented minorities. Please note that\nDRIs are free to ignore feedback\nwithout acknowledging it and that\nvaluing contributions isn‚Äôt the same as agreeing with them\n. This is about co-opting someone else‚Äôs idea without attribution and/or dismissing an idea with an ad-hominem remark.\n1-to-1\nPlease see\n1-1\n.\nSkip level interactions\nPlease see\nskip-levels\n.\nYour Individual README\nA team member‚Äôs README page is intended to help others understand what it might be like to work with them, especially people who haven‚Äôt worked with them before. It‚Äôs also a well-intentioned effort at building some trust by being intentionally vulnerable, and to share your ideas of a good working relationship, to reduce the anxiety of people who may be on your team, now or in the future.\nREADMEs provide a genuine report on how a person works, reducing bias/assumption and enabling people to work together based on a common framework. As part of GitLab‚Äôs\ntransparency\nvalue, we encourage each GitLab team member to consider creating their own README.\nREADMEs by Division\nGitLab division README pages are linked below for context. Reading other READMEs is an important way to get ideas on what you can include in yours. Let these serve as a guide and inspiration to you.\nEngineering READMEs\nMarketing Team READMEs\nProduct READMEs\nUX Department READMEs\nSales Team READMEs\nPeople Group READMEs\nFinance Team READMEs\nLegal Team READMEs\nOffice of the CEO READMEs\nCreating Your README\nCopy the\nREADME-template\nand paste into your favorite Markdown editor. If you do not have a Markdown editor,\nTypora\nand\nBear\nare recommended.\nFill out the recommended sections. Note that each section is\noptional\n. You can remove those you aren‚Äôt comfortable filling out, and add sections that are interesting or important to you.\nOnce complete, you‚Äôll need to\ncreate an issue\nwith the Digital Experience team to add a page to GitLab‚Äôs website.\nIf your\ndivision\nalready\nhas a page to host READMEs (see above), follow the guidelines to\nadd a new page\nwithin that directory (e.g.\nDarren M.\n, a member of the marketing team, would add a new directory and page within\n/handbook/marketing/readmes\n, creating\n/handbook/marketing/readmes/dmurph\n)\nIf your\ndivision\ndoes not yet have a holding page for READMEs, follow the guidelines to\nadd a new page\n(\nreadmes\n) within your division‚Äôs handbook section\nfirst\n, then create your username directory within\nreadmes\n.\nBonus points if you add your README & yourselves as codeowner to the\n.gitlab/CODEOWNERS\nfile.\nAlternatively you can create your README\ndogfooding\nGitLab‚Äôs README profile customization feature. Follow\ndocumentation\non how to add details to your GitLab profile with a README. Do not forget to add your profile‚Äôs link to you division‚Äôs holding page.\nAdvertising Your README\nOnce your README is created, consider adding a link to it from following places:\nGoogle Doc agendas or calendar invites\nYour GitLab.com profile\nYour Slack profile\nYour Email signature\nThis provides maximum visibility to others, so that they may read your README in advance of working with you. This allows them to take your working style and communication preferences into account, ideally increasing the overall level of empathy expressed.\nREADMEs are particularly powerful when working with those\noutside\nof GitLab, who may be unfamiliar with our\nvalues\n. A README is a beacon of\ntransparency\n, and helps set the tone for any working relationship.\nCoaching\nWhat is coaching?\nCoaching\nis about helping others help themselves. It is not about giving advice, instruction, or telling someone what to do.\nCoaching is about focusing on the future and identifying where the coachee wants to be and what they want to achieve.\nAt GitLab, we‚Äôve defined coaching as a conversation that helps people think for themselves, find their own answers, and commit to action they design. As a coach, your role is to clarify the pathway from the current state to the future. Coaches do this by enabling the coachee to make informed choices based on deeper insight.\nNo matrix organization\nPlease see\nno-matrix-organization\nStable counterparts\nWe want to promote organic cross-functional collaboration by giving people stable counterparts for other functions they need to work with. For example, each Strategic Account Executive (SAE) works with one Sales Development Representative (SDR). With our\ncategories\nevery backend team of developers maps to a\nProduct Manager (PM)\nand a\nfrontend team\n.\nGiving people a\nstable counterpart\nallows for more social trust and familiarity, which speeds up decision making, prevents communication problems, and reduces the risk of conflicts. This way we can work effectively cross functionally without the\ndownsides of a matrix organization\n.\nFactory vs. studio\nWe want the best combination of\na factory and a studio\n. The studio element means anyone can chime in about anything, from a user to the CEO. You can step outside your work area and contribute. The factory element means everyone has a clearly assigned task and authority.\nEffective escalations\nTeam members should feel comfortable escalating issues when help is needed to resolve unexpected challenges. Effective escalations are good, because they speed up decision making. When team members escalate an issue, another person is brought in as a decision maker or adviser as other team members disagree or need help with alignment or a serious trade-off is needed. Escalation can offer clarity and a path forward, and can be a sign of seniority for the person initiating the escalation when they know what, how, and when to escalate.\nAs noted in this\nmedium article\n, explicit esclatation should answer these four questions:\nWhy is this important to the person/team I‚Äôm escalating to?\nWhat are the relevant details of the challenge?\nWhat have you tried?\nWhat do you need?\nFolks who are escalating an issue should avoid surprising folks in the management chain. This means that other relevant team members should be aware that an escalation is occurring. For example, in E-Group, members agree that they will not go to the CEO with an escalation without first notifying other relevant members that this is happening.\nThere may be some exceptions to first notifying managers or peers. For example, a team member\nfeels unsafe\nin voicing a concern to a manager or their peers and feels that they can‚Äôt effectively escalate with standard notification without retribution. While exceptions may be appropriate, they should be rare.\nAfter a team member escalates an issue, it is OK if they\ndisagree, commit, and advocate\nwith the decisions made by the person they escalated to.\nProcess gets a bad rep\nProcess has a bad reputation. It has that reputation for things that we try to avoid doing at GitLab. When you have processes that are not needed it turns into a bureaucracy. A good example are approval processes. We should keep approval processes to a minimum, by both giving people the authority to make decisions by themselves and by having a quick lightweight approval process where needed.\nBut process also has good aspects. Having a documented process for how to communicate within the company greatly reduces time spend on on-boarding, increases speed, and prevents mistakes. A counterintuitive effect is that it also makes it easier to change processes. It is really hard to change a process that doesn‚Äôt have a name or location and lives in different versions in the heads of people. Changing a written process and distributing the\ndiff\nis much easier.\nTalent Acquisition and retention\nManagers have an tremendous responsibility around talent acquisition and\nretention\nof team members.\nVoluntary departures should be low, especially unexpected ones. The most common reasons for resignations can be tied back to the manager.\nWe want few candidates to decline an offer, especially when the reason isn‚Äôt compensation.\nWe need adequate candidate pipeline volume and quality, especially for crucial positions.\nCandidates that have a proposed offer should meet the bar, especially for more senior positions.\nBuild a\nglobal team\n. Unless shown with a business case, ‚Äúwe can‚Äôt find the talent out of the bay‚Äù goes against our\ndiversity, inclusion and belonging mission\nand the\nLocation Factor KPI\n.\nHigh Output Management\nGitLab leadership and management approach was built using principles covered in the book ‚Äú\nHigh Output Management\n.‚Äù Please see\nHigh Output Management\nto learn more.\nBuilding High Performing Teams\nBuilding a team to deliver\nresults\nis a very important aspect of improving\nefficiency\nand\niteration\n. A high-performing team will always deliver results. As a leader at GitLab, your role is to develop a high-performing team to reach the desired level of performance and productivity. There are certain traits that high-performing teams display at GitLab:\nHave a clear vision of their objectives and goals\nStay committed to achieving their goals\nManage conflicts\nMaintain effective communication and a healthy relationship with each other\nMake unanimous decisions as a team\nWatch the replay of our conversation with\nJeb Hurley, Co-founder and Managing Partner Brainware Partners\nwhere we discussed:\nManaging trust, productivity, and well-being on remote teams\nBehavior, biochemistry, and dynamics of trust\nThe value of measuring and reporting on impacts of building trust\nSkills and behavior of\nbuilding high performing teams competency\nfor Managers\n:\nModels and encourages teamwork by fostering collaboration, communication,\ntrust\n, shared goals, mutual accountability and support\nFosters an environment where results are balanced with time management of multiple assignments and\nDirect Responsible Individuals (DRI‚Äôs)\non important topics\nEmpowers team members to be a\nManager of One\nand gives them the tools to grow professionally in their careers\nAttracts and retains top talent by creating an inclusive environment\nbuilt on trust\n, delegation, accountability, and teachability\nStrategies to Build High Performing Teams\nThe\nDrexler-Sibbet Team Performance Model\nis an excellent tool to help\nbuild high performing teams\nat GitLab. The model provides a roadmap for a team and a common language. It is a simplified description of how a team works together that highlights the most important things the team needs to focus on to reach high performance. At GitLab, we can use it as a frame of reference to developing high performing teams. It can help Managers ensure new and existing team members know the mission and direction of the team by the following:\nTo form your team\nTo guide what your team does\nTo monitor how well your team is doing\nTo diagnose where your team may be struggling or identify the keys to your team‚Äôs success.\n7 Stages to developing high performing teams:\nOrientation - Why are we here? Team members need to see a sense of team identity and how individual team members fit in.\nTrust Building\n- Who are you? Team members share mutual regard for each other and are open and supportive of trust-based relationships.\nGoal Clarification - What are we doing? Assumptions are made clear; individual assumptions are made known with a clear vision of the end state.\nCommitment - How will we do it? Team members understand how it will make decisions and do the work.\nImplementation - Who does what, when, where? Team members have a sense of clarity and can operate effectively due to the alignment of shared goals.\nHigh Performance - Wow! The team is accomplishing more than it expected. The team has taken off, creativity is fostered and goals are surpassed.\nRenewal - Why continue? The team is given recognition and celebrates achievements of individuals that produce valuable work. Reflect on lessons learned and reassess for the future.\nManager Resource: Identifying & Addressing Burnout\nBuilding and maintaining high performance includes staying mindful of team well-being and potential burnout. With GitLab‚Äôs results-driven culture, the demands of product innovation around AI, the fast-paced and ever-evolving business environment, our organization recognizes the crucial balance between achieving ambitious goals and maintaining the well-being of our team members. Everyone can access this handbook\nresource designed for managers to identify & address burnout\n. This has an ongoing impact on team performance.\nManager M-Team Groups\nM-teams are management support groups made up of 3 to 6 managers who are in timezones that allow for sync meetings among members. M-teams should set up a regular meeting on a cadence agreed by the members with the agenda being ‚Äúwhat‚Äôs challenging this week?‚Äù. Decide who will facilitate and each person will get a chance to have their challenge discussed in the meeting. When it‚Äôs your turn, you talk a little about what you‚Äôre struggling with. M-groups agree to a level of\nconfidentiality\nso that group members are willing to be vulnerable; vulnerability leads to trust and better outcomes for the group.\nIf you‚Äôre interested in starting or joining an m-team meeting, reach out to other managers in the\n#managers\nSlack channel.\nArticles\nCarta‚Äôs Manager‚Äôs FAQ\nCarta‚Äôs How to hire\nHow Facebook Tries to Prevent Office Politics\nThe Management Myth\nLater Stage Advice for Startups\nMental Models I Find Repeatedly Useful\nThis Is The Most Difficult Skill For CEOs To Learn\nGreat article about\nhow to think about PIPs\n, although our time scales are shorter.\nImpraise Blog: 1-on-1s for Engaged Employees\nMind Tools: Giving Feedback: Keeping Team Member Performance High, and Well Integrated\nRemote.Co: 5 Tips for Providing Feedback to Remote Workers\nReally interesting blog post from Hanno on remote team feedback\n51 questions to ask in one-on-ones with a manager\nHBR: The rise of data driven decision making is real but uneven\nForbes: 6 Tips for Making Better Decisions\nBooks\nBooks in this section\ncan be expensed\n.\nNotable books from the\nE-Group Offsite Book Selections\nmay be added to the list below.\nWe sometimes self-organize\nbook clubs\nto read through these books as a group.\nHigh Output Management\n- Andrew Grove\nTop 10 quotes\nBook club\nThe Hard Thing About Hard Things: Building a Business When There Are No Easy Answers\n- Ben Horowitz\nChase Wright‚Äôs notes\nCrucial Conversations: Tools for Talking When Stakes Are High\n- Kerry Patterson\nNotes from the\nE-group\nreading:\nVirtual teams are much more likely to fail on crucial conversations than colocated teams\nWe need to develop the skill of sensing the tone of a-sync conversations to uncover potential issues\nWe need to find a way to create\npsychological safety\nfor people in official channels\nStarting with empathy is a great way to gather the context needed in a tense situation - this is hard a-sync, but more important\nConsider getting context 1-on-1 (through Slack) before posting a comment in an issue that you might regret later\nAs leaders, we need to give context as well. A good question is: ‚ÄúWhat would have to change for us to get X prioritized‚Ä¶‚Äù\nDocumenting something is\nnot\na replacement for having the hard conversation\nBook club\nCrucial Conversations Handbook Page\nEmail Lists\nSoftware Lead Weekly\nTraining\nWhen you give leadership training please\nscreen share the handbook instead of creating a presentation\n.\nLeadership Development Opportunities\nManagers can participate in our\nElevate program\n, focused on developing management skills to lead all-remote teams.\nLeadership development coaching with the\ngrowth & development benefit\n. More details about a formal GitLab coaching program to come.\nSelf-led opportunities to be a mentor\n- keep an eye out for a company-wide mentorship program with applications opening at the end of January 2022.\nJoin the women‚Äôs TMRG mentorship group\nto either be a mentor to practice leadership or get paired with a leader to learn from.\nSign up for\nCrucial Conversations training\nExplore opportunities to join the\nCEO Shadow program\nor other division specific shadow programs with the\nChief of Staff\n, and\nSecurity\n.\nExplore the skills needed to successfully transistion from IC to Manager in\nGitLab Learn\n.\nExplore leadership and management courses on\nLinkedIn Learning\nLearning and Development\nis developing several programs in FY23 to include a\nManaging at GitLab Course\n,\nNew Manager Bootcamp\n,\nLifeLabs Learning Pilot and Launch\n,\ncoaching program\n, and much more!\nPeople Group\nFeel free to reach out to anyone in the\nPeople Group\nfor further support on leadership development topics. You can find us on the\nteam page\n, using the\nPeople Group\ndropdown. The team may also be reached via HelpLab.\nBeing a public company\nLearn more on GitLab‚Äôs view of\nbeing a public company\n.\nMitigating Concerns\nWe have a page which documents our\nMitigating Concerns\n. Many of our\nvalues\nhelp to mitigate some of these concerns.\n1-1\nMaintaining an effective and efficient agenda is important to get the best out of the 1-1 (read as: ‚Ä¶\nBiggest Tailwinds\nWe believe that the market opportunity for a complete DevSecOps platform designed as a single ‚Ä¶\nBook clubs\nFrom time to time, we run internal book clubs on a book from one of our resource lists. All are ‚Ä¶\nBuilding Trust at GitLab\nCoaching\nCoaching at GitLab At GitLab, we use coaching to:\nProvide opportunity for self reflection, ‚Ä¶\nCompensation Review Conversations\nCompensation Review Conversations Conversations with regards to compensation are an important part ‚Ä¶\nCrucial Conversations\nGitLab's strategies for being an effective leader during crucial conversations with team members\nEffective Delegation\nEffective Delegation The purpose of this section is to give you the following:\nAn appreciation for ‚Ä¶\nEmotional Intelligence\nIntroduction At GitLab, we place a high level of importance on interpersonal skills for workplace ‚Ä¶\nGitLab Onsites - Getting your team together in person\nGitLab Onsites GitLab Onsites\nnoun\nDedicated time for all-remote teams to come together in person to ‚Ä¶\nHigh Output Management\nIntroduction At GitLab, one of our favorite books is, ‚ÄúHigh Output Management‚Äù by Andrew ‚Ä¶\nIdentifying & Addressing Burnout\nManager Guide: Identifying & Addressing Burnout With GitLab‚Äôs results-driven culture, the ‚Ä¶\nMaking Decisions\nMaking ‚Ä¶\nManaging Conflict\nManaging conflict In this section, we will review the definition of conflict, the different causes ‚Ä¶\nNo Matrix Organization\nSkip Level Meetings - Overview\nPurpose and Benefits of Skip-Levels A skip-level meeting is a meeting during which a manager‚Äôs ‚Ä¶\nUnderperformance\nWe want team members to be successful and should offer every opportunity for them to work effectively.\nWorkforce Planning\nWorkforce planning and SWOT analysis\nLast modified June 3, 2025:\nFix broken links (\nd7547623\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 4563}
{"doc_id": "604e11694d4155e7", "url": "https://handbook.gitlab.com/handbook/marketing/lifecycle-marketing", "title": "Lifecycle Marketing | The GitLab Handbook", "text": "The Handbook\nMarketing\nLifecycle Marketing\nLifecycle Marketing Handbook\nLifecycle Marketing\nOverview\nLifecycle Marketing\nis responsible for strategizing, executing, and optimizing a data-driven user lifecycle communications strategy and overall email marketing plan, including ongoing nurture email campaigns.\nThis role works closely across Marketing for all things email, and directly with the Product Growth, Data, and Self-service Teams to collaborate, plan, and prioritize communication to better engage GitLab users and progress them through the buyer and customer lifecycle. The lifecycle marketing manager will focus on user paths to revenue, including engaging free .com users, trial users, and paid users of GitLab.\nRead the job family here ¬ª\nFor more information on email marketing at GitLab, please visit the following pages:\nNurture programs\nBest practices\n,\nEmail processes and requests\nPlease reach out to Allie Klatzkin or Alison Lee with any questions.\nMeet the Team\nAllie Klatzkin\nManager and Team Lead, Lifecycle Marketing\nBuyer / User Persona Nurture\n: DRI for organization of new content additions to the intelligent nurture, build of new streams within the nurture architecture in collaboration with marketing operations\nAction Streams\n: Develop and build lifecycle‚Äôs strategy for interest based action streams\nGitLab Ultimate + Duo Enterprise Trial User Campaigns\n: DRI for trial nurture, focused on progressing trial users to paid\nCalendaring and stakeholder conversations (DRI)\n: Lead weekly email calendar conversations to ensure we are prioritizing our email sends per audience\nEmail Templates\n: define needs, organize design, and manage development and testing of new email templates\nEmail Best Practices, Processes & Optimization\n: enable teams across GitLab (mainly Marketing and Sales Dev) on email best practices, as well as streamlining, scaling, and improving email performance\nGitLab Corporate Events\n: Global templates and scaling process for promoting and following up from corporate events and conferences.\nEmail point of contact/support\n: Reviewing and optimizing AMER & Global events (fmm & corp), campaigns, and newsletter email sends to ensure best practices and compliance with the GitLab brand\nLocalization\n: Owning the translation and localization strategy for email, building new nurtures for prospects\nPubSec Nurture\n: Rebuild the nurture to educate leads on the value of GitLab for the Public Sector and ultimately generate MQLs\nAlison Lee\nSenior Customer Lifecycle Marketing Manager\nCustomer upsell / cross sell / retention\nCreate and continuously optimize email marketing programs that leverage 3rd party signals (e.g. firmographic or demographic) as well as customer behavior data to drive revenue growth or prevent churn\nPartner with Customer Success to coordinate marketing and support touchpoints for maximum revenue impact\nPartner with Marketing Analytics to define customer lifecycle reporting and create dashboards to analyze tests, monitor performance against goals\nMap GitLab‚Äôs customer lifecycle stages and create strategic initiatives for each stage of the customer journey, which include onboarding, expansion, and retention\nIdentify key measurable metrics (SKU upsell, license expansion, churn prevention, etc.) that these lifecycle programs can effectively influence\nBuild and maintain relationships with Product Marketing, Developer Relations, and Sales. Establish feedback loops to ensure messaging in our campaigns is accurate, differentiated, and meaningful to our target personas\nFree User Campaigns\n: DRI for free user efficiency project, focused on progression of free users to trial to paid\nDuo Pro & Duo Enterprise Campaigns\n: DRI for email campaigns related to our AI product\nRe-engagement nurture\n: Develop and implement strategy for re-engagement email nurture\nEmail point of contact/support\n: Reviewing and optimizing AMER & APAC events (fmm) and campaigns sends to ensure best practices and compliance with the GitLab brand\nChristian Baun\nLifecycle Marketng Manager\nManage updates/optimizations to our existing Persona nurture and PubSec nurtures\nSupport localized nurture programs for prospects\nOwn MM+ transformation of trial nurture\n: Pivot self-serve to focus on business trials: optimize for high-value biz trials and reduce wasted spend on low-ROI trials starts with personal emails.\nProspect lifecycle strategy / conversion (enterprise, mm)\nManage updates/optimizations to our existing Persona nurture, PubSec nurtures, and FinServ nurtures\nOngoing maintenance/optimization of global prospect campaigns post launch (recycled leads nurture, industry nurtures)\nSupport localized nurture programs for prospects\nRegional/event email reviews for EMEA/APAC\nEmail Templates: manage development and testing of new and existing email templates\nEpic Conference (formerly DevSecOps World Tour)\nOwn MM+ transformation of trial nurture\n: Pivot self-serve to focus on business trials: optimize for high-value biz trials and reduce wasted spend on low-ROI trials starts with personal emails.\nEmail Templates\n: manage development and testing of new and existing email templates, using Marketo‚Äôs builder, or BeeFree\nEmail point of contact/support\n: Reviewing and optimizing EMEA, AMER, and APAC events (fmm) and campaigns sends to ensure best practices and compliance with the GitLab brand\nCommunication\nIn line with GitLab‚Äôs overall\ncommunication guidelines\n, lifecycle marketing managers work through MRs first and issues second (in order to preserve documentation), and our slack channel\n#lifecycle-marketing\nis used for team updated and quick questions.\nThe\n#marketing_integratedmarketing\nchannel is used for weekly check-ins and interaction with the larger integrated marketing team.\nIn between bi-weekly Lifecycle Marketing Team calls:\nUpdates\nshould be added to MRs when possible\nAdd to #lifecycle-marketing Slack\nBegin with\nUPDATE: <brief description>\n(i.e.\nUPDATE: Marketo segmentation live for sales segment\n)\nInclude link to MR (preferred) or issue\nTopics\nthat need input should be added as an MR when possible, with issues as a secondary option, and pinged in Slack with\nAdd to #lifecycle-marketing Slack\nBegin with\nDISCUSS: <brief description>\n(i.e.\nDISCUSS: Marketing tool champions\n)\nInclude link to MR (preferred) or issue\nMeeting Cadence\nBi-weekly - Lifecycle Marketing Team sync (lifecycle marketing)\nWeekly - Email Stakeholder call\nBi-weekly - Digital Strategy sync\nBi-weekly - Integrated Marketing sync\nMonthly - Marketing All-Hands (all marketing)\nThe Handbook\nIs our single source of truth (SSoT) for processes and relevant links\nIndividual teams should link back to these SSoT sections to avoid confusion\nCollaborative tactics contain their own handbook pages\nThe handbook will be iterated on as we establish and optimize processes for optimal efficiency\nProject Management\nPrioritization\nLifecycle Marketing - Prioritization\nAt start of milestone, ensure that issues are in the proper category of prioritization. Align them to the\npriority definitions\n.\nConsider the time you have available in a 2 week period, recognizing meeting commitments and planned PTO.\nOnly add issues to account for 70% of your available work hours. Don‚Äôt max out at 100% since there will likely be things that arise and need immediate attention throughout milestone.\nAsk yourself: considering realistic time this milestone, am I overcommitting? The first to drop from a milestone should be ‚ÄúLow‚Äù priority issues based on\ndefinitions\n.\nDiscuss milestone with Jackie and if you need help determining what to drop and how to communicate (potentially) to issue requestors.\nLifecycle Marketing - Current Milestone\nMinimize the ‚ÄúLow‚Äù and ‚ÄúMedium‚Äù columns. Your focus should first be on the ‚ÄúTop‚Äù and ‚ÄúHigh‚Äù priority issues.\nPrioritize completion of ‚ÄúTop‚Äù priority issues, then ‚ÄúHigh‚Äù priority issues.\nLabels\nPrioritization labels\nDG-Priority::Top\n: Immediate action needed, aligned to OKRs. This category will be limited because not everything can be a priority. Timeframe: Immediate action needed.\nDG-Priority::High\n: Not requiring immediate action, but aligned to OKRs, intelligent nurture, or free user journey. Timeframe: Within weeks.\nDG-Priority::Med\n: Requests submitted that align to OKRs, intelligent nurture, or free user journey. Process improvements to fix broken processes, or improve lifecycle marketing team efficiency. Timeframe: Within months.\nDG-Priority::Low\n: Requests submitted that would be helpful, but can be pushed for higher priority issues. Nice-to-have improvements for lifecycle marketing team processes. Timeframe: No specific timeline.\nDG-Priority::ToBePrioritized\n: Requests that have not yet been prioritized by the team.\nTeam labels\nmktg-demandgen\n: DRI is in Demand Gen team\ndg-lifecycle\n: DRI is in Lifecycle Marketing\ndg-campaigns\n: DRI is in Campaigns Team\ndg-request\n: Issue requesting Lifecycle Marketing support (did not originate from DRI team)\nStatus labels\nmktg-status::blocked\n: there were insufficient details in the issue for work to be completed\nmktg-status::wip\n: the issue is assigned and moved into appropriate time-based milestone\nmktg-status::plan\n: this is used for work that is in an earlier stage of planning and a specific request has not been made\nThis will likely be used mainly by campaign managers on issues that are not high priority but there is a desire to capture the idea/notes.\nIssue Templates\nWe ask that teams request work using the following issue templates in the campaigns project. These templates more clearly indicate what information and details are required in order for the request to be triaged.\nNote on timelines: The campaigns team is focused on campaign strategy, execution, and optimization. Team member milestones focus on work to drive MQLs and SAOs, and requests will be committed to as bandwidth permits at discretion of Campaign Team Manager.\nRequest Issue Templates\nBelow are the issue templates to make a lifecycle request. For processes, please see our\nprocesses handbook page\n.\nlifecycle-add-to-nurture\nrequest-email-followup\nrequest-email-invitation\nrequest-email-newsletter\nrequest-email-reminder\nrequest-email\n-\nonly for general email requests\nFor customer communications, please work with Marketing Ops.\nidea-campaign\nrequest-corp-conference-email\nCampaign Team Issue Templates\nThe following issue templates are used by the campaigns team to organize their work, with appropriate labels applied for project management.\ncampaign-manager-wip\nto be used by Campaign Managers ONLY for simpler project management for their own initiated issues\nputs straight in WIP status with pre-set for curent milestone and assignment to the person opening the issue\nlifecycle-marketing-freeuser-plan\nlifecycle-milestoneplan\nlifecycle-monthly-update\nlifecycle-onboarding\nlifecycle-ooo\nlifecycle-reporting\nlifecycle-abtest\ncampaigns-mural\ncampaigns-pathfactory-track\ncampaigns-pf-buyer-journey\ncampaigns-sdr-enablement\nFundamental principles of issue requests\nThe following issue templates are used by the campaigns team to organize their work, with appropriate labels applied for project management.\n/assign @\n- issues should have only DRI based on who will complete the work in the issue. If work needs to be completed by multiple people, consider breaking into separate issues with clear deliverables and due dates. (example:\n/assign @aklatzkin\n)\n/due 2021-\n- add due date based on workback schedules (example:\n/due 2020-07-13\nor\n/due tomorrow\nor\n/due 07/13/2020\n)\n/milestone %\n- add milestone based on the due date of the issue (example:\n/milestone %\"Mktg:\n)\n/weight\n- add weight between 1-5, with 1 being easiest (between 1-4 hours of time) and 5 being most complex (a full week of work). The majority of issues should fall into 1-2. If estimation is weight of 3+, break into separate issues for more manageable pieces to fit into milestones. (example:\n/weight 1\n)\n/epic\n- add epic of the overarching campaign or project to keep things organized. In almost all cases, there is a larger initiative that the issue relates to, so it is best practice to associate issues to the most relevant epic for visibility. (example:\n/epic [https://gitlab.com/groups/gitlab-com/marketing/-/epics/370](https://gitlab.com/groups/gitlab-com/marketing/-/epics/370)\n)\nIntake process daily/weekly steps\nTeam manager completes daily review of\nlifecycle marketing issues in triage\nassessing the following standards:\nAre all details in the\nSubmitter Checklist\nsufficiently complete in order to begin work?\nif yes, check that due date is at least 5 business days from date submitter details provided, move to\nmktg-status::wip\n, assign based on triage diagram, and put in current milestone (to be adjusted as needed by assignee)\nif no, comment to requester and move to\nmktg-status::blocked\nDoes the request align to OKRs and key projects?\nif no, consider realistic timeline given priorities (and share with requester in comments, set up time to discuss if needed)\nShortcut issue comments for project management\nWhen a team member is picking up an issue from the backlog:\n/label ~\"mktg-status::wip\"\n/assign @\n/milestone %Mktg:2023-\nThis will change the status to wip (work in progress), allow quick assignment and add to the appropriate milestone.\nKey Resources\nOverall Epic for Lifecycle Marketing\nFY25 Trial\nFY25 Persona Nurture\nFY25 Email Template Work\nEmail UTM generator\nNurture documentation\nEmail Best Practices\nAn overview of GitLab's email best practices.\nEmails & Nurture Programs\nAn overview of emails and nurture programs at GitLab.\nEmails Processes\nAn overview of email processes at GitLab.\nLast modified July 14, 2025:\nEdit _index.md (\n2ed3162f\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1990}
{"doc_id": "8939b02db7375832", "url": "https://handbook.gitlab.com/handbook/sales/field-operations", "title": "Field Operations | The GitLab Handbook", "text": "The Handbook\nSales\nField Operations\nThe Field Operation team‚Äôs vision is to manage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics\nWelcome to the Field Operations Handbook\n‚ÄúManage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics‚Äù\nThe term\n‚Äúsales‚Äù\nrefers to the Sales Team and\n‚Äúfield‚Äù\nincludes the Customer Success, Channel, and Alliances Teams.\nKey Tenets\nClarity\n: for definitions, processes and events\nPredictability\n: of the business by leveraging data and systems\nScalability\n: for processes and systems that allows for growth\nTeams\nSales Operations\nDeal Desk\nOrder Management\nSales Commissions\nData Intelligence\nSales Systems\nSales Strategy\nField Enablement\nChannel Operations\nCustomer Success Operations\nCustomer Success Strategy & Analytics\nRSOE Growth & Development\nFor guidance and resources on\nRSOE Career Growth & Development\nField Operations Calendar\nField Operations utilizes a team calendar to communicate team member availability as well as office hour meetings.\nHow to add the Field Operations Calendar\nTo add the Field Operations Calendar to your Google Calendar click on the\n+\nNext to\nOther Calendars\non the bottom left hand side of you Google Calendar.\nFrom there type in\nField Operations\ninto the search box and the Field Operation calendar should be the only calendar available to select.\nWhat are Office Hours?\nOffice hours is a weekly meeting that is set up where the hosting team is available to field questions from individuals who they may not generally sync with. The goal is to offer wider availability and support to the greater operations teams and to GitLab as a whole. Office hours are NOT a dedicated time for team members to join to check in on the status of a project or to be used as a recurring project meeting.\nCurrent Office Hours\nSales Systems currently holds office hours every Wednesday at 10:30 AM PST\nField Operations Releases and Changelog\nField Operations works to deliver Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk (QTC) in a batched, bi-weekly release cadence. To learn more, see the\nField Ops Release Schedule page\n.\nFor a running log of Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk since Q3-FY22, see the\nField Ops Changelog page\n.\nBusiness Operations - Salesforce Reference\nThe purpose of this page is to provide insight into the internal workings of our Salesforce instance, how fields are populated, how fields are calculated, where they are used and more.\nCareer Development at GitLab & RSOE\nThis page provides guidance and resources for the RSOE team related to Growth & Development\nCustomer Success Monthly Metrics Dashboard\nTable of Contents Overview Use Cases Metrics Definitions Financial Measures Adoption & ‚Ä¶\nCustomer Success Operations\nThe Customer Success Operations team's handbook page. This covers our mission, strategies, responsibilities, and processes.\nCustomer Success Strategy & Analytics\nGitLab Handbook page for the Customer Success Strategy & Analytics (CSSA) team\nData Intelligence\nCharter Data Intelligence (DI) is a part of Field Operations reporting to Revenue Operations. Our ‚Ä¶\nEcosystem Operations\nThis page serves as the Ecosystem Operations team page and includes standard channel reporting links, and details for managing partner opportunities\nEnterprise Applications - CRM Team\nThe Enterprise Applications CRM Team implements and supports specialized applications that support our business processes within GitLab.\nField Enablement\nThe Field Enablement team's mission is to design and deliver effective enablement solutions to field team members and partners that grow expertise and confidence needed to drive efficient, predictable, and scalable growth for GitLab\nGo to Market\nOperations, Procedures, Documentation\nGrowth Resources\nFinding Customer Seat Counts Seat expansion is at the heart of our revenue growth. This has a strong ‚Ä¶\nRequesting Internal Support in Salesforce\nHow to Get Help Workflow for internal GitLab users on how to get help when working on an opportunity ‚Ä¶\nSales Operations\nSales Operations aim to help facilitate new and existing processes throughout our field organization via the use of systems, policies, and direct support.\nSales Order Processing\nThis page outlines the Quote to Cash process, starting from account and opportunity creation, quote configuration, approvals, booking requirements and to the ultimate closure of a deal.\nSales Strategy and Analytics Handbook\nTo drive sales success by providing data, reporting, analytics, and actionable insights to leadership across GitLab\nSpekit for Operations/Process/Tools Updates\nRSOE uses the Spekit tool to update the Field team on operational, process and/or tools changes.\nLast modified April 30, 2025:\nAdd folder and file name linting (\n8a6b33a1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 761}
{"doc_id": "b23e1baa0466508a", "url": "https://handbook.gitlab.com/handbook/resellers/channel-program-guide/mdf", "title": "Marketing Development Funds | The GitLab Handbook", "text": "The Handbook\nGitLab Channel Partner Program\nGitLab Channel Program Guide\nMarketing Development Funds\nMarketing Development Funds Overview\nMDF Program Introduction\nGitLab Open and Select partners have access to the proposal-based GitLab Marketing Development Funds (MDF) Program. These funds are intended to support our partners‚Äô demand generation efforts.\nMDF Investment Objectives\nDemand Generation\nThe objective of these activities is to gain net-new end-user customers for you and GitLab. Examples of eligible activities include seminars, workshops, telemarketing or email marketing campaigns, participation in tradeshows, exhibitions, and direct mail.\nEligible costs may include mailing costs, fulfillment items, lead qualification, distribution, venue costs, food and beverages (excluding alcoholic beverages), speakers‚Äô fees, management costs, and lead capturing costs.\nGitLab supports a limited number of partners in the selected regions, please check your eligibility with your regional\nChannel Account Manager\nand\nChannel Marketing Manager\nTo be considered for funding support you must\nBe a Marketing Ready Select or Open GitLab Partner. Marketing ready means: partner has an approved business plan with GitLab; has a list of focus accounts mapped with GitLab; has a dedicated person who manages leads sent to the partner by GitLab (Partner Prospect Admin); ackowledges\nthe lead passing and recall process\n; has a dedicated marketing resposible person to work on the join activties with GitLab; has regular calls with the GitLab CHannel Marketing Manager; acknowledges\nthe MDF Policy\nand requirements for MDF process (Reqests and Claims)\nComply with GitLab Proof of Performance (POP) requirements for the activity\nMeet minimum required MDF request amount of\nGitLab will cover up to\n50%\nof the total cost of the activity\nEligible Activities and Required Proof of Performance MDF Activities\nProof of performance (POP) includes partner-generated invoice AND at least one of the activities listed in the table below that shows GitLab and partner representation. For activities that require a lead list, you must also submit it in an spreadsheet excel format, as part of your POP.\nEligible Activity\nDescription\nProof of Performance\nCollateral Sales Tools\nPrinted or web-based material developed to assist in your efforts to promote GitLab solutions (product briefs, data sheets, case studies, etc.). The document must include the GitLab logo.\n‚Ä¢ Electronic version or hard copy of marketing collateral\n‚Ä¢ Graphic files or digital photos that show the integration of GitLab brand/solutions\n‚Ä¢ eDM/Direct mail\nEvents\nAny industry or partner event that you plan to attend to promote or host GitLab solutions. This can be done in collaboration with other vendors that don‚Äôt compete with GitLab. Events may also include enablement activities.\n‚Ä¢(REQUIRED) Lead list/Attendee list (to include: Company Name, Contact, Title, Email, & Phone. Please use\nMDF Lead List template\n)\n‚Ä¢ Electronic version or hard copy of invitation\n‚Ä¢ Marketing collateral\n‚Ä¢ Photo of display/booth/event\n‚Ä¢ Funded Head (Distribution Only)\nPartner Sponsorship\nParticipation in a partner-led event or activity or third-party event.\n‚Ä¢ Contract of signed sponsorship\n‚Ä¢ Lead list (to include Company Name, Contact, Title, Email, & Phone. Please use\nMDF Lead List template\n)\nMarketing Materials\nThe delivery of co-branded marketing materials (digital or physical) to promote GitLab solutions. Eligible assets include emails, direct mailers and social media posts, and must include the GitLab logo.\n‚Ä¢ Electronic version or hard copy sample of direct mail, newsletter\n‚Ä¢ Lead list (to include Company Name, Contact, Title, Email, & Phone. Please use\nMDF Lead List template\n)\nLead Generation/ Telemarketing\nDelivery of co-branded messages via telephone or other mediums to gain net-new customers. The message should focus on GitLab solutions. The contact list should include Company Name, First Name, Last Name, Title, Email, Phone.\n‚Ä¢ (REQUIRED) Lead list or call list (to include: Company Name, Contact, Title, Email, & Phone. Please use\nMDF Lead List template\n)\n‚Ä¢ Telemarketing script of how GitLab brand or solution were incorporated into the campaign\n‚Ä¢ Itemized call record or campaign metrics\n‚Ä¢ Internal invoice accepted\nWebcast/Webinar\nA syndicated or on-demand web event with the purpose of either lead generation or continuing education. This can be conducted in collaboration with GitLab or GitLab-approved third-party vendors.\n‚Ä¢ (REQUIRED) Lead list/Attendee list (to include: Company Name, Contact, Title, Email, & Phone. Please use\nMDF Lead List template\n)\n‚Ä¢ URL to recorded online event, podcast, or presentation that shows integration of GitLab brand and solutions\n‚Ä¢ Invitation to the online event/podcast\n‚Ä¢ Follow up/additional activities\nDemand Gen focused joint planning session\nA joint meeting between GitLab & Partner where the output is a demand generation activity. This should NOT be a GitLab 101 or 201 training, as that is handled by our enablement team. A detailed agenda for session must be provided at MDF request submission stage.\n‚Ä¢ (REQUIRED)  Date of demand generation activity & targeted lead list of who received an outbound motion.  (to include: Company Name, Contact, Title, Email. Please use\nMDF Lead List template\nMDF Process\nTo obtain marketing development funds (MDF), please complete the following steps prior to any activity being performed or expense incurred. Any activity that does not follow the process below and has the appropriate approvals will not eligible for reimbursement.\nMDF Request\nPartners can access the MDF Request Form from\nthe GitLab Partner Portal home page\n. Navigate to Marketing and select ‚ÄúMDF Request.‚Äù Upon selecting MDF Request, complete the first part of the form to create a fund request. Once completed, click ‚Äúsubmit it‚Äù.\nPlease check this\nhow-to video\non how to submit an MDF Fund Request.\nAll MDF requests should be submitted at least 10 business days prior to the activity start date\nYou should have a marketing plan in please by working with your designated Channel Marketing Manager & Channel Account Manager and all MDF activities should be agreed to prior to submitting the request form in the portal.\nOur goal is to have the approval (or rejection) of your MDF request back to the partner within 5 business days.\nAs our program is proposal based, GitLab does not guarantee every  partner will receive MDF.\nMDF Approval\nAfter submission of the MDF request, your GitLab Channel Marketing Manager will review and approve or deny the request.\nYou will be notified via email.\nYou must get formal approval before proceeding with your activity.\nTimeframe for Completing Activity\nPartners must complete the activity within the quarter that the request has been approved for. If at any point within the funding quarter you decide the allocated funds will not be used for the approved activity, you must notify your Channel Marketing Manager.\nCanceling and Reallocating Funds for an Activity\nIf the originally approved activity will not take place, please notify your GitLab Channel Marketing Manager. You may be able to reallocate your funds to another activity that is equal to or less than the original approved activity that takes place within the same time frame, but this must be approved by your Channel Marketing Manager.\nReceiving leads post MDF activity\nIf your MDF activity has a lead list, as required by our POP policy, you must include a copy of the joint event lead list. This list is considered confidential and the property of both GitLab and the authorized GitLab partner, and will be used for the sole purpose of tracking lead progress and calculating the activities return on investment. By submitting your MDF request, you agree to these terms and conditions.\nUpon your submission of the lead list, GitLab will pass those leads back to you directly within the GitLab Partner portal, making it seamless to connect your deals you‚Äôd like to deal reg back to the MDF request.\nInstructions on how to accept/reject/reassign a lead or register a deal and submit to GitLab for approval can be found via\nthis video\nor in the\npartner portal\n.\nFunds reimbursement Requirements\nSubmission of a payment claim (invoice) within 30 calendar days of completion of the activity via the MDF Reimbursement Request form on the GitLab Partner Portal.\nSupporting documentation based on the activity,\ndocumented here\nInvoice\n*Invoice will be accepted from the Partner only\n* It must clearly state the MDF activity name in the description\n*Have an invoice number\n* Made payable to GitLab Inc.\nFor partners who are claiming reimbursement for the\nfirst time\nonly:\n5 day exception\nis added to the 30 days, giving partners a total of 35 days, from the activity end date, to submit their claim. This is in place in order to accommodate Partner‚Äôs onboarding process in GitLab‚Äôs procurement system,\nCoupa\n.\nGitLab may reach out once to partner, but if no response is received and the 30 or 35 days has commenced, the activity will be canceled and no payment will be made thereafter.\nGitLab is not responsible for reimbursing partners that submit a request after this 30 days or 35 days for new partners has passed.\nMDF Terms and Conditions\nMarketing development funds (MDFs) may not be used for capital expenses or the normal cost of business.\nActivities/expenses NOT covered under the GitLab MDF Program include alcohol, cash, charity events/activities, product discounts, travel, and lodging expenses.\nActivities that involve multiple vendors will not be supported at 100% funding by GitLab. The local Channel Marketing Manager may approve a percentage of funding based on the number of vendors and visibility of GitLab versus other participating vendors.\nGitLab reserves the right to modify or terminate the MDF Program upon 30-days advance written notice, which is provided on the GitLab Partner Portal. Such modification or termination will not affect prior approved requests for activities that ran before the effective date of the modification or termination, nor will it affect prior approved plans in progress at the time of the change.\nIf claims are not submitted within 30 calendar days following the activity, the funding allotment and/or allocation may be null and void, and you may forfeit any unallocated or unclaimed funds.\nGitLab will only pay for the claim amount approved, not fees for wire transfer deposit or local currency deposit.\nLead lists provided as POP will not be used by GitLab‚Äôs Sales team to call or nurture without written permission from the partner, or unless the customer has already engaged directly with GitLab.\nYou must conduct your business and marketing operations in an ethical manner and in accordance with all applicable United States and international laws, ordinances, codes, and regulations. You may not directly or indirectly make, authorize, offer, or promise to make or give any money, bribe, gift, or anything of value to any person for the purposes of influencing that person or a family member of that person under circumstances where the payment or gift would constitute an illegal payment under the laws of the U.S. or any country.\nAll decisions related to program benefits and eligibility are at the sole discretion of GitLab.\nPartners eligible for MDF must be a GitLab Channel Partner in good standing, with a valid and current Channel Partner Agreement. Upon termination or expiration of the Channel Agreement, all in-progress MDFs (even if MDF approval has been given) will be forfeited.\nSubmission of false or fraudulent claims can cause you to be ineligible for the MDF Program and may render MDF requests to be forfeited, regardless of their stage of execution.\nYou may not deduct or set off an MDF claim from any payment due to GitLab in the regular course of business with GitLab.\nGitLab reserves the right to audit and verify all MDF claims and request additional documentation at any time. GitLab may deny any MDF claims that it believes, at its sole and absolute discretion, do not conform to these guidelines.\nIf GitLab subsequently denies an MDF claim for good cause after reimbursement, you must immediately return such funding to GitLab.\nThe terms of these MDF guidelines are in addition to the applicable Channel Partner Agreement in place with GitLab; they are valid only when specifically referenced from the applicable Channel Partner Agreement, program guide, or otherwise made available to a channel party by GitLab in writing. All terms not otherwise defined herein have the meaning set forth in the applicable Channel Partner Agreement.\nYou are authorized to use GitLab‚Äôs names, marks, logos, and other identifiers as approved in advance in writing, on or in connection with your own marketing and promotion of GitLab products and services. Your use of GitLab logos needs to be solely in accordance with the\nGitLab Partner Program Agreement\nand any additional trademark guidelines GitLab provides.\nIt is understood that when MDF are used to fund an event participation where a show booth is part of your event presence, that no branding of a competing vendor is to be used alongside GitLab‚Äôs brand on that booth.\nGitLab‚Äôs internal MDF Process Workflow\nPhase 1: Pre-planning\nBudget is established by the year, allocated by each quarter, then region, and should be planned in a 6 month cycle.\nChannel Marketing Managers work on creating a strategic marketing plan on a 6 month rolling calendar.\nInternal approvals are needed. Plans are reviewed by Channel Marketing Manager‚Äôs Team Managers and MDF Program Owner.\nIf an MDF activity requires a contract signed or has a specific contract for that particular event, such as sponsorships or conferences, contracts need to be\nreviewed and approved by Legal\nbefore the approval is communicated to the Partner.\nIn this case, CMMs are to submit contract to the MDF Program Owner and they will open a Zip request to get approval done.\nOnce internal approvals have been completed, CMMs communicate to Partners activities that are approved.\nIf the MDF activity is a sponsorship and it does not have a specific contract from the partner legal will create one once communcated to them within the Zip approval process. This will then follow the same legal process as listed above.\nPartners are responsible for submitting an MDF request through the Partner Portal.\nPhase 2: Processing MDF\nWhen a MDF fund request is received, the Channel Marketing Manager receives an email alert to approve the MDF request.\nProcessing an MDF consists of:\nAdding the MDF in Salesforce, with all of its information.\nWe don‚Äôt add this in the pre-planning phase because sometimes fund requests may get canceled or the Marketing Activity/event moves to a different date.\nFrom Allocadia we opens issue for the MDF request.\nMarketo and Salesforce Campaign are created.\nChannel Marketing Managers are also tagged to create their own activity tracking issue.\nA Zip requisition request is opened.\nZip will now have an MDF approver (MDF Program Owner) to make sure we have all of the correct information updated and to make sure that payment is not process for partner before receiving the POP.\nAfter that Zip approval will take 4 business days.\nPhase 3: Payment\nThree automated emails are sent to partners notifying them to submit their claims.\nEmail 1: sent a day after the activity end date\nEmail 2: 14-day after the activity end date has passed\nEmail 3: 28 days after the activity end date has passed, alerting them once the 30-day deadline has been reached, GitLab can contractually  decline to pay if the MDF Claim is not submitted. For new partners that need to be onboarded in Coupa we are allowing a 35 day deadline.\nA communication will be made to the Channel Marketing Managers if claim has not yet been made and Channel Marketing Managers will reach out to Partners.\nOnce a claim is submitted MDF Program Owner receives an automated email.\nAll of the files received by the partner are checked. If any documentation is missing or does not fulfill the MDF Guidelines we will reach out to partner.\nAll of the documentation gets uploaded to the POP issue and the label for MDF Program Owner to review and approve.\nMDF Program Owner checks every POP issue, looking at lead list, invoice and supporting images/pdfs and approves it or tags Channel Marketing Managers if there‚Äôs a concern.\nOnce approved, Teri will upload the lead list to the Lead Upload Issue.\nShe will email the invoice to AP.\nShe will note in Zip/Coupa - MDF Reimbursement payment is clear to pay.\nPayment can take up to 45 days once invoice is submitted to Accounts Payable.\nCanceling MDF Activities\nChannel Marketing Manager Tasks\nCMM to update Allocadia showing the MDF activity as canceled by going to the mdf sub-category panel and selecting\nYes\nto the\nCampaign Canceled?\ndropdown. CMM to also add in\nto the event sub-category title and to the\nOfficial Event/Campaign Name\nfield so the title in the main issue stays updated.\nCMM to remove any planned/forecasted costs in Allocadia accordingly.\nCMM to ping the Channel Marketing Programs Manager (CMPM) and staff/DRI‚Äôs in the main MDF epic to communicate the cancellation and close out the issue.\nChannel Marketing Programs Manager Tasks\nThe CMPM will comment regarding the cancellation in all open sub-issues and close out the issues.\nIf applicable, CMPM to delete the Zip req and comment that the MDF has been canceled.\nIf applicable, CMPM to ping procurement and finance in the Coupa req to notify them that the MDF has been canceled.\nOnce all sub-issues are closed, the CMPM will also note the cancellation in the epic and close the epic.\nThe CMPM will change the MDF Request status in SFDC from\nApproved\nto\nCancelled\nor\ndenied\n(where applicable) if request has been submitted by the partner. By doing so the Partner will receive an automated email informing the Funds Request initially submitted has been cancelled or denied.\nSFDC: CMPM to add\nto the campaign name and select\nAborted\nin the\nCampaign Status\ndropdown. Also, unlink the\nPartner Account\nand un-sync to\nVartopia\n.\nMarketo: CMPM to delete Marketo program.\nFor more information on marketing development funds, please email us at\npartner-marketing@gitlab.com\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2960}
{"doc_id": "f15ceb932172bbfb", "url": "https://handbook.gitlab.com/handbook/company/working-groups/clickhouse-datastore", "title": "ClickHouse Working Group | The GitLab Handbook", "text": "The Handbook\nAbout GitLab\nWorking Groups\nClickHouse Working Group\nLearn more about the ClickHouse Datastore Working Group attributes, goals, roles and responsibilities.\nAttributes\nProperty\nValue\nDate Created\n2022-12-01\nEnd Date\n2024-04-25\nSlack\n#f_clickhouse (only accessible from within the company)\nGoogle Doc\nAgenda\n(only accessible from within the company)\nEpic\nLink\nOverview & Status\nSee\nExit Criteria Progress\nContext\nClickHouse\nis an open-source column-oriented database management system. It can efficiently filter, aggregate, and sum across large numbers of rows.\nIn FY23 ClickHouse was selected as GitLab‚Äôs standard datastore for features with big data and insert-heavy requirements (e.g. Observability, Analytics, etc.)  ClickHouse is not intended to replace Postgres or Redis in GitLab‚Äôs stack.\nIn FY23-Q2 the Monitor:Observability team developed and shipped a\nClickHouse data platform\nto store and query data for Error Tracking and other observability features.  Other teams have also begun to incorporate ClickHouse into their current or planned architectures.\nWe want ensure teams can efficiently leverage the ClickHouse data platform when developing new features and that we can maintain and support this functionality effectively for SaaS and self-managed customers.\nWG Exit\nIn April 2024 the ClickHouse Working Group was closed out.  The group made major progress introducing ClickHouse to GitLab‚Äôs architecture to support GitLab‚Äôs analytics and monitoring features.\nEnabled usage of ClickHouse Cloud with GitLab, including security and legal approval for storing customer RED data and production readiness reviews.\nConsolidated our multiple ClickHouse hosting setups into ClickHouse Cloud, reducing operational load for our teams and improving reliability.\nReleased multiple features that would not have been possible without ClickHouse‚Äôs capabilities.\nFixed features such as Contributor Analytics which were no longer performant on GitLab.com.\nDeveloped documentation and tooling for using ClickHouse in GitLab‚Äôs development process.\nDue to the overlap with the recently created\nProduct Usage Data Architecture Working Group\n, the decision was made to wind down the ClickHouse group, and roll those concerns into that group‚Äôs work defining the architecture for analytical features.\nExit Criteria\nThis Working Group has the following goals:\nDocument and review the current uses/capabilities and future use cases.\nDevelop & Socialize Architecture Strategy for ClickHouse usage.\nArchitecture Blueprint for ClickHouse usage within GitLab.\nArchitecture Blueprint for scalable data ingestion pipeline for ClickHouse within GitLab.\nProvides guidance which sets expectations on scaling and query design/debugging/guardrails/etc.\nDefine sane and secure defaults. Provide security recommendations and guardrails.\nDevelop a Rollout Strategy and Plan (e.g. feature flags, would customers ever want to disable/remove it, etc.).\nSaaS rollout strategy for identified use cases.\nLay the groundwork to add ClickHouse to\nour reference architectures\nthrough self-managed support.\nPackaging ClickHouse for our self-managed installations.\nResearch and understand the component costs and maintenance requirements of running a ClickHouse instance.\nDetermine the scale and deployment targets where adding ClickHouse makes sense.\nConsider an abstraction layer to interacting with ClickHouse or alternatives.\nDevelop and implement a communication plan for the outcomes of the working group.\nExit Criteria Progress\nCriteria\nStart Date\nCompleted Date\nProgress\nDocument and review current ClickHouse uses/capabilities and future use cases\n2022-12-08\n2023-02-01\n100%\nMarshall Cottrell\nDevelop and socialize architecture strategy for ClickHouse usage\n2023-01-05\n2023-05-25\n100%\nNick Nguyen\nDevelop a ClickHouse rollout strategy and plan\n2023-01-05\n60%\nSam Goldstein\nDevelop Recommendation for ClickHouse Ownership Model\n0%\nDevelop and implement a communication plan for the working group\n2023-01-18\n0%\nNicole Williams\nComplete production readiness through to GA\n2023-08-04\n75%\nNathan Rosandich\nCurrent and Planned Use Cases\nCurrent status of ClickHouse and GitLab‚Äôs implementation\nClickHouse Use Cases\nRoles and Responsibilities\nWorking Group Role\nPerson\nTitle\nExecutive Sponsor\nChristopher Lefelhocz\nVP of Development\nFacilitator DRI\nSam Goldstein\nDirector of Engineering, Ops\nCo-Facilitator\nNick Nguyen\nSenior Engineering Manager, Data Stores\nCo-Facilitator\nNicole Williams\nSenior Engineering Manager, Monitor & Runner\nCo-Facilitator\nNathan Rosandich\nEngineering Manager, Govern:Compliance\nFunctional Lead - Analytics\nMiko≈Çaj Wawrzyniak\nStaff Backend Engineer, Analytics:Analytics Instrumentation\nFunctional Lead - Optimize\nAdam Hegyi\nStaff Backend Engineer, Plan:Optimize\nFunctional Lead - ModelOps\nMon Ray\nEngineering Manager, ModelOps\nFunctional Lead - Monitor\nMat Appelman\nPrincipal Engineer, Monitor\nFunctional Lead - Distribution\nDmytro Makovey\nSenior Backend Engineer, Distribution:Build\nFunctional Lead - Quality\nKassandra Svoboda\nQuality Engineering Manager, Enablement & SaaS Platforms\nFunctional Lead - Infrastructure\nReuben Pereira\nSenior Backend Engineer, Delivery:System\nFunctional Lead - Product\nDilan Orrino\nSenior Product Manager, Enablement:Distribution\nMember\nPavel Shutsin\nSenior Backend Engineer, Plan:Optimize\nMember\nDennis Tang\nEngineering Manager, Analyze:Product Analytics\nMember\nMax Woolf\nSenior Backend Engineer, Analyze:Product Analytics\nMember\nSebastian Rehm\nEngineering Manager, Analytics:Analytics Instrumentation\nMember\nPiotr Skorupa\nBackend Engineer, Analytics:Analytics Instrumentation\nMember\nAlex Ives\nEngineering Manager, Database (PostgreSQL)\nMember\nBrandon Labuschagne\nEngineering Manager, Plam:Optimize\nMember\nDylan Griffith\nPrincipal Engineer, Data Stores\nMember\nJo√£o Pereira\nStaff Backend Engineer, Package:Container Registry\nMember\nHaim Snir\nSenior Product Manager, Plan:Optimize\nMember\nLucas Charles\nStaff Backend Engineer, Secure::Static Analysis\nMember\nKamil Niechajewicz\nEngineering Manger, Growth:Acquisition\nMember\nDoug Stull\nStaff FullStack Engineer, Growth:Acquisition\nMember\nNicholas Klick\nEngineering Manager, Observability\nMember\nArun Sori\nSenior Backend Engineer, Monitor:Observability\nMember\nNailia Ishakkova\nSenior Software Engineer in Test, Enablement: Distribution\nLast modified January 4, 2025:\nFix incorrect or broken external links (\n55741fb9\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 836}
{"doc_id": "ff9b4157887029f6", "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure-platforms/gitlab-delivery/distribution", "title": "Distribution | The GitLab Handbook", "text": "The Handbook\nEngineering\nInfrastructure Platforms\nGitLab Delivery\nDistribution\nThe primary user persona for Distribution is the system administrator responsible for managing a GitLab instance. The team goals are to make it as easy as possible to deploy, scale, upgrade, and fine tune a GitLab instance on a range of on-prem and cloud platforms.\nOverview\nThe Distribution team is composed of two subgroups:\nDistribution:Build\nand\nDistribution:Deploy\nBuild team is focused on producing artifacts including system packages, container images, and related components like marketplace listings along with tooling required to create and maintain them.\nDeploy team is focused on installation and upgrade mechanisms to ensure smooth deployments. This includes system integration, scripting, templating, and related configuration management tooling.\nIn addition to\nproduct deliverables\n, both groups review a large number of MR‚Äôs authored outside the team. These include dependency and security updates along with configuration controls and other bundled components like PostgreSQL, Consul, Patroni.\nTarget Consumers\nThe primary user persona for Distribution are system administrators who are responsible for managing GitLab instances. Team goals are to make it as easy as possible to deploy, upgrade and configure GitLab on a range of on-prem and cloud platforms at a variety of scales.\nDeployments include everything from single node deployments for evaluating GitLab all the way through the 50K user reference architecture and beyond. The primary goal is to ensure end users have a high-speed, low-friction experience when managing GitLab with limited downtime or sevice disruptions.\nOmnibus packages, Helm Charts and Operators are primary deployment methods Distribution currently supports.\nDistribution Build\nTeam\nCharter\nResponsibilities:\nResearch for the support of new clouds, platforms, architecture, and components\nAccess controls, permissions, and CVE patches\nDependency updates\nLicense management\nSubmissions to Partners for validations/certifications\nThe\ninstall\n,\nupdate\n, and\nupgrade\npages\nBuild and own the infrastructure used for creating the various installation methods\nMaintaining infrastructure\nused in Distribution\nDistribution Deploy\nTeam\nCharter\nResponsibilities:\nInitial installation and composability for self-managed installations and GitLab.com\nUpgrades / Downgrades\nScaling deployments\nMigration between platforms or providers\nData lifecycle management\nSecure configuration & communication\nResearch of clouds and platforms for integration to existing tools\nVision\nDistribution team vision is shown below, and not limited to:\nTechnology\nGitLab has an official installation method on all major platforms and architectures.\nGitLab offers official one click installation method on all major cloud platforms.\nGitLab is able to automatically upgrade itself safely and reliably.\nOfficial repositories for any Kubernetes package repository.\nGitLab runs equally well on both high and low resource systems (such as Raspberry Pi).\nGitLab.com is running using the official installation methods.\nAll GitLab features are installed and configured by default.\nInstallation interface to set up and configure GitLab.\nAny GitLab installation is able to report installation/upgrade errors automatically.\nSetting up GitLab in HA configuration is automated and simple.\nAll installation methods are automatically tested before release.\nMost frequently used configuration options are tested using end-to-end integration tests.\nTeam\nEach team member is able to work on all team projects along with the ability to focus on specific technologies.\nEach team member is a part of a hiring panel aimed to hire better than the best in the team.\nTeam creates documentation to increase knowledge and awareness to support a self-service model.\nTeam is able to reach a conclusion independently all the time, consensus most of the time.\nTeam has official certifications for frequently used technologies and platforms.\nOn-boarding and off-boarding is efficient.\nCareer development paths are clear.\nMission\nDistribution ensures the experience of installing and maintaining GitLab is easy and safe for everyone. It is Distribution team‚Äôs task to think about the widest variety of installation/update use-cases and provide a solution that will satisfy most needs. Distribution is there to provide the best possible experience for a user that is a novice but also a veteran when it comes to installing and maintaining software.\nDistribution:Build Charter\nBuild team focus is ensuring GitLab components are tested, current, license compliant, and available for our users‚Äô platforms and architectures. This group manages the build pipelines, researches support for new services, platforms, and architectures, as well as maintains existing ones. We strive to respond efficiently to build failures, security results, and dependency changes in order to ensure a safe reliable product for our users.\nDistribution:Deploy Charter\nDeploy team focus is configuration, deployment, and operation of GitLab as a whole product. The goal is to deliver an intuitive, clear, and frictionless installation experience, followed by smooth, seamless upgrade and maintenance processes for deployments of any scale. We strive to deliver ongoing operational behaviors for scaling, little to zero downtime upgrades, and highly reliable experiences for not only instance administrators but their users.\nTeam members\nDistribution Build Team\nThe following people are members of the Distribution:Build Team:\nName\nRole\nDenis Afonso\nBackend Engineering Manager, Distribution:Build\nBalasankar 'Balu' C\nSenior Distribution Engineer, Distribution:Build\nDmitry Makovey\nSenior Distribution Engineer, Distribution:Build\nRobert Marshall\nSenior Distribution Engineer, Distribution:Build\nDistribution Deploy Team\nThe following people are members of the Distribution:Deploy Team:\nName\nRole\nPeter Lu\nBackend Engineering Manager, Distribution:Deploy\nClemens Beck\nDistribution Engineer, Distribution:Deploy\nHossein Pursultani\nSenior Distribution Engineer, Distribution:Deploy\nJo√£o Alexandre Prado Tavares Cunha\nSenior Distribution Engineer, Distribution:Deploy\nJon Doveston\nDistribution Engineer, Distribution:Deploy\nLucas Li\nDistribution Engineer, Distribution:Deploy\nStable counterparts\nThe following members of other functional teams are our\nstable counterparts\n:\nName\nRole\nDistribution team issue tracker\nSlack chat channel\nTeam responsibility\nIn addition to the\nseparate responsibilities\nfor Build and Deploy. The Distribution team as a whole is responsible for:\nThe omnibus-gitlab installation package.\nInstallation using package is simple, quick, secure and protects the data integrity.\nA cloud native installation method.\nInstallation using the Helm charts is able to scale easily with the increased demand.\nTriaging issues\nand\nReviewing Merge Requests\nin all owned\nprojects\n.\nProviding regular\ndemonstrations\nof recent solutions or works in progress\nTeam objectives\nBased on team responsibilities, the following objectives apply:\nDistribution:Build\nInstallation pages need to be complete, correct, easy, helpful, and attractive. Even if team‚Äôs primary skill is not design and UX, team can maintain the pages with the help of teams that have this skill as their primary.\nNightly builds are installed on dev.gitlab.org using one of the official artifacts of the Distribution Build team. Purpose of this exercise is to have a production level instance using one of the installation methods that the community will be using.\nDistribution:Deploy\nThe omnibus-gitlab installation package and the cloud native installation method should allow a beginner to install GitLab quickly, correctly and completely. Required configuration should be minimal, and it is the Distribution Deploy team‚Äôs responsibility to automate as much of this configuration as possible for the user.\nThe omnibus-gitlab installation package and the cloud native installation method should be sufficiently configurable to allow an advanced user a way of setting up a more complex GitLab architecture.\nThe above two goals might sound opposing, however they are not. A compromise can be made between these two goals without increasing the project maintenance cost for the Distribution team. We optimize for the best initial installation experience and then expand to further complexity.\nDistribution Common Objectives\nTriaging issue tracker is a task that allows us to keep on the pulse of the changes we make. By being in contact with users and customers, we can maintain visibility into most frequently reported bugs or requested features. Not everything reported will be resolved, however\nall\nof the reports should be triaged. This also applies to mentions in GitLab CE/EE repositories on issues with\nDistribution\nand\ngroup::distribution\nlabel.\nEvery Distribution team member is responsible for creating a training session for the rest of the team. See the page on\nteam training\nfor details.\nWhen the team that manages GitLab.com creates an issue, the item should be raised up directly to the team Engineering Manager and Product Manager. While these issues are important, we don‚Äôt necessarily need to provide a complete solution right away, but we need to work with the other team on providing a path forward with their request.\nPrimary Projects\nomnibus-gitlab\n- This project creates platform-specific, self-contained GitLab packages and images for self-managed consumption in cloud environments and on-premisis hosting.\nCloud Native GitLab\nprovides cloud native containers to deploy GitLab. These containers may be deployed and managed via Helm using\nGitLab Charts\nor\nGitLab Operator\non Kubernetes, OpenShift, and Kubernetes compatible container platforms.\nOmnibus GitLab project‚Äôs product outputs\ngraph TD\nsubgraph Code\nend\nsubgraph Deploy\nend\nOG[Omnibus GitLab]\nPKG[Linux Package]\nDOI[Container Image]\nDOK(Docker)\nDOC(Docker Compose)\nAMI[Amazon Machine Image]\nGET[GitLab Environment Toolkit]\nGCP(Google Cloud Platform)\nVMW(VMWare)\nAZURE(Azure)\nCloud Native GitLab project‚Äôs product outputs\ngraph TD\nsubgraph Code\nend\nsubgraph Deploy\nGOP --> K8s\nHC --> K8s\nend\nCNG[Cloud Native GitLab containers]\nHC[Helm Chart]\nK8s(Kubernetes)\nGOP[GitLab Operator]\nOS(OpenShift)\nDC(Docker Compose)\nAll Projects\nName\nLocation\nDescription\nOmnibus GitLab\ngitlab-org/omnibus-gitlab\nBuild Omnibus packages with HA support for LTS versions of all major Linux operating systems such as Ubuntu, Debian, CentOS/RHEL, OpenSUSE, SLES\nDocker All in one GitLab image\ngitlab-org/omnibus-gitlab/docker\nBuild Docker images for GitLab CE/EE based on the omnibus-gitlab package\nGitLab Helm Chart\ngitlab-org/charts/gitlab\nCloud Native GitLab Helm Charts\nDocker images for GitLab Helm Chart\ngitlab-org/build/CNG\nIndividual images used by GitLab Helm Charts\nGitLab Operator\ngitlab-org/cloud-native/gitlab-operator\nThe GitLab operator creates and manages GitLab instances/deployments in a container platform such as Openshift or Kubernetes. It will run an any environment that provides native Kubernetes resources including deployments, statefulsets, services, ingress/openshift routes, persistent volume claims, persistent volumes, etc.\nKubernetes Helm Charts index\ncharts/charts.gitlab.io\nHelm charts repository index\nAWS images\nAWS marketplace\nAWS image based on the omnibus-gitlab package\nReference Architecture Tester\ngitlab-org/distribution/reference-architecture-tester\nSpins up reference architecture based GitLab deployments using\nand runs QA against them\nOmnibus GitLab Builder\nGitLab Omnibus Builder\nCreate environment containing build dependencies for the omnibus-gitlab package\nLicenses of bundled dependencies\nLicenses page on GL Pages\nWebpage listing the bundled dependencies in each package along with their license.\nWorking with the community\nThe install and upgrade process is one of the first features that systems administrators experience when working with GitLab.\nAs a result, the projects managed by the Distribution team have a high level of engagement by the user-base. The GitLab\ncommunity is made up of more than just code contributors; users logging issues and feature requests are constantly pushing\nus forward and helping create a better experience.\nIn Distribution we strive for the following in our public projects:\nUphold our\nCommunity Code of Conduct\n.\nEnable\nGitLab‚Äôs mission that everyone can contribute.\n.\nShow our work in\npublic\n.\nRecognize and thank\ncontributors for their work.\nRespect contributors donated time by providing\na timely review turnaround time\n.\nWorking with Open Source communities\nThe\nopen core of GitLab\nis built on top of thousands of open source\ndependencies. These dependencies and their communities are important to the GitLab strategy,\nand working with these dependencies is an essential part of the projects the Distribution team maintains.\nIn Distribution we strive to:\nConsider the impact of our work on the open source communities that we benefit from.\nPromote the importance of these open source communities within GitLab.\nRaise issue with any decision that goes against our\nstewardship promises\n.\nFind opportunities to\ncontribute back the changes we make\n.\nPublic by default\nAll work carried out by the Distribution team is public. Some exceptions apply:\nWork has possible security implications - If during the course of work security concerns are no longer valid, it is expected for this work to become public.\nWork is done with a third party - Only when a third party requests that the work is not public.\nWork has financial implications - Unless financial details can be omitted from the work.\nWork has legal implications - Unless legal details can be omitted from the work.\nSome of the team work is carried out on our development server at\ndev.gitlab.org\n.\nInfrastructure overview document\nlists the reasons.\nUnless your work is related to the security, all other work is carried out in projects on\nGitLab.com\n.\nIf you need to submit a sensitive issue, please use confidential issues.\nIf you are unsure whether something needs to remain private, check with the team Engineering Manager.\nYouTube Playlists\nThe team regularly publishes demos, discussions and meetings to these playlists:\nDistribution Team Demos\n(Public) More on\nteam demos\n.\nDistribution Team Discussions\n(Mostly public, but some private content)\nDistribution Team Meetings\n(Private)\nOnboarding and offboarding\nIn addition to general company on-boarding and off-boarding, Distribution team\nhas its own process to get new team members up to speed more quickly.\nIf you are starting with your onboarding, open an issue in\nDistribution team issue tracker\n, select\nTeam-onboarding\ntemplate and assign the issue to yourself.\nGoing through the steps noted in the issue should be your top priority, higher\nthan the general company on-boarding issue. This is because items in team on-boarding are specific to your role and it will allow you to get up-to-speed quicker.\nOff-boarding should be carried out by the Engineering Manager of the team,\nusing the appropriate issue template in the same issue tracker.\nWork Resources\nGeneral resources available to developers are listed in the\nSandbox cloud page\n.\nIn the Distribution team specifically, everyone should have access to the\nfollowing resources:\nGoogle projects in\nGoogle Cloud Platform\ntestground\ncloud-native\nomnibus-build-runners\nAWS build infrastructure\nDistribution group AWS sandbox account\ncloud-native\nEKS cluster for CI (requires a maintainer to\ngrant access\n)\nGitLabTop account\n(To be retired, existing team members only)\nIf you don‚Äôt have access to any of these resources, create an\nAccess Request\nand\nassign it to your manager for approval.\nInfrastructure and maintenance\nAs part of the team responsibilities, team owns maintenance of infrastructure\nused for day to day work.\nFor list of nodes and description of the maintenance tasks, see the\ninfastructure and maintenance\npage.\nTeam workflows\nGeneral\nengineering workflow\napplies\nto the Distribution team. Since Distribution is working across multiple projects, our team workflow\nis further explained and summarized on the\nDistribution workflow page\n.\nFurther reading\nDistribution workflow page\nGeneral engineering workflow page\nHow to reinforce our values\nContinue to serve smaller users\n(internal only)\nPromises to our Open Source community\nHow to follow our Product Principles\nEffective & Responsible Communication Guidelines\nTest Platform in Distribution group\nWork/life harmony\nWorking\nall-remote\nand\nasynchronous first\noffer flexibility in how team members approach their workday. Team members must make choices on how best to balance work time with other areas of life.\nFor new team members, the following resources provide examples on how to focus their time:\nHow team members approach their day\nBlog post:\nA day in life of a remote worker\nThe option of a\nnon-linear workday\nGitLab handbook:\nWork/life Harmony\nThe following GitLab Handbook areas are key in maintaining a healthy work/life balance.\nFamily and Friends First, work second\nCombating burnout, isolation, and anxiety in the remote workplace\nRecognizing Burnout\nHow to work with Distribution\nEverything that is done in GitLab will end up in the supported installation methods\nthat are distributed to users. While that sounds like the last link in the chain, it is one of the\nmost important ones. This means that informing the Distribution team of a change in an\nearly stage is crucial for releasing your feature. While last minute changes are\ninevitable and can happen, we should strive to avoid them.\nWe expect every team to reach out to the Distribution team before scheduling a feature\nin an upcoming release in the following cases:\nReach out to Distribution Build when:\nThe change requires a new or an update on a gem with native extensions.\nThe change requires a new or updated external software dependency.\nAlso when the external dependency has its own external dependencies.\nReach out to Distribution Deploy when:\nThe change adds, modifies, or removes files that should be managed by omnibus-gitlab. For example:\nThe change introduces new directories in the package.\nThe change introduces new files in previously not defined locations\nThe change requires a new configuration file.\nThe change requires a change in a previously established configuration.\nTo sum up the above list:\nIf you need to do\ninstall\n,\nupdate\n,\nmake\n,\nmkdir\n,\nmv\n,\ncp\n,\nchown\n,\nchmod\n, do compilation or configuration change in any part of GitLab stack, you\nneed to reach out to the Distribution team for opinion as early as possible.\nThis will allow us to schedule appropriately the changes (if any) we have to make\nto the packages.\nIf a change is reported late in the release cycle or not reported at all,\nyour feature/change might not be shipped within the release.\nIf you have any doubt whether your change will have an impact on the Distribution team,\ndon‚Äôt hesitate to ping us in your issue and we‚Äôll gladly help.\nRequesting a new component or replacing a component\nCreate a\nDeliverables Request\nin the Distribution team [issue tracker].\nRequesting feedback on a feature change\nFor requesting feedback you can ping\n@gitlab-org/distribution\nin your issue or merge request.\nWhen looking for a Distribution reviewer for a merge request you should use the process outlined in our\nmerge request workflow\nfor\nprojects owned by the Distribution team\n. For\nchanges that need Distribution review outside those projects, please ping\n@gitlab-org/distribution\nin the merge\nrequest.\nEngaging Distribution for expertise in support\nGitLab provides a unified process to open a request for help (RFP) to support customers. This process\nis in place to ensure we have a single source of truth for those, so that we better\ncollaborate cross-functionally as, many times, the requests actually require expertize\nof multiple areas of the product, or is not initially clear which area is more suitable\nto support the customer. When sharing the information with multiple relevant groups, within the\nsame support request process, we‚Äôre able to get to a solution much more efficiently.\nTo open an RFP, refer to the procedures of our\nhow to get help\nhandbook page.\nThis process allows us to track time involved\nand ensure that the right parties are involved at the correct time.\nTrivia\nHow did Distribution get its name? We iterated, as always. ‚ÄúDistribution‚Äù was chosen as better than ‚ÄúInstall‚Äù when renaming the original ‚ÄúBuild‚Äù team,\nlive on an AMA\nwith our co-founder, Sid. Since then we have\niterated further\nin order to grow the team, and now have subgroups for ‚ÄúBuild‚Äù and ‚ÄúDeploy‚Äù.\nDistribution Team Demo\nWeekly Demo Distribution team members present demos related to work they‚Äôve accomplished (or ‚Ä¶\nDistribution Team Infrastructure and Maintenance\nDistribution Team Kubernetes and OpenShift release support policy\nThe Distribution team‚Äôs support policy for various Kubernetes and OpenShift releases for the ‚Ä¶\nDistribution Team Merge Request Handling\nWorkflow and responsibilities for Merge Requests performed by Distribution Engineers.\nDistribution Team Training\nDistribution Team training overview and videos\nDistribution Team Triage\nOverview and Summary of the Distribution Team's issue triage process\nDistribution Team Workflow\nOverview of how work is performed by Distribution Engineers, for Omnibus, Helm and other Engineering projects.\nLast modified July 18, 2025:\nRemove Tableau dashboards from the Distribution Team page (\n818740bb\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 3174}
{"doc_id": "3ad21f4359c9155b", "url": "https://handbook.gitlab.com/handbook/engineering/devops/dev/create/engineering-managers/training", "title": "Engineering Managers Training Opportunities | The GitLab Handbook", "text": "The Handbook\nEngineering\nDevOps Engineering\nDev\nCreate Stage\nEngineering Managers\nEngineering Managers Training Opportunities\nWhat training do we recommend for Engineering Managers?\nCREDIT Values\nAt GitLab we see\neverywhere, it is in our 360 Feedback, Annual and Mid Year Performance Reviews and in Promotion Documents.\nIt is important to have evidence for this CREDIT but the training below provides opportunities to learn more about how\nEngineering Managers can live our CREDIT values.\nGitLab Value\nOnline Course(s)\nCollaboration\nCourse(s) from the\nBuilding Trust and Collaborating with Others\nPathway\nResults\nManaging for Results\nEfficiency\nEfficient Time Management\nDiversity\nCourse(s) from the\nDiversity, Inclusion, and Belonging for Leaders and Managers\nPathway\nIteration\nInterview about Iteration\nTransparency\nCommunicating with Transparency\nWorking Remotely\nWe are experts in working remotely, so our handbook is the best resource for this area.\nRemote Work Foundations\n(Handbook)\nHow to Manage a Remote Team\nFeedback\nGiving and Receiving feedback is challenging. The training below provides some best practices and ideas regarding\nhow to handle feedback.\nGiving & Receiving Feedback\nNew Managers\nNew Manager Foundations\nBecome a Manager\nTransitioning from IC to Manager\nAvoiding New Manager Mistakes\nRecognition of Team Members\nRecognizing Team Members\nGiving & Receiving Feedback\nDelivering Employee Feedback\nCoaching\nGitLab Coaching Framework\n(Handbook)\nImprove Your Coaching Skills as a Manager\nMentoring\nMentoring sounds easy however there can be pitfalls.\nThe training below is a good resource to ensuring you engage in a productive Mentoring relationship.\nGrow your Impact as a Mentor\n(Handbook)\nMentoring\n(Handbook)\nLeadership\nEmotional Intelligence\n(Handbook)\nElevate Manager Training\n(Handbook)\nBecome a Leader\nLeading Others Effectively\nBecome a More Resilient Leader in Turbulent Times\nLeadership Fundamentals\nHigh Performing Teams\nPsychological Safety: Clear Blocks to Innovation, Collaboration, and Risk-Taking\nLearning GitLab\nContinuous Delivery with GitLab\nLast modified June 11, 2025:\nUpdate L and D handbook pages (\n6c35b4df\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 309}
{"doc_id": "1bac663407f16108", "url": "https://handbook.gitlab.com/handbook/finance/accounts-payable", "title": "Accounts Payable | The GitLab Handbook", "text": "The Handbook\nFinance\nAccounts Payable\nThis page contains GitLab‚Äôs Accounts Payable department policies, procedures and guidelines. Our goal is to enable payments in a timely manner to both our team members and our external partners. We also provide useful links to other areas of the handbook that are relevant to the Accounts Payable procedures.\nIntroduction\nWelcome to Accounts Payable, commonly referred to as AP. You should be able to find answers to most of your questions in the sections below. If you cannot find what you are looking for, then please connect with us:\nChat Channel\n:\n#accountspayable\nEmail\n:\nap@gitlab.com\nGeneral Guidelines\nVendors must be onboarded in Coupa to process invoices.\nAll purchases/services with a total contract value over $5000 are\nrequired\nto have a purchase order, unless it falls under the\nPO Exception Policy\n. One-time or purchases totaling <$5000 annually may be processed without a PO per the PO Exception Policy\nEnsure to indicate the PO number in the invoice copy. For Non-PO invoice, provide the related department to be charged.\nVendors are highly encouraged to directly upload their invoices and match it to their PO using the Coupa Supplier Portal- in the event the vendor is unable to submit invoices via Coupa then they can email PDF copies to\nap@gitlab.com\n.\nPayment Runs are completed on Thursdays. Invoices that are selected for payment on Thursday must be fully approved and vendors successfully on-boarded by end of day Tuesday of that week to be included in Thursday‚Äôs payment run. The payments go out in the following days and may take 1-5 business days to reach the vendor‚Äôs bank. This depends on the country, currency and the method of payment chosen.\nInvoices are paid strictly by the invoice due dates. Any\n‚ÄúUrgent Payment‚Äù\nrequests will be paid in the next available payment run as long as they have been fully approved and the vendor has been successfully on-boarded.\nAP cannot accommodate same day payment requests\n.\nSuppliers are to be paid via CoupaPay, ACH or Wire only. AP does not issue check payments.\nThe cutoff for customer refund payments is the 25th of each month. Any customer refund requests received after the 25th will be paid the following month.\nAccounts Payable Processing\nVendor Invoices - These invoices are processed in Coupa either PO Backed or Non PO backed. Vendors must be set up or onboarded in Coupa and invoices must contain all required information like Invoice Number, Invoice Date, Payment Terms, PO Number, Invoice Amount, Currency, and Service Dates/Period to proceed with processing. Quotations, Order Forms, Agreements, Contracts are not valid for invoice processing, only ‚ÄúInvoice‚Äù is allowed.\nIf the invoice doesn‚Äôt fall under the PO Exception Policy, please ensure the invoice has a corresponding PO before sending it to the AP Team for processing.\nFor PO Backed invoices, kindly ensure that the PO is already approved to proceed with processing and do not attach the invoice in the PO as AP Team will not be able to check/monitor that section.\nKindly ensure that the PO has enough balance to process the invoice. Do not provide a PO number that has been fully matched or already closed to the vendor as it may create confusion on both sides.\nIf you need to do a PO Change Request (e.g. to add funds in your current PO), please refer to this\nvideo tutorial\nfrom Procurement Team.\nVendors can process their invoice in their Coupa Supplier Portal using the PO Flip method. On this\nlink\nplease find\n‚ÄúCreate an invoice from a PO‚Äù\nfor the video tutorial.\nVendors can also send their invoices to\nAP@gitlab.com\n. PO numbers are required to be reflected on the invoice copy or in the email body to avoid delays in processing.\nFor Non-PO invoices sent by GitLab DRI, please indicate the department to be charged instead and the Coupa approver.\nIf the invoice is received without a PO, the AP Team will reach out to the GitLab DRI and request to create a PO. Once the PO is created, DRI must email the AP Team for the PO number to proceed with processing.\nExternal Supplier Forms are to be final approved by AP Team so that the vendor will be activated in Coupa, to provide our final approval, the vendor must comply with these two important documents so we can properly check the supplier form in our queue.\nW9 for US vendors and W8 for NON US vendors\nBank details in a signed bank letterhead\nYou can learn more about Coupa in this\nCoupa Guide Link\nand if you need further assistance you may also check the\nProcurement Handbook Page\n.\nPayroll Invoices - These are invoices provided by the Payroll Team for processing and will be manually input in Netsuite. Approval signatures are indicated on the invoice.\nInvoices with amounts greater than or equal to USD $500,000 are required to have 2 signatories from the Payroll Team (Manager and Director).\nCodings must be provided on the payroll banking tracker.\nSpecial Invoices - Mostly these are related to reimbursements (e.g. Speaker Reimbursement, Interview Candidate Reimbursement, Ex-Team Member Reimbursement and BOD Reimbursements).\nA template is required and must contain all the necessary information such as Vendor Name/Name of the person to be reimbursed, Invoice Date, Payment Terms, Invoice Amount, Currency, and Service Dates/Period. Receipts are required as a supporting document  for any reimbursement requests.\nAll templates must contain the full banking information of the beneficiary. If not applicable please put N/A.\nBank Name:\nBeneficiary Name:\nBeneficiary Address:\nAccount Number:\nRouting/ABA number:\nWire Number:\nSwift Code/BIC:\nSort Code:\nTransit Number And Institution Number:\nIFSC Code: (For India)\nBSB Code: (For Australia)\nFor Speaker Reimbursement, kindly advise the related PO of the event that the speaker attended as we will align the recording of the expense same as the PO. The PO details can be indicated on the reimbursement template or in the email.\nAccounts Payable Payments\nThe first step to getting an invoice paid is to review the appropriate\nprocurement process\n.\nMake note that invoices are paid per the due date on the invoice or per the vendors payment terms in their contract, whichever comes first.\nPlease note that\nAP cannot process same day requests for payments\n. We must follow the process outlined above and ensure all approvals are attained before paying.\nPayments are set up each\nThursday\nand the money is released to vendors through the respective payment systems. It may take a few days for transfers to reach vendors depending on their location and the bank they use.\nIn order for an invoice to be included on the Thursday payment run, it must have been received and fully approved by the Tuesday.\nFor example\n, if we are doing a payment batch on Thursday June 3rd, the invoice would have to be approved by end of day on Tuesday, June 1st in order to be included.\nManual Payments are\nonly\napplicable to the following:\nPayroll Invoices\nSpeaker Reimbursement\nEx-Team member reimbursement\nInterview Candidate Reimbursement\nBOD Reimbursement\nCoupa Virtual Card\nGitLab‚Äôs preferred method of payment for suppliers is electronic funds transfer with supplier invoice provided as supporting documentation. In the instances where this option is not available with the supplier,\nVirtual Card\n, which is a temporary credit card, can be used as an alternative payment method.\nFedex\nWhen needing to send a package on behalf of GitLab our main courier account is with FedEx.\nThe first step is to contact AP in the #AccountsPayable channel to request the corporate account number.\nWhen sending a package\nthe Shipper MUST put their name under GitLab Inc in the sender field, or their full Cost Center for ex. Marketing - Field Marketing.\nIf you are unsure of your full cost center please go into your Workday application (click Profile icon > click Job > select Organization . look for Cost Center).\nAnyone failing to provide the correct information which will hinder AP‚Äôs ability to properly code courier charges will not be allowed to use the company account in the future.\nGlobal Travel and Expense\nPlease review the page on\nSpending Company Money\nto ensure that your spend is within GitLab‚Äôs\nExpense policy\n.\nGitLab utilizes\nNavan Travel\nfor all travel related Flights, Hotels, Train Travel and Vehicle Rental bookings and\nNavan Expense\nfor all Employee reimbursable expenses.\nIt also includes the preparation for\nNavan Purchase Card\nand\nPhysical Cards\n.\nNavan Purchase Card\n- These are virtual cards only utilized by the AP team, and they are used solely for providing new Team Members with a $1,500 USD (or local currency equivalent) stipend for their home office set up upon onboarding.\nPhysical Cards\n- The purpose of this Navan Physical Card policy is to facilitate purchases necessary for the company operations and expedite the process in an efficient manner. Limit is set to $10,000 USD and provided upon request of an approved issue.\nIf you have general questions about your expenses please submit a ticket to\nHelpLab\n.\nWith the launch of HelpLab - We are kindly requesting that all questions be directed to the AP Admin team via the HelpLab ticket Process for\nGeneral Expenses Related Inquiry\n.\nQuickLinks\nInvoicing and Payment\nCorporate Credit Card\nProcurement\nReference link\nCoupa Tech Stack Guide\nNavan Expense Stack Guide\nCoupa Virtual Card guide for Accounts Payable\nCoupa Tech Stack Guide\nReference for how Coupa is implemented.\nNavan Expense Tech Stack Guide\nReference for how Navan Expense is implemented.\nNavan Physical Card\n1. POLICY The purpose of this Navan Physical Card policy is to facilitate purchases necessary for ‚Ä¶\nVirtual Card Guide for Accounts Payable\nLast modified June 27, 2025:\nUpdated Language for processing invoices <$5K (\n84bd7bdb\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1627}
{"doc_id": "86e7f3c77b7f7413", "url": "https://handbook.gitlab.com/handbook/support/workflows/team/weekly_team_call", "title": "Weekly Support Team Call | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nSupport Workflows\nTeam Workflows\nWeekly Support Team Call\nOverview\nSupport team members in a region meet weekly to discuss metrics, demos,\nupcoming events, and ask questions.\nSchedule\nWeekday\nRegion\nMeeting Name\nAgenda\nTuesday\nSupport Team Call (AMER)\nGoogle Doc\nTuesday\nSupport Team Call (APAC)\nGoogle Doc\nThursday\nSupport Team call (EMEA)\nGoogle Doc\nThe regions listed above are the regions for which each call may be the most\nconvenient, but all are welcome on any call. Every call is recorded and notes\nare taken on the agenda for each one. If you miss a meeting or otherwise can‚Äôt\nmake it, you can always get caught up.\nFor the AMER team,\nwhile attending the meetings is optional, engagement in\nthe meeting agenda is required\n. Engagement opportunities include contributing to\nthe agenda, watching a meeting recording, and reading the meeting notes.\nThe APAC team meets at 03:00am UTC:\nThis time works best for team members from all APAC timezones.\nIt is intentional that the meeting schedule does not observe daylight savings.\nMeeting roles\nRole of the Chair\nThe main role of the chair is to start the meeting, keep the meeting moving\nalong, and end the meeting when appropriate. There is generally little\npreparation required, but depending on the meeting, the chair will include\nchoosing a ‚Äúfeature of the week‚Äù or similar. Please check the agenda template\nfor parts marked as ‚Äúfilled in by chair.‚Äù\nDuring the meeting, the chair will:\nEnsure that each point in the agenda is covered by the listed person.\nAsk the team to move a discussion to a relevant issue when appropriate.\nCopy the agenda template for the following week and tag the next chair/secretary.\nIf the chair is not available and has not picked a substitute, follow the\nrotation to the first person who is on the call to determine a replacement.\nRole of the Notetaker\nThe notetaker should take notes during the meeting and if action is required,\ncreates a comment and assigns it to the appropriate person.\nIf the notetaker is not available and has not picked a substitute, follow the\nrotation to the first person who is on the call to determine a replacement.\nDuring the AMER team call,\nnotetaking\nfollows GitLab Meeting Best Practices on\nLive Doc Meetings\n. Anyone not speaking is encouraged to help take notes.\nAgenda sections\nEmergencies and CMOC events handled (APAC only)\nWe include two sections on emergencies and CMOC events handled the prior week.\nWe did this to highlight the work which on-call support engineers do as there\nwere concerns team members were not necessarily aware of on-call work that had\nbeen done, especially on the weekends.\nLast modified June 3, 2025:\nFix broken links (\nd7547623\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 465}
{"doc_id": "1116610997579985", "url": "https://handbook.gitlab.com/handbook/support/partnerships/open", "title": "Open Partners | The GitLab Handbook", "text": "The Handbook\nSupport Team Handbook\nPartnerships\nOpen Partners\nSupport specific information for open partners\nOpen Partner Track Description\nResellers, integrators and other sales and services partners join the\npartner program in the Open track. Open is for all partners in the DevOps\nspace, or ItaaS and other adjacent spaces that are committed to investing\nin their DevOps practice buildout. Also, the Open track is for partners seeking\nto develop customers or just wanting to learn about GitLab and participate in\nthe GitLab partner community. GitLab Open Partners may or may not be\ntransacting partners, and can earn product discounts or referral fees.\nContacting Support\nSubmit a Request\nform. To ensure efficient ticket handling and prevent any delays in receiving the first response, they have two options:\nOpen Partners:\nIf the Open Partner is opening a ticket on behalf of a customer or themselves then they can use the\nSubmit a Request\npage and select the appropriate form for their problem.\nEnd Customers of Partners:\nIf the end customers would prefer to open a ticket directly with GitLab Support then they can also use the\nSubmit a Request\npage and select the appropriate form for their problem.\nThe only requirement for submitting a new ticket is that you must first register on the\nGitLab Support Portal\n.\nNote to Support\n: Never associate a customer to a Select Partner‚Äôs organization, or vice-versa!\nFile uploads\nWhen Open Partners needs to send support files, we have 2 options\navailable to accommodate this:\nStandard ticket uploads (20MB max)\nProviding Large Files\nExamples of Support Ticket Submission and Handling for Open Partners\nSupport provided to Open Partners and their customers will vary depending on\nthe circumstances under which a ticket is raised. Some examples are:\nAn Open Partner is doing commercial work for a customer and raises a\nticket. They should do so under their own account using a subscription\nthey have purchased for themselves. We will deliver support\nbased on the\nsubscription the partner has purchased\n.\nAn Open Partner is doing internal training, testing or knowledge\nbuilding. They should raise a ticket under their account using their\nNFR licences\n.\nThese examples are not exhaustive. If in doubt, ask questions about the\nsituation under which the ticket is being raised.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 396}
{"doc_id": "513c42e24763b02b", "url": "https://handbook.gitlab.com/handbook/engineering/gitlab-com/policies/teleport", "title": "GitLab Teleport Access Policy | The GitLab Handbook", "text": "The Handbook\nEngineering\nPolicies related to GitLab.com\nGitLab Teleport Access Policy\nPurpose\nTo ensure an audited access to our terminal/CLI tools like\nDatabase Access\nand\nRails Console\n, GitLab uses Teleport.\nScope\nThe Teleport Access policy applies to all systems within our production environment that require a terminal or CLI access.\nRoles & Responsibilities\nRole\nResponsibility\nGitLab Team Members\nResponsible for following the requirements in this policy\nSystem Owners\nAlignment to this policy\nCode Owners\nResponsible for approving changes and exceptions to this policy\nProcedure\nTeleport access is managed through\nOkta\nand is provided as part of a role‚Äôs baseline group assignment or through an\naccess request\nwith appropriate approval\nAccess reviews are performed on a quarterly basis to ensure that all users are appropriate and have appropriate access levels.\nTeleport Audit Logs must be retained for a defined period of 1 year\nTeleport Audit Logs must not be modified and or deleted before the defined time of 1 year\nAccess to Teleport Audit log data must be limited based on the principle of least privilege\nExceptions\nExceptions to this policy will be tracked as per the\nInformation Security Policy Exception Management Process\nReferences\nWhat is considered production\nProduction Architecture\nRunbook: How to connect to a Database console using Teleport\nRunbook:  How to connect to a Rails Console using Teleport\nTeleport\nLast modified June 13, 2025:\nMove IT under CorpSec (\n5b5a36c1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 240}
{"doc_id": "7ca3883c0c0d006b", "url": "https://handbook.gitlab.com/handbook/ceo/office-of-the-ceo/jihu-support/release-certification", "title": "Release Certification | The GitLab Handbook", "text": "The Handbook\nOffice of the CEO\nJiHu Support\nRelease Certification\nProcess for Release Certification\nEvery release with JiHu contributions needs to be certified by a member of the\nFederal Application Security team\n.\nThis is required to satisfy PubSec/FedRamp requirements and\nto handle JiHu‚Äôs merge request contributions to GitLab Inc repositories.\nThis process involves ensuring that each JiHu contribution included in the release has been\nreviewed and approved by an Application Security team member\nand posting a comment on the\nrelevant release task issue\nthat no new vulnerabilities have been identified in the code being released.\nWho can certify a release\nAs per PubSec/FedRamp requirements, only United States citizens on United States soil are eligible to certify a release.\nThis means that only members of the Federal AppSec team are eligible to perform the certification of the release.\nNote that\nany\nmember of the Application Security team may review and approve a JiHu contribution,\nbut only Federal AppSec team members can certify the release.\nMembers of the Federal AppSec team are responsible for certifying monthly releases. Their assignment is\nmanaged by automation\n. These assignments will also need to be reflected on the\nRelease Managers page\n, under the AppSec Release Certification column.\nCertification process\nThe certification process can only begin once it is completely certain that\nno new JiHu contributions will be included in the release. The recommended time to begin is during the\nday before the release\nsection of the release task, which specifies that\nno new code can be added to the release\n.\nOnce it is certain that no new JiHu contributions will be added, follow the steps below:\nOn the release date of each month\nthe\njh-upstream-report repository\nshould run a scheduled pipeline that automatically creates the release certification issue. This will create an issue in the\njh-upstream-report issue tracker\nwith a checklist containing each JiHu contribution associated with the upcoming release. If something went wrong, the\nrelease certification tools script\nmay need to be ran manually by following the directions in the\nREADME.md\nVerify that every JiHu contribution going into the release is on this list. This can be done by looking at the\nstatus report\nrepository information in addition to searching for the\nJiHu Contribution\nlabels in\neach repository\n(the certification issue should have a link available). Be sure to look for both open and closed merge requests. The most likely reason a MR would be in the release but not in the checklist is the appropriate milestone had not been set for it.\nFor each JiHu contribution on the checklist:\nLook at the merge request and verify that an AppSec reviewer has indicated it has been reviewed and is acceptable\nIf a merge request did not receive an Application Security review, perform a review and apply the appropriate labels\nIf a merge request did not receive an Application Security review, consider gently reminding the person who merged it that the Application Security team is supposed to be reviewing these before a merge happens\nOccasionally, a review will have happened and the label indicating that it was performed did not get applied ‚Äì in these situations, go ahead and add the label to the merge request\nSome merge requests will still be in the\nOpened\nstate, which means they were not part of the release but they are still associated with the release milestone ‚Äì in these situations, the checkbox can just be checked\nTime allowing, briefly review the changes to re-confirm they are acceptable\nMark the corresponding checkbox in the release certification issue to indicate the MR has been confirmed acceptable\nThere is a section of repositories that will require manual review. Typically these repositories cannot be included in the automation because the automation uses a project access token that cannot view private repositories or repositories that have the merge request section set as private. For each of these repositories:\nView the merge request section of each repository and look for any JiHu contributions that were merged\nBe aware that these merge requests may not be connected to a milestone or a particular release, so it may be necessary to sort\nMerged\nmerge requests by\nMerged date\nand look for JiHu contributions made in the last month\nSome of the repositories listed may have a note with information to consider when performing the review\nIf any JiHu contributions are found, remove the default\nNo JiHu contribution merge requests were included\ncheckbox and add new checkboxes for each JiHu contribution that were found\nIf no JiHu contributions are found, check the\nNo JiHu contribution merge requests were included\ncheckbox\nWhen finished reviewing the repository for JiHu contributions, check the\nThis repository was manually reviewed\ncheckbox to indicate a review of that repository was completed\nWhen absolutely sure that all JiHu contributions in the release have been reviewed by an AppSec team member:\nCopy and paste the boilerplate comment generated at the bottom of the release certification issue into a comment on the release task issue\nMake a comment on the release certification issue indicating that the process is complete and linking to the certification comment made on the release task issue\nClose the release certification issue\nContributions that introduce vulnerabilities\nIf a potential S1 or S2 vulnerability is identified in any of the contributions:\nComment on the release certification issue with a link to the MR and a description of the vulnerability\nPost a message in the\n#sec-appsec\nSlack channel with a link to the comment\nPing the appropriate\nrelease manager\nfrom the delivery team and work with them to remove the MRs from the release\nIf the vulnerable code is removed, continue with the certification process\nIf the vulnerable code cannot be removed, follow the\nWhen a release cannot be certified\nsteps listed below\nWhen a release cannot be certified\nIn some rare situations, a member of the Federal AppSec team may choose\nnot\nto certify a release. This may happen because a known vulnerability is included in the release and it cannot be removed or other situations including (more examples TBD)\nIn the event that the release cannot be certified:\nWrite a comment on the release certification issue briefly explaining the reasoning behind choosing not to certify release\nPing security leadership (\n@juliedavila\nand\n@jritchey\n) on the release certification issue in a reply to the comment made above\nAnnounce in the\n#sec-appsec\nSlack channel that the release cannot be certified, link to the release certification issue, and @ mention\n@appsec-leadership\nLast modified January 30, 2025:\nReplace ref links with regular links (\nc4c9b3d1\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1101}
{"doc_id": "19bda4742882f022", "url": "https://handbook.gitlab.com/handbook/product-development/how-we-work/product-development-flow", "title": "Product Development Flow | The GitLab Handbook", "text": "The Handbook\nProduct Development\nHow we work\nProduct Development Flow\nCross-functional product development workflow.\nPlease follow this\nguidance\nOverview & philosophy\nGitLab‚Äôs product mission is to consistently create products and experiences that users love and\nvalue. To deliver on this mission, it‚Äôs important to have a clearly defined and repeatable flow for\nturning an idea into something that offers customer value. Note that it‚Äôs also important to allow\nopen source contributions at any point in the process from the wider GitLab community - these won‚Äôt\nnecessarily follow this process.\nThis page is an evolving description of how we expect our cross-functional development teams to work, and reflects the current workflow being leveraged. All required actions or outcomes in this page are denoted as follows:\nDenotes a required aspect of the product development flow.\nFeature development is expected to pass through all phases to achieve specified outcomes, while the rest of the workflow should be considered as a set of best practices, tools, and recommendations. We realize there are unique cases in which certain product improvements may not need to flow through all the phases. We trust product managers to use their best judgement with alignment from their design and engineering team. The goal of this page is to support teams in their workflows by highlighting the necessary\noutcomes\nto target in each phase as well as sharing strategies/tactics,\nactivities\n, teams can employ to achieve these  outcomes. Additionally, this page aims to clarify the\nminimal\nAs teams leverage the product development flow, they may find that certain strategies/tactics are serving their teams well toward success. Therefore, we welcome MRs to this page, so we can create a robust playbook of options to build valuable features for customers. All team members are encouraged to follow the\nchange process\nfor this page to share their best practices.\nMeasuring Success\nWe take both a qualitative and quantitative approach to measuring success of the Product Development Flow. Details on the measures and results are available on\nthis handbook page\n.\nBut Wait, Isn‚Äôt This Waterfall?\nWe aim to achieve key outcomes in each phase in order to de-risk subsequent phases. However, the product development flow doesn‚Äôt dictate the order we go through the phases, or the time spent in each. When teams have a high confidence in their direction, they should feel empowered to skip or shorten phases that won‚Äôt contribute to improved confidence.\nExamples:\nAn engineering team conducts a technical review while other team members are performing Validation Phase activities. The team can then move to the Build phase rapidly with high confidence that their improvement is good for customers and technically feasible.\nA bug is reported by a GitLab customer. The Product Manager tests the bug and confirms its existence (Problem Validation). The team is extremely confident in the solution, so Design and Solution Validation are not needed. The bug is moved immediately to Build.\nWorkflow Summary\nProduct Development Flow diagram.\nUnable to load this content, check console for details.\nWe use workflow labels to efficiently communicate an issue‚Äôs state. Using these labels enables collaboration across teams and communicates an issue‚Äôs current state.\nThe workflow labels are prefixed with\nworkflow::\n, such as\nworkflow::ready for development\n. The following diagram shows how a new issue moves to each workflow label, though states can be skipped when appropriate. The rest of this document describes each workflow step in detail.\nstateDiagram-v2\n[*] --> ValidationBacklog: New issue created\nValidationBacklog: validation backlog\nProblemValidation: problem validation\nReadyForDesign: ready for design\nDesign: design\nSolutionValidation: solution validation\nValidationBacklog --> ProblemValidation\nProblemValidation --> ReadyForDesign: (Optional) Needs design\nReadyForDesign --> Design\nProblemValidation --> SolutionValidation\nDesign --> SolutionValidation\nPlanningBreakdown: planning breakdown\nScheduling: scheduling\nRefinement: refinement\nReadyForDev: ready for development\nInDev: in dev\nInReview: in review\nVerification: verification\nComplete: complete\nBlocked: blocked\nSecurity: awaiting security release\nSolutionValidation --> PlanningBreakdown: PM signals intent to prioritize\nPlanningBreakdown --> Scheduling: (Optional) Awaiting scheduling\nPlanningBreakdown --> Refinement: (Optional) Needs refinement\nPlanningBreakdown --> ReadyForDev: Has type label & weight. Prioritization requires milestone, and Deliverable label.\nScheduling --> ReadyForDev: Milestone assigned\nRefinement --> ReadyForDev\nReadyForDev --> InDev\nInDev --> InReview: MRs ready for review\nInReview --> Verification: MRs merged\nVerification --> Complete: Verified in staging/prod\nInDev --> Blocked: Blocked by dependency/question\nBlocked --> InDev: Block resolved\nInReview --> Security: Waiting for monthly security release\nSecurity --> Verification: MRs merged and released in security update\nComplete --> [*]\nIssue descriptions as the Single Source of Truth (SSOT)\nIssue descriptions shall always be maintained as the single source of truth.\nIt‚Äôs not\nefficient\nfor contributors to need to read every comment in an issue to understand the current state.\nIssue description accuracy should be maintained by the DRIs throughout each phase. However all collaborators can and should contribute when they see discrepancies or needed updates.\nValidation track\nFor situations\nwhen the customer problem isn‚Äôt well understood\n, Product Managers (PMs) and the User Experience Department (UXers) should work together to validate new opportunities before moving to the Build track. The\nValidation\ntrack is an independent track from the always moving\nBuild\ntrack. PMs and UXers should work together to get at least two months ahead, so that the Build track always has well-validated product opportunities ready to start. Milestone work should be\nprioritized\nwith the understanding that some milestones may include more validation efforts than others. Validation cycles may not be necessary for things like bug fixes, well understood iterative improvements, minor design fixes, and technical debt.\nValidation Spectrum\nThe types of activities and depth of research required in the validation track will depend on how well we understand the customer problem and solution.\nValidation Goals & Outcomes\nWhen:\nWhen our confidence about the proposed problem or solution isn‚Äôt high. For example, if we aren‚Äôt reasonably sure that the problem is important to a significant number of users, or that the solution is easy to understand and use.\nWho:\nProduct Manager, Product Designer, UX Researcher, Product Design Manager, Engineering Manager\nWhat:\n‚úÖ\nUnderstand\nthe user problem we are trying to solve.\n‚úÖ\nIdentify\nbusiness goals and key metrics to determine success.\n‚úÖ\nGenerate\nhypotheses and research/experiment/user-test.\n‚úÖ\nDefine\nMVC and potential future iterations.\n‚úÖ\nMinimize\nrisks to value, usability, feasibility, and business viability with qualitative and quantitative analysis.\nOutcome:\nWe have confidence that a proposed solution will positively impact one or more\nProduct KPIs\n. There may be reason for exceptions, so the team would need to be clear in that case, and be able to justify that it‚Äôs still important without mapping back to our KPIs.\nIf we don‚Äôt have confidence in the MVC or what success looks like, we should continue validation cycles before we move to the Build track.\nValidation phase 1: Validation backlog\nLabel:\nworkflow::validation backlog\nKey Participants\nRole\nFunction\nProduct Manager\nCollaborators\nProduct Designer\nProduct Design Manager\nEngineering Manager\nInformed\nCustomers\nCustomer Success Manager\nProduct Marketing Manager\nOther\nstakeholders\nas appropriate\nDescription\nThe growth of a world class product is built from a well maintained backlog. Product Managers are responsible for refining a group‚Äôs backlog to ensure validation opportunities are scoped and\nprioritized\nin line with category direction, stage, and/or section level strategy. The backlog is also the single source of truth for\nstakeholders\nto understand and engage with your group. An issue position in the backlog, along with the description, discussion, and metadata on those issues are key pieces of data necessary to keep stakeholders up to date.\nOutcomes and Activities\nOutcomes\nActivities\nUp to date issues and epics\n: At GitLab, issues are the single source of truth for any change to the product. Keeping these up to date increases efficiency and transparency by allowing all team members to understand the planned work.\n- Create issues in response to a\nsensing mechanism\n.¬†Consider using the\nProblem Validation\nissue template for new features.\n- Review issue discussions and update relevant info in the description.\n- Keep metadata (such as labels) up-to-date.\n- Actively respond to stakeholder comments.\n- Transfer discussion notes, and external information to the issue (as links or discussion/description details).\nProduct Manager\nPrioritized backlog\n: The issue and epic backlog is the primary signal stakeholders use to know what‚Äôs ‚Äúup next‚Äù for a group. The backlog is also the queue for a group to work from, as features progress through the Product Development Flow phases. This queue is kept up to date with milestones and rank ordering on issue boards.\n- Regular review of issue prioritization (such as issue board ordering and milestone assignment).\n- Align prioritized backlog to category direction and category maturity state.\n-¬†Consider using the\nRICE formula\nto help make prioritization tradeoffs.\n-¬†Consider holding\nprioritization sessions\nto collect priority feedback from stable counterparts as there are\nother DRIs for bug and maintenance work\n.\nProduct Manager\nValidation phase 2: Problem validation\nLabel:\nworkflow::problem validation\nKey Participants\nRole\nFunction\nProduct Manager\nCollaborators\nProduct Designer\nUX Researcher\nInformed\nDevelopment team\nOther\nstakeholders\nas appropriate\nDescription\nTo ensure the right solutions are delivered, the team must start their work with a\nvalidated problem\n. This can take\nmany forms\nand be achieved through Product Manager, Product Designer and UX Researcher collaboration.\nIf the problem is documented and well-understood, it may be possible to quickly move through this phase by documenting the known data about the user problem. A documented problem can be categorized as a pre-existing experience from feedback directly from users or an issue that has user engagement confirming that the problem is experienced by multiple users. A well-understood problem can be one that has a series of documented qualitative research from customer interviews led by the Product Manager, triangulating\ndifferent sensing mechanisms\nconfirming the problem, or using known data. Some examples of known data include\nCustomer Request Issues\nor pre-existing\nActionable Insights\nfrom prior research. To document that a problem is well-understood, link the known data and any customer calls to the relevant issues and epics.\nIf the problem is nuanced or not yet well understood, then it will likely take longer to validate with users properly. This phase‚Äôs primary outcome is a clear understanding of the problem, along with a simple and clear way to communicate the problem to various stakeholders. Although optional, it is recommended to use an\nOpportunity Canvas\nas a tool that helps individuals better understand a problem, and communicate it to various stakeholders. An Opportunity Canvas can also be used to recommend creation of a new category including asking for new resourcing.\nOutcomes and Activities\nOutcomes\nActivities\nThorough understanding of the problem\n: The team understands the problem, who it affects, when and why, and how solving the problem maps to business needs and product strategy.\n- Create an issue using the\nProblem Validation Template\nin the GitLab project.\n- Complete an\nOpportunity Canvas\n.\n- Schedule a review of the opportunity canvas for feedback.\n- Create an issue using the\nProblem Validation Research Template\nin the UX Research project and work with UX Researcher to execute the research study.\n- Validate your problem with users using any of the\nproposed methods\nand\ndocument your findings in Dovetail\n.\nProduct Manager\nUpdate issue/epic description\n: A well understood and clearly articulated customer problem is added to the issue, and will lead to successful and efficient design and development phases.\n- Ensure your issue is up-to-date with the latest understanding of the problem.\n- Understand and document (in the issue) the goals that people want to accomplish using the\nJobs to be Done (JTBD)\nframework.\n- Conduct\ncontinuous interviews\nwith customers on a regular cadence to stay up-to-date on the problems that users face.\n- Leverage your\nopportunity canvas\nto communicate the problem to your stable counterparts and group stakeholders. Consider scheduling a review to gather feedback and communicate the findings to Product and UX leadership.\n- Confirm that the Product Designer understands the problem well enough to ideate on solutions.\nProduct Manager\nInitiate the Dogfooding Process: When validating problems, it‚Äôs important to gather feedback from\ninternal customers\n, in addition to the broader community. Capturing internal customer feedback early on in the product development flow helps ensure their needs are considered as the feature matures, accelerating key\nDogfooding\noutcomes. Driving internal usage of features consistently\nleads to greater customer adoption\nand is required for\nviable maturity\n.\n- PMs are strongly encouraged to open\nDogfooding issues\nduring the validation phase and capture internal customer feedback to help inform initial and/or future iterations of a feature.\nProduct Manager\nValidation phase 3: Design\nLabels:\nworkflow::design\nKey Participants\nRole\nFunction\nProduct Designer\nCollaborators\nProduct Manager\nEngineering Manager\nDevelopment team\nUX Researcher\nSoftware Engineer in Test\nTechnical Writer\nLegal & Corporate Affairs\nInformed\nProduct Design Manager\nApplication Security Engineer\nOther\nstakeholders\nas appropriate\nDescription\nAfter understanding and validating the problem, we can begin or continue to ideate potential solutions through a\ndiverge/converge\nprocess. However, if the outcome from the problem validation phase confidently suggests an incremental modification to the existing solution, the aforementioned diverge/converge process could be skipped.\nThe Product Designer leads the team (Product Manager, Engineering team, UX Researcher, Software Engineers in Test, and Technical Writers, as needed, depending on the item) in ideating potential solutions and exploring different approaches (diverge) before converging on a single solution. Product Managers and the Engineering team evaluate solutions by determining if they meet customer and business goals, are technically feasible, and align with legal compliance considerations. The team is encouraged to engage with stakeholders to determine potential flaws, missed use cases, potential security risks, and if the solution has the intended customer impact.\nDuring this phase the  Product Manager and Engineering Manager are both responsible for reviewing the\nLegal Risk Checklist\n(accessible to team members only) and determining whether any sections need to be completed. After the team converges on the proposed solution or identifies a small set of options to validate, the issue moves into the Solution Validation phase.\nTo start the Design phase, the Product Designer or Product Manager applies the\nworkflow::design\nlabel to an existing issue or, if needed, creates a new issue with this label.\nOutcomes and Activities\nOutcomes\nActivities\nProposed solution(s) identified and documented\n: The Product Designer works with the Product Manager and Engineering team to explore solutions and identifies the approach(es) that strike the best balance of user experience, customer value, business value, and development cost.\nThe Product Designer optionally apply by\nworkflow::ready for design\nlabel to the issue, signaling the design backlog of next issues to be done is prioritized.\nDiverge\n: explore multiple different approaches as a team. Example activities:\n-\nThink Big\nsession.\nInternal interviews (be sure to\ndocument findings in Dovetail\n).\n- Creating\nuser flows\n.\nConverge\n: identify a small set of options to validate. Example activities:\n-\nThink Small\nsession with the team.\n- Design reviews with team\n- Low fidelity design ideas.\n- Update issue/epic description with proposed solution. Add Figma design file link or attach design to\nGitLab‚Äôs Design Management\nto communicate the solution idea. Read to understand\nwhat tool to use\n.\n- Validate approach with help from stakeholders. Run user validation using any of the\nproposed methods\nand\ndocument your findings in Dovetail\nand appropriate GitLab issue.\n- Draw inspiration from competitive and adjacent offerings.\nProduct Designer\nShared understanding in the team of the proposed solution\n: The Product Designer leads the broader team through a review of the proposed solution(s).\n- Review the proposed solution as a team so that everyone has a chance to contribute, ask questions, raise concerns, and suggest alternatives.\n- Review the proposed solution with leadership.\nProduct Designer\nConfidence in the technical feasibility\n: It‚Äôs important that Engineering understands the technical feasibility of the solution(s) to avoid rework or significant changes when we start the build phase.\n- Discuss the technical implications with Engineering to ensure that what is being proposed is possible within the desired timeframe. When sharing design work, use both Figma‚Äôs collaboration tools and GitLab‚Äôs design management features. Read to understand\nwhat tool to use\n.\n- Engage engineering peers early and often through Slack messages, pings on issues or by scheduling sessions to discuss the proposal.\n- If the solution is large and complex, consider scheduling a\nspike\nto mitigate risks and uncover the optimal iteration path.\nProduct Designer\nUpdated issues/epic descriptions\n: The Product Manager and Product Designer ensure issues and epics are up-to-date.\n- Ensure issues and epics are up-to-date, so we can continue our work efficiently and asynchronously.\n-\nExperiment definition\n.\nProduct Manager\nContinue Dogfooding process\n- If applicable to their feature, the Product Manager continues the Dogfooding process by deciding whether to\nbuild the feature in GitLab or keep outside\nthe product.\nProduct Manager\nValidation phase 4: Solution Validation\nLabel:\nworkflow::solution validation\nKey Participants\nRole\nFunction\nProduct Designer\nCollaborators\nProduct Manager\nDevelopment team\nInformed\nProduct Design Manager\nTechnical Writer\nSoftware Engineer in Test\nApplication Security Engineer\nOther\nstakeholders\nas appropriate\nDescription\nAfter identifying one or more potential solutions that meet business requirements and are technically feasible, the Product Manager and Product Designer must ensure that we have confidence that the proposed solution will meet the user‚Äôs needs and expectations. This confidence can be obtained from work performed during the design phase and supplemented with additional research (including user interviews, usability testing, or solution validation). If necessary, this phase will launch a Solution Validation issue within the\nGitLab UX Research project\nwhich will walk the team through research to validate their proposed solution(s).\nIn addition, any\nnon-functional requirements\nfor the feature need to be considered and documented. These include such things as evaluating whether or not\napplication limits\nneed to be introduced, or any\nconsiderations around data storage\nshould be evaluated. Defining these non-functional requirements up front ensures we are considering scalability and the long-term success of the feature. Sensible default values should be identified at this stage which align with the long-term vision for the feature.\nTo start the Solution Validation phase, the Product Designer or Product Manager applies the\nworkflow::solution validation\nlabel to an existing issue.\nOutcomes and Activities\nOutcomes\nActivities\nHigh confidence in the proposed solution\n: Confidence that the jobs to be done outlined within the problem statement can be fulfilled by the proposed solution.\n- Gather feedback from relevant stakeholders.\n- Follow\nsolution validation guidance\nto gather feedback.\nProduct Designer\nDocumented Solution validation Learnings\n: The results of the solution validation is communicated to and understood by team members.\n- Document solution validation findings as\ninsights in Dovetail\n.\n- Update the\nopportunity canvas\n(if used) with relevant insights.\n- Update issue or epic description to contain or link to the findings.\nProduct Designer\nBuild track\nThe build track is where we plan, develop, and deliver value to our users by building\nMVCs\n, fixing defects, patching security vulnerabilities, enhancing user experience, and improving performance. This track is also a time\nwhen we get insight into whether we are creating the right thing\nfor our users. DRIs across engineering disciplines involving\nDesign, Backend, Frontend and Quality\nwork closely together to implement MVCs while in close collaboration with the Product Manager. Decisions are made quickly if challenges arise. We instrument\nusage\nand track\nproduct performance\n, so after MVCs are delivered to customers, feedback is captured quickly for learnings to\nrefine the next iteration\n. For an example of how to leverage GitLab‚Äôs various features to create a focused and collaborative board to flow through the Build track,\ncheck out this video\n.\nBuild Goals & Outcomes\nWhen:\nAs we build MVCs according to our\nproduct development timeline\nWho:\nProduct Manager, Product Designer, Development team, Software Engineer in Test\nWhat:\n‚úÖ\nRelease\nto a subset or full set of customers as appropriate.\n‚úÖ\nAssess\nUX, functional, technical performance, and customer impact.\n‚úÖ\nCollect\ndata to measure MVC against success metrics to inform the next iteration.\n‚úÖ\nIterate\nuntil success metrics are achieved and the product experience is optimal.\nOutcome:\nDeliver performant MVCs that improve one or more of our\nProduct KPIs\nand/or\nEngineering KPIs\n. If it fails to do so, honor our Efficiency value (that includes a low level of shame), abandon it, and restart the validation cycle to identify the right solution.\nBuild phase 1: Plan\nRequired Labels\nLabel\nUsage\nworkflow::planning breakdown\nApplied by the Product Manager on or before the\n4th of the month\nsignaling an intent to prioritize the issue for the next milestone.\nworkflow::ready for development\nIssue has been broken down and prioritized by PM for development. Issue also has a\nwork type classification\n(\ntype::\n) label and milestone assigned at this point.\nDeliverable\nApplied to issues by engineering managers indicating it‚Äôs been accepted into the current milestone.\nKey Participants\nRole\nFunction\nProduct Manager\nCollaborators\nProduct Design Manager\nEngineering Manager\nProduct Designer\nSoftware Engineer in Test\nDevelopment team\nLegal & Corporate Affairs\nInformed\nProduct Marketing Manager\nCustomer Success Manager\nTechnical Writer\nApplication Security Engineer\nDescription\nThis phase prepares features so they are ready to be built by engineering. Bugs, technical debt, and other similar changes that are not features may enter the process in this phase (or may benefit from entering in earlier phases based on the cost of doing the work requiring the full problem to be validated to ensure it makes sense to do the work). Following Validation Phase 4 the feature should already be broken down into the quickest change possible to improve the user‚Äôs outcome and be ready for a more detailed review by engineering. During this phase, Product Managers will surface issues they intend to prioritize for a milestone by applying the\nworkflow::planning breakdown\nlabel. At this point, Engineering Managers will assign an engineer to further break down and apply weights to that work. This process is a collaboration between the DRI and Collaborators. Tradeoff decisions can be made and feature issues evolve from validation solutions to clear MVCs that can be delivered in a single milestone. Be sure to document all decisions on issues.\nDuring this phase, the Product Manager and the Engineering Manager must revisit the\nLegal Risk Checklist\n(accessible to team members only) to make sure none of their previous determinations during Validation phase 3: Design need revision.\nBy reviewing and weighing work in the beginning of the Build Track, Product Managers are able to make better prioritization tradeoffs and engineering teams can ensure they‚Äôve scoped the right amount of work for the milestone. If an issue enters the\nworkflow::planning breakdown\nstate it doesn‚Äôt necessarily mean it will be prioritized in the next milestone, a Product Manager may make a tradeoff decision depending on capacity, and urgency.\nOnce work has passed the\nworkflow::planning breakdown\nstep, the\nworkflow::ready for development\n,\ntype::\nlabels along with an upcoming milestone are applied to the issue. If an issue has been broken down, but not yet ready to pull into a milestone you may optionally apply the\nworkflow::scheduling\nlabel; however, in this state any issue that has the\nworkflow::ready for development\nlabel without a milestone has an implied status of ‚Äúwaiting to be scheduled‚Äù. Engineering Managers and/or Product Design Managers will apply\nDeliverable\nlabel to issues with a milestone and marked\nworkflow::ready for development\nsignaling acceptance of the issue for that milestone. This process occurs at the\nbeginning of milestone planning\n.\nDuring this phase, it‚Äôs important to keep Application Security Engineers informed to ensure that they have visibility into planning schedule. This provides them with sufficient time for planning dynamic testing so they can keep the product manager and development team informed of any time/resource requirements.\nOutcomes and Activities\nOutcomes\nActivities\nWell-scoped MVC issues\n- Issues are the\nfor all feature development.\n- Refine issues into something that can be delivered within a single milestone\n- Open follow on issues to track work that is de-prioritized\n- Promote existing issues to Epics and open implementation issues for the upcoming milestone\n- Review feature issues with contributors\n- Consider scheduling a POC or engineering investigation issue\n- Make scope tradeoffs to reach for a\nright-sized MVC\n- Request an issue review to ensure communication is clear and have proposed the\nright iteration plan\nto execute on the solution.\n- Product Manager\nPrioritized Milestone\n- The team should understand what issues should be delivered during the next milestone\n- Product Manager sets\nworkflow::ready for development\n,\ntype::\n, and a milestone signaling intent to prioritize\n- Product Designer and Engineering Manager apply\nDeliverable\nlabel signaling acceptance of issue in the next milestone - Product Manager creates a planning issue\n- Product Manager, Product Designer, and Engineering Manager\nDefined Quality Plan\n- Involving SETs in this phase ensures they are able to understand and effectively plan their own capacity before engineering is truly underway.\n- Quad Planning\n-\nTest planning\n- Software Engineer in Test\nImplementation Issue Refinement\n- Some teams have found it useful to treat issue refinement as a separate, iterative task from planning breakdown. This separation allows them to focus backlog refinement on the aspects of the original feature that will be delivered first.\n- Further refine implementation issues identified in the\nworkflow::planning breakdown\nstep by  additionally applying\nworkflow::refinement\n.\n- Engineering Manager\nBuild phase 2: Develop & Test\nRequired Labels\nLabels\nUsage\nworkflow::in dev\nApplied by the engineer after work (including documentation) has begun on the issue. An MR is typically linked to the issue at this point.\nworkflow::in review\nApplied by an engineer indicating that all MRs required to close an issue are in review.\nworkflow::blocked\nApplied if at any time during development the issue is blocked. For example: technical issue, open question to PM or PD, cross-group dependency.\nworkflow::verification\nAfter the MRs in the issue have been merged, this label is applied signaling the issue needs to be verified in staging or production.\nworkflow::awaiting security release\nApplied by an engineer after the security issue has passed verification, this label signals that it is ready but awaiting the next\nmonthly security release\n.\nKey Participants\nRole\nFunction\nAssigned engineer\nCollaborators\nProduct Manager\nSoftware Engineer in Test\nTechnical Writer\nProduct Designer\nApplication Security Engineer\nInformed\nProduct Marketing\nEngineering Manager\nCross-stage PM\nSales\nCustomer Support\nDescription\nThe develop and test phase is where we build the features, address bugs or technical debt and test the solutions before launching them. The PM is directly responsible for\noverall prioritization\nof a milestone, including bugs and maintenance work; however, the Engineering Manager and software engineers are responsible for the implementation using the\nengineering workflow\n. Engineering owns the\ndefinition of done\nand issues are not moved into the next phase until those requirements are met. Keep in mind that many team members are likely to contribute to a single issue and collaboration is key.\nThis phase begins after work has been broken down, and\nprioritized\nin Phase 1. Work is completed in priority order as set at the beginning of the milestone. The Engineering Manager will assign an issue to an engineer who is responsible for building the feature or addressing a bug or maintenance issue. An engineer can also self-serve and pick up the next priority order issue from the\nworkflow::ready for development\nqueue on their team‚Äôs board. That engineer will update its\nworkflow::\nlabel to indicate where it‚Äôs position in the\ndevelopment process\n.\nWhen an issue is in\nworkflow::in review\n, the Application Security Engineer would help validate the risk mitigations through the non-blocking\napplication security review process\n.\nDocumentation for the work will be developed by the engineer and the Technical Writer (see\nDocumentation with code as a workflow\n). The Technical Writer should review the documentation as part of the development process. Items discovered during a documentation review should not block issues moving into the next phase. This may drive the creation of follow-on improvement MRs for the documentation, after release.\nAfter the feature code has been merged, the issue should be moved to\nworkflow::verification\n.\nWhen an issue is in\nworkflow::verification\n, the responsible engineer will\nmanually test the feature\nin either the Staging or Production environment.\nNote: Work deemed out-of-scope or incomplete by engineering is taken back into the\nplan phase\nfor refinement and rescheduling for completion.\nOutcomes and Activities\nOutcomes\nActivities\nFeature is built\n- Engineering Manager check that\ndefinition of done\nis met\n- Provide regular status updates to stakeholders\n- Provide asynchronous updates to avoid status check-ins and synchronous stand-ups\n- Engineers follow the\nengineering process\nto implement assigned issues.\nEngineer\nFeature is tested\n- Engineers test features they implement (see\nDefinition of done\n).\n- SET sets testing requirements on the issue.\n- SET follows up on any specific test coverage changes necessary as an outcome of Quad Planning.\n- Technical Writers complete a\nreview\nof any developed documentation.\n- Application Security Engineer validates the risk mitigations through the non-blocking\napplication security review process\n.\nEngineer\nBuild phase 3: Launch\nIssue Status:\nClosed\nRequired Labels\nLabel\nUsage\nworkflow::complete\nApplied after the feature is deployed to production, any needed verification is complete, and the issue has been closed.\nKey Participants\nRole\nFunction\nDevelopment\n: Close issue after it‚Äôs available in production and any needed verification is complete.\nProduct Manager\n: Initiate\nrelease post item creation\nif they decide it‚Äôs warranted.\nProduct Manager\n: Continue the\ndogfooding process\nif they decide it‚Äôs applicable.\nProduct Manager\n: Consider alerting relevant stakeholders in appropriate Slack channels.\nCollaborators\nDevelopment team, Quality counterpart, and Product Manager may verify the feature is working as expected in production. (Primary verification is, of course, performed prior to production whenever possible.)\n-Technical Writers create any documentation issues or MRs required to address issues identified during review that weren‚Äôt resolved.\nInformed\nStakeholders\nfor the change (including customers, open-source users, and GitLab team members) will be informed about the feature by the change in the status of the issue or the release post. GitLab team members may also be informed by posts in relevant Slack channels.\nDescription\nWhen the change becomes available in production and any needed verification is complete, the issue is closed by the development team and the\nworkflow::complete\nlabel is added so stakeholders know work on it has been completed. Afterward, the Product Manager coordinates the\nrelease post\nand\ndogfooding process\nwhen they apply.\nOutcomes and Activities\nOutcomes\nActivities\nFeature is available to GitLab.com hosted customers\n: After it‚Äôs deployed to production (and any feature-flags for it are enabled), the feature is launched and available to GitLab.com hosted customers.\n- Code is deployed to production.\n-\nFeature flag(s)\nenabled.\nDevelopment\nFeature is available to self-managed customers\n: The feature will be available in the next scheduled release for self-managed customers to install.\n- Code is included in the self-managed release, (\ndepending upon the cut-off\n).\nDevelopment\nStakeholders of a feature will know it‚Äôs available in production\n- After the feature is deployed to production and any needed verification in production is completed, the development team will close the issue and add the\nworkflow::complete\nlabel.\n- Product Manager may follow up with individual\nstakeholders\nto let them know the feature is available.\nDevelopment\nCustomers will be informed about major changes\n: When appropriate for a change, a release post item will be written and merged by the Product Manager.\n- Product Manager follows the instructions in the\ntemplate\n, which will then cause it to appear on the\nGitLab.com releases page\nand be part of the release post.\nProduct Manager\nContinue Dogfooding process\n- If the PM wants to Dogfood the feature and it‚Äôs ready for internal consumption, the Product Manager\npromotes it internally\n.\nProduct Manager\nExperiment results and follow-up issue is created\nFor experiments, create a\nfollow-up issue\nthat will be where results of the test and next-steps are tracked.\nProduct Manager\nBuild phase 4: Improve\nLabel: n/a\nKey Participants\nRole\nFunction\nProduct Manager\nCollaborators\nProduct Designer\nCustomer Success\nSales\nData Analysts\nUX Researcher\nProduct Management Marketer\nTechnical Writer\nInformed\nDevelopment team\nLeadership\nOther\nstakeholders\nas appropriate\nDescription\nAfter launch, the Product Manager and Product Designer should pay close attention to product usage data. This starts by ensuring your\nis instrumented and reporting as you expect. From there consider how the feature has impacted\nand\n. At this point you should also solicit customer feedback to guide follow-on iterative improvements, until success metrics are achieved/exceeded and a decision can be made that the product experience is sufficient. To create a combined and ongoing quantitative and qualitative feedback loop, consideration of the outcomes and potential activities below are recommended.\nOutcomes and Activities\nOutcomes\nActivities\nUnderstand Qualitative Feedback\n: To know how to improve something, it‚Äôs important to understand the qualitative feedback that we‚Äôre hearing from users and team members.\n- Create a dedicated\nfeedback issue\n(optional).\n- Continue\ndogfooding process\n.\n- Review\nuser feedback in issues\n.\n- Follow up with\nCSMs\nand\nSAEs\nto gather feedback from interested customers.\n- Set up follow-up calls with customers to gather more specific feedback.\n- Consider running a\nCategory Maturity Scorecard\nevaluation.\n- Consider running a survey for usability.\nProduct Manager\nMeasure Quantitative Impact\n: Qualitative data is great, but coupling it with quantitative data can help to paint the full picture of what is going on.\nSet up dashboards in Tableau\nand review the performance and engagement of your change.\n- Update any applicable dashboards in Tableau, if necessary work with the data team for more complex reporting.\n- Review\nAMAU, GMAU, and SMAU dashboards\nto understand if the new feature or improvement has impacted core metrics.\n- Consider running a Category Maturity Scorecard evaluation.\nProduct Manager\nBenchmark the experience\n:\nConsider performing a\nUX Scorecard\nto score and benchmark the usability of the experience in the product based on a core set of heuristics and create new issues when identifying opportunities for improvement.\nProduct Designer\nTake action on Learnings\n: After you understand the qualitative and quantitative impact, you can take action on your learnings by creating new issues or updating existing open issues with more information.\n- Open new issues or revise existing open issues for\nfollow-on iterations\nand improvements.\n- Ensure you‚Äôve captured feedback in issues or as updates to your direction pages.\n- If applicable, update your category maturity score and timeline.\n- Share learnings with your group and stage.\n- Consider sharing learnings with the broader team.\n- Coordinate with your\nto understand if there are any relevant Go-To-Market motions you should consider updating.\n- Update experiment follow-up issue with results and specific next steps.\n- Potentially create issues or MRs for updates to the documentation site, to provide useful information in advance of potential product updates related to learnings.\nProduct Manager\nContributing to this page\nAll merge requests to this page require informing Product Operations prior to merging. To make updates such as grammatical\nfixes and typos, you can create an MR and assign Product Operations DRI\n@justinfarris\nas Reviewer for reference, and then merge. There‚Äôs no need to wait for feedback on these types of updates prior to merging.\nFor updates that affect the overall phases by modifying core definitions, workflow labels or other cross-functionally utilized processes,\nyou can create an issue or MR, add the current milestone and labels\nproduct development flow\n,\nproduct operations\n,\nprodops:release\nand assign it to Product Operations DRI\n@justinfarris\nas Reviewer for collaboration and approval.\nThe Product Operations DRI will ensure the MR gets included in product develoment flow release updates as well as ensuring alignment happens with the following stakeholders if needed:\nVP of UX\nVP of Development\nVP of Quality Engineering\nProduct Leadership Team\nIn some cases, when significant changes to the product development flow are needed, affecting multiple teams and/or function workflows, Product Operations may request a draft page and/or a\nworking group\nfor multiple iterations prior to pushing changes to this framework, to minimize disruption and distraction during product development.\nFeature flags in development of GitLab\nNOTE: The content below covers feature flags used by GitLab to deploy its own features, which is not ‚Ä¶\nPhase template\nTrack Phase X: Phase Name Label: ~label\nKey Participants Role Function DRI TBD Collaborators TBD ‚Ä¶\nProduct Development Budgeting Process\nPre-planning for potential new investments The pre-planning is done in advance of the budget ‚Ä¶\nProduct Development Flow Success Metrics\nThis page surfaces metrics related to the product development flow\nLast modified July 2, 2025:\nAdd product dev folder and move relevant pages (\n83bfc789\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 6055}
{"doc_id": "b343684ec7a1eb86", "url": "https://handbook.gitlab.com/handbook/product/product-processes/product-safe-guidance", "title": "Product Manager SAFE Guidance | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct Processes\nProduct Manager SAFE Guidance\nOverview\nThis guide for GitLab Product Managers clarifies and expands on the\nRegulation FD Training\n.\nMaking changes to this page\nTo make any edits to this page, please create a merge request and add a  description of what you want to change and why. Add labels\nproduct operations\nprodops:release\nand\nproduct handbook\n. Add Product Operations DRI/Maintainer\n@fseifoddini\nas Reviewer for collaboration and approval. If Product Operations is unavailable and the topic is time-sensitive, please add Maintainer\n@gweaver\nfor collaboration and approval.\nPlease note the content of this page needs to remain aligned with Legal team guidance so any changes must be approved by one of the Maintainers.\nGeneral Guidelines\nGitLab Legal has put together a comprehensive framework to help team members determine which information is internal only and that which can be shared publicly. Following the\nSAFE framework\nwill help you comply with the requirements of Regulation Fair Disclosure.\nIf you‚Äôre not sure\nPlease reach out to Slack #SAFE with any questions that are still unclear after reviewing this page. When posting in #SAFE tag Product Operations, as that will help them maintain this page.  We also encourage you to raise an MR to update the handbook as needed based on your findings.\nRequired Disclaimers\nThe following applies to GitLab artifacts that have product and specific feature information. Please remember these artifacts should only contain information that is\n. Links to various disclaimers are available in the\n‚Äúhelpful legal references‚Äù\nTopic\nDisclaimer\nLegal Review Required (Y/N)\nOther Considerations\n3 year direction videos\nProduct demos, walk-through videos\nMeeting recordings (e.g. Team calls, PM Weekly, Retrospectives)\nDirection pages\nGeneral product handbook pages\nEpics (non-direction)\nIssues (non-direction)\nEpics\n~direction\nIssues\n~direction\nMerge Requests\nGeneral guidance on topics/actions\nTopic\nLegal Considerations\nLegal Review Required (Y/N)\nAcquisitions\nPricing Changes\nNew product launches (e.g GL Dedicated)\nReferences to revenue\nUser confidentiality\nMaterially Non-Public Information (MNPI)\nProduct managers often need access to MNPI to do their job. As GitLab is now a publicly-traded company, it is important we all understand what MNPI is so we manage information/data appropriately. Here are some examples of MNPI:\nhistorical or forecasted revenues, earnings or other financial results;\nsignificant new products or services or other product developments;\nsignificant new contracts or partners or the loss of a significant contract or partner;\nsignificant developments regarding GitLab‚Äôs technology or business operations;\npossible mergers or acquisitions or dispositions of significant subsidiaries or assets;\nmajor new litigation or regulatory inquiries or developments in existing litigation or inquiries;\nsignificant cybersecurity incidents or data breaches;\nsignificant developments in borrowings, or financings or capital investments;\nsignificant changes in financial condition or asset value or liquidity issues;\nchanges in GitLab‚Äôs Board of Directors, E-group, or senior management;\nsignificant changes in corporate strategy;\nchanges in accounting methods and write-offs; and\nstock offerings, stock splits or changes in dividend policy.\nThe list of examples is not a comprehensive list of what could be considered material information. Determining what may be material information will depend upon the facts and circumstances in each particular situation.\nHelpful Legal References\nProduct disclaimer templates\nFrequently Asked Questions\nDo product PIs (performance indicators) need to be marked private?\nYes. Whether in epics, issues or handbook pages, PIs should be internal-only and follow the\nSAFE framework\n.\nWhat are some practical examples of things that are SAFE?\nExamples of what‚Äôs safe to share and those that need to remain internal-only:\nSituation\nClassification\nWhy\nPublicly discussing a group‚Äôs MAU in an issue\nNot SAFE\nWe should avoid publicly disclosing MAU numbers\nPublicly discussing new/potential product performance indicators\nWe can publicly discuss PIs as long as no actual data (numbers/values) is referenced or exposed\nRequesting a review from legal\nIf you need a review from Legal, please ping in the\nchannel in Slack.\nWhat artifacts/actions can generally be published with a disclaimer?\nSee the table above. If you are recording a video that requires a disclaimer but are not using a slidedeck, you may alternatively verbalize the disclaimer at the beginning of the video to avoid extra post-production work.\nWhat limitations do we have on sharing specific instrumentation data in public issues?\nNone, so long as the instrumentation data does not contain\nsensitive\n,\nfinancial\n, or\ninternal-only\ndata.\nWhat third-party materials can be included in publicly-available artifacts?\nGuidelines covering the use of third-party materials (like images, diagrams, and quotes) are being prepared and will be linked here when ready.\nWhat third-party company and product names and logos can be included in publicly-available artifacts?\nThe\nThird-party Trademark Usage Guidelines\ncover the use of third-party trademarks in GitLab (the product), and set out the process for adding new third-party logos to GitLab.\nThis advice\ncovers the use of third-party trademarks in the context of comparative advertising.\nShould our planning issues be confidential? And if so, should our Kickoff videos be private as well?\nIn general, keep the issues and videos public. For issues that are of possible interest to investors keep private until publicly disclosed. Don‚Äôt make public videos that contain earnings and other material information prior to these details being publicly available.\nPrivate issues that might find their way to an investor, analyst, or investment institution, are more likely to be in violation.\nShould we avoid using $tag on Social Media posts?\n$cashtags\nare commonly used to reference anything that is financially related to a company (\nexample\n). There is nothing wrong with using this symbol to reference or link to any financial information that has already been disclosed and distributed in an authorized public channel. For example, linking to a company‚Äôs annual or quarterly statements published on their public website.\nIf the information is not SAFE, do not link to it or share it publicly.\nCan you provide a definition for Information that is considered material?\nReferencing the\nhandbook page is a great place to start. If you‚Äôre still unsure, please reach out to Legal in\n#legal\nand someone will be glad to assist you.\nLast modified June 3, 2025:\nFix broken links (\nd7547623\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1016}
{"doc_id": "99081ef364306c76", "url": "https://handbook.gitlab.com/handbook/acquisitions", "title": "Acquisitions Handbook | The GitLab Handbook", "text": "The Handbook\nAcquisitions Handbook\nGitLab‚Äôs key goal in pursuing acquisitions is to accelerate our roadmap and offer better tools to customers more quickly.\nAcquisition strategy\nGitLab‚Äôs key goal in pursuing acquisitions is to accelerate our roadmap and offer better tools to customers more quickly. We are seeking to introduce new product categories and mature early categories faster\nthan by building everything internally. We want to acquire strong teams that have already built great tools and products relevant for GitLab customers and have them integrate their tech into GitLab.\nAdditional benefits to GitLab:\nStrengthen value prop in product categories with high growth and expected future profits\nImprove market perception and create a PR opportunity\nAcquisition approach\nWe are looking for companies interested in helping deliver on our\nvision\nto create a single application for the entire DevOps lifecycle. We value strong teams and technology and are looking for a combination of both that will help us accelerate our roadmap. We‚Äôre looking for acquisitions which can either present a strategic value-add or create potential for significant revenue upside.\nAcquisition target profile\nBelow is a set of general, yet not strict, characteristics of companies that are a potential fit for our acquisition process:\nHave built features or functionalities which are aligned with GitLab‚Äôs\nlong term strategy\nEngineers that meet our\nstandard hiring guidelines\nIdeally bring a solution which accelerates our maturity in a product category or fits into the new categories on our roadmap.\nR&D team size under 30 people\nWilling to\nreimplement products into GitLab\nin Ruby and Go\nWilling to sunset old customers within 90 days or less, with an option to transition to GitLab. GitLab follows an\nopen-core model\nAligned to ship on the first month and iterate quickly\nStrong founders looking to join GitLab\nConsidering joining forces with GitLab\nPlease review our\nhandbook\n; it is the central repository for how we run the company.\nSpend time understanding if a\nremote culture\nis right for you and your team.\nWhy join GitLab?\nLeverage the unique data and user-experience GitLab has as\ncomplete DevOps platform\nto act as a force-multiplier in helping you build the vision for your product area\nFocus on building great technology at scale to reach millions of users and some of the largest enterprise companies. We can ensure what you made will be used by more than 100,000 organizations and millions of users.\nQuick transaction - We move fast and aim to close the deal in 2-4 months, if you are able to drive a fast process with us\nUpside - Financial outcome if GitLab is successful (GitLab stock)\nYour team is in good company - GitLab is a unique place to work at with a leading product and a fascinating culture\nWhat we offer\nAcquisitions receive a compensation offer specific to that engagement, which will be evaluated as part of our\nacquisition process\nas we learn more about your company and your technology.\nWhat happens to your current company?\nOur goal is to integrate the acquired technology into GitLab‚Äôs platform with the team behind it, keeping the team as whole as possible.\nWe want to focus on integrating the value quickly, thus we don‚Äôt want to maintain existing services/products outside of GitLab‚Äôs platform as doing that will hinder the speed of integration.\nHear from the founders of our previous acquisitions\nAndrew Newdigate\n, ‚ÄúThroughout Gitter‚Äôs acquisition process, GitLab was an excellent partner. We started the process in mid-December, and by mid-January, the team were onboard and had joined GitLab‚Äôs summit in Canc√∫n, Mexico. Compared to previous acquisition attempts that we had been through with other companies, the professionalism and focus of the GitLab team was refreshing. It quickly became apparent to me that Sid, Paul and the team at GitLab were interested in striking a fair deal, and were as concerned about the outcome for the Gitter team as my co-founder and I were. In the year-and-half since, GitLab has continued to be a great home for Gitter and I‚Äôm incredibly proud to be part of the team.‚Äù\nPhilippe Lafoucri√®re\n, ‚ÄúWhen GitHub announced they would provide a Security graph and alerts, we knew we would not be able to compete with them. That meant the end of the story for us and our product. It was time to find a new home for the team. We started discussions with GitLab in November 2017 and officially joined the company in mid-January 2018. The whole process was seamless, with a particular care for the team. Expectations from both sides were discussed, with mutual respect and understanding.\nThe founders made themselves available for us at anytime, and we had regular meetings for several months until we all estimated the situation stable enough. Onboarding a whole team at once is a challenge: the peopleops team did everything they could to help and to make them feel comfortable with their new positions. They were happy to continue on the foundations we‚Äôve built over the years while being able to contribute to a greater goal. We managed to identify with the management where we could have the best impact, and provide results as soon as possible.\nI don‚Äôt see anything GitLab could have done differently to make this acquisition smoother. The most important value to follow in this kind of event is Trust (because you can only lose it once). GitLab, and especially its CEO, was incredibly clear and respectful during all the process and beyond.‚Äù\nGemnasium: Our GitLab journey\nKeys to successful acquisitions\nManaging people‚Äôs expectations and concerns\nSuccessful integration execution\nMaintain a non-biased view on target companies‚Äô value\nStarting an acquisition discussion with GitLab\nIf you are interested in starting acquisition discussions with GitLab, please send an email to\nCorporate Development\nto connect and start the process.\nAcquisition process\nLearn more about our internal\nacquisition process\nand how you can prepare for an efficient process.\nPerformance indicators\nSee our\nperformance indicators\n.\nFor additional information contact\nCorporate Development\n.\nAcquisition Process\nThis is a detailed view of our acquisition process. For more information about our acquisitions ‚Ä¶\nLast modified September 23, 2024:\nFix broken links (\nd748cf8c\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1027}
{"doc_id": "1a1dd180c12dc561", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/demo/ct-demos", "title": "Click Through Demos | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nProduct and Solution Marketing\nDEPRECATED-Demos\nClick Through Demos\nClick-through demos can be run in multiple ways:\nRun them off-line\n(for conferences, practice on the airplane, etc)\nRun them while online,\nfrom the files\n, same as running a presentation\nOr run them online from the web, using the links bellow:\nGitLab CI Overview demo (OCT 2020- 12.6)\nGitLab Planning to Monitoring (Aug 2019 - 12.0)\nCreate Kubernetes cluster (Aug 2019 - 12.0)\nMerge Request Approval API (July 2019 - 12.0)\nAgile Project Management (June 2019 - 12.0)\nG-slides file\nCross-project Pipeline Triggering and Visualization (May 2019 - 11.10)\nG-slides file\nSecure Capabilities (March 2019 - 11.8)\nG-slides file\nSales enablement recording (of shorter version)\nSecure Capabilities (short, guided) (March 2019 - 11.8)\n[G-slides file](https://docs.google.com/presentation/d/1cfzdLFWk3hYLw_aocgunVmJCD-TSiOgypr66A_nR8VQ/edit?usp=sharing)\n[Booth Demo Auto Play link](https://docs.google.com/presentation/d/e/2PACX-1vQF2Neh1h0vFwMapLvhppr_bZZVaxbtnVvTP69xd6YNGreW5dZ43w4w5qQTmYNewmI-3pViilsvbIcX/pub?start=true&loop=true&delayms=3000)\n[Sales enablement recording](https://youtu.be/hwJTiXt5T3w)\nAuto DevOps (Oct 2018 - 11.3)\n[G-slides file](https://docs.google.com/presentation/d/1oKHU3MsbJmxVQyO-7c6JLMoCOS80uS-0NlcI-mRxAAY/edit?usp=sharing)\n[Sales enablement recording (of shorter version)](https://youtu.be/V_6bR0Kjju8)\nAuto DevOps (short, guided) (July 2018 - 11.0)\n[G-slides file](https://docs.google.com/presentation/d/1UkQI_9V-CJZcbZJBDTB7tyOg14XHCKIwNoUHW1K6tC8/edit?usp=sharing)\n[Booth Demo Auto Play link](https://docs.google.com/presentation/d/e/2PACX-1vRQ4xltHhYRO_zgbo7exF6BwR09jvPmyFzR4XvjdlpYMRqT4dctx61XCkLjfR-8sq6QyOsoEFBBJjJh/pub?start=true&loop=true&delayms=3000)\n[Sales enablement recording](https://youtu.be/V_6bR0Kjju8)\nAuto DevOps - Setup (GKE) (Oct 2018 - 11.3)\n[G-slides file](https://docs.google.com/presentation/d/1AGABPlNzMm5-rrYfwGIzueXIbPleVkGpnc2Qk6JtnWk/edit?usp=sharing)\nAuto DevOps - Setup (EKS) (Oct 2018 - 11.3)\n[G-slides file](https://docs.google.com/presentation/d/1Ejnho9pqXPj-OHNU2q51cC0xCG5c8pVLmvg-maIA7BQ/edit?usp=sharing)\nLive (instructions)\nPlanning to Monitoring (formerly i2p)\nHighlights GitLab‚Äôs single platform for the complete DevOps lifecycle, from idea to production, through issues, planning, merge request, CI/CD, and monitoring.\nCI/CD Deep Dive\nProvides a more in-depth look at GitLab CI/CD pipelines.\nIntegration Demos\nDemonstrations which highlight integrations between GitLab and common tools such as Jira issues and Jenkins pipelines.\nConference Booth Setup\nWe‚Äôve started using iPad‚Äôs to run click-through demos at conferences, and also we now have a main screen video to loop that shows our key slides and product clips. You can find details about both of these on the\nconference booth setup page\n.\nLast modified January 7, 2025:\nMove marketing images to static folder (\na54c394b\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 319}
{"doc_id": "f73f0c8429ff34d9", "url": "https://handbook.gitlab.com/handbook/customer-success/csm", "title": "Customer Success Management Handbook | The GitLab Handbook", "text": "The Handbook\nCustomer Success\nCustomer Success Management Handbook\nThe Customer Success Management team at GitLab is a part of the Customer Success department, acting as trusted advisors to our customers and helping them realize value faster.\nCustomer Success Segments\nMission Statement\nAccelerate customer success by aligning passionate CSMs with customers to:\nDrive adoption aligned with business outcomes\nEnable customers in current and future GitLab use cases\nExpand ROI from GitLab\nWhat is a Customer Success Manager (CSM) at GitLab?\nCSMs are accountable for customer adoption, measurable outcomes, customer satisfaction, and creating true customer advocacy. We create successful customers by enabling, training, and nurturing them throughout their journey. The following areas incorporate the remit of a CSM:\nCustomer Adoption -\nEnsure the customer is working towards or adopting their desired use cases to maturity. Ensure the successful onboarding of all intended users. Identify areas of adoption risk and establish mitigating plays and programs.\nDelivering Positive Business Outcomes -\nEnsure customers are meeting and exceeding their desired business outcomes so that customers can quantify and support their investment.\nTrusted Advisor -\nEstablish ‚Äútrusted advisor‚Äù relationships with the management and technical teams on the customer side while working seamlessly with our account team to deliver a best-in-class customer experience.\nAccount Expansion -\nLead adoption expansion beyond the customer‚Äôs desired use cases and further customer return on investment (ROI). Partner with Sales to identify expansion opportunities and ensure we realize the expansion potential of a customer account.\nLeading Business Reviews -\nReview and celebrate progress towards, or achievement of, the customer‚Äôs desired business outcomes. Address challenges with a plan for mitigation, align on upcoming and future customer business objectives.\nHigh-Level Responsibilities of a CSM\nResponsibility\nContext\nHow We Measure\nDCI Roles\nSuccess Plans\nMutually agreed (Customer | GitLab) adoption plans that outline desired outcomes (e.g., improve cycle time), technical milestones required (e.g., migrate to GitLab, overcome constraints), timelines and DRIs.\nThese plans enable us to be proactive and ensure progress towards the customer's goals. As trusted advisors, we understand what drives value for our customers and help them achieve it.\nEvery customer must have an active success plan\nConsulted: AE, SA, Customer\nInformed: Leadership\nOnboarding\nThere are several onboarding steps in both the new and existing customer onboarding playbooks. The CSM's role is to ensure all of these topics and enablements have been covered and documented.\nAll customers are to be taken through the appropriate playbook (New, Existing Customer)\nConsulted: AE, SA, Customer\nInformed: Leadership\nCadence Calls\nThe cadence call is a proactive call. For this call to be proactive, the CSM's responsibility includes those listed in the linked cadence call page\nCall frequency:\nCustomer is engaged weekly or biweekly, monthly at a very minimum\nA CSM/CSE can expect to conduct a minimum number of calls as follows:\nCSMs: 5-7 calls per week\nCSEs: 15 calls per week\nConsulted: AE, Customer\nInformed: SA, Leadership\nAdoption & Expansion\nDriving platform adoption (use cases and licenses) in line with a customer's desired business outcomes is at the heart of the CSM role\nUnderstand what the customer is currently adopting and partner with the customer on enabling this use case/feature\nWhen an enablement or expansion playbook is open, the CSM actively drives the associated motion in the customer account\nAt any given time, a CSM will be actively driving expansion with half of their book (3-4 customers)\nConsulted: AE, Customer\nInformed: SA, Leadership\nExecutive Business Reviews\nWe hold the business review at month 6, giving enough time passed to celebrate milestones achieved and enough time remaining to get adoption back on track where needed.\nThe CSM is the DRI for scheduling, preparing for, presenting, and following up on the EBR, and partners with both the account team and the customer in the creation of the presentation.\n1 EBR per customer per year at a minimum\nConsulted: AE, Customer\nInformed: SA, Leadership\nRenewal\nIt is the job of the CSM to ask the 'soft'\nrenewal question\n3-4 months before the renewal\nThis conversation and the outcome of this conversation are tracked in Gainsight using the 'renewal call' meeting type (within the timeline entry)\nEvery customer regardless of segment or region\nDRI: CSM, AE, Renewals team\nConsulted: Customer\nInformed: Leadership\nManaging Risk\nA CSM actively manages risk in a customer account, quickly turning a customer to red when there is any potential risk of contraction or churn (even if this is unconfirmed)\nThe CSM is responsible for frequent communication to the account team about risk in their accounts and\ntriggering/leading the escalation process\nwhere needed\nRisk is actively managed for all customers\nConsulted: AE, Leadership\nInformed: Renewals team\nPlease reference this page for an overview of the\nCSM Rhythm of Business (daily to yearly)\nPlease reference this page for an overview of the areas your CSM will engage with you in:\nCSM Points of Engagement\nCustomer Journey\nJourney Stage\nActivities\nPre-Sales & Alignment\nValue Stream Discovery\nSales to CS Handoff\nIdentify Personas\nOnboard\nCSM Kickoff & Intro\nEstablish Cadence Calls\nCreate Success Plan\nEnable\nUse Case Enablement Workshops\nMeasure Primary Use Case Adoption\nExpand\nExpansion Discovery\nOptimize & Renew\nExecutive Business Review\nOngoing Risk Review\nRenewal Discussions\nFY25 Vision & Strategy -3 Pillars\nVision & Strategy Deck\n(Internal - GitLab Only)\nSuccess At Scale\nUse Case Adoption\nSuccess Plan Services\nBig Rock (Annual Strategy) Archive\nHandbook Directory\nCSM Team Metrics Overview (VIDEO)\nChangelog\nCSM Process Changelog\nGainsight Changelog\nCSM Learning & Development\nCSM Objectives and Key Results (OKRs)\nOverview of available resources, training plans & career paths\nCSM Aspiring Leaders Program\nCSM Activities\nCSM Onboarding\nCSM Rhythm of Business\nUsing Gainsight\nCSM Quaterly Business Reviews\nCSM Responsibilities and Services\nCSM and Product Interaction\nCSM and Professional Services Interaction\nCSM and Support Interaction\nCSM and Partner Interaction\nEscalation Process\nInfrastructure Escalation & Incident Process\nCSM-to-CSM Account Handoff\nCSM Roleplay Scenarios\nCSM Retrospectives\nCSM PTO Guidelines\nCSM READMEs\n(Optional)\nDriving Platform Adoption\nLanding Zones\nCI Landing Zone\nCustomer Metrics\nSample Questions & Techniques for Getting to Good Customer Metrics\nPlatform Metrics\nCustomer Use Case Adoption\nHow To: DevSecOps Adoption Tracking in Gainsight\nUse Case Adoption Metrics\nThe Customer Value Received with Service Ping\nProduct Usage Data - Definitive Guide to Product Usage Data in Gainsight\nMetrics Based Product Usage Playbooks\nOther Lifecycle Management Activities\nTransitioning a Customer from Pre-Sales to Post-Sales\nAccount Engagement and Prioritization\nNon-Engaged Customer Strategies\nAccount Onboarding\nSuccess Plans\nCadence Calls\nManaging Executive Relationships\nExecutive Business Reviews (EBRs)\nCustomer Renewal Tracking\nCustomer Health Assessment and Risk Triage\nRisk Types, Discovery & Mitigation\nWorkshops and/or Lunch-and-Learns\nDigital Customer Programs\nDigital Customer Programs Handbook Page\nAvailable Customer Programs\nCSM Managers\nCSM Manager Processes and CSM Leadership Team\nCSM Manager QBR Template\n(GitLab Internal)\nCSM Promotion Template\n(GitLab Internal)\nCSM Tools\nThe following articulates where collaboration and customer management is owned:\nCustomer Collaboration Projects\n: Shared project between GitLab team members and customer. Used to prioritize/plan work with customer.\nGoogle Drive\n: Internal. Used to capture call notes and other customer related documents.\nChorus\n: Internal. Used to record Zoom calls.\nUsing Calendly with Chorus\n: Instructions on Calendly set up with Chorus.\nGainsight\n: Internal. Used to track customer health score, logging\ncustomer activity\n(i.e. calls, emails, meetings)\nIssue Prioritization Dashboard\n: Internal. Used to track customer requested issues.\nEducation and Enablement\nIn Customer Success Management, it is important to be continuously learning more about our product and related industry topics. The\neducation and enablement handbook page\nprovides a dashboard of aggregated resources that we encourage you to use to get up to speed.\nSFDC useful reports\nTracking opportunities for your assigned Strategic Account Executive (SAEs)\nTo ensure that opportunities are listed with the correct Order Type,\nthis Salesforce report\nshows you all of the opportunities that have closed, or are soon to close, with your SAEs. Tracking Order Type is important since CSM team quota and compensation depend on this. Please reference the latest\nSales Compensation Plan\ninformation to know what is counted.\nNext steps for you:\nCustomize\nthis SFDC report\nwhere ‚ÄúAccount Owner = your SAEs‚Äù; ‚ÄúCSM = You‚Äù\nSave report\nSubscribe to report when ‚ÄúRecord Count Greater Than 0‚Äù and Frequency = Weekly (You‚Äôll get a weekly email as a reminder to look at the report)\nIf you find an opp that is tagged incorrectly, chatter (@Sales-Support) in the opportunity and let them know there is a mistake (\nexample\n)\nRelated pages\nDogfooding in Customer Success\nCustomer Success & Market Segmentation\nResponsibility Matrix and Transitions\nCustomer Success‚Äô FAQ\nUsing Salesforce within Customer Success\nCustomer Success Vision\nGitLab Positioning\nProduct Stages and the POCs for each\nHow to Provide Feedback to Product\nSales handbook\nSupport handbook\nWorkshops and Lunch-and-Learn slides\nResearching Customer Questions\nAccount Engagement\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nManaging the Customer ‚Ä¶\nAccount Handoff CSM-to-CSM Checklist\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nCSMs will need to ‚Ä¶\nAdoption Landing Zones\nCadence Calls\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nOverview One of the ‚Ä¶\nCSM and Support Interaction\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nObjective Define the ‚Ä¶\nCSM Aspiring Leaders Program\nA guide to help CSMs level up their skills to be ready for leadership\nCSM Development\nAvailable development paths and resources for Customer Success Managers at GitLab.\nCSM Executive Relationships\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nAt GitLab, successful ‚Ä¶\nCSM FY23 Big Rocks\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nFY23 Goals (Big Rocks) ‚Ä¶\nCSM Internship Program\nThis page describes best practices for an internship for learning with the CSM team.\nInternships are ‚Ä¶\nCSM Issue Tracking and OKRs\nField guide for CSMs on team OKRs\nCSM Manager Handbook\nField guide for CSM Managers on standard and recurring practices.\nCSM November 2021 Engagement Survey\nResults and action on the annual GitLab Engagement Survey for Customer Success Managers.\nCSM Onboarding\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nOnboarding for Customer ‚Ä¶\nCSM Paid Time Off\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nAs part of GitLab‚Äôs ‚Ä¶\nCSM Quaterly Business Reviews (QBRs)\nOverview of CSM's Quarterly Business Review process\nCSM Responsibilities and Services\nThere are various services a Customer Success Manager will provide to ensure that customers get the best value possible out of their relationship with GitLab.\nCSM Rhythm of Business\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nCSM Rhythm of Business A ‚Ä¶\nCSM Strategies for Mitigating Risk In Customer Accounts\nCustomer Health Assessment and Management\nThis page covers the factors to consider for customer health, guidelines for selecting the appropriate rating, communication guidelines, CSM responsibilities and instructions for the account triage issue creation.\nCustomer Onboarding\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nCustomer Onboarding is the ‚Ä¶\nCustomer Renewal Tracking\nThe Renewals team at GitLab is a part of the Customer Success department.\nCustomer Success Escalations Process\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nBackground Escalations¬†can ‚Ä¶\nCustomer Success READMEs\nLearn about the Customer Success teammates\nCustomer Success Teams\nView the Customer Success Handbook homepage for additional related handbook pages.\nOverview The ‚Ä¶\nDevSecOps Adoption Tracking in Gainsight\nCSM guidance on how to track and log progress on DevSecOps usecase adoption\nDigital Customer Programs\nThe following Digital Programs constitute ‚ÄúCustomer Success Services‚Äù as included with ‚Ä¶\nEngaging with Partners\nProcess for Engaging with Partners in CSM-Assigned Customer Accounts CSM-Assigned Customer Accounts ‚Ä¶\nEngaging with Professional Services\nGuidelines for CSMs on how best to engage with professional services.\nExecutive Business Reviews (EBRs)\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nOverview An Executive ‚Ä¶\nFY24 Big Rocks\nCSME (Customer Success Management and Engineering) View the CSM Handbook homepage for additional ‚Ä¶\nFY25 CS Retrospective Program\nRetrospectives Program Objective The objective of this retrospective program is to facilitate a ‚Ä¶\nLeadership Recurring Check-Ins\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nWhat is a Leadership ‚Ä¶\nResearching Customer Questions\nStrategies on how to research customer questions to find answers.\nRoleplay Scenarios\nThis handbook page collects links to all roleplaying scenarios, for CSMs to utilize to improve their conversations and enable them to be audible-ready.\nService Ping FAQ\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nWhat is Service Ping ‚Ä¶\nStage Adoption Metrics\nView the CSM Handbook homepage for additional CSM-related handbook pages.\n2023-06-15 Note The ‚Ä¶\nSuccess Plans\nA success plan is a roadmap that connects a customer's desired business outcomes to GitLab solutions. It is a living document, developed by the CSM.\nUsing Calendly as a CSM\nBest practices and setup guide for Customer Success Managers using Calendly to manage customer requests for meetings.\nUsing Gainsight as a CSM\nThe key aspects of how Customer Success Managers use Gainsight to drive success for customers.\nUsing Issue Prioritization Dashboard as a CSM\nThe key aspects of how Customer Success Managers use Sisense Issue Prioritization Dashboard to drive success for customers.\nUsing the Customer Collaboration Project as a CSM\nBest practices and setup guide for Customer Success Managers using Customer Collaboration Projects to manage customer data, requests, and collaborations.\nWorkshops and Enablement Sessions\nView the CSM Handbook homepage for additional CSM-related handbook pages.\nOverview The CSM ‚Ä¶\nLast modified March 7, 2025:\nFix broken links (\nb1d67d8e\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 2229}
{"doc_id": "fe1dfb6309816e1e", "url": "https://handbook.gitlab.com/handbook/engineering/careers/matrix/quality/software-engineer-in-test/associate", "title": "Quality Department SET Career Framework: Associate | The GitLab Handbook", "text": "The Handbook\nEngineering\nEngineering Career Development\nEngineering Career Framework\nQuality Department Career Framework\nSoftware Engineer in Test Career Framework\nQuality Department SET Career Framework: Associate\nThese are the expected competencies of an Associate Software Engineer in Test (SET) at GitLab.\nQuality Department Competencies: Associate\nEngineering Framework\nQuality Framework\nAssociates at GitLab are expected to exhibit the following competencies:\nAssociate Leadership Competencies\nAssociate Technical Competencies\nAssociate Values Alignment\nAssociate Leadership Competencies\nEngineering\nAssumes goodwill, seeks support and clarification of requirements.\nCapable of delivering work with clear requirements.\nConstructively raises concerns.\nCommunicates in a clear, timely, and effective manner.\nCapable of adapting their messaging to technical audience.\nDevelops understanding of the organization structure and processes.\nAssociate Technical Competencies\nQuality\nTest Coverage & Test Stability\nComplete quad planning tasks assigned by senior team members.\nAdd test automation for existing features in collaboration with other Software Engineers in test.\nUnquarantine stale tests.\nRaise counterpart awareness to test failures due to bugs in code.\nTest Tooling\nSupport production and non-production environments by resolving test stability problems of moderate complexicity.\nContribute to new test framework tooling and provide feedback to new approaches proposed by the team.\nCollaborate on improvements to deploy processes, deployment scripts, and build pipelines with other Software Engineers in Test.\nTest Environments\nWillingness to grow your knowledge of GitLab provisioning and setup tools. Examples include Omnibus, the Orchestrator, Terraform, Ansible, Kubernetes, Helm Charts, GCP, or AWS.\nTask Management & OKRs\nSuccessfully complete individual tasks within a KR in OKRs.\nWork with manager and senior team members to deliver moderate solutions in a timely manner.\nKnowledge Sharing\nClearly document process and knowledge in collaboration with other team members.\nAssociate Values Alignment\nGitLab\nAdhere to the\nCollaboration Competencies\nfor this job grade.\nAdhere to the\nResults Competencies\nfor this job grade.\nAdhere to the\nEfficiency Competencies\nfor this job grade.\nAdhere to the\nDiversity, Inclusion & Belonging Competencies\nfor this job grade.\nAdhere to the\nIteration Competencies\nfor this job grade.\nAdhere to the\nTransparency Competencies\nfor this job grade.\nLast modified June 27, 2024:\nFix various vale errors (\n46417d02\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 354}
{"doc_id": "257dd6f9e73d08d6", "url": "https://handbook.gitlab.com/handbook/tools-and-tips/mac", "title": "macOS tools and tips | The GitLab Handbook", "text": "The Handbook\nTools and tips\nmacOS tools and tips\nThis page lists various tips and tools for macOS.\nmacOS tips\nHere are some useful tips if you are new to macOS.\nEven if you are not new, these\nkeyboard shortcuts\nmay come in handy.\nIf you are switching from Windows to macOS, these\ntips\nmay be useful.\nTaking screenshots and videos\nOn a macOS, there are a few screen shot key shortcuts that can be very helpful:\ncommand + shift + 3\n- takes a screen shot of your entire screen(s - it will create an image for each screen you have)\ncommand + shift + 4\n- allows you to select an area on the screen to take a screen shot (it will create one image of your selected area)\ncommand + shift + 5\n- brings up a tool that allows you to do all of these things as well as create a video (with audio) of all or part of your screen.\nIn the case of\ncommand + shift + 3\nand\ncommand + shift + 4\n, if you also hold your control key (so,\ncommand + shift + control + 3\n), your screen shot will be in your clipboard. Alternatively you can quickly select the screenshot preview in the bottom right corner and press\ncommand + c\n.\nYou can paste the screenshot from your clipboard into a lot of applications with\ncommand + v\n. GitLab supports pasting the screenshot into issue descriptions, comments and the Web IDE.\nIf you have a screen shot in your clipboard, you can open the\nPreview\nand then create an image from the clipboard using the\nFile -> New from clipboard\n.\nFor screen recordings, you can use Quicktime Player to capture an area or the full screen.\nOpen the application and, under the\nFile\nmenu, select\nNew Screen Recording\n, or press\ncommand + control + n\n.\nScreenshot productivity tips\nTo automatically compress your screenshots and move them to a designated directory, so your\nDesktop\ndirectory won‚Äôt get cluttered with screenshot files, check this GitLab Unfiltered blog post:\nOne simple trick to make your screenshots 80% smaller\n.\nDisabling macOS notification center\nDuring a presentation or screen share, you might want to disable your notifications on macOS to prevent distractions or possible embarrassment.\nThe Notification Center can be quickly disabled by Option-Clicking the menu bar icon in the top right of your screen.\nThis disables notifications until the next day.\nOption-Click again to re-enable immediately.\nAlternatively, click on the Notification Center icon, then scroll\nup\nto reveal the ‚ÄúDo Not Disturb‚Äù toggle.\nIf your laptop is a MacBook with a Touch Bar, note that you can assign a handy ‚ÄúDo Not Disturb‚Äù button on your Control Strip.\nIn System Preferences, navigate to Keyboard settings and click ‚ÄúCustomize Control Strip‚Ä¶‚Äù to add this.\nLocking your screen\nOn your macOS menu bar\nClick on the Apple logo Ô£ø menu\nClick ‚ÄúLock Screen‚Äù\nAlternatively, you can use the keyboard shortcut\n(\nctrl+cmd+Q\n) or press Touch ID, if it‚Äôs available on your Mac or Magic Keyboard.\nOn your macOS Touch Bar\nOpen\nSystem Preferences > Keyboard\nClick\nCustomize Control Strip‚Ä¶\nDrag the\nScreen Lock\nicon to the Touch Bar\nDone!\nDocker Desktop\nDocker Desktop is a licensed tool and approved for usage and can be accessed via instructions in the\nTech Stack\n.\nTo request access to Docker, please follow these steps:\nCreate an account on\nhub.docker.com\nusing your\n@gitlab.com\nemail. It is not possible to gain access with a non-company email.\nLog an\nAccess Request\nwith the Access_Change_Request template, detailing why alternatives are not an option (as noted above).\nOnce your manager approves the request, assign to the System Provisioner listed in the [Tech Stack] for this system.\nOnce your access has been provisioned, you will receive an email notification that you have been added to a specific\ndockerdesktop\nteam. Following that, you can\ninstall Docker desktop\n, and login with the registered account.\nThe number of licenses is limited, so provisioning might take time, or might not be temporarily possible to gain access to the team.\nIf at some point in the future you do not want to use the product anymore, please\nfile an Access Change request\n, assign to provisioner listed in the\nTech Stack\nso that we can assign the license to someone else.\nThe following open source alternatives appear to be maintained (as of 2025-02-28):\nRancher Desktop\nColima\nUsage of Java\nSome applications used on MacOS may require Java. The last open-source version of Oracle Java that was released was in January of 2019. All new versions since then require a paid/licensed scubscription. Therefore GitLab no longer supports Oracle Java, and requires all team-members to use an open-source alternative like OpenJDK. Oracle periodicaly audits all downloads of Oracle Java and actively pursues companies that are out of compliance. The IT department therefore enforces a policy that will remove all instances of Oracle Java that are found on team-members machines.\nTo ensure you are using the correct version, use the\njava -version\ncommand.\nIf OpenJDK is installed, the response will look similar to this:\n$  java -version\nopenjdk version\n\"18.0.1\"\n2022-04-19\nOpenJDK Runtime Environment Zulu18.30+11-CA\n(\nbuild 18.0.1+10\n)\nOpenJDK 64-Bit Server VM Zulu18.30+11-CA\n(\nbuild 18.0.1+10, mixed mode, sharing\n)\nIf Oracle Java is installed, the response will look similar to this:\n$ java -version\njava version\n\"16.0.1\"\n2021-04-20\nJava\n(\n)\nSE Runtime Environment\n(\nbuild 16.0.1+9-24\n)\nJava Hotspot\n(\n)\n64-Bit Server VM\n(\nbuild 16.0.1+9-24, mixed mode, sharing\n)\nMost systems will be running either the OpenJDK version or Java will not be installed. If Java is not installed and you wish to install OpenJDK, open the\nSelf Service\napp located in your Applications folder and double-click on the app called Java 18 - Open Source.\nIf you are running the Oracle Java version, you will be automatically notified by the IT Deptartment with a pop-up that looks like this\nand it will be removed from your machine.\nLast modified February 28, 2025:\nHandbook updates removing outdated and potentially insecure advice and tools. (\n2afa17eb\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1035}
{"doc_id": "02457bc096d30994", "url": "https://handbook.gitlab.com/handbook/finance/tax", "title": "The GitLab Tax Team | The GitLab Handbook", "text": "The Handbook\nFinance\nThe GitLab Tax Team\nThe tax department is responsible for GitLab‚Äôs overall tax strategy including all components of tax compliance, tax planning and accounting for income taxes. In addition, the tax department manages GitLab‚Äôs statutory requirements including statutory audits, filing of entity-level financial information, transfer pricing, and ensuring intercompany transactions are recorded appropriately.\nContacting the Tax Team\nThe Tax Team is responsible for GitLab‚Äôs tax compliance (see here for payroll taxes), tax planning and accounting for business taxes, including income taxes and indirect taxes such as sales taxes and value-added taxes (VAT). Taxation differs between countries, and taxation in one country is not always complementary to taxation in another country, resulting in possible double-taxation on the same GitLab revenue. It is the fundamental goal of the Tax Team to minimize double taxation, to optimize our global effective tax rate, and to timely apply resources to various company needs. Those needs range from routine compliance and tax audits to strategically positioning the company for its next phase of growth.\nOrganization\nThe Tax team is part of the Finance function and headed by the VP Tax. The VP Tax reports to the Chief Financial Officer. The Tax team is structured to address (a) U.S. domestic taxes and global accounting for business taxes and (b) international tax planning and compliance, including US international tax planning.\nThis page has been moved to the internal handbook website due to safety/privacy:\nhttps://internal.gitlab.com/handbook/finance/tax/\nFrequently Asked Questions - Tax ID for non-US customers\nWhat is a Tax ID?\nAn Indirect Tax Identification Number (‚ÄúIndirect Tax ID‚Äù or ‚ÄúTax ID‚Äù) is a unique identification number assigned by tax authorities to businesses registered for Value Added Tax (VAT), Goods and Services Tax (GST), or similar indirect taxes. This number identifies your business as a registered taxpayer eligible to charge and collect indirect taxes.\nWhy does GitLab need my Indirect Tax ID?\nGitLab is required to comply with local tax regulations in various jurisdictions. When you provide a valid Indirect Tax ID:\nGitLab may not need to charge VAT/GST on your invoices (reverse charge mechanism)\nIt helps ensure proper tax compliance for both parties\nIt may reduce your overall tax burden on GitLab services\nWithout a valid Indirect Tax ID, GitLab may be required to charge applicable VAT/GST rates based on your location.\nWhat if my business is not registered for VAT/GST?\nIf your business is not registered for indirect taxes (due to size thresholds or other reasons), you may not have an Indirect Tax ID. In such cases, GitLab will charge the applicable VAT/GST rate according to local regulations.\nSamples of Indirect Tax ID Formats by Country\nImportant Disclaimer:\nThe formats listed below are samples of commonly used indirect tax ID formats and are provided solely as a reference to assist customers. GitLab does not guarantee the accuracy or completeness of this information and assumes no responsibility to update or revise this information.\nEurope:\nAustria - VAT numbers start with ‚ÄúATU‚Äù followed by 8 digits (e.g., ATU12345678)\nBelgium - VAT numbers start with ‚ÄúBE‚Äù followed by 10 digits (e.g., BE0123456789)\nBulgaria - VAT numbers start with ‚ÄúBG‚Äù followed by 9 or 10 digits (e.g., BG123456789)\nCroatia - VAT numbers start with ‚ÄúHR‚Äù followed by 11 digits (e.g., HR12345678901)\nCyprus - VAT numbers start with ‚ÄúCY‚Äù followed by 9 characters (e.g., CY12345678L)\nCzech Republic - VAT numbers start with ‚ÄúCZ‚Äù followed by 8, 9, or 10 digits (e.g., CZ12345678)\nDenmark - VAT numbers start with ‚ÄúDK‚Äù followed by 8 digits (e.g., DK12345678)\nEstonia - VAT numbers start with ‚ÄúEE‚Äù followed by 9 digits (e.g., EE123456789)\nFinland - VAT numbers start with ‚ÄúFI‚Äù followed by 8 digits (e.g., FI12345678)\nFrance - VAT numbers start with ‚ÄúFR‚Äù followed by 11 characters (e.g., FR12345678901)\nGermany - VAT numbers start with ‚ÄúDE‚Äù followed by 9 digits (e.g., DE123456789)\nGreece - VAT numbers start with ‚ÄúEL‚Äù followed by 9 digits (e.g., EL123456789)\nHungary - VAT numbers start with ‚ÄúHU‚Äù followed by 8 digits (e.g., HU12345678)\nIceland - VAT numbers start with ‚ÄúIS‚Äù followed by 5 or 6 digits (e.g., IS12345)\nIreland - VAT numbers start with ‚ÄúIE‚Äù followed by 8 or 9 characters (e.g., IE1234567L)\nItaly - VAT numbers start with ‚ÄúIT‚Äù followed by 11 digits (e.g., IT12345678901)\nLatvia - VAT numbers start with ‚ÄúLV‚Äù followed by 11 digits (e.g., LV12345678901)\nLithuania - VAT numbers start with ‚ÄúLT‚Äù followed by 9 or 12 digits (e.g., LT123456789)\nLuxembourg - VAT numbers start with ‚ÄúLU‚Äù followed by 8 digits (e.g., LU12345678)\nMalta - VAT numbers start with ‚ÄúMT‚Äù followed by 8 digits (e.g., MT12345678)\nNetherlands - VAT numbers start with ‚ÄúNL‚Äù followed by 9 digits and ‚ÄúB‚Äù and 2 digits (e.g., NL123456789B01)\nNorway - VAT numbers consist of 9 digits followed by ‚ÄúMVA‚Äù (e.g., 123456789MVA)\nPoland - VAT numbers start with ‚ÄúPL‚Äù followed by 10 digits (e.g., PL1234567890)\nPortugal - VAT numbers start with ‚ÄúPT‚Äù followed by 9 digits (e.g., PT123456789)\nRomania - VAT numbers start with ‚ÄúRO‚Äù followed by 2-10 digits (e.g., RO12345678)\nSerbia - VAT numbers consist of 9 digits (e.g., 123456789)\nSlovakia - VAT numbers start with ‚ÄúSK‚Äù followed by 10 digits (e.g., SK1234567890)\nSlovenia - VAT numbers start with ‚ÄúSI‚Äù followed by 8 digits (e.g., SI12345678)\nSpain - VAT numbers start with ‚ÄúES‚Äù followed by 9 characters (e.g., ES123456789)\nSweden - VAT numbers start with ‚ÄúSE‚Äù followed by 12 digits (e.g., SE123456789012)\nUnited Kingdom - VAT numbers consist of 9 digits, sometimes with GB prefix (e.g., GB123456789 or 123456789)\nAsia-Pacific:\nAustralia - Australian Business Numbers (ABN) consist of 11 digits (e.g., 12345678901)\nIndia - GST numbers consist of 15 characters starting with state code (e.g., 07AABCU9603R1ZX)\nNew Zealand - GST numbers consist of 8 or 9 digits (e.g., 123456789)\nSingapore - GST registration numbers consist of 9 digits followed by a letter (e.g., 123456789A)\nSouth Korea - Business registration numbers consist of 10 digits (e.g., 123-45-67890)\nTaiwan - VAT numbers consist of 8 digits (e.g., 12345678)\nHong Kong - Business Registration numbers consist of 8 digits (e.g., 12345678)\nJapan - Registration numbers consist of 13 digits starting with ‚ÄúT‚Äù (e.g., T1234567890123)\nMalaysia - GST numbers consist of 12 digits (e.g., 123456789012)\nThailand - VAT registration numbers consist of 13 digits (e.g., 1234567890123)\nPhilippines - VAT registration numbers vary in format, typically include TIN (Tax Identification Number)\nIndonesia - VAT registration numbers (NPWP) consist of 15 digits (e.g., 12.345.678.9-012.345)\nChina - VAT numbers vary by region, typically 15-20 digits\nMongolia - VAT numbers typically consist of 7-8 digits\nSri Lanka - VAT registration numbers consist of 9 digits followed by ‚ÄúV‚Äù (e.g., 123456789V)\nAmericas:\nBrazil - CNPJ numbers consist of 14 digits in format XX.XXX.XXX/XXXX-XX (e.g., 12.345.678/0001-90)\nCanada - GST/HST numbers consist of 9 digits followed by ‚ÄúRT0001‚Äù (e.g., 123456789RT0001)\nMexico - RFC numbers consist of 12-13 characters (e.g., ABC123456789)\nArgentina - CUIT numbers consist of 11 digits in format XX-XXXXXXXX-X (e.g., 20-12345678-9)\nChile - RUT numbers consist of 8-9 digits followed by a check digit (e.g., 12345678-9)\nColombia - NIT numbers consist of 9-10 digits (e.g., 123456789)\nEcuador - RUC numbers consist of 13 digits (e.g., 1234567890001)\nPeru - RUC numbers consist of 11 digits (e.g., 12345678901)\nUruguay - RUC numbers consist of 12 digits (e.g., 123456789012)\nJamaica - TRN (Taxpayer Registration Number) consists of 9 digits\nCosta Rica - Tax ID numbers vary in format\nPanama - RUC numbers typically consist of 8-11 digits\nGuatemala - NIT numbers consist of 8 digits followed by ‚ÄúK‚Äù (e.g., 12345678K)\nDominican Republic - RNC numbers consist of 9 digits (e.g., 123456789)\nTrinidad and Tobago - VAT numbers consist of digits in specific format\nBolivia - NIT numbers consist of 8-12 digits\nParaguay - RUC numbers consist of 8 digits followed by a check digit\nVenezuela - RIF numbers start with a letter followed by 8-9 digits (e.g., J123456789)\nMiddle East & Africa:\nUnited Arab Emirates - TRN (Tax Registration Number) consists of 15 digits\nSaudi Arabia - VAT numbers consist of 15 digits\nQatar - Tax registration numbers consist of 11 digits\nBahrain - VAT numbers consist of 9 digits\nKuwait - Tax registration numbers vary in format\nOman - Tax registration numbers consist of 8 digits\nIsrael - VAT numbers consist of 9 digits (e.g., 123456789)\nTurkey - VAT numbers consist of 10 digits (e.g., 1234567890)\nSouth Africa - VAT numbers consist of 10 digits starting with ‚Äú4‚Äù (e.g., 4123456789)\nEgypt - Tax registration numbers consist of 9 digits\nNigeria - VAT numbers consist of 8 digits followed by ‚Äú-0001‚Äù (e.g., 12345678-0001)\nGhana - VAT numbers consist of 12 characters starting with ‚ÄúC‚Äù or ‚ÄúP‚Äù\nMorocco - Tax identification numbers vary in format\nTunisia - Tax numbers consist of 7 digits followed by 3 letters (e.g., 1234567ABC)\nAlgeria - NIF numbers consist of 15 digits\nKenya - PIN numbers consist of 11 characters starting with ‚ÄúP‚Äù\nTanzania - TIN numbers consist of 9 digits\nUganda - TIN numbers consist of 10 digits\nZimbabwe - VAT numbers consist of 8 digits\nMauritius - VAT numbers consist of 8 digits\nRwanda - TIN numbers consist of 9 digits\nEthiopia - TIN numbers consist of 10 digits\nBotswana - VAT numbers consist of 8 digits\nZambia - VAT numbers consist of 10 digits\nSenegal - Tax numbers vary in format\nOther Regions:\nBermuda - No VAT system\nCayman Islands - No VAT system\nBritish Virgin Islands - No VAT system\nGibraltar - VAT numbers follow UK format\nJersey - GST numbers consist of 6 digits\nGuernsey - VAT numbers consist of 6 digits\nIsle of Man - VAT numbers follow UK format\nMonaco - VAT numbers follow French format for some purposes\nAndorra - VAT numbers consist of 8 characters starting with letters\nFaroe Islands - VAT numbers follow Danish format\nImportant Notes\nFormats may vary within countries based on business type or registration date\nSome countries have multiple tax identification systems\nAlways verify the exact format requirements with your local tax authority\nSome jurisdictions may not have VAT/GST systems in place\nNeed Help?\nIf you‚Äôre unsure about your Indirect Tax ID format or have questions about tax registration in your country, we recommend consulting with:\nYour local tax authority\nA qualified tax advisor\nYour company‚Äôs Tax or Accounting department\ntax@gitlab.com\n.\nLast modified June 19, 2025:\nFixing Format in the Tax Page (\n1bca285a\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 1718}
{"doc_id": "39465cbc6691c4a8", "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/mrnci", "title": "Market Strategy and Insights | The GitLab Handbook", "text": "The Handbook\nMarketing\nBrand and Product Marketing\nProduct and Solution Marketing\nMarket Strategy and Insights\nMarket Strategy and Insights (MSI) at GitLab\nWho We Are\nA Team of Experienced Customer Reference, Market Insights, and Industry Analyst Relations Professionals\nWhat We Do\nGather & Build - Information & Relationships\nDistill - Impactful Insights\nActivate - Turning Insights Into Action\nHow We Do It\nCustomer Reference Program\nCustomer Advisory Board\nCustomer Case Studies\nPeer Review Site Management\n(Gartner Peer Insights, G2, Trust Radius, etc.)\nCustomer Insight Portraits\nIndustry Analyst Relations (IAR)\nInteractions (\nBriefings\n,\nInquiry\n, Strategic Advisory)\nPublications\n(Comparative Research, Market Landscape, Best Practices, Thought Leadership)\nView the\nAnalyst Relations Issue Board\nand\nAR-Cats Issue Board\nto see what‚Äôs currently in progress.\nWhy We Do It\nSimplify Selling\nHelp Build Better Products\nImprove the Customer Experience and Value Realized\nWhich Market Strategy and Insights team member should I contact?\nListed below are areas of responsibility within the Market Research and Customer Insight team:\nRyan\n, Staff Analyst Relations Manager\nFiona\n, Senior Reference Program Manager; Regional Lead: EMEA and APAC; Program Lead: Customer Advisory Board, Customer Speaking Requests, Industry Analyst Relations Requests\nTraci\n, Principal Market Insights Manager\nLaura\n, Director, Market Strategy and Insights\nLast modified April 1, 2025:\nFix broken links (\n1418d490\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 223}
{"doc_id": "9be12d1842da01ec", "url": "https://handbook.gitlab.com/handbook/entity/gmbh-germany", "title": "GitLab GmbH (Germany) information & benefits | The GitLab Handbook", "text": "The Handbook\nEntity-Specific Information\nGitLab GmbH (Germany) information & benefits\nGitLab GmbH (Germany) benefits and information specific to Germany-based team members.\nThis is a Secure Document\nPer the stated\nRoles & Responsibilities\n, changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged.\nScope\nThese standards apply to all GitLab team members hired through GitLab GmbH, which has a registered address at Elsenheimerstra√üe 7, M√ºnchen 80687, Germany.\nRoles & Responsibilities\nRole\nResponsibility\nGitLab Team Members\nResponsible for understanding and following the requirements in this document\nPeople, Legal, Payroll, Total Rewards, Absence\nResponsible for implementing and executing this document\nPeople, Legal, Payroll, Total Rewards, Absence (Code owners)\nResponsible for approving changes to this document\nWorks council\nGitLab GmbH has a works council (Betriebsrat). The works council serves the primary functions of balancing the fundamental rights of employer and employees, and ensuring participation and co-determination, as works councils must be consulted about specific issues and have the right to make proposals to management.\nFor any questions, please contact\nDE-workscouncil@gitlab.com\n. Please refer to our\ninternal handbook\nfor more information on how the works council operates.\nGermany-Specific Team Member Benefits\nCurrently, GitLab provides the below additional benefits, in addition to mandatory state requirements.\nGeneral GitLab benefits\nstill apply. As part of the\nguiding principles\n, we will continuously review our benefits design and offerings available through GitLab in Germany.\nJoin the\n#gitlab-germany channel\nin Slack for questions.\nEye Exam and Glasses Reimbursement\nUnder The Occupational Health and Saftey Act, employers must provide computer glasses when medically necessary to perform the job. If an eye exam determines that a team member needs glasses solely and exclusively for VDU (visual display unit i.e. computer screen) use, GitLab will reimburse towards the cost of a basic pair of frames and lenses (i.e. not designer frames) up to 150 Euro.\nThe team member needs to provide documentation (a prescription) from the optician that confirms if the lenses are specifically required for reading a display screen only and not required for general day to day use.\nPlease submit your prescription to Total Rewards for approval. Once approved, please send your receipts to Navan for reimbursement.\nGerman Supplemental Pension Plans\nGitLab has introduced two supplemental Pension Plans for our Germany Team Members.\nGitLab offers a\nSupport fund\n(\neffective 2023-04\n, GitLab contributions only) and a\nDirect Insurance Pension Plan\n(\neffective 2023-05\n, Team Member contributions with GitLab matching up to 1% via\nAllianz\n). Please see the below ‚ÄúPlan Design‚Äù section for additional plan details.\nFor an overview of the Pension Plan please see the\nGitLab German Pension Plan Deck\n.\nThe plans are administered by our German Brokers at WTW.  Please see below and the attached\nflier\nfor additional details on the plan.\nTeam members can also email this form directly to WTW  to obtain further support for the insurance tariff for salary sacrifice or request a consultation appointment with a WTW expert if needed:\nDagmar Hirner\nT +49 611 794 4462\nmeinebAV@wtwco.com\nEffective 2023-04 Support Fund Enrollment: Current full-time eligible Team Members will automatically be enrolled into the Support Fund as of 2023-04. Eligible full-time New Team Members will automatically be enrolled in the Support Fund, with their effective date being the following month their start date\n(new team members in 2023-05, will be enrolled starting in 2023-06). If for any reason a Team Member wishes to opt out of the Support Fund, please notify\nTotal-Rewards@gitlab.com\n.\nStarting 2023-05 Direct Insurance Enrollment: Team Members who wish to enroll in the Direct Insurance Plan starting on 2023-05 or on a future month will need to\n:\n(1)\nComplete the\nDirect Insurance agreement\nwith your desired contribution\n(2)\nSend it to\nTotal-Rewards@gitlab.com\nand\nmeinebAV@wtwco.com\nbefore the 5th of the month\n. Following receipt, the Benefits Team will countersign and send to WTW to confirm your enrollment.\nPlease note: you can choose to update your elections or enroll in the Direct Insurance Plan at any time throughout the year.\nIf a team member notifies Total Rewards before the 5th of the month that they want to join or change their Direct Insurance Plan election - their enrollment/changes will be reflected on the 1st of the current month. If they notify TR after the 5th of the month, enrollment/changes will be reflected the 1st of the following month.\nIf there are any questions regarding the Direct Insurance plan or specific inquiries on your enrollment - please reach out our Pension Plan designated expert,\nmeinebAV@wtwco.com\n, who will be able to further support via email or schedule a call/meeting/consultation, cc‚Äôing\ntotal-rewards@gitlab.com\nTeam members can also email this\nform\ndirectly to WTW (\nmeinebAV@wtwco.com\n) to obtain a quote for the salary sacrifice on the direct insurance plan.\nTeam Members should expect a contract (for their reference/records) from Allianz via post mail within 8 weeks of enrollment. If a team member does not receive a contract within the first 2 months of enrollment, please contact\nmeinebAV@wtwco.com\n.\nPlan Design\nDirect Insurance\n: GitLab will match up to 1% of pensionable income, max 1% of SSCC towards team member‚Äôs salary sacrifice contributions.\nEmployee contributions: The team member can elect an amount up to ~7% of the SCC maximum\nEmployer :Contributions GitLab Employer contributions will match only 1%.\nPlease note: team members must elect at least 1% to receive the Employer Match.\nSupport Fund\n: GitLab will also contribute 1% of pensionable income up to SSCC, plus 6% of pensionable salary above the SSCC.\nEmployer contributions only\nFixed Adjustments\n: Salary is based on Annual Base salary; it is a fixed Salary and does not change throughout the year. Contributions are paid out monthly, but calculations are based on annual salary.\nNew Joiners to the plan will always be automatically enrolled effective the following month.\nSupport Fund Enrollment\nSupport Fund Enrollment: Current Team Members will automatically be enrolled into the Support Fund as of April 2023. New Team Members will automatically be enrolled in the Support Fund, with their effective date being the following month after their start.\nIf for any reason a Team Member wishes to opt out of the Support Fund, please notify\nTotal-Rewards@gitlab.com\n.\nTotal Rewards will notify the Non-US Payroll Team, who will start deductions from your paycheck and WTW will notify Allianz to enroll you into the plan. Team Members should expect a contract from Allianz via post mail within 8 weeks of enrollment.\nIf a team member does not receive a contract within the first 2 months of enrollment, please contact .meinebAV@wtwco.com\nEnrolling or Changing Your Contributions into Direct Insurance\nTeam members interested in enrolled into the Direct Insurance Plan will need to\ncomplete the\nDirect Insurance agreement\nwith your desired contribution\nand send it to\nTotal-Rewards@gitlab.com\nand\nmeinebAV@wtwco.com\nbefore the 5th of the month.\nFollowing receipt, the Benefits Team will countersign and confirm with WTW on your updated contribution change.\nAs a reminder team members must elect at least 1% to receive the Employer Match.\nIf a Team member notifies Total Rewards before the 5th of the month that they want to change their Direct Insurance Plan contributions, changes will be reflected on the 1st of the current month. If they notify Total Rewards after the 5th of the month enrollment/changes will be reflected the 1st of the following  month. Total Rewards will inform WTW and Non-US Payroll of the change and when to update the change.\nThe team member will receive a new version of the contract (may take up to 8 weeks to receive the new contract), however in the meantime Payroll will update the contribution amount.\nOptions for existing direct insurance contracts with prior employer\nThere are two different options on how to handle existng direct insurance contracts:\nThere is a legal claim to the transfer of the value of the existing insurance (transfer of actuarial reserve) if, for example, it is a direct insurance that was concluded as a new commitment as of 01.01.2005. However, the transfer is only possible within 15 months of leaving the previous employer In this case, a new insurance policy is taken out on the basis of current legal principles. This may change the existing insurance cover. The value of the existing insurance will be included in the new insurance to be taken out\nOptionally, the existing contract can be continued privately contributory or non-contributory (in this case, GitLab will not take over the existing contract) and the employee takes out a new contract within the group contract with GitLab.\nTeam Members On Leave\nFor the Direct Insurance plan, Team Members on Leave, including unpaid, maternity, and paternity and extended Long Term Sickness (42 continuous calendar days of sick leave- 6 weeks) are not eligible to contribute on the plans while on leave.\nFor the Support Fund, during times the team members is not paid pensionable salary, support fund contributions will stop, with the exception of paid maternity and paternity leave.\nContributions will cease the month after the team member goes on leave.  ‚Äì For example if the team member goes on leave on May 2nd (i.e. they are active on the 1st of the month) they can continue the contribution for that month, the next month (June 1st) we will stop contribution. Contributions will start again the following month after the team member returns from leave.\nTeam Member Leaving the Company\nWhen a team member leaves the company, Total-Rewards will notify Allianz of the GitLab alumni‚Äôs leave date. The alumni can then expect a letter from Allianz with instructions on how to update the insurer of the pension plan from GitLab to the Team Member. Please contact\nmeinebAV@wtwco.com\n, if you have any questions or may not have received your letter from Allianz.\nGerman Social Security System\nGitLab and team members contributions to pension, health insurance, care in old age insurance and unemployment insurance are mandatory, as required by the state system. The payments are calculated each month by payroll and are shown on the employee pay-slips.\nFurther information can also be found on the\nGermany Trade & Invest Website\n.\nPersonal Accident Insurance\nEffective July 1, 2022 GitLab provides team members in Germany Personal Accident Insurance Coverage with Allianz Versicherungs-AG. All team members are automatically enrolled.\nDirect Entitlement is excluded from the plan, meaning the premiums are only taxed in the event of a claim payment. Insured value for death due to an accident is 1x annual salary- limited to 500,000 Euros, the insured value for dismemberment due to an accident is 2x annual salary for a 100% claim - limited to 1,000,000 Euros. For additional details please find the\nFact Sheet in English\nand the\nFact Sheet in German\n.\nIn the unfortunate event of an accident, please find the Group Personal Accident Flier in\nGerman\n& in\nEnglish\nwith information on how to report an accident and start a claim.\nAccidents at work that are fatal or lead to an inability to work for more than 3 days must be reported within three days of the accident to our Berufsgenossenschaft VBG.\nIf you had an accident, please review the criteria by reviewing the\nInformation panel\nto clarify if the accident is insured as a work accident\nIf it meets the criteria for a work accident, please fill in\nthis form\nand report your accident to the Absence Management Team by emailing the form to\nleaves@gitlab.com\n. Fields 2 and 28 will get completed by the Absence Management Team.\nThe Absence Management Team will\nnotify the VBG\nabout the accident report and inform the specialist for occupational safety.\nFurther things to note:\nThe injured team member has the right to a copy of the accident report and can request the final document by emailing\nleaves@gitlab.com\n.\nLife Insurance\nGitLab does not plan to offer different Life Insurance Benefits because team members can access employer insurance and government pension schemes to help with payments in the event of a death of a family member. The\nGitLab Life Insurance plan\nstill applies.\nGitLab GmbH Germany Leave Policy\nGitLab GmbH Germany Parental Leave\nTo initiate your Parental Leave, submit the dates in Workday by selecting\nParental Leave\nunder the\nLeaves\ndropdown menu. This will prompt the Absence Management team to process your leave. You can find out more information about our Parental Leave policy\nhere\n.\nStatutory Leave Entitlement\nMaternity Protection\nMaternity Leave\nRegardless of the length of service, under the Maternity Protection Act, pregnant team members are entitled to 6 weeks of leave prior to their estimated due date with full pay (\nMaternity pay\n). If a birthing parent does not give birth on the expected day, the period of protection before childbirth is shortened or extended accordingly. Team members may choose to opt-out of the six-week maternity protection period before their due date. This declaration can be revoked at any time with effect for the future.\nThe Maternity Protection period after the delivery is 8 weeks following the birth (or 12 weeks in case of multiple or premature birth and if the child is medically diagnosed with a disability within the meaning of sec. 2 para. 1 sentence 1 of Book 9 of the Social Code (Neuntes Buch Sozialgesetzbuch) before the end of eight weeks after delivery). Team members may not opt-out of the maternity protection period following childbirth. In case of premature delivery, the period of protection after delivery is extended by the period of reduction of the period of protection before delivery; if the child has been diagnosed with a disability in the sense described above, the period of protection after delivery is extended only if the birthing parent applies for it. The team member will receive full payment during this period. GitLab may receive reimbursement of these payments from the team member‚Äôs health insurance carrier. Please notify the Absence Management team at\nleaves@domain\nof your health insurance carrier name and your insurance number.\nUnder the Maternity Protection Act, a breastfeeding birthing parent may request time off during the first 12 months after delivery for the time necessary for breastfeeding, but at least twice a day for half an hour or once a day for one hour; the birthing parent retains the wage claim against the employer during the period of breastfeeding.\nParental Leave\nAll team members who are or become parents are entitled to take up to three years of Parental Leave.\nRegardless of the length of service, under German law employees may take up to three years of Parental Leave following the child‚Äôs birth, adoption or foster care placement. The entitlement is valid until a child reaches the age of three years. A period of up to 24 months may be taken between the child‚Äôs third birthday and the completion of his or her eighth year of life. The Parental Leave can be distributed over three time periods, without approval of the employer. Distribution over further periods is possible only with the employer‚Äôs consent.\nIn case a birthing parent takes Parental Leave subsequently to the child‚Äôs birth, the period of Maternity Leave is not credited for the Parental Leave. For expecting birthing parents, they may take the Maternity Protection period followed by Parental Leave. GitLab will provide full Parental Leave pay (provided the team member meets the\neligibility criteria\n) for up to 16 weeks of the total leave (not including the Maternity Protection period). The team member may apply for state benefits for the remainder of their Parental Leave.\nMaternity Leave Payment\nIf you are a member of the statutory health insurance, you are entitled to a maximum maternity allowance of 13 euros per day during the Maternity Protection Period. GitLab will supplement your pay so that you receive 100% of your salary for the duration of the Maternity Protection Period.\nIf you are privately insured and receive a daily sickness allowance during the Maternity Protection Period, GitLab will supplement your pay so that you receive 100% of your salary for the duration of the Maternity Protection Period.\nIf you are privately insured and will not receive a daily sickness allowance, you may qualify for a one-time payment of up to 210 euros from the\nFederal Social Security Office\n. GitLab will supplement your pay so that you receive 100% of your salary for the duration of the Maternity Protection Period.\nGitLab may receive reimbursement of these payments from the team member‚Äôs health insurance carrier. Please provide the Absence Management team at\nleaves@domain\nwith the name of your insurance provider and Versichertennummer (insurance number).\nThe Absence Management team will then send payroll the team member‚Äôs insurance details.\nIf you wish to take Parental Leave directly after your Maternity Protection Period ends, you may do so. If eligible, GitLab will pay up to 16 weeks of your total leave (not including the Maternity Protection period), the rest will be unpaid.\nTable for birthing person\nPeriod / Point in Time\nBeginning of Pregnancy\nNotification to Employer\nRemaining Pregnancy Time\n6 Weeks Before Due Date\nDay of Birth\n8 Weeks After Birth\nAfter Maternity Protection Ends\nUp to 12 Months After Birth\nMax. Until Child's 3rd Birthday\nSalary (As per German Law)\nRegular salary\nMaternity pay\nParental Leave Pay\nGitLab Parental Leave\nnot applicable\n16 weeks of fully paid Parental Leave(can be taken flexibly within 12 months after birth)\nnot applicable\nParental Leave Payment\nEligible team members may choose to receive government-funded Parental Leave Pay (Basiselterngeld, ElterngeldPlus or Partnerschaftsbonus). Please note:  Any benefits received will be reduced due to the payments received by GitLab.  If a team member chooses to apply for ElterngeldPlus they should notify leaves@domain, otherwise GitLab will provide 100% of their wages for up to 16 weeks.\nParents are generally entitled to a monthly parental allowance paid by the German state for the maximum of in total 14 months. The allowance is granted for the time between the child‚Äôs birth and completion of the 14th month of life.\nThe total amount of parental allowance months can be split up between the parents or taken by only one parent. The allowance‚Äôs amount is 67% of the income from employment before childbirth, but at least EUR 300 and a maximum of EUR 1,800. There is no entitlement to parental allowance in the case of foster children. Team members can find further information on Parental Leave benefits via the\nFederal Ministry for Family Affairs, Senior Citizens, Women and Youth\n.\nTable for partner of birthing person\nPeriod / Point in Time\nDuring Pregnancy\nDay of Birth\nUp to 12 Months After Birth\nMax. Until Child's 3rd Birthday\nSalary (As per German Law)\nRegular salary\nParental Allowance (if taking Elternzeit) or Regular Salary\nGitLab Parental Leave\nRegular salary\n16 weeks of fully paid Parental Leave (can be taken flexibly within 12 months after birth)\nReturn to work -> or Unpaid by GitLab\nTable for adopting persons\nPeriod / Point in Time\nDay of Adoption\nUp to 12 Months After Adoption\nMax. Until Child's 3rd Birthday\nSalary (As per German Law)\nRegular salary\nParental Allowance (if taking Elternzeit) or Regular Salary\nGitLab Parental Leave\nRegular salary\n16 weeks of fully paid Parental Leave (can be taken flexibly within 12 months after adoption)\nReturn to work -> or Unpaid by GitLab\nParental Leave and GitLab‚Äôs Global Parental Leave Policy\nGitLab GmbH employees in Germany are entitled to both the statutory German parental and Maternity Leave as well as\nGitLab‚Äôs global 16-week paid Parental Leave policy\n. Here‚Äôs how these policies interact:\nMaternity Leave: The statutory Maternity Leave period (minimum 14 weeks for single births) is separate from and precedes both statutory German Parental Leave and GitLab‚Äôs paid Parental Leave.\nParental Leave: When overlapping with statutory paternity leave, GitLab‚Äôs paid Parental Leave will substitute for the gaps in payment.\nNo statutory paternity/Maternity Leave: If the GitLab team member does not apply for any statutory leave regarding the birth of their offspring, they are still eligible for\nGitLab‚Äôs global 16-week paid Parental Leave policy\n.\nApplying for Parental Leave in Germany\nTeam members must register their Parental Leave in writing (wet signature) sent via mail to the German entity address:\nGitlab GmbH\nc/o RPI Roehm International\nElsenheimerstra√üe 7\n80687 M√ºnchen\nDeutschland\nParental leave must be registered 7 weeks before the desired start date if your child is under 3 years old, and 13 weeks prior to the desired start date if your child is between 3 and 8 years old.\nIf your child is under 3 years old, you must declare for which periods within the next two years you want to take Parental Leave for.\nA request for Parental Leave by facsimile or email does not comply with the written form requirement and is therefore void.\nPlease register your leave, in addition to the written application, by emailing leaves@domain.\nSubmit your Parental Leave in Workday by selecting the\nParental Leave\noption.\nPlease familiarize yourself with\nGitLab‚Äôs Parental Leave policy\n.\nPart-time work during Parental Leave\nDuring Parental Leave, employees are\nstatutorily entitled to part-time work\n(15 to 32 hours per week) if:\nThe employer usually employs more than 15 employees,\nthe employment relationship exists for at least six months,\nthe reduction is not opposed by urgent operational reasons, and\nthe employee has submitted the request in writing (wet signature, see above) seven weeks for the period up to the child‚Äôs third birthday and 13 weeks for the period between the child‚Äôs third birthday and the completion of his or her eighth year of life before the start of the part-time work.\nThe request must include the start and scope of the reduced working hours.\nFor expecting non-birthing parents, team members can apply for a state benefit (Basiselterngeld, ElterngeldPlus or Partnerschaftsbonus). If a team member is\neligible for Parental Leave\n, GitLab will supplement Parental Leave pay for up to 16 weeks of Parental Leave or pay the team member‚Äôs full salary for the 16-week Parental Leave, when used prior to the child‚Äôs first birthday. Please notify the Absence Management team at\nleaves@domain\nwhich state benefit you are applying for and how much you will be receiving so that payroll can process the appropriate supplementary amount. Team members can find further information on Parental Leave benefits via the\nFederal Ministry for Family Affairs, Senior Citizens, Women and Youth\n.\nhttps://handbook.gitlab.com/handbook/total-rewards/benefits/general-and-entity-benefits/#parental-leave\nVacation Leave\nTeam members are entitled to at least 20 vacation days which run concurrently with GitLab‚Äôs PTO policy. The days will accrue from the team member‚Äôs start date. In general, team members must take their annual vacation days during the calendar year, otherwise it is forfeited. However, unused vacation days can be carried forward until the 31st of March of the next calendar year if the team member was unable to take the holiday due to operational or personal reasons. Team members must designate all vacation time taken as\nPaid Time Off\nin Workday to ensure that vacation entitlement is properly tracked.\nLong-term Care Insurance (Pflegeversicherung)\nLong-term care insurance\nwas introduced on January 1, 1995 as an independent branch of social insurance. Comprehensive compulsory insurance applies to all those who are legally or privately insured. Everyone who has statutory health insurance is automatically covered by social long-term care insurance. Anyone who is insured in the statutory health insurance automatically belongs to the social long-term care insurance scheme.\nFamily Care Leave and Nursing Leave\nPer the\nFamily Care Leave Act and the Care Leave Act\n, in certain cases team members are able to receive partial or full care allowance as a wage replacement benefit. This is granted on request by the long-term care insurance (Pflegeversicherung) of the team member in need of care. Please contact the German citizen hotline for health insurance at (030) 340 60 66-01 or the German Federal Ministry of Health at poststelle (at) bmg.bund.de for more information. Please also review the\nCare Guide\nEligibility:\nTeam members who need time to organize or ensure the care of a close relative in need of care in an acute care situation leave for up to ten days;\nTeam members who care for a close relative or a close relative at home can also, under certain conditions, take full or partial leave of work for up to six months.\nGitLab must be informed at least ten working days before the leave commences.\nTeam members who accompany a close relative in the last phase of life can claim full or partial leave from work for up to three months;\nTeam members who care for a close relative in need of care in a home environment are entitled to family care leave, i.e. to a partial leave of absence for one continuous period of up to 24 months with a minimum of 15 working hours per week;\nIf the relative is underage, there is an entitlement to leave even if care takes place outside the home environment.\nThis leave runs concurrently with GitLab‚Äôs Sick Time policy. When partial paid leave is claimed, GitLab will supplement the team member‚Äôs benefit so that they receive 100% of their pay for the first 25 days of leave. Please contact the Absence Management team at\nleaves@domain\nto ensure your eligibility and provide awareness of your proposed leave.\nHow to Apply:\nTeam members must email leaves@domain proof of the relevant illness of the close relative by means of a medical certificate.\nSick Leave\nStatutory Sick Leave\nTeam members are entitled to 100% of their salary, to be paid by GitLab, for up to the first six weeks if they are unable to work due to an illness. This runs concurrently with GitLab‚Äôs\nSick Time\npolicy.\nIf a team member is sick for more than six weeks, they can apply for ‚ÄúKrankengeld‚Äù from their health insurer. The benefit amount will be less than the team member‚Äôs salary.\nBeginning January 1, 2023 team members with statutory health insurance are not required to provide GitLab with a hard copy of their certificate of incapacity to work (AU certificate). Instead, the health insurance company will provide corresponding incapacity data electronically and GitLab will then ‚Äúcall up‚Äù this data.\nTeam Members with private health insurance will still be required to email leaves@domain a hard copy of their certificate no later than the 4th day of illness.\nReporting Guidelines\nTeam members are still required to report their absence(s) to GitLab, but AU certificates are not required until after the 3rd day of an absence.  Beginning the first day, team members should notify their Manager first, and then enter the time away into Workday by selecting the label\nOut Sick\nunder the\nTime Offs\ndropdown menu.  After 3 days of continuous absences, team members should first notify the Absence Management team (leaves@domain) of their sick leave (including the start and anticipated end date) and then enter the time away into Workday using the label\nOut Sick\nunder the\nLeave Types\ndropdown menu.  The Absence Management Team will then ‚Äúcall up‚Äù the AU certificate on behalf of the team member.\nTeam Members with private health insurance will still be required to email leaves@domain a hard copy of their certificate no later than the 4th day of illness.\nDuring COVID-19\nWe encourage all team members to meet with a\nvirtual doctor\nfor the certificate to avoid the need to leave home.\nInfection Protection Act\nThe\nInfection Protection Act\nwas recently updated with a few\namendments\nrelated to entitlement to expanded children‚Äôs sickness benefits related to the Coronavirus. Please review the current law of the Infection Protection Act (IfSG)and contact your doctor to see how it applies to your situation and family.\nAdministrative Details for Benefits Team\nPersonal Accident Administration\nKey Date Reporting:\nApprox 3 Months prior to the renewal date, July 1st, the Total Rewards team will send the number of team members and the annual salaries covered in the plan to the Broker, WTW, to share with the insurer\nnicole.smole@willistowerswatson.com\nAnnual Salary definition: gross monthly remuneration of the last 12 months before the day of the accident. For persons who have not yet been employed for 12 months on the day of the accident, the remuneration paid up to that point is extrapolated to 12 months. Salary means the total monetary remuneration of a person including all allowances, not including bonuses or one-off payments.\nThe insurance cover of the team member shall commence as soon as he/she starts an employment relationship. The insurance cover of the team member shall lapse if he/she leaves the employment relationship with your existing employment relationship or resigns from the association.\nClaims Reporting\nOnce a Team Member files a claim, the compensation paymnet is transferred to the employer. In addition the insurer will inform the Total Rewards team that a payment has been made.\nTotal Rewards will notify non-US Payroll and Payroll will payout the claim accordingly and withhold taxes as applicable.\nPay slip provider\nCloudpay\nis the current pay slip provider. It is recommended to regularly download the pay slip pdf documents (German / English) and store them in a safe place. The provider also allows to access important tax documents:\nMeldebescheinigung zur Sozialversicherung (this is an important document to keep because in this is proof that you paid into the pension funds).\nAusdruck der elektronischen Lohnsteuerbescheinigung (yearly tax certificate)\nPost\nAny post sent to our German entity address is forwarded to RPI based in Germany and then scans are sent to payroll, RPI payroll and Vistra.\nCompany stamp\nOur legal council has the German company stamp and can stamp government forms for us. Please see ‚ÄòEntity & Co-Employer HR Contacts‚Äô in the People Connect 1password folder for contact details.\nEmail Signature\nDuring onboarding you may have been asked to set up your GitLab Gmail and your email signature using the following\nexample as a guideline\n. If you are a employed by our German entity, you will need to add some company related details to the end of your email signature as\nset out here\n(accessible internally to GitLab only).\nCompany details/Signature on Company Communications\nSome company related details are required to be added as a signature to certain forms of communication, where that communication is going from a team member employed by our German entity GitLab GmbH to outside of the company,\nand\nrelates to GitLab‚Äôs business activities. There are further details listed\nhere\n(accessible internally to GitLab only).\nUseful links\nPayroll calendar for GitLab GmbH\n(internal)\nPayroll-related information for GitLab GmbH\n(internal)\nLast modified February 19, 2025:\nFix Germany GmbH address (\ndd9c94ae\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 5078}
{"doc_id": "0b27416887d11be6", "url": "https://handbook.gitlab.com/handbook/product/product-principles", "title": "Product Principles | The GitLab Handbook", "text": "The Handbook\nProduct Handbook\nProduct Principles\nThese are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab.\nPrinciples\n-\nProcesses\n-\nCategories\n-\nGitLab the Product\n-\nBeing a PM\n-\nLeadership\nOur Product Principles\nThese are core principles that we believe will deliver world-class products through customer-centric innovation. Our goal is to build a practice that fosters these principles with the customers‚Äô voice at the core. Everything we do is for our customers, and we are only successful when they succeed in delivering secure software faster to their customers and internal users.\nWe are customer zero, therefore we use our own product:\nEverything you put into the product should be a feature you or our Engineering team would use as part of our daily work. If the answer is no, then challenge your ‚Äúwhy‚Äù, as there might be a better solution that will have a bigger impact for our customers.\nWe are not our only customer:\nMeet with customers as much as possible as everything we do is for them. It is tempting to assume that we understand our customers through our own usage and dogfooding, but that only gets you so far and we can be wrong. Validate assumptions through strategic user research, customer interviews, and feedback sessions.\nWe are design-led:\nIt does not matter what customer pain points you work with Engineering to resolve if what is provided to customers is hard (or almost impossible) to use. User experience is our top priority as we have a very technical product, however it should be easy enough for someone new to DevSecOps to get started quickly. This includes everything from onboarding to shipping secure software leveraging GitLab.\nWe value quality over velocity:\nDelivering incomplete features and capabilities to ensure your team achieves a defined velocity is not acceptable. Everything we ship to customers must be user validated, bug free, not introduce security vulnerabilities, be able to achieve GitLab.com scale, include documentation, and be available on all customer deployment choices simultaneously. Accruing additional technical debt in favor of velocity is also not acceptable as this leads to future quality issues around availability, scalability, reliability, and security.\nWe value data over intuition and anecdotes:\nEverything we build must have success metrics we can track to ensure we are providing value to our customers. We measure outcomes, not launches, and this is only possible with experimentation and proper instrumentation. All features must be instrumented so success metrics can be tracked and adjustments to plans can be made through product usage.\nWe fail fast and iterate with intention:\nDefine a hypothesis on how to address a customer use case or pain point and validate (or invalidate) it quickly through problem validation. Take the outcome of the problem validation cycle and build an iteration strategy to deliver it with a focus on usability and quality. Revalidate your hypothesis through solution validation with each iteration so you can adjust plans as needed. Problem and solution validation ensures the customer voice is key in making decisions.\nWe believe in product-led growth over unguided experiences:\nOur product should be GitLab‚Äôs best Sales team member, and its own biggest champion. Enable feature discovery moments to let customers know there is more value based on their usage, actions taken, or configuration choices. The more customers adopt our product‚Äôs capabilities, the more return on investment they experience, which builds more internal GitLab champions.\nWe like to win‚Ä¶and we only win as a team:\nWe win when our customers are able to successfully ship secure software faster with GitLab. This requires us to hold ourselves to the highest levels of execution and collaboration within Product across our Product Management, UX Research, Product Design, and Technical Writing teams. While teamwork within Product is necessary, it is also not sufficient. We require that same standard of execution and collaboration with our cross-functional team members across R&D and GTM. Together, as a global GitLab team, we can drive Results for Customers.\nHow we follow our Principles\nEnabling Collaboration\nFrom development teams to marketing organizations, everyone needs to collaborate\non digital content. Content should be open to suggestions by a wide number of\npotential contributors. Open contribution can be achieved by using a mergeable\nfile format and distributed version control. The\nmission of GitLab\nis to\nallow everyone to collaborate on all digital content\nso people can\ncooperate effectively and achieve better results, faster.\nBringing Ideas to Reality\nIdeas flow through many stages before they are realized. An idea originates in a\nchat discussion, an issue is created, it is planned in a sprint, coded in an\nIDE, committed to version control, tested by CI, code reviewed, deployed,\nmonitored, and documented. Stitching together all these stages of the DevOps\nlifecycle can be done in many different ways. You can have a marketplace of\nproprietary apps from different suppliers or use a suite of products developed\nin isolation.\nAs a single-application for the entire DevOps lifecycle, GitLab strives to enable you to bring ideas to production rapidly. We will do so AND avoid demonstrating our capabilities with toy app demos and simple trivial examples. That‚Äôs because we understand that\nbuilding a prototype is easy, but building a production line is hard\n.\nThe Minimal Valuable Change (MVC)\nMinimal Valuable Change (MVC) is the GitLab path to delivering the smallest measurable improvement for our users, customers, and the wider community.\nOur approach requires four pillars:\nRelentless customer focus and commitment to understanding their workflows, using research and validation\nMeasurable outcomes that use established metrics for success in tracking adoption, usage, or other business outcomes.\nProduct functionality that adheres to GA criteria listed in\nthe levels of support\nFuture vision to expand the MVC beyond the initial release\nWhen considering how to scope a feature for a release, remember that it is not ok to ship an ‚Äúincomplete‚Äù feature to customers (see the\ndefinition of done\n). Consider the use of Pajamas components for UI in your MVCs. When introducing a new component or pattern not found within Pajamas, it is the responsibility of that team to follow our\ncomponent lifecycle guidelines\nto\ndetermine whether it should be added\nand, if so, contribute the addition/update back to Pajamas.\nMVC means reducing the scope so we can ship quickly. It doesn‚Äôt mean shipping something that hurts the usability of GitLab. First impressions are important. A feature that does not offer enough value or hinders the user experience may have a negative effect that discourages users from trying that feature again in the future. If there are obvious gaps in your MVC or you can anticipate follow-up requests, consider whether your feature is complete enough to be released to users. If you are unsure whether your feature is complete enough to be an MVC (or if you know your feature is not complete enough to be an MVC and you want to gather additional feedback), you can use approaches such as dogfooding,\nbeta programs\n, feature flags, and/or user research to help build confidence in your decision. In terms of talking about your feature, it‚Äôs ok to add a release post item that announces your incomplete feature (making clear that it is an early iteration, and points to the direction for the feature) and follow up in a later release post with a new item when you‚Äôve completed more of the functionality. As long as you call it cookie dough, not a cookie, it manages user expectations.\nExamples:\nShip a feature through the API and not the UI -\nSee this release post\nas a great example of this approach was used to build a GraphQL endpoint for deleting attachment from a project.\nExposing a minimal set of functionality  -\nSee this release post\nwhere a basic read-only page displaying queued jobs was added and more capabilities were added in subsequent releases.\nThere are scenarios when an MVC approach is not advised. These include:\nWhen changing core parts of the experience - An example of a core experience is\ncomments\n. When building this out for work items, we waited to release the new feature to end users until we reached parity with comments in Issues and MRs.\nIteration\nAn MVC approach is a byproduct of our spirit of iteration. That means we\nbreak problems down\nas\nsmall as possible\n, and focus on\nreduced cycle time\n. Thinking iteratively is not always intuitive, and breaking certain topics or projects down can be challenging. Here‚Äôs a helpful\nvideo\nfrom our CEO with guidance on how to think more iteratively.\nHere is a\ngreat video\nthat illustrates how to build MVCs using Iteration. It shows Lego climbing obstacles. The first design fails. The second one can climb a book and so on. It also illustrates how modularity and good interfaces help with iteration as things get complex.\nIteration speed and product excellence\nTo ensure that our efforts consistently deliver value to our users, each iteration must adhere to the following guidelines:\nDefine Expected Impact: Clearly articulate the expected measurable positive impact of the iteration on users, ensuring alignment with our overall product direction and guided by a vision that has been informed by user research.\nEstablish Metrics for Success: Identify specific metrics that will be used to evaluate the success of the iteration before declaring the feature GA or an iteration shippable. These should be concrete, measurable indicators that directly relate to the intended outcomes of the iteration.\nThese metrics should define a measurable quality bar as part of the initial scoping as that allows the cross-functional team to understand what the success/quality criteria are before beginning to build, while also allowing these metrics to be measured during the entire development and post-release lifecycle. As part of defining the quality bar a test plan should be defined and agreed that it can measure against these measures for success. Quality targets include:\nNo S1 or blocking S2 defects/bug that prevents the customer from using the feature\nNot impacting or severely degrading the stability of the GitLab instance\nSuccess of an initiative is not measured by the deployment of a change or the completion of an iteration. True success is determined by whether the iteration achieved its predefined objectives, as evidenced by tangible business and product metrics.\nExample:\nEffort: Reduce latency in Service A.\nIteration A: Implement regional upgrades in key locations.\nSuccess Metrics: Evaluate the iteration‚Äôs success by measuring increased usage and user satisfaction with Service A. Relevant metrics might include service usage rates, user adoption levels, repeat usage statistics, and revenue increases following the upgrade.\nWe celebrate achievements when we can clearly see that an iteration or launch has resulted in tangible value for our users.\nSubtractive thinking\nHumans tend to\nfavor solutions that add features than solutions that remove them, even when removing features is more efficient\n- great PMs recognize this bias and utilize subtractive thinking to create great user experiences. Customers will tell us when we‚Äôre missing something they need, but they‚Äôre unlikely to explicitly tell us when we‚Äôre overwhelming them with unwanted features. However, we do have evidence that this challenge is already a consideration for us, as reflected consistently in our\nSystem Usability Scale verbatims\n. Here is\nan episode on the Hidden Brain podcast\nthat explores this bias further.\nSaaS First\nOur customers choose SaaS because it reduces their operating costs, helps them adopt the latest capabilities without performing upgrades, and provides them peace of mind of high availability. This principle implies the following:\nDesign features so that they can be released without downtime.\nRelease features in SaaS before self-managed or alongside it.\nThis principle does not mean SaaS only. For more information on parity between SaaS and self-managed, see our\nparity principle\n.\nFeedback issues\nAn MVC approach allows for maximum feedback while iterating. To help gather that feedback, Product Managers are encouraged to create feedback issues (\nexample\n) to consolidate suggestions and experiences from users. Consider mentioning the feedback issue in any release post items and related implementation issue(s) for awareness.\nFeedback issues allow GitLab team members and the wider GitLab community to offer thoughts and suggestions for future iteration.\nFeedback issues are particularly encouraged for major new customer-facing features.\nThese issues can be closed at the end of the milestone following the milestone when they were introduced.\nCelebrate and Learn from Failures\nIt‚Äôs important that team members know they are encouraged by E-group to continue moving fast as GitLab grows and gets bigger as a company. This involves moving quickly even in the face of risk and complexity. In alignment with our\ntransparency value\n, we‚Äôd like to celebrate examples of failures or mistakes that were made while moving fast, where we ultimately learned from it and moved on.\nThe following failures provided by the product team are celebrated as opportunities to gain insight, share learnings and move on with additional knowledge:\nWe initially believed we should create a lift and shift translator for Jenkins, but learned from users and technical experts that it wasn‚Äôt technically feasible and it would be better to invest in more detailed documentation and guidance.\nWith Auto DevOps, we discovered the desire for composability and the need to iterate on your DevOps platform makes a one-pipeline fits all capability miss the mark for tackling that user pain.\nWe integrated with some monitoring and observability tools as MVCs (Jaeger) that were just too MVC to give us data points on their success.\nWe relied upon ‚ÄúMVC‚Äù not including on by default and usable by default - resulting in lots of MVCs that we thought would garner us new information, but did not.\nWe spent time delivering a marketplace offering, and had very little traction. We learned marketplace offerings alone are not a vehicle for adoption, and we need a sales alignment with the marketplace vendor to achieve success.\nWe had duplication of effort between Quality and Distribution. We didn‚Äôt recognize / resolve this for too long. We have learned to better integrate Quality into the planning process.\nData telemetry in general has been one of our failures. We didn‚Äôt invest in telemetry seriously or early enough, and we attempted to accelerate via a 3rd party, but didn‚Äôt do a good enough job talking to our community on the best ways to roll that out.\nWe failed to capture significant users with APM.\nInternal Deck for Reference\nHistorically, designers had been instructed to not spend time on problem validation, but we had a PM who realized in order for her group to be successful, she needed her design counterpart to be deeply involved in validation work.\nWe learned that GitLab‚Äôs original Serverless strategy was dependent on immature technology and not necessarily aligned with the market winner Lambda. This resulted in GitLab stopping investment in Serverless.\nWe recognized a big gap in security concerns with GitLab managed clusters, which was prohibiting this feature from being adopted by customers. Once we learned from this ‚Äòfailure‚Äô we introduced the Kubernetes agent instead.\nIf you have a failure that can serve as a learning opportunity, please make an MR to this page\nAvoid ‚ÄúNot Invented Here‚Äù Syndrome\nJust because something is\nnot invented here\ndoesn‚Äôt mean it doesn‚Äôt have a perfect home within our solution. GitLab is an\nOpen Core product and is part of the broader ecosystem of Open Source tools in\nthe market. Every day there are new innovative open source tools out there that solve\nreal-world customer problems; we should not be afraid of embedding these tools\ninto our own products in order to solve those same problems for our customers\ntoo. Leveraging existing technology allows us to get to market much more quickly,\nto contribute to Open Source (and help strengthen Open Source as a whole), and\nallows us to focus our own people on making GitLab itself better. Building\nprofessional relationships with these tool creators also is a positive for GitLab\nsince they may have important user perspectives around your categories.\nWe have achieved many successes following this approach:\nCode Quality\nin CI/CD pipelines by embedding\nCodeClimate\nFeature Flags\nby using the\nUnleash\nclient library\nMobile publishing\nby writing about how to utilize\nFastLane\nwith GitLab\nThere are also many more examples throughout the company where this has been successful.\nAs a product manager you should be monitoring the world of Open Source as it\nrelates to your area to see where new innovative tools are being developed, and\nnot be afraid of integrating those. One thing to keep in mind, integrating could\nbe anything from a blog post describing how the tool works together with GitLab\nall the way up to bundling it inside of our own installation, and this can\nevolve iteratively.\nConvention over Configuration\nWe understand that a natural inclination when using application development tools is to create an array of buttons to press and knobs to turn. We believe, however, that adding options to an application does not necessarily improve the user‚Äôs experience of that application. The best way to serve our users is to create an application that reduces complexity while still offering the features they need.\nInspiration\nWe admire other ‚Äúconvention over configuration‚Äù tools‚Äîlike\nRuby on Rails\n(the doctrine of which perfectly describes the\nvalue of integrated systems\n),\nEmber\n, and\nHeroku\n‚Äîand we strive to offer the same advantages for continuous delivery of software.\nFurthermore, Ruby on Rails has significantly and positively influenced the Ruby community, uplifting the tool and making it more powerful and useful than ever before. We want GitLab to be to Kubernetes what Rails is to Ruby.\nYou should prefer well-considered choices based on current best practices. Avoid unnecessary configuration. Avoid configuration to support fragile workflows.\nConfiguration Principles\nWhen considering adding new configuration, we follow the following principles:\nEnsure a great experience by default\n- GitLab should work perfectly right out of the box for most users. While it should be resisted, sometimes configuration is inevitable or preferable. Your configuration must not make that\nexperience worse\nand should always\nget out of the way of the user\n.\nGitLab.com values should be the default\n- the settings used on GitLab.com should be the defaults for self-managed. Not only does this provide a consistent experience for users, but we get the highest fidelity feedback via GitLab.com. If we find that the GitLab.com setting is wrong, it is usually wrong for self-managed too. If you believe you have a strong case for using custom (non-default) settings for GitLab.com, please document the justification in alignment with your Product Section Lead. Any custom (non-default) settings for GitLab.com need to be\ntracked here\n.\nEncourage favorable behaviors by limiting configuration\n- Convention also implies that we‚Äôre encouraging our customers to do things\nin a certain way. A very concrete example of this is the ability to disable pipelines. We believe that our integrated solution will give a superior user experience and we‚Äôre motivated to encourage this behavior. For this reason, adding a configuration to allow disabling this permanently (be that in a template or instance-wide), is something that should be avoided.\nDesign for users not intermediaries\n- GitLab should avoid falling into the\nBlackboard trap\nof building a product that administrators of GitLab love because it is configurable, but developers and other users of GitLab hate because it is overly complex and confusing.\nWorking by Default\n- From the perspective of someone using GitLab, the feature does not exist until it works by default. This means, with few exceptions, features should simply work on GitLab.com and self-managed installations of GitLab without setup, toggling feature flags, modifying GitLab Omnibus (\ngitlab.rb\n) or Charts configurations, or installing extra components. This is more difficult than ‚Äúenabled by default,‚Äù which implies that features may be available by default but then require additional effort to set up. Working by default is worth the extra thoughtfulness and effort, because it enables an extremely important outcome: It allows customers to easily adopt our entire platform and experience the benefits of a single app for the entire DevOps lifecycle. In order to be properly working by default a feature needs two things:\nEnabled-by-default\n- it must not require modifying GitLab Omnibus (\ngitlab.rb\n) or Charts configurations, installing extra components on the host machine, or be behind a feature flag. When features are not enabled-by-default most people will never benefit from it because admin access to the GitLab application or the host machine will be needed. Feature flags should be consistently ON for both GitLab.com and self-managed users whenever possible.\nEnabled-by-default can be rolled out incrementally. A feature can sometimes be activated within days via a feature flag on\nGitLab.com\n. Other times a feature can take months to prove that it has the performance and visibility enterprises need.\nSetup-by-default\n- it should not require the setup before the feature can be used. We should ensure every feature has sensible defaults, and automatically migrate existing users/groups/projects to have the new features setup by default, while ensuring that the security and infrastructure costs would not be substantially affected. It is important to remember that most people are not likely to take the extra effort to setup a new feature, nor will they be aware that the feature has been added. The vocal proponents of issues who a Product Manager might interact with would likely be inclined to take the extra effort to setup a feature, but most people will not.\nAvoid Limits\n- Limits should be in place to\nprotect the system\nbut not to ‚Äúslowly try out‚Äù a feature. By limiting the usefulness of a feature right from the start the only thing you are achieving is limiting its adoption and usefulness. If you are going to default to OFF or limited, you must have a good, documented reason for this.\nAvoid configuration completely when possible\n- Requests for configuration can be a proxy for trying to support a fragile workflow. Rather than enabling bad habits and incurring product debt, effort should be spent helping customers adopt best practices.\nConfiguration builds up over time\n- Every configuration option in GitLab multiplies its complexity, which means the application is harder to use, harder to develop, and less friendly to users.\nConfiguration is hard to remove\n- Removing a configuration after it shipped and in use is much more work than not introducing it in the first place. This is because you change the behavior for customers that selected the less popular option.\nConfiguration is an expensive testing mechanism\n- It‚Äôs a natural reaction to propose a big change to be configurable, as you worry it‚Äôll negatively affect certain users. However, by making a feature configurable, you‚Äôve now created\ntwo problems\nto maintain going forward. Adding a configuration is a\none way door\nthat should be avoided if possible. As a result, consider using feature flags instead of configuration.\nAlways Allow for Deploying to Production\nSometimes fast deployments are needed to fix a service or application outage that can cost a business money and reputation, we understand time is of the essence in these situations. That‚Äôs why we believe giving the team control over this is important in crucial moments of the development lifecycle. Controls that prevent changes from reaching Production are okay as safeguards, but they should be able to be quickly removed or disabled if necessary. When controls are changed in this way, logs or records should be created to support post-mortem analysis and allow for understanding why the control needed to be removed or disabled.\nDesign for self-managed for feature parity between deployments\nWe want to provide the same capabilities to end users regardless of the method they choose to use GitLab (GitLab SaaS, Dedicated or Self-managed). All GitLab SaaS environments leverage the same installation method available to self-managed users, with a different licensing structure. By designing and implementing features for self-managed, we achieve maximum parity between the various installations.\nA few examples:\nDesign features to avoid downtime since it‚Äôs not acceptable for SaaS nor self-managed users.\nIt is ok to release functionality to SaaS first, as long as the solution is applicable for self-managed too.\nWhile a feature can be enabled first on SaaS via a\nfeature flag\nor setting, the underlying implementation must also exist, although disabled, on self-managed.\nIn line with our\nSaaS-first\nprinciple, some features may be released on SaaS to gain operational experience and apply learnings prior to recommending and supporting customers using it. Features would be present on self-managed codebase but are disabled until General Availability.\nFor functionality where implementation may be especially challenging without cloud services, for example with AI, self-managed functionality may be dependent on an underlying SaaS service. This allows us to provide end users the same capabilities regardless of deployment type, and not overly constrain our feature set or impose significant operational complexities on each deployment. Product managers need to be aware that this may impact the adoption of these features, as not all customers may be willing or able to leverage underlying SaaS services, such as air-gapped deployments.\nPrincipled adherence to the established knowledge architecture\nException to this product principle requires CEO approval. Work with VP, Product Management to add your request to the Product Scale agenda describing the situation and request for exception to gain CEO approval.\nOur\nsimplicity\nand\nSaaS/Self-Managed Parity\nprinciples require that we adhere to our established knowledge architecture. Our established architecture is\nOrganization\n,\nGroup\nand\nProject\n.\nWhen we need to add capabilities that an admin needs to apply across the entire organization, then we provide them at the organization level.\nWhen we need to add capabilities that need to apply across all projects in a group, but not applicable to all groups in an organization, then we provide them at a group level.\nWhen we need to add capabilities that need to apply across a specific project, but not all projects in a group, then we provide them at a project level.\nFor capabilities our users want applied to a set of groups, it is tempting to create another aggregation concept for a ‚Äúset of groups‚Äù. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all groups at the organization level or for each group in the set individually.\nFor capabilities our users want applied to a set of projects, it is tempting to create another aggregation concept for a ‚Äúset of projects‚Äù. We do not consider that until it is available both at the project and group level for a few months. The solution is to implement it for all projects at the group level or for each project in the set individually.\nNote: This implies that we will take pains to avoid instance-level features as we expect to move all capabilities from instance to organization over time.\nTake pains to avoid instance-level features\nAfter making a tier decision on a new feature, we should strive to maximize the number of users who can use it.\nAs part of this objective, we should avoid building instance-level features when possible. Building at the instance level (in the\nadmin area\n) leads to\na separation between GitLab.com and self-managed\nand limits\nyour audience to self-managed customers only:\nHistorically (and even net-new proposed features) we‚Äôve often started with an ‚Äúinstance-wide‚Äù mindset which then means we need to iterate and adjust features to work at a group-level. This often delays functionality for our SaaS customers and makes GitLab.COM feel like a second-class citizen.\nThere are factors that may justify an instance-level feature, like\nengineering efficiency\nand\nhigh infrastructure cost\n, but we should always have a clear view on how we might bring the feature to GitLab.com and clearly document why we started with the instance-level in the issue.\nDeciding whether to add configuration\nFor a GitLab instance in\ngitlab.yml\nProduct Managers at GitLab are frequently confronted with the choice of whether to add new configurations or not. These can frequently be times where an outside perspective is important. That‚Äôs why we‚Äôve created the option to request a\nNew Config Review\n.\nHere‚Äôs an example of how to consider whether to add new configuration. Let‚Äôs say you are proposing we add a checkbox or two radio boxes in a feature dialog box. Think carefully about what users really want. Most of the time, you‚Äôll find you really only need one solution, so remove the other option. When two possible choices really are necessary, the best or most common one should be the default, and the other one\nshould be available. If the non-default choices are significantly less common, then consider taking them out of the main workflow for making decisions, by putting them behind an Advanced configuration tab, for example.\nAvoiding configurations is not always possible. When we have no choice,\nthe secondary priority is to configure something in the GitLab\ninterface.\nA configuration should only appear in a file (\ngitlab.rb\nor\ngitlab.yml\n) as a last resort.\ngitlab.yml\nis the configuration file used by the Rails application. This is where the domain is configured. Other configurations should be moved to the UI as much as possible and no new configurations should be added here.\ngitlab.rb\nis the configuration file for Omnibus-GitLab. It acts not only as\nan abstraction of the configuration of\ngitlab.yml\nfor GitLab-Rails, but also\nas the source for\nall configurations\nfor services included and managed within\nthe Omnibus-GitLab. Newly introduced services probably need to be configured\nhere.\nWhen you have to add a new configuration, make sure that the features and services are on by default. Only add a configuration line to either of these configuration files if the feature or service cannot be fully disabled from the admin UI.\nFor a GitLab CI configuration in\n.gitlab-ci.yml\nIf the decision to add a configuration follows the\nprinciples above\n, add it to the repository-specific CI configuration options and be sure to default it to the option that results in the best user experience. We are much more liberal with additions to CI configurations than Instance configurations.\nEvery feature is owned by a group\nFeatures should be owned by one group, including the respective DRIs of that group. Make sure that the documentation metadata and the\nfeatures.yml\nfor your team are kept up to date to make it easier for other teams to find the correct owner.\nThis principle is important because unowned product features are unsupervised, and continue to accrue technical debt over time. This increases the risk of performance and maintenance issues, which tend to only get resolved once the situation has become critical. In addition, by having clear DRIs for our entire surface area, teams are able to advocate for investment and/or removal of features. If you encounter a feature that does not seem to be owned or documented, work with the team that originally introduced the functionality to decide on ownership. If the feature is large and needs to be broken down, document which elements are owned by which team. If you cannot decide who should own the feature, escalate the decision to the lowest common reporting line between the involved teams. If there are features that no group wants to own, or features that a group no longer wants to own, that feature should be considered for deprecation and removal.\nUser Experience\nA highly usable interface with cohesive workflows and comprehensive documentation is a must to stay ahead of our best-in-class competitors. Work closely with the individuals in\nto achieve our user experience goals. The UX team has a high level of expertise in Product Design, Technical Writing, and UX Research. They can help decipher or decide how to simplify or avoid complexity. While our Product Designers\nreview user interface changes in merge requests\n, they are not limited to just the UI. Anything that impacts the user journey is relevant to them.\nKeep in mind these general user experience principles.\nStrive for simplicity:\nUsing GitLab should be easy. Users should think about the applications they are building and the teams they are collaborating with, not how to make our app work. Here‚Äôs a great read on\n‚ÄúDon‚Äôt make users think!‚Äù\nDepth over breadth:\nA world-class experience requires deep, powerful, useful features. To remain balanced, we must also identify capabilities that can be deprecated so we are adding depth while encouraging\nsubtractive thinking\n.\nBetter than before:\nOur\nMVC principle\npushes back against the notion that something must be better than nothing. Instead, we assess if the user experience is better than before by considering its value. Work with a Product Designer to evaluate tradeoffs and minimize\ndeferred UX\n.\nTimeless design:\nThe user experience should be relevant both today and years from now, so each release should encapsulate the best experience possible. Ask yourself, ‚ÄúHow would we build something if we knew this was the last time a team could touch it?‚Äù\nAdditionally, you can familiarize yourself with the\nUX team mission\nand\nGitLab‚Äôs Pajamas design system principles\n.\nBe Ambitious\nMany crazy, over-ambitious ideas sound like they are impossible just\nbecause no one else is doing them.\nSince we have amazing engineers and a culture of shipping minimal\nvaluable changes, we are able to accomplish many more ‚Äúimpossible‚Äù things than other organizations.\nThat‚Äôs why we‚Äôre shipping merge conflict resolution, why we shipped built-in CI\nbefore anyone else, why we built a better static pages solution, and why\nwe‚Äôre able to compete.\nHow this impacts Planning\nHere at GitLab, we are an\nambitious\ncompany and this means we\naim for big things with every release. The reality of taking chances and\nplanning aspirationally means that we won‚Äôt always be able to deliver everything\nthat we wanted to try in every release, and similar to our\nOKRs\n,\nwe believe this is a good thing. We don‚Äôt want to shy away from challenging\nourselves and always want to keep a sense of urgency, and aiming for more helps\nus do that. Also see\nthe importance of velocity\nWe arrived at our preference for ambitious planning after measuring our velocity and finding that our velocity was unchanged whether we scheduled ambitiously or scheduled for providing slack.\nDiscoverability without being annoying\nDiscovering new features can enhance the experience and unlock significant value for users. And the more users see and try our features, the faster we can get feedback to improve them.\nHowever, excessive feature discovery efforts can become irritating for users. This erodes trust and reduces engagement with other UI elements in the future. Even worse, they might leave GitLab due to this deteriorating experience. Context plays a significant role in how users engage with new functionality. By presenting features in a way that resonates with a user‚Äôs current situation and needs you increase the liklihood of them using this new functionality.\nWork with your product designer to improve the discoverability of your features. The Pajamas Design System has best practices and examples to support\nfeature discoverability\n. We can also design new patterns. The Growth team can also help you with this, as they think about things like onboarding new users and promoting feature use within the app while supporting, not annoying, the user.\nProduct Qualified Leads (PQLs)\nAs the GitLab userbase and team members who work on GitLab continue to grow we need to support both our users and team members by helping to connect users who may be interested in speaking with a member of the sales team to that particular person. We can call this a Product Qualified Lead or a PQL.\nA PQL can be further broken down into two types, usage and hand-raise\nUsage: A usage-based PQL is a user or a team (group or instance) that adopted the product to the level that we had data to support that they are statistically more likely to upgrade to a subscription compared to our remaining userbase. When this level of product adoption is achieved by the user or team an alert is triggered for the sales team to follow up with the user and/or team. The level of usage that triggers a usage-based PQL is something that will be determined and agreed upon between Product, Marketing, and Sales as the goal is to generate quality leads for the sales team. When the usage-based definition is agreed upon it will be added here.\nHand-Raise: A hand-raise PQL is a user who requests to speak to sales from within the product. Our goal is to introduce these hand-raise moments throughout the product at feature discovery moments, or moments where a user is learning more about a paid feature or tier of GitLab that they may find valuable. These moments should be contextually relevant to their usage and non-obtrusive\nsee Discoverability Without Being Annoying\n. A hand-raise moment in the product should be accompanied by either a trial CTA or a touchless upgrade CTA or both. We want to always provide options to our users as we want them to decide the path that best suits their needs.\nClarifiying out what a PQL is not\nA PQL is not a user that has only signed up for the product, they have not achieved a qualified status.\nA PQL is not a trial, a trial is a separate user adoption path. It‚Äôs important to note that a user could start a trial and then become a PQL or vice versa.\nThe future vision of PQLs within the GitLab product\nOur goal is to develop a world-class PQL system whereby we monitor product usage to understand and constantly iterate on what constitutes a usage-based PQL and provide a unified intelligent interface in the product where users can submit a hand-raise, start a trial or upgrade touchlessly.\nBy monitoring product usage, usage PQL volume, SAO rate, and ASP we will be able to work in partnership with marketing and sales to ensure we‚Äôre sending high quality leads to the sales team.\nIn the product experience, we will develop an intelligent module for feature discovery moments whereby we help recommend what we believe should be the preferred option for the user whether it‚Äôs a hand-raise, trial or touchless upgrade by updating the default CTA based on their usage of the product along with demographic and firmographic data. This experience will be present on both SaaS and self-managed instances for air-gapped instances the CTAs will provide the user with external URLs to visit to complete the associated step. This experience should be able to be deployed by any stage to further their paid adoption rate.\nDrive Product Usage\nUsers can only experience GitLab‚Äôs value when they actively use the product features. Therefore the Product team‚Äôs mission isn‚Äôt only shipping features and building products, but also driving usage and delivering value.\nThere are two frameworks we use to think about driving GitLab‚Äôs product usage: we use the AARRR framework to think about how to drive a single feature‚Äôs usage, and use the Customer Adoption Journey to think about cross-adoption of product features. These two frameworks are also interconnected with each other.\nSingle Feature usage: AARRR framework\nAARRR stands for\nAcquisition\n,\nActivation\n,\nRetention\n,\nRevenue\n, and\nReferral\nwhich is often referred to as\n‚ÄúPirate Metrics‚Äù\n. These five words represent the customer journey and the various means a product manager may apply Product Performance Indicators to drive a desired behavior in the funnel.\nWhile the AARRR framework is commonly used to drive overall active users, it is also a great way for PMs to think about how to drive feature usage.\nAcquisition measures user actions that show awareness of the feature\nActivation illustrates a user has begun to apply the feature\nRetention is the continued use of the feature over time\nRevenue captures the monetary value acquired from feature usage\nReferral focuses on measuring behaviors that drive users to encourage others to consume the feature\nclassDiagram\nAcquistion : Are users aware of the product or feature set?\nAcquistion: Measurement (Insert Metric)\nActivation : Are users applying the feature?\nActivation: Measurement (Insert Metric)\nRetention : Are users applying the feature over time?\nRetention: Measurement (Insert Metric)\nRevenue : Are users paying for the features?\nRevenue: Measurement (Insert Metric)\nReferral : Are users encouraging others to use the feature?\nReferral: Measurement (Insert Metric)\nAdd AARRR funnels for your stage or group‚Äôs Product Performance Indicators directly with mermaid markdown. It‚Äôs easy if you use this\nlive editor\n.\nProduct managers can use these various states to prioritize features that drive a desired action. This could mean focusing on the Activation metric to drive awareness and generate more\ntop of funnel\nleads. As an example, in the\nRelease stage\nthe Release Management group tracks actions on the Release Page in GitLab. Users that view a Release Page have been\nacquired\nand those that create a release on a Release Page are\nactivated\nusers. The Product Manager can choose to target features that drive users to view the Release Page more, resulting in a greater interest in the number of users that become activated and create their own Releases.\nMulti-feature usage: Adoption Journey\nGitLab is a complete DevOps platform. Our customers get the most value out of the GitLab product when they use multiple features together. Below is the most common path our customers follow to adopt GitLab‚Äôs product stages.\nAs PMs, in addition to driving usage of individual features, we should also proactively think about how to design product and user experiences to help users adopt more stages and features, therefore benefiting more from using GitLab.\ngraph TD;\nid1(Create - 99%) --> id2(Plan - 91%)\nid3(Verify - 84%) --> id4(Secure - 36%)\nid1 --> id5(Manage - 35%)\nid3 --> id7(Package - 7%)\nid6 --> id9(Monitor - 8%)\nid6 --> id10(Configure - 2%)\nid6 --> id11(Software Supply Chain Security - 28%)\nThe percentage here is defined as % of monthly active paid ultimate-tier self-managed instances that adopted that stage. The data is captured directly in the Golden Journey Paths chart (which has been deprecated).\nThe Golden Journey: The bolded path is the ‚ÄúGolden Journey‚Äù where we observe as the most common stages adopted by paid customers and serve as foundation to adopt other stages: it starts from Create, then goes to Verify and Release. If the Golden Journey is complete, all stages of GitLab are available for use. Our biggest opportunity is to improve Verify to Release adoption rate.\nNote: There are numerous potential variants to this adoption journey, but it‚Äôs important to keep this representation simple and consistent. Please check with David DeSanto first before making any changes to the adoption journey image.\nFlow One\nShipping only MVCs can result in a large set of loosely connected pieces that\ndon‚Äôt necessarily combine into a single, great user experience.\nAn obvious solution to this would be to plan out the future in detail,\ncreating a long-term detailed plan. However, this is unwanted as it can restrict\nyour flexibility and ability to respond to changing needs or feedback.\nFlow One offers an alternative. You draw out a workflow consisting of\nMVCs (that can be shipped individually). The workflow should only cover a\nspecific, narrow use-case, and nothing more.\nThis means you:\navoid creating an inflexible, long-term plan\ncan more easily construct a full feature/ capability, which is more easily marketed\ncan provide context to each individual change (‚Äúwe need this as part of X‚Äù)\ncan continue to ship MVCs\nwork concurrently on several items, none of which are blocking\nFlow One should cover the first iteration of a particular workflow.\nAfter this, individual MVCs can be introduced to expand the use-cases\nor loosen the assumptions (e.g. from a feature that can only be used\nif you‚Äôre using feature branches, to one that works for other git strategies).\nData-driven work\nUsing data to learn from our users is important. Our users are spread across GitLab.com\nand self-managed instances, so we have to focus our efforts on learning and\nproviding benefit to both when we decide to collect more data, or build and use\nadditional analytics tools. If we do this, we can help make the rest of the\ncompany successful as well. This means that we should:\nBuild and use tools that work for both GitLab.com and self-managed.\nStart from a question, and build / collect what we need to answer that question. This avoids wasting time with data we don‚Äôt need.\nUse and improve existing tools we have inside of GitLab before leaning towards off-the-shelf products.\nOur customers, sales team and customer success teams all benefit greatly from similar insights into their usage as the product team does. Make things that help all of these people.\nNo artificial limits in Core\nPer\nGitLab Stewardship\n, we will not introduce\nartificial\nlimits in Core. Artificial means\narbitrarily setting a small number (such as: 1) as a limit on a given GitLab object category,\nthat would incur\nno additional\neffort or cost had we chosen a larger number. The additional\neffort includes product, design, and engineering effort to create the feature in the first place,\nand to maintain it over time.\nFor example, GitLab Core has the\nissue board feature\nin every project.\nIn GitLab EE, each project supports\nmultiple boards\n.\nThis\ndoes not\nmean that Core has an artificial limit of one board per project, because there is additional effort\nto manage multiple boards such as supporting the navigation interface, and all the associated engineering work.\nThis principle does not apply to our SaaS offering as limits are occasionally introduced to limit our hosting costs and protect other users from potential abuse. As an example we have\nshared runner\nminute quotas and implement\nrate limiting\n.\nAvoid enforced workflows but allow enterprise flexibility\nWe‚Äôre discussing enforced workflows\nin this issue\n.\nEnforced workflows should be avoided in GitLab. For example, there are three issue\nstates (\nOpen\n,\nIn Progress\n(as of 10.2), and\nClosed\n), and any issue should be\nallowed to transition from one state to any other state\nwithout workflow restrictions. (Roles and permissions is a separate concern.)\nEnforced workflows restrict GitLab to a smaller number of use cases, thus reducing the value of GitLab.\nEnforced workflows require overhead to maintain in the product. Each new feature\nmust account for any existing enforced workflows.\nWe should trust our users to use GitLab responsibly, giving them freedom, instead\nof imposing enforced workflows that we think made sense at the time of design and implementation.\nA comment on Hacker News\nperfectly details what can go wrong when enforcing workflows:\n‚ÄúThe down side for the true end-users, those who actually use the software day-to-day,\nis that most business processes are awful. If your experience is the hellish existence\nthat I see strolled about on threads where JIRA comes up ‚Ä¶:\nYour admin(s) set it up once and hasn‚Äôt bothered to iterate on those workflows.\nThe business mapped their autonomy stripping processes onto JIRA intentionally.\nI‚Äôd guess that most of your work experience is similar. Process stifled nonsense.‚Äù\nBut that comment also specifies the advantage:\n‚ÄúJIRA‚Äôs most powerful feature is that it affords for mapping businesses processes onto software.\nThis is incredibly compelling to enterprise customers. Software that enforces workflows, procedures\nand requirements can be an incredible lever and JIRA‚Äôs price point makes build vs buy decisions an absolute no-brainer.‚Äù\nWe should ensure that GitLab makes it easy to help with enterprise workflows:\nWhen starting a branch with an issue (number) we link it to the branch.\nWhen merging an MR you automatically close the issue(s) it fixes.\nIn GitLab CI you can define your deployment stage progression (staging, pre-production, production) including manual approval.\nWe run quality and security tools automatically and provide dashboards to check status instead of making it a step in the process.\nWe limit the impact of mistakes with incremental rollout and automatic rollback.\nWhen considering a customer need for enforcement or limitations:\nDeeply understand and document the underlying customer problem. It‚Äôs our responsibility to understand the need we are solving for before we even consider imposing controls.\nSolve for individual use cases first. Trying to solve a specific problem with a non-specific solution is risky and not\niterative\n. Instead, start with a single use case and build a specific, non-enforced solution in GitLab.\nConsider the smallest group of users first. Don‚Äôt reach for instance-wide controls, but instead iterate from the smallest segment possible (e.g. a sub-set of projects).\nProvide simple workarounds and overrides. Consider extreme scenarios like recovering from a SEV-1 incident; there should always be a simple, fast escape hatch.\nAs an example, customers requested instance-wide enforcement through required CI jobs. Doing this would have been a mistake. Instead:\nWe understood their problem more deeply, and realized we could build capabilities to perform these checks in existing primitives (like\nexternal rules\nin MR approvals).\nWe limited the scope of the problem, and avoided any limitations at the instance-level. Instead, we planned to keep the impact as small as possible by requiring customers to scope this feature to only projects with a particular\ncompliance framework\n.\nWe intentionally planned for workarounds. A developer should be able to override these limitations inside merge requests, such as with\ntwo-person approvals\n. They should also be able to create subgroups that aren‚Äôt subject to these controls.\nWhile workflow enforcement should be avoided in most cases, there are organizations that rely on enforced workflows for a variety of reasons. These organizations have problems adapting existing workflows as they move to GitLab and as a result, we should consider allowing some enforcement at the group level in order to balance team efficiency and organizational policy. Page 79 of [Accelerate](https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339) outlines \"teams that reported no approval process or used peer review achieved higher software delivery performance.\" As we implement features to allow organizations to enforce workflows, we should do so at the group level and default them off. GitLab should be a product teams use to accelerate product development, but flexible enough to solve for requirements of all sizes of organizations.\nPrefer small primitives\nSmall primitives are building blocks in GitLab. They are an abstraction\nnot\nat\nthe technical level, but truly at the product level. Small primitives can be combined,\nbuilt-upon further, and otherwise leveraged to create new functionality in GitLab.\nFor example, the label lists in\nissue boards\nuse the smaller primitive of\nlabels\n.\nThey are especially powerful because they usually take less effort\nand\nprovide\nhigher leverage than you would get from a more ‚Äúcomplete‚Äù but standalone feature.\nThink of how simple Unix command line utilities can be chained together to do\nreally complicated things, much easier (and certainly more flexibly) than you\ncould have done with a dedicated tool.\nWhen iterating on GitLab, strongly consider using small primitives instead\nof creating new abstractions, especially when considering MVC features\nthat will provide the foundations for further improvements. To do this\nyou can start with easy to apply concepts that meet the needs of intermediate\nto advanced users; from here document the usage clearly and be sure to think about\ndiscoverability. The UX can very often be refactored or enhanced later when there‚Äôs\na demonstrated need for refinement, onboarding for less sophisticated users, or\nother new abstractions needed that were identified through real-world usage.\nComponent Principles\nIn GitLab the product, it is sometimes the case that optional software or infrastructure is required to enable new capabilities. Some examples include:\nInfrastructure in the form of Runners are required to enable use of GitLab CI/CD\nInfrastructure and software in the form of Elasticsearch is required to enable Advanced Search\nSoftware in the form of the Kubernetes Agent is required to enable GitOps pull-based workflows\nThe following are best practices we consider when building such components.\nStart with enabling Developers\nAs we learned with GitLab CI/CD, the ability for developers to quickly attach needed Runners to enable their own use of GitLab CI/CD allowed for rapid adoption of GitLab CI/CD within an organization. When considering the workflow to enable additional capabilities, start with enabling developers first. A guiding principle should be\nlow-friction\ndeveloper enablement, which will positively impact adoption.\nBuild for production use, not demo use\nAs we learned from the certificate-based Kubernetes Integration, building starting experiences that support demoing a getting-started process doesn‚Äôt necessarily translate into real usage. For example, the certificate-based integration lacked strong security primitives and the ability to manage the integration on an ongoing basis. As a result, we should build capabilities that target real-world production use first, even as part of MVCs.\nIntegrate other applications thoughtfully\nGitLab‚Äôs vision is to be the best single application for every part of the DevOps toolchain. However, some customers use tools other than our included features, and we respect those decisions. With this in mind, it‚Äôs sometimes valuable to integrate with 3rd-party services and products to help\nbridge the gaps\nin their toolchain. While a single application is the best approach, multiple applications that work well together is better than ones that don‚Äôt.\nWith this in mind, below are some product guidelines to consider:\nDon‚Äôt clone everything\nDon‚Äôt feel like we need to\nclone every feature\nof an integrated product. Ultimately, this approach costs us the most possible resources, while creating an experience that will always be sub-par compared to the native one offered by the other application. We should focus our efforts on places where we can deliver value by helping bridge the gap between the two applications.\nHere are some potential (completely theoretical) examples, highlighting the difference between cloning vs. bridging:\nIn an event log, surface only recent activity and link to a full log on the other system, instead of trying to display all records inside of GitLab.\nIn an issue/ticket, offer only the most used functionality, like commenting or status changes, instead of trying to replicate all possible actions.\nPrevent broken workflows for free\nBased on the quote above:\n‚ÄúWhile a single application is the best approach, multiple applications that work well together is better than ones that don‚Äôt.‚Äù\nFeatures and UX that might break a customers workflow should be offered freely. In particular, we should offer features that help customers avoid productivity antipatterns like allowing multiple sources of truth (multiple wikis) or duplicating work (not showing work activity on an issue).\nCharge for adding value to an interaction\nBy having such an incredible breadth, GitLab has\nthe opportunity to add value to external features that they could never otherwise have\n, if not integrated with GitLab. For example, our excellent\nTo Dos\nfeature puts actionable work at the fingertips of developers, and it‚Äôs a feature somewhat unique to GitLab. Many other tools make it harder to identify work that needs immediate action, so by integrating those tools with this part of GitLab,\nwe can make them even more powerful than they‚Äôd be alone.\nConsider the right buyer for pricing\nWhile we typically think about who is\nusing the functionality\nas an indicator of our buyer, this may not be appropriate for your integration.\nWhen an integration is driven by an organizational requirement (such as having all teams in the company use Jira),\nBuyer Based Tiering\nlikely indicates that the integration is for\nmultiple team\n(Premium) or\nstrategic organizational\n(Ultimate) use.\nWhen an integration is\nextending GitLab capabilities\n, the buyer is more likely to be the end-user, similar to how we‚Äôd think about pricing other GitLab functionality.\nLow level of shame still applies here\nWhen we start to integrate with another product, it‚Äôs almost like opening a whole new Category of work. With this in mind, a friendly reminder that\nlow level of shame\napplies, just like it would anywhere else. The integration may not be very valuable\ntoday\n, but it‚Äôs just a starting place, and we should use our first iteration to validate what belongs in the next one.\nTrack the maturity of the integration\nLike any other category of work, we should track the maturity of the integration somewhere that‚Äôs visible. Consider adding your integration to the Ecosystem Integrations direction page, which contains a table that tracks our high-priority integrations and their maturity levels.\nRespect security and permissions\nExternal applications may have security and permissions concerns that we don‚Äôt have in our application. We should take careful consideration of these, since ignoring them could be potentially disastrous for our users. For example, if we ask a user for an administrative token with full access and then display content in our UI based on those privileges, we could potentially display sensitive data that shouldn‚Äôt leave that application.\nNavigation\nIntegrations should be as discoverable as any native GitLab feature, if they‚Äôre enabled. In cases where the two features are mutually exclusive, we should allow the user to hide our native functionality to prevent confusion. For example, having two project management tools is a (generally)\nbad\nidea. Collaborators may end up filing issues in the wrong tool, slowing down their velocity and worsening their overall experience. Reducing velocity is antithetical to the value GitLab provides.\nWhen features\naren‚Äôt\nmutually exclusive (there‚Äôs nothing wrong with using\nmultiple\nsecurity scanning services, for example), we should group navigation to those integrations near our own.\nUse empty states for feature discovery\nConsider adding an\nempty state\nthat highlights the availability of this integration. If someone is not using the GitLab feature\nand also not\nintegrating their tool of choice, that‚Äôs the worst possible experience. We should respect the choices of our users, and if they‚Äôve decided to use a 3rd-party tool that we integrate with, we shouldn‚Äôt hide that option in a dark corner.\nThis is also a great opportunity to educate the user on what GitLab can offer relative to other products. It‚Äôs the best of both worlds: promoting our own features while helping them improve their current experience, regardless of choice.\nUse our own design language\nJust because we‚Äôre leveraging\nfunctionality\nfrom a 3rd-party service doesn‚Äôt mean we should allow that service‚Äôs UI to dictate what ours looks like. GitLab has its own\ndesign language\n, and by keeping it cohesive across the application, we create a significantly better experience for our users.\nBe transparent about the data source\nWhen data is populated from an external source, make it clear that it comes from elsewhere. This prevents confusion, reduces cognitive load, and ensures that users are well informed about the choices they‚Äôre making when interacting with the application.\nAvoid plugins and commercial marketplaces\nNote\n- We intend to provide a place where everyone can contribute, such as\ncode snippets\n,\nproject templates\nand CI components in the\nCI/CD Catalog\n. Marketplaces are traditionally transaction based, where users are purchasing solutions. GitLab CI/CD components on the other hand, will offer an in product experience for consuming components for YAML configuration from a library of\nGitLab maintained components\n.\nClosed source software vendors commonly depend on plugins and commercial marketplaces because:\nThese allow third parties the ability to add functionality without needing access to the underlying codebase.\nThird parties can charge for the plugins, which gives them an incentive to build them.\nBecause GitLab is an\nopen core product\n, third parties can add functionality directly to GitLab. Adding directly to the GitLab codebase (as opposed to building a plugin)\nmay\nmean more work for them and will limit the ways in which they can charge for that functionality.\nHowever, for\nusers of GitLab\n, this has significant advantages:\nThey are more likely to use this functionality, because it‚Äôs distributed to all users by default.\nThe functionality always works out of the box,\nrequiring no additional software\n.\nUsers don‚Äôt have to search for what plugins are available, or test multiple options to see which one works the best.\nInstallations can‚Äôt have varying combinations of plugins, making it easier to use and support the product.\nAdministrators never have to avoid an upgrade for fear that it might break an important plugin since all code is tested together.\nAnd for\ndevelopers of GitLab\nincluding the third parties, this has significant advantages as well:\nTheir work isn‚Äôt limited in functionality, because they‚Äôre changing the code of the product itself.\nTheir code will be tested along with the rest of the product as things change refactoring is easier, reducing the likelihood that it suffers from\nsoftware atrophy\nbecause something is hard to change.\nCommunity effort is not wasted on developing multiple plugins that all ultimately do the same thing and compete with each other for usage.\nDevelopers don‚Äôt have to sacrifice\nvelocity in favor of predictability\n, since they don‚Äôt have to worry about breaking the plugin API.\nOverall, we believe that this approach creates the best possible experience for both the users of and the contributors to GitLab, and to that end we encourage people to\ncontribute functionality to GitLab directly\n.\nIf adding code directly to GitLab isn‚Äôt an option, we encourage third-parties to integrate through our\nAPIs\n.\nNote: GitLab does support\nplugins that respond to system hooks\n, which tie directly to application events and are primarily used for administrative purposes such as auditing, logging, and other administrative tasks.\nProduct and feature naming guidelines\nGive products and features descriptive, not distinctive, names\nGitLab is a DevOps Platform, not a collection of DevOps point solutions; the naming of GitLab products and features should reflect this. Adopting descriptive names brings other advantages:\nIt‚Äôs\nefficient\n. Descriptive names are generally not eligible for trademark registration, avoiding the time, effort, and expense of clearing, filing, and maintaining trademark registrations.\nIt‚Äôs\ninclusive\n. Descriptive names are most accessible to a global audience because they can be directly translated into other languages, reducing the risk of loss of meaning inherent in translating abstract, metaphorical, or colloquial names.\nAs an\nexample\n,\nCI/CD Components Library\nis a descriptive name while\nis a distinctive name.\nExceptions to this principle are considered in limited circumstances - if a product or feature is a differentiator in the market, adopting a descriptive name risks it getting lost in the\nsea of same\n. Here, a distinctive name may be justified. To discuss an exception, reach out to\n#marketing\nin Slack.\nUse prepositions when referring to third-party products and services in names\nWhen naming a GitLab extension, plugin, app, or integration for a third-party product or service (a ‚Äútool‚Äù), either include the third-party service name with a preposition like\nfor\n, or don‚Äôt include it at all. A preposition is important as it indicates that the third party isn‚Äôt officially affiliated with the tool. For example, our\nintegration with Jira Cloud\nis called\nGitLab.com for Jira Cloud\n.\nProvided we use the tool‚Äôs full name in marketing materials and technical documentation, as exceptions to this general principle we can: (1) refer to the tool solely by the third-party service name in places where we list GitLab‚Äôs tools in product; and (2) refer to the tool solely as ‚ÄúGitLab‚Äù in the third-party product‚Äôs app directory. For example, we refer to the GitLab for Slack app as ‚ÄúSlack‚Äù in our lists of GitLab integrations, and as ‚ÄúGitLab‚Äù in the\nSlack App Directory\n.\nFor more guidance on the feature naming process, see\nnaming features\n.\nNext Generation\nWhile our\nbig, hairy, audacious goal\nspans all development processes, personas, and use-cases, there are primary targets in each one of these venues.\nWhen considering prioritization we should first aim to provide complete\nmaturity\nfor developers building cloud native applications in a modern way prior to moving to other development methodologies, personas, and application types.\nModern first\nWhen developing features to compete with existing competitors, make sure to\nsolve problems for modern development teams first, and\nthen\nsee what‚Äôs missing\nfor legacy teams. e.g. For project management, make great project management\ncapabilities for teams doing conversational development, lean, or even agile\ndevelopment before doing Scaled Agile Framework (SAFe) or waterfall.\nIt‚Äôs important that modern first does not mean non-modern never. It means that\nwe should first learn how teams are using the feature in a modern way, and then\nsee what‚Äôs missing. The modern way provides the path forward, and then we can add\ncustomizability or the path to modern for teams who are not quite there yet.\nDeveloper first\nOur strategy includes going after a lot of new personas, going from developers to\noperations, security, product managers, designers, etc. But when developing\nfeatures in these new areas, it‚Äôs important to remember to start with the\ndeveloper. If we can make security great for developers and\nthen\ngreat for\nsecurity professionals, we‚Äôll be much more successful.\nCloud-native first\nDevelopment teams deploy to tons of different platforms, from bare metal to\ncloud VMs to cloud-native Kubernetes clusters. We build features for\ncloud-native first, and\nthen\nsupport the rest. This allows us to focus on\nwhere development is going, and deliver solutions that every company aspires to\nuse eventually, even if they‚Äôre not ready to today.\nPrioritize current adopters\nBy focusing on next-generation development flows, personas, and use cases - we build features and experiences where our initial users are in the relatively small population of early adopters. While we might build experiences to support them today, we presume there will always be a much larger population of future users of these experiences. Therefore, we optimize GitLab to support the larger number of current and future adopters of next-generation principles - those who are beginning to operate in the workflow (modern), team setup (developer first), or application architectures (cloud native) we support. We focus our investment in the most modern workflows that will best support those current adopters. This will come at the cost of sustained investment in initial workflows for early adopters. When doing so we will ensure we clearly communicate with our users what the preferred path is.\nFor example - We first provided the ability to attach Kubernetes Clusters via the Certificate method. After realizing this wasn‚Äôt optimal for production use cases we added the GitLab Agent for Kubernetes method of cluster attachment. As soon as we were certain that the certificate method was no longer the preferred method we communicated via our docs and in the product that the Agent was the preferred path for current adopters. This should not mean an immediate\ndeprecation\n, but a clear signal that the legacy method will become deprecated once the alternative approach is able to substitute it.\nCustomer Support on all features\nWe provide customer support to paying customers on all features that are in the tier of their paid license as well as any lower tiers.\nThis means a feature in Core, should get customer support in all paid tiers.\nFor example, when there is a feature that is available in the lowest paid tier, but only has customer support in higher tiers,\nthe feature should be removed from that lowest paid tier.\nIn accordance with our\nstewardship policy\nwe can never remove features from Core into paid tiers,\nbut we can build additional features around it which are available to paying customers only.\nLast modified July 4, 2025:\nMove division specific includes to folder (\na74a8182\n)\nView page source\n-\nplease\ncontribute\n.", "num_words": 11190}
